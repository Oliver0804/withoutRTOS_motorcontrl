
main.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009fdc  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000a60  0800a0f0  0800a0f0  0001a0f0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ab50  0800ab50  000201f4  2**0
                  CONTENTS
  4 .ARM          00000000  0800ab50  0800ab50  000201f4  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800ab50  0800ab50  000201f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ab50  0800ab50  0001ab50  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ab54  0800ab54  0001ab54  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f4  20000000  0800ab58  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000007d8  200001f4  0800ad4c  000201f4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200009cc  0800ad4c  000209cc  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201f4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001f557  00000000  00000000  0002021d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000040b6  00000000  00000000  0003f774  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000012f8  00000000  00000000  00043830  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001128  00000000  00000000  00044b28  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000197e9  00000000  00000000  00045c50  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00013ddc  00000000  00000000  0005f439  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0007cd7c  00000000  00000000  00073215  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000eff91  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005ae0  00000000  00000000  000f000c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001f4 	.word	0x200001f4
 800012c:	00000000 	.word	0x00000000
 8000130:	0800a0d4 	.word	0x0800a0d4

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001f8 	.word	0x200001f8
 800014c:	0800a0d4 	.word	0x0800a0d4

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800029e:	f1a4 0401 	sub.w	r4, r4, #1
 80002a2:	d1e9      	bne.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2uiz>:
 8000a88:	004a      	lsls	r2, r1, #1
 8000a8a:	d211      	bcs.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a90:	d211      	bcs.n	8000ab6 <__aeabi_d2uiz+0x2e>
 8000a92:	d50d      	bpl.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a9c:	d40e      	bmi.n	8000abc <__aeabi_d2uiz+0x34>
 8000a9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aa6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_d2uiz+0x3a>
 8000abc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0000 	mov.w	r0, #0
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_d2f>:
 8000ac8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000acc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ad0:	bf24      	itt	cs
 8000ad2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ad6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ada:	d90d      	bls.n	8000af8 <__aeabi_d2f+0x30>
 8000adc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ae0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000af0:	bf08      	it	eq
 8000af2:	f020 0001 	biceq.w	r0, r0, #1
 8000af6:	4770      	bx	lr
 8000af8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000afc:	d121      	bne.n	8000b42 <__aeabi_d2f+0x7a>
 8000afe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b02:	bfbc      	itt	lt
 8000b04:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b08:	4770      	bxlt	lr
 8000b0a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b12:	f1c2 0218 	rsb	r2, r2, #24
 8000b16:	f1c2 0c20 	rsb	ip, r2, #32
 8000b1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b22:	bf18      	it	ne
 8000b24:	f040 0001 	orrne.w	r0, r0, #1
 8000b28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b34:	ea40 000c 	orr.w	r0, r0, ip
 8000b38:	fa23 f302 	lsr.w	r3, r3, r2
 8000b3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b40:	e7cc      	b.n	8000adc <__aeabi_d2f+0x14>
 8000b42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b46:	d107      	bne.n	8000b58 <__aeabi_d2f+0x90>
 8000b48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b4c:	bf1e      	ittt	ne
 8000b4e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b52:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b56:	4770      	bxne	lr
 8000b58:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b5c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b60:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop

08000b68 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	b084      	sub	sp, #16
 8000b6c:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig;

    /**Common config
    */
  hadc1.Instance = ADC1;
 8000b6e:	4b23      	ldr	r3, [pc, #140]	; (8000bfc <MX_ADC1_Init+0x94>)
 8000b70:	4a23      	ldr	r2, [pc, #140]	; (8000c00 <MX_ADC1_Init+0x98>)
 8000b72:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000b74:	4b21      	ldr	r3, [pc, #132]	; (8000bfc <MX_ADC1_Init+0x94>)
 8000b76:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000b7a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000b7c:	4b1f      	ldr	r3, [pc, #124]	; (8000bfc <MX_ADC1_Init+0x94>)
 8000b7e:	2201      	movs	r2, #1
 8000b80:	60da      	str	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000b82:	4b1e      	ldr	r3, [pc, #120]	; (8000bfc <MX_ADC1_Init+0x94>)
 8000b84:	2200      	movs	r2, #0
 8000b86:	615a      	str	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000b88:	4b1c      	ldr	r3, [pc, #112]	; (8000bfc <MX_ADC1_Init+0x94>)
 8000b8a:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8000b8e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000b90:	4b1a      	ldr	r3, [pc, #104]	; (8000bfc <MX_ADC1_Init+0x94>)
 8000b92:	2200      	movs	r2, #0
 8000b94:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 2;
 8000b96:	4b19      	ldr	r3, [pc, #100]	; (8000bfc <MX_ADC1_Init+0x94>)
 8000b98:	2202      	movs	r2, #2
 8000b9a:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000b9c:	4817      	ldr	r0, [pc, #92]	; (8000bfc <MX_ADC1_Init+0x94>)
 8000b9e:	f001 ffa1 	bl	8002ae4 <HAL_ADC_Init>
 8000ba2:	4603      	mov	r3, r0
 8000ba4:	2b00      	cmp	r3, #0
 8000ba6:	d003      	beq.n	8000bb0 <MX_ADC1_Init+0x48>
  {
    _Error_Handler(__FILE__, __LINE__);
 8000ba8:	2145      	movs	r1, #69	; 0x45
 8000baa:	4816      	ldr	r0, [pc, #88]	; (8000c04 <MX_ADC1_Init+0x9c>)
 8000bac:	f001 f9ea 	bl	8001f84 <_Error_Handler>
  }

    /**Configure Regular Channel
    */
  sConfig.Channel = ADC_CHANNEL_8;
 8000bb0:	2308      	movs	r3, #8
 8000bb2:	607b      	str	r3, [r7, #4]
  sConfig.Rank = 1;
 8000bb4:	2301      	movs	r3, #1
 8000bb6:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000bb8:	2300      	movs	r3, #0
 8000bba:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000bbc:	1d3b      	adds	r3, r7, #4
 8000bbe:	4619      	mov	r1, r3
 8000bc0:	480e      	ldr	r0, [pc, #56]	; (8000bfc <MX_ADC1_Init+0x94>)
 8000bc2:	f002 f961 	bl	8002e88 <HAL_ADC_ConfigChannel>
 8000bc6:	4603      	mov	r3, r0
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	d003      	beq.n	8000bd4 <MX_ADC1_Init+0x6c>
  {
    _Error_Handler(__FILE__, __LINE__);
 8000bcc:	214f      	movs	r1, #79	; 0x4f
 8000bce:	480d      	ldr	r0, [pc, #52]	; (8000c04 <MX_ADC1_Init+0x9c>)
 8000bd0:	f001 f9d8 	bl	8001f84 <_Error_Handler>
  }

    /**Configure Regular Channel
    */
  sConfig.Channel = ADC_CHANNEL_7;
 8000bd4:	2307      	movs	r3, #7
 8000bd6:	607b      	str	r3, [r7, #4]
  sConfig.Rank = 2;
 8000bd8:	2302      	movs	r3, #2
 8000bda:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000bdc:	1d3b      	adds	r3, r7, #4
 8000bde:	4619      	mov	r1, r3
 8000be0:	4806      	ldr	r0, [pc, #24]	; (8000bfc <MX_ADC1_Init+0x94>)
 8000be2:	f002 f951 	bl	8002e88 <HAL_ADC_ConfigChannel>
 8000be6:	4603      	mov	r3, r0
 8000be8:	2b00      	cmp	r3, #0
 8000bea:	d003      	beq.n	8000bf4 <MX_ADC1_Init+0x8c>
  {
    _Error_Handler(__FILE__, __LINE__);
 8000bec:	2158      	movs	r1, #88	; 0x58
 8000bee:	4805      	ldr	r0, [pc, #20]	; (8000c04 <MX_ADC1_Init+0x9c>)
 8000bf0:	f001 f9c8 	bl	8001f84 <_Error_Handler>
  }

}
 8000bf4:	bf00      	nop
 8000bf6:	3710      	adds	r7, #16
 8000bf8:	46bd      	mov	sp, r7
 8000bfa:	bd80      	pop	{r7, pc}
 8000bfc:	2000067c 	.word	0x2000067c
 8000c00:	40012400 	.word	0x40012400
 8000c04:	0800a0f0 	.word	0x0800a0f0

08000c08 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	b088      	sub	sp, #32
 8000c0c:	af00      	add	r7, sp, #0
 8000c0e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  if(adcHandle->Instance==ADC1)
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	681b      	ldr	r3, [r3, #0]
 8000c14:	4a28      	ldr	r2, [pc, #160]	; (8000cb8 <HAL_ADC_MspInit+0xb0>)
 8000c16:	4293      	cmp	r3, r2
 8000c18:	d149      	bne.n	8000cae <HAL_ADC_MspInit+0xa6>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000c1a:	4b28      	ldr	r3, [pc, #160]	; (8000cbc <HAL_ADC_MspInit+0xb4>)
 8000c1c:	699b      	ldr	r3, [r3, #24]
 8000c1e:	4a27      	ldr	r2, [pc, #156]	; (8000cbc <HAL_ADC_MspInit+0xb4>)
 8000c20:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000c24:	6193      	str	r3, [r2, #24]
 8000c26:	4b25      	ldr	r3, [pc, #148]	; (8000cbc <HAL_ADC_MspInit+0xb4>)
 8000c28:	699b      	ldr	r3, [r3, #24]
 8000c2a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000c2e:	60fb      	str	r3, [r7, #12]
 8000c30:	68fb      	ldr	r3, [r7, #12]

    /**ADC1 GPIO Configuration
    PA7     ------> ADC1_IN7
    PB0     ------> ADC1_IN8
    */
    GPIO_InitStruct.Pin = ADC1_Pin;
 8000c32:	2380      	movs	r3, #128	; 0x80
 8000c34:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000c36:	2303      	movs	r3, #3
 8000c38:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(ADC1_GPIO_Port, &GPIO_InitStruct);
 8000c3a:	f107 0310 	add.w	r3, r7, #16
 8000c3e:	4619      	mov	r1, r3
 8000c40:	481f      	ldr	r0, [pc, #124]	; (8000cc0 <HAL_ADC_MspInit+0xb8>)
 8000c42:	f002 fead 	bl	80039a0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ADC2_Pin;
 8000c46:	2301      	movs	r3, #1
 8000c48:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000c4a:	2303      	movs	r3, #3
 8000c4c:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(ADC2_GPIO_Port, &GPIO_InitStruct);
 8000c4e:	f107 0310 	add.w	r3, r7, #16
 8000c52:	4619      	mov	r1, r3
 8000c54:	481b      	ldr	r0, [pc, #108]	; (8000cc4 <HAL_ADC_MspInit+0xbc>)
 8000c56:	f002 fea3 	bl	80039a0 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8000c5a:	4b1b      	ldr	r3, [pc, #108]	; (8000cc8 <HAL_ADC_MspInit+0xc0>)
 8000c5c:	4a1b      	ldr	r2, [pc, #108]	; (8000ccc <HAL_ADC_MspInit+0xc4>)
 8000c5e:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000c60:	4b19      	ldr	r3, [pc, #100]	; (8000cc8 <HAL_ADC_MspInit+0xc0>)
 8000c62:	2200      	movs	r2, #0
 8000c64:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000c66:	4b18      	ldr	r3, [pc, #96]	; (8000cc8 <HAL_ADC_MspInit+0xc0>)
 8000c68:	2200      	movs	r2, #0
 8000c6a:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000c6c:	4b16      	ldr	r3, [pc, #88]	; (8000cc8 <HAL_ADC_MspInit+0xc0>)
 8000c6e:	2280      	movs	r2, #128	; 0x80
 8000c70:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000c72:	4b15      	ldr	r3, [pc, #84]	; (8000cc8 <HAL_ADC_MspInit+0xc0>)
 8000c74:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000c78:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000c7a:	4b13      	ldr	r3, [pc, #76]	; (8000cc8 <HAL_ADC_MspInit+0xc0>)
 8000c7c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000c80:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000c82:	4b11      	ldr	r3, [pc, #68]	; (8000cc8 <HAL_ADC_MspInit+0xc0>)
 8000c84:	2220      	movs	r2, #32
 8000c86:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000c88:	4b0f      	ldr	r3, [pc, #60]	; (8000cc8 <HAL_ADC_MspInit+0xc0>)
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000c8e:	480e      	ldr	r0, [pc, #56]	; (8000cc8 <HAL_ADC_MspInit+0xc0>)
 8000c90:	f002 fc16 	bl	80034c0 <HAL_DMA_Init>
 8000c94:	4603      	mov	r3, r0
 8000c96:	2b00      	cmp	r3, #0
 8000c98:	d003      	beq.n	8000ca2 <HAL_ADC_MspInit+0x9a>
    {
      _Error_Handler(__FILE__, __LINE__);
 8000c9a:	2181      	movs	r1, #129	; 0x81
 8000c9c:	480c      	ldr	r0, [pc, #48]	; (8000cd0 <HAL_ADC_MspInit+0xc8>)
 8000c9e:	f001 f971 	bl	8001f84 <_Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	4a08      	ldr	r2, [pc, #32]	; (8000cc8 <HAL_ADC_MspInit+0xc0>)
 8000ca6:	621a      	str	r2, [r3, #32]
 8000ca8:	4a07      	ldr	r2, [pc, #28]	; (8000cc8 <HAL_ADC_MspInit+0xc0>)
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	6253      	str	r3, [r2, #36]	; 0x24

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000cae:	bf00      	nop
 8000cb0:	3720      	adds	r7, #32
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	bd80      	pop	{r7, pc}
 8000cb6:	bf00      	nop
 8000cb8:	40012400 	.word	0x40012400
 8000cbc:	40021000 	.word	0x40021000
 8000cc0:	40010800 	.word	0x40010800
 8000cc4:	40010c00 	.word	0x40010c00
 8000cc8:	200006ac 	.word	0x200006ac
 8000ccc:	40020008 	.word	0x40020008
 8000cd0:	0800a0f0 	.word	0x0800a0f0

08000cd4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	b082      	sub	sp, #8
 8000cd8:	af00      	add	r7, sp, #0
  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000cda:	4b0c      	ldr	r3, [pc, #48]	; (8000d0c <MX_DMA_Init+0x38>)
 8000cdc:	695b      	ldr	r3, [r3, #20]
 8000cde:	4a0b      	ldr	r2, [pc, #44]	; (8000d0c <MX_DMA_Init+0x38>)
 8000ce0:	f043 0301 	orr.w	r3, r3, #1
 8000ce4:	6153      	str	r3, [r2, #20]
 8000ce6:	4b09      	ldr	r3, [pc, #36]	; (8000d0c <MX_DMA_Init+0x38>)
 8000ce8:	695b      	ldr	r3, [r3, #20]
 8000cea:	f003 0301 	and.w	r3, r3, #1
 8000cee:	607b      	str	r3, [r7, #4]
 8000cf0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	2100      	movs	r1, #0
 8000cf6:	200b      	movs	r0, #11
 8000cf8:	f002 fb83 	bl	8003402 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000cfc:	200b      	movs	r0, #11
 8000cfe:	f002 fb9c 	bl	800343a <HAL_NVIC_EnableIRQ>

}
 8000d02:	bf00      	nop
 8000d04:	3708      	adds	r7, #8
 8000d06:	46bd      	mov	sp, r7
 8000d08:	bd80      	pop	{r7, pc}
 8000d0a:	bf00      	nop
 8000d0c:	40021000 	.word	0x40021000

08000d10 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	b088      	sub	sp, #32
 8000d14:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d16:	4b31      	ldr	r3, [pc, #196]	; (8000ddc <MX_GPIO_Init+0xcc>)
 8000d18:	699b      	ldr	r3, [r3, #24]
 8000d1a:	4a30      	ldr	r2, [pc, #192]	; (8000ddc <MX_GPIO_Init+0xcc>)
 8000d1c:	f043 0310 	orr.w	r3, r3, #16
 8000d20:	6193      	str	r3, [r2, #24]
 8000d22:	4b2e      	ldr	r3, [pc, #184]	; (8000ddc <MX_GPIO_Init+0xcc>)
 8000d24:	699b      	ldr	r3, [r3, #24]
 8000d26:	f003 0310 	and.w	r3, r3, #16
 8000d2a:	60fb      	str	r3, [r7, #12]
 8000d2c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d2e:	4b2b      	ldr	r3, [pc, #172]	; (8000ddc <MX_GPIO_Init+0xcc>)
 8000d30:	699b      	ldr	r3, [r3, #24]
 8000d32:	4a2a      	ldr	r2, [pc, #168]	; (8000ddc <MX_GPIO_Init+0xcc>)
 8000d34:	f043 0304 	orr.w	r3, r3, #4
 8000d38:	6193      	str	r3, [r2, #24]
 8000d3a:	4b28      	ldr	r3, [pc, #160]	; (8000ddc <MX_GPIO_Init+0xcc>)
 8000d3c:	699b      	ldr	r3, [r3, #24]
 8000d3e:	f003 0304 	and.w	r3, r3, #4
 8000d42:	60bb      	str	r3, [r7, #8]
 8000d44:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d46:	4b25      	ldr	r3, [pc, #148]	; (8000ddc <MX_GPIO_Init+0xcc>)
 8000d48:	699b      	ldr	r3, [r3, #24]
 8000d4a:	4a24      	ldr	r2, [pc, #144]	; (8000ddc <MX_GPIO_Init+0xcc>)
 8000d4c:	f043 0308 	orr.w	r3, r3, #8
 8000d50:	6193      	str	r3, [r2, #24]
 8000d52:	4b22      	ldr	r3, [pc, #136]	; (8000ddc <MX_GPIO_Init+0xcc>)
 8000d54:	699b      	ldr	r3, [r3, #24]
 8000d56:	f003 0308 	and.w	r3, r3, #8
 8000d5a:	607b      	str	r3, [r7, #4]
 8000d5c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000d5e:	2200      	movs	r2, #0
 8000d60:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000d64:	481e      	ldr	r0, [pc, #120]	; (8000de0 <MX_GPIO_Init+0xd0>)
 8000d66:	f002 ff90 	bl	8003c8a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, OUTPUT_M1_Pin|OUTPUT_M2_Pin, GPIO_PIN_RESET);
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	f44f 7140 	mov.w	r1, #768	; 0x300
 8000d70:	481c      	ldr	r0, [pc, #112]	; (8000de4 <MX_GPIO_Init+0xd4>)
 8000d72:	f002 ff8a 	bl	8003c8a <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000d76:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000d7a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d7c:	2301      	movs	r3, #1
 8000d7e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d80:	2302      	movs	r3, #2
 8000d82:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d84:	f107 0310 	add.w	r3, r7, #16
 8000d88:	4619      	mov	r1, r3
 8000d8a:	4815      	ldr	r0, [pc, #84]	; (8000de0 <MX_GPIO_Init+0xd0>)
 8000d8c:	f002 fe08 	bl	80039a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = INPUT_B1_Pin|INPUT_B2_Pin|INPUT_B3_Pin|INPUT_B4_Pin;
 8000d90:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8000d94:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000d96:	4b14      	ldr	r3, [pc, #80]	; (8000de8 <MX_GPIO_Init+0xd8>)
 8000d98:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000d9a:	2302      	movs	r3, #2
 8000d9c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d9e:	f107 0310 	add.w	r3, r7, #16
 8000da2:	4619      	mov	r1, r3
 8000da4:	4811      	ldr	r0, [pc, #68]	; (8000dec <MX_GPIO_Init+0xdc>)
 8000da6:	f002 fdfb 	bl	80039a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = OUTPUT_M1_Pin|OUTPUT_M2_Pin;
 8000daa:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000dae:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000db0:	2301      	movs	r3, #1
 8000db2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000db4:	2302      	movs	r3, #2
 8000db6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000db8:	f107 0310 	add.w	r3, r7, #16
 8000dbc:	4619      	mov	r1, r3
 8000dbe:	4809      	ldr	r0, [pc, #36]	; (8000de4 <MX_GPIO_Init+0xd4>)
 8000dc0:	f002 fdee 	bl	80039a0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	2100      	movs	r1, #0
 8000dc8:	2028      	movs	r0, #40	; 0x28
 8000dca:	f002 fb1a 	bl	8003402 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000dce:	2028      	movs	r0, #40	; 0x28
 8000dd0:	f002 fb33 	bl	800343a <HAL_NVIC_EnableIRQ>

}
 8000dd4:	bf00      	nop
 8000dd6:	3720      	adds	r7, #32
 8000dd8:	46bd      	mov	sp, r7
 8000dda:	bd80      	pop	{r7, pc}
 8000ddc:	40021000 	.word	0x40021000
 8000de0:	40011000 	.word	0x40011000
 8000de4:	40010800 	.word	0x40010800
 8000de8:	10110000 	.word	0x10110000
 8000dec:	40010c00 	.word	0x40010c00

08000df0 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000df0:	b580      	push	{r7, lr}
 8000df2:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 8000df4:	4b13      	ldr	r3, [pc, #76]	; (8000e44 <MX_I2C1_Init+0x54>)
 8000df6:	4a14      	ldr	r2, [pc, #80]	; (8000e48 <MX_I2C1_Init+0x58>)
 8000df8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000dfa:	4b12      	ldr	r3, [pc, #72]	; (8000e44 <MX_I2C1_Init+0x54>)
 8000dfc:	4a13      	ldr	r2, [pc, #76]	; (8000e4c <MX_I2C1_Init+0x5c>)
 8000dfe:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000e00:	4b10      	ldr	r3, [pc, #64]	; (8000e44 <MX_I2C1_Init+0x54>)
 8000e02:	2200      	movs	r2, #0
 8000e04:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000e06:	4b0f      	ldr	r3, [pc, #60]	; (8000e44 <MX_I2C1_Init+0x54>)
 8000e08:	2200      	movs	r2, #0
 8000e0a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000e0c:	4b0d      	ldr	r3, [pc, #52]	; (8000e44 <MX_I2C1_Init+0x54>)
 8000e0e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000e12:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000e14:	4b0b      	ldr	r3, [pc, #44]	; (8000e44 <MX_I2C1_Init+0x54>)
 8000e16:	2200      	movs	r2, #0
 8000e18:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000e1a:	4b0a      	ldr	r3, [pc, #40]	; (8000e44 <MX_I2C1_Init+0x54>)
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000e20:	4b08      	ldr	r3, [pc, #32]	; (8000e44 <MX_I2C1_Init+0x54>)
 8000e22:	2200      	movs	r2, #0
 8000e24:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000e26:	4b07      	ldr	r3, [pc, #28]	; (8000e44 <MX_I2C1_Init+0x54>)
 8000e28:	2200      	movs	r2, #0
 8000e2a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000e2c:	4805      	ldr	r0, [pc, #20]	; (8000e44 <MX_I2C1_Init+0x54>)
 8000e2e:	f002 ff5d 	bl	8003cec <HAL_I2C_Init>
 8000e32:	4603      	mov	r3, r0
 8000e34:	2b00      	cmp	r3, #0
 8000e36:	d003      	beq.n	8000e40 <MX_I2C1_Init+0x50>
  {
    _Error_Handler(__FILE__, __LINE__);
 8000e38:	2142      	movs	r1, #66	; 0x42
 8000e3a:	4805      	ldr	r0, [pc, #20]	; (8000e50 <MX_I2C1_Init+0x60>)
 8000e3c:	f001 f8a2 	bl	8001f84 <_Error_Handler>
  }

}
 8000e40:	bf00      	nop
 8000e42:	bd80      	pop	{r7, pc}
 8000e44:	200006f0 	.word	0x200006f0
 8000e48:	40005400 	.word	0x40005400
 8000e4c:	000186a0 	.word	0x000186a0
 8000e50:	0800a104 	.word	0x0800a104

08000e54 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000e54:	b580      	push	{r7, lr}
 8000e56:	b088      	sub	sp, #32
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  if(i2cHandle->Instance==I2C1)
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	4a0f      	ldr	r2, [pc, #60]	; (8000ea0 <HAL_I2C_MspInit+0x4c>)
 8000e62:	4293      	cmp	r3, r2
 8000e64:	d117      	bne.n	8000e96 <HAL_I2C_MspInit+0x42>

    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000e66:	23c0      	movs	r3, #192	; 0xc0
 8000e68:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000e6a:	2312      	movs	r3, #18
 8000e6c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000e6e:	2303      	movs	r3, #3
 8000e70:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e72:	f107 0310 	add.w	r3, r7, #16
 8000e76:	4619      	mov	r1, r3
 8000e78:	480a      	ldr	r0, [pc, #40]	; (8000ea4 <HAL_I2C_MspInit+0x50>)
 8000e7a:	f002 fd91 	bl	80039a0 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000e7e:	4b0a      	ldr	r3, [pc, #40]	; (8000ea8 <HAL_I2C_MspInit+0x54>)
 8000e80:	69db      	ldr	r3, [r3, #28]
 8000e82:	4a09      	ldr	r2, [pc, #36]	; (8000ea8 <HAL_I2C_MspInit+0x54>)
 8000e84:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000e88:	61d3      	str	r3, [r2, #28]
 8000e8a:	4b07      	ldr	r3, [pc, #28]	; (8000ea8 <HAL_I2C_MspInit+0x54>)
 8000e8c:	69db      	ldr	r3, [r3, #28]
 8000e8e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000e92:	60fb      	str	r3, [r7, #12]
 8000e94:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000e96:	bf00      	nop
 8000e98:	3720      	adds	r7, #32
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	bd80      	pop	{r7, pc}
 8000e9e:	bf00      	nop
 8000ea0:	40005400 	.word	0x40005400
 8000ea4:	40010c00 	.word	0x40010c00
 8000ea8:	40021000 	.word	0x40021000

08000eac <motor_control>:
/* Private function prototypes -----------------------------------------------*/

/* USER CODE END PFP */

/* USER CODE BEGIN 0 */
void motor_control(int dir, int pwm) {
 8000eac:	b580      	push	{r7, lr}
 8000eae:	b082      	sub	sp, #8
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	6078      	str	r0, [r7, #4]
 8000eb4:	6039      	str	r1, [r7, #0]
	if (setDir_flag >= 1) {
 8000eb6:	4b6a      	ldr	r3, [pc, #424]	; (8001060 <motor_control+0x1b4>)
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	d066      	beq.n	8000f8c <motor_control+0xe0>
		if (dir >= 1) {
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	dd1e      	ble.n	8000f02 <motor_control+0x56>
			OUTPUT_1_State = 1;
 8000ec4:	4b67      	ldr	r3, [pc, #412]	; (8001064 <motor_control+0x1b8>)
 8000ec6:	2201      	movs	r2, #1
 8000ec8:	601a      	str	r2, [r3, #0]
			OUTPUT_2_State = 0;
 8000eca:	4b67      	ldr	r3, [pc, #412]	; (8001068 <motor_control+0x1bc>)
 8000ecc:	2200      	movs	r2, #0
 8000ece:	601a      	str	r2, [r3, #0]
			HAL_GPIO_WritePin(OUTPUT_M1_GPIO_Port, OUTPUT_M1_Pin, 1);
 8000ed0:	2201      	movs	r2, #1
 8000ed2:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000ed6:	4865      	ldr	r0, [pc, #404]	; (800106c <motor_control+0x1c0>)
 8000ed8:	f002 fed7 	bl	8003c8a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(OUTPUT_M2_GPIO_Port, OUTPUT_M2_Pin, 0);
 8000edc:	2200      	movs	r2, #0
 8000ede:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000ee2:	4862      	ldr	r0, [pc, #392]	; (800106c <motor_control+0x1c0>)
 8000ee4:	f002 fed1 	bl	8003c8a <HAL_GPIO_WritePin>
			PWM1 = pwm;
 8000ee8:	683b      	ldr	r3, [r7, #0]
 8000eea:	4a61      	ldr	r2, [pc, #388]	; (8001070 <motor_control+0x1c4>)
 8000eec:	6013      	str	r3, [r2, #0]
			PWM2 = 0;
 8000eee:	4b61      	ldr	r3, [pc, #388]	; (8001074 <motor_control+0x1c8>)
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	601a      	str	r2, [r3, #0]
			user_pwm_setvalue_1(pwm);
 8000ef4:	6838      	ldr	r0, [r7, #0]
 8000ef6:	f001 fa7b 	bl	80023f0 <user_pwm_setvalue_1>
			user_pwm_setvalue_2(0);
 8000efa:	2000      	movs	r0, #0
 8000efc:	f001 fa96 	bl	800242c <user_pwm_setvalue_2>
			HAL_GPIO_WritePin(OUTPUT_M2_GPIO_Port, OUTPUT_M2_Pin, 0);
			user_pwm_setvalue_1(0);
			user_pwm_setvalue_2(0);
		}
	}
}
 8000f00:	e0a9      	b.n	8001056 <motor_control+0x1aa>
		} else if (dir <= -1) {
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	da1e      	bge.n	8000f46 <motor_control+0x9a>
			OUTPUT_1_State = 0;
 8000f08:	4b56      	ldr	r3, [pc, #344]	; (8001064 <motor_control+0x1b8>)
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	601a      	str	r2, [r3, #0]
			OUTPUT_2_State = 1;
 8000f0e:	4b56      	ldr	r3, [pc, #344]	; (8001068 <motor_control+0x1bc>)
 8000f10:	2201      	movs	r2, #1
 8000f12:	601a      	str	r2, [r3, #0]
			HAL_GPIO_WritePin(OUTPUT_M1_GPIO_Port, OUTPUT_M1_Pin, 0);
 8000f14:	2200      	movs	r2, #0
 8000f16:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000f1a:	4854      	ldr	r0, [pc, #336]	; (800106c <motor_control+0x1c0>)
 8000f1c:	f002 feb5 	bl	8003c8a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(OUTPUT_M2_GPIO_Port, OUTPUT_M2_Pin, 1);
 8000f20:	2201      	movs	r2, #1
 8000f22:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000f26:	4851      	ldr	r0, [pc, #324]	; (800106c <motor_control+0x1c0>)
 8000f28:	f002 feaf 	bl	8003c8a <HAL_GPIO_WritePin>
			PWM1 = 0;
 8000f2c:	4b50      	ldr	r3, [pc, #320]	; (8001070 <motor_control+0x1c4>)
 8000f2e:	2200      	movs	r2, #0
 8000f30:	601a      	str	r2, [r3, #0]
			PWM2 = pwm;
 8000f32:	683b      	ldr	r3, [r7, #0]
 8000f34:	4a4f      	ldr	r2, [pc, #316]	; (8001074 <motor_control+0x1c8>)
 8000f36:	6013      	str	r3, [r2, #0]
			user_pwm_setvalue_1(0);
 8000f38:	2000      	movs	r0, #0
 8000f3a:	f001 fa59 	bl	80023f0 <user_pwm_setvalue_1>
			user_pwm_setvalue_2(pwm);
 8000f3e:	6838      	ldr	r0, [r7, #0]
 8000f40:	f001 fa74 	bl	800242c <user_pwm_setvalue_2>
}
 8000f44:	e087      	b.n	8001056 <motor_control+0x1aa>
		} else if (dir == 0) {
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	f040 8084 	bne.w	8001056 <motor_control+0x1aa>
			OUTPUT_1_State = 0;
 8000f4e:	4b45      	ldr	r3, [pc, #276]	; (8001064 <motor_control+0x1b8>)
 8000f50:	2200      	movs	r2, #0
 8000f52:	601a      	str	r2, [r3, #0]
			OUTPUT_2_State = 0;
 8000f54:	4b44      	ldr	r3, [pc, #272]	; (8001068 <motor_control+0x1bc>)
 8000f56:	2200      	movs	r2, #0
 8000f58:	601a      	str	r2, [r3, #0]
			PWM1 = 0;
 8000f5a:	4b45      	ldr	r3, [pc, #276]	; (8001070 <motor_control+0x1c4>)
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	601a      	str	r2, [r3, #0]
			PWM2 = 0;
 8000f60:	4b44      	ldr	r3, [pc, #272]	; (8001074 <motor_control+0x1c8>)
 8000f62:	2200      	movs	r2, #0
 8000f64:	601a      	str	r2, [r3, #0]
			HAL_GPIO_WritePin(OUTPUT_M1_GPIO_Port, OUTPUT_M1_Pin, 0);
 8000f66:	2200      	movs	r2, #0
 8000f68:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000f6c:	483f      	ldr	r0, [pc, #252]	; (800106c <motor_control+0x1c0>)
 8000f6e:	f002 fe8c 	bl	8003c8a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(OUTPUT_M2_GPIO_Port, OUTPUT_M2_Pin, 0);
 8000f72:	2200      	movs	r2, #0
 8000f74:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000f78:	483c      	ldr	r0, [pc, #240]	; (800106c <motor_control+0x1c0>)
 8000f7a:	f002 fe86 	bl	8003c8a <HAL_GPIO_WritePin>
			user_pwm_setvalue_1(0);
 8000f7e:	2000      	movs	r0, #0
 8000f80:	f001 fa36 	bl	80023f0 <user_pwm_setvalue_1>
			user_pwm_setvalue_2(0);
 8000f84:	2000      	movs	r0, #0
 8000f86:	f001 fa51 	bl	800242c <user_pwm_setvalue_2>
}
 8000f8a:	e064      	b.n	8001056 <motor_control+0x1aa>
		if (dir <= -1) {
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	da1e      	bge.n	8000fd0 <motor_control+0x124>
			OUTPUT_1_State = 1;
 8000f92:	4b34      	ldr	r3, [pc, #208]	; (8001064 <motor_control+0x1b8>)
 8000f94:	2201      	movs	r2, #1
 8000f96:	601a      	str	r2, [r3, #0]
			OUTPUT_2_State = 0;
 8000f98:	4b33      	ldr	r3, [pc, #204]	; (8001068 <motor_control+0x1bc>)
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	601a      	str	r2, [r3, #0]
			HAL_GPIO_WritePin(OUTPUT_M1_GPIO_Port, OUTPUT_M1_Pin, 1);
 8000f9e:	2201      	movs	r2, #1
 8000fa0:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000fa4:	4831      	ldr	r0, [pc, #196]	; (800106c <motor_control+0x1c0>)
 8000fa6:	f002 fe70 	bl	8003c8a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(OUTPUT_M2_GPIO_Port, OUTPUT_M2_Pin, 0);
 8000faa:	2200      	movs	r2, #0
 8000fac:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000fb0:	482e      	ldr	r0, [pc, #184]	; (800106c <motor_control+0x1c0>)
 8000fb2:	f002 fe6a 	bl	8003c8a <HAL_GPIO_WritePin>
			PWM1 = pwm;
 8000fb6:	683b      	ldr	r3, [r7, #0]
 8000fb8:	4a2d      	ldr	r2, [pc, #180]	; (8001070 <motor_control+0x1c4>)
 8000fba:	6013      	str	r3, [r2, #0]
			PWM2 = 0;
 8000fbc:	4b2d      	ldr	r3, [pc, #180]	; (8001074 <motor_control+0x1c8>)
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	601a      	str	r2, [r3, #0]
			user_pwm_setvalue_1(pwm);
 8000fc2:	6838      	ldr	r0, [r7, #0]
 8000fc4:	f001 fa14 	bl	80023f0 <user_pwm_setvalue_1>
			user_pwm_setvalue_2(0);
 8000fc8:	2000      	movs	r0, #0
 8000fca:	f001 fa2f 	bl	800242c <user_pwm_setvalue_2>
}
 8000fce:	e042      	b.n	8001056 <motor_control+0x1aa>
		} else if (dir >= 1) {
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	dd1e      	ble.n	8001014 <motor_control+0x168>
			OUTPUT_1_State = 0;
 8000fd6:	4b23      	ldr	r3, [pc, #140]	; (8001064 <motor_control+0x1b8>)
 8000fd8:	2200      	movs	r2, #0
 8000fda:	601a      	str	r2, [r3, #0]
			OUTPUT_2_State = 1;
 8000fdc:	4b22      	ldr	r3, [pc, #136]	; (8001068 <motor_control+0x1bc>)
 8000fde:	2201      	movs	r2, #1
 8000fe0:	601a      	str	r2, [r3, #0]
			HAL_GPIO_WritePin(OUTPUT_M1_GPIO_Port, OUTPUT_M1_Pin, 0);
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000fe8:	4820      	ldr	r0, [pc, #128]	; (800106c <motor_control+0x1c0>)
 8000fea:	f002 fe4e 	bl	8003c8a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(OUTPUT_M2_GPIO_Port, OUTPUT_M2_Pin, 1);
 8000fee:	2201      	movs	r2, #1
 8000ff0:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000ff4:	481d      	ldr	r0, [pc, #116]	; (800106c <motor_control+0x1c0>)
 8000ff6:	f002 fe48 	bl	8003c8a <HAL_GPIO_WritePin>
			PWM1 = 0;
 8000ffa:	4b1d      	ldr	r3, [pc, #116]	; (8001070 <motor_control+0x1c4>)
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	601a      	str	r2, [r3, #0]
			PWM2 = pwm;
 8001000:	683b      	ldr	r3, [r7, #0]
 8001002:	4a1c      	ldr	r2, [pc, #112]	; (8001074 <motor_control+0x1c8>)
 8001004:	6013      	str	r3, [r2, #0]
			user_pwm_setvalue_1(0);
 8001006:	2000      	movs	r0, #0
 8001008:	f001 f9f2 	bl	80023f0 <user_pwm_setvalue_1>
			user_pwm_setvalue_2(pwm);
 800100c:	6838      	ldr	r0, [r7, #0]
 800100e:	f001 fa0d 	bl	800242c <user_pwm_setvalue_2>
}
 8001012:	e020      	b.n	8001056 <motor_control+0x1aa>
		} else if (dir == 0) {
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	2b00      	cmp	r3, #0
 8001018:	d11d      	bne.n	8001056 <motor_control+0x1aa>
			OUTPUT_1_State = 0;
 800101a:	4b12      	ldr	r3, [pc, #72]	; (8001064 <motor_control+0x1b8>)
 800101c:	2200      	movs	r2, #0
 800101e:	601a      	str	r2, [r3, #0]
			OUTPUT_2_State = 0;
 8001020:	4b11      	ldr	r3, [pc, #68]	; (8001068 <motor_control+0x1bc>)
 8001022:	2200      	movs	r2, #0
 8001024:	601a      	str	r2, [r3, #0]
			PWM1 = 0;
 8001026:	4b12      	ldr	r3, [pc, #72]	; (8001070 <motor_control+0x1c4>)
 8001028:	2200      	movs	r2, #0
 800102a:	601a      	str	r2, [r3, #0]
			PWM2 = 0;
 800102c:	4b11      	ldr	r3, [pc, #68]	; (8001074 <motor_control+0x1c8>)
 800102e:	2200      	movs	r2, #0
 8001030:	601a      	str	r2, [r3, #0]
			HAL_GPIO_WritePin(OUTPUT_M1_GPIO_Port, OUTPUT_M1_Pin, 0);
 8001032:	2200      	movs	r2, #0
 8001034:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001038:	480c      	ldr	r0, [pc, #48]	; (800106c <motor_control+0x1c0>)
 800103a:	f002 fe26 	bl	8003c8a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(OUTPUT_M2_GPIO_Port, OUTPUT_M2_Pin, 0);
 800103e:	2200      	movs	r2, #0
 8001040:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001044:	4809      	ldr	r0, [pc, #36]	; (800106c <motor_control+0x1c0>)
 8001046:	f002 fe20 	bl	8003c8a <HAL_GPIO_WritePin>
			user_pwm_setvalue_1(0);
 800104a:	2000      	movs	r0, #0
 800104c:	f001 f9d0 	bl	80023f0 <user_pwm_setvalue_1>
			user_pwm_setvalue_2(0);
 8001050:	2000      	movs	r0, #0
 8001052:	f001 f9eb 	bl	800242c <user_pwm_setvalue_2>
}
 8001056:	bf00      	nop
 8001058:	3708      	adds	r7, #8
 800105a:	46bd      	mov	sp, r7
 800105c:	bd80      	pop	{r7, pc}
 800105e:	bf00      	nop
 8001060:	20000250 	.word	0x20000250
 8001064:	2000023c 	.word	0x2000023c
 8001068:	20000240 	.word	0x20000240
 800106c:	40010800 	.word	0x40010800
 8001070:	20000234 	.word	0x20000234
 8001074:	20000238 	.word	0x20000238

08001078 <motor_point>:
void motor_point(int time) {
 8001078:	b580      	push	{r7, lr}
 800107a:	b082      	sub	sp, #8
 800107c:	af00      	add	r7, sp, #0
 800107e:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(OUTPUT_M1_GPIO_Port, OUTPUT_M1_Pin, 0);
 8001080:	2200      	movs	r2, #0
 8001082:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001086:	482f      	ldr	r0, [pc, #188]	; (8001144 <motor_point+0xcc>)
 8001088:	f002 fdff 	bl	8003c8a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(OUTPUT_M2_GPIO_Port, OUTPUT_M2_Pin, 1);
 800108c:	2201      	movs	r2, #1
 800108e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001092:	482c      	ldr	r0, [pc, #176]	; (8001144 <motor_point+0xcc>)
 8001094:	f002 fdf9 	bl	8003c8a <HAL_GPIO_WritePin>
	PWM1 = 0;
 8001098:	4b2b      	ldr	r3, [pc, #172]	; (8001148 <motor_point+0xd0>)
 800109a:	2200      	movs	r2, #0
 800109c:	601a      	str	r2, [r3, #0]
	PWM2 = 4000;
 800109e:	4b2b      	ldr	r3, [pc, #172]	; (800114c <motor_point+0xd4>)
 80010a0:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 80010a4:	601a      	str	r2, [r3, #0]
	user_pwm_setvalue_1(PWM1);
 80010a6:	4b28      	ldr	r3, [pc, #160]	; (8001148 <motor_point+0xd0>)
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	4618      	mov	r0, r3
 80010ac:	f001 f9a0 	bl	80023f0 <user_pwm_setvalue_1>
	user_pwm_setvalue_2(PWM2);
 80010b0:	4b26      	ldr	r3, [pc, #152]	; (800114c <motor_point+0xd4>)
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	4618      	mov	r0, r3
 80010b6:	f001 f9b9 	bl	800242c <user_pwm_setvalue_2>
	HAL_Delay(time);
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	4618      	mov	r0, r3
 80010be:	f001 fcf3 	bl	8002aa8 <HAL_Delay>
	HAL_GPIO_WritePin(OUTPUT_M1_GPIO_Port, OUTPUT_M1_Pin, 1);
 80010c2:	2201      	movs	r2, #1
 80010c4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80010c8:	481e      	ldr	r0, [pc, #120]	; (8001144 <motor_point+0xcc>)
 80010ca:	f002 fdde 	bl	8003c8a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(OUTPUT_M2_GPIO_Port, OUTPUT_M2_Pin, 0);
 80010ce:	2200      	movs	r2, #0
 80010d0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80010d4:	481b      	ldr	r0, [pc, #108]	; (8001144 <motor_point+0xcc>)
 80010d6:	f002 fdd8 	bl	8003c8a <HAL_GPIO_WritePin>
	PWM1 = 4000;
 80010da:	4b1b      	ldr	r3, [pc, #108]	; (8001148 <motor_point+0xd0>)
 80010dc:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 80010e0:	601a      	str	r2, [r3, #0]
	PWM2 = 0;
 80010e2:	4b1a      	ldr	r3, [pc, #104]	; (800114c <motor_point+0xd4>)
 80010e4:	2200      	movs	r2, #0
 80010e6:	601a      	str	r2, [r3, #0]
	user_pwm_setvalue_1(PWM1);
 80010e8:	4b17      	ldr	r3, [pc, #92]	; (8001148 <motor_point+0xd0>)
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	4618      	mov	r0, r3
 80010ee:	f001 f97f 	bl	80023f0 <user_pwm_setvalue_1>
	user_pwm_setvalue_2(PWM2);
 80010f2:	4b16      	ldr	r3, [pc, #88]	; (800114c <motor_point+0xd4>)
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	4618      	mov	r0, r3
 80010f8:	f001 f998 	bl	800242c <user_pwm_setvalue_2>
	HAL_Delay(time);
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	4618      	mov	r0, r3
 8001100:	f001 fcd2 	bl	8002aa8 <HAL_Delay>
	HAL_GPIO_WritePin(OUTPUT_M1_GPIO_Port, OUTPUT_M1_Pin, 0);
 8001104:	2200      	movs	r2, #0
 8001106:	f44f 7180 	mov.w	r1, #256	; 0x100
 800110a:	480e      	ldr	r0, [pc, #56]	; (8001144 <motor_point+0xcc>)
 800110c:	f002 fdbd 	bl	8003c8a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(OUTPUT_M2_GPIO_Port, OUTPUT_M2_Pin, 0);
 8001110:	2200      	movs	r2, #0
 8001112:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001116:	480b      	ldr	r0, [pc, #44]	; (8001144 <motor_point+0xcc>)
 8001118:	f002 fdb7 	bl	8003c8a <HAL_GPIO_WritePin>
	PWM1 = 0;
 800111c:	4b0a      	ldr	r3, [pc, #40]	; (8001148 <motor_point+0xd0>)
 800111e:	2200      	movs	r2, #0
 8001120:	601a      	str	r2, [r3, #0]
	PWM2 = 0;
 8001122:	4b0a      	ldr	r3, [pc, #40]	; (800114c <motor_point+0xd4>)
 8001124:	2200      	movs	r2, #0
 8001126:	601a      	str	r2, [r3, #0]
	user_pwm_setvalue_1(PWM1);
 8001128:	4b07      	ldr	r3, [pc, #28]	; (8001148 <motor_point+0xd0>)
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	4618      	mov	r0, r3
 800112e:	f001 f95f 	bl	80023f0 <user_pwm_setvalue_1>
	user_pwm_setvalue_2(PWM2);
 8001132:	4b06      	ldr	r3, [pc, #24]	; (800114c <motor_point+0xd4>)
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	4618      	mov	r0, r3
 8001138:	f001 f978 	bl	800242c <user_pwm_setvalue_2>
}
 800113c:	bf00      	nop
 800113e:	3708      	adds	r7, #8
 8001140:	46bd      	mov	sp, r7
 8001142:	bd80      	pop	{r7, pc}
 8001144:	40010800 	.word	0x40010800
 8001148:	20000234 	.word	0x20000234
 800114c:	20000238 	.word	0x20000238

08001150 <stepControl>:
		sysinfo_State = 0;
		detection_load(0, 50);
		motor_control(0, 0);
	}
}
void stepControl() {
 8001150:	b580      	push	{r7, lr}
 8001152:	b082      	sub	sp, #8
 8001154:	af00      	add	r7, sp, #0
	switch (dir_flag) {
 8001156:	4b5f      	ldr	r3, [pc, #380]	; (80012d4 <stepControl+0x184>)
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	2b01      	cmp	r3, #1
 800115c:	d051      	beq.n	8001202 <stepControl+0xb2>
 800115e:	2b04      	cmp	r3, #4
 8001160:	f000 80a9 	beq.w	80012b6 <stepControl+0x166>
		}
		motor_control(0, 0);
		break;
	default:
		//motor_control(0, 0);
		break;
 8001164:	e0b2      	b.n	80012cc <stepControl+0x17c>
			motor_control(1, 4000);
 8001166:	f44f 617a 	mov.w	r1, #4000	; 0xfa0
 800116a:	2001      	movs	r0, #1
 800116c:	f7ff fe9e 	bl	8000eac <motor_control>
			HAL_Delay(20);
 8001170:	2014      	movs	r0, #20
 8001172:	f001 fc99 	bl	8002aa8 <HAL_Delay>
			detection_load(0, sensitivity);
 8001176:	4b58      	ldr	r3, [pc, #352]	; (80012d8 <stepControl+0x188>)
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	4619      	mov	r1, r3
 800117c:	2000      	movs	r0, #0
 800117e:	f000 f931 	bl	80013e4 <detection_load>
			nowPosition--;
 8001182:	4b56      	ldr	r3, [pc, #344]	; (80012dc <stepControl+0x18c>)
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	3b01      	subs	r3, #1
 8001188:	4a54      	ldr	r2, [pc, #336]	; (80012dc <stepControl+0x18c>)
 800118a:	6013      	str	r3, [r2, #0]
			for (int timer = 0; timer < 5; timer++) {
 800118c:	2300      	movs	r3, #0
 800118e:	607b      	str	r3, [r7, #4]
 8001190:	e01f      	b.n	80011d2 <stepControl+0x82>
				HAL_Delay(1);
 8001192:	2001      	movs	r0, #1
 8001194:	f001 fc88 	bl	8002aa8 <HAL_Delay>
				Display(settingMode);
 8001198:	4b51      	ldr	r3, [pc, #324]	; (80012e0 <stepControl+0x190>)
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	4618      	mov	r0, r3
 800119e:	f000 f95f 	bl	8001460 <Display>
				if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_13) == GPIO_PIN_SET||detection_load(1, sensitivity)) {
 80011a2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80011a6:	484f      	ldr	r0, [pc, #316]	; (80012e4 <stepControl+0x194>)
 80011a8:	f002 fd58 	bl	8003c5c <HAL_GPIO_ReadPin>
 80011ac:	4603      	mov	r3, r0
 80011ae:	2b01      	cmp	r3, #1
 80011b0:	d008      	beq.n	80011c4 <stepControl+0x74>
 80011b2:	4b49      	ldr	r3, [pc, #292]	; (80012d8 <stepControl+0x188>)
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	4619      	mov	r1, r3
 80011b8:	2001      	movs	r0, #1
 80011ba:	f000 f913 	bl	80013e4 <detection_load>
 80011be:	4603      	mov	r3, r0
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d003      	beq.n	80011cc <stepControl+0x7c>
					dir_flag = 0;
 80011c4:	4b43      	ldr	r3, [pc, #268]	; (80012d4 <stepControl+0x184>)
 80011c6:	2200      	movs	r2, #0
 80011c8:	601a      	str	r2, [r3, #0]
					break;
 80011ca:	e005      	b.n	80011d8 <stepControl+0x88>
			for (int timer = 0; timer < 5; timer++) {
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	3301      	adds	r3, #1
 80011d0:	607b      	str	r3, [r7, #4]
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	2b04      	cmp	r3, #4
 80011d6:	dddc      	ble.n	8001192 <stepControl+0x42>
			if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_13) == GPIO_PIN_SET||detection_load(1, sensitivity)) {
 80011d8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80011dc:	4841      	ldr	r0, [pc, #260]	; (80012e4 <stepControl+0x194>)
 80011de:	f002 fd3d 	bl	8003c5c <HAL_GPIO_ReadPin>
 80011e2:	4603      	mov	r3, r0
 80011e4:	2b01      	cmp	r3, #1
 80011e6:	d008      	beq.n	80011fa <stepControl+0xaa>
 80011e8:	4b3b      	ldr	r3, [pc, #236]	; (80012d8 <stepControl+0x188>)
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	4619      	mov	r1, r3
 80011ee:	2001      	movs	r0, #1
 80011f0:	f000 f8f8 	bl	80013e4 <detection_load>
 80011f4:	4603      	mov	r3, r0
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d003      	beq.n	8001202 <stepControl+0xb2>
				dir_flag = 0;
 80011fa:	4b36      	ldr	r3, [pc, #216]	; (80012d4 <stepControl+0x184>)
 80011fc:	2200      	movs	r2, #0
 80011fe:	601a      	str	r2, [r3, #0]
				break;
 8001200:	e005      	b.n	800120e <stepControl+0xbe>
		while (nowPosition > stayPositionUp) {
 8001202:	4b36      	ldr	r3, [pc, #216]	; (80012dc <stepControl+0x18c>)
 8001204:	681a      	ldr	r2, [r3, #0]
 8001206:	4b38      	ldr	r3, [pc, #224]	; (80012e8 <stepControl+0x198>)
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	429a      	cmp	r2, r3
 800120c:	dcab      	bgt.n	8001166 <stepControl+0x16>
		motor_control(0, 0);
 800120e:	2100      	movs	r1, #0
 8001210:	2000      	movs	r0, #0
 8001212:	f7ff fe4b 	bl	8000eac <motor_control>
		break;
 8001216:	e059      	b.n	80012cc <stepControl+0x17c>
			motor_control(-1, 4000);
 8001218:	f44f 617a 	mov.w	r1, #4000	; 0xfa0
 800121c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001220:	f7ff fe44 	bl	8000eac <motor_control>
			HAL_Delay(20);
 8001224:	2014      	movs	r0, #20
 8001226:	f001 fc3f 	bl	8002aa8 <HAL_Delay>
			detection_load(0, sensitivity);
 800122a:	4b2b      	ldr	r3, [pc, #172]	; (80012d8 <stepControl+0x188>)
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	4619      	mov	r1, r3
 8001230:	2000      	movs	r0, #0
 8001232:	f000 f8d7 	bl	80013e4 <detection_load>
			nowPosition++;
 8001236:	4b29      	ldr	r3, [pc, #164]	; (80012dc <stepControl+0x18c>)
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	3301      	adds	r3, #1
 800123c:	4a27      	ldr	r2, [pc, #156]	; (80012dc <stepControl+0x18c>)
 800123e:	6013      	str	r3, [r2, #0]
			for (int timer = 0; timer < 5; timer++) {
 8001240:	2300      	movs	r3, #0
 8001242:	603b      	str	r3, [r7, #0]
 8001244:	e01f      	b.n	8001286 <stepControl+0x136>
				HAL_Delay(1);
 8001246:	2001      	movs	r0, #1
 8001248:	f001 fc2e 	bl	8002aa8 <HAL_Delay>
				Display(settingMode);
 800124c:	4b24      	ldr	r3, [pc, #144]	; (80012e0 <stepControl+0x190>)
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	4618      	mov	r0, r3
 8001252:	f000 f905 	bl	8001460 <Display>
				if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_13) == GPIO_PIN_SET||detection_load(1, sensitivity)) {
 8001256:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800125a:	4822      	ldr	r0, [pc, #136]	; (80012e4 <stepControl+0x194>)
 800125c:	f002 fcfe 	bl	8003c5c <HAL_GPIO_ReadPin>
 8001260:	4603      	mov	r3, r0
 8001262:	2b01      	cmp	r3, #1
 8001264:	d008      	beq.n	8001278 <stepControl+0x128>
 8001266:	4b1c      	ldr	r3, [pc, #112]	; (80012d8 <stepControl+0x188>)
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	4619      	mov	r1, r3
 800126c:	2001      	movs	r0, #1
 800126e:	f000 f8b9 	bl	80013e4 <detection_load>
 8001272:	4603      	mov	r3, r0
 8001274:	2b00      	cmp	r3, #0
 8001276:	d003      	beq.n	8001280 <stepControl+0x130>
					dir_flag = 0;
 8001278:	4b16      	ldr	r3, [pc, #88]	; (80012d4 <stepControl+0x184>)
 800127a:	2200      	movs	r2, #0
 800127c:	601a      	str	r2, [r3, #0]
					break;
 800127e:	e005      	b.n	800128c <stepControl+0x13c>
			for (int timer = 0; timer < 5; timer++) {
 8001280:	683b      	ldr	r3, [r7, #0]
 8001282:	3301      	adds	r3, #1
 8001284:	603b      	str	r3, [r7, #0]
 8001286:	683b      	ldr	r3, [r7, #0]
 8001288:	2b04      	cmp	r3, #4
 800128a:	dddc      	ble.n	8001246 <stepControl+0xf6>
			if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_13) == GPIO_PIN_SET||detection_load(1, sensitivity)) {
 800128c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001290:	4814      	ldr	r0, [pc, #80]	; (80012e4 <stepControl+0x194>)
 8001292:	f002 fce3 	bl	8003c5c <HAL_GPIO_ReadPin>
 8001296:	4603      	mov	r3, r0
 8001298:	2b01      	cmp	r3, #1
 800129a:	d008      	beq.n	80012ae <stepControl+0x15e>
 800129c:	4b0e      	ldr	r3, [pc, #56]	; (80012d8 <stepControl+0x188>)
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	4619      	mov	r1, r3
 80012a2:	2001      	movs	r0, #1
 80012a4:	f000 f89e 	bl	80013e4 <detection_load>
 80012a8:	4603      	mov	r3, r0
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d003      	beq.n	80012b6 <stepControl+0x166>
				dir_flag = 0;
 80012ae:	4b09      	ldr	r3, [pc, #36]	; (80012d4 <stepControl+0x184>)
 80012b0:	2200      	movs	r2, #0
 80012b2:	601a      	str	r2, [r3, #0]
				break;
 80012b4:	e005      	b.n	80012c2 <stepControl+0x172>
		while (nowPosition < stayPositionDown) {
 80012b6:	4b09      	ldr	r3, [pc, #36]	; (80012dc <stepControl+0x18c>)
 80012b8:	681a      	ldr	r2, [r3, #0]
 80012ba:	4b0c      	ldr	r3, [pc, #48]	; (80012ec <stepControl+0x19c>)
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	429a      	cmp	r2, r3
 80012c0:	dbaa      	blt.n	8001218 <stepControl+0xc8>
		motor_control(0, 0);
 80012c2:	2100      	movs	r1, #0
 80012c4:	2000      	movs	r0, #0
 80012c6:	f7ff fdf1 	bl	8000eac <motor_control>
		break;
 80012ca:	bf00      	nop
	}
}
 80012cc:	bf00      	nop
 80012ce:	3708      	adds	r7, #8
 80012d0:	46bd      	mov	sp, r7
 80012d2:	bd80      	pop	{r7, pc}
 80012d4:	2000024c 	.word	0x2000024c
 80012d8:	20000004 	.word	0x20000004
 80012dc:	20000224 	.word	0x20000224
 80012e0:	2000021c 	.word	0x2000021c
 80012e4:	40010c00 	.word	0x40010c00
 80012e8:	20000228 	.word	0x20000228
 80012ec:	20000008 	.word	0x20000008

080012f0 <clean_button_flag>:

void clean_button_flag(void) {
 80012f0:	b480      	push	{r7}
 80012f2:	af00      	add	r7, sp, #0
	//Usart2DmaPrintf("clena\n");
	for (i = 0; i <= 5; i++) { //clean flag
 80012f4:	4b0b      	ldr	r3, [pc, #44]	; (8001324 <clean_button_flag+0x34>)
 80012f6:	2200      	movs	r2, #0
 80012f8:	601a      	str	r2, [r3, #0]
 80012fa:	e00a      	b.n	8001312 <clean_button_flag+0x22>
		button_flag[i] = 0;
 80012fc:	4b09      	ldr	r3, [pc, #36]	; (8001324 <clean_button_flag+0x34>)
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	4a09      	ldr	r2, [pc, #36]	; (8001328 <clean_button_flag+0x38>)
 8001302:	2100      	movs	r1, #0
 8001304:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (i = 0; i <= 5; i++) { //clean flag
 8001308:	4b06      	ldr	r3, [pc, #24]	; (8001324 <clean_button_flag+0x34>)
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	3301      	adds	r3, #1
 800130e:	4a05      	ldr	r2, [pc, #20]	; (8001324 <clean_button_flag+0x34>)
 8001310:	6013      	str	r3, [r2, #0]
 8001312:	4b04      	ldr	r3, [pc, #16]	; (8001324 <clean_button_flag+0x34>)
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	2b05      	cmp	r3, #5
 8001318:	ddf0      	ble.n	80012fc <clean_button_flag+0xc>
		//HAL_Delay(1);
	}
}
 800131a:	bf00      	nop
 800131c:	46bd      	mov	sp, r7
 800131e:	bc80      	pop	{r7}
 8001320:	4770      	bx	lr
 8001322:	bf00      	nop
 8001324:	20000920 	.word	0x20000920
 8001328:	20000254 	.word	0x20000254

0800132c <read_ADC>:
int read_ADC() {
 800132c:	b480      	push	{r7}
 800132e:	b083      	sub	sp, #12
 8001330:	af00      	add	r7, sp, #0
	int times = 50; //採樣次數
 8001332:	2332      	movs	r3, #50	; 0x32
 8001334:	607b      	str	r3, [r7, #4]
	for (i = 0, ad1 = 0, ad2 = 0; i < times;) {
 8001336:	4b25      	ldr	r3, [pc, #148]	; (80013cc <read_ADC+0xa0>)
 8001338:	2200      	movs	r2, #0
 800133a:	601a      	str	r2, [r3, #0]
 800133c:	4b24      	ldr	r3, [pc, #144]	; (80013d0 <read_ADC+0xa4>)
 800133e:	2200      	movs	r2, #0
 8001340:	601a      	str	r2, [r3, #0]
 8001342:	4b24      	ldr	r3, [pc, #144]	; (80013d4 <read_ADC+0xa8>)
 8001344:	2200      	movs	r2, #0
 8001346:	601a      	str	r2, [r3, #0]
 8001348:	e019      	b.n	800137e <read_ADC+0x52>
		ad1 += ADC_Value[i++];
 800134a:	4b20      	ldr	r3, [pc, #128]	; (80013cc <read_ADC+0xa0>)
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	1c5a      	adds	r2, r3, #1
 8001350:	491e      	ldr	r1, [pc, #120]	; (80013cc <read_ADC+0xa0>)
 8001352:	600a      	str	r2, [r1, #0]
 8001354:	4a20      	ldr	r2, [pc, #128]	; (80013d8 <read_ADC+0xac>)
 8001356:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800135a:	4b1d      	ldr	r3, [pc, #116]	; (80013d0 <read_ADC+0xa4>)
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	4413      	add	r3, r2
 8001360:	4a1b      	ldr	r2, [pc, #108]	; (80013d0 <read_ADC+0xa4>)
 8001362:	6013      	str	r3, [r2, #0]
		ad2 += ADC_Value[i++];
 8001364:	4b19      	ldr	r3, [pc, #100]	; (80013cc <read_ADC+0xa0>)
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	1c5a      	adds	r2, r3, #1
 800136a:	4918      	ldr	r1, [pc, #96]	; (80013cc <read_ADC+0xa0>)
 800136c:	600a      	str	r2, [r1, #0]
 800136e:	4a1a      	ldr	r2, [pc, #104]	; (80013d8 <read_ADC+0xac>)
 8001370:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001374:	4b17      	ldr	r3, [pc, #92]	; (80013d4 <read_ADC+0xa8>)
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	4413      	add	r3, r2
 800137a:	4a16      	ldr	r2, [pc, #88]	; (80013d4 <read_ADC+0xa8>)
 800137c:	6013      	str	r3, [r2, #0]
	for (i = 0, ad1 = 0, ad2 = 0; i < times;) {
 800137e:	4b13      	ldr	r3, [pc, #76]	; (80013cc <read_ADC+0xa0>)
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	687a      	ldr	r2, [r7, #4]
 8001384:	429a      	cmp	r2, r3
 8001386:	dce0      	bgt.n	800134a <read_ADC+0x1e>
		//HAL_Delay(1);
	}

	real_adc1 = ad1 / (times / 2);
 8001388:	4b11      	ldr	r3, [pc, #68]	; (80013d0 <read_ADC+0xa4>)
 800138a:	681a      	ldr	r2, [r3, #0]
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	0fd9      	lsrs	r1, r3, #31
 8001390:	440b      	add	r3, r1
 8001392:	105b      	asrs	r3, r3, #1
 8001394:	fbb2 f3f3 	udiv	r3, r2, r3
 8001398:	4a10      	ldr	r2, [pc, #64]	; (80013dc <read_ADC+0xb0>)
 800139a:	6013      	str	r3, [r2, #0]
	real_adc2 = ad2 / (times / 2);
 800139c:	4b0d      	ldr	r3, [pc, #52]	; (80013d4 <read_ADC+0xa8>)
 800139e:	681a      	ldr	r2, [r3, #0]
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	0fd9      	lsrs	r1, r3, #31
 80013a4:	440b      	add	r3, r1
 80013a6:	105b      	asrs	r3, r3, #1
 80013a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80013ac:	4a0c      	ldr	r2, [pc, #48]	; (80013e0 <read_ADC+0xb4>)
 80013ae:	6013      	str	r3, [r2, #0]
	//sensitivity = real_adc2;
	if (real_adc1 <= real_adc2) {
 80013b0:	4b0a      	ldr	r3, [pc, #40]	; (80013dc <read_ADC+0xb0>)
 80013b2:	681a      	ldr	r2, [r3, #0]
 80013b4:	4b0a      	ldr	r3, [pc, #40]	; (80013e0 <read_ADC+0xb4>)
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	429a      	cmp	r2, r3
 80013ba:	d801      	bhi.n	80013c0 <read_ADC+0x94>
		return 1;
 80013bc:	2301      	movs	r3, #1
 80013be:	e000      	b.n	80013c2 <read_ADC+0x96>
	} else {
		return 0;
 80013c0:	2300      	movs	r3, #0
	}
}
 80013c2:	4618      	mov	r0, r3
 80013c4:	370c      	adds	r7, #12
 80013c6:	46bd      	mov	sp, r7
 80013c8:	bc80      	pop	{r7}
 80013ca:	4770      	bx	lr
 80013cc:	20000920 	.word	0x20000920
 80013d0:	2000091c 	.word	0x2000091c
 80013d4:	20000924 	.word	0x20000924
 80013d8:	2000078c 	.word	0x2000078c
 80013dc:	20000928 	.word	0x20000928
 80013e0:	20000788 	.word	0x20000788

080013e4 <detection_load>:
//檢知附載
//int time =0 ;為第一次設置
int detection_load(int times, uint32_t th) {
 80013e4:	b580      	push	{r7, lr}
 80013e6:	b084      	sub	sp, #16
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	6078      	str	r0, [r7, #4]
 80013ec:	6039      	str	r1, [r7, #0]
	read_ADC();
 80013ee:	f7ff ff9d 	bl	800132c <read_ADC>
	int setCount = 3;
 80013f2:	2303      	movs	r3, #3
 80013f4:	60fb      	str	r3, [r7, #12]
	if (times == 0) {
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d106      	bne.n	800140a <detection_load+0x26>
		//keep_adc1 = real_adc1;
		maxLoad = 0;
 80013fc:	4b15      	ldr	r3, [pc, #84]	; (8001454 <detection_load+0x70>)
 80013fe:	2200      	movs	r2, #0
 8001400:	601a      	str	r2, [r3, #0]
		maxLoadCount = 0;
 8001402:	4b15      	ldr	r3, [pc, #84]	; (8001458 <detection_load+0x74>)
 8001404:	2200      	movs	r2, #0
 8001406:	601a      	str	r2, [r3, #0]
 8001408:	e01e      	b.n	8001448 <detection_load+0x64>
	} else {
		maxLoadCount++;
 800140a:	4b13      	ldr	r3, [pc, #76]	; (8001458 <detection_load+0x74>)
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	3301      	adds	r3, #1
 8001410:	4a11      	ldr	r2, [pc, #68]	; (8001458 <detection_load+0x74>)
 8001412:	6013      	str	r3, [r2, #0]
		if (maxLoadCount < setCount) {
 8001414:	4b10      	ldr	r3, [pc, #64]	; (8001458 <detection_load+0x74>)
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	68fa      	ldr	r2, [r7, #12]
 800141a:	429a      	cmp	r2, r3
 800141c:	dd0c      	ble.n	8001438 <detection_load+0x54>
			if (real_adc1 > maxLoad) {
 800141e:	4b0f      	ldr	r3, [pc, #60]	; (800145c <detection_load+0x78>)
 8001420:	681a      	ldr	r2, [r3, #0]
 8001422:	4b0c      	ldr	r3, [pc, #48]	; (8001454 <detection_load+0x70>)
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	429a      	cmp	r2, r3
 8001428:	d90e      	bls.n	8001448 <detection_load+0x64>
				maxLoad = real_adc1 + th;
 800142a:	4b0c      	ldr	r3, [pc, #48]	; (800145c <detection_load+0x78>)
 800142c:	681a      	ldr	r2, [r3, #0]
 800142e:	683b      	ldr	r3, [r7, #0]
 8001430:	4413      	add	r3, r2
 8001432:	4a08      	ldr	r2, [pc, #32]	; (8001454 <detection_load+0x70>)
 8001434:	6013      	str	r3, [r2, #0]
 8001436:	e007      	b.n	8001448 <detection_load+0x64>
			}
		} else {
			if (real_adc1 > (maxLoad)) {
 8001438:	4b08      	ldr	r3, [pc, #32]	; (800145c <detection_load+0x78>)
 800143a:	681a      	ldr	r2, [r3, #0]
 800143c:	4b05      	ldr	r3, [pc, #20]	; (8001454 <detection_load+0x70>)
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	429a      	cmp	r2, r3
 8001442:	d901      	bls.n	8001448 <detection_load+0x64>
				//maxLoad = real_adc1;
				return 1;
 8001444:	2301      	movs	r3, #1
 8001446:	e000      	b.n	800144a <detection_load+0x66>
			}
		}
	}
	return 0;
 8001448:	2300      	movs	r3, #0
}
 800144a:	4618      	mov	r0, r3
 800144c:	3710      	adds	r7, #16
 800144e:	46bd      	mov	sp, r7
 8001450:	bd80      	pop	{r7, pc}
 8001452:	bf00      	nop
 8001454:	20000230 	.word	0x20000230
 8001458:	2000022c 	.word	0x2000022c
 800145c:	20000928 	.word	0x20000928

08001460 <Display>:

void Display(int mode) {
 8001460:	b590      	push	{r4, r7, lr}
 8001462:	b089      	sub	sp, #36	; 0x24
 8001464:	af04      	add	r7, sp, #16
 8001466:	6078      	str	r0, [r7, #4]
	ssd1306_Fill(Black);
 8001468:	2000      	movs	r0, #0
 800146a:	f001 f90d 	bl	8002688 <ssd1306_Fill>
	ssd1306_SetCursor(2, 0);
 800146e:	2100      	movs	r1, #0
 8001470:	2002      	movs	r0, #2
 8001472:	f001 fa5f 	bl	8002934 <ssd1306_SetCursor>
	int line_count = 1;
 8001476:	2301      	movs	r3, #1
 8001478:	60fb      	str	r3, [r7, #12]
	if (mode == 0) {
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	2b00      	cmp	r3, #0
 800147e:	f040 810f 	bne.w	80016a0 <Display+0x240>

		snprintf(buff, sizeof(buff), "%s,%s", __DATE__, __TIME__);
 8001482:	4b6c      	ldr	r3, [pc, #432]	; (8001634 <Display+0x1d4>)
 8001484:	9300      	str	r3, [sp, #0]
 8001486:	4b6c      	ldr	r3, [pc, #432]	; (8001638 <Display+0x1d8>)
 8001488:	4a6c      	ldr	r2, [pc, #432]	; (800163c <Display+0x1dc>)
 800148a:	2140      	movs	r1, #64	; 0x40
 800148c:	486c      	ldr	r0, [pc, #432]	; (8001640 <Display+0x1e0>)
 800148e:	f005 ff07 	bl	80072a0 <sniprintf>
		ssd1306_WriteString(buff, Font_6x8, White);
 8001492:	4a6c      	ldr	r2, [pc, #432]	; (8001644 <Display+0x1e4>)
 8001494:	2301      	movs	r3, #1
 8001496:	ca06      	ldmia	r2, {r1, r2}
 8001498:	4869      	ldr	r0, [pc, #420]	; (8001640 <Display+0x1e0>)
 800149a:	f001 fa25 	bl	80028e8 <ssd1306_WriteString>

		ssd1306_SetCursor(2, 8 * line_count++);
 800149e:	68fb      	ldr	r3, [r7, #12]
 80014a0:	1c5a      	adds	r2, r3, #1
 80014a2:	60fa      	str	r2, [r7, #12]
 80014a4:	b2db      	uxtb	r3, r3
 80014a6:	00db      	lsls	r3, r3, #3
 80014a8:	b2db      	uxtb	r3, r3
 80014aa:	4619      	mov	r1, r3
 80014ac:	2002      	movs	r0, #2
 80014ae:	f001 fa41 	bl	8002934 <ssd1306_SetCursor>
		snprintf(buff, sizeof(buff), "state:%d,%d nowP:%d", sysinfo_State,
 80014b2:	4b65      	ldr	r3, [pc, #404]	; (8001648 <Display+0x1e8>)
 80014b4:	6819      	ldr	r1, [r3, #0]
 80014b6:	4b65      	ldr	r3, [pc, #404]	; (800164c <Display+0x1ec>)
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	4a65      	ldr	r2, [pc, #404]	; (8001650 <Display+0x1f0>)
 80014bc:	6812      	ldr	r2, [r2, #0]
 80014be:	9201      	str	r2, [sp, #4]
 80014c0:	9300      	str	r3, [sp, #0]
 80014c2:	460b      	mov	r3, r1
 80014c4:	4a63      	ldr	r2, [pc, #396]	; (8001654 <Display+0x1f4>)
 80014c6:	2140      	movs	r1, #64	; 0x40
 80014c8:	485d      	ldr	r0, [pc, #372]	; (8001640 <Display+0x1e0>)
 80014ca:	f005 fee9 	bl	80072a0 <sniprintf>
				stage, nowPosition);
		ssd1306_WriteString(buff, Font_6x8, White);
 80014ce:	4a5d      	ldr	r2, [pc, #372]	; (8001644 <Display+0x1e4>)
 80014d0:	2301      	movs	r3, #1
 80014d2:	ca06      	ldmia	r2, {r1, r2}
 80014d4:	485a      	ldr	r0, [pc, #360]	; (8001640 <Display+0x1e0>)
 80014d6:	f001 fa07 	bl	80028e8 <ssd1306_WriteString>

		snprintf(buff, sizeof(buff), "[B0]:%d,Sent:%d", real_adc1, sensitivity);
 80014da:	4b5f      	ldr	r3, [pc, #380]	; (8001658 <Display+0x1f8>)
 80014dc:	681a      	ldr	r2, [r3, #0]
 80014de:	4b5f      	ldr	r3, [pc, #380]	; (800165c <Display+0x1fc>)
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	9300      	str	r3, [sp, #0]
 80014e4:	4613      	mov	r3, r2
 80014e6:	4a5e      	ldr	r2, [pc, #376]	; (8001660 <Display+0x200>)
 80014e8:	2140      	movs	r1, #64	; 0x40
 80014ea:	4855      	ldr	r0, [pc, #340]	; (8001640 <Display+0x1e0>)
 80014ec:	f005 fed8 	bl	80072a0 <sniprintf>
		ssd1306_SetCursor(2, 8 * line_count++);
 80014f0:	68fb      	ldr	r3, [r7, #12]
 80014f2:	1c5a      	adds	r2, r3, #1
 80014f4:	60fa      	str	r2, [r7, #12]
 80014f6:	b2db      	uxtb	r3, r3
 80014f8:	00db      	lsls	r3, r3, #3
 80014fa:	b2db      	uxtb	r3, r3
 80014fc:	4619      	mov	r1, r3
 80014fe:	2002      	movs	r0, #2
 8001500:	f001 fa18 	bl	8002934 <ssd1306_SetCursor>
		ssd1306_WriteString(buff, Font_6x8, White);
 8001504:	4a4f      	ldr	r2, [pc, #316]	; (8001644 <Display+0x1e4>)
 8001506:	2301      	movs	r3, #1
 8001508:	ca06      	ldmia	r2, {r1, r2}
 800150a:	484d      	ldr	r0, [pc, #308]	; (8001640 <Display+0x1e0>)
 800150c:	f001 f9ec 	bl	80028e8 <ssd1306_WriteString>

		snprintf(buff, sizeof(buff), "mLoad:%d count:%d", maxLoad,
 8001510:	4b54      	ldr	r3, [pc, #336]	; (8001664 <Display+0x204>)
 8001512:	681a      	ldr	r2, [r3, #0]
 8001514:	4b54      	ldr	r3, [pc, #336]	; (8001668 <Display+0x208>)
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	9300      	str	r3, [sp, #0]
 800151a:	4613      	mov	r3, r2
 800151c:	4a53      	ldr	r2, [pc, #332]	; (800166c <Display+0x20c>)
 800151e:	2140      	movs	r1, #64	; 0x40
 8001520:	4847      	ldr	r0, [pc, #284]	; (8001640 <Display+0x1e0>)
 8001522:	f005 febd 	bl	80072a0 <sniprintf>
				maxLoadCount);
		ssd1306_SetCursor(2, 8 * line_count++);
 8001526:	68fb      	ldr	r3, [r7, #12]
 8001528:	1c5a      	adds	r2, r3, #1
 800152a:	60fa      	str	r2, [r7, #12]
 800152c:	b2db      	uxtb	r3, r3
 800152e:	00db      	lsls	r3, r3, #3
 8001530:	b2db      	uxtb	r3, r3
 8001532:	4619      	mov	r1, r3
 8001534:	2002      	movs	r0, #2
 8001536:	f001 f9fd 	bl	8002934 <ssd1306_SetCursor>
		ssd1306_WriteString(buff, Font_6x8, White);
 800153a:	4a42      	ldr	r2, [pc, #264]	; (8001644 <Display+0x1e4>)
 800153c:	2301      	movs	r3, #1
 800153e:	ca06      	ldmia	r2, {r1, r2}
 8001540:	483f      	ldr	r0, [pc, #252]	; (8001640 <Display+0x1e0>)
 8001542:	f001 f9d1 	bl	80028e8 <ssd1306_WriteString>

		snprintf(buff, sizeof(buff), "PWM1:%d, GPIO1:%d", PWM1, OUTPUT_1_State);
 8001546:	4b4a      	ldr	r3, [pc, #296]	; (8001670 <Display+0x210>)
 8001548:	681a      	ldr	r2, [r3, #0]
 800154a:	4b4a      	ldr	r3, [pc, #296]	; (8001674 <Display+0x214>)
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	9300      	str	r3, [sp, #0]
 8001550:	4613      	mov	r3, r2
 8001552:	4a49      	ldr	r2, [pc, #292]	; (8001678 <Display+0x218>)
 8001554:	2140      	movs	r1, #64	; 0x40
 8001556:	483a      	ldr	r0, [pc, #232]	; (8001640 <Display+0x1e0>)
 8001558:	f005 fea2 	bl	80072a0 <sniprintf>
		ssd1306_SetCursor(2, 8 * line_count++);
 800155c:	68fb      	ldr	r3, [r7, #12]
 800155e:	1c5a      	adds	r2, r3, #1
 8001560:	60fa      	str	r2, [r7, #12]
 8001562:	b2db      	uxtb	r3, r3
 8001564:	00db      	lsls	r3, r3, #3
 8001566:	b2db      	uxtb	r3, r3
 8001568:	4619      	mov	r1, r3
 800156a:	2002      	movs	r0, #2
 800156c:	f001 f9e2 	bl	8002934 <ssd1306_SetCursor>
		ssd1306_WriteString(buff, Font_6x8, White);
 8001570:	4a34      	ldr	r2, [pc, #208]	; (8001644 <Display+0x1e4>)
 8001572:	2301      	movs	r3, #1
 8001574:	ca06      	ldmia	r2, {r1, r2}
 8001576:	4832      	ldr	r0, [pc, #200]	; (8001640 <Display+0x1e0>)
 8001578:	f001 f9b6 	bl	80028e8 <ssd1306_WriteString>

		snprintf(buff, sizeof(buff), "PWM2:%d, GPIO2:%d", PWM2, OUTPUT_2_State);
 800157c:	4b3f      	ldr	r3, [pc, #252]	; (800167c <Display+0x21c>)
 800157e:	681a      	ldr	r2, [r3, #0]
 8001580:	4b3f      	ldr	r3, [pc, #252]	; (8001680 <Display+0x220>)
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	9300      	str	r3, [sp, #0]
 8001586:	4613      	mov	r3, r2
 8001588:	4a3e      	ldr	r2, [pc, #248]	; (8001684 <Display+0x224>)
 800158a:	2140      	movs	r1, #64	; 0x40
 800158c:	482c      	ldr	r0, [pc, #176]	; (8001640 <Display+0x1e0>)
 800158e:	f005 fe87 	bl	80072a0 <sniprintf>
		ssd1306_SetCursor(2, 8 * line_count++);
 8001592:	68fb      	ldr	r3, [r7, #12]
 8001594:	1c5a      	adds	r2, r3, #1
 8001596:	60fa      	str	r2, [r7, #12]
 8001598:	b2db      	uxtb	r3, r3
 800159a:	00db      	lsls	r3, r3, #3
 800159c:	b2db      	uxtb	r3, r3
 800159e:	4619      	mov	r1, r3
 80015a0:	2002      	movs	r0, #2
 80015a2:	f001 f9c7 	bl	8002934 <ssd1306_SetCursor>
		ssd1306_WriteString(buff, Font_6x8, White);
 80015a6:	4a27      	ldr	r2, [pc, #156]	; (8001644 <Display+0x1e4>)
 80015a8:	2301      	movs	r3, #1
 80015aa:	ca06      	ldmia	r2, {r1, r2}
 80015ac:	4824      	ldr	r0, [pc, #144]	; (8001640 <Display+0x1e0>)
 80015ae:	f001 f99b 	bl	80028e8 <ssd1306_WriteString>

		snprintf(buff, sizeof(buff), "button[%d]:%d,%d,%d,%d", button_State,
 80015b2:	4b35      	ldr	r3, [pc, #212]	; (8001688 <Display+0x228>)
 80015b4:	681c      	ldr	r4, [r3, #0]
 80015b6:	4b35      	ldr	r3, [pc, #212]	; (800168c <Display+0x22c>)
 80015b8:	685b      	ldr	r3, [r3, #4]
 80015ba:	4a34      	ldr	r2, [pc, #208]	; (800168c <Display+0x22c>)
 80015bc:	6892      	ldr	r2, [r2, #8]
 80015be:	4933      	ldr	r1, [pc, #204]	; (800168c <Display+0x22c>)
 80015c0:	68c9      	ldr	r1, [r1, #12]
 80015c2:	4832      	ldr	r0, [pc, #200]	; (800168c <Display+0x22c>)
 80015c4:	6900      	ldr	r0, [r0, #16]
 80015c6:	9003      	str	r0, [sp, #12]
 80015c8:	9102      	str	r1, [sp, #8]
 80015ca:	9201      	str	r2, [sp, #4]
 80015cc:	9300      	str	r3, [sp, #0]
 80015ce:	4623      	mov	r3, r4
 80015d0:	4a2f      	ldr	r2, [pc, #188]	; (8001690 <Display+0x230>)
 80015d2:	2140      	movs	r1, #64	; 0x40
 80015d4:	481a      	ldr	r0, [pc, #104]	; (8001640 <Display+0x1e0>)
 80015d6:	f005 fe63 	bl	80072a0 <sniprintf>
				button_flag[1], button_flag[2], button_flag[3], button_flag[4]);
		ssd1306_SetCursor(2, 8 * line_count++);
 80015da:	68fb      	ldr	r3, [r7, #12]
 80015dc:	1c5a      	adds	r2, r3, #1
 80015de:	60fa      	str	r2, [r7, #12]
 80015e0:	b2db      	uxtb	r3, r3
 80015e2:	00db      	lsls	r3, r3, #3
 80015e4:	b2db      	uxtb	r3, r3
 80015e6:	4619      	mov	r1, r3
 80015e8:	2002      	movs	r0, #2
 80015ea:	f001 f9a3 	bl	8002934 <ssd1306_SetCursor>
		ssd1306_WriteString(buff, Font_6x8, White);
 80015ee:	4a15      	ldr	r2, [pc, #84]	; (8001644 <Display+0x1e4>)
 80015f0:	2301      	movs	r3, #1
 80015f2:	ca06      	ldmia	r2, {r1, r2}
 80015f4:	4812      	ldr	r0, [pc, #72]	; (8001640 <Display+0x1e0>)
 80015f6:	f001 f977 	bl	80028e8 <ssd1306_WriteString>

		//snprintf(buff, sizeof(buff), "time:%d,%d", end, start);
		//ssd1306_SetCursor(2, 8*7);
		//ssd1306_WriteString(buff, Font_6x8, White);
		if (end > start) {
 80015fa:	4b26      	ldr	r3, [pc, #152]	; (8001694 <Display+0x234>)
 80015fc:	681a      	ldr	r2, [r3, #0]
 80015fe:	4b26      	ldr	r3, [pc, #152]	; (8001698 <Display+0x238>)
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	429a      	cmp	r2, r3
 8001604:	f240 815a 	bls.w	80018bc <Display+0x45c>
			snprintf(buff, sizeof(buff), "time:%d", end - start);
 8001608:	4b22      	ldr	r3, [pc, #136]	; (8001694 <Display+0x234>)
 800160a:	681a      	ldr	r2, [r3, #0]
 800160c:	4b22      	ldr	r3, [pc, #136]	; (8001698 <Display+0x238>)
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	1ad3      	subs	r3, r2, r3
 8001612:	4a22      	ldr	r2, [pc, #136]	; (800169c <Display+0x23c>)
 8001614:	2140      	movs	r1, #64	; 0x40
 8001616:	480a      	ldr	r0, [pc, #40]	; (8001640 <Display+0x1e0>)
 8001618:	f005 fe42 	bl	80072a0 <sniprintf>
			ssd1306_SetCursor(2, 8 * 7);
 800161c:	2138      	movs	r1, #56	; 0x38
 800161e:	2002      	movs	r0, #2
 8001620:	f001 f988 	bl	8002934 <ssd1306_SetCursor>
			ssd1306_WriteString(buff, Font_6x8, White);
 8001624:	4a07      	ldr	r2, [pc, #28]	; (8001644 <Display+0x1e4>)
 8001626:	2301      	movs	r3, #1
 8001628:	ca06      	ldmia	r2, {r1, r2}
 800162a:	4805      	ldr	r0, [pc, #20]	; (8001640 <Display+0x1e0>)
 800162c:	f001 f95c 	bl	80028e8 <ssd1306_WriteString>
 8001630:	e144      	b.n	80018bc <Display+0x45c>
 8001632:	bf00      	nop
 8001634:	0800a12c 	.word	0x0800a12c
 8001638:	0800a118 	.word	0x0800a118
 800163c:	0800a124 	.word	0x0800a124
 8001640:	20000748 	.word	0x20000748
 8001644:	2000001c 	.word	0x2000001c
 8001648:	20000244 	.word	0x20000244
 800164c:	20000210 	.word	0x20000210
 8001650:	20000224 	.word	0x20000224
 8001654:	0800a138 	.word	0x0800a138
 8001658:	20000928 	.word	0x20000928
 800165c:	20000004 	.word	0x20000004
 8001660:	0800a14c 	.word	0x0800a14c
 8001664:	20000230 	.word	0x20000230
 8001668:	2000022c 	.word	0x2000022c
 800166c:	0800a15c 	.word	0x0800a15c
 8001670:	20000234 	.word	0x20000234
 8001674:	2000023c 	.word	0x2000023c
 8001678:	0800a170 	.word	0x0800a170
 800167c:	20000238 	.word	0x20000238
 8001680:	20000240 	.word	0x20000240
 8001684:	0800a184 	.word	0x0800a184
 8001688:	20000248 	.word	0x20000248
 800168c:	20000254 	.word	0x20000254
 8001690:	0800a198 	.word	0x0800a198
 8001694:	20000218 	.word	0x20000218
 8001698:	20000214 	.word	0x20000214
 800169c:	0800a1b0 	.word	0x0800a1b0
		}
	} else if (mode == 1) {		//setting mode
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	2b01      	cmp	r3, #1
 80016a4:	f040 80d2 	bne.w	800184c <Display+0x3ec>
		snprintf(buff, sizeof(buff), "Setting mode:%d", settingMode);
 80016a8:	4b87      	ldr	r3, [pc, #540]	; (80018c8 <Display+0x468>)
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	4a87      	ldr	r2, [pc, #540]	; (80018cc <Display+0x46c>)
 80016ae:	2140      	movs	r1, #64	; 0x40
 80016b0:	4887      	ldr	r0, [pc, #540]	; (80018d0 <Display+0x470>)
 80016b2:	f005 fdf5 	bl	80072a0 <sniprintf>
		ssd1306_WriteString(buff, Font_6x8, White);
 80016b6:	4a87      	ldr	r2, [pc, #540]	; (80018d4 <Display+0x474>)
 80016b8:	2301      	movs	r3, #1
 80016ba:	ca06      	ldmia	r2, {r1, r2}
 80016bc:	4884      	ldr	r0, [pc, #528]	; (80018d0 <Display+0x470>)
 80016be:	f001 f913 	bl	80028e8 <ssd1306_WriteString>

		ssd1306_SetCursor(2, 8 * line_count++);
 80016c2:	68fb      	ldr	r3, [r7, #12]
 80016c4:	1c5a      	adds	r2, r3, #1
 80016c6:	60fa      	str	r2, [r7, #12]
 80016c8:	b2db      	uxtb	r3, r3
 80016ca:	00db      	lsls	r3, r3, #3
 80016cc:	b2db      	uxtb	r3, r3
 80016ce:	4619      	mov	r1, r3
 80016d0:	2002      	movs	r0, #2
 80016d2:	f001 f92f 	bl	8002934 <ssd1306_SetCursor>
		snprintf(buff, sizeof(buff), "button[%d]:%d,%d,%d,%d", button_State,
 80016d6:	4b80      	ldr	r3, [pc, #512]	; (80018d8 <Display+0x478>)
 80016d8:	681c      	ldr	r4, [r3, #0]
 80016da:	4b80      	ldr	r3, [pc, #512]	; (80018dc <Display+0x47c>)
 80016dc:	685b      	ldr	r3, [r3, #4]
 80016de:	4a7f      	ldr	r2, [pc, #508]	; (80018dc <Display+0x47c>)
 80016e0:	6892      	ldr	r2, [r2, #8]
 80016e2:	497e      	ldr	r1, [pc, #504]	; (80018dc <Display+0x47c>)
 80016e4:	68c9      	ldr	r1, [r1, #12]
 80016e6:	487d      	ldr	r0, [pc, #500]	; (80018dc <Display+0x47c>)
 80016e8:	6900      	ldr	r0, [r0, #16]
 80016ea:	9003      	str	r0, [sp, #12]
 80016ec:	9102      	str	r1, [sp, #8]
 80016ee:	9201      	str	r2, [sp, #4]
 80016f0:	9300      	str	r3, [sp, #0]
 80016f2:	4623      	mov	r3, r4
 80016f4:	4a7a      	ldr	r2, [pc, #488]	; (80018e0 <Display+0x480>)
 80016f6:	2140      	movs	r1, #64	; 0x40
 80016f8:	4875      	ldr	r0, [pc, #468]	; (80018d0 <Display+0x470>)
 80016fa:	f005 fdd1 	bl	80072a0 <sniprintf>
				button_flag[1], button_flag[2], button_flag[3], button_flag[4]);
		ssd1306_WriteString(buff, Font_6x8, White);
 80016fe:	4a75      	ldr	r2, [pc, #468]	; (80018d4 <Display+0x474>)
 8001700:	2301      	movs	r3, #1
 8001702:	ca06      	ldmia	r2, {r1, r2}
 8001704:	4872      	ldr	r0, [pc, #456]	; (80018d0 <Display+0x470>)
 8001706:	f001 f8ef 	bl	80028e8 <ssd1306_WriteString>
		/*
		 snprintf(buff, sizeof(buff), "[B0]:%d,KA1:%d", real_adc1, keep_adc1);
		 ssd1306_SetCursor(2, 8 * line_count++);
		 ssd1306_WriteString(buff, Font_6x8, White);
		 */
		snprintf(buff, sizeof(buff), "now:%d,up:%d,down:%d", nowPosition,
 800170a:	4b76      	ldr	r3, [pc, #472]	; (80018e4 <Display+0x484>)
 800170c:	6819      	ldr	r1, [r3, #0]
 800170e:	4b76      	ldr	r3, [pc, #472]	; (80018e8 <Display+0x488>)
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	4a76      	ldr	r2, [pc, #472]	; (80018ec <Display+0x48c>)
 8001714:	6812      	ldr	r2, [r2, #0]
 8001716:	9201      	str	r2, [sp, #4]
 8001718:	9300      	str	r3, [sp, #0]
 800171a:	460b      	mov	r3, r1
 800171c:	4a74      	ldr	r2, [pc, #464]	; (80018f0 <Display+0x490>)
 800171e:	2140      	movs	r1, #64	; 0x40
 8001720:	486b      	ldr	r0, [pc, #428]	; (80018d0 <Display+0x470>)
 8001722:	f005 fdbd 	bl	80072a0 <sniprintf>
				stayPositionUp, stayPositionDown);
		ssd1306_SetCursor(2, 8 * line_count++);
 8001726:	68fb      	ldr	r3, [r7, #12]
 8001728:	1c5a      	adds	r2, r3, #1
 800172a:	60fa      	str	r2, [r7, #12]
 800172c:	b2db      	uxtb	r3, r3
 800172e:	00db      	lsls	r3, r3, #3
 8001730:	b2db      	uxtb	r3, r3
 8001732:	4619      	mov	r1, r3
 8001734:	2002      	movs	r0, #2
 8001736:	f001 f8fd 	bl	8002934 <ssd1306_SetCursor>
		ssd1306_WriteString(buff, Font_6x8, White);
 800173a:	4a66      	ldr	r2, [pc, #408]	; (80018d4 <Display+0x474>)
 800173c:	2301      	movs	r3, #1
 800173e:	ca06      	ldmia	r2, {r1, r2}
 8001740:	4863      	ldr	r0, [pc, #396]	; (80018d0 <Display+0x470>)
 8001742:	f001 f8d1 	bl	80028e8 <ssd1306_WriteString>

		snprintf(buff, sizeof(buff), "LongPress:%d", pressTimer);
 8001746:	4b6b      	ldr	r3, [pc, #428]	; (80018f4 <Display+0x494>)
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	4a6b      	ldr	r2, [pc, #428]	; (80018f8 <Display+0x498>)
 800174c:	2140      	movs	r1, #64	; 0x40
 800174e:	4860      	ldr	r0, [pc, #384]	; (80018d0 <Display+0x470>)
 8001750:	f005 fda6 	bl	80072a0 <sniprintf>
		ssd1306_SetCursor(2, 8 * line_count++);
 8001754:	68fb      	ldr	r3, [r7, #12]
 8001756:	1c5a      	adds	r2, r3, #1
 8001758:	60fa      	str	r2, [r7, #12]
 800175a:	b2db      	uxtb	r3, r3
 800175c:	00db      	lsls	r3, r3, #3
 800175e:	b2db      	uxtb	r3, r3
 8001760:	4619      	mov	r1, r3
 8001762:	2002      	movs	r0, #2
 8001764:	f001 f8e6 	bl	8002934 <ssd1306_SetCursor>
		ssd1306_WriteString(buff, Font_6x8, White);
 8001768:	4a5a      	ldr	r2, [pc, #360]	; (80018d4 <Display+0x474>)
 800176a:	2301      	movs	r3, #1
 800176c:	ca06      	ldmia	r2, {r1, r2}
 800176e:	4858      	ldr	r0, [pc, #352]	; (80018d0 <Display+0x470>)
 8001770:	f001 f8ba 	bl	80028e8 <ssd1306_WriteString>

		snprintf(buff, sizeof(buff), "DIR:%d,nowP:%d", setDir_flag,
 8001774:	4b61      	ldr	r3, [pc, #388]	; (80018fc <Display+0x49c>)
 8001776:	681a      	ldr	r2, [r3, #0]
 8001778:	4b5a      	ldr	r3, [pc, #360]	; (80018e4 <Display+0x484>)
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	9300      	str	r3, [sp, #0]
 800177e:	4613      	mov	r3, r2
 8001780:	4a5f      	ldr	r2, [pc, #380]	; (8001900 <Display+0x4a0>)
 8001782:	2140      	movs	r1, #64	; 0x40
 8001784:	4852      	ldr	r0, [pc, #328]	; (80018d0 <Display+0x470>)
 8001786:	f005 fd8b 	bl	80072a0 <sniprintf>
				nowPosition);
		ssd1306_SetCursor(2, 8 * line_count++);
 800178a:	68fb      	ldr	r3, [r7, #12]
 800178c:	1c5a      	adds	r2, r3, #1
 800178e:	60fa      	str	r2, [r7, #12]
 8001790:	b2db      	uxtb	r3, r3
 8001792:	00db      	lsls	r3, r3, #3
 8001794:	b2db      	uxtb	r3, r3
 8001796:	4619      	mov	r1, r3
 8001798:	2002      	movs	r0, #2
 800179a:	f001 f8cb 	bl	8002934 <ssd1306_SetCursor>
		ssd1306_WriteString(buff, Font_6x8, White);
 800179e:	4a4d      	ldr	r2, [pc, #308]	; (80018d4 <Display+0x474>)
 80017a0:	2301      	movs	r3, #1
 80017a2:	ca06      	ldmia	r2, {r1, r2}
 80017a4:	484a      	ldr	r0, [pc, #296]	; (80018d0 <Display+0x470>)
 80017a6:	f001 f89f 	bl	80028e8 <ssd1306_WriteString>

		snprintf(buff, sizeof(buff), "PWM1:%d, GPIO1:%d", PWM1, OUTPUT_1_State);
 80017aa:	4b56      	ldr	r3, [pc, #344]	; (8001904 <Display+0x4a4>)
 80017ac:	681a      	ldr	r2, [r3, #0]
 80017ae:	4b56      	ldr	r3, [pc, #344]	; (8001908 <Display+0x4a8>)
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	9300      	str	r3, [sp, #0]
 80017b4:	4613      	mov	r3, r2
 80017b6:	4a55      	ldr	r2, [pc, #340]	; (800190c <Display+0x4ac>)
 80017b8:	2140      	movs	r1, #64	; 0x40
 80017ba:	4845      	ldr	r0, [pc, #276]	; (80018d0 <Display+0x470>)
 80017bc:	f005 fd70 	bl	80072a0 <sniprintf>
		ssd1306_SetCursor(2, 8 * line_count++);
 80017c0:	68fb      	ldr	r3, [r7, #12]
 80017c2:	1c5a      	adds	r2, r3, #1
 80017c4:	60fa      	str	r2, [r7, #12]
 80017c6:	b2db      	uxtb	r3, r3
 80017c8:	00db      	lsls	r3, r3, #3
 80017ca:	b2db      	uxtb	r3, r3
 80017cc:	4619      	mov	r1, r3
 80017ce:	2002      	movs	r0, #2
 80017d0:	f001 f8b0 	bl	8002934 <ssd1306_SetCursor>
		ssd1306_WriteString(buff, Font_6x8, White);
 80017d4:	4a3f      	ldr	r2, [pc, #252]	; (80018d4 <Display+0x474>)
 80017d6:	2301      	movs	r3, #1
 80017d8:	ca06      	ldmia	r2, {r1, r2}
 80017da:	483d      	ldr	r0, [pc, #244]	; (80018d0 <Display+0x470>)
 80017dc:	f001 f884 	bl	80028e8 <ssd1306_WriteString>

		snprintf(buff, sizeof(buff), "PWM2:%d, GPIO2:%d", PWM2, OUTPUT_2_State);
 80017e0:	4b4b      	ldr	r3, [pc, #300]	; (8001910 <Display+0x4b0>)
 80017e2:	681a      	ldr	r2, [r3, #0]
 80017e4:	4b4b      	ldr	r3, [pc, #300]	; (8001914 <Display+0x4b4>)
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	9300      	str	r3, [sp, #0]
 80017ea:	4613      	mov	r3, r2
 80017ec:	4a4a      	ldr	r2, [pc, #296]	; (8001918 <Display+0x4b8>)
 80017ee:	2140      	movs	r1, #64	; 0x40
 80017f0:	4837      	ldr	r0, [pc, #220]	; (80018d0 <Display+0x470>)
 80017f2:	f005 fd55 	bl	80072a0 <sniprintf>
		ssd1306_SetCursor(2, 8 * line_count++);
 80017f6:	68fb      	ldr	r3, [r7, #12]
 80017f8:	1c5a      	adds	r2, r3, #1
 80017fa:	60fa      	str	r2, [r7, #12]
 80017fc:	b2db      	uxtb	r3, r3
 80017fe:	00db      	lsls	r3, r3, #3
 8001800:	b2db      	uxtb	r3, r3
 8001802:	4619      	mov	r1, r3
 8001804:	2002      	movs	r0, #2
 8001806:	f001 f895 	bl	8002934 <ssd1306_SetCursor>
		ssd1306_WriteString(buff, Font_6x8, White);
 800180a:	4a32      	ldr	r2, [pc, #200]	; (80018d4 <Display+0x474>)
 800180c:	2301      	movs	r3, #1
 800180e:	ca06      	ldmia	r2, {r1, r2}
 8001810:	482f      	ldr	r0, [pc, #188]	; (80018d0 <Display+0x470>)
 8001812:	f001 f869 	bl	80028e8 <ssd1306_WriteString>

		if (end > start) {
 8001816:	4b41      	ldr	r3, [pc, #260]	; (800191c <Display+0x4bc>)
 8001818:	681a      	ldr	r2, [r3, #0]
 800181a:	4b41      	ldr	r3, [pc, #260]	; (8001920 <Display+0x4c0>)
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	429a      	cmp	r2, r3
 8001820:	d94c      	bls.n	80018bc <Display+0x45c>
			snprintf(buff, sizeof(buff), "time:%d", end - start);
 8001822:	4b3e      	ldr	r3, [pc, #248]	; (800191c <Display+0x4bc>)
 8001824:	681a      	ldr	r2, [r3, #0]
 8001826:	4b3e      	ldr	r3, [pc, #248]	; (8001920 <Display+0x4c0>)
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	1ad3      	subs	r3, r2, r3
 800182c:	4a3d      	ldr	r2, [pc, #244]	; (8001924 <Display+0x4c4>)
 800182e:	2140      	movs	r1, #64	; 0x40
 8001830:	4827      	ldr	r0, [pc, #156]	; (80018d0 <Display+0x470>)
 8001832:	f005 fd35 	bl	80072a0 <sniprintf>
			ssd1306_SetCursor(2, 8 * 7);
 8001836:	2138      	movs	r1, #56	; 0x38
 8001838:	2002      	movs	r0, #2
 800183a:	f001 f87b 	bl	8002934 <ssd1306_SetCursor>
			ssd1306_WriteString(buff, Font_6x8, White);
 800183e:	4a25      	ldr	r2, [pc, #148]	; (80018d4 <Display+0x474>)
 8001840:	2301      	movs	r3, #1
 8001842:	ca06      	ldmia	r2, {r1, r2}
 8001844:	4822      	ldr	r0, [pc, #136]	; (80018d0 <Display+0x470>)
 8001846:	f001 f84f 	bl	80028e8 <ssd1306_WriteString>
 800184a:	e037      	b.n	80018bc <Display+0x45c>
		}

	} else if (mode == 2) {		//setting mode
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	2b02      	cmp	r3, #2
 8001850:	d117      	bne.n	8001882 <Display+0x422>
		snprintf(buff, sizeof(buff), "s_Value:%d", sensitivityValue);
 8001852:	4b35      	ldr	r3, [pc, #212]	; (8001928 <Display+0x4c8>)
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	4a35      	ldr	r2, [pc, #212]	; (800192c <Display+0x4cc>)
 8001858:	2140      	movs	r1, #64	; 0x40
 800185a:	481d      	ldr	r0, [pc, #116]	; (80018d0 <Display+0x470>)
 800185c:	f005 fd20 	bl	80072a0 <sniprintf>
		ssd1306_SetCursor(2, 8 * line_count++);
 8001860:	68fb      	ldr	r3, [r7, #12]
 8001862:	1c5a      	adds	r2, r3, #1
 8001864:	60fa      	str	r2, [r7, #12]
 8001866:	b2db      	uxtb	r3, r3
 8001868:	00db      	lsls	r3, r3, #3
 800186a:	b2db      	uxtb	r3, r3
 800186c:	4619      	mov	r1, r3
 800186e:	2002      	movs	r0, #2
 8001870:	f001 f860 	bl	8002934 <ssd1306_SetCursor>
		ssd1306_WriteString(buff, Font_6x8, White);
 8001874:	4a17      	ldr	r2, [pc, #92]	; (80018d4 <Display+0x474>)
 8001876:	2301      	movs	r3, #1
 8001878:	ca06      	ldmia	r2, {r1, r2}
 800187a:	4815      	ldr	r0, [pc, #84]	; (80018d0 <Display+0x470>)
 800187c:	f001 f834 	bl	80028e8 <ssd1306_WriteString>
 8001880:	e01c      	b.n	80018bc <Display+0x45c>

	} else if (mode == 3) {		//setting mode
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	2b03      	cmp	r3, #3
 8001886:	d119      	bne.n	80018bc <Display+0x45c>
		snprintf(buff, sizeof(buff), "slowValue:%dms", slowValue * 100);
 8001888:	4b29      	ldr	r3, [pc, #164]	; (8001930 <Display+0x4d0>)
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	2264      	movs	r2, #100	; 0x64
 800188e:	fb02 f303 	mul.w	r3, r2, r3
 8001892:	4a28      	ldr	r2, [pc, #160]	; (8001934 <Display+0x4d4>)
 8001894:	2140      	movs	r1, #64	; 0x40
 8001896:	480e      	ldr	r0, [pc, #56]	; (80018d0 <Display+0x470>)
 8001898:	f005 fd02 	bl	80072a0 <sniprintf>
		ssd1306_SetCursor(2, 8 * line_count++);
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	1c5a      	adds	r2, r3, #1
 80018a0:	60fa      	str	r2, [r7, #12]
 80018a2:	b2db      	uxtb	r3, r3
 80018a4:	00db      	lsls	r3, r3, #3
 80018a6:	b2db      	uxtb	r3, r3
 80018a8:	4619      	mov	r1, r3
 80018aa:	2002      	movs	r0, #2
 80018ac:	f001 f842 	bl	8002934 <ssd1306_SetCursor>
		ssd1306_WriteString(buff, Font_6x8, White);
 80018b0:	4a08      	ldr	r2, [pc, #32]	; (80018d4 <Display+0x474>)
 80018b2:	2301      	movs	r3, #1
 80018b4:	ca06      	ldmia	r2, {r1, r2}
 80018b6:	4806      	ldr	r0, [pc, #24]	; (80018d0 <Display+0x470>)
 80018b8:	f001 f816 	bl	80028e8 <ssd1306_WriteString>

	}
	ssd1306_UpdateScreen();
 80018bc:	f000 ff06 	bl	80026cc <ssd1306_UpdateScreen>

}
 80018c0:	bf00      	nop
 80018c2:	3714      	adds	r7, #20
 80018c4:	46bd      	mov	sp, r7
 80018c6:	bd90      	pop	{r4, r7, pc}
 80018c8:	2000021c 	.word	0x2000021c
 80018cc:	0800a1b8 	.word	0x0800a1b8
 80018d0:	20000748 	.word	0x20000748
 80018d4:	2000001c 	.word	0x2000001c
 80018d8:	20000248 	.word	0x20000248
 80018dc:	20000254 	.word	0x20000254
 80018e0:	0800a198 	.word	0x0800a198
 80018e4:	20000224 	.word	0x20000224
 80018e8:	20000228 	.word	0x20000228
 80018ec:	20000008 	.word	0x20000008
 80018f0:	0800a1c8 	.word	0x0800a1c8
 80018f4:	20000220 	.word	0x20000220
 80018f8:	0800a1e0 	.word	0x0800a1e0
 80018fc:	20000250 	.word	0x20000250
 8001900:	0800a1f0 	.word	0x0800a1f0
 8001904:	20000234 	.word	0x20000234
 8001908:	2000023c 	.word	0x2000023c
 800190c:	0800a170 	.word	0x0800a170
 8001910:	20000238 	.word	0x20000238
 8001914:	20000240 	.word	0x20000240
 8001918:	0800a184 	.word	0x0800a184
 800191c:	20000218 	.word	0x20000218
 8001920:	20000214 	.word	0x20000214
 8001924:	0800a1b0 	.word	0x0800a1b0
 8001928:	20000010 	.word	0x20000010
 800192c:	0800a200 	.word	0x0800a200
 8001930:	2000000c 	.word	0x2000000c
 8001934:	0800a20c 	.word	0x0800a20c

08001938 <read_GPIO>:
	if (!i) {
		str[i++] = '0';
	}
	str[i] = 0;
}
int read_GPIO(int th) {
 8001938:	b580      	push	{r7, lr}
 800193a:	b084      	sub	sp, #16
 800193c:	af00      	add	r7, sp, #0
 800193e:	6078      	str	r0, [r7, #4]
	int state = 0;
 8001940:	2300      	movs	r3, #0
 8001942:	60fb      	str	r3, [r7, #12]
	if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_12) == GPIO_PIN_SET) {
 8001944:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001948:	482d      	ldr	r0, [pc, #180]	; (8001a00 <read_GPIO+0xc8>)
 800194a:	f002 f987 	bl	8003c5c <HAL_GPIO_ReadPin>
 800194e:	4603      	mov	r3, r0
 8001950:	2b01      	cmp	r3, #1
 8001952:	d104      	bne.n	800195e <read_GPIO+0x26>
		button_flag[1]++;
 8001954:	4b2b      	ldr	r3, [pc, #172]	; (8001a04 <read_GPIO+0xcc>)
 8001956:	685b      	ldr	r3, [r3, #4]
 8001958:	3301      	adds	r3, #1
 800195a:	4a2a      	ldr	r2, [pc, #168]	; (8001a04 <read_GPIO+0xcc>)
 800195c:	6053      	str	r3, [r2, #4]
	}
	if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_13) == GPIO_PIN_SET) {
 800195e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001962:	4827      	ldr	r0, [pc, #156]	; (8001a00 <read_GPIO+0xc8>)
 8001964:	f002 f97a 	bl	8003c5c <HAL_GPIO_ReadPin>
 8001968:	4603      	mov	r3, r0
 800196a:	2b01      	cmp	r3, #1
 800196c:	d104      	bne.n	8001978 <read_GPIO+0x40>
		button_flag[2]++;
 800196e:	4b25      	ldr	r3, [pc, #148]	; (8001a04 <read_GPIO+0xcc>)
 8001970:	689b      	ldr	r3, [r3, #8]
 8001972:	3301      	adds	r3, #1
 8001974:	4a23      	ldr	r2, [pc, #140]	; (8001a04 <read_GPIO+0xcc>)
 8001976:	6093      	str	r3, [r2, #8]
	}
	if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_14) == GPIO_PIN_SET) {
 8001978:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800197c:	4820      	ldr	r0, [pc, #128]	; (8001a00 <read_GPIO+0xc8>)
 800197e:	f002 f96d 	bl	8003c5c <HAL_GPIO_ReadPin>
 8001982:	4603      	mov	r3, r0
 8001984:	2b01      	cmp	r3, #1
 8001986:	d104      	bne.n	8001992 <read_GPIO+0x5a>
		button_flag[3]++;
 8001988:	4b1e      	ldr	r3, [pc, #120]	; (8001a04 <read_GPIO+0xcc>)
 800198a:	68db      	ldr	r3, [r3, #12]
 800198c:	3301      	adds	r3, #1
 800198e:	4a1d      	ldr	r2, [pc, #116]	; (8001a04 <read_GPIO+0xcc>)
 8001990:	60d3      	str	r3, [r2, #12]
	}
	if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_15) == GPIO_PIN_SET) {
 8001992:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001996:	481a      	ldr	r0, [pc, #104]	; (8001a00 <read_GPIO+0xc8>)
 8001998:	f002 f960 	bl	8003c5c <HAL_GPIO_ReadPin>
 800199c:	4603      	mov	r3, r0
 800199e:	2b01      	cmp	r3, #1
 80019a0:	d104      	bne.n	80019ac <read_GPIO+0x74>
		button_flag[4]++;
 80019a2:	4b18      	ldr	r3, [pc, #96]	; (8001a04 <read_GPIO+0xcc>)
 80019a4:	691b      	ldr	r3, [r3, #16]
 80019a6:	3301      	adds	r3, #1
 80019a8:	4a16      	ldr	r2, [pc, #88]	; (8001a04 <read_GPIO+0xcc>)
 80019aa:	6113      	str	r3, [r2, #16]
	}

	if (button_flag[1] >= th)
 80019ac:	4b15      	ldr	r3, [pc, #84]	; (8001a04 <read_GPIO+0xcc>)
 80019ae:	685b      	ldr	r3, [r3, #4]
 80019b0:	687a      	ldr	r2, [r7, #4]
 80019b2:	429a      	cmp	r2, r3
 80019b4:	dc01      	bgt.n	80019ba <read_GPIO+0x82>
		state = 1;
 80019b6:	2301      	movs	r3, #1
 80019b8:	60fb      	str	r3, [r7, #12]
	if (button_flag[2] >= th)
 80019ba:	4b12      	ldr	r3, [pc, #72]	; (8001a04 <read_GPIO+0xcc>)
 80019bc:	689b      	ldr	r3, [r3, #8]
 80019be:	687a      	ldr	r2, [r7, #4]
 80019c0:	429a      	cmp	r2, r3
 80019c2:	dc02      	bgt.n	80019ca <read_GPIO+0x92>
		state = state + 2;
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	3302      	adds	r3, #2
 80019c8:	60fb      	str	r3, [r7, #12]
	if (button_flag[3] >= th)
 80019ca:	4b0e      	ldr	r3, [pc, #56]	; (8001a04 <read_GPIO+0xcc>)
 80019cc:	68db      	ldr	r3, [r3, #12]
 80019ce:	687a      	ldr	r2, [r7, #4]
 80019d0:	429a      	cmp	r2, r3
 80019d2:	dc02      	bgt.n	80019da <read_GPIO+0xa2>
		state = state + 4;
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	3304      	adds	r3, #4
 80019d8:	60fb      	str	r3, [r7, #12]
	if (button_flag[4] >= th)
 80019da:	4b0a      	ldr	r3, [pc, #40]	; (8001a04 <read_GPIO+0xcc>)
 80019dc:	691b      	ldr	r3, [r3, #16]
 80019de:	687a      	ldr	r2, [r7, #4]
 80019e0:	429a      	cmp	r2, r3
 80019e2:	dc02      	bgt.n	80019ea <read_GPIO+0xb2>
		state = state + 8;
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	3308      	adds	r3, #8
 80019e8:	60fb      	str	r3, [r7, #12]
	if (state == 0)
 80019ea:	68fb      	ldr	r3, [r7, #12]
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d101      	bne.n	80019f4 <read_GPIO+0xbc>
		clean_button_flag();
 80019f0:	f7ff fc7e 	bl	80012f0 <clean_button_flag>
	return state;
 80019f4:	68fb      	ldr	r3, [r7, #12]
}
 80019f6:	4618      	mov	r0, r3
 80019f8:	3710      	adds	r7, #16
 80019fa:	46bd      	mov	sp, r7
 80019fc:	bd80      	pop	{r7, pc}
 80019fe:	bf00      	nop
 8001a00:	40010c00 	.word	0x40010c00
 8001a04:	20000254 	.word	0x20000254

08001a08 <check_buttom>:
int check_buttom() {
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	b082      	sub	sp, #8
 8001a0c:	af00      	add	r7, sp, #0
	//讀取案就狀態

	button_State = read_GPIO(1);
 8001a0e:	2001      	movs	r0, #1
 8001a10:	f7ff ff92 	bl	8001938 <read_GPIO>
 8001a14:	4603      	mov	r3, r0
 8001a16:	461a      	mov	r2, r3
 8001a18:	4b97      	ldr	r3, [pc, #604]	; (8001c78 <check_buttom+0x270>)
 8001a1a:	601a      	str	r2, [r3, #0]
	int exitSetTime = 8000;
 8001a1c:	f44f 53fa 	mov.w	r3, #8000	; 0x1f40
 8001a20:	607b      	str	r3, [r7, #4]

	if (settingMode == 0) {
 8001a22:	4b96      	ldr	r3, [pc, #600]	; (8001c7c <check_buttom+0x274>)
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d14d      	bne.n	8001ac6 <check_buttom+0xbe>
		if (button_State == 1) {
 8001a2a:	4b93      	ldr	r3, [pc, #588]	; (8001c78 <check_buttom+0x270>)
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	2b01      	cmp	r3, #1
 8001a30:	d10a      	bne.n	8001a48 <check_buttom+0x40>
			//正轉
			end = start + runtime;
 8001a32:	4b93      	ldr	r3, [pc, #588]	; (8001c80 <check_buttom+0x278>)
 8001a34:	681a      	ldr	r2, [r3, #0]
 8001a36:	4b93      	ldr	r3, [pc, #588]	; (8001c84 <check_buttom+0x27c>)
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	4413      	add	r3, r2
 8001a3c:	4a92      	ldr	r2, [pc, #584]	; (8001c88 <check_buttom+0x280>)
 8001a3e:	6013      	str	r3, [r2, #0]
			dir_flag = 1;
 8001a40:	4b92      	ldr	r3, [pc, #584]	; (8001c8c <check_buttom+0x284>)
 8001a42:	2201      	movs	r2, #1
 8001a44:	601a      	str	r2, [r3, #0]
 8001a46:	e1c3      	b.n	8001dd0 <check_buttom+0x3c8>
		} else if (button_State == 4) {
 8001a48:	4b8b      	ldr	r3, [pc, #556]	; (8001c78 <check_buttom+0x270>)
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	2b04      	cmp	r3, #4
 8001a4e:	d10a      	bne.n	8001a66 <check_buttom+0x5e>
			//反轉
			end = start + runtime;
 8001a50:	4b8b      	ldr	r3, [pc, #556]	; (8001c80 <check_buttom+0x278>)
 8001a52:	681a      	ldr	r2, [r3, #0]
 8001a54:	4b8b      	ldr	r3, [pc, #556]	; (8001c84 <check_buttom+0x27c>)
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	4413      	add	r3, r2
 8001a5a:	4a8b      	ldr	r2, [pc, #556]	; (8001c88 <check_buttom+0x280>)
 8001a5c:	6013      	str	r3, [r2, #0]
			dir_flag = 4;
 8001a5e:	4b8b      	ldr	r3, [pc, #556]	; (8001c8c <check_buttom+0x284>)
 8001a60:	2204      	movs	r2, #4
 8001a62:	601a      	str	r2, [r3, #0]
 8001a64:	e1b4      	b.n	8001dd0 <check_buttom+0x3c8>
		} else if (button_State == 2) {
 8001a66:	4b84      	ldr	r3, [pc, #528]	; (8001c78 <check_buttom+0x270>)
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	2b02      	cmp	r3, #2
 8001a6c:	d108      	bne.n	8001a80 <check_buttom+0x78>
			//停止
			end = start;
 8001a6e:	4b84      	ldr	r3, [pc, #528]	; (8001c80 <check_buttom+0x278>)
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	4a85      	ldr	r2, [pc, #532]	; (8001c88 <check_buttom+0x280>)
 8001a74:	6013      	str	r3, [r2, #0]
			motor_control(0, 0);
 8001a76:	2100      	movs	r1, #0
 8001a78:	2000      	movs	r0, #0
 8001a7a:	f7ff fa17 	bl	8000eac <motor_control>
 8001a7e:	e1a7      	b.n	8001dd0 <check_buttom+0x3c8>
		} else if (button_State == 5) {
 8001a80:	4b7d      	ldr	r3, [pc, #500]	; (8001c78 <check_buttom+0x270>)
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	2b05      	cmp	r3, #5
 8001a86:	d108      	bne.n	8001a9a <check_buttom+0x92>
			//尚未定義 強制停止
			end = start;
 8001a88:	4b7d      	ldr	r3, [pc, #500]	; (8001c80 <check_buttom+0x278>)
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	4a7e      	ldr	r2, [pc, #504]	; (8001c88 <check_buttom+0x280>)
 8001a8e:	6013      	str	r3, [r2, #0]
			motor_control(0, 0);
 8001a90:	2100      	movs	r1, #0
 8001a92:	2000      	movs	r0, #0
 8001a94:	f7ff fa0a 	bl	8000eac <motor_control>
 8001a98:	e19a      	b.n	8001dd0 <check_buttom+0x3c8>
		} else if (button_State == 8) {
 8001a9a:	4b77      	ldr	r3, [pc, #476]	; (8001c78 <check_buttom+0x270>)
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	2b08      	cmp	r3, #8
 8001aa0:	f040 8196 	bne.w	8001dd0 <check_buttom+0x3c8>
			//進入設定模式
			motor_control(0, 0);
 8001aa4:	2100      	movs	r1, #0
 8001aa6:	2000      	movs	r0, #0
 8001aa8:	f7ff fa00 	bl	8000eac <motor_control>
			end = start + exitSetTime;
 8001aac:	4b74      	ldr	r3, [pc, #464]	; (8001c80 <check_buttom+0x278>)
 8001aae:	681a      	ldr	r2, [r3, #0]
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	4413      	add	r3, r2
 8001ab4:	4a74      	ldr	r2, [pc, #464]	; (8001c88 <check_buttom+0x280>)
 8001ab6:	6013      	str	r3, [r2, #0]
			motor_point(100);
 8001ab8:	2064      	movs	r0, #100	; 0x64
 8001aba:	f7ff fadd 	bl	8001078 <motor_point>
			settingMode = 1;
 8001abe:	4b6f      	ldr	r3, [pc, #444]	; (8001c7c <check_buttom+0x274>)
 8001ac0:	2201      	movs	r2, #1
 8001ac2:	601a      	str	r2, [r3, #0]
 8001ac4:	e184      	b.n	8001dd0 <check_buttom+0x3c8>
		}
	} else {

		if (button_State > 0) {
 8001ac6:	4b6c      	ldr	r3, [pc, #432]	; (8001c78 <check_buttom+0x270>)
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d005      	beq.n	8001ada <check_buttom+0xd2>
			end = start + exitSetTime;
 8001ace:	4b6c      	ldr	r3, [pc, #432]	; (8001c80 <check_buttom+0x278>)
 8001ad0:	681a      	ldr	r2, [r3, #0]
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	4413      	add	r3, r2
 8001ad6:	4a6c      	ldr	r2, [pc, #432]	; (8001c88 <check_buttom+0x280>)
 8001ad8:	6013      	str	r3, [r2, #0]
		}
		if (button_State == 1) {//shrot press is move ,long press into set adc-power.
 8001ada:	4b67      	ldr	r3, [pc, #412]	; (8001c78 <check_buttom+0x270>)
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	2b01      	cmp	r3, #1
 8001ae0:	f040 808f 	bne.w	8001c02 <check_buttom+0x1fa>
			while (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_12) == GPIO_PIN_SET) {
 8001ae4:	e009      	b.n	8001afa <check_buttom+0xf2>
				pressTimer++;
 8001ae6:	4b6a      	ldr	r3, [pc, #424]	; (8001c90 <check_buttom+0x288>)
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	3301      	adds	r3, #1
 8001aec:	4a68      	ldr	r2, [pc, #416]	; (8001c90 <check_buttom+0x288>)
 8001aee:	6013      	str	r3, [r2, #0]
				Display(settingMode);
 8001af0:	4b62      	ldr	r3, [pc, #392]	; (8001c7c <check_buttom+0x274>)
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	4618      	mov	r0, r3
 8001af6:	f7ff fcb3 	bl	8001460 <Display>
			while (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_12) == GPIO_PIN_SET) {
 8001afa:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001afe:	4865      	ldr	r0, [pc, #404]	; (8001c94 <check_buttom+0x28c>)
 8001b00:	f002 f8ac 	bl	8003c5c <HAL_GPIO_ReadPin>
 8001b04:	4603      	mov	r3, r0
 8001b06:	2b01      	cmp	r3, #1
 8001b08:	d0ed      	beq.n	8001ae6 <check_buttom+0xde>
			}
			//pressTimer++;
			if (pressTimer > 5) {
 8001b0a:	4b61      	ldr	r3, [pc, #388]	; (8001c90 <check_buttom+0x288>)
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	2b05      	cmp	r3, #5
 8001b10:	dd5a      	ble.n	8001bc8 <check_buttom+0x1c0>
				pressTimer = 0;
 8001b12:	4b5f      	ldr	r3, [pc, #380]	; (8001c90 <check_buttom+0x288>)
 8001b14:	2200      	movs	r2, #0
 8001b16:	601a      	str	r2, [r3, #0]
				settingMode = 2;
 8001b18:	4b58      	ldr	r3, [pc, #352]	; (8001c7c <check_buttom+0x274>)
 8001b1a:	2202      	movs	r2, #2
 8001b1c:	601a      	str	r2, [r3, #0]
				while (settingMode == 2) {
 8001b1e:	e04e      	b.n	8001bbe <check_buttom+0x1b6>
					Display(settingMode);
 8001b20:	4b56      	ldr	r3, [pc, #344]	; (8001c7c <check_buttom+0x274>)
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	4618      	mov	r0, r3
 8001b26:	f7ff fc9b 	bl	8001460 <Display>
					if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_12) == GPIO_PIN_SET) {
 8001b2a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001b2e:	4859      	ldr	r0, [pc, #356]	; (8001c94 <check_buttom+0x28c>)
 8001b30:	f002 f894 	bl	8003c5c <HAL_GPIO_ReadPin>
 8001b34:	4603      	mov	r3, r0
 8001b36:	2b01      	cmp	r3, #1
 8001b38:	d10e      	bne.n	8001b58 <check_buttom+0x150>
						if (sensitivityValue <= 1000) {
 8001b3a:	4b57      	ldr	r3, [pc, #348]	; (8001c98 <check_buttom+0x290>)
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001b42:	dc05      	bgt.n	8001b50 <check_buttom+0x148>
							sensitivityValue += 20;
 8001b44:	4b54      	ldr	r3, [pc, #336]	; (8001c98 <check_buttom+0x290>)
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	3314      	adds	r3, #20
 8001b4a:	4a53      	ldr	r2, [pc, #332]	; (8001c98 <check_buttom+0x290>)
 8001b4c:	6013      	str	r3, [r2, #0]
 8001b4e:	e003      	b.n	8001b58 <check_buttom+0x150>
						} else {
							sensitivityValue = 1000;
 8001b50:	4b51      	ldr	r3, [pc, #324]	; (8001c98 <check_buttom+0x290>)
 8001b52:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001b56:	601a      	str	r2, [r3, #0]
						}
					}
					if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_13) == GPIO_PIN_SET) {
 8001b58:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001b5c:	484d      	ldr	r0, [pc, #308]	; (8001c94 <check_buttom+0x28c>)
 8001b5e:	f002 f87d 	bl	8003c5c <HAL_GPIO_ReadPin>
 8001b62:	4603      	mov	r3, r0
 8001b64:	2b01      	cmp	r3, #1
 8001b66:	d107      	bne.n	8001b78 <check_buttom+0x170>
						settingMode = 1;
 8001b68:	4b44      	ldr	r3, [pc, #272]	; (8001c7c <check_buttom+0x274>)
 8001b6a:	2201      	movs	r2, #1
 8001b6c:	601a      	str	r2, [r3, #0]
						sensitivity=sensitivityValue;
 8001b6e:	4b4a      	ldr	r3, [pc, #296]	; (8001c98 <check_buttom+0x290>)
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	461a      	mov	r2, r3
 8001b74:	4b49      	ldr	r3, [pc, #292]	; (8001c9c <check_buttom+0x294>)
 8001b76:	601a      	str	r2, [r3, #0]
					}
					if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_14) == GPIO_PIN_SET) {
 8001b78:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001b7c:	4845      	ldr	r0, [pc, #276]	; (8001c94 <check_buttom+0x28c>)
 8001b7e:	f002 f86d 	bl	8003c5c <HAL_GPIO_ReadPin>
 8001b82:	4603      	mov	r3, r0
 8001b84:	2b01      	cmp	r3, #1
 8001b86:	d10c      	bne.n	8001ba2 <check_buttom+0x19a>
						if (sensitivityValue >= 20) {
 8001b88:	4b43      	ldr	r3, [pc, #268]	; (8001c98 <check_buttom+0x290>)
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	2b13      	cmp	r3, #19
 8001b8e:	dd05      	ble.n	8001b9c <check_buttom+0x194>
							sensitivityValue -= 20;
 8001b90:	4b41      	ldr	r3, [pc, #260]	; (8001c98 <check_buttom+0x290>)
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	3b14      	subs	r3, #20
 8001b96:	4a40      	ldr	r2, [pc, #256]	; (8001c98 <check_buttom+0x290>)
 8001b98:	6013      	str	r3, [r2, #0]
 8001b9a:	e002      	b.n	8001ba2 <check_buttom+0x19a>
						} else {
							sensitivityValue = 0;
 8001b9c:	4b3e      	ldr	r3, [pc, #248]	; (8001c98 <check_buttom+0x290>)
 8001b9e:	2200      	movs	r2, #0
 8001ba0:	601a      	str	r2, [r3, #0]
						}
					}
					if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_15) == GPIO_PIN_SET) {
 8001ba2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001ba6:	483b      	ldr	r0, [pc, #236]	; (8001c94 <check_buttom+0x28c>)
 8001ba8:	f002 f858 	bl	8003c5c <HAL_GPIO_ReadPin>
 8001bac:	4603      	mov	r3, r0
 8001bae:	2b01      	cmp	r3, #1
 8001bb0:	d102      	bne.n	8001bb8 <check_buttom+0x1b0>
						settingMode = 1;
 8001bb2:	4b32      	ldr	r3, [pc, #200]	; (8001c7c <check_buttom+0x274>)
 8001bb4:	2201      	movs	r2, #1
 8001bb6:	601a      	str	r2, [r3, #0]
					}
					HAL_Delay(250);
 8001bb8:	20fa      	movs	r0, #250	; 0xfa
 8001bba:	f000 ff75 	bl	8002aa8 <HAL_Delay>
				while (settingMode == 2) {
 8001bbe:	4b2f      	ldr	r3, [pc, #188]	; (8001c7c <check_buttom+0x274>)
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	2b02      	cmp	r3, #2
 8001bc4:	d0ac      	beq.n	8001b20 <check_buttom+0x118>
 8001bc6:	e103      	b.n	8001dd0 <check_buttom+0x3c8>
				}
			} else {
				motor_control(1, 4000);
 8001bc8:	f44f 617a 	mov.w	r1, #4000	; 0xfa0
 8001bcc:	2001      	movs	r0, #1
 8001bce:	f7ff f96d 	bl	8000eac <motor_control>
				HAL_Delay(500);
 8001bd2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001bd6:	f000 ff67 	bl	8002aa8 <HAL_Delay>
				motor_control(0, 0);
 8001bda:	2100      	movs	r1, #0
 8001bdc:	2000      	movs	r0, #0
 8001bde:	f7ff f965 	bl	8000eac <motor_control>
				if (nowPosition >= 1000) {
 8001be2:	4b2f      	ldr	r3, [pc, #188]	; (8001ca0 <check_buttom+0x298>)
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001bea:	db04      	blt.n	8001bf6 <check_buttom+0x1ee>
					nowPosition = 1000;
 8001bec:	4b2c      	ldr	r3, [pc, #176]	; (8001ca0 <check_buttom+0x298>)
 8001bee:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001bf2:	601a      	str	r2, [r3, #0]
 8001bf4:	e0ec      	b.n	8001dd0 <check_buttom+0x3c8>
				} else {
					nowPosition++;
 8001bf6:	4b2a      	ldr	r3, [pc, #168]	; (8001ca0 <check_buttom+0x298>)
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	3301      	adds	r3, #1
 8001bfc:	4a28      	ldr	r2, [pc, #160]	; (8001ca0 <check_buttom+0x298>)
 8001bfe:	6013      	str	r3, [r2, #0]
 8001c00:	e0e6      	b.n	8001dd0 <check_buttom+0x3c8>
				}

			}

		} else if (button_State == 4) {	//shrot press is move ,long press into set slow-val.
 8001c02:	4b1d      	ldr	r3, [pc, #116]	; (8001c78 <check_buttom+0x270>)
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	2b04      	cmp	r3, #4
 8001c08:	f040 80a0 	bne.w	8001d4c <check_buttom+0x344>
			while (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_14) == GPIO_PIN_SET) {
 8001c0c:	e009      	b.n	8001c22 <check_buttom+0x21a>
				pressTimer++;
 8001c0e:	4b20      	ldr	r3, [pc, #128]	; (8001c90 <check_buttom+0x288>)
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	3301      	adds	r3, #1
 8001c14:	4a1e      	ldr	r2, [pc, #120]	; (8001c90 <check_buttom+0x288>)
 8001c16:	6013      	str	r3, [r2, #0]
				Display(settingMode);
 8001c18:	4b18      	ldr	r3, [pc, #96]	; (8001c7c <check_buttom+0x274>)
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	4618      	mov	r0, r3
 8001c1e:	f7ff fc1f 	bl	8001460 <Display>
			while (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_14) == GPIO_PIN_SET) {
 8001c22:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001c26:	481b      	ldr	r0, [pc, #108]	; (8001c94 <check_buttom+0x28c>)
 8001c28:	f002 f818 	bl	8003c5c <HAL_GPIO_ReadPin>
 8001c2c:	4603      	mov	r3, r0
 8001c2e:	2b01      	cmp	r3, #1
 8001c30:	d0ed      	beq.n	8001c0e <check_buttom+0x206>
			}
			//pressTimer++;
			if (pressTimer > 5) {
 8001c32:	4b17      	ldr	r3, [pc, #92]	; (8001c90 <check_buttom+0x288>)
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	2b05      	cmp	r3, #5
 8001c38:	dd6c      	ble.n	8001d14 <check_buttom+0x30c>
				pressTimer = 0;
 8001c3a:	4b15      	ldr	r3, [pc, #84]	; (8001c90 <check_buttom+0x288>)
 8001c3c:	2200      	movs	r2, #0
 8001c3e:	601a      	str	r2, [r3, #0]
				settingMode = 3;
 8001c40:	4b0e      	ldr	r3, [pc, #56]	; (8001c7c <check_buttom+0x274>)
 8001c42:	2203      	movs	r2, #3
 8001c44:	601a      	str	r2, [r3, #0]
				while (settingMode == 3) {
 8001c46:	e060      	b.n	8001d0a <check_buttom+0x302>
					Display(settingMode);
 8001c48:	4b0c      	ldr	r3, [pc, #48]	; (8001c7c <check_buttom+0x274>)
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	4618      	mov	r0, r3
 8001c4e:	f7ff fc07 	bl	8001460 <Display>
					if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_12) == GPIO_PIN_SET) {
 8001c52:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001c56:	480f      	ldr	r0, [pc, #60]	; (8001c94 <check_buttom+0x28c>)
 8001c58:	f002 f800 	bl	8003c5c <HAL_GPIO_ReadPin>
 8001c5c:	4603      	mov	r3, r0
 8001c5e:	2b01      	cmp	r3, #1
 8001c60:	d125      	bne.n	8001cae <check_buttom+0x2a6>
						if (slowValue <= 100) {
 8001c62:	4b10      	ldr	r3, [pc, #64]	; (8001ca4 <check_buttom+0x29c>)
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	2b64      	cmp	r3, #100	; 0x64
 8001c68:	dc1e      	bgt.n	8001ca8 <check_buttom+0x2a0>
							slowValue += 1;
 8001c6a:	4b0e      	ldr	r3, [pc, #56]	; (8001ca4 <check_buttom+0x29c>)
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	3301      	adds	r3, #1
 8001c70:	4a0c      	ldr	r2, [pc, #48]	; (8001ca4 <check_buttom+0x29c>)
 8001c72:	6013      	str	r3, [r2, #0]
 8001c74:	e01b      	b.n	8001cae <check_buttom+0x2a6>
 8001c76:	bf00      	nop
 8001c78:	20000248 	.word	0x20000248
 8001c7c:	2000021c 	.word	0x2000021c
 8001c80:	20000214 	.word	0x20000214
 8001c84:	20000000 	.word	0x20000000
 8001c88:	20000218 	.word	0x20000218
 8001c8c:	2000024c 	.word	0x2000024c
 8001c90:	20000220 	.word	0x20000220
 8001c94:	40010c00 	.word	0x40010c00
 8001c98:	20000010 	.word	0x20000010
 8001c9c:	20000004 	.word	0x20000004
 8001ca0:	20000224 	.word	0x20000224
 8001ca4:	2000000c 	.word	0x2000000c
						} else {
							slowValue = 100;
 8001ca8:	4b4c      	ldr	r3, [pc, #304]	; (8001ddc <check_buttom+0x3d4>)
 8001caa:	2264      	movs	r2, #100	; 0x64
 8001cac:	601a      	str	r2, [r3, #0]
						}
					}
					if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_13) == GPIO_PIN_SET) {
 8001cae:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001cb2:	484b      	ldr	r0, [pc, #300]	; (8001de0 <check_buttom+0x3d8>)
 8001cb4:	f001 ffd2 	bl	8003c5c <HAL_GPIO_ReadPin>
 8001cb8:	4603      	mov	r3, r0
 8001cba:	2b01      	cmp	r3, #1
 8001cbc:	d102      	bne.n	8001cc4 <check_buttom+0x2bc>
						settingMode = 1;
 8001cbe:	4b49      	ldr	r3, [pc, #292]	; (8001de4 <check_buttom+0x3dc>)
 8001cc0:	2201      	movs	r2, #1
 8001cc2:	601a      	str	r2, [r3, #0]
					}
					if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_14) == GPIO_PIN_SET) {
 8001cc4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001cc8:	4845      	ldr	r0, [pc, #276]	; (8001de0 <check_buttom+0x3d8>)
 8001cca:	f001 ffc7 	bl	8003c5c <HAL_GPIO_ReadPin>
 8001cce:	4603      	mov	r3, r0
 8001cd0:	2b01      	cmp	r3, #1
 8001cd2:	d10c      	bne.n	8001cee <check_buttom+0x2e6>
						if (slowValue >= 1) {
 8001cd4:	4b41      	ldr	r3, [pc, #260]	; (8001ddc <check_buttom+0x3d4>)
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	dd05      	ble.n	8001ce8 <check_buttom+0x2e0>
							slowValue -= 1;
 8001cdc:	4b3f      	ldr	r3, [pc, #252]	; (8001ddc <check_buttom+0x3d4>)
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	3b01      	subs	r3, #1
 8001ce2:	4a3e      	ldr	r2, [pc, #248]	; (8001ddc <check_buttom+0x3d4>)
 8001ce4:	6013      	str	r3, [r2, #0]
 8001ce6:	e002      	b.n	8001cee <check_buttom+0x2e6>
						} else {
							slowValue = 0;
 8001ce8:	4b3c      	ldr	r3, [pc, #240]	; (8001ddc <check_buttom+0x3d4>)
 8001cea:	2200      	movs	r2, #0
 8001cec:	601a      	str	r2, [r3, #0]
						}
					}
					if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_15) == GPIO_PIN_SET) {
 8001cee:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001cf2:	483b      	ldr	r0, [pc, #236]	; (8001de0 <check_buttom+0x3d8>)
 8001cf4:	f001 ffb2 	bl	8003c5c <HAL_GPIO_ReadPin>
 8001cf8:	4603      	mov	r3, r0
 8001cfa:	2b01      	cmp	r3, #1
 8001cfc:	d102      	bne.n	8001d04 <check_buttom+0x2fc>
						settingMode = 1;
 8001cfe:	4b39      	ldr	r3, [pc, #228]	; (8001de4 <check_buttom+0x3dc>)
 8001d00:	2201      	movs	r2, #1
 8001d02:	601a      	str	r2, [r3, #0]
					}
					HAL_Delay(250);
 8001d04:	20fa      	movs	r0, #250	; 0xfa
 8001d06:	f000 fecf 	bl	8002aa8 <HAL_Delay>
				while (settingMode == 3) {
 8001d0a:	4b36      	ldr	r3, [pc, #216]	; (8001de4 <check_buttom+0x3dc>)
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	2b03      	cmp	r3, #3
 8001d10:	d09a      	beq.n	8001c48 <check_buttom+0x240>
 8001d12:	e05d      	b.n	8001dd0 <check_buttom+0x3c8>
				}
			} else {
				motor_control(-1, 4000);
 8001d14:	f44f 617a 	mov.w	r1, #4000	; 0xfa0
 8001d18:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001d1c:	f7ff f8c6 	bl	8000eac <motor_control>
				HAL_Delay(500);
 8001d20:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001d24:	f000 fec0 	bl	8002aa8 <HAL_Delay>
				motor_control(0, 0);
 8001d28:	2100      	movs	r1, #0
 8001d2a:	2000      	movs	r0, #0
 8001d2c:	f7ff f8be 	bl	8000eac <motor_control>
				if (nowPosition < 1) {
 8001d30:	4b2d      	ldr	r3, [pc, #180]	; (8001de8 <check_buttom+0x3e0>)
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	dc03      	bgt.n	8001d40 <check_buttom+0x338>
					nowPosition = 0;
 8001d38:	4b2b      	ldr	r3, [pc, #172]	; (8001de8 <check_buttom+0x3e0>)
 8001d3a:	2200      	movs	r2, #0
 8001d3c:	601a      	str	r2, [r3, #0]
 8001d3e:	e047      	b.n	8001dd0 <check_buttom+0x3c8>
				} else {
					nowPosition--;
 8001d40:	4b29      	ldr	r3, [pc, #164]	; (8001de8 <check_buttom+0x3e0>)
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	3b01      	subs	r3, #1
 8001d46:	4a28      	ldr	r2, [pc, #160]	; (8001de8 <check_buttom+0x3e0>)
 8001d48:	6013      	str	r3, [r2, #0]
 8001d4a:	e041      	b.n	8001dd0 <check_buttom+0x3c8>
				}
			}
		} else if (button_State == 2) {		//set favorite-point
 8001d4c:	4b27      	ldr	r3, [pc, #156]	; (8001dec <check_buttom+0x3e4>)
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	2b02      	cmp	r3, #2
 8001d52:	d03d      	beq.n	8001dd0 <check_buttom+0x3c8>

		} else if (button_State == 5) {		//change motor dir
 8001d54:	4b25      	ldr	r3, [pc, #148]	; (8001dec <check_buttom+0x3e4>)
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	2b05      	cmp	r3, #5
 8001d5a:	d112      	bne.n	8001d82 <check_buttom+0x37a>
			settingMode = 1;
 8001d5c:	4b21      	ldr	r3, [pc, #132]	; (8001de4 <check_buttom+0x3dc>)
 8001d5e:	2201      	movs	r2, #1
 8001d60:	601a      	str	r2, [r3, #0]
			if (setDir_flag == 1) {
 8001d62:	4b23      	ldr	r3, [pc, #140]	; (8001df0 <check_buttom+0x3e8>)
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	2b01      	cmp	r3, #1
 8001d68:	d103      	bne.n	8001d72 <check_buttom+0x36a>
				setDir_flag = 0;
 8001d6a:	4b21      	ldr	r3, [pc, #132]	; (8001df0 <check_buttom+0x3e8>)
 8001d6c:	2200      	movs	r2, #0
 8001d6e:	601a      	str	r2, [r3, #0]
 8001d70:	e002      	b.n	8001d78 <check_buttom+0x370>
			} else {
				setDir_flag = 1;
 8001d72:	4b1f      	ldr	r3, [pc, #124]	; (8001df0 <check_buttom+0x3e8>)
 8001d74:	2201      	movs	r2, #1
 8001d76:	601a      	str	r2, [r3, #0]
			}
			HAL_Delay(500);
 8001d78:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001d7c:	f000 fe94 	bl	8002aa8 <HAL_Delay>
 8001d80:	e026      	b.n	8001dd0 <check_buttom+0x3c8>

		} else if (button_State == 3) {		//set up-point
 8001d82:	4b1a      	ldr	r3, [pc, #104]	; (8001dec <check_buttom+0x3e4>)
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	2b03      	cmp	r3, #3
 8001d88:	d107      	bne.n	8001d9a <check_buttom+0x392>
			settingMode = 1;
 8001d8a:	4b16      	ldr	r3, [pc, #88]	; (8001de4 <check_buttom+0x3dc>)
 8001d8c:	2201      	movs	r2, #1
 8001d8e:	601a      	str	r2, [r3, #0]
			stayPositionUp = nowPosition;
 8001d90:	4b15      	ldr	r3, [pc, #84]	; (8001de8 <check_buttom+0x3e0>)
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	4a17      	ldr	r2, [pc, #92]	; (8001df4 <check_buttom+0x3ec>)
 8001d96:	6013      	str	r3, [r2, #0]
 8001d98:	e01a      	b.n	8001dd0 <check_buttom+0x3c8>

		} else if (button_State == 6) {		//set donw-point
 8001d9a:	4b14      	ldr	r3, [pc, #80]	; (8001dec <check_buttom+0x3e4>)
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	2b06      	cmp	r3, #6
 8001da0:	d107      	bne.n	8001db2 <check_buttom+0x3aa>
			settingMode = 1;
 8001da2:	4b10      	ldr	r3, [pc, #64]	; (8001de4 <check_buttom+0x3dc>)
 8001da4:	2201      	movs	r2, #1
 8001da6:	601a      	str	r2, [r3, #0]
			stayPositionDown = nowPosition;
 8001da8:	4b0f      	ldr	r3, [pc, #60]	; (8001de8 <check_buttom+0x3e0>)
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	4a12      	ldr	r2, [pc, #72]	; (8001df8 <check_buttom+0x3f0>)
 8001dae:	6013      	str	r3, [r2, #0]
 8001db0:	e00e      	b.n	8001dd0 <check_buttom+0x3c8>

		} else if (button_State == 8) {
 8001db2:	4b0e      	ldr	r3, [pc, #56]	; (8001dec <check_buttom+0x3e4>)
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	2b08      	cmp	r3, #8
 8001db8:	d103      	bne.n	8001dc2 <check_buttom+0x3ba>
			settingMode = 1;
 8001dba:	4b0a      	ldr	r3, [pc, #40]	; (8001de4 <check_buttom+0x3dc>)
 8001dbc:	2201      	movs	r2, #1
 8001dbe:	601a      	str	r2, [r3, #0]
 8001dc0:	e006      	b.n	8001dd0 <check_buttom+0x3c8>
		} else if (button_State == 0) {
 8001dc2:	4b0a      	ldr	r3, [pc, #40]	; (8001dec <check_buttom+0x3e4>)
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d102      	bne.n	8001dd0 <check_buttom+0x3c8>
			pressTimer = 0;
 8001dca:	4b0c      	ldr	r3, [pc, #48]	; (8001dfc <check_buttom+0x3f4>)
 8001dcc:	2200      	movs	r2, #0
 8001dce:	601a      	str	r2, [r3, #0]
		}
	}
}
 8001dd0:	bf00      	nop
 8001dd2:	4618      	mov	r0, r3
 8001dd4:	3708      	adds	r7, #8
 8001dd6:	46bd      	mov	sp, r7
 8001dd8:	bd80      	pop	{r7, pc}
 8001dda:	bf00      	nop
 8001ddc:	2000000c 	.word	0x2000000c
 8001de0:	40010c00 	.word	0x40010c00
 8001de4:	2000021c 	.word	0x2000021c
 8001de8:	20000224 	.word	0x20000224
 8001dec:	20000248 	.word	0x20000248
 8001df0:	20000250 	.word	0x20000250
 8001df4:	20000228 	.word	0x20000228
 8001df8:	20000008 	.word	0x20000008
 8001dfc:	20000220 	.word	0x20000220

08001e00 <HAL_GPIO_EXTI_Callback>:
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8001e00:	b480      	push	{r7}
 8001e02:	b083      	sub	sp, #12
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	4603      	mov	r3, r0
 8001e08:	80fb      	strh	r3, [r7, #6]
	 HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13); //PC13 Led
	 button_flag[4]++;
	 break;
	 }
	 */
}
 8001e0a:	bf00      	nop
 8001e0c:	370c      	adds	r7, #12
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	bc80      	pop	{r7}
 8001e12:	4770      	bx	lr

08001e14 <main>:
/* USER CODE END 0 */

int main(void) {
 8001e14:	b580      	push	{r7, lr}
 8001e16:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration----------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8001e18:	f000 fdfc 	bl	8002a14 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8001e1c:	f000 f84a 	bl	8001eb4 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8001e20:	f7fe ff76 	bl	8000d10 <MX_GPIO_Init>
	MX_DMA_Init();
 8001e24:	f7fe ff56 	bl	8000cd4 <MX_DMA_Init>
	MX_I2C1_Init();
 8001e28:	f7fe ffe2 	bl	8000df0 <MX_I2C1_Init>
	MX_ADC1_Init();
 8001e2c:	f7fe fe9c 	bl	8000b68 <MX_ADC1_Init>
	MX_TIM2_Init();
 8001e30:	f000 fa38 	bl	80022a4 <MX_TIM2_Init>
	MX_RTC_Init();
 8001e34:	f000 f8ac 	bl	8001f90 <MX_RTC_Init>
	MX_USART2_UART_Init();
 8001e38:	f000 fb16 	bl	8002468 <MX_USART2_UART_Init>

	/* USER CODE BEGIN 2 */
	//ssd1306_Reset();
	ssd1306_Init();
 8001e3c:	f000 fbba 	bl	80025b4 <ssd1306_Init>
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*) &ADC_Value, 100);
 8001e40:	2264      	movs	r2, #100	; 0x64
 8001e42:	4916      	ldr	r1, [pc, #88]	; (8001e9c <main+0x88>)
 8001e44:	4816      	ldr	r0, [pc, #88]	; (8001ea0 <main+0x8c>)
 8001e46:	f000 ff25 	bl	8002c94 <HAL_ADC_Start_DMA>
	//HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
	motor_control(0, 0);
 8001e4a:	2100      	movs	r1, #0
 8001e4c:	2000      	movs	r0, #0
 8001e4e:	f7ff f82d 	bl	8000eac <motor_control>
	while (1) {
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */
		//系統運行時間
		start = HAL_GetTick();
 8001e52:	f000 fe1f 	bl	8002a94 <HAL_GetTick>
 8001e56:	4602      	mov	r2, r0
 8001e58:	4b12      	ldr	r3, [pc, #72]	; (8001ea4 <main+0x90>)
 8001e5a:	601a      	str	r2, [r3, #0]
		if (settingMode == 0) {	//運行模式
 8001e5c:	4b12      	ldr	r3, [pc, #72]	; (8001ea8 <main+0x94>)
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d102      	bne.n	8001e6a <main+0x56>
			//timerControl();
			stepControl();
 8001e64:	f7ff f974 	bl	8001150 <stepControl>
 8001e68:	e008      	b.n	8001e7c <main+0x68>
		} else {	//設定模式
			if (start < end) {	//時間未結束
 8001e6a:	4b0e      	ldr	r3, [pc, #56]	; (8001ea4 <main+0x90>)
 8001e6c:	681a      	ldr	r2, [r3, #0]
 8001e6e:	4b0f      	ldr	r3, [pc, #60]	; (8001eac <main+0x98>)
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	429a      	cmp	r2, r3
 8001e74:	d302      	bcc.n	8001e7c <main+0x68>

			} else {
				settingMode = 0;
 8001e76:	4b0c      	ldr	r3, [pc, #48]	; (8001ea8 <main+0x94>)
 8001e78:	2200      	movs	r2, #0
 8001e7a:	601a      	str	r2, [r3, #0]
			}
		}
		//壓力觸動時輸出1
		//sysinfo_State = read_ADC();
		read_ADC();
 8001e7c:	f7ff fa56 	bl	800132c <read_ADC>

		check_buttom();
 8001e80:	f7ff fdc2 	bl	8001a08 <check_buttom>

		//LCD畫面
		if (i2c_working == 1)
 8001e84:	4b0a      	ldr	r3, [pc, #40]	; (8001eb0 <main+0x9c>)
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	2b01      	cmp	r3, #1
 8001e8a:	d104      	bne.n	8001e96 <main+0x82>
			Display(settingMode);
 8001e8c:	4b06      	ldr	r3, [pc, #24]	; (8001ea8 <main+0x94>)
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	4618      	mov	r0, r3
 8001e92:	f7ff fae5 	bl	8001460 <Display>

		//系統LED PC13
		//HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);

		//清除button flag
		clean_button_flag();
 8001e96:	f7ff fa2b 	bl	80012f0 <clean_button_flag>
		start = HAL_GetTick();
 8001e9a:	e7da      	b.n	8001e52 <main+0x3e>
 8001e9c:	2000078c 	.word	0x2000078c
 8001ea0:	2000067c 	.word	0x2000067c
 8001ea4:	20000214 	.word	0x20000214
 8001ea8:	2000021c 	.word	0x2000021c
 8001eac:	20000218 	.word	0x20000218
 8001eb0:	20000014 	.word	0x20000014

08001eb4 <SystemClock_Config>:

}

/** System Clock Configuration
 */
void SystemClock_Config(void) {
 8001eb4:	b580      	push	{r7, lr}
 8001eb6:	b094      	sub	sp, #80	; 0x50
 8001eb8:	af00      	add	r7, sp, #0
	RCC_ClkInitTypeDef RCC_ClkInitStruct;
	RCC_PeriphCLKInitTypeDef PeriphClkInit;

	/**Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI
 8001eba:	230a      	movs	r3, #10
 8001ebc:	62bb      	str	r3, [r7, #40]	; 0x28
			| RCC_OSCILLATORTYPE_LSI;
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001ebe:	2301      	movs	r3, #1
 8001ec0:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.HSICalibrationValue = 16;
 8001ec2:	2310      	movs	r3, #16
 8001ec4:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8001ec6:	2301      	movs	r3, #1
 8001ec8:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001eca:	2302      	movs	r3, #2
 8001ecc:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8001ece:	2300      	movs	r3, #0
 8001ed0:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8001ed2:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 8001ed6:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8001ed8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001edc:	4618      	mov	r0, r3
 8001ede:	f002 faef 	bl	80044c0 <HAL_RCC_OscConfig>
 8001ee2:	4603      	mov	r3, r0
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d004      	beq.n	8001ef2 <SystemClock_Config+0x3e>
		_Error_Handler(__FILE__, __LINE__);
 8001ee8:	f240 3115 	movw	r1, #789	; 0x315
 8001eec:	4823      	ldr	r0, [pc, #140]	; (8001f7c <SystemClock_Config+0xc8>)
 8001eee:	f000 f849 	bl	8001f84 <_Error_Handler>
	}

	/**Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8001ef2:	230f      	movs	r3, #15
 8001ef4:	617b      	str	r3, [r7, #20]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001ef6:	2302      	movs	r3, #2
 8001ef8:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001efa:	2300      	movs	r3, #0
 8001efc:	61fb      	str	r3, [r7, #28]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001efe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001f02:	623b      	str	r3, [r7, #32]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV16;
 8001f04:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8001f08:	627b      	str	r3, [r7, #36]	; 0x24

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 8001f0a:	f107 0314 	add.w	r3, r7, #20
 8001f0e:	2102      	movs	r1, #2
 8001f10:	4618      	mov	r0, r3
 8001f12:	f002 fd39 	bl	8004988 <HAL_RCC_ClockConfig>
 8001f16:	4603      	mov	r3, r0
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d004      	beq.n	8001f26 <SystemClock_Config+0x72>
		_Error_Handler(__FILE__, __LINE__);
 8001f1c:	f240 3122 	movw	r1, #802	; 0x322
 8001f20:	4816      	ldr	r0, [pc, #88]	; (8001f7c <SystemClock_Config+0xc8>)
 8001f22:	f000 f82f 	bl	8001f84 <_Error_Handler>
	}

	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC | RCC_PERIPHCLK_ADC;
 8001f26:	2303      	movs	r3, #3
 8001f28:	607b      	str	r3, [r7, #4]
	PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8001f2a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001f2e:	60bb      	str	r3, [r7, #8]
	PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV8;
 8001f30:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8001f34:	60fb      	str	r3, [r7, #12]
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK) {
 8001f36:	1d3b      	adds	r3, r7, #4
 8001f38:	4618      	mov	r0, r3
 8001f3a:	f002 fecb 	bl	8004cd4 <HAL_RCCEx_PeriphCLKConfig>
 8001f3e:	4603      	mov	r3, r0
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d004      	beq.n	8001f4e <SystemClock_Config+0x9a>
		_Error_Handler(__FILE__, __LINE__);
 8001f44:	f240 3129 	movw	r1, #809	; 0x329
 8001f48:	480c      	ldr	r0, [pc, #48]	; (8001f7c <SystemClock_Config+0xc8>)
 8001f4a:	f000 f81b 	bl	8001f84 <_Error_Handler>
	}

	/**Configure the Systick interrupt time
	 */
	HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / 1000);
 8001f4e:	f002 fe71 	bl	8004c34 <HAL_RCC_GetHCLKFreq>
 8001f52:	4602      	mov	r2, r0
 8001f54:	4b0a      	ldr	r3, [pc, #40]	; (8001f80 <SystemClock_Config+0xcc>)
 8001f56:	fba3 2302 	umull	r2, r3, r3, r2
 8001f5a:	099b      	lsrs	r3, r3, #6
 8001f5c:	4618      	mov	r0, r3
 8001f5e:	f001 fa7a 	bl	8003456 <HAL_SYSTICK_Config>

	/**Configure the Systick
	 */
	HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8001f62:	2004      	movs	r0, #4
 8001f64:	f001 fa84 	bl	8003470 <HAL_SYSTICK_CLKSourceConfig>

	/* SysTick_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8001f68:	2200      	movs	r2, #0
 8001f6a:	2100      	movs	r1, #0
 8001f6c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001f70:	f001 fa47 	bl	8003402 <HAL_NVIC_SetPriority>
}
 8001f74:	bf00      	nop
 8001f76:	3750      	adds	r7, #80	; 0x50
 8001f78:	46bd      	mov	sp, r7
 8001f7a:	bd80      	pop	{r7, pc}
 8001f7c:	0800a21c 	.word	0x0800a21c
 8001f80:	10624dd3 	.word	0x10624dd3

08001f84 <_Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @param  None
 * @retval None
 */
void _Error_Handler(char *file, int line) {
 8001f84:	b480      	push	{r7}
 8001f86:	b083      	sub	sp, #12
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	6078      	str	r0, [r7, #4]
 8001f8c:	6039      	str	r1, [r7, #0]
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	while (1) {
 8001f8e:	e7fe      	b.n	8001f8e <_Error_Handler+0xa>

08001f90 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8001f90:	b580      	push	{r7, lr}
 8001f92:	b082      	sub	sp, #8
 8001f94:	af00      	add	r7, sp, #0
  RTC_TimeTypeDef sTime;
  RTC_DateTypeDef DateToUpdate;

    /**Initialize RTC Only
    */
  hrtc.Instance = RTC;
 8001f96:	4b27      	ldr	r3, [pc, #156]	; (8002034 <MX_RTC_Init+0xa4>)
 8001f98:	4a27      	ldr	r2, [pc, #156]	; (8002038 <MX_RTC_Init+0xa8>)
 8001f9a:	601a      	str	r2, [r3, #0]
  hrtc.Init.AsynchPrediv = RTC_AUTO_1_SECOND;
 8001f9c:	4b25      	ldr	r3, [pc, #148]	; (8002034 <MX_RTC_Init+0xa4>)
 8001f9e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001fa2:	605a      	str	r2, [r3, #4]
  hrtc.Init.OutPut = RTC_OUTPUTSOURCE_CALIBCLOCK;
 8001fa4:	4b23      	ldr	r3, [pc, #140]	; (8002034 <MX_RTC_Init+0xa4>)
 8001fa6:	2280      	movs	r2, #128	; 0x80
 8001fa8:	609a      	str	r2, [r3, #8]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001faa:	4822      	ldr	r0, [pc, #136]	; (8002034 <MX_RTC_Init+0xa4>)
 8001fac:	f003 f808 	bl	8004fc0 <HAL_RTC_Init>
 8001fb0:	4603      	mov	r3, r0
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d003      	beq.n	8001fbe <MX_RTC_Init+0x2e>
  {
    _Error_Handler(__FILE__, __LINE__);
 8001fb6:	213e      	movs	r1, #62	; 0x3e
 8001fb8:	4820      	ldr	r0, [pc, #128]	; (800203c <MX_RTC_Init+0xac>)
 8001fba:	f7ff ffe3 	bl	8001f84 <_Error_Handler>
  }

    /**Initialize RTC and set the Time and Date
    */
  if(HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_DR1) != 0x32F2){
 8001fbe:	2101      	movs	r1, #1
 8001fc0:	481c      	ldr	r0, [pc, #112]	; (8002034 <MX_RTC_Init+0xa4>)
 8001fc2:	f003 fba5 	bl	8005710 <HAL_RTCEx_BKUPRead>
 8001fc6:	4602      	mov	r2, r0
 8001fc8:	f243 23f2 	movw	r3, #13042	; 0x32f2
 8001fcc:	429a      	cmp	r2, r3
 8001fce:	d02d      	beq.n	800202c <MX_RTC_Init+0x9c>
  sTime.Hours = 0x1;
 8001fd0:	2301      	movs	r3, #1
 8001fd2:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 8001fd4:	2300      	movs	r3, #0
 8001fd6:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 8001fd8:	2300      	movs	r3, #0
 8001fda:	71bb      	strb	r3, [r7, #6]

  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8001fdc:	1d3b      	adds	r3, r7, #4
 8001fde:	2201      	movs	r2, #1
 8001fe0:	4619      	mov	r1, r3
 8001fe2:	4814      	ldr	r0, [pc, #80]	; (8002034 <MX_RTC_Init+0xa4>)
 8001fe4:	f003 f882 	bl	80050ec <HAL_RTC_SetTime>
 8001fe8:	4603      	mov	r3, r0
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d003      	beq.n	8001ff6 <MX_RTC_Init+0x66>
  {
    _Error_Handler(__FILE__, __LINE__);
 8001fee:	214a      	movs	r1, #74	; 0x4a
 8001ff0:	4812      	ldr	r0, [pc, #72]	; (800203c <MX_RTC_Init+0xac>)
 8001ff2:	f7ff ffc7 	bl	8001f84 <_Error_Handler>
  }

  DateToUpdate.WeekDay = RTC_WEEKDAY_MONDAY;
 8001ff6:	2301      	movs	r3, #1
 8001ff8:	703b      	strb	r3, [r7, #0]
  DateToUpdate.Month = RTC_MONTH_JANUARY;
 8001ffa:	2301      	movs	r3, #1
 8001ffc:	707b      	strb	r3, [r7, #1]
  DateToUpdate.Date = 0x1;
 8001ffe:	2301      	movs	r3, #1
 8002000:	70bb      	strb	r3, [r7, #2]
  DateToUpdate.Year = 0x0;
 8002002:	2300      	movs	r3, #0
 8002004:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &DateToUpdate, RTC_FORMAT_BCD) != HAL_OK)
 8002006:	463b      	mov	r3, r7
 8002008:	2201      	movs	r2, #1
 800200a:	4619      	mov	r1, r3
 800200c:	4809      	ldr	r0, [pc, #36]	; (8002034 <MX_RTC_Init+0xa4>)
 800200e:	f003 f905 	bl	800521c <HAL_RTC_SetDate>
 8002012:	4603      	mov	r3, r0
 8002014:	2b00      	cmp	r3, #0
 8002016:	d003      	beq.n	8002020 <MX_RTC_Init+0x90>
  {
    _Error_Handler(__FILE__, __LINE__);
 8002018:	2154      	movs	r1, #84	; 0x54
 800201a:	4808      	ldr	r0, [pc, #32]	; (800203c <MX_RTC_Init+0xac>)
 800201c:	f7ff ffb2 	bl	8001f84 <_Error_Handler>
  }

    HAL_RTCEx_BKUPWrite(&hrtc,RTC_BKP_DR1,0x32F2);
 8002020:	f243 22f2 	movw	r2, #13042	; 0x32f2
 8002024:	2101      	movs	r1, #1
 8002026:	4803      	ldr	r0, [pc, #12]	; (8002034 <MX_RTC_Init+0xa4>)
 8002028:	f003 fb58 	bl	80056dc <HAL_RTCEx_BKUPWrite>
  }

}
 800202c:	bf00      	nop
 800202e:	3708      	adds	r7, #8
 8002030:	46bd      	mov	sp, r7
 8002032:	bd80      	pop	{r7, pc}
 8002034:	20000930 	.word	0x20000930
 8002038:	40002800 	.word	0x40002800
 800203c:	0800a230 	.word	0x0800a230

08002040 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8002040:	b580      	push	{r7, lr}
 8002042:	b084      	sub	sp, #16
 8002044:	af00      	add	r7, sp, #0
 8002046:	6078      	str	r0, [r7, #4]

  if(rtcHandle->Instance==RTC)
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	4a0b      	ldr	r2, [pc, #44]	; (800207c <HAL_RTC_MspInit+0x3c>)
 800204e:	4293      	cmp	r3, r2
 8002050:	d110      	bne.n	8002074 <HAL_RTC_MspInit+0x34>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    HAL_PWR_EnableBkUpAccess();
 8002052:	f002 fa29 	bl	80044a8 <HAL_PWR_EnableBkUpAccess>
    /* Enable BKP CLK enable for backup registers */
    __HAL_RCC_BKP_CLK_ENABLE();
 8002056:	4b0a      	ldr	r3, [pc, #40]	; (8002080 <HAL_RTC_MspInit+0x40>)
 8002058:	69db      	ldr	r3, [r3, #28]
 800205a:	4a09      	ldr	r2, [pc, #36]	; (8002080 <HAL_RTC_MspInit+0x40>)
 800205c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002060:	61d3      	str	r3, [r2, #28]
 8002062:	4b07      	ldr	r3, [pc, #28]	; (8002080 <HAL_RTC_MspInit+0x40>)
 8002064:	69db      	ldr	r3, [r3, #28]
 8002066:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800206a:	60fb      	str	r3, [r7, #12]
 800206c:	68fb      	ldr	r3, [r7, #12]
    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 800206e:	4b05      	ldr	r3, [pc, #20]	; (8002084 <HAL_RTC_MspInit+0x44>)
 8002070:	2201      	movs	r2, #1
 8002072:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8002074:	bf00      	nop
 8002076:	3710      	adds	r7, #16
 8002078:	46bd      	mov	sp, r7
 800207a:	bd80      	pop	{r7, pc}
 800207c:	40002800 	.word	0x40002800
 8002080:	40021000 	.word	0x40021000
 8002084:	4242043c 	.word	0x4242043c

08002088 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002088:	b580      	push	{r7, lr}
 800208a:	b082      	sub	sp, #8
 800208c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800208e:	4b24      	ldr	r3, [pc, #144]	; (8002120 <HAL_MspInit+0x98>)
 8002090:	699b      	ldr	r3, [r3, #24]
 8002092:	4a23      	ldr	r2, [pc, #140]	; (8002120 <HAL_MspInit+0x98>)
 8002094:	f043 0301 	orr.w	r3, r3, #1
 8002098:	6193      	str	r3, [r2, #24]
 800209a:	4b21      	ldr	r3, [pc, #132]	; (8002120 <HAL_MspInit+0x98>)
 800209c:	699b      	ldr	r3, [r3, #24]
 800209e:	f003 0301 	and.w	r3, r3, #1
 80020a2:	607b      	str	r3, [r7, #4]
 80020a4:	687b      	ldr	r3, [r7, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80020a6:	2003      	movs	r0, #3
 80020a8:	f001 f9a0 	bl	80033ec <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 80020ac:	2200      	movs	r2, #0
 80020ae:	2100      	movs	r1, #0
 80020b0:	f06f 000b 	mvn.w	r0, #11
 80020b4:	f001 f9a5 	bl	8003402 <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 80020b8:	2200      	movs	r2, #0
 80020ba:	2100      	movs	r1, #0
 80020bc:	f06f 000a 	mvn.w	r0, #10
 80020c0:	f001 f99f 	bl	8003402 <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 80020c4:	2200      	movs	r2, #0
 80020c6:	2100      	movs	r1, #0
 80020c8:	f06f 0009 	mvn.w	r0, #9
 80020cc:	f001 f999 	bl	8003402 <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 80020d0:	2200      	movs	r2, #0
 80020d2:	2100      	movs	r1, #0
 80020d4:	f06f 0004 	mvn.w	r0, #4
 80020d8:	f001 f993 	bl	8003402 <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 80020dc:	2200      	movs	r2, #0
 80020de:	2100      	movs	r1, #0
 80020e0:	f06f 0003 	mvn.w	r0, #3
 80020e4:	f001 f98d 	bl	8003402 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 80020e8:	2200      	movs	r2, #0
 80020ea:	2100      	movs	r1, #0
 80020ec:	f06f 0001 	mvn.w	r0, #1
 80020f0:	f001 f987 	bl	8003402 <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 80020f4:	2200      	movs	r2, #0
 80020f6:	2100      	movs	r1, #0
 80020f8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80020fc:	f001 f981 	bl	8003402 <HAL_NVIC_SetPriority>

    /**NOJTAG: JTAG-DP Disabled and SW-DP Enabled
    */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8002100:	4b08      	ldr	r3, [pc, #32]	; (8002124 <HAL_MspInit+0x9c>)
 8002102:	685b      	ldr	r3, [r3, #4]
 8002104:	4a07      	ldr	r2, [pc, #28]	; (8002124 <HAL_MspInit+0x9c>)
 8002106:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800210a:	6053      	str	r3, [r2, #4]
 800210c:	4b05      	ldr	r3, [pc, #20]	; (8002124 <HAL_MspInit+0x9c>)
 800210e:	685b      	ldr	r3, [r3, #4]
 8002110:	4a04      	ldr	r2, [pc, #16]	; (8002124 <HAL_MspInit+0x9c>)
 8002112:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002116:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002118:	bf00      	nop
 800211a:	3708      	adds	r7, #8
 800211c:	46bd      	mov	sp, r7
 800211e:	bd80      	pop	{r7, pc}
 8002120:	40021000 	.word	0x40021000
 8002124:	40010000 	.word	0x40010000

08002128 <NMI_Handler>:

/**
* @brief This function handles Non maskable interrupt.
*/
void NMI_Handler(void)
{
 8002128:	b480      	push	{r7}
 800212a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800212c:	bf00      	nop
 800212e:	46bd      	mov	sp, r7
 8002130:	bc80      	pop	{r7}
 8002132:	4770      	bx	lr

08002134 <HardFault_Handler>:

/**
* @brief This function handles Hard fault interrupt.
*/
void HardFault_Handler(void)
{
 8002134:	b480      	push	{r7}
 8002136:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002138:	e7fe      	b.n	8002138 <HardFault_Handler+0x4>

0800213a <MemManage_Handler>:

/**
* @brief This function handles Memory management fault.
*/
void MemManage_Handler(void)
{
 800213a:	b480      	push	{r7}
 800213c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800213e:	e7fe      	b.n	800213e <MemManage_Handler+0x4>

08002140 <BusFault_Handler>:

/**
* @brief This function handles Prefetch fault, memory access fault.
*/
void BusFault_Handler(void)
{
 8002140:	b480      	push	{r7}
 8002142:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002144:	e7fe      	b.n	8002144 <BusFault_Handler+0x4>

08002146 <UsageFault_Handler>:

/**
* @brief This function handles Undefined instruction or illegal state.
*/
void UsageFault_Handler(void)
{
 8002146:	b480      	push	{r7}
 8002148:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800214a:	e7fe      	b.n	800214a <UsageFault_Handler+0x4>

0800214c <SVC_Handler>:

/**
* @brief This function handles System service call via SWI instruction.
*/
void SVC_Handler(void)
{
 800214c:	b480      	push	{r7}
 800214e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002150:	bf00      	nop
 8002152:	46bd      	mov	sp, r7
 8002154:	bc80      	pop	{r7}
 8002156:	4770      	bx	lr

08002158 <DebugMon_Handler>:

/**
* @brief This function handles Debug monitor.
*/
void DebugMon_Handler(void)
{
 8002158:	b480      	push	{r7}
 800215a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800215c:	bf00      	nop
 800215e:	46bd      	mov	sp, r7
 8002160:	bc80      	pop	{r7}
 8002162:	4770      	bx	lr

08002164 <PendSV_Handler>:

/**
* @brief This function handles Pendable request for system service.
*/
void PendSV_Handler(void)
{
 8002164:	b480      	push	{r7}
 8002166:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002168:	bf00      	nop
 800216a:	46bd      	mov	sp, r7
 800216c:	bc80      	pop	{r7}
 800216e:	4770      	bx	lr

08002170 <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 8002170:	b580      	push	{r7, lr}
 8002172:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002174:	f000 fc80 	bl	8002a78 <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
 8002178:	f001 f996 	bl	80034a8 <HAL_SYSTICK_IRQHandler>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800217c:	bf00      	nop
 800217e:	bd80      	pop	{r7, pc}

08002180 <DMA1_Channel1_IRQHandler>:

/**
* @brief This function handles DMA1 channel1 global interrupt.
*/
void DMA1_Channel1_IRQHandler(void)
{
 8002180:	b580      	push	{r7, lr}
 8002182:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002184:	4802      	ldr	r0, [pc, #8]	; (8002190 <DMA1_Channel1_IRQHandler+0x10>)
 8002186:	f001 fad7 	bl	8003738 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800218a:	bf00      	nop
 800218c:	bd80      	pop	{r7, pc}
 800218e:	bf00      	nop
 8002190:	200006ac 	.word	0x200006ac

08002194 <USART2_IRQHandler>:

/**
* @brief This function handles USART2 global interrupt.
*/
void USART2_IRQHandler(void)
{
 8002194:	b580      	push	{r7, lr}
 8002196:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002198:	4802      	ldr	r0, [pc, #8]	; (80021a4 <USART2_IRQHandler+0x10>)
 800219a:	f003 fea9 	bl	8005ef0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800219e:	bf00      	nop
 80021a0:	bd80      	pop	{r7, pc}
 80021a2:	bf00      	nop
 80021a4:	20000984 	.word	0x20000984

080021a8 <EXTI15_10_IRQHandler>:

/**
* @brief This function handles EXTI line[15:10] interrupts.
*/
void EXTI15_10_IRQHandler(void)
{
 80021a8:	b580      	push	{r7, lr}
 80021aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 80021ac:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80021b0:	f001 fd84 	bl	8003cbc <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 80021b4:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80021b8:	f001 fd80 	bl	8003cbc <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 80021bc:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80021c0:	f001 fd7c 	bl	8003cbc <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 80021c4:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80021c8:	f001 fd78 	bl	8003cbc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80021cc:	bf00      	nop
 80021ce:	bd80      	pop	{r7, pc}

080021d0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80021d0:	b580      	push	{r7, lr}
 80021d2:	b086      	sub	sp, #24
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80021d8:	4a14      	ldr	r2, [pc, #80]	; (800222c <_sbrk+0x5c>)
 80021da:	4b15      	ldr	r3, [pc, #84]	; (8002230 <_sbrk+0x60>)
 80021dc:	1ad3      	subs	r3, r2, r3
 80021de:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80021e0:	697b      	ldr	r3, [r7, #20]
 80021e2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80021e4:	4b13      	ldr	r3, [pc, #76]	; (8002234 <_sbrk+0x64>)
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d102      	bne.n	80021f2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80021ec:	4b11      	ldr	r3, [pc, #68]	; (8002234 <_sbrk+0x64>)
 80021ee:	4a12      	ldr	r2, [pc, #72]	; (8002238 <_sbrk+0x68>)
 80021f0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80021f2:	4b10      	ldr	r3, [pc, #64]	; (8002234 <_sbrk+0x64>)
 80021f4:	681a      	ldr	r2, [r3, #0]
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	4413      	add	r3, r2
 80021fa:	693a      	ldr	r2, [r7, #16]
 80021fc:	429a      	cmp	r2, r3
 80021fe:	d207      	bcs.n	8002210 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002200:	f004 f9c4 	bl	800658c <__errno>
 8002204:	4602      	mov	r2, r0
 8002206:	230c      	movs	r3, #12
 8002208:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 800220a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800220e:	e009      	b.n	8002224 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002210:	4b08      	ldr	r3, [pc, #32]	; (8002234 <_sbrk+0x64>)
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002216:	4b07      	ldr	r3, [pc, #28]	; (8002234 <_sbrk+0x64>)
 8002218:	681a      	ldr	r2, [r3, #0]
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	4413      	add	r3, r2
 800221e:	4a05      	ldr	r2, [pc, #20]	; (8002234 <_sbrk+0x64>)
 8002220:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002222:	68fb      	ldr	r3, [r7, #12]
}
 8002224:	4618      	mov	r0, r3
 8002226:	3718      	adds	r7, #24
 8002228:	46bd      	mov	sp, r7
 800222a:	bd80      	pop	{r7, pc}
 800222c:	20005000 	.word	0x20005000
 8002230:	00000400 	.word	0x00000400
 8002234:	20000268 	.word	0x20000268
 8002238:	200009d0 	.word	0x200009d0

0800223c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800223c:	b480      	push	{r7}
 800223e:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8002240:	4b15      	ldr	r3, [pc, #84]	; (8002298 <SystemInit+0x5c>)
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	4a14      	ldr	r2, [pc, #80]	; (8002298 <SystemInit+0x5c>)
 8002246:	f043 0301 	orr.w	r3, r3, #1
 800224a:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 800224c:	4b12      	ldr	r3, [pc, #72]	; (8002298 <SystemInit+0x5c>)
 800224e:	685a      	ldr	r2, [r3, #4]
 8002250:	4911      	ldr	r1, [pc, #68]	; (8002298 <SystemInit+0x5c>)
 8002252:	4b12      	ldr	r3, [pc, #72]	; (800229c <SystemInit+0x60>)
 8002254:	4013      	ands	r3, r2
 8002256:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8002258:	4b0f      	ldr	r3, [pc, #60]	; (8002298 <SystemInit+0x5c>)
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	4a0e      	ldr	r2, [pc, #56]	; (8002298 <SystemInit+0x5c>)
 800225e:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8002262:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002266:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002268:	4b0b      	ldr	r3, [pc, #44]	; (8002298 <SystemInit+0x5c>)
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	4a0a      	ldr	r2, [pc, #40]	; (8002298 <SystemInit+0x5c>)
 800226e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002272:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8002274:	4b08      	ldr	r3, [pc, #32]	; (8002298 <SystemInit+0x5c>)
 8002276:	685b      	ldr	r3, [r3, #4]
 8002278:	4a07      	ldr	r2, [pc, #28]	; (8002298 <SystemInit+0x5c>)
 800227a:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 800227e:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8002280:	4b05      	ldr	r3, [pc, #20]	; (8002298 <SystemInit+0x5c>)
 8002282:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8002286:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8002288:	4b05      	ldr	r3, [pc, #20]	; (80022a0 <SystemInit+0x64>)
 800228a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800228e:	609a      	str	r2, [r3, #8]
#endif 
}
 8002290:	bf00      	nop
 8002292:	46bd      	mov	sp, r7
 8002294:	bc80      	pop	{r7}
 8002296:	4770      	bx	lr
 8002298:	40021000 	.word	0x40021000
 800229c:	f8ff0000 	.word	0xf8ff0000
 80022a0:	e000ed00 	.word	0xe000ed00

080022a4 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80022a4:	b580      	push	{r7, lr}
 80022a6:	b08a      	sub	sp, #40	; 0x28
 80022a8:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig;
  TIM_OC_InitTypeDef sConfigOC;

  htim2.Instance = TIM2;
 80022aa:	4b2c      	ldr	r3, [pc, #176]	; (800235c <MX_TIM2_Init+0xb8>)
 80022ac:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80022b0:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80022b2:	4b2a      	ldr	r3, [pc, #168]	; (800235c <MX_TIM2_Init+0xb8>)
 80022b4:	2200      	movs	r2, #0
 80022b6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80022b8:	4b28      	ldr	r3, [pc, #160]	; (800235c <MX_TIM2_Init+0xb8>)
 80022ba:	2200      	movs	r2, #0
 80022bc:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10000-1;
 80022be:	4b27      	ldr	r3, [pc, #156]	; (800235c <MX_TIM2_Init+0xb8>)
 80022c0:	f242 720f 	movw	r2, #9999	; 0x270f
 80022c4:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80022c6:	4b25      	ldr	r3, [pc, #148]	; (800235c <MX_TIM2_Init+0xb8>)
 80022c8:	2200      	movs	r2, #0
 80022ca:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80022cc:	4b23      	ldr	r3, [pc, #140]	; (800235c <MX_TIM2_Init+0xb8>)
 80022ce:	2200      	movs	r2, #0
 80022d0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80022d2:	4822      	ldr	r0, [pc, #136]	; (800235c <MX_TIM2_Init+0xb8>)
 80022d4:	f003 fa38 	bl	8005748 <HAL_TIM_PWM_Init>
 80022d8:	4603      	mov	r3, r0
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d003      	beq.n	80022e6 <MX_TIM2_Init+0x42>
  {
    _Error_Handler(__FILE__, __LINE__);
 80022de:	213f      	movs	r1, #63	; 0x3f
 80022e0:	481f      	ldr	r0, [pc, #124]	; (8002360 <MX_TIM2_Init+0xbc>)
 80022e2:	f7ff fe4f 	bl	8001f84 <_Error_Handler>
  }

  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80022e6:	2300      	movs	r3, #0
 80022e8:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80022ea:	2300      	movs	r3, #0
 80022ec:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80022ee:	f107 0320 	add.w	r3, r7, #32
 80022f2:	4619      	mov	r1, r3
 80022f4:	4819      	ldr	r0, [pc, #100]	; (800235c <MX_TIM2_Init+0xb8>)
 80022f6:	f003 fd69 	bl	8005dcc <HAL_TIMEx_MasterConfigSynchronization>
 80022fa:	4603      	mov	r3, r0
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d003      	beq.n	8002308 <MX_TIM2_Init+0x64>
  {
    _Error_Handler(__FILE__, __LINE__);
 8002300:	2146      	movs	r1, #70	; 0x46
 8002302:	4817      	ldr	r0, [pc, #92]	; (8002360 <MX_TIM2_Init+0xbc>)
 8002304:	f7ff fe3e 	bl	8001f84 <_Error_Handler>
  }

  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002308:	2360      	movs	r3, #96	; 0x60
 800230a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800230c:	2300      	movs	r3, #0
 800230e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002310:	2300      	movs	r3, #0
 8002312:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002314:	2300      	movs	r3, #0
 8002316:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002318:	1d3b      	adds	r3, r7, #4
 800231a:	2208      	movs	r2, #8
 800231c:	4619      	mov	r1, r3
 800231e:	480f      	ldr	r0, [pc, #60]	; (800235c <MX_TIM2_Init+0xb8>)
 8002320:	f003 fa66 	bl	80057f0 <HAL_TIM_PWM_ConfigChannel>
 8002324:	4603      	mov	r3, r0
 8002326:	2b00      	cmp	r3, #0
 8002328:	d003      	beq.n	8002332 <MX_TIM2_Init+0x8e>
  {
    _Error_Handler(__FILE__, __LINE__);
 800232a:	214f      	movs	r1, #79	; 0x4f
 800232c:	480c      	ldr	r0, [pc, #48]	; (8002360 <MX_TIM2_Init+0xbc>)
 800232e:	f7ff fe29 	bl	8001f84 <_Error_Handler>
  }

  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002332:	1d3b      	adds	r3, r7, #4
 8002334:	220c      	movs	r2, #12
 8002336:	4619      	mov	r1, r3
 8002338:	4808      	ldr	r0, [pc, #32]	; (800235c <MX_TIM2_Init+0xb8>)
 800233a:	f003 fa59 	bl	80057f0 <HAL_TIM_PWM_ConfigChannel>
 800233e:	4603      	mov	r3, r0
 8002340:	2b00      	cmp	r3, #0
 8002342:	d003      	beq.n	800234c <MX_TIM2_Init+0xa8>
  {
    _Error_Handler(__FILE__, __LINE__);
 8002344:	2154      	movs	r1, #84	; 0x54
 8002346:	4806      	ldr	r0, [pc, #24]	; (8002360 <MX_TIM2_Init+0xbc>)
 8002348:	f7ff fe1c 	bl	8001f84 <_Error_Handler>
  }

  HAL_TIM_MspPostInit(&htim2);
 800234c:	4803      	ldr	r0, [pc, #12]	; (800235c <MX_TIM2_Init+0xb8>)
 800234e:	f000 f825 	bl	800239c <HAL_TIM_MspPostInit>

}
 8002352:	bf00      	nop
 8002354:	3728      	adds	r7, #40	; 0x28
 8002356:	46bd      	mov	sp, r7
 8002358:	bd80      	pop	{r7, pc}
 800235a:	bf00      	nop
 800235c:	20000944 	.word	0x20000944
 8002360:	0800a244 	.word	0x0800a244

08002364 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8002364:	b480      	push	{r7}
 8002366:	b085      	sub	sp, #20
 8002368:	af00      	add	r7, sp, #0
 800236a:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM2)
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002374:	d10b      	bne.n	800238e <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002376:	4b08      	ldr	r3, [pc, #32]	; (8002398 <HAL_TIM_PWM_MspInit+0x34>)
 8002378:	69db      	ldr	r3, [r3, #28]
 800237a:	4a07      	ldr	r2, [pc, #28]	; (8002398 <HAL_TIM_PWM_MspInit+0x34>)
 800237c:	f043 0301 	orr.w	r3, r3, #1
 8002380:	61d3      	str	r3, [r2, #28]
 8002382:	4b05      	ldr	r3, [pc, #20]	; (8002398 <HAL_TIM_PWM_MspInit+0x34>)
 8002384:	69db      	ldr	r3, [r3, #28]
 8002386:	f003 0301 	and.w	r3, r3, #1
 800238a:	60fb      	str	r3, [r7, #12]
 800238c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 800238e:	bf00      	nop
 8002390:	3714      	adds	r7, #20
 8002392:	46bd      	mov	sp, r7
 8002394:	bc80      	pop	{r7}
 8002396:	4770      	bx	lr
 8002398:	40021000 	.word	0x40021000

0800239c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 800239c:	b580      	push	{r7, lr}
 800239e:	b086      	sub	sp, #24
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  if(timHandle->Instance==TIM2)
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80023ac:	d118      	bne.n	80023e0 <HAL_TIM_MspPostInit+0x44>

    /**TIM2 GPIO Configuration
    PB10     ------> TIM2_CH3
    PB11     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = PWM_M1_Pin|PWM_M2_Pin;
 80023ae:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80023b2:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023b4:	2302      	movs	r3, #2
 80023b6:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023b8:	2302      	movs	r3, #2
 80023ba:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80023bc:	f107 0308 	add.w	r3, r7, #8
 80023c0:	4619      	mov	r1, r3
 80023c2:	4809      	ldr	r0, [pc, #36]	; (80023e8 <HAL_TIM_MspPostInit+0x4c>)
 80023c4:	f001 faec 	bl	80039a0 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM2_PARTIAL_2();
 80023c8:	4b08      	ldr	r3, [pc, #32]	; (80023ec <HAL_TIM_MspPostInit+0x50>)
 80023ca:	685b      	ldr	r3, [r3, #4]
 80023cc:	4a07      	ldr	r2, [pc, #28]	; (80023ec <HAL_TIM_MspPostInit+0x50>)
 80023ce:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80023d2:	6053      	str	r3, [r2, #4]
 80023d4:	4b05      	ldr	r3, [pc, #20]	; (80023ec <HAL_TIM_MspPostInit+0x50>)
 80023d6:	685b      	ldr	r3, [r3, #4]
 80023d8:	4a04      	ldr	r2, [pc, #16]	; (80023ec <HAL_TIM_MspPostInit+0x50>)
 80023da:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80023de:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80023e0:	bf00      	nop
 80023e2:	3718      	adds	r7, #24
 80023e4:	46bd      	mov	sp, r7
 80023e6:	bd80      	pop	{r7, pc}
 80023e8:	40010c00 	.word	0x40010c00
 80023ec:	40010000 	.word	0x40010000

080023f0 <user_pwm_setvalue_1>:

/* USER CODE BEGIN 1 */


void user_pwm_setvalue_1(uint16_t value)
{
 80023f0:	b580      	push	{r7, lr}
 80023f2:	b08a      	sub	sp, #40	; 0x28
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	4603      	mov	r3, r0
 80023f8:	80fb      	strh	r3, [r7, #6]
    TIM_OC_InitTypeDef sConfigOC;

    sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80023fa:	2360      	movs	r3, #96	; 0x60
 80023fc:	60fb      	str	r3, [r7, #12]
    sConfigOC.Pulse = value;
 80023fe:	88fb      	ldrh	r3, [r7, #6]
 8002400:	613b      	str	r3, [r7, #16]
    sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002402:	2300      	movs	r3, #0
 8002404:	617b      	str	r3, [r7, #20]
    sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002406:	2300      	movs	r3, #0
 8002408:	61fb      	str	r3, [r7, #28]
    HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3);
 800240a:	f107 030c 	add.w	r3, r7, #12
 800240e:	2208      	movs	r2, #8
 8002410:	4619      	mov	r1, r3
 8002412:	4805      	ldr	r0, [pc, #20]	; (8002428 <user_pwm_setvalue_1+0x38>)
 8002414:	f003 f9ec 	bl	80057f0 <HAL_TIM_PWM_ConfigChannel>
    HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 8002418:	2108      	movs	r1, #8
 800241a:	4803      	ldr	r0, [pc, #12]	; (8002428 <user_pwm_setvalue_1+0x38>)
 800241c:	f003 f9c0 	bl	80057a0 <HAL_TIM_PWM_Start>
    //HAL_TIM_MspPostInit(&htim2);
}
 8002420:	bf00      	nop
 8002422:	3728      	adds	r7, #40	; 0x28
 8002424:	46bd      	mov	sp, r7
 8002426:	bd80      	pop	{r7, pc}
 8002428:	20000944 	.word	0x20000944

0800242c <user_pwm_setvalue_2>:
void user_pwm_setvalue_2(uint16_t value)
{
 800242c:	b580      	push	{r7, lr}
 800242e:	b08a      	sub	sp, #40	; 0x28
 8002430:	af00      	add	r7, sp, #0
 8002432:	4603      	mov	r3, r0
 8002434:	80fb      	strh	r3, [r7, #6]
    TIM_OC_InitTypeDef sConfigOC;

    sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002436:	2360      	movs	r3, #96	; 0x60
 8002438:	60fb      	str	r3, [r7, #12]
    sConfigOC.Pulse = value;
 800243a:	88fb      	ldrh	r3, [r7, #6]
 800243c:	613b      	str	r3, [r7, #16]
    sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800243e:	2300      	movs	r3, #0
 8002440:	617b      	str	r3, [r7, #20]
    sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002442:	2300      	movs	r3, #0
 8002444:	61fb      	str	r3, [r7, #28]
    HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4);
 8002446:	f107 030c 	add.w	r3, r7, #12
 800244a:	220c      	movs	r2, #12
 800244c:	4619      	mov	r1, r3
 800244e:	4805      	ldr	r0, [pc, #20]	; (8002464 <user_pwm_setvalue_2+0x38>)
 8002450:	f003 f9ce 	bl	80057f0 <HAL_TIM_PWM_ConfigChannel>
    HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 8002454:	210c      	movs	r1, #12
 8002456:	4803      	ldr	r0, [pc, #12]	; (8002464 <user_pwm_setvalue_2+0x38>)
 8002458:	f003 f9a2 	bl	80057a0 <HAL_TIM_PWM_Start>
   // HAL_TIM_MspPostInit(&htim2);
}
 800245c:	bf00      	nop
 800245e:	3728      	adds	r7, #40	; 0x28
 8002460:	46bd      	mov	sp, r7
 8002462:	bd80      	pop	{r7, pc}
 8002464:	20000944 	.word	0x20000944

08002468 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002468:	b580      	push	{r7, lr}
 800246a:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 800246c:	4b12      	ldr	r3, [pc, #72]	; (80024b8 <MX_USART2_UART_Init+0x50>)
 800246e:	4a13      	ldr	r2, [pc, #76]	; (80024bc <MX_USART2_UART_Init+0x54>)
 8002470:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002472:	4b11      	ldr	r3, [pc, #68]	; (80024b8 <MX_USART2_UART_Init+0x50>)
 8002474:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002478:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800247a:	4b0f      	ldr	r3, [pc, #60]	; (80024b8 <MX_USART2_UART_Init+0x50>)
 800247c:	2200      	movs	r2, #0
 800247e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002480:	4b0d      	ldr	r3, [pc, #52]	; (80024b8 <MX_USART2_UART_Init+0x50>)
 8002482:	2200      	movs	r2, #0
 8002484:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002486:	4b0c      	ldr	r3, [pc, #48]	; (80024b8 <MX_USART2_UART_Init+0x50>)
 8002488:	2200      	movs	r2, #0
 800248a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800248c:	4b0a      	ldr	r3, [pc, #40]	; (80024b8 <MX_USART2_UART_Init+0x50>)
 800248e:	220c      	movs	r2, #12
 8002490:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002492:	4b09      	ldr	r3, [pc, #36]	; (80024b8 <MX_USART2_UART_Init+0x50>)
 8002494:	2200      	movs	r2, #0
 8002496:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002498:	4b07      	ldr	r3, [pc, #28]	; (80024b8 <MX_USART2_UART_Init+0x50>)
 800249a:	2200      	movs	r2, #0
 800249c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800249e:	4806      	ldr	r0, [pc, #24]	; (80024b8 <MX_USART2_UART_Init+0x50>)
 80024a0:	f003 fcd8 	bl	8005e54 <HAL_UART_Init>
 80024a4:	4603      	mov	r3, r0
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d003      	beq.n	80024b2 <MX_USART2_UART_Init+0x4a>
  {
    _Error_Handler(__FILE__, __LINE__);
 80024aa:	2142      	movs	r1, #66	; 0x42
 80024ac:	4804      	ldr	r0, [pc, #16]	; (80024c0 <MX_USART2_UART_Init+0x58>)
 80024ae:	f7ff fd69 	bl	8001f84 <_Error_Handler>
  }

}
 80024b2:	bf00      	nop
 80024b4:	bd80      	pop	{r7, pc}
 80024b6:	bf00      	nop
 80024b8:	20000984 	.word	0x20000984
 80024bc:	40004400 	.word	0x40004400
 80024c0:	0800a258 	.word	0x0800a258

080024c4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80024c4:	b580      	push	{r7, lr}
 80024c6:	b088      	sub	sp, #32
 80024c8:	af00      	add	r7, sp, #0
 80024ca:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  if(uartHandle->Instance==USART2)
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	4a19      	ldr	r2, [pc, #100]	; (8002538 <HAL_UART_MspInit+0x74>)
 80024d2:	4293      	cmp	r3, r2
 80024d4:	d12b      	bne.n	800252e <HAL_UART_MspInit+0x6a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80024d6:	4b19      	ldr	r3, [pc, #100]	; (800253c <HAL_UART_MspInit+0x78>)
 80024d8:	69db      	ldr	r3, [r3, #28]
 80024da:	4a18      	ldr	r2, [pc, #96]	; (800253c <HAL_UART_MspInit+0x78>)
 80024dc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80024e0:	61d3      	str	r3, [r2, #28]
 80024e2:	4b16      	ldr	r3, [pc, #88]	; (800253c <HAL_UART_MspInit+0x78>)
 80024e4:	69db      	ldr	r3, [r3, #28]
 80024e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024ea:	60fb      	str	r3, [r7, #12]
 80024ec:	68fb      	ldr	r3, [r7, #12]

    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80024ee:	2304      	movs	r3, #4
 80024f0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024f2:	2302      	movs	r3, #2
 80024f4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80024f6:	2303      	movs	r3, #3
 80024f8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80024fa:	f107 0310 	add.w	r3, r7, #16
 80024fe:	4619      	mov	r1, r3
 8002500:	480f      	ldr	r0, [pc, #60]	; (8002540 <HAL_UART_MspInit+0x7c>)
 8002502:	f001 fa4d 	bl	80039a0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002506:	2308      	movs	r3, #8
 8002508:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800250a:	2300      	movs	r3, #0
 800250c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800250e:	2300      	movs	r3, #0
 8002510:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002512:	f107 0310 	add.w	r3, r7, #16
 8002516:	4619      	mov	r1, r3
 8002518:	4809      	ldr	r0, [pc, #36]	; (8002540 <HAL_UART_MspInit+0x7c>)
 800251a:	f001 fa41 	bl	80039a0 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800251e:	2200      	movs	r2, #0
 8002520:	2100      	movs	r1, #0
 8002522:	2026      	movs	r0, #38	; 0x26
 8002524:	f000 ff6d 	bl	8003402 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002528:	2026      	movs	r0, #38	; 0x26
 800252a:	f000 ff86 	bl	800343a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 800252e:	bf00      	nop
 8002530:	3720      	adds	r7, #32
 8002532:	46bd      	mov	sp, r7
 8002534:	bd80      	pop	{r7, pc}
 8002536:	bf00      	nop
 8002538:	40004400 	.word	0x40004400
 800253c:	40021000 	.word	0x40021000
 8002540:	40010800 	.word	0x40010800

08002544 <ssd1306_Reset>:
#include <stdlib.h>
#include <string.h>  // For memcpy

#if defined(SSD1306_USE_I2C)

void ssd1306_Reset(void) {
 8002544:	b480      	push	{r7}
 8002546:	af00      	add	r7, sp, #0
    /* for I2C - do nothing */
}
 8002548:	bf00      	nop
 800254a:	46bd      	mov	sp, r7
 800254c:	bc80      	pop	{r7}
 800254e:	4770      	bx	lr

08002550 <ssd1306_WriteCommand>:


// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 8002550:	b580      	push	{r7, lr}
 8002552:	b086      	sub	sp, #24
 8002554:	af04      	add	r7, sp, #16
 8002556:	4603      	mov	r3, r0
 8002558:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 800255a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800255e:	9302      	str	r3, [sp, #8]
 8002560:	2301      	movs	r3, #1
 8002562:	9301      	str	r3, [sp, #4]
 8002564:	1dfb      	adds	r3, r7, #7
 8002566:	9300      	str	r3, [sp, #0]
 8002568:	2301      	movs	r3, #1
 800256a:	2200      	movs	r2, #0
 800256c:	2178      	movs	r1, #120	; 0x78
 800256e:	4803      	ldr	r0, [pc, #12]	; (800257c <ssd1306_WriteCommand+0x2c>)
 8002570:	f001 fc9c 	bl	8003eac <HAL_I2C_Mem_Write>
}
 8002574:	bf00      	nop
 8002576:	3708      	adds	r7, #8
 8002578:	46bd      	mov	sp, r7
 800257a:	bd80      	pop	{r7, pc}
 800257c:	200006f0 	.word	0x200006f0

08002580 <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 8002580:	b580      	push	{r7, lr}
 8002582:	b086      	sub	sp, #24
 8002584:	af04      	add	r7, sp, #16
 8002586:	6078      	str	r0, [r7, #4]
 8002588:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 800258a:	683b      	ldr	r3, [r7, #0]
 800258c:	b29b      	uxth	r3, r3
 800258e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002592:	9202      	str	r2, [sp, #8]
 8002594:	9301      	str	r3, [sp, #4]
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	9300      	str	r3, [sp, #0]
 800259a:	2301      	movs	r3, #1
 800259c:	2240      	movs	r2, #64	; 0x40
 800259e:	2178      	movs	r1, #120	; 0x78
 80025a0:	4803      	ldr	r0, [pc, #12]	; (80025b0 <ssd1306_WriteData+0x30>)
 80025a2:	f001 fc83 	bl	8003eac <HAL_I2C_Mem_Write>
}
 80025a6:	bf00      	nop
 80025a8:	3708      	adds	r7, #8
 80025aa:	46bd      	mov	sp, r7
 80025ac:	bd80      	pop	{r7, pc}
 80025ae:	bf00      	nop
 80025b0:	200006f0 	.word	0x200006f0

080025b4 <ssd1306_Init>:
    }
    return ret;
}

// Initialize the oled screen
void ssd1306_Init(void) {
 80025b4:	b580      	push	{r7, lr}
 80025b6:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 80025b8:	f7ff ffc4 	bl	8002544 <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 80025bc:	2064      	movs	r0, #100	; 0x64
 80025be:	f000 fa73 	bl	8002aa8 <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 80025c2:	2000      	movs	r0, #0
 80025c4:	f000 f9e2 	bl	800298c <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 80025c8:	2020      	movs	r0, #32
 80025ca:	f7ff ffc1 	bl	8002550 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 80025ce:	2000      	movs	r0, #0
 80025d0:	f7ff ffbe 	bl	8002550 <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 80025d4:	20b0      	movs	r0, #176	; 0xb0
 80025d6:	f7ff ffbb 	bl	8002550 <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 80025da:	20c8      	movs	r0, #200	; 0xc8
 80025dc:	f7ff ffb8 	bl	8002550 <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 80025e0:	2000      	movs	r0, #0
 80025e2:	f7ff ffb5 	bl	8002550 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 80025e6:	2010      	movs	r0, #16
 80025e8:	f7ff ffb2 	bl	8002550 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 80025ec:	2040      	movs	r0, #64	; 0x40
 80025ee:	f7ff ffaf 	bl	8002550 <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 80025f2:	20ff      	movs	r0, #255	; 0xff
 80025f4:	f000 f9b6 	bl	8002964 <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 80025f8:	20a1      	movs	r0, #161	; 0xa1
 80025fa:	f7ff ffa9 	bl	8002550 <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 80025fe:	20a6      	movs	r0, #166	; 0xa6
 8002600:	f7ff ffa6 	bl	8002550 <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 8002604:	20a8      	movs	r0, #168	; 0xa8
 8002606:	f7ff ffa3 	bl	8002550 <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x3F); //
 800260a:	203f      	movs	r0, #63	; 0x3f
 800260c:	f7ff ffa0 	bl	8002550 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8002610:	20a4      	movs	r0, #164	; 0xa4
 8002612:	f7ff ff9d 	bl	8002550 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 8002616:	20d3      	movs	r0, #211	; 0xd3
 8002618:	f7ff ff9a 	bl	8002550 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 800261c:	2000      	movs	r0, #0
 800261e:	f7ff ff97 	bl	8002550 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 8002622:	20d5      	movs	r0, #213	; 0xd5
 8002624:	f7ff ff94 	bl	8002550 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 8002628:	20f0      	movs	r0, #240	; 0xf0
 800262a:	f7ff ff91 	bl	8002550 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 800262e:	20d9      	movs	r0, #217	; 0xd9
 8002630:	f7ff ff8e 	bl	8002550 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 8002634:	2022      	movs	r0, #34	; 0x22
 8002636:	f7ff ff8b 	bl	8002550 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 800263a:	20da      	movs	r0, #218	; 0xda
 800263c:	f7ff ff88 	bl	8002550 <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x12);
 8002640:	2012      	movs	r0, #18
 8002642:	f7ff ff85 	bl	8002550 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 8002646:	20db      	movs	r0, #219	; 0xdb
 8002648:	f7ff ff82 	bl	8002550 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 800264c:	2020      	movs	r0, #32
 800264e:	f7ff ff7f 	bl	8002550 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 8002652:	208d      	movs	r0, #141	; 0x8d
 8002654:	f7ff ff7c 	bl	8002550 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 8002658:	2014      	movs	r0, #20
 800265a:	f7ff ff79 	bl	8002550 <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 800265e:	2001      	movs	r0, #1
 8002660:	f000 f994 	bl	800298c <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 8002664:	2000      	movs	r0, #0
 8002666:	f000 f80f 	bl	8002688 <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 800266a:	f000 f82f 	bl	80026cc <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 800266e:	4b05      	ldr	r3, [pc, #20]	; (8002684 <ssd1306_Init+0xd0>)
 8002670:	2200      	movs	r2, #0
 8002672:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 8002674:	4b03      	ldr	r3, [pc, #12]	; (8002684 <ssd1306_Init+0xd0>)
 8002676:	2200      	movs	r2, #0
 8002678:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 800267a:	4b02      	ldr	r3, [pc, #8]	; (8002684 <ssd1306_Init+0xd0>)
 800267c:	2201      	movs	r2, #1
 800267e:	715a      	strb	r2, [r3, #5]
}
 8002680:	bf00      	nop
 8002682:	bd80      	pop	{r7, pc}
 8002684:	2000066c 	.word	0x2000066c

08002688 <ssd1306_Fill>:

// Fill the whole screen with the given color
void ssd1306_Fill(SSD1306_COLOR color) {
 8002688:	b480      	push	{r7}
 800268a:	b085      	sub	sp, #20
 800268c:	af00      	add	r7, sp, #0
 800268e:	4603      	mov	r3, r0
 8002690:	71fb      	strb	r3, [r7, #7]
    /* Set memory */
    uint32_t i;

    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 8002692:	2300      	movs	r3, #0
 8002694:	60fb      	str	r3, [r7, #12]
 8002696:	e00d      	b.n	80026b4 <ssd1306_Fill+0x2c>
        SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 8002698:	79fb      	ldrb	r3, [r7, #7]
 800269a:	2b00      	cmp	r3, #0
 800269c:	d101      	bne.n	80026a2 <ssd1306_Fill+0x1a>
 800269e:	2100      	movs	r1, #0
 80026a0:	e000      	b.n	80026a4 <ssd1306_Fill+0x1c>
 80026a2:	21ff      	movs	r1, #255	; 0xff
 80026a4:	4a08      	ldr	r2, [pc, #32]	; (80026c8 <ssd1306_Fill+0x40>)
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	4413      	add	r3, r2
 80026aa:	460a      	mov	r2, r1
 80026ac:	701a      	strb	r2, [r3, #0]
    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	3301      	adds	r3, #1
 80026b2:	60fb      	str	r3, [r7, #12]
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80026ba:	d3ed      	bcc.n	8002698 <ssd1306_Fill+0x10>
    }
}
 80026bc:	bf00      	nop
 80026be:	3714      	adds	r7, #20
 80026c0:	46bd      	mov	sp, r7
 80026c2:	bc80      	pop	{r7}
 80026c4:	4770      	bx	lr
 80026c6:	bf00      	nop
 80026c8:	2000026c 	.word	0x2000026c

080026cc <ssd1306_UpdateScreen>:

// Write the screenbuffer with changed to the screen
void ssd1306_UpdateScreen(void) {
 80026cc:	b580      	push	{r7, lr}
 80026ce:	b082      	sub	sp, #8
 80026d0:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 80026d2:	2300      	movs	r3, #0
 80026d4:	71fb      	strb	r3, [r7, #7]
 80026d6:	e016      	b.n	8002706 <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 80026d8:	79fb      	ldrb	r3, [r7, #7]
 80026da:	3b50      	subs	r3, #80	; 0x50
 80026dc:	b2db      	uxtb	r3, r3
 80026de:	4618      	mov	r0, r3
 80026e0:	f7ff ff36 	bl	8002550 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00);
 80026e4:	2000      	movs	r0, #0
 80026e6:	f7ff ff33 	bl	8002550 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10);
 80026ea:	2010      	movs	r0, #16
 80026ec:	f7ff ff30 	bl	8002550 <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 80026f0:	79fb      	ldrb	r3, [r7, #7]
 80026f2:	01db      	lsls	r3, r3, #7
 80026f4:	4a07      	ldr	r2, [pc, #28]	; (8002714 <ssd1306_UpdateScreen+0x48>)
 80026f6:	4413      	add	r3, r2
 80026f8:	2180      	movs	r1, #128	; 0x80
 80026fa:	4618      	mov	r0, r3
 80026fc:	f7ff ff40 	bl	8002580 <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8002700:	79fb      	ldrb	r3, [r7, #7]
 8002702:	3301      	adds	r3, #1
 8002704:	71fb      	strb	r3, [r7, #7]
 8002706:	79fb      	ldrb	r3, [r7, #7]
 8002708:	2b07      	cmp	r3, #7
 800270a:	d9e5      	bls.n	80026d8 <ssd1306_UpdateScreen+0xc>
    }
}
 800270c:	bf00      	nop
 800270e:	3708      	adds	r7, #8
 8002710:	46bd      	mov	sp, r7
 8002712:	bd80      	pop	{r7, pc}
 8002714:	2000026c 	.word	0x2000026c

08002718 <ssd1306_DrawPixel>:

//    Draw one pixel in the screenbuffer
//    X => X Coordinate
//    Y => Y Coordinate
//    color => Pixel color
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 8002718:	b480      	push	{r7}
 800271a:	b083      	sub	sp, #12
 800271c:	af00      	add	r7, sp, #0
 800271e:	4603      	mov	r3, r0
 8002720:	71fb      	strb	r3, [r7, #7]
 8002722:	460b      	mov	r3, r1
 8002724:	71bb      	strb	r3, [r7, #6]
 8002726:	4613      	mov	r3, r2
 8002728:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 800272a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800272e:	2b00      	cmp	r3, #0
 8002730:	db48      	blt.n	80027c4 <ssd1306_DrawPixel+0xac>
 8002732:	79bb      	ldrb	r3, [r7, #6]
 8002734:	2b3f      	cmp	r3, #63	; 0x3f
 8002736:	d845      	bhi.n	80027c4 <ssd1306_DrawPixel+0xac>
        // Don't write outside the buffer
        return;
    }
    
    // Check if pixel should be inverted
    if(SSD1306.Inverted) {
 8002738:	4b25      	ldr	r3, [pc, #148]	; (80027d0 <ssd1306_DrawPixel+0xb8>)
 800273a:	791b      	ldrb	r3, [r3, #4]
 800273c:	2b00      	cmp	r3, #0
 800273e:	d006      	beq.n	800274e <ssd1306_DrawPixel+0x36>
        color = (SSD1306_COLOR)!color;
 8002740:	797b      	ldrb	r3, [r7, #5]
 8002742:	2b00      	cmp	r3, #0
 8002744:	bf0c      	ite	eq
 8002746:	2301      	moveq	r3, #1
 8002748:	2300      	movne	r3, #0
 800274a:	b2db      	uxtb	r3, r3
 800274c:	717b      	strb	r3, [r7, #5]
    }
    
    // Draw in the right color
    if(color == White) {
 800274e:	797b      	ldrb	r3, [r7, #5]
 8002750:	2b01      	cmp	r3, #1
 8002752:	d11a      	bne.n	800278a <ssd1306_DrawPixel+0x72>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8002754:	79fa      	ldrb	r2, [r7, #7]
 8002756:	79bb      	ldrb	r3, [r7, #6]
 8002758:	08db      	lsrs	r3, r3, #3
 800275a:	b2d8      	uxtb	r0, r3
 800275c:	4603      	mov	r3, r0
 800275e:	01db      	lsls	r3, r3, #7
 8002760:	4413      	add	r3, r2
 8002762:	4a1c      	ldr	r2, [pc, #112]	; (80027d4 <ssd1306_DrawPixel+0xbc>)
 8002764:	5cd3      	ldrb	r3, [r2, r3]
 8002766:	b25a      	sxtb	r2, r3
 8002768:	79bb      	ldrb	r3, [r7, #6]
 800276a:	f003 0307 	and.w	r3, r3, #7
 800276e:	2101      	movs	r1, #1
 8002770:	fa01 f303 	lsl.w	r3, r1, r3
 8002774:	b25b      	sxtb	r3, r3
 8002776:	4313      	orrs	r3, r2
 8002778:	b259      	sxtb	r1, r3
 800277a:	79fa      	ldrb	r2, [r7, #7]
 800277c:	4603      	mov	r3, r0
 800277e:	01db      	lsls	r3, r3, #7
 8002780:	4413      	add	r3, r2
 8002782:	b2c9      	uxtb	r1, r1
 8002784:	4a13      	ldr	r2, [pc, #76]	; (80027d4 <ssd1306_DrawPixel+0xbc>)
 8002786:	54d1      	strb	r1, [r2, r3]
 8002788:	e01d      	b.n	80027c6 <ssd1306_DrawPixel+0xae>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 800278a:	79fa      	ldrb	r2, [r7, #7]
 800278c:	79bb      	ldrb	r3, [r7, #6]
 800278e:	08db      	lsrs	r3, r3, #3
 8002790:	b2d8      	uxtb	r0, r3
 8002792:	4603      	mov	r3, r0
 8002794:	01db      	lsls	r3, r3, #7
 8002796:	4413      	add	r3, r2
 8002798:	4a0e      	ldr	r2, [pc, #56]	; (80027d4 <ssd1306_DrawPixel+0xbc>)
 800279a:	5cd3      	ldrb	r3, [r2, r3]
 800279c:	b25a      	sxtb	r2, r3
 800279e:	79bb      	ldrb	r3, [r7, #6]
 80027a0:	f003 0307 	and.w	r3, r3, #7
 80027a4:	2101      	movs	r1, #1
 80027a6:	fa01 f303 	lsl.w	r3, r1, r3
 80027aa:	b25b      	sxtb	r3, r3
 80027ac:	43db      	mvns	r3, r3
 80027ae:	b25b      	sxtb	r3, r3
 80027b0:	4013      	ands	r3, r2
 80027b2:	b259      	sxtb	r1, r3
 80027b4:	79fa      	ldrb	r2, [r7, #7]
 80027b6:	4603      	mov	r3, r0
 80027b8:	01db      	lsls	r3, r3, #7
 80027ba:	4413      	add	r3, r2
 80027bc:	b2c9      	uxtb	r1, r1
 80027be:	4a05      	ldr	r2, [pc, #20]	; (80027d4 <ssd1306_DrawPixel+0xbc>)
 80027c0:	54d1      	strb	r1, [r2, r3]
 80027c2:	e000      	b.n	80027c6 <ssd1306_DrawPixel+0xae>
        return;
 80027c4:	bf00      	nop
    }
}
 80027c6:	370c      	adds	r7, #12
 80027c8:	46bd      	mov	sp, r7
 80027ca:	bc80      	pop	{r7}
 80027cc:	4770      	bx	lr
 80027ce:	bf00      	nop
 80027d0:	2000066c 	.word	0x2000066c
 80027d4:	2000026c 	.word	0x2000026c

080027d8 <ssd1306_WriteChar>:

// Draw 1 char to the screen buffer
// ch       => char om weg te schrijven
// Font     => Font waarmee we gaan schrijven
// color    => Black or White
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color) {
 80027d8:	b590      	push	{r4, r7, lr}
 80027da:	b089      	sub	sp, #36	; 0x24
 80027dc:	af00      	add	r7, sp, #0
 80027de:	4604      	mov	r4, r0
 80027e0:	1d38      	adds	r0, r7, #4
 80027e2:	e880 0006 	stmia.w	r0, {r1, r2}
 80027e6:	461a      	mov	r2, r3
 80027e8:	4623      	mov	r3, r4
 80027ea:	73fb      	strb	r3, [r7, #15]
 80027ec:	4613      	mov	r3, r2
 80027ee:	73bb      	strb	r3, [r7, #14]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 80027f0:	7bfb      	ldrb	r3, [r7, #15]
 80027f2:	2b1f      	cmp	r3, #31
 80027f4:	d902      	bls.n	80027fc <ssd1306_WriteChar+0x24>
 80027f6:	7bfb      	ldrb	r3, [r7, #15]
 80027f8:	2b7e      	cmp	r3, #126	; 0x7e
 80027fa:	d901      	bls.n	8002800 <ssd1306_WriteChar+0x28>
        return 0;
 80027fc:	2300      	movs	r3, #0
 80027fe:	e06d      	b.n	80028dc <ssd1306_WriteChar+0x104>
    
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 8002800:	4b38      	ldr	r3, [pc, #224]	; (80028e4 <ssd1306_WriteChar+0x10c>)
 8002802:	881b      	ldrh	r3, [r3, #0]
 8002804:	461a      	mov	r2, r3
 8002806:	793b      	ldrb	r3, [r7, #4]
 8002808:	4413      	add	r3, r2
 800280a:	2b80      	cmp	r3, #128	; 0x80
 800280c:	dc06      	bgt.n	800281c <ssd1306_WriteChar+0x44>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.FontHeight))
 800280e:	4b35      	ldr	r3, [pc, #212]	; (80028e4 <ssd1306_WriteChar+0x10c>)
 8002810:	885b      	ldrh	r3, [r3, #2]
 8002812:	461a      	mov	r2, r3
 8002814:	797b      	ldrb	r3, [r7, #5]
 8002816:	4413      	add	r3, r2
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 8002818:	2b40      	cmp	r3, #64	; 0x40
 800281a:	dd01      	ble.n	8002820 <ssd1306_WriteChar+0x48>
    {
        // Not enough space on current line
        return 0;
 800281c:	2300      	movs	r3, #0
 800281e:	e05d      	b.n	80028dc <ssd1306_WriteChar+0x104>
    }
    
    // Use the font to write
    for(i = 0; i < Font.FontHeight; i++) {
 8002820:	2300      	movs	r3, #0
 8002822:	61fb      	str	r3, [r7, #28]
 8002824:	e04c      	b.n	80028c0 <ssd1306_WriteChar+0xe8>
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 8002826:	68ba      	ldr	r2, [r7, #8]
 8002828:	7bfb      	ldrb	r3, [r7, #15]
 800282a:	3b20      	subs	r3, #32
 800282c:	7979      	ldrb	r1, [r7, #5]
 800282e:	fb01 f303 	mul.w	r3, r1, r3
 8002832:	4619      	mov	r1, r3
 8002834:	69fb      	ldr	r3, [r7, #28]
 8002836:	440b      	add	r3, r1
 8002838:	005b      	lsls	r3, r3, #1
 800283a:	4413      	add	r3, r2
 800283c:	881b      	ldrh	r3, [r3, #0]
 800283e:	617b      	str	r3, [r7, #20]
        for(j = 0; j < Font.FontWidth; j++) {
 8002840:	2300      	movs	r3, #0
 8002842:	61bb      	str	r3, [r7, #24]
 8002844:	e034      	b.n	80028b0 <ssd1306_WriteChar+0xd8>
            if((b << j) & 0x8000)  {
 8002846:	697a      	ldr	r2, [r7, #20]
 8002848:	69bb      	ldr	r3, [r7, #24]
 800284a:	fa02 f303 	lsl.w	r3, r2, r3
 800284e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002852:	2b00      	cmp	r3, #0
 8002854:	d012      	beq.n	800287c <ssd1306_WriteChar+0xa4>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 8002856:	4b23      	ldr	r3, [pc, #140]	; (80028e4 <ssd1306_WriteChar+0x10c>)
 8002858:	881b      	ldrh	r3, [r3, #0]
 800285a:	b2da      	uxtb	r2, r3
 800285c:	69bb      	ldr	r3, [r7, #24]
 800285e:	b2db      	uxtb	r3, r3
 8002860:	4413      	add	r3, r2
 8002862:	b2d8      	uxtb	r0, r3
 8002864:	4b1f      	ldr	r3, [pc, #124]	; (80028e4 <ssd1306_WriteChar+0x10c>)
 8002866:	885b      	ldrh	r3, [r3, #2]
 8002868:	b2da      	uxtb	r2, r3
 800286a:	69fb      	ldr	r3, [r7, #28]
 800286c:	b2db      	uxtb	r3, r3
 800286e:	4413      	add	r3, r2
 8002870:	b2db      	uxtb	r3, r3
 8002872:	7bba      	ldrb	r2, [r7, #14]
 8002874:	4619      	mov	r1, r3
 8002876:	f7ff ff4f 	bl	8002718 <ssd1306_DrawPixel>
 800287a:	e016      	b.n	80028aa <ssd1306_WriteChar+0xd2>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 800287c:	4b19      	ldr	r3, [pc, #100]	; (80028e4 <ssd1306_WriteChar+0x10c>)
 800287e:	881b      	ldrh	r3, [r3, #0]
 8002880:	b2da      	uxtb	r2, r3
 8002882:	69bb      	ldr	r3, [r7, #24]
 8002884:	b2db      	uxtb	r3, r3
 8002886:	4413      	add	r3, r2
 8002888:	b2d8      	uxtb	r0, r3
 800288a:	4b16      	ldr	r3, [pc, #88]	; (80028e4 <ssd1306_WriteChar+0x10c>)
 800288c:	885b      	ldrh	r3, [r3, #2]
 800288e:	b2da      	uxtb	r2, r3
 8002890:	69fb      	ldr	r3, [r7, #28]
 8002892:	b2db      	uxtb	r3, r3
 8002894:	4413      	add	r3, r2
 8002896:	b2d9      	uxtb	r1, r3
 8002898:	7bbb      	ldrb	r3, [r7, #14]
 800289a:	2b00      	cmp	r3, #0
 800289c:	bf0c      	ite	eq
 800289e:	2301      	moveq	r3, #1
 80028a0:	2300      	movne	r3, #0
 80028a2:	b2db      	uxtb	r3, r3
 80028a4:	461a      	mov	r2, r3
 80028a6:	f7ff ff37 	bl	8002718 <ssd1306_DrawPixel>
        for(j = 0; j < Font.FontWidth; j++) {
 80028aa:	69bb      	ldr	r3, [r7, #24]
 80028ac:	3301      	adds	r3, #1
 80028ae:	61bb      	str	r3, [r7, #24]
 80028b0:	793b      	ldrb	r3, [r7, #4]
 80028b2:	461a      	mov	r2, r3
 80028b4:	69bb      	ldr	r3, [r7, #24]
 80028b6:	4293      	cmp	r3, r2
 80028b8:	d3c5      	bcc.n	8002846 <ssd1306_WriteChar+0x6e>
    for(i = 0; i < Font.FontHeight; i++) {
 80028ba:	69fb      	ldr	r3, [r7, #28]
 80028bc:	3301      	adds	r3, #1
 80028be:	61fb      	str	r3, [r7, #28]
 80028c0:	797b      	ldrb	r3, [r7, #5]
 80028c2:	461a      	mov	r2, r3
 80028c4:	69fb      	ldr	r3, [r7, #28]
 80028c6:	4293      	cmp	r3, r2
 80028c8:	d3ad      	bcc.n	8002826 <ssd1306_WriteChar+0x4e>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += Font.FontWidth;
 80028ca:	4b06      	ldr	r3, [pc, #24]	; (80028e4 <ssd1306_WriteChar+0x10c>)
 80028cc:	881a      	ldrh	r2, [r3, #0]
 80028ce:	793b      	ldrb	r3, [r7, #4]
 80028d0:	b29b      	uxth	r3, r3
 80028d2:	4413      	add	r3, r2
 80028d4:	b29a      	uxth	r2, r3
 80028d6:	4b03      	ldr	r3, [pc, #12]	; (80028e4 <ssd1306_WriteChar+0x10c>)
 80028d8:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 80028da:	7bfb      	ldrb	r3, [r7, #15]
}
 80028dc:	4618      	mov	r0, r3
 80028de:	3724      	adds	r7, #36	; 0x24
 80028e0:	46bd      	mov	sp, r7
 80028e2:	bd90      	pop	{r4, r7, pc}
 80028e4:	2000066c 	.word	0x2000066c

080028e8 <ssd1306_WriteString>:

// Write full string to screenbuffer
char ssd1306_WriteString(char* str, FontDef Font, SSD1306_COLOR color) {
 80028e8:	b580      	push	{r7, lr}
 80028ea:	b084      	sub	sp, #16
 80028ec:	af00      	add	r7, sp, #0
 80028ee:	60f8      	str	r0, [r7, #12]
 80028f0:	1d38      	adds	r0, r7, #4
 80028f2:	e880 0006 	stmia.w	r0, {r1, r2}
 80028f6:	70fb      	strb	r3, [r7, #3]
    // Write until null-byte
    while (*str) {
 80028f8:	e012      	b.n	8002920 <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	7818      	ldrb	r0, [r3, #0]
 80028fe:	78fb      	ldrb	r3, [r7, #3]
 8002900:	1d3a      	adds	r2, r7, #4
 8002902:	ca06      	ldmia	r2, {r1, r2}
 8002904:	f7ff ff68 	bl	80027d8 <ssd1306_WriteChar>
 8002908:	4603      	mov	r3, r0
 800290a:	461a      	mov	r2, r3
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	781b      	ldrb	r3, [r3, #0]
 8002910:	429a      	cmp	r2, r3
 8002912:	d002      	beq.n	800291a <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	781b      	ldrb	r3, [r3, #0]
 8002918:	e008      	b.n	800292c <ssd1306_WriteString+0x44>
        }
        
        // Next char
        str++;
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	3301      	adds	r3, #1
 800291e:	60fb      	str	r3, [r7, #12]
    while (*str) {
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	781b      	ldrb	r3, [r3, #0]
 8002924:	2b00      	cmp	r3, #0
 8002926:	d1e8      	bne.n	80028fa <ssd1306_WriteString+0x12>
    }
    
    // Everything ok
    return *str;
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	781b      	ldrb	r3, [r3, #0]
}
 800292c:	4618      	mov	r0, r3
 800292e:	3710      	adds	r7, #16
 8002930:	46bd      	mov	sp, r7
 8002932:	bd80      	pop	{r7, pc}

08002934 <ssd1306_SetCursor>:

// Position the cursor
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 8002934:	b480      	push	{r7}
 8002936:	b083      	sub	sp, #12
 8002938:	af00      	add	r7, sp, #0
 800293a:	4603      	mov	r3, r0
 800293c:	460a      	mov	r2, r1
 800293e:	71fb      	strb	r3, [r7, #7]
 8002940:	4613      	mov	r3, r2
 8002942:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 8002944:	79fb      	ldrb	r3, [r7, #7]
 8002946:	b29a      	uxth	r2, r3
 8002948:	4b05      	ldr	r3, [pc, #20]	; (8002960 <ssd1306_SetCursor+0x2c>)
 800294a:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 800294c:	79bb      	ldrb	r3, [r7, #6]
 800294e:	b29a      	uxth	r2, r3
 8002950:	4b03      	ldr	r3, [pc, #12]	; (8002960 <ssd1306_SetCursor+0x2c>)
 8002952:	805a      	strh	r2, [r3, #2]
}
 8002954:	bf00      	nop
 8002956:	370c      	adds	r7, #12
 8002958:	46bd      	mov	sp, r7
 800295a:	bc80      	pop	{r7}
 800295c:	4770      	bx	lr
 800295e:	bf00      	nop
 8002960:	2000066c 	.word	0x2000066c

08002964 <ssd1306_SetContrast>:
  ssd1306_Line(x1,y2,x1,y1,color);

  return;
}

void ssd1306_SetContrast(const uint8_t value) {
 8002964:	b580      	push	{r7, lr}
 8002966:	b084      	sub	sp, #16
 8002968:	af00      	add	r7, sp, #0
 800296a:	4603      	mov	r3, r0
 800296c:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 800296e:	2381      	movs	r3, #129	; 0x81
 8002970:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 8002972:	7bfb      	ldrb	r3, [r7, #15]
 8002974:	4618      	mov	r0, r3
 8002976:	f7ff fdeb 	bl	8002550 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 800297a:	79fb      	ldrb	r3, [r7, #7]
 800297c:	4618      	mov	r0, r3
 800297e:	f7ff fde7 	bl	8002550 <ssd1306_WriteCommand>
}
 8002982:	bf00      	nop
 8002984:	3710      	adds	r7, #16
 8002986:	46bd      	mov	sp, r7
 8002988:	bd80      	pop	{r7, pc}
	...

0800298c <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 800298c:	b580      	push	{r7, lr}
 800298e:	b084      	sub	sp, #16
 8002990:	af00      	add	r7, sp, #0
 8002992:	4603      	mov	r3, r0
 8002994:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on) {
 8002996:	79fb      	ldrb	r3, [r7, #7]
 8002998:	2b00      	cmp	r3, #0
 800299a:	d005      	beq.n	80029a8 <ssd1306_SetDisplayOn+0x1c>
        value = 0xAF;   // Display on
 800299c:	23af      	movs	r3, #175	; 0xaf
 800299e:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 80029a0:	4b08      	ldr	r3, [pc, #32]	; (80029c4 <ssd1306_SetDisplayOn+0x38>)
 80029a2:	2201      	movs	r2, #1
 80029a4:	719a      	strb	r2, [r3, #6]
 80029a6:	e004      	b.n	80029b2 <ssd1306_SetDisplayOn+0x26>
    } else {
        value = 0xAE;   // Display off
 80029a8:	23ae      	movs	r3, #174	; 0xae
 80029aa:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 80029ac:	4b05      	ldr	r3, [pc, #20]	; (80029c4 <ssd1306_SetDisplayOn+0x38>)
 80029ae:	2200      	movs	r2, #0
 80029b0:	719a      	strb	r2, [r3, #6]
    }
    ssd1306_WriteCommand(value);
 80029b2:	7bfb      	ldrb	r3, [r7, #15]
 80029b4:	4618      	mov	r0, r3
 80029b6:	f7ff fdcb 	bl	8002550 <ssd1306_WriteCommand>
}
 80029ba:	bf00      	nop
 80029bc:	3710      	adds	r7, #16
 80029be:	46bd      	mov	sp, r7
 80029c0:	bd80      	pop	{r7, pc}
 80029c2:	bf00      	nop
 80029c4:	2000066c 	.word	0x2000066c

080029c8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80029c8:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80029ca:	e003      	b.n	80029d4 <LoopCopyDataInit>

080029cc <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80029cc:	4b0b      	ldr	r3, [pc, #44]	; (80029fc <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 80029ce:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80029d0:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80029d2:	3104      	adds	r1, #4

080029d4 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80029d4:	480a      	ldr	r0, [pc, #40]	; (8002a00 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 80029d6:	4b0b      	ldr	r3, [pc, #44]	; (8002a04 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 80029d8:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80029da:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80029dc:	d3f6      	bcc.n	80029cc <CopyDataInit>
  ldr r2, =_sbss
 80029de:	4a0a      	ldr	r2, [pc, #40]	; (8002a08 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 80029e0:	e002      	b.n	80029e8 <LoopFillZerobss>

080029e2 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80029e2:	2300      	movs	r3, #0
  str r3, [r2], #4
 80029e4:	f842 3b04 	str.w	r3, [r2], #4

080029e8 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 80029e8:	4b08      	ldr	r3, [pc, #32]	; (8002a0c <LoopFillZerobss+0x24>)
  cmp r2, r3
 80029ea:	429a      	cmp	r2, r3
  bcc FillZerobss
 80029ec:	d3f9      	bcc.n	80029e2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80029ee:	f7ff fc25 	bl	800223c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80029f2:	f003 fdd1 	bl	8006598 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80029f6:	f7ff fa0d 	bl	8001e14 <main>
  bx lr
 80029fa:	4770      	bx	lr
  ldr r3, =_sidata
 80029fc:	0800ab58 	.word	0x0800ab58
  ldr r0, =_sdata
 8002a00:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8002a04:	200001f4 	.word	0x200001f4
  ldr r2, =_sbss
 8002a08:	200001f4 	.word	0x200001f4
  ldr r3, = _ebss
 8002a0c:	200009cc 	.word	0x200009cc

08002a10 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002a10:	e7fe      	b.n	8002a10 <ADC1_2_IRQHandler>
	...

08002a14 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002a14:	b580      	push	{r7, lr}
 8002a16:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002a18:	4b08      	ldr	r3, [pc, #32]	; (8002a3c <HAL_Init+0x28>)
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	4a07      	ldr	r2, [pc, #28]	; (8002a3c <HAL_Init+0x28>)
 8002a1e:	f043 0310 	orr.w	r3, r3, #16
 8002a22:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002a24:	2003      	movs	r0, #3
 8002a26:	f000 fce1 	bl	80033ec <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002a2a:	2000      	movs	r0, #0
 8002a2c:	f000 f808 	bl	8002a40 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002a30:	f7ff fb2a 	bl	8002088 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002a34:	2300      	movs	r3, #0
}
 8002a36:	4618      	mov	r0, r3
 8002a38:	bd80      	pop	{r7, pc}
 8002a3a:	bf00      	nop
 8002a3c:	40022000 	.word	0x40022000

08002a40 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002a40:	b580      	push	{r7, lr}
 8002a42:	b082      	sub	sp, #8
 8002a44:	af00      	add	r7, sp, #0
 8002a46:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(SystemCoreClock/1000U);
 8002a48:	4b09      	ldr	r3, [pc, #36]	; (8002a70 <HAL_InitTick+0x30>)
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	4a09      	ldr	r2, [pc, #36]	; (8002a74 <HAL_InitTick+0x34>)
 8002a4e:	fba2 2303 	umull	r2, r3, r2, r3
 8002a52:	099b      	lsrs	r3, r3, #6
 8002a54:	4618      	mov	r0, r3
 8002a56:	f000 fcfe 	bl	8003456 <HAL_SYSTICK_Config>

  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0U);
 8002a5a:	2200      	movs	r2, #0
 8002a5c:	6879      	ldr	r1, [r7, #4]
 8002a5e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002a62:	f000 fcce 	bl	8003402 <HAL_NVIC_SetPriority>

  /* Return function status */
  return HAL_OK;
 8002a66:	2300      	movs	r3, #0
}
 8002a68:	4618      	mov	r0, r3
 8002a6a:	3708      	adds	r7, #8
 8002a6c:	46bd      	mov	sp, r7
 8002a6e:	bd80      	pop	{r7, pc}
 8002a70:	20000018 	.word	0x20000018
 8002a74:	10624dd3 	.word	0x10624dd3

08002a78 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002a78:	b480      	push	{r7}
 8002a7a:	af00      	add	r7, sp, #0
  uwTick++;
 8002a7c:	4b04      	ldr	r3, [pc, #16]	; (8002a90 <HAL_IncTick+0x18>)
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	3301      	adds	r3, #1
 8002a82:	4a03      	ldr	r2, [pc, #12]	; (8002a90 <HAL_IncTick+0x18>)
 8002a84:	6013      	str	r3, [r2, #0]
}
 8002a86:	bf00      	nop
 8002a88:	46bd      	mov	sp, r7
 8002a8a:	bc80      	pop	{r7}
 8002a8c:	4770      	bx	lr
 8002a8e:	bf00      	nop
 8002a90:	200009c4 	.word	0x200009c4

08002a94 <HAL_GetTick>:
  * @note  This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002a94:	b480      	push	{r7}
 8002a96:	af00      	add	r7, sp, #0
  return uwTick;
 8002a98:	4b02      	ldr	r3, [pc, #8]	; (8002aa4 <HAL_GetTick+0x10>)
 8002a9a:	681b      	ldr	r3, [r3, #0]
}
 8002a9c:	4618      	mov	r0, r3
 8002a9e:	46bd      	mov	sp, r7
 8002aa0:	bc80      	pop	{r7}
 8002aa2:	4770      	bx	lr
 8002aa4:	200009c4 	.word	0x200009c4

08002aa8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay: specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(__IO uint32_t Delay)
{
 8002aa8:	b580      	push	{r7, lr}
 8002aaa:	b084      	sub	sp, #16
 8002aac:	af00      	add	r7, sp, #0
 8002aae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002ab0:	f7ff fff0 	bl	8002a94 <HAL_GetTick>
 8002ab4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	60fb      	str	r3, [r7, #12]
  
  /* Add a period to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002ac0:	d002      	beq.n	8002ac8 <HAL_Delay+0x20>
  {
     wait++;
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	3301      	adds	r3, #1
 8002ac6:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8002ac8:	bf00      	nop
 8002aca:	f7ff ffe3 	bl	8002a94 <HAL_GetTick>
 8002ace:	4602      	mov	r2, r0
 8002ad0:	68bb      	ldr	r3, [r7, #8]
 8002ad2:	1ad3      	subs	r3, r2, r3
 8002ad4:	68fa      	ldr	r2, [r7, #12]
 8002ad6:	429a      	cmp	r2, r3
 8002ad8:	d8f7      	bhi.n	8002aca <HAL_Delay+0x22>
  {
  }
}
 8002ada:	bf00      	nop
 8002adc:	3710      	adds	r7, #16
 8002ade:	46bd      	mov	sp, r7
 8002ae0:	bd80      	pop	{r7, pc}
	...

08002ae4 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002ae4:	b580      	push	{r7, lr}
 8002ae6:	b086      	sub	sp, #24
 8002ae8:	af00      	add	r7, sp, #0
 8002aea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002aec:	2300      	movs	r3, #0
 8002aee:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8002af0:	2300      	movs	r3, #0
 8002af2:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8002af4:	2300      	movs	r3, #0
 8002af6:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8002af8:	2300      	movs	r3, #0
 8002afa:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d101      	bne.n	8002b06 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8002b02:	2301      	movs	r3, #1
 8002b04:	e0be      	b.n	8002c84 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	689b      	ldr	r3, [r3, #8]
 8002b0a:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d109      	bne.n	8002b28 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	2200      	movs	r2, #0
 8002b18:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	2200      	movs	r2, #0
 8002b1e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002b22:	6878      	ldr	r0, [r7, #4]
 8002b24:	f7fe f870 	bl	8000c08 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8002b28:	6878      	ldr	r0, [r7, #4]
 8002b2a:	f000 faf7 	bl	800311c <ADC_ConversionStop_Disable>
 8002b2e:	4603      	mov	r3, r0
 8002b30:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b36:	f003 0310 	and.w	r3, r3, #16
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	f040 8099 	bne.w	8002c72 <HAL_ADC_Init+0x18e>
 8002b40:	7dfb      	ldrb	r3, [r7, #23]
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	f040 8095 	bne.w	8002c72 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b4c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002b50:	f023 0302 	bic.w	r3, r3, #2
 8002b54:	f043 0202 	orr.w	r2, r3, #2
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                               |
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv) |
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                               |
 8002b64:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS(hadc->Init.ContinuousConvMode)   );
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	68db      	ldr	r3, [r3, #12]
 8002b6a:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv) |
 8002b6c:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                               |
 8002b6e:	68ba      	ldr	r2, [r7, #8]
 8002b70:	4313      	orrs	r3, r2
 8002b72:	60bb      	str	r3, [r7, #8]
    
    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	689b      	ldr	r3, [r3, #8]
 8002b78:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002b7c:	d003      	beq.n	8002b86 <HAL_ADC_Init+0xa2>
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	689b      	ldr	r3, [r3, #8]
 8002b82:	2b01      	cmp	r3, #1
 8002b84:	d102      	bne.n	8002b8c <HAL_ADC_Init+0xa8>
 8002b86:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002b8a:	e000      	b.n	8002b8e <HAL_ADC_Init+0xaa>
 8002b8c:	2300      	movs	r3, #0
 8002b8e:	693a      	ldr	r2, [r7, #16]
 8002b90:	4313      	orrs	r3, r2
 8002b92:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	695b      	ldr	r3, [r3, #20]
 8002b98:	2b01      	cmp	r3, #1
 8002b9a:	d119      	bne.n	8002bd0 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	68db      	ldr	r3, [r3, #12]
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d109      	bne.n	8002bb8 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	699b      	ldr	r3, [r3, #24]
 8002ba8:	3b01      	subs	r3, #1
 8002baa:	035a      	lsls	r2, r3, #13
 8002bac:	693b      	ldr	r3, [r7, #16]
 8002bae:	4313      	orrs	r3, r2
 8002bb0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002bb4:	613b      	str	r3, [r7, #16]
 8002bb6:	e00b      	b.n	8002bd0 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bbc:	f043 0220 	orr.w	r2, r3, #32
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bc8:	f043 0201 	orr.w	r2, r3, #1
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	685b      	ldr	r3, [r3, #4]
 8002bd6:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	693a      	ldr	r2, [r7, #16]
 8002be0:	430a      	orrs	r2, r1
 8002be2:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	689a      	ldr	r2, [r3, #8]
 8002bea:	4b28      	ldr	r3, [pc, #160]	; (8002c8c <HAL_ADC_Init+0x1a8>)
 8002bec:	4013      	ands	r3, r2
 8002bee:	687a      	ldr	r2, [r7, #4]
 8002bf0:	6812      	ldr	r2, [r2, #0]
 8002bf2:	68b9      	ldr	r1, [r7, #8]
 8002bf4:	430b      	orrs	r3, r1
 8002bf6:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	689b      	ldr	r3, [r3, #8]
 8002bfc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002c00:	d003      	beq.n	8002c0a <HAL_ADC_Init+0x126>
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	689b      	ldr	r3, [r3, #8]
 8002c06:	2b01      	cmp	r3, #1
 8002c08:	d104      	bne.n	8002c14 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	691b      	ldr	r3, [r3, #16]
 8002c0e:	3b01      	subs	r3, #1
 8002c10:	051b      	lsls	r3, r3, #20
 8002c12:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c1a:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	68fa      	ldr	r2, [r7, #12]
 8002c24:	430a      	orrs	r2, r1
 8002c26:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	689a      	ldr	r2, [r3, #8]
 8002c2e:	4b18      	ldr	r3, [pc, #96]	; (8002c90 <HAL_ADC_Init+0x1ac>)
 8002c30:	4013      	ands	r3, r2
 8002c32:	68ba      	ldr	r2, [r7, #8]
 8002c34:	429a      	cmp	r2, r3
 8002c36:	d10b      	bne.n	8002c50 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	2200      	movs	r2, #0
 8002c3c:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c42:	f023 0303 	bic.w	r3, r3, #3
 8002c46:	f043 0201 	orr.w	r2, r3, #1
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002c4e:	e018      	b.n	8002c82 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c54:	f023 0312 	bic.w	r3, r3, #18
 8002c58:	f043 0210 	orr.w	r2, r3, #16
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c64:	f043 0201 	orr.w	r2, r3, #1
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8002c6c:	2301      	movs	r3, #1
 8002c6e:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002c70:	e007      	b.n	8002c82 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c76:	f043 0210 	orr.w	r2, r3, #16
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8002c7e:	2301      	movs	r3, #1
 8002c80:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002c82:	7dfb      	ldrb	r3, [r7, #23]
}
 8002c84:	4618      	mov	r0, r3
 8002c86:	3718      	adds	r7, #24
 8002c88:	46bd      	mov	sp, r7
 8002c8a:	bd80      	pop	{r7, pc}
 8002c8c:	ffe1f7fd 	.word	0xffe1f7fd
 8002c90:	ff1f0efe 	.word	0xff1f0efe

08002c94 <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8002c94:	b580      	push	{r7, lr}
 8002c96:	b086      	sub	sp, #24
 8002c98:	af00      	add	r7, sp, #0
 8002c9a:	60f8      	str	r0, [r7, #12]
 8002c9c:	60b9      	str	r1, [r7, #8]
 8002c9e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002ca0:	2300      	movs	r3, #0
 8002ca2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	4a64      	ldr	r2, [pc, #400]	; (8002e3c <HAL_ADC_Start_DMA+0x1a8>)
 8002caa:	4293      	cmp	r3, r2
 8002cac:	d004      	beq.n	8002cb8 <HAL_ADC_Start_DMA+0x24>
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	4a63      	ldr	r2, [pc, #396]	; (8002e40 <HAL_ADC_Start_DMA+0x1ac>)
 8002cb4:	4293      	cmp	r3, r2
 8002cb6:	d106      	bne.n	8002cc6 <HAL_ADC_Start_DMA+0x32>
 8002cb8:	4b60      	ldr	r3, [pc, #384]	; (8002e3c <HAL_ADC_Start_DMA+0x1a8>)
 8002cba:	685b      	ldr	r3, [r3, #4]
 8002cbc:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	f040 80b3 	bne.w	8002e2c <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002ccc:	2b01      	cmp	r3, #1
 8002cce:	d101      	bne.n	8002cd4 <HAL_ADC_Start_DMA+0x40>
 8002cd0:	2302      	movs	r3, #2
 8002cd2:	e0ae      	b.n	8002e32 <HAL_ADC_Start_DMA+0x19e>
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	2201      	movs	r2, #1
 8002cd8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8002cdc:	68f8      	ldr	r0, [r7, #12]
 8002cde:	f000 f9cb 	bl	8003078 <ADC_Enable>
 8002ce2:	4603      	mov	r3, r0
 8002ce4:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8002ce6:	7dfb      	ldrb	r3, [r7, #23]
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	f040 809a 	bne.w	8002e22 <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cf2:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002cf6:	f023 0301 	bic.w	r3, r3, #1
 8002cfa:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	4a4e      	ldr	r2, [pc, #312]	; (8002e40 <HAL_ADC_Start_DMA+0x1ac>)
 8002d08:	4293      	cmp	r3, r2
 8002d0a:	d105      	bne.n	8002d18 <HAL_ADC_Start_DMA+0x84>
 8002d0c:	4b4b      	ldr	r3, [pc, #300]	; (8002e3c <HAL_ADC_Start_DMA+0x1a8>)
 8002d0e:	685b      	ldr	r3, [r3, #4]
 8002d10:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d115      	bne.n	8002d44 <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d1c:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	685b      	ldr	r3, [r3, #4]
 8002d2a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d026      	beq.n	8002d80 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d36:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002d3a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002d42:	e01d      	b.n	8002d80 <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d48:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	4a39      	ldr	r2, [pc, #228]	; (8002e3c <HAL_ADC_Start_DMA+0x1a8>)
 8002d56:	4293      	cmp	r3, r2
 8002d58:	d004      	beq.n	8002d64 <HAL_ADC_Start_DMA+0xd0>
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	4a38      	ldr	r2, [pc, #224]	; (8002e40 <HAL_ADC_Start_DMA+0x1ac>)
 8002d60:	4293      	cmp	r3, r2
 8002d62:	d10d      	bne.n	8002d80 <HAL_ADC_Start_DMA+0xec>
 8002d64:	4b35      	ldr	r3, [pc, #212]	; (8002e3c <HAL_ADC_Start_DMA+0x1a8>)
 8002d66:	685b      	ldr	r3, [r3, #4]
 8002d68:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d007      	beq.n	8002d80 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d74:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002d78:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d84:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d006      	beq.n	8002d9a <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d90:	f023 0206 	bic.w	r2, r3, #6
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	62da      	str	r2, [r3, #44]	; 0x2c
 8002d98:	e002      	b.n	8002da0 <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	2200      	movs	r2, #0
 8002d9e:	62da      	str	r2, [r3, #44]	; 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	2200      	movs	r2, #0
 8002da4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	6a1b      	ldr	r3, [r3, #32]
 8002dac:	4a25      	ldr	r2, [pc, #148]	; (8002e44 <HAL_ADC_Start_DMA+0x1b0>)
 8002dae:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	6a1b      	ldr	r3, [r3, #32]
 8002db4:	4a24      	ldr	r2, [pc, #144]	; (8002e48 <HAL_ADC_Start_DMA+0x1b4>)
 8002db6:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	6a1b      	ldr	r3, [r3, #32]
 8002dbc:	4a23      	ldr	r2, [pc, #140]	; (8002e4c <HAL_ADC_Start_DMA+0x1b8>)
 8002dbe:	631a      	str	r2, [r3, #48]	; 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	f06f 0202 	mvn.w	r2, #2
 8002dc8:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	689a      	ldr	r2, [r3, #8]
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002dd8:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	6a18      	ldr	r0, [r3, #32]
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	334c      	adds	r3, #76	; 0x4c
 8002de4:	4619      	mov	r1, r3
 8002de6:	68ba      	ldr	r2, [r7, #8]
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	f000 fbcf 	bl	800358c <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	689b      	ldr	r3, [r3, #8]
 8002df4:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8002df8:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8002dfc:	d108      	bne.n	8002e10 <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	689a      	ldr	r2, [r3, #8]
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8002e0c:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8002e0e:	e00f      	b.n	8002e30 <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	689a      	ldr	r2, [r3, #8]
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8002e1e:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8002e20:	e006      	b.n	8002e30 <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	2200      	movs	r2, #0
 8002e26:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    if (tmp_hal_status == HAL_OK)
 8002e2a:	e001      	b.n	8002e30 <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002e2c:	2301      	movs	r3, #1
 8002e2e:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002e30:	7dfb      	ldrb	r3, [r7, #23]
}
 8002e32:	4618      	mov	r0, r3
 8002e34:	3718      	adds	r7, #24
 8002e36:	46bd      	mov	sp, r7
 8002e38:	bd80      	pop	{r7, pc}
 8002e3a:	bf00      	nop
 8002e3c:	40012400 	.word	0x40012400
 8002e40:	40012800 	.word	0x40012800
 8002e44:	08003191 	.word	0x08003191
 8002e48:	0800320d 	.word	0x0800320d
 8002e4c:	08003229 	.word	0x08003229

08002e50 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002e50:	b480      	push	{r7}
 8002e52:	b083      	sub	sp, #12
 8002e54:	af00      	add	r7, sp, #0
 8002e56:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8002e58:	bf00      	nop
 8002e5a:	370c      	adds	r7, #12
 8002e5c:	46bd      	mov	sp, r7
 8002e5e:	bc80      	pop	{r7}
 8002e60:	4770      	bx	lr

08002e62 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002e62:	b480      	push	{r7}
 8002e64:	b083      	sub	sp, #12
 8002e66:	af00      	add	r7, sp, #0
 8002e68:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8002e6a:	bf00      	nop
 8002e6c:	370c      	adds	r7, #12
 8002e6e:	46bd      	mov	sp, r7
 8002e70:	bc80      	pop	{r7}
 8002e72:	4770      	bx	lr

08002e74 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002e74:	b480      	push	{r7}
 8002e76:	b083      	sub	sp, #12
 8002e78:	af00      	add	r7, sp, #0
 8002e7a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002e7c:	bf00      	nop
 8002e7e:	370c      	adds	r7, #12
 8002e80:	46bd      	mov	sp, r7
 8002e82:	bc80      	pop	{r7}
 8002e84:	4770      	bx	lr
	...

08002e88 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8002e88:	b480      	push	{r7}
 8002e8a:	b085      	sub	sp, #20
 8002e8c:	af00      	add	r7, sp, #0
 8002e8e:	6078      	str	r0, [r7, #4]
 8002e90:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002e92:	2300      	movs	r3, #0
 8002e94:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8002e96:	2300      	movs	r3, #0
 8002e98:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002ea0:	2b01      	cmp	r3, #1
 8002ea2:	d101      	bne.n	8002ea8 <HAL_ADC_ConfigChannel+0x20>
 8002ea4:	2302      	movs	r3, #2
 8002ea6:	e0dc      	b.n	8003062 <HAL_ADC_ConfigChannel+0x1da>
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	2201      	movs	r2, #1
 8002eac:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002eb0:	683b      	ldr	r3, [r7, #0]
 8002eb2:	685b      	ldr	r3, [r3, #4]
 8002eb4:	2b06      	cmp	r3, #6
 8002eb6:	d81c      	bhi.n	8002ef2 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002ebe:	683b      	ldr	r3, [r7, #0]
 8002ec0:	685a      	ldr	r2, [r3, #4]
 8002ec2:	4613      	mov	r3, r2
 8002ec4:	009b      	lsls	r3, r3, #2
 8002ec6:	4413      	add	r3, r2
 8002ec8:	3b05      	subs	r3, #5
 8002eca:	221f      	movs	r2, #31
 8002ecc:	fa02 f303 	lsl.w	r3, r2, r3
 8002ed0:	43db      	mvns	r3, r3
 8002ed2:	4019      	ands	r1, r3
 8002ed4:	683b      	ldr	r3, [r7, #0]
 8002ed6:	6818      	ldr	r0, [r3, #0]
 8002ed8:	683b      	ldr	r3, [r7, #0]
 8002eda:	685a      	ldr	r2, [r3, #4]
 8002edc:	4613      	mov	r3, r2
 8002ede:	009b      	lsls	r3, r3, #2
 8002ee0:	4413      	add	r3, r2
 8002ee2:	3b05      	subs	r3, #5
 8002ee4:	fa00 f203 	lsl.w	r2, r0, r3
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	430a      	orrs	r2, r1
 8002eee:	635a      	str	r2, [r3, #52]	; 0x34
 8002ef0:	e03c      	b.n	8002f6c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002ef2:	683b      	ldr	r3, [r7, #0]
 8002ef4:	685b      	ldr	r3, [r3, #4]
 8002ef6:	2b0c      	cmp	r3, #12
 8002ef8:	d81c      	bhi.n	8002f34 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002f00:	683b      	ldr	r3, [r7, #0]
 8002f02:	685a      	ldr	r2, [r3, #4]
 8002f04:	4613      	mov	r3, r2
 8002f06:	009b      	lsls	r3, r3, #2
 8002f08:	4413      	add	r3, r2
 8002f0a:	3b23      	subs	r3, #35	; 0x23
 8002f0c:	221f      	movs	r2, #31
 8002f0e:	fa02 f303 	lsl.w	r3, r2, r3
 8002f12:	43db      	mvns	r3, r3
 8002f14:	4019      	ands	r1, r3
 8002f16:	683b      	ldr	r3, [r7, #0]
 8002f18:	6818      	ldr	r0, [r3, #0]
 8002f1a:	683b      	ldr	r3, [r7, #0]
 8002f1c:	685a      	ldr	r2, [r3, #4]
 8002f1e:	4613      	mov	r3, r2
 8002f20:	009b      	lsls	r3, r3, #2
 8002f22:	4413      	add	r3, r2
 8002f24:	3b23      	subs	r3, #35	; 0x23
 8002f26:	fa00 f203 	lsl.w	r2, r0, r3
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	430a      	orrs	r2, r1
 8002f30:	631a      	str	r2, [r3, #48]	; 0x30
 8002f32:	e01b      	b.n	8002f6c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002f3a:	683b      	ldr	r3, [r7, #0]
 8002f3c:	685a      	ldr	r2, [r3, #4]
 8002f3e:	4613      	mov	r3, r2
 8002f40:	009b      	lsls	r3, r3, #2
 8002f42:	4413      	add	r3, r2
 8002f44:	3b41      	subs	r3, #65	; 0x41
 8002f46:	221f      	movs	r2, #31
 8002f48:	fa02 f303 	lsl.w	r3, r2, r3
 8002f4c:	43db      	mvns	r3, r3
 8002f4e:	4019      	ands	r1, r3
 8002f50:	683b      	ldr	r3, [r7, #0]
 8002f52:	6818      	ldr	r0, [r3, #0]
 8002f54:	683b      	ldr	r3, [r7, #0]
 8002f56:	685a      	ldr	r2, [r3, #4]
 8002f58:	4613      	mov	r3, r2
 8002f5a:	009b      	lsls	r3, r3, #2
 8002f5c:	4413      	add	r3, r2
 8002f5e:	3b41      	subs	r3, #65	; 0x41
 8002f60:	fa00 f203 	lsl.w	r2, r0, r3
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	430a      	orrs	r2, r1
 8002f6a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8002f6c:	683b      	ldr	r3, [r7, #0]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	2b09      	cmp	r3, #9
 8002f72:	d91c      	bls.n	8002fae <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	68d9      	ldr	r1, [r3, #12]
 8002f7a:	683b      	ldr	r3, [r7, #0]
 8002f7c:	681a      	ldr	r2, [r3, #0]
 8002f7e:	4613      	mov	r3, r2
 8002f80:	005b      	lsls	r3, r3, #1
 8002f82:	4413      	add	r3, r2
 8002f84:	3b1e      	subs	r3, #30
 8002f86:	2207      	movs	r2, #7
 8002f88:	fa02 f303 	lsl.w	r3, r2, r3
 8002f8c:	43db      	mvns	r3, r3
 8002f8e:	4019      	ands	r1, r3
 8002f90:	683b      	ldr	r3, [r7, #0]
 8002f92:	6898      	ldr	r0, [r3, #8]
 8002f94:	683b      	ldr	r3, [r7, #0]
 8002f96:	681a      	ldr	r2, [r3, #0]
 8002f98:	4613      	mov	r3, r2
 8002f9a:	005b      	lsls	r3, r3, #1
 8002f9c:	4413      	add	r3, r2
 8002f9e:	3b1e      	subs	r3, #30
 8002fa0:	fa00 f203 	lsl.w	r2, r0, r3
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	430a      	orrs	r2, r1
 8002faa:	60da      	str	r2, [r3, #12]
 8002fac:	e019      	b.n	8002fe2 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	6919      	ldr	r1, [r3, #16]
 8002fb4:	683b      	ldr	r3, [r7, #0]
 8002fb6:	681a      	ldr	r2, [r3, #0]
 8002fb8:	4613      	mov	r3, r2
 8002fba:	005b      	lsls	r3, r3, #1
 8002fbc:	4413      	add	r3, r2
 8002fbe:	2207      	movs	r2, #7
 8002fc0:	fa02 f303 	lsl.w	r3, r2, r3
 8002fc4:	43db      	mvns	r3, r3
 8002fc6:	4019      	ands	r1, r3
 8002fc8:	683b      	ldr	r3, [r7, #0]
 8002fca:	6898      	ldr	r0, [r3, #8]
 8002fcc:	683b      	ldr	r3, [r7, #0]
 8002fce:	681a      	ldr	r2, [r3, #0]
 8002fd0:	4613      	mov	r3, r2
 8002fd2:	005b      	lsls	r3, r3, #1
 8002fd4:	4413      	add	r3, r2
 8002fd6:	fa00 f203 	lsl.w	r2, r0, r3
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	430a      	orrs	r2, r1
 8002fe0:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002fe2:	683b      	ldr	r3, [r7, #0]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	2b10      	cmp	r3, #16
 8002fe8:	d003      	beq.n	8002ff2 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8002fea:	683b      	ldr	r3, [r7, #0]
 8002fec:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002fee:	2b11      	cmp	r3, #17
 8002ff0:	d132      	bne.n	8003058 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	4a1d      	ldr	r2, [pc, #116]	; (800306c <HAL_ADC_ConfigChannel+0x1e4>)
 8002ff8:	4293      	cmp	r3, r2
 8002ffa:	d125      	bne.n	8003048 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	689b      	ldr	r3, [r3, #8]
 8003002:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003006:	2b00      	cmp	r3, #0
 8003008:	d126      	bne.n	8003058 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	689a      	ldr	r2, [r3, #8]
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8003018:	609a      	str	r2, [r3, #8]
        
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 800301a:	683b      	ldr	r3, [r7, #0]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	2b10      	cmp	r3, #16
 8003020:	d11a      	bne.n	8003058 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003022:	4b13      	ldr	r3, [pc, #76]	; (8003070 <HAL_ADC_ConfigChannel+0x1e8>)
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	4a13      	ldr	r2, [pc, #76]	; (8003074 <HAL_ADC_ConfigChannel+0x1ec>)
 8003028:	fba2 2303 	umull	r2, r3, r2, r3
 800302c:	0c9a      	lsrs	r2, r3, #18
 800302e:	4613      	mov	r3, r2
 8003030:	009b      	lsls	r3, r3, #2
 8003032:	4413      	add	r3, r2
 8003034:	005b      	lsls	r3, r3, #1
 8003036:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003038:	e002      	b.n	8003040 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 800303a:	68bb      	ldr	r3, [r7, #8]
 800303c:	3b01      	subs	r3, #1
 800303e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003040:	68bb      	ldr	r3, [r7, #8]
 8003042:	2b00      	cmp	r3, #0
 8003044:	d1f9      	bne.n	800303a <HAL_ADC_ConfigChannel+0x1b2>
 8003046:	e007      	b.n	8003058 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800304c:	f043 0220 	orr.w	r2, r3, #32
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8003054:	2301      	movs	r3, #1
 8003056:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	2200      	movs	r2, #0
 800305c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8003060:	7bfb      	ldrb	r3, [r7, #15]
}
 8003062:	4618      	mov	r0, r3
 8003064:	3714      	adds	r7, #20
 8003066:	46bd      	mov	sp, r7
 8003068:	bc80      	pop	{r7}
 800306a:	4770      	bx	lr
 800306c:	40012400 	.word	0x40012400
 8003070:	20000018 	.word	0x20000018
 8003074:	431bde83 	.word	0x431bde83

08003078 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8003078:	b580      	push	{r7, lr}
 800307a:	b084      	sub	sp, #16
 800307c:	af00      	add	r7, sp, #0
 800307e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003080:	2300      	movs	r3, #0
 8003082:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8003084:	2300      	movs	r3, #0
 8003086:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	689b      	ldr	r3, [r3, #8]
 800308e:	f003 0301 	and.w	r3, r3, #1
 8003092:	2b01      	cmp	r3, #1
 8003094:	d039      	beq.n	800310a <ADC_Enable+0x92>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	689a      	ldr	r2, [r3, #8]
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	f042 0201 	orr.w	r2, r2, #1
 80030a4:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80030a6:	4b1b      	ldr	r3, [pc, #108]	; (8003114 <ADC_Enable+0x9c>)
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	4a1b      	ldr	r2, [pc, #108]	; (8003118 <ADC_Enable+0xa0>)
 80030ac:	fba2 2303 	umull	r2, r3, r2, r3
 80030b0:	0c9b      	lsrs	r3, r3, #18
 80030b2:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80030b4:	e002      	b.n	80030bc <ADC_Enable+0x44>
    {
      wait_loop_index--;
 80030b6:	68bb      	ldr	r3, [r7, #8]
 80030b8:	3b01      	subs	r3, #1
 80030ba:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80030bc:	68bb      	ldr	r3, [r7, #8]
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d1f9      	bne.n	80030b6 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 80030c2:	f7ff fce7 	bl	8002a94 <HAL_GetTick>
 80030c6:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 80030c8:	e018      	b.n	80030fc <ADC_Enable+0x84>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80030ca:	f7ff fce3 	bl	8002a94 <HAL_GetTick>
 80030ce:	4602      	mov	r2, r0
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	1ad3      	subs	r3, r2, r3
 80030d4:	2b02      	cmp	r3, #2
 80030d6:	d911      	bls.n	80030fc <ADC_Enable+0x84>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030dc:	f043 0210 	orr.w	r2, r3, #16
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	629a      	str	r2, [r3, #40]	; 0x28
      
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030e8:	f043 0201 	orr.w	r2, r3, #1
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	62da      	str	r2, [r3, #44]	; 0x2c
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	2200      	movs	r2, #0
 80030f4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
        return HAL_ERROR;
 80030f8:	2301      	movs	r3, #1
 80030fa:	e007      	b.n	800310c <ADC_Enable+0x94>
    while(ADC_IS_ENABLE(hadc) == RESET)
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	689b      	ldr	r3, [r3, #8]
 8003102:	f003 0301 	and.w	r3, r3, #1
 8003106:	2b01      	cmp	r3, #1
 8003108:	d1df      	bne.n	80030ca <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 800310a:	2300      	movs	r3, #0
}
 800310c:	4618      	mov	r0, r3
 800310e:	3710      	adds	r7, #16
 8003110:	46bd      	mov	sp, r7
 8003112:	bd80      	pop	{r7, pc}
 8003114:	20000018 	.word	0x20000018
 8003118:	431bde83 	.word	0x431bde83

0800311c <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 800311c:	b580      	push	{r7, lr}
 800311e:	b084      	sub	sp, #16
 8003120:	af00      	add	r7, sp, #0
 8003122:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003124:	2300      	movs	r3, #0
 8003126:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	689b      	ldr	r3, [r3, #8]
 800312e:	f003 0301 	and.w	r3, r3, #1
 8003132:	2b01      	cmp	r3, #1
 8003134:	d127      	bne.n	8003186 <ADC_ConversionStop_Disable+0x6a>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	689a      	ldr	r2, [r3, #8]
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	f022 0201 	bic.w	r2, r2, #1
 8003144:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003146:	f7ff fca5 	bl	8002a94 <HAL_GetTick>
 800314a:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 800314c:	e014      	b.n	8003178 <ADC_ConversionStop_Disable+0x5c>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800314e:	f7ff fca1 	bl	8002a94 <HAL_GetTick>
 8003152:	4602      	mov	r2, r0
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	1ad3      	subs	r3, r2, r3
 8003158:	2b02      	cmp	r3, #2
 800315a:	d90d      	bls.n	8003178 <ADC_ConversionStop_Disable+0x5c>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003160:	f043 0210 	orr.w	r2, r3, #16
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800316c:	f043 0201 	orr.w	r2, r3, #1
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	62da      	str	r2, [r3, #44]	; 0x2c
        
        return HAL_ERROR;
 8003174:	2301      	movs	r3, #1
 8003176:	e007      	b.n	8003188 <ADC_ConversionStop_Disable+0x6c>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	689b      	ldr	r3, [r3, #8]
 800317e:	f003 0301 	and.w	r3, r3, #1
 8003182:	2b01      	cmp	r3, #1
 8003184:	d0e3      	beq.n	800314e <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8003186:	2300      	movs	r3, #0
}
 8003188:	4618      	mov	r0, r3
 800318a:	3710      	adds	r7, #16
 800318c:	46bd      	mov	sp, r7
 800318e:	bd80      	pop	{r7, pc}

08003190 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8003190:	b580      	push	{r7, lr}
 8003192:	b084      	sub	sp, #16
 8003194:	af00      	add	r7, sp, #0
 8003196:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800319c:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031a2:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d127      	bne.n	80031fa <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031ae:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	629a      	str	r2, [r3, #40]	; 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	689b      	ldr	r3, [r3, #8]
 80031bc:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80031c0:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80031c4:	d115      	bne.n	80031f2 <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	68db      	ldr	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d111      	bne.n	80031f2 <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031d2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	629a      	str	r2, [r3, #40]	; 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031de:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d105      	bne.n	80031f2 <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031ea:	f043 0201 	orr.w	r2, r3, #1
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* Conversion complete callback */
    HAL_ADC_ConvCpltCallback(hadc); 
 80031f2:	68f8      	ldr	r0, [r7, #12]
 80031f4:	f7ff fe2c 	bl	8002e50 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 80031f8:	e004      	b.n	8003204 <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	6a1b      	ldr	r3, [r3, #32]
 80031fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003200:	6878      	ldr	r0, [r7, #4]
 8003202:	4798      	blx	r3
}
 8003204:	bf00      	nop
 8003206:	3710      	adds	r7, #16
 8003208:	46bd      	mov	sp, r7
 800320a:	bd80      	pop	{r7, pc}

0800320c <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 800320c:	b580      	push	{r7, lr}
 800320e:	b084      	sub	sp, #16
 8003210:	af00      	add	r7, sp, #0
 8003212:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003218:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
  HAL_ADC_ConvHalfCpltCallback(hadc); 
 800321a:	68f8      	ldr	r0, [r7, #12]
 800321c:	f7ff fe21 	bl	8002e62 <HAL_ADC_ConvHalfCpltCallback>
}
 8003220:	bf00      	nop
 8003222:	3710      	adds	r7, #16
 8003224:	46bd      	mov	sp, r7
 8003226:	bd80      	pop	{r7, pc}

08003228 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8003228:	b580      	push	{r7, lr}
 800322a:	b084      	sub	sp, #16
 800322c:	af00      	add	r7, sp, #0
 800322e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003234:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800323a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003246:	f043 0204 	orr.w	r2, r3, #4
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Error callback */
  HAL_ADC_ErrorCallback(hadc); 
 800324e:	68f8      	ldr	r0, [r7, #12]
 8003250:	f7ff fe10 	bl	8002e74 <HAL_ADC_ErrorCallback>
}
 8003254:	bf00      	nop
 8003256:	3710      	adds	r7, #16
 8003258:	46bd      	mov	sp, r7
 800325a:	bd80      	pop	{r7, pc}

0800325c <NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800325c:	b480      	push	{r7}
 800325e:	b085      	sub	sp, #20
 8003260:	af00      	add	r7, sp, #0
 8003262:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	f003 0307 	and.w	r3, r3, #7
 800326a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800326c:	4b0c      	ldr	r3, [pc, #48]	; (80032a0 <NVIC_SetPriorityGrouping+0x44>)
 800326e:	68db      	ldr	r3, [r3, #12]
 8003270:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003272:	68ba      	ldr	r2, [r7, #8]
 8003274:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003278:	4013      	ands	r3, r2
 800327a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003280:	68bb      	ldr	r3, [r7, #8]
 8003282:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003284:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003288:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800328c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800328e:	4a04      	ldr	r2, [pc, #16]	; (80032a0 <NVIC_SetPriorityGrouping+0x44>)
 8003290:	68bb      	ldr	r3, [r7, #8]
 8003292:	60d3      	str	r3, [r2, #12]
}
 8003294:	bf00      	nop
 8003296:	3714      	adds	r7, #20
 8003298:	46bd      	mov	sp, r7
 800329a:	bc80      	pop	{r7}
 800329c:	4770      	bx	lr
 800329e:	bf00      	nop
 80032a0:	e000ed00 	.word	0xe000ed00

080032a4 <NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
 80032a4:	b480      	push	{r7}
 80032a6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80032a8:	4b04      	ldr	r3, [pc, #16]	; (80032bc <NVIC_GetPriorityGrouping+0x18>)
 80032aa:	68db      	ldr	r3, [r3, #12]
 80032ac:	0a1b      	lsrs	r3, r3, #8
 80032ae:	f003 0307 	and.w	r3, r3, #7
}
 80032b2:	4618      	mov	r0, r3
 80032b4:	46bd      	mov	sp, r7
 80032b6:	bc80      	pop	{r7}
 80032b8:	4770      	bx	lr
 80032ba:	bf00      	nop
 80032bc:	e000ed00 	.word	0xe000ed00

080032c0 <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80032c0:	b480      	push	{r7}
 80032c2:	b083      	sub	sp, #12
 80032c4:	af00      	add	r7, sp, #0
 80032c6:	4603      	mov	r3, r0
 80032c8:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80032ca:	79fb      	ldrb	r3, [r7, #7]
 80032cc:	f003 021f 	and.w	r2, r3, #31
 80032d0:	4906      	ldr	r1, [pc, #24]	; (80032ec <NVIC_EnableIRQ+0x2c>)
 80032d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032d6:	095b      	lsrs	r3, r3, #5
 80032d8:	2001      	movs	r0, #1
 80032da:	fa00 f202 	lsl.w	r2, r0, r2
 80032de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80032e2:	bf00      	nop
 80032e4:	370c      	adds	r7, #12
 80032e6:	46bd      	mov	sp, r7
 80032e8:	bc80      	pop	{r7}
 80032ea:	4770      	bx	lr
 80032ec:	e000e100 	.word	0xe000e100

080032f0 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80032f0:	b480      	push	{r7}
 80032f2:	b083      	sub	sp, #12
 80032f4:	af00      	add	r7, sp, #0
 80032f6:	4603      	mov	r3, r0
 80032f8:	6039      	str	r1, [r7, #0]
 80032fa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 80032fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003300:	2b00      	cmp	r3, #0
 8003302:	da0b      	bge.n	800331c <NVIC_SetPriority+0x2c>
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003304:	683b      	ldr	r3, [r7, #0]
 8003306:	b2da      	uxtb	r2, r3
 8003308:	490c      	ldr	r1, [pc, #48]	; (800333c <NVIC_SetPriority+0x4c>)
 800330a:	79fb      	ldrb	r3, [r7, #7]
 800330c:	f003 030f 	and.w	r3, r3, #15
 8003310:	3b04      	subs	r3, #4
 8003312:	0112      	lsls	r2, r2, #4
 8003314:	b2d2      	uxtb	r2, r2
 8003316:	440b      	add	r3, r1
 8003318:	761a      	strb	r2, [r3, #24]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800331a:	e009      	b.n	8003330 <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800331c:	683b      	ldr	r3, [r7, #0]
 800331e:	b2da      	uxtb	r2, r3
 8003320:	4907      	ldr	r1, [pc, #28]	; (8003340 <NVIC_SetPriority+0x50>)
 8003322:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003326:	0112      	lsls	r2, r2, #4
 8003328:	b2d2      	uxtb	r2, r2
 800332a:	440b      	add	r3, r1
 800332c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8003330:	bf00      	nop
 8003332:	370c      	adds	r7, #12
 8003334:	46bd      	mov	sp, r7
 8003336:	bc80      	pop	{r7}
 8003338:	4770      	bx	lr
 800333a:	bf00      	nop
 800333c:	e000ed00 	.word	0xe000ed00
 8003340:	e000e100 	.word	0xe000e100

08003344 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003344:	b480      	push	{r7}
 8003346:	b089      	sub	sp, #36	; 0x24
 8003348:	af00      	add	r7, sp, #0
 800334a:	60f8      	str	r0, [r7, #12]
 800334c:	60b9      	str	r1, [r7, #8]
 800334e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	f003 0307 	and.w	r3, r3, #7
 8003356:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003358:	69fb      	ldr	r3, [r7, #28]
 800335a:	f1c3 0307 	rsb	r3, r3, #7
 800335e:	2b04      	cmp	r3, #4
 8003360:	bf28      	it	cs
 8003362:	2304      	movcs	r3, #4
 8003364:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003366:	69fb      	ldr	r3, [r7, #28]
 8003368:	3304      	adds	r3, #4
 800336a:	2b06      	cmp	r3, #6
 800336c:	d902      	bls.n	8003374 <NVIC_EncodePriority+0x30>
 800336e:	69fb      	ldr	r3, [r7, #28]
 8003370:	3b03      	subs	r3, #3
 8003372:	e000      	b.n	8003376 <NVIC_EncodePriority+0x32>
 8003374:	2300      	movs	r3, #0
 8003376:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003378:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800337c:	69bb      	ldr	r3, [r7, #24]
 800337e:	fa02 f303 	lsl.w	r3, r2, r3
 8003382:	43da      	mvns	r2, r3
 8003384:	68bb      	ldr	r3, [r7, #8]
 8003386:	401a      	ands	r2, r3
 8003388:	697b      	ldr	r3, [r7, #20]
 800338a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800338c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003390:	697b      	ldr	r3, [r7, #20]
 8003392:	fa01 f303 	lsl.w	r3, r1, r3
 8003396:	43d9      	mvns	r1, r3
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800339c:	4313      	orrs	r3, r2
         );
}
 800339e:	4618      	mov	r0, r3
 80033a0:	3724      	adds	r7, #36	; 0x24
 80033a2:	46bd      	mov	sp, r7
 80033a4:	bc80      	pop	{r7}
 80033a6:	4770      	bx	lr

080033a8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80033a8:	b580      	push	{r7, lr}
 80033aa:	b082      	sub	sp, #8
 80033ac:	af00      	add	r7, sp, #0
 80033ae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	3b01      	subs	r3, #1
 80033b4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80033b8:	d301      	bcc.n	80033be <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80033ba:	2301      	movs	r3, #1
 80033bc:	e00f      	b.n	80033de <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80033be:	4a0a      	ldr	r2, [pc, #40]	; (80033e8 <SysTick_Config+0x40>)
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	3b01      	subs	r3, #1
 80033c4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80033c6:	210f      	movs	r1, #15
 80033c8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80033cc:	f7ff ff90 	bl	80032f0 <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80033d0:	4b05      	ldr	r3, [pc, #20]	; (80033e8 <SysTick_Config+0x40>)
 80033d2:	2200      	movs	r2, #0
 80033d4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80033d6:	4b04      	ldr	r3, [pc, #16]	; (80033e8 <SysTick_Config+0x40>)
 80033d8:	2207      	movs	r2, #7
 80033da:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80033dc:	2300      	movs	r3, #0
}
 80033de:	4618      	mov	r0, r3
 80033e0:	3708      	adds	r7, #8
 80033e2:	46bd      	mov	sp, r7
 80033e4:	bd80      	pop	{r7, pc}
 80033e6:	bf00      	nop
 80033e8:	e000e010 	.word	0xe000e010

080033ec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80033ec:	b580      	push	{r7, lr}
 80033ee:	b082      	sub	sp, #8
 80033f0:	af00      	add	r7, sp, #0
 80033f2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80033f4:	6878      	ldr	r0, [r7, #4]
 80033f6:	f7ff ff31 	bl	800325c <NVIC_SetPriorityGrouping>
}
 80033fa:	bf00      	nop
 80033fc:	3708      	adds	r7, #8
 80033fe:	46bd      	mov	sp, r7
 8003400:	bd80      	pop	{r7, pc}

08003402 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003402:	b580      	push	{r7, lr}
 8003404:	b086      	sub	sp, #24
 8003406:	af00      	add	r7, sp, #0
 8003408:	4603      	mov	r3, r0
 800340a:	60b9      	str	r1, [r7, #8]
 800340c:	607a      	str	r2, [r7, #4]
 800340e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003410:	2300      	movs	r3, #0
 8003412:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003414:	f7ff ff46 	bl	80032a4 <NVIC_GetPriorityGrouping>
 8003418:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800341a:	687a      	ldr	r2, [r7, #4]
 800341c:	68b9      	ldr	r1, [r7, #8]
 800341e:	6978      	ldr	r0, [r7, #20]
 8003420:	f7ff ff90 	bl	8003344 <NVIC_EncodePriority>
 8003424:	4602      	mov	r2, r0
 8003426:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800342a:	4611      	mov	r1, r2
 800342c:	4618      	mov	r0, r3
 800342e:	f7ff ff5f 	bl	80032f0 <NVIC_SetPriority>
}
 8003432:	bf00      	nop
 8003434:	3718      	adds	r7, #24
 8003436:	46bd      	mov	sp, r7
 8003438:	bd80      	pop	{r7, pc}

0800343a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800343a:	b580      	push	{r7, lr}
 800343c:	b082      	sub	sp, #8
 800343e:	af00      	add	r7, sp, #0
 8003440:	4603      	mov	r3, r0
 8003442:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003444:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003448:	4618      	mov	r0, r3
 800344a:	f7ff ff39 	bl	80032c0 <NVIC_EnableIRQ>
}
 800344e:	bf00      	nop
 8003450:	3708      	adds	r7, #8
 8003452:	46bd      	mov	sp, r7
 8003454:	bd80      	pop	{r7, pc}

08003456 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003456:	b580      	push	{r7, lr}
 8003458:	b082      	sub	sp, #8
 800345a:	af00      	add	r7, sp, #0
 800345c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800345e:	6878      	ldr	r0, [r7, #4]
 8003460:	f7ff ffa2 	bl	80033a8 <SysTick_Config>
 8003464:	4603      	mov	r3, r0
}
 8003466:	4618      	mov	r0, r3
 8003468:	3708      	adds	r7, #8
 800346a:	46bd      	mov	sp, r7
 800346c:	bd80      	pop	{r7, pc}
	...

08003470 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8003470:	b480      	push	{r7}
 8003472:	b083      	sub	sp, #12
 8003474:	af00      	add	r7, sp, #0
 8003476:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	2b04      	cmp	r3, #4
 800347c:	d106      	bne.n	800348c <HAL_SYSTICK_CLKSourceConfig+0x1c>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 800347e:	4b09      	ldr	r3, [pc, #36]	; (80034a4 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	4a08      	ldr	r2, [pc, #32]	; (80034a4 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8003484:	f043 0304 	orr.w	r3, r3, #4
 8003488:	6013      	str	r3, [r2, #0]
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
  }
}
 800348a:	e005      	b.n	8003498 <HAL_SYSTICK_CLKSourceConfig+0x28>
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 800348c:	4b05      	ldr	r3, [pc, #20]	; (80034a4 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	4a04      	ldr	r2, [pc, #16]	; (80034a4 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8003492:	f023 0304 	bic.w	r3, r3, #4
 8003496:	6013      	str	r3, [r2, #0]
}
 8003498:	bf00      	nop
 800349a:	370c      	adds	r7, #12
 800349c:	46bd      	mov	sp, r7
 800349e:	bc80      	pop	{r7}
 80034a0:	4770      	bx	lr
 80034a2:	bf00      	nop
 80034a4:	e000e010 	.word	0xe000e010

080034a8 <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 80034a8:	b580      	push	{r7, lr}
 80034aa:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 80034ac:	f000 f802 	bl	80034b4 <HAL_SYSTICK_Callback>
}
 80034b0:	bf00      	nop
 80034b2:	bd80      	pop	{r7, pc}

080034b4 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 80034b4:	b480      	push	{r7}
 80034b6:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 80034b8:	bf00      	nop
 80034ba:	46bd      	mov	sp, r7
 80034bc:	bc80      	pop	{r7}
 80034be:	4770      	bx	lr

080034c0 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80034c0:	b480      	push	{r7}
 80034c2:	b085      	sub	sp, #20
 80034c4:	af00      	add	r7, sp, #0
 80034c6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80034c8:	2300      	movs	r3, #0
 80034ca:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d101      	bne.n	80034d6 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80034d2:	2301      	movs	r3, #1
 80034d4:	e04f      	b.n	8003576 <HAL_DMA_Init+0xb6>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	461a      	mov	r2, r3
 80034dc:	4b28      	ldr	r3, [pc, #160]	; (8003580 <HAL_DMA_Init+0xc0>)
 80034de:	4413      	add	r3, r2
 80034e0:	4a28      	ldr	r2, [pc, #160]	; (8003584 <HAL_DMA_Init+0xc4>)
 80034e2:	fba2 2303 	umull	r2, r3, r2, r3
 80034e6:	091b      	lsrs	r3, r3, #4
 80034e8:	009a      	lsls	r2, r3, #2
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	4a25      	ldr	r2, [pc, #148]	; (8003588 <HAL_DMA_Init+0xc8>)
 80034f2:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* STM32F101xE || STM32F101xG || STM32F103xE || STM32F103xG || STM32F100xE || STM32F105xC || STM32F107xC */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	2202      	movs	r2, #2
 80034f8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800350a:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800350e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8003518:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	68db      	ldr	r3, [r3, #12]
 800351e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003524:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	695b      	ldr	r3, [r3, #20]
 800352a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003530:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	69db      	ldr	r3, [r3, #28]
 8003536:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003538:	68fa      	ldr	r2, [r7, #12]
 800353a:	4313      	orrs	r3, r2
 800353c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	68fa      	ldr	r2, [r7, #12]
 8003544:	601a      	str	r2, [r3, #0]


  /* Clean callbacks */
  hdma->XferCpltCallback = NULL;
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	2200      	movs	r2, #0
 800354a:	629a      	str	r2, [r3, #40]	; 0x28
  hdma->XferHalfCpltCallback = NULL;
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	2200      	movs	r2, #0
 8003550:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma->XferErrorCallback = NULL;
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	2200      	movs	r2, #0
 8003556:	631a      	str	r2, [r3, #48]	; 0x30
  hdma->XferAbortCallback = NULL;
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	2200      	movs	r2, #0
 800355c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	2200      	movs	r2, #0
 8003562:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	2201      	movs	r2, #1
 8003568:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	2200      	movs	r2, #0
 8003570:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8003574:	2300      	movs	r3, #0
}
 8003576:	4618      	mov	r0, r3
 8003578:	3714      	adds	r7, #20
 800357a:	46bd      	mov	sp, r7
 800357c:	bc80      	pop	{r7}
 800357e:	4770      	bx	lr
 8003580:	bffdfff8 	.word	0xbffdfff8
 8003584:	cccccccd 	.word	0xcccccccd
 8003588:	40020000 	.word	0x40020000

0800358c <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800358c:	b580      	push	{r7, lr}
 800358e:	b086      	sub	sp, #24
 8003590:	af00      	add	r7, sp, #0
 8003592:	60f8      	str	r0, [r7, #12]
 8003594:	60b9      	str	r1, [r7, #8]
 8003596:	607a      	str	r2, [r7, #4]
 8003598:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800359a:	2300      	movs	r3, #0
 800359c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80035a4:	2b01      	cmp	r3, #1
 80035a6:	d101      	bne.n	80035ac <HAL_DMA_Start_IT+0x20>
 80035a8:	2302      	movs	r3, #2
 80035aa:	e04a      	b.n	8003642 <HAL_DMA_Start_IT+0xb6>
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	2201      	movs	r2, #1
 80035b0:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80035ba:	2b01      	cmp	r3, #1
 80035bc:	d13a      	bne.n	8003634 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	2202      	movs	r2, #2
 80035c2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	2200      	movs	r2, #0
 80035ca:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	681a      	ldr	r2, [r3, #0]
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	f022 0201 	bic.w	r2, r2, #1
 80035da:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80035dc:	683b      	ldr	r3, [r7, #0]
 80035de:	687a      	ldr	r2, [r7, #4]
 80035e0:	68b9      	ldr	r1, [r7, #8]
 80035e2:	68f8      	ldr	r0, [r7, #12]
 80035e4:	f000 f9ae 	bl	8003944 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d008      	beq.n	8003602 <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	681a      	ldr	r2, [r3, #0]
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	f042 020e 	orr.w	r2, r2, #14
 80035fe:	601a      	str	r2, [r3, #0]
 8003600:	e00f      	b.n	8003622 <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	681a      	ldr	r2, [r3, #0]
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	f022 0204 	bic.w	r2, r2, #4
 8003610:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	681a      	ldr	r2, [r3, #0]
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	f042 020a 	orr.w	r2, r2, #10
 8003620:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	681a      	ldr	r2, [r3, #0]
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	f042 0201 	orr.w	r2, r2, #1
 8003630:	601a      	str	r2, [r3, #0]
 8003632:	e005      	b.n	8003640 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	2200      	movs	r2, #0
 8003638:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 800363c:	2302      	movs	r3, #2
 800363e:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8003640:	7dfb      	ldrb	r3, [r7, #23]
}
 8003642:	4618      	mov	r0, r3
 8003644:	3718      	adds	r7, #24
 8003646:	46bd      	mov	sp, r7
 8003648:	bd80      	pop	{r7, pc}
	...

0800364c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 800364c:	b580      	push	{r7, lr}
 800364e:	b084      	sub	sp, #16
 8003650:	af00      	add	r7, sp, #0
 8003652:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003654:	2300      	movs	r3, #0
 8003656:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800365e:	2b02      	cmp	r3, #2
 8003660:	d005      	beq.n	800366e <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	2204      	movs	r2, #4
 8003666:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8003668:	2301      	movs	r3, #1
 800366a:	73fb      	strb	r3, [r7, #15]
 800366c:	e051      	b.n	8003712 <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	681a      	ldr	r2, [r3, #0]
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	f022 020e 	bic.w	r2, r2, #14
 800367c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	681a      	ldr	r2, [r3, #0]
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	f022 0201 	bic.w	r2, r2, #1
 800368c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	4a22      	ldr	r2, [pc, #136]	; (800371c <HAL_DMA_Abort_IT+0xd0>)
 8003694:	4293      	cmp	r3, r2
 8003696:	d029      	beq.n	80036ec <HAL_DMA_Abort_IT+0xa0>
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	4a20      	ldr	r2, [pc, #128]	; (8003720 <HAL_DMA_Abort_IT+0xd4>)
 800369e:	4293      	cmp	r3, r2
 80036a0:	d022      	beq.n	80036e8 <HAL_DMA_Abort_IT+0x9c>
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	4a1f      	ldr	r2, [pc, #124]	; (8003724 <HAL_DMA_Abort_IT+0xd8>)
 80036a8:	4293      	cmp	r3, r2
 80036aa:	d01a      	beq.n	80036e2 <HAL_DMA_Abort_IT+0x96>
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	4a1d      	ldr	r2, [pc, #116]	; (8003728 <HAL_DMA_Abort_IT+0xdc>)
 80036b2:	4293      	cmp	r3, r2
 80036b4:	d012      	beq.n	80036dc <HAL_DMA_Abort_IT+0x90>
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	4a1c      	ldr	r2, [pc, #112]	; (800372c <HAL_DMA_Abort_IT+0xe0>)
 80036bc:	4293      	cmp	r3, r2
 80036be:	d00a      	beq.n	80036d6 <HAL_DMA_Abort_IT+0x8a>
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	4a1a      	ldr	r2, [pc, #104]	; (8003730 <HAL_DMA_Abort_IT+0xe4>)
 80036c6:	4293      	cmp	r3, r2
 80036c8:	d102      	bne.n	80036d0 <HAL_DMA_Abort_IT+0x84>
 80036ca:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80036ce:	e00e      	b.n	80036ee <HAL_DMA_Abort_IT+0xa2>
 80036d0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80036d4:	e00b      	b.n	80036ee <HAL_DMA_Abort_IT+0xa2>
 80036d6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80036da:	e008      	b.n	80036ee <HAL_DMA_Abort_IT+0xa2>
 80036dc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80036e0:	e005      	b.n	80036ee <HAL_DMA_Abort_IT+0xa2>
 80036e2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80036e6:	e002      	b.n	80036ee <HAL_DMA_Abort_IT+0xa2>
 80036e8:	2310      	movs	r3, #16
 80036ea:	e000      	b.n	80036ee <HAL_DMA_Abort_IT+0xa2>
 80036ec:	2301      	movs	r3, #1
 80036ee:	4a11      	ldr	r2, [pc, #68]	; (8003734 <HAL_DMA_Abort_IT+0xe8>)
 80036f0:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	2201      	movs	r2, #1
 80036f6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	2200      	movs	r2, #0
 80036fe:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003706:	2b00      	cmp	r3, #0
 8003708:	d003      	beq.n	8003712 <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800370e:	6878      	ldr	r0, [r7, #4]
 8003710:	4798      	blx	r3
    } 
  }
  return status;
 8003712:	7bfb      	ldrb	r3, [r7, #15]
}
 8003714:	4618      	mov	r0, r3
 8003716:	3710      	adds	r7, #16
 8003718:	46bd      	mov	sp, r7
 800371a:	bd80      	pop	{r7, pc}
 800371c:	40020008 	.word	0x40020008
 8003720:	4002001c 	.word	0x4002001c
 8003724:	40020030 	.word	0x40020030
 8003728:	40020044 	.word	0x40020044
 800372c:	40020058 	.word	0x40020058
 8003730:	4002006c 	.word	0x4002006c
 8003734:	40020000 	.word	0x40020000

08003738 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003738:	b580      	push	{r7, lr}
 800373a:	b084      	sub	sp, #16
 800373c:	af00      	add	r7, sp, #0
 800373e:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003754:	2204      	movs	r2, #4
 8003756:	409a      	lsls	r2, r3
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	4013      	ands	r3, r2
 800375c:	2b00      	cmp	r3, #0
 800375e:	d04f      	beq.n	8003800 <HAL_DMA_IRQHandler+0xc8>
 8003760:	68bb      	ldr	r3, [r7, #8]
 8003762:	f003 0304 	and.w	r3, r3, #4
 8003766:	2b00      	cmp	r3, #0
 8003768:	d04a      	beq.n	8003800 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	f003 0320 	and.w	r3, r3, #32
 8003774:	2b00      	cmp	r3, #0
 8003776:	d107      	bne.n	8003788 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	681a      	ldr	r2, [r3, #0]
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	f022 0204 	bic.w	r2, r2, #4
 8003786:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	4a66      	ldr	r2, [pc, #408]	; (8003928 <HAL_DMA_IRQHandler+0x1f0>)
 800378e:	4293      	cmp	r3, r2
 8003790:	d029      	beq.n	80037e6 <HAL_DMA_IRQHandler+0xae>
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	4a65      	ldr	r2, [pc, #404]	; (800392c <HAL_DMA_IRQHandler+0x1f4>)
 8003798:	4293      	cmp	r3, r2
 800379a:	d022      	beq.n	80037e2 <HAL_DMA_IRQHandler+0xaa>
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	4a63      	ldr	r2, [pc, #396]	; (8003930 <HAL_DMA_IRQHandler+0x1f8>)
 80037a2:	4293      	cmp	r3, r2
 80037a4:	d01a      	beq.n	80037dc <HAL_DMA_IRQHandler+0xa4>
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	4a62      	ldr	r2, [pc, #392]	; (8003934 <HAL_DMA_IRQHandler+0x1fc>)
 80037ac:	4293      	cmp	r3, r2
 80037ae:	d012      	beq.n	80037d6 <HAL_DMA_IRQHandler+0x9e>
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	4a60      	ldr	r2, [pc, #384]	; (8003938 <HAL_DMA_IRQHandler+0x200>)
 80037b6:	4293      	cmp	r3, r2
 80037b8:	d00a      	beq.n	80037d0 <HAL_DMA_IRQHandler+0x98>
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	4a5f      	ldr	r2, [pc, #380]	; (800393c <HAL_DMA_IRQHandler+0x204>)
 80037c0:	4293      	cmp	r3, r2
 80037c2:	d102      	bne.n	80037ca <HAL_DMA_IRQHandler+0x92>
 80037c4:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80037c8:	e00e      	b.n	80037e8 <HAL_DMA_IRQHandler+0xb0>
 80037ca:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80037ce:	e00b      	b.n	80037e8 <HAL_DMA_IRQHandler+0xb0>
 80037d0:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80037d4:	e008      	b.n	80037e8 <HAL_DMA_IRQHandler+0xb0>
 80037d6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80037da:	e005      	b.n	80037e8 <HAL_DMA_IRQHandler+0xb0>
 80037dc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80037e0:	e002      	b.n	80037e8 <HAL_DMA_IRQHandler+0xb0>
 80037e2:	2340      	movs	r3, #64	; 0x40
 80037e4:	e000      	b.n	80037e8 <HAL_DMA_IRQHandler+0xb0>
 80037e6:	2304      	movs	r3, #4
 80037e8:	4a55      	ldr	r2, [pc, #340]	; (8003940 <HAL_DMA_IRQHandler+0x208>)
 80037ea:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	f000 8094 	beq.w	800391e <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037fa:	6878      	ldr	r0, [r7, #4]
 80037fc:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 80037fe:	e08e      	b.n	800391e <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003804:	2202      	movs	r2, #2
 8003806:	409a      	lsls	r2, r3
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	4013      	ands	r3, r2
 800380c:	2b00      	cmp	r3, #0
 800380e:	d056      	beq.n	80038be <HAL_DMA_IRQHandler+0x186>
 8003810:	68bb      	ldr	r3, [r7, #8]
 8003812:	f003 0302 	and.w	r3, r3, #2
 8003816:	2b00      	cmp	r3, #0
 8003818:	d051      	beq.n	80038be <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	f003 0320 	and.w	r3, r3, #32
 8003824:	2b00      	cmp	r3, #0
 8003826:	d10b      	bne.n	8003840 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	681a      	ldr	r2, [r3, #0]
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	f022 020a 	bic.w	r2, r2, #10
 8003836:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	2201      	movs	r2, #1
 800383c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	4a38      	ldr	r2, [pc, #224]	; (8003928 <HAL_DMA_IRQHandler+0x1f0>)
 8003846:	4293      	cmp	r3, r2
 8003848:	d029      	beq.n	800389e <HAL_DMA_IRQHandler+0x166>
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	4a37      	ldr	r2, [pc, #220]	; (800392c <HAL_DMA_IRQHandler+0x1f4>)
 8003850:	4293      	cmp	r3, r2
 8003852:	d022      	beq.n	800389a <HAL_DMA_IRQHandler+0x162>
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	4a35      	ldr	r2, [pc, #212]	; (8003930 <HAL_DMA_IRQHandler+0x1f8>)
 800385a:	4293      	cmp	r3, r2
 800385c:	d01a      	beq.n	8003894 <HAL_DMA_IRQHandler+0x15c>
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	4a34      	ldr	r2, [pc, #208]	; (8003934 <HAL_DMA_IRQHandler+0x1fc>)
 8003864:	4293      	cmp	r3, r2
 8003866:	d012      	beq.n	800388e <HAL_DMA_IRQHandler+0x156>
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	4a32      	ldr	r2, [pc, #200]	; (8003938 <HAL_DMA_IRQHandler+0x200>)
 800386e:	4293      	cmp	r3, r2
 8003870:	d00a      	beq.n	8003888 <HAL_DMA_IRQHandler+0x150>
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	4a31      	ldr	r2, [pc, #196]	; (800393c <HAL_DMA_IRQHandler+0x204>)
 8003878:	4293      	cmp	r3, r2
 800387a:	d102      	bne.n	8003882 <HAL_DMA_IRQHandler+0x14a>
 800387c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8003880:	e00e      	b.n	80038a0 <HAL_DMA_IRQHandler+0x168>
 8003882:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003886:	e00b      	b.n	80038a0 <HAL_DMA_IRQHandler+0x168>
 8003888:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800388c:	e008      	b.n	80038a0 <HAL_DMA_IRQHandler+0x168>
 800388e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003892:	e005      	b.n	80038a0 <HAL_DMA_IRQHandler+0x168>
 8003894:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003898:	e002      	b.n	80038a0 <HAL_DMA_IRQHandler+0x168>
 800389a:	2320      	movs	r3, #32
 800389c:	e000      	b.n	80038a0 <HAL_DMA_IRQHandler+0x168>
 800389e:	2302      	movs	r3, #2
 80038a0:	4a27      	ldr	r2, [pc, #156]	; (8003940 <HAL_DMA_IRQHandler+0x208>)
 80038a2:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	2200      	movs	r2, #0
 80038a8:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d034      	beq.n	800391e <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038b8:	6878      	ldr	r0, [r7, #4]
 80038ba:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80038bc:	e02f      	b.n	800391e <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038c2:	2208      	movs	r2, #8
 80038c4:	409a      	lsls	r2, r3
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	4013      	ands	r3, r2
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d028      	beq.n	8003920 <HAL_DMA_IRQHandler+0x1e8>
 80038ce:	68bb      	ldr	r3, [r7, #8]
 80038d0:	f003 0308 	and.w	r3, r3, #8
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d023      	beq.n	8003920 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	681a      	ldr	r2, [r3, #0]
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	f022 020e 	bic.w	r2, r2, #14
 80038e6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038f0:	2101      	movs	r1, #1
 80038f2:	fa01 f202 	lsl.w	r2, r1, r2
 80038f6:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	2201      	movs	r2, #1
 80038fc:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	2201      	movs	r2, #1
 8003902:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	2200      	movs	r2, #0
 800390a:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003912:	2b00      	cmp	r3, #0
 8003914:	d004      	beq.n	8003920 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800391a:	6878      	ldr	r0, [r7, #4]
 800391c:	4798      	blx	r3
    }
  }
  return;
 800391e:	bf00      	nop
 8003920:	bf00      	nop
}
 8003922:	3710      	adds	r7, #16
 8003924:	46bd      	mov	sp, r7
 8003926:	bd80      	pop	{r7, pc}
 8003928:	40020008 	.word	0x40020008
 800392c:	4002001c 	.word	0x4002001c
 8003930:	40020030 	.word	0x40020030
 8003934:	40020044 	.word	0x40020044
 8003938:	40020058 	.word	0x40020058
 800393c:	4002006c 	.word	0x4002006c
 8003940:	40020000 	.word	0x40020000

08003944 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003944:	b480      	push	{r7}
 8003946:	b085      	sub	sp, #20
 8003948:	af00      	add	r7, sp, #0
 800394a:	60f8      	str	r0, [r7, #12]
 800394c:	60b9      	str	r1, [r7, #8]
 800394e:	607a      	str	r2, [r7, #4]
 8003950:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800395a:	2101      	movs	r1, #1
 800395c:	fa01 f202 	lsl.w	r2, r1, r2
 8003960:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	683a      	ldr	r2, [r7, #0]
 8003968:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	685b      	ldr	r3, [r3, #4]
 800396e:	2b10      	cmp	r3, #16
 8003970:	d108      	bne.n	8003984 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	687a      	ldr	r2, [r7, #4]
 8003978:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	68ba      	ldr	r2, [r7, #8]
 8003980:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003982:	e007      	b.n	8003994 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	68ba      	ldr	r2, [r7, #8]
 800398a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	687a      	ldr	r2, [r7, #4]
 8003992:	60da      	str	r2, [r3, #12]
}
 8003994:	bf00      	nop
 8003996:	3714      	adds	r7, #20
 8003998:	46bd      	mov	sp, r7
 800399a:	bc80      	pop	{r7}
 800399c:	4770      	bx	lr
	...

080039a0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80039a0:	b480      	push	{r7}
 80039a2:	b08b      	sub	sp, #44	; 0x2c
 80039a4:	af00      	add	r7, sp, #0
 80039a6:	6078      	str	r0, [r7, #4]
 80039a8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80039aa:	2300      	movs	r3, #0
 80039ac:	61fb      	str	r3, [r7, #28]
  uint32_t iocurrent = 0x00U;
 80039ae:	2300      	movs	r3, #0
 80039b0:	61bb      	str	r3, [r7, #24]
  uint32_t temp = 0x00U;
 80039b2:	2300      	movs	r3, #0
 80039b4:	617b      	str	r3, [r7, #20]
  uint32_t config = 0x00U;
 80039b6:	2300      	movs	r3, #0
 80039b8:	623b      	str	r3, [r7, #32]
  __IO uint32_t *configregister; /* Store the address of CRL or CRH register based on pin number */
  uint32_t registeroffset = 0U; /* offset used during computation of CNF and MODE bits placement inside CRL or CRH register */
 80039ba:	2300      	movs	r3, #0
 80039bc:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0U; position < GPIO_NUMBER; position++)
 80039be:	2300      	movs	r3, #0
 80039c0:	627b      	str	r3, [r7, #36]	; 0x24
 80039c2:	e127      	b.n	8003c14 <HAL_GPIO_Init+0x274>
  {
    /* Get the IO position */
    ioposition = (0x01U << position);
 80039c4:	2201      	movs	r2, #1
 80039c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039c8:	fa02 f303 	lsl.w	r3, r2, r3
 80039cc:	61fb      	str	r3, [r7, #28]
    
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80039ce:	683b      	ldr	r3, [r7, #0]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	69fa      	ldr	r2, [r7, #28]
 80039d4:	4013      	ands	r3, r2
 80039d6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80039d8:	69ba      	ldr	r2, [r7, #24]
 80039da:	69fb      	ldr	r3, [r7, #28]
 80039dc:	429a      	cmp	r2, r3
 80039de:	f040 8116 	bne.w	8003c0e <HAL_GPIO_Init+0x26e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80039e2:	683b      	ldr	r3, [r7, #0]
 80039e4:	685b      	ldr	r3, [r3, #4]
 80039e6:	2b12      	cmp	r3, #18
 80039e8:	d034      	beq.n	8003a54 <HAL_GPIO_Init+0xb4>
 80039ea:	2b12      	cmp	r3, #18
 80039ec:	d80d      	bhi.n	8003a0a <HAL_GPIO_Init+0x6a>
 80039ee:	2b02      	cmp	r3, #2
 80039f0:	d02b      	beq.n	8003a4a <HAL_GPIO_Init+0xaa>
 80039f2:	2b02      	cmp	r3, #2
 80039f4:	d804      	bhi.n	8003a00 <HAL_GPIO_Init+0x60>
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d031      	beq.n	8003a5e <HAL_GPIO_Init+0xbe>
 80039fa:	2b01      	cmp	r3, #1
 80039fc:	d01c      	beq.n	8003a38 <HAL_GPIO_Init+0x98>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;
        
        /* Parameters are checked with assert_param */
        default:
          break;
 80039fe:	e048      	b.n	8003a92 <HAL_GPIO_Init+0xf2>
      switch (GPIO_Init->Mode)
 8003a00:	2b03      	cmp	r3, #3
 8003a02:	d043      	beq.n	8003a8c <HAL_GPIO_Init+0xec>
 8003a04:	2b11      	cmp	r3, #17
 8003a06:	d01b      	beq.n	8003a40 <HAL_GPIO_Init+0xa0>
          break;
 8003a08:	e043      	b.n	8003a92 <HAL_GPIO_Init+0xf2>
      switch (GPIO_Init->Mode)
 8003a0a:	4a87      	ldr	r2, [pc, #540]	; (8003c28 <HAL_GPIO_Init+0x288>)
 8003a0c:	4293      	cmp	r3, r2
 8003a0e:	d026      	beq.n	8003a5e <HAL_GPIO_Init+0xbe>
 8003a10:	4a85      	ldr	r2, [pc, #532]	; (8003c28 <HAL_GPIO_Init+0x288>)
 8003a12:	4293      	cmp	r3, r2
 8003a14:	d806      	bhi.n	8003a24 <HAL_GPIO_Init+0x84>
 8003a16:	4a85      	ldr	r2, [pc, #532]	; (8003c2c <HAL_GPIO_Init+0x28c>)
 8003a18:	4293      	cmp	r3, r2
 8003a1a:	d020      	beq.n	8003a5e <HAL_GPIO_Init+0xbe>
 8003a1c:	4a84      	ldr	r2, [pc, #528]	; (8003c30 <HAL_GPIO_Init+0x290>)
 8003a1e:	4293      	cmp	r3, r2
 8003a20:	d01d      	beq.n	8003a5e <HAL_GPIO_Init+0xbe>
          break;
 8003a22:	e036      	b.n	8003a92 <HAL_GPIO_Init+0xf2>
      switch (GPIO_Init->Mode)
 8003a24:	4a83      	ldr	r2, [pc, #524]	; (8003c34 <HAL_GPIO_Init+0x294>)
 8003a26:	4293      	cmp	r3, r2
 8003a28:	d019      	beq.n	8003a5e <HAL_GPIO_Init+0xbe>
 8003a2a:	4a83      	ldr	r2, [pc, #524]	; (8003c38 <HAL_GPIO_Init+0x298>)
 8003a2c:	4293      	cmp	r3, r2
 8003a2e:	d016      	beq.n	8003a5e <HAL_GPIO_Init+0xbe>
 8003a30:	4a82      	ldr	r2, [pc, #520]	; (8003c3c <HAL_GPIO_Init+0x29c>)
 8003a32:	4293      	cmp	r3, r2
 8003a34:	d013      	beq.n	8003a5e <HAL_GPIO_Init+0xbe>
          break;
 8003a36:	e02c      	b.n	8003a92 <HAL_GPIO_Init+0xf2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8003a38:	683b      	ldr	r3, [r7, #0]
 8003a3a:	68db      	ldr	r3, [r3, #12]
 8003a3c:	623b      	str	r3, [r7, #32]
          break;
 8003a3e:	e028      	b.n	8003a92 <HAL_GPIO_Init+0xf2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8003a40:	683b      	ldr	r3, [r7, #0]
 8003a42:	68db      	ldr	r3, [r3, #12]
 8003a44:	3304      	adds	r3, #4
 8003a46:	623b      	str	r3, [r7, #32]
          break;
 8003a48:	e023      	b.n	8003a92 <HAL_GPIO_Init+0xf2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8003a4a:	683b      	ldr	r3, [r7, #0]
 8003a4c:	68db      	ldr	r3, [r3, #12]
 8003a4e:	3308      	adds	r3, #8
 8003a50:	623b      	str	r3, [r7, #32]
          break;
 8003a52:	e01e      	b.n	8003a92 <HAL_GPIO_Init+0xf2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8003a54:	683b      	ldr	r3, [r7, #0]
 8003a56:	68db      	ldr	r3, [r3, #12]
 8003a58:	330c      	adds	r3, #12
 8003a5a:	623b      	str	r3, [r7, #32]
          break;
 8003a5c:	e019      	b.n	8003a92 <HAL_GPIO_Init+0xf2>
          if(GPIO_Init->Pull == GPIO_NOPULL)
 8003a5e:	683b      	ldr	r3, [r7, #0]
 8003a60:	689b      	ldr	r3, [r3, #8]
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d102      	bne.n	8003a6c <HAL_GPIO_Init+0xcc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8003a66:	2304      	movs	r3, #4
 8003a68:	623b      	str	r3, [r7, #32]
          break; 
 8003a6a:	e012      	b.n	8003a92 <HAL_GPIO_Init+0xf2>
          else if(GPIO_Init->Pull == GPIO_PULLUP)
 8003a6c:	683b      	ldr	r3, [r7, #0]
 8003a6e:	689b      	ldr	r3, [r3, #8]
 8003a70:	2b01      	cmp	r3, #1
 8003a72:	d105      	bne.n	8003a80 <HAL_GPIO_Init+0xe0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003a74:	2308      	movs	r3, #8
 8003a76:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	69fa      	ldr	r2, [r7, #28]
 8003a7c:	611a      	str	r2, [r3, #16]
          break; 
 8003a7e:	e008      	b.n	8003a92 <HAL_GPIO_Init+0xf2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003a80:	2308      	movs	r3, #8
 8003a82:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	69fa      	ldr	r2, [r7, #28]
 8003a88:	615a      	str	r2, [r3, #20]
          break; 
 8003a8a:	e002      	b.n	8003a92 <HAL_GPIO_Init+0xf2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8003a8c:	2300      	movs	r3, #0
 8003a8e:	623b      	str	r3, [r7, #32]
          break;
 8003a90:	bf00      	nop
      }
      
      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003a92:	69bb      	ldr	r3, [r7, #24]
 8003a94:	2bff      	cmp	r3, #255	; 0xff
 8003a96:	d801      	bhi.n	8003a9c <HAL_GPIO_Init+0xfc>
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	e001      	b.n	8003aa0 <HAL_GPIO_Init+0x100>
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	3304      	adds	r3, #4
 8003aa0:	60fb      	str	r3, [r7, #12]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2U) : ((position - 8U) << 2U);
 8003aa2:	69bb      	ldr	r3, [r7, #24]
 8003aa4:	2bff      	cmp	r3, #255	; 0xff
 8003aa6:	d802      	bhi.n	8003aae <HAL_GPIO_Init+0x10e>
 8003aa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003aaa:	009b      	lsls	r3, r3, #2
 8003aac:	e002      	b.n	8003ab4 <HAL_GPIO_Init+0x114>
 8003aae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ab0:	3b08      	subs	r3, #8
 8003ab2:	009b      	lsls	r3, r3, #2
 8003ab4:	613b      	str	r3, [r7, #16]
      
      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset ), (config << registeroffset));
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	681a      	ldr	r2, [r3, #0]
 8003aba:	210f      	movs	r1, #15
 8003abc:	693b      	ldr	r3, [r7, #16]
 8003abe:	fa01 f303 	lsl.w	r3, r1, r3
 8003ac2:	43db      	mvns	r3, r3
 8003ac4:	401a      	ands	r2, r3
 8003ac6:	6a39      	ldr	r1, [r7, #32]
 8003ac8:	693b      	ldr	r3, [r7, #16]
 8003aca:	fa01 f303 	lsl.w	r3, r1, r3
 8003ace:	431a      	orrs	r2, r3
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	601a      	str	r2, [r3, #0]
      
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 8003ad4:	683b      	ldr	r3, [r7, #0]
 8003ad6:	685b      	ldr	r3, [r3, #4]
 8003ad8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	f000 8096 	beq.w	8003c0e <HAL_GPIO_Init+0x26e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003ae2:	4b57      	ldr	r3, [pc, #348]	; (8003c40 <HAL_GPIO_Init+0x2a0>)
 8003ae4:	699b      	ldr	r3, [r3, #24]
 8003ae6:	4a56      	ldr	r2, [pc, #344]	; (8003c40 <HAL_GPIO_Init+0x2a0>)
 8003ae8:	f043 0301 	orr.w	r3, r3, #1
 8003aec:	6193      	str	r3, [r2, #24]
 8003aee:	4b54      	ldr	r3, [pc, #336]	; (8003c40 <HAL_GPIO_Init+0x2a0>)
 8003af0:	699b      	ldr	r3, [r3, #24]
 8003af2:	f003 0301 	and.w	r3, r3, #1
 8003af6:	60bb      	str	r3, [r7, #8]
 8003af8:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2U];
 8003afa:	4a52      	ldr	r2, [pc, #328]	; (8003c44 <HAL_GPIO_Init+0x2a4>)
 8003afc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003afe:	089b      	lsrs	r3, r3, #2
 8003b00:	3302      	adds	r3, #2
 8003b02:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003b06:	617b      	str	r3, [r7, #20]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8003b08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b0a:	f003 0303 	and.w	r3, r3, #3
 8003b0e:	009b      	lsls	r3, r3, #2
 8003b10:	220f      	movs	r2, #15
 8003b12:	fa02 f303 	lsl.w	r3, r2, r3
 8003b16:	43db      	mvns	r3, r3
 8003b18:	697a      	ldr	r2, [r7, #20]
 8003b1a:	4013      	ands	r3, r2
 8003b1c:	617b      	str	r3, [r7, #20]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	4a49      	ldr	r2, [pc, #292]	; (8003c48 <HAL_GPIO_Init+0x2a8>)
 8003b22:	4293      	cmp	r3, r2
 8003b24:	d013      	beq.n	8003b4e <HAL_GPIO_Init+0x1ae>
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	4a48      	ldr	r2, [pc, #288]	; (8003c4c <HAL_GPIO_Init+0x2ac>)
 8003b2a:	4293      	cmp	r3, r2
 8003b2c:	d00d      	beq.n	8003b4a <HAL_GPIO_Init+0x1aa>
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	4a47      	ldr	r2, [pc, #284]	; (8003c50 <HAL_GPIO_Init+0x2b0>)
 8003b32:	4293      	cmp	r3, r2
 8003b34:	d007      	beq.n	8003b46 <HAL_GPIO_Init+0x1a6>
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	4a46      	ldr	r2, [pc, #280]	; (8003c54 <HAL_GPIO_Init+0x2b4>)
 8003b3a:	4293      	cmp	r3, r2
 8003b3c:	d101      	bne.n	8003b42 <HAL_GPIO_Init+0x1a2>
 8003b3e:	2303      	movs	r3, #3
 8003b40:	e006      	b.n	8003b50 <HAL_GPIO_Init+0x1b0>
 8003b42:	2304      	movs	r3, #4
 8003b44:	e004      	b.n	8003b50 <HAL_GPIO_Init+0x1b0>
 8003b46:	2302      	movs	r3, #2
 8003b48:	e002      	b.n	8003b50 <HAL_GPIO_Init+0x1b0>
 8003b4a:	2301      	movs	r3, #1
 8003b4c:	e000      	b.n	8003b50 <HAL_GPIO_Init+0x1b0>
 8003b4e:	2300      	movs	r3, #0
 8003b50:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b52:	f002 0203 	and.w	r2, r2, #3
 8003b56:	0092      	lsls	r2, r2, #2
 8003b58:	4093      	lsls	r3, r2
 8003b5a:	697a      	ldr	r2, [r7, #20]
 8003b5c:	4313      	orrs	r3, r2
 8003b5e:	617b      	str	r3, [r7, #20]
        AFIO->EXTICR[position >> 2U] = temp;
 8003b60:	4938      	ldr	r1, [pc, #224]	; (8003c44 <HAL_GPIO_Init+0x2a4>)
 8003b62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b64:	089b      	lsrs	r3, r3, #2
 8003b66:	3302      	adds	r3, #2
 8003b68:	697a      	ldr	r2, [r7, #20]
 8003b6a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        

        /* Configure the interrupt mask */
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003b6e:	683b      	ldr	r3, [r7, #0]
 8003b70:	685b      	ldr	r3, [r3, #4]
 8003b72:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d006      	beq.n	8003b88 <HAL_GPIO_Init+0x1e8>
        {
          SET_BIT(EXTI->IMR, iocurrent); 
 8003b7a:	4b37      	ldr	r3, [pc, #220]	; (8003c58 <HAL_GPIO_Init+0x2b8>)
 8003b7c:	681a      	ldr	r2, [r3, #0]
 8003b7e:	4936      	ldr	r1, [pc, #216]	; (8003c58 <HAL_GPIO_Init+0x2b8>)
 8003b80:	69bb      	ldr	r3, [r7, #24]
 8003b82:	4313      	orrs	r3, r2
 8003b84:	600b      	str	r3, [r1, #0]
 8003b86:	e006      	b.n	8003b96 <HAL_GPIO_Init+0x1f6>
        } 
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent); 
 8003b88:	4b33      	ldr	r3, [pc, #204]	; (8003c58 <HAL_GPIO_Init+0x2b8>)
 8003b8a:	681a      	ldr	r2, [r3, #0]
 8003b8c:	69bb      	ldr	r3, [r7, #24]
 8003b8e:	43db      	mvns	r3, r3
 8003b90:	4931      	ldr	r1, [pc, #196]	; (8003c58 <HAL_GPIO_Init+0x2b8>)
 8003b92:	4013      	ands	r3, r2
 8003b94:	600b      	str	r3, [r1, #0]
        } 
        
        /* Configure the event mask */
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003b96:	683b      	ldr	r3, [r7, #0]
 8003b98:	685b      	ldr	r3, [r3, #4]
 8003b9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d006      	beq.n	8003bb0 <HAL_GPIO_Init+0x210>
        {
          SET_BIT(EXTI->EMR, iocurrent); 
 8003ba2:	4b2d      	ldr	r3, [pc, #180]	; (8003c58 <HAL_GPIO_Init+0x2b8>)
 8003ba4:	685a      	ldr	r2, [r3, #4]
 8003ba6:	492c      	ldr	r1, [pc, #176]	; (8003c58 <HAL_GPIO_Init+0x2b8>)
 8003ba8:	69bb      	ldr	r3, [r7, #24]
 8003baa:	4313      	orrs	r3, r2
 8003bac:	604b      	str	r3, [r1, #4]
 8003bae:	e006      	b.n	8003bbe <HAL_GPIO_Init+0x21e>
        } 
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent); 
 8003bb0:	4b29      	ldr	r3, [pc, #164]	; (8003c58 <HAL_GPIO_Init+0x2b8>)
 8003bb2:	685a      	ldr	r2, [r3, #4]
 8003bb4:	69bb      	ldr	r3, [r7, #24]
 8003bb6:	43db      	mvns	r3, r3
 8003bb8:	4927      	ldr	r1, [pc, #156]	; (8003c58 <HAL_GPIO_Init+0x2b8>)
 8003bba:	4013      	ands	r3, r2
 8003bbc:	604b      	str	r3, [r1, #4]
        }
        
        /* Enable or disable the rising trigger */
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003bbe:	683b      	ldr	r3, [r7, #0]
 8003bc0:	685b      	ldr	r3, [r3, #4]
 8003bc2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d006      	beq.n	8003bd8 <HAL_GPIO_Init+0x238>
        {
          SET_BIT(EXTI->RTSR, iocurrent); 
 8003bca:	4b23      	ldr	r3, [pc, #140]	; (8003c58 <HAL_GPIO_Init+0x2b8>)
 8003bcc:	689a      	ldr	r2, [r3, #8]
 8003bce:	4922      	ldr	r1, [pc, #136]	; (8003c58 <HAL_GPIO_Init+0x2b8>)
 8003bd0:	69bb      	ldr	r3, [r7, #24]
 8003bd2:	4313      	orrs	r3, r2
 8003bd4:	608b      	str	r3, [r1, #8]
 8003bd6:	e006      	b.n	8003be6 <HAL_GPIO_Init+0x246>
        } 
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent); 
 8003bd8:	4b1f      	ldr	r3, [pc, #124]	; (8003c58 <HAL_GPIO_Init+0x2b8>)
 8003bda:	689a      	ldr	r2, [r3, #8]
 8003bdc:	69bb      	ldr	r3, [r7, #24]
 8003bde:	43db      	mvns	r3, r3
 8003be0:	491d      	ldr	r1, [pc, #116]	; (8003c58 <HAL_GPIO_Init+0x2b8>)
 8003be2:	4013      	ands	r3, r2
 8003be4:	608b      	str	r3, [r1, #8]
        }
        
        /* Enable or disable the falling trigger */
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003be6:	683b      	ldr	r3, [r7, #0]
 8003be8:	685b      	ldr	r3, [r3, #4]
 8003bea:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d006      	beq.n	8003c00 <HAL_GPIO_Init+0x260>
        {
          SET_BIT(EXTI->FTSR, iocurrent); 
 8003bf2:	4b19      	ldr	r3, [pc, #100]	; (8003c58 <HAL_GPIO_Init+0x2b8>)
 8003bf4:	68da      	ldr	r2, [r3, #12]
 8003bf6:	4918      	ldr	r1, [pc, #96]	; (8003c58 <HAL_GPIO_Init+0x2b8>)
 8003bf8:	69bb      	ldr	r3, [r7, #24]
 8003bfa:	4313      	orrs	r3, r2
 8003bfc:	60cb      	str	r3, [r1, #12]
 8003bfe:	e006      	b.n	8003c0e <HAL_GPIO_Init+0x26e>
        } 
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent); 
 8003c00:	4b15      	ldr	r3, [pc, #84]	; (8003c58 <HAL_GPIO_Init+0x2b8>)
 8003c02:	68da      	ldr	r2, [r3, #12]
 8003c04:	69bb      	ldr	r3, [r7, #24]
 8003c06:	43db      	mvns	r3, r3
 8003c08:	4913      	ldr	r1, [pc, #76]	; (8003c58 <HAL_GPIO_Init+0x2b8>)
 8003c0a:	4013      	ands	r3, r2
 8003c0c:	60cb      	str	r3, [r1, #12]
  for (position = 0U; position < GPIO_NUMBER; position++)
 8003c0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c10:	3301      	adds	r3, #1
 8003c12:	627b      	str	r3, [r7, #36]	; 0x24
 8003c14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c16:	2b0f      	cmp	r3, #15
 8003c18:	f67f aed4 	bls.w	80039c4 <HAL_GPIO_Init+0x24>
        }
      }
    }
  }
}
 8003c1c:	bf00      	nop
 8003c1e:	372c      	adds	r7, #44	; 0x2c
 8003c20:	46bd      	mov	sp, r7
 8003c22:	bc80      	pop	{r7}
 8003c24:	4770      	bx	lr
 8003c26:	bf00      	nop
 8003c28:	10210000 	.word	0x10210000
 8003c2c:	10110000 	.word	0x10110000
 8003c30:	10120000 	.word	0x10120000
 8003c34:	10310000 	.word	0x10310000
 8003c38:	10320000 	.word	0x10320000
 8003c3c:	10220000 	.word	0x10220000
 8003c40:	40021000 	.word	0x40021000
 8003c44:	40010000 	.word	0x40010000
 8003c48:	40010800 	.word	0x40010800
 8003c4c:	40010c00 	.word	0x40010c00
 8003c50:	40011000 	.word	0x40011000
 8003c54:	40011400 	.word	0x40011400
 8003c58:	40010400 	.word	0x40010400

08003c5c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003c5c:	b480      	push	{r7}
 8003c5e:	b085      	sub	sp, #20
 8003c60:	af00      	add	r7, sp, #0
 8003c62:	6078      	str	r0, [r7, #4]
 8003c64:	460b      	mov	r3, r1
 8003c66:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	689a      	ldr	r2, [r3, #8]
 8003c6c:	887b      	ldrh	r3, [r7, #2]
 8003c6e:	4013      	ands	r3, r2
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d002      	beq.n	8003c7a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003c74:	2301      	movs	r3, #1
 8003c76:	73fb      	strb	r3, [r7, #15]
 8003c78:	e001      	b.n	8003c7e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003c7a:	2300      	movs	r3, #0
 8003c7c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003c7e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c80:	4618      	mov	r0, r3
 8003c82:	3714      	adds	r7, #20
 8003c84:	46bd      	mov	sp, r7
 8003c86:	bc80      	pop	{r7}
 8003c88:	4770      	bx	lr

08003c8a <HAL_GPIO_WritePin>:
  *            @arg GPIO_BIT_RESET: to clear the port pin
  *            @arg GPIO_BIT_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003c8a:	b480      	push	{r7}
 8003c8c:	b083      	sub	sp, #12
 8003c8e:	af00      	add	r7, sp, #0
 8003c90:	6078      	str	r0, [r7, #4]
 8003c92:	460b      	mov	r3, r1
 8003c94:	807b      	strh	r3, [r7, #2]
 8003c96:	4613      	mov	r3, r2
 8003c98:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003c9a:	787b      	ldrb	r3, [r7, #1]
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d003      	beq.n	8003ca8 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003ca0:	887a      	ldrh	r2, [r7, #2]
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003ca6:	e003      	b.n	8003cb0 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003ca8:	887b      	ldrh	r3, [r7, #2]
 8003caa:	041a      	lsls	r2, r3, #16
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	611a      	str	r2, [r3, #16]
}
 8003cb0:	bf00      	nop
 8003cb2:	370c      	adds	r7, #12
 8003cb4:	46bd      	mov	sp, r7
 8003cb6:	bc80      	pop	{r7}
 8003cb8:	4770      	bx	lr
	...

08003cbc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003cbc:	b580      	push	{r7, lr}
 8003cbe:	b082      	sub	sp, #8
 8003cc0:	af00      	add	r7, sp, #0
 8003cc2:	4603      	mov	r3, r0
 8003cc4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8003cc6:	4b08      	ldr	r3, [pc, #32]	; (8003ce8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003cc8:	695a      	ldr	r2, [r3, #20]
 8003cca:	88fb      	ldrh	r3, [r7, #6]
 8003ccc:	4013      	ands	r3, r2
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d006      	beq.n	8003ce0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003cd2:	4a05      	ldr	r2, [pc, #20]	; (8003ce8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003cd4:	88fb      	ldrh	r3, [r7, #6]
 8003cd6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003cd8:	88fb      	ldrh	r3, [r7, #6]
 8003cda:	4618      	mov	r0, r3
 8003cdc:	f7fe f890 	bl	8001e00 <HAL_GPIO_EXTI_Callback>
  }
}
 8003ce0:	bf00      	nop
 8003ce2:	3708      	adds	r7, #8
 8003ce4:	46bd      	mov	sp, r7
 8003ce6:	bd80      	pop	{r7, pc}
 8003ce8:	40010400 	.word	0x40010400

08003cec <HAL_I2C_Init>:
  * @param  hi2c: pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003cec:	b580      	push	{r7, lr}
 8003cee:	b084      	sub	sp, #16
 8003cf0:	af00      	add	r7, sp, #0
 8003cf2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange = 0U;
 8003cf4:	2300      	movs	r3, #0
 8003cf6:	60fb      	str	r3, [r7, #12]
  uint32_t pclk1 = 0U;
 8003cf8:	2300      	movs	r3, #0
 8003cfa:	60bb      	str	r3, [r7, #8]

  /* Check the I2C handle allocation */
  if(hi2c == NULL)
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d101      	bne.n	8003d06 <HAL_I2C_Init+0x1a>
  {
    return HAL_ERROR;
 8003d02:	2301      	movs	r3, #1
 8003d04:	e0c8      	b.n	8003e98 <HAL_I2C_Init+0x1ac>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if(hi2c->State == HAL_I2C_STATE_RESET)
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d0c:	b2db      	uxtb	r3, r3
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d106      	bne.n	8003d20 <HAL_I2C_Init+0x34>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	2200      	movs	r2, #0
 8003d16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003d1a:	6878      	ldr	r0, [r7, #4]
 8003d1c:	f7fd f89a 	bl	8000e54 <HAL_I2C_MspInit>
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	2224      	movs	r2, #36	; 0x24
 8003d24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	681a      	ldr	r2, [r3, #0]
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	f022 0201 	bic.w	r2, r2, #1
 8003d36:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003d38:	f000 ff86 	bl	8004c48 <HAL_RCC_GetPCLK1Freq>
 8003d3c:	60b8      	str	r0, [r7, #8]

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003d3e:	68bb      	ldr	r3, [r7, #8]
 8003d40:	4a57      	ldr	r2, [pc, #348]	; (8003ea0 <HAL_I2C_Init+0x1b4>)
 8003d42:	fba2 2303 	umull	r2, r3, r2, r3
 8003d46:	0c9b      	lsrs	r3, r3, #18
 8003d48:	60fb      	str	r3, [r7, #12]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->CR2 = freqrange;
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	68fa      	ldr	r2, [r7, #12]
 8003d50:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	685b      	ldr	r3, [r3, #4]
 8003d56:	4a53      	ldr	r2, [pc, #332]	; (8003ea4 <HAL_I2C_Init+0x1b8>)
 8003d58:	4293      	cmp	r3, r2
 8003d5a:	d802      	bhi.n	8003d62 <HAL_I2C_Init+0x76>
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	3301      	adds	r3, #1
 8003d60:	e009      	b.n	8003d76 <HAL_I2C_Init+0x8a>
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003d68:	fb02 f303 	mul.w	r3, r2, r3
 8003d6c:	4a4e      	ldr	r2, [pc, #312]	; (8003ea8 <HAL_I2C_Init+0x1bc>)
 8003d6e:	fba2 2303 	umull	r2, r3, r2, r3
 8003d72:	099b      	lsrs	r3, r3, #6
 8003d74:	3301      	adds	r3, #1
 8003d76:	687a      	ldr	r2, [r7, #4]
 8003d78:	6812      	ldr	r2, [r2, #0]
 8003d7a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  hi2c->Instance->CCR = I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle);
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	685b      	ldr	r3, [r3, #4]
 8003d80:	4a48      	ldr	r2, [pc, #288]	; (8003ea4 <HAL_I2C_Init+0x1b8>)
 8003d82:	4293      	cmp	r3, r2
 8003d84:	d812      	bhi.n	8003dac <HAL_I2C_Init+0xc0>
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	685b      	ldr	r3, [r3, #4]
 8003d8a:	005b      	lsls	r3, r3, #1
 8003d8c:	68ba      	ldr	r2, [r7, #8]
 8003d8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d92:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003d96:	2b03      	cmp	r3, #3
 8003d98:	d906      	bls.n	8003da8 <HAL_I2C_Init+0xbc>
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	685b      	ldr	r3, [r3, #4]
 8003d9e:	005b      	lsls	r3, r3, #1
 8003da0:	68ba      	ldr	r2, [r7, #8]
 8003da2:	fbb2 f3f3 	udiv	r3, r2, r3
 8003da6:	e045      	b.n	8003e34 <HAL_I2C_Init+0x148>
 8003da8:	2304      	movs	r3, #4
 8003daa:	e043      	b.n	8003e34 <HAL_I2C_Init+0x148>
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	689b      	ldr	r3, [r3, #8]
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d10f      	bne.n	8003dd4 <HAL_I2C_Init+0xe8>
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	685a      	ldr	r2, [r3, #4]
 8003db8:	4613      	mov	r3, r2
 8003dba:	005b      	lsls	r3, r3, #1
 8003dbc:	4413      	add	r3, r2
 8003dbe:	68ba      	ldr	r2, [r7, #8]
 8003dc0:	fbb2 f3f3 	udiv	r3, r2, r3
 8003dc4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	bf0c      	ite	eq
 8003dcc:	2301      	moveq	r3, #1
 8003dce:	2300      	movne	r3, #0
 8003dd0:	b2db      	uxtb	r3, r3
 8003dd2:	e010      	b.n	8003df6 <HAL_I2C_Init+0x10a>
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	685a      	ldr	r2, [r3, #4]
 8003dd8:	4613      	mov	r3, r2
 8003dda:	009b      	lsls	r3, r3, #2
 8003ddc:	4413      	add	r3, r2
 8003dde:	009a      	lsls	r2, r3, #2
 8003de0:	4413      	add	r3, r2
 8003de2:	68ba      	ldr	r2, [r7, #8]
 8003de4:	fbb2 f3f3 	udiv	r3, r2, r3
 8003de8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	bf0c      	ite	eq
 8003df0:	2301      	moveq	r3, #1
 8003df2:	2300      	movne	r3, #0
 8003df4:	b2db      	uxtb	r3, r3
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d001      	beq.n	8003dfe <HAL_I2C_Init+0x112>
 8003dfa:	2301      	movs	r3, #1
 8003dfc:	e01a      	b.n	8003e34 <HAL_I2C_Init+0x148>
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	689b      	ldr	r3, [r3, #8]
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d10a      	bne.n	8003e1c <HAL_I2C_Init+0x130>
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	685a      	ldr	r2, [r3, #4]
 8003e0a:	4613      	mov	r3, r2
 8003e0c:	005b      	lsls	r3, r3, #1
 8003e0e:	4413      	add	r3, r2
 8003e10:	68ba      	ldr	r2, [r7, #8]
 8003e12:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e16:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003e1a:	e00b      	b.n	8003e34 <HAL_I2C_Init+0x148>
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	685a      	ldr	r2, [r3, #4]
 8003e20:	4613      	mov	r3, r2
 8003e22:	009b      	lsls	r3, r3, #2
 8003e24:	4413      	add	r3, r2
 8003e26:	009a      	lsls	r2, r3, #2
 8003e28:	4413      	add	r3, r2
 8003e2a:	68ba      	ldr	r2, [r7, #8]
 8003e2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e30:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003e34:	687a      	ldr	r2, [r7, #4]
 8003e36:	6812      	ldr	r2, [r2, #0]
 8003e38:	61d3      	str	r3, [r2, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	69d9      	ldr	r1, [r3, #28]
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	6a1a      	ldr	r2, [r3, #32]
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	430a      	orrs	r2, r1
 8003e48:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  hi2c->Instance->OAR1 = (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1);
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	6919      	ldr	r1, [r3, #16]
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	68da      	ldr	r2, [r3, #12]
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	430a      	orrs	r2, r1
 8003e58:	609a      	str	r2, [r3, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2);
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	6959      	ldr	r1, [r3, #20]
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	699a      	ldr	r2, [r3, #24]
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	430a      	orrs	r2, r1
 8003e68:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	681a      	ldr	r2, [r3, #0]
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	f042 0201 	orr.w	r2, r2, #1
 8003e78:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	2200      	movs	r2, #0
 8003e7e:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	2220      	movs	r2, #32
 8003e84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	2200      	movs	r2, #0
 8003e8c:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	2200      	movs	r2, #0
 8003e92:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003e96:	2300      	movs	r3, #0
}
 8003e98:	4618      	mov	r0, r3
 8003e9a:	3710      	adds	r7, #16
 8003e9c:	46bd      	mov	sp, r7
 8003e9e:	bd80      	pop	{r7, pc}
 8003ea0:	431bde83 	.word	0x431bde83
 8003ea4:	000186a0 	.word	0x000186a0
 8003ea8:	10624dd3 	.word	0x10624dd3

08003eac <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003eac:	b580      	push	{r7, lr}
 8003eae:	b088      	sub	sp, #32
 8003eb0:	af02      	add	r7, sp, #8
 8003eb2:	60f8      	str	r0, [r7, #12]
 8003eb4:	4608      	mov	r0, r1
 8003eb6:	4611      	mov	r1, r2
 8003eb8:	461a      	mov	r2, r3
 8003eba:	4603      	mov	r3, r0
 8003ebc:	817b      	strh	r3, [r7, #10]
 8003ebe:	460b      	mov	r3, r1
 8003ec0:	813b      	strh	r3, [r7, #8]
 8003ec2:	4613      	mov	r3, r2
 8003ec4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart = 0x00U;
 8003ec6:	2300      	movs	r3, #0
 8003ec8:	617b      	str	r3, [r7, #20]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003eca:	f7fe fde3 	bl	8002a94 <HAL_GetTick>
 8003ece:	6178      	str	r0, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if(hi2c->State == HAL_I2C_STATE_READY)
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ed6:	b2db      	uxtb	r3, r3
 8003ed8:	2b20      	cmp	r3, #32
 8003eda:	f040 80e7 	bne.w	80040ac <HAL_I2C_Mem_Write+0x200>
  {
    /* Wait until BUSY flag is reset */
    if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003ede:	697b      	ldr	r3, [r7, #20]
 8003ee0:	9300      	str	r3, [sp, #0]
 8003ee2:	2319      	movs	r3, #25
 8003ee4:	2201      	movs	r2, #1
 8003ee6:	4974      	ldr	r1, [pc, #464]	; (80040b8 <HAL_I2C_Mem_Write+0x20c>)
 8003ee8:	68f8      	ldr	r0, [r7, #12]
 8003eea:	f000 f97d 	bl	80041e8 <I2C_WaitOnFlagUntilTimeout>
 8003eee:	4603      	mov	r3, r0
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d001      	beq.n	8003ef8 <HAL_I2C_Mem_Write+0x4c>
    {
      return HAL_BUSY;
 8003ef4:	2302      	movs	r3, #2
 8003ef6:	e0da      	b.n	80040ae <HAL_I2C_Mem_Write+0x202>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003efe:	2b01      	cmp	r3, #1
 8003f00:	d101      	bne.n	8003f06 <HAL_I2C_Mem_Write+0x5a>
 8003f02:	2302      	movs	r3, #2
 8003f04:	e0d3      	b.n	80040ae <HAL_I2C_Mem_Write+0x202>
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	2201      	movs	r2, #1
 8003f0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Check if the I2C is already enabled */
    if((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	f003 0301 	and.w	r3, r3, #1
 8003f18:	2b01      	cmp	r3, #1
 8003f1a:	d007      	beq.n	8003f2c <HAL_I2C_Mem_Write+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	681a      	ldr	r2, [r3, #0]
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	f042 0201 	orr.w	r2, r2, #1
 8003f2a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	681a      	ldr	r2, [r3, #0]
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003f3a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	2221      	movs	r2, #33	; 0x21
 8003f40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	2240      	movs	r2, #64	; 0x40
 8003f48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	2200      	movs	r2, #0
 8003f50:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	6a3a      	ldr	r2, [r7, #32]
 8003f56:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003f5c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	4a56      	ldr	r2, [pc, #344]	; (80040bc <HAL_I2C_Mem_Write+0x210>)
 8003f62:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferSize    = hi2c->XferCount;
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f68:	b29a      	uxth	r2, r3
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	851a      	strh	r2, [r3, #40]	; 0x28
    
    /* Send Slave Address and Memory Address */
    if(I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003f6e:	88f8      	ldrh	r0, [r7, #6]
 8003f70:	893a      	ldrh	r2, [r7, #8]
 8003f72:	8979      	ldrh	r1, [r7, #10]
 8003f74:	697b      	ldr	r3, [r7, #20]
 8003f76:	9301      	str	r3, [sp, #4]
 8003f78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f7a:	9300      	str	r3, [sp, #0]
 8003f7c:	4603      	mov	r3, r0
 8003f7e:	68f8      	ldr	r0, [r7, #12]
 8003f80:	f000 f89e 	bl	80040c0 <I2C_RequestMemoryWrite>
 8003f84:	4603      	mov	r3, r0
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d05e      	beq.n	8004048 <HAL_I2C_Mem_Write+0x19c>
    {
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f8e:	2b04      	cmp	r3, #4
 8003f90:	d105      	bne.n	8003f9e <HAL_I2C_Mem_Write+0xf2>
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	2200      	movs	r2, #0
 8003f96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        return HAL_ERROR;
 8003f9a:	2301      	movs	r3, #1
 8003f9c:	e087      	b.n	80040ae <HAL_I2C_Mem_Write+0x202>
      }
      else
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	2200      	movs	r2, #0
 8003fa2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        return HAL_TIMEOUT;
 8003fa6:	2303      	movs	r3, #3
 8003fa8:	e081      	b.n	80040ae <HAL_I2C_Mem_Write+0x202>
    }

    while(hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003faa:	697a      	ldr	r2, [r7, #20]
 8003fac:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003fae:	68f8      	ldr	r0, [r7, #12]
 8003fb0:	f000 f9d9 	bl	8004366 <I2C_WaitOnTXEFlagUntilTimeout>
 8003fb4:	4603      	mov	r3, r0
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d00f      	beq.n	8003fda <HAL_I2C_Mem_Write+0x12e>
      {
        if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fbe:	2b04      	cmp	r3, #4
 8003fc0:	d109      	bne.n	8003fd6 <HAL_I2C_Mem_Write+0x12a>
        {
          /* Generate Stop */
          hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	681a      	ldr	r2, [r3, #0]
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003fd0:	601a      	str	r2, [r3, #0]
          return HAL_ERROR;
 8003fd2:	2301      	movs	r3, #1
 8003fd4:	e06b      	b.n	80040ae <HAL_I2C_Mem_Write+0x202>
        }
        else
        {
          return HAL_TIMEOUT;
 8003fd6:	2303      	movs	r3, #3
 8003fd8:	e069      	b.n	80040ae <HAL_I2C_Mem_Write+0x202>
        }
      }

      /* Write data to DR */
      hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fde:	1c59      	adds	r1, r3, #1
 8003fe0:	68fa      	ldr	r2, [r7, #12]
 8003fe2:	6251      	str	r1, [r2, #36]	; 0x24
 8003fe4:	781a      	ldrb	r2, [r3, #0]
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	611a      	str	r2, [r3, #16]
      hi2c->XferSize--;
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ff0:	3b01      	subs	r3, #1
 8003ff2:	b29a      	uxth	r2, r3
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ffc:	b29b      	uxth	r3, r3
 8003ffe:	3b01      	subs	r3, #1
 8004000:	b29a      	uxth	r2, r3
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	855a      	strh	r2, [r3, #42]	; 0x2a

      if((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	695b      	ldr	r3, [r3, #20]
 800400c:	f003 0304 	and.w	r3, r3, #4
 8004010:	2b04      	cmp	r3, #4
 8004012:	d119      	bne.n	8004048 <HAL_I2C_Mem_Write+0x19c>
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004018:	2b00      	cmp	r3, #0
 800401a:	d015      	beq.n	8004048 <HAL_I2C_Mem_Write+0x19c>
      {
        /* Write data to DR */
        hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004020:	1c59      	adds	r1, r3, #1
 8004022:	68fa      	ldr	r2, [r7, #12]
 8004024:	6251      	str	r1, [r2, #36]	; 0x24
 8004026:	781a      	ldrb	r2, [r3, #0]
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	611a      	str	r2, [r3, #16]
        hi2c->XferSize--;
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004032:	3b01      	subs	r3, #1
 8004034:	b29a      	uxth	r2, r3
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800403e:	b29b      	uxth	r3, r3
 8004040:	3b01      	subs	r3, #1
 8004042:	b29a      	uxth	r2, r3
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	855a      	strh	r2, [r3, #42]	; 0x2a
    while(hi2c->XferSize > 0U)
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800404c:	2b00      	cmp	r3, #0
 800404e:	d1ac      	bne.n	8003faa <HAL_I2C_Mem_Write+0xfe>
      }
    }
    
    /* Wait until BTF flag is set */
    if(I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004050:	697a      	ldr	r2, [r7, #20]
 8004052:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004054:	68f8      	ldr	r0, [r7, #12]
 8004056:	f000 f9c3 	bl	80043e0 <I2C_WaitOnBTFFlagUntilTimeout>
 800405a:	4603      	mov	r3, r0
 800405c:	2b00      	cmp	r3, #0
 800405e:	d00f      	beq.n	8004080 <HAL_I2C_Mem_Write+0x1d4>
    {
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004064:	2b04      	cmp	r3, #4
 8004066:	d109      	bne.n	800407c <HAL_I2C_Mem_Write+0x1d0>
      {
        /* Generate Stop */
        hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	681a      	ldr	r2, [r3, #0]
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004076:	601a      	str	r2, [r3, #0]
        return HAL_ERROR;
 8004078:	2301      	movs	r3, #1
 800407a:	e018      	b.n	80040ae <HAL_I2C_Mem_Write+0x202>
      }
      else
      {
        return HAL_TIMEOUT;
 800407c:	2303      	movs	r3, #3
 800407e:	e016      	b.n	80040ae <HAL_I2C_Mem_Write+0x202>
      }
    }

    /* Generate Stop */
    hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	681a      	ldr	r2, [r3, #0]
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800408e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	2220      	movs	r2, #32
 8004094:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	2200      	movs	r2, #0
 800409c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    
    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	2200      	movs	r2, #0
 80040a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80040a8:	2300      	movs	r3, #0
 80040aa:	e000      	b.n	80040ae <HAL_I2C_Mem_Write+0x202>
  }
  else
  {
    return HAL_BUSY;
 80040ac:	2302      	movs	r3, #2
  }
}
 80040ae:	4618      	mov	r0, r3
 80040b0:	3718      	adds	r7, #24
 80040b2:	46bd      	mov	sp, r7
 80040b4:	bd80      	pop	{r7, pc}
 80040b6:	bf00      	nop
 80040b8:	00100002 	.word	0x00100002
 80040bc:	ffff0000 	.word	0xffff0000

080040c0 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80040c0:	b580      	push	{r7, lr}
 80040c2:	b088      	sub	sp, #32
 80040c4:	af02      	add	r7, sp, #8
 80040c6:	60f8      	str	r0, [r7, #12]
 80040c8:	4608      	mov	r0, r1
 80040ca:	4611      	mov	r1, r2
 80040cc:	461a      	mov	r2, r3
 80040ce:	4603      	mov	r3, r0
 80040d0:	817b      	strh	r3, [r7, #10]
 80040d2:	460b      	mov	r3, r1
 80040d4:	813b      	strh	r3, [r7, #8]
 80040d6:	4613      	mov	r3, r2
 80040d8:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  hi2c->Instance->CR1 |= I2C_CR1_START;
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	681a      	ldr	r2, [r3, #0]
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80040e8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80040ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040ec:	9300      	str	r3, [sp, #0]
 80040ee:	6a3b      	ldr	r3, [r7, #32]
 80040f0:	2200      	movs	r2, #0
 80040f2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80040f6:	68f8      	ldr	r0, [r7, #12]
 80040f8:	f000 f876 	bl	80041e8 <I2C_WaitOnFlagUntilTimeout>
 80040fc:	4603      	mov	r3, r0
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d001      	beq.n	8004106 <I2C_RequestMemoryWrite+0x46>
  {
    return HAL_TIMEOUT;
 8004102:	2303      	movs	r3, #3
 8004104:	e069      	b.n	80041da <I2C_RequestMemoryWrite+0x11a>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004106:	897b      	ldrh	r3, [r7, #10]
 8004108:	b2db      	uxtb	r3, r3
 800410a:	461a      	mov	r2, r3
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004114:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004116:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004118:	6a3a      	ldr	r2, [r7, #32]
 800411a:	4932      	ldr	r1, [pc, #200]	; (80041e4 <I2C_RequestMemoryWrite+0x124>)
 800411c:	68f8      	ldr	r0, [r7, #12]
 800411e:	f000 f8b4 	bl	800428a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004122:	4603      	mov	r3, r0
 8004124:	2b00      	cmp	r3, #0
 8004126:	d007      	beq.n	8004138 <I2C_RequestMemoryWrite+0x78>
  {
    if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800412c:	2b04      	cmp	r3, #4
 800412e:	d101      	bne.n	8004134 <I2C_RequestMemoryWrite+0x74>
    {
      return HAL_ERROR;
 8004130:	2301      	movs	r3, #1
 8004132:	e052      	b.n	80041da <I2C_RequestMemoryWrite+0x11a>
    }
    else
    {
      return HAL_TIMEOUT;
 8004134:	2303      	movs	r3, #3
 8004136:	e050      	b.n	80041da <I2C_RequestMemoryWrite+0x11a>
    }
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004138:	2300      	movs	r3, #0
 800413a:	617b      	str	r3, [r7, #20]
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	695b      	ldr	r3, [r3, #20]
 8004142:	617b      	str	r3, [r7, #20]
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	699b      	ldr	r3, [r3, #24]
 800414a:	617b      	str	r3, [r7, #20]
 800414c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800414e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004150:	6a39      	ldr	r1, [r7, #32]
 8004152:	68f8      	ldr	r0, [r7, #12]
 8004154:	f000 f907 	bl	8004366 <I2C_WaitOnTXEFlagUntilTimeout>
 8004158:	4603      	mov	r3, r0
 800415a:	2b00      	cmp	r3, #0
 800415c:	d00f      	beq.n	800417e <I2C_RequestMemoryWrite+0xbe>
  {
    if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004162:	2b04      	cmp	r3, #4
 8004164:	d109      	bne.n	800417a <I2C_RequestMemoryWrite+0xba>
    {
      /* Generate Stop */
      hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	681a      	ldr	r2, [r3, #0]
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004174:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
 8004176:	2301      	movs	r3, #1
 8004178:	e02f      	b.n	80041da <I2C_RequestMemoryWrite+0x11a>
    }
    else
    {
      return HAL_TIMEOUT;
 800417a:	2303      	movs	r3, #3
 800417c:	e02d      	b.n	80041da <I2C_RequestMemoryWrite+0x11a>
    }
  }

  /* If Memory address size is 8Bit */
  if(MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800417e:	88fb      	ldrh	r3, [r7, #6]
 8004180:	2b01      	cmp	r3, #1
 8004182:	d105      	bne.n	8004190 <I2C_RequestMemoryWrite+0xd0>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004184:	893b      	ldrh	r3, [r7, #8]
 8004186:	b2da      	uxtb	r2, r3
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	611a      	str	r2, [r3, #16]
 800418e:	e023      	b.n	80041d8 <I2C_RequestMemoryWrite+0x118>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004190:	893b      	ldrh	r3, [r7, #8]
 8004192:	0a1b      	lsrs	r3, r3, #8
 8004194:	b29b      	uxth	r3, r3
 8004196:	b2da      	uxtb	r2, r3
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800419e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80041a0:	6a39      	ldr	r1, [r7, #32]
 80041a2:	68f8      	ldr	r0, [r7, #12]
 80041a4:	f000 f8df 	bl	8004366 <I2C_WaitOnTXEFlagUntilTimeout>
 80041a8:	4603      	mov	r3, r0
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d00f      	beq.n	80041ce <I2C_RequestMemoryWrite+0x10e>
    {
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041b2:	2b04      	cmp	r3, #4
 80041b4:	d109      	bne.n	80041ca <I2C_RequestMemoryWrite+0x10a>
      {
        /* Generate Stop */
        hi2c->Instance->CR1 |= I2C_CR1_STOP;
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	681a      	ldr	r2, [r3, #0]
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80041c4:	601a      	str	r2, [r3, #0]
        return HAL_ERROR;
 80041c6:	2301      	movs	r3, #1
 80041c8:	e007      	b.n	80041da <I2C_RequestMemoryWrite+0x11a>
      }
      else
      {
        return HAL_TIMEOUT;
 80041ca:	2303      	movs	r3, #3
 80041cc:	e005      	b.n	80041da <I2C_RequestMemoryWrite+0x11a>
      }
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80041ce:	893b      	ldrh	r3, [r7, #8]
 80041d0:	b2da      	uxtb	r2, r3
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80041d8:	2300      	movs	r3, #0
}
 80041da:	4618      	mov	r0, r3
 80041dc:	3718      	adds	r7, #24
 80041de:	46bd      	mov	sp, r7
 80041e0:	bd80      	pop	{r7, pc}
 80041e2:	bf00      	nop
 80041e4:	00010002 	.word	0x00010002

080041e8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80041e8:	b580      	push	{r7, lr}
 80041ea:	b084      	sub	sp, #16
 80041ec:	af00      	add	r7, sp, #0
 80041ee:	60f8      	str	r0, [r7, #12]
 80041f0:	60b9      	str	r1, [r7, #8]
 80041f2:	603b      	str	r3, [r7, #0]
 80041f4:	4613      	mov	r3, r2
 80041f6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while((__HAL_I2C_GET_FLAG(hi2c, Flag) ? SET : RESET) == Status) 
 80041f8:	e01f      	b.n	800423a <I2C_WaitOnFlagUntilTimeout+0x52>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 80041fa:	683b      	ldr	r3, [r7, #0]
 80041fc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004200:	d01b      	beq.n	800423a <I2C_WaitOnFlagUntilTimeout+0x52>
    {
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 8004202:	683b      	ldr	r3, [r7, #0]
 8004204:	2b00      	cmp	r3, #0
 8004206:	d007      	beq.n	8004218 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004208:	f7fe fc44 	bl	8002a94 <HAL_GetTick>
 800420c:	4602      	mov	r2, r0
 800420e:	69bb      	ldr	r3, [r7, #24]
 8004210:	1ad3      	subs	r3, r2, r3
 8004212:	683a      	ldr	r2, [r7, #0]
 8004214:	429a      	cmp	r2, r3
 8004216:	d210      	bcs.n	800423a <I2C_WaitOnFlagUntilTimeout+0x52>
      {
        hi2c->PreviousState = I2C_STATE_NONE;
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	2200      	movs	r2, #0
 800421c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State= HAL_I2C_STATE_READY;
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	2220      	movs	r2, #32
 8004222:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	2200      	movs	r2, #0
 800422a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	2200      	movs	r2, #0
 8004232:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_TIMEOUT;
 8004236:	2303      	movs	r3, #3
 8004238:	e023      	b.n	8004282 <I2C_WaitOnFlagUntilTimeout+0x9a>
  while((__HAL_I2C_GET_FLAG(hi2c, Flag) ? SET : RESET) == Status) 
 800423a:	68bb      	ldr	r3, [r7, #8]
 800423c:	0c1b      	lsrs	r3, r3, #16
 800423e:	b2db      	uxtb	r3, r3
 8004240:	2b01      	cmp	r3, #1
 8004242:	d10d      	bne.n	8004260 <I2C_WaitOnFlagUntilTimeout+0x78>
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	695b      	ldr	r3, [r3, #20]
 800424a:	43da      	mvns	r2, r3
 800424c:	68bb      	ldr	r3, [r7, #8]
 800424e:	4013      	ands	r3, r2
 8004250:	b29b      	uxth	r3, r3
 8004252:	2b00      	cmp	r3, #0
 8004254:	bf0c      	ite	eq
 8004256:	2301      	moveq	r3, #1
 8004258:	2300      	movne	r3, #0
 800425a:	b2db      	uxtb	r3, r3
 800425c:	461a      	mov	r2, r3
 800425e:	e00c      	b.n	800427a <I2C_WaitOnFlagUntilTimeout+0x92>
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	699b      	ldr	r3, [r3, #24]
 8004266:	43da      	mvns	r2, r3
 8004268:	68bb      	ldr	r3, [r7, #8]
 800426a:	4013      	ands	r3, r2
 800426c:	b29b      	uxth	r3, r3
 800426e:	2b00      	cmp	r3, #0
 8004270:	bf0c      	ite	eq
 8004272:	2301      	moveq	r3, #1
 8004274:	2300      	movne	r3, #0
 8004276:	b2db      	uxtb	r3, r3
 8004278:	461a      	mov	r2, r3
 800427a:	79fb      	ldrb	r3, [r7, #7]
 800427c:	429a      	cmp	r2, r3
 800427e:	d0bc      	beq.n	80041fa <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  
  return HAL_OK;
 8004280:	2300      	movs	r3, #0
}
 8004282:	4618      	mov	r0, r3
 8004284:	3710      	adds	r7, #16
 8004286:	46bd      	mov	sp, r7
 8004288:	bd80      	pop	{r7, pc}

0800428a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800428a:	b580      	push	{r7, lr}
 800428c:	b084      	sub	sp, #16
 800428e:	af00      	add	r7, sp, #0
 8004290:	60f8      	str	r0, [r7, #12]
 8004292:	60b9      	str	r1, [r7, #8]
 8004294:	607a      	str	r2, [r7, #4]
 8004296:	603b      	str	r3, [r7, #0]
  while(__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004298:	e040      	b.n	800431c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x92>
  {
    if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	695b      	ldr	r3, [r3, #20]
 80042a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80042a4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80042a8:	d11c      	bne.n	80042e4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x5a>
    {
      /* Generate Stop */
      hi2c->Instance->CR1 |= I2C_CR1_STOP;
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	681a      	ldr	r2, [r3, #0]
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80042b8:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80042c2:	615a      	str	r2, [r3, #20]

      hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	2204      	movs	r2, #4
 80042c8:	641a      	str	r2, [r3, #64]	; 0x40
      hi2c->PreviousState = I2C_STATE_NONE;
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	2200      	movs	r2, #0
 80042ce:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State= HAL_I2C_STATE_READY;
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	2220      	movs	r2, #32
 80042d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	2200      	movs	r2, #0
 80042dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80042e0:	2301      	movs	r3, #1
 80042e2:	e03c      	b.n	800435e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd4>
    }

    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80042ea:	d017      	beq.n	800431c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x92>
    {
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d007      	beq.n	8004302 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x78>
 80042f2:	f7fe fbcf 	bl	8002a94 <HAL_GetTick>
 80042f6:	4602      	mov	r2, r0
 80042f8:	683b      	ldr	r3, [r7, #0]
 80042fa:	1ad3      	subs	r3, r2, r3
 80042fc:	687a      	ldr	r2, [r7, #4]
 80042fe:	429a      	cmp	r2, r3
 8004300:	d20c      	bcs.n	800431c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x92>
      {
        hi2c->PreviousState = I2C_STATE_NONE;
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	2200      	movs	r2, #0
 8004306:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State= HAL_I2C_STATE_READY;
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	2220      	movs	r2, #32
 800430c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	2200      	movs	r2, #0
 8004314:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8004318:	2303      	movs	r3, #3
 800431a:	e020      	b.n	800435e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd4>
  while(__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800431c:	68bb      	ldr	r3, [r7, #8]
 800431e:	0c1b      	lsrs	r3, r3, #16
 8004320:	b2db      	uxtb	r3, r3
 8004322:	2b01      	cmp	r3, #1
 8004324:	d10c      	bne.n	8004340 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb6>
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	695b      	ldr	r3, [r3, #20]
 800432c:	43da      	mvns	r2, r3
 800432e:	68bb      	ldr	r3, [r7, #8]
 8004330:	4013      	ands	r3, r2
 8004332:	b29b      	uxth	r3, r3
 8004334:	2b00      	cmp	r3, #0
 8004336:	bf14      	ite	ne
 8004338:	2301      	movne	r3, #1
 800433a:	2300      	moveq	r3, #0
 800433c:	b2db      	uxtb	r3, r3
 800433e:	e00b      	b.n	8004358 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xce>
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	699b      	ldr	r3, [r3, #24]
 8004346:	43da      	mvns	r2, r3
 8004348:	68bb      	ldr	r3, [r7, #8]
 800434a:	4013      	ands	r3, r2
 800434c:	b29b      	uxth	r3, r3
 800434e:	2b00      	cmp	r3, #0
 8004350:	bf14      	ite	ne
 8004352:	2301      	movne	r3, #1
 8004354:	2300      	moveq	r3, #0
 8004356:	b2db      	uxtb	r3, r3
 8004358:	2b00      	cmp	r3, #0
 800435a:	d19e      	bne.n	800429a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800435c:	2300      	movs	r3, #0
}
 800435e:	4618      	mov	r0, r3
 8004360:	3710      	adds	r7, #16
 8004362:	46bd      	mov	sp, r7
 8004364:	bd80      	pop	{r7, pc}

08004366 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{    
 8004366:	b580      	push	{r7, lr}
 8004368:	b084      	sub	sp, #16
 800436a:	af00      	add	r7, sp, #0
 800436c:	60f8      	str	r0, [r7, #12]
 800436e:	60b9      	str	r1, [r7, #8]
 8004370:	607a      	str	r2, [r7, #4]
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004372:	e029      	b.n	80043c8 <I2C_WaitOnTXEFlagUntilTimeout+0x62>
  {
    /* Check if a NACK is detected */
    if(I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004374:	68f8      	ldr	r0, [r7, #12]
 8004376:	f000 f870 	bl	800445a <I2C_IsAcknowledgeFailed>
 800437a:	4603      	mov	r3, r0
 800437c:	2b00      	cmp	r3, #0
 800437e:	d001      	beq.n	8004384 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004380:	2301      	movs	r3, #1
 8004382:	e029      	b.n	80043d8 <I2C_WaitOnTXEFlagUntilTimeout+0x72>
    }
		
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 8004384:	68bb      	ldr	r3, [r7, #8]
 8004386:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800438a:	d01d      	beq.n	80043c8 <I2C_WaitOnTXEFlagUntilTimeout+0x62>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 800438c:	68bb      	ldr	r3, [r7, #8]
 800438e:	2b00      	cmp	r3, #0
 8004390:	d007      	beq.n	80043a2 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004392:	f7fe fb7f 	bl	8002a94 <HAL_GetTick>
 8004396:	4602      	mov	r2, r0
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	1ad3      	subs	r3, r2, r3
 800439c:	68ba      	ldr	r2, [r7, #8]
 800439e:	429a      	cmp	r2, r3
 80043a0:	d212      	bcs.n	80043c8 <I2C_WaitOnTXEFlagUntilTimeout+0x62>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043a6:	f043 0220 	orr.w	r2, r3, #32
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	641a      	str	r2, [r3, #64]	; 0x40
        hi2c->PreviousState = I2C_STATE_NONE;
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	2200      	movs	r2, #0
 80043b2:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State= HAL_I2C_STATE_READY;
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	2220      	movs	r2, #32
 80043b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	2200      	movs	r2, #0
 80043c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80043c4:	2303      	movs	r3, #3
 80043c6:	e007      	b.n	80043d8 <I2C_WaitOnTXEFlagUntilTimeout+0x72>
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	695b      	ldr	r3, [r3, #20]
 80043ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80043d2:	2b80      	cmp	r3, #128	; 0x80
 80043d4:	d1ce      	bne.n	8004374 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;      
 80043d6:	2300      	movs	r3, #0
}
 80043d8:	4618      	mov	r0, r3
 80043da:	3710      	adds	r7, #16
 80043dc:	46bd      	mov	sp, r7
 80043de:	bd80      	pop	{r7, pc}

080043e0 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{  
 80043e0:	b580      	push	{r7, lr}
 80043e2:	b084      	sub	sp, #16
 80043e4:	af00      	add	r7, sp, #0
 80043e6:	60f8      	str	r0, [r7, #12]
 80043e8:	60b9      	str	r1, [r7, #8]
 80043ea:	607a      	str	r2, [r7, #4]
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80043ec:	e029      	b.n	8004442 <I2C_WaitOnBTFFlagUntilTimeout+0x62>
  {
    /* Check if a NACK is detected */
    if(I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80043ee:	68f8      	ldr	r0, [r7, #12]
 80043f0:	f000 f833 	bl	800445a <I2C_IsAcknowledgeFailed>
 80043f4:	4603      	mov	r3, r0
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d001      	beq.n	80043fe <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80043fa:	2301      	movs	r3, #1
 80043fc:	e029      	b.n	8004452 <I2C_WaitOnBTFFlagUntilTimeout+0x72>
    }

    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 80043fe:	68bb      	ldr	r3, [r7, #8]
 8004400:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004404:	d01d      	beq.n	8004442 <I2C_WaitOnBTFFlagUntilTimeout+0x62>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8004406:	68bb      	ldr	r3, [r7, #8]
 8004408:	2b00      	cmp	r3, #0
 800440a:	d007      	beq.n	800441c <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800440c:	f7fe fb42 	bl	8002a94 <HAL_GetTick>
 8004410:	4602      	mov	r2, r0
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	1ad3      	subs	r3, r2, r3
 8004416:	68ba      	ldr	r2, [r7, #8]
 8004418:	429a      	cmp	r2, r3
 800441a:	d212      	bcs.n	8004442 <I2C_WaitOnBTFFlagUntilTimeout+0x62>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004420:	f043 0220 	orr.w	r2, r3, #32
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	641a      	str	r2, [r3, #64]	; 0x40
        hi2c->PreviousState = I2C_STATE_NONE;
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	2200      	movs	r2, #0
 800442c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State= HAL_I2C_STATE_READY;
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	2220      	movs	r2, #32
 8004432:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	2200      	movs	r2, #0
 800443a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800443e:	2303      	movs	r3, #3
 8004440:	e007      	b.n	8004452 <I2C_WaitOnBTFFlagUntilTimeout+0x72>
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	695b      	ldr	r3, [r3, #20]
 8004448:	f003 0304 	and.w	r3, r3, #4
 800444c:	2b04      	cmp	r3, #4
 800444e:	d1ce      	bne.n	80043ee <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004450:	2300      	movs	r3, #0
}
 8004452:	4618      	mov	r0, r3
 8004454:	3710      	adds	r7, #16
 8004456:	46bd      	mov	sp, r7
 8004458:	bd80      	pop	{r7, pc}

0800445a <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800445a:	b480      	push	{r7}
 800445c:	b083      	sub	sp, #12
 800445e:	af00      	add	r7, sp, #0
 8004460:	6078      	str	r0, [r7, #4]
  if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	695b      	ldr	r3, [r3, #20]
 8004468:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800446c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004470:	d114      	bne.n	800449c <I2C_IsAcknowledgeFailed+0x42>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800447a:	615a      	str	r2, [r3, #20]

    hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	2204      	movs	r2, #4
 8004480:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->PreviousState = I2C_STATE_NONE;
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	2200      	movs	r2, #0
 8004486:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State= HAL_I2C_STATE_READY;
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	2220      	movs	r2, #32
 800448c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	2200      	movs	r2, #0
 8004494:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004498:	2301      	movs	r3, #1
 800449a:	e000      	b.n	800449e <I2C_IsAcknowledgeFailed+0x44>
  }
  return HAL_OK;
 800449c:	2300      	movs	r3, #0
}
 800449e:	4618      	mov	r0, r3
 80044a0:	370c      	adds	r7, #12
 80044a2:	46bd      	mov	sp, r7
 80044a4:	bc80      	pop	{r7}
 80044a6:	4770      	bx	lr

080044a8 <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 128 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80044a8:	b480      	push	{r7}
 80044aa:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 80044ac:	4b03      	ldr	r3, [pc, #12]	; (80044bc <HAL_PWR_EnableBkUpAccess+0x14>)
 80044ae:	2201      	movs	r2, #1
 80044b0:	601a      	str	r2, [r3, #0]
}
 80044b2:	bf00      	nop
 80044b4:	46bd      	mov	sp, r7
 80044b6:	bc80      	pop	{r7}
 80044b8:	4770      	bx	lr
 80044ba:	bf00      	nop
 80044bc:	420e0020 	.word	0x420e0020

080044c0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80044c0:	b580      	push	{r7, lr}
 80044c2:	b086      	sub	sp, #24
 80044c4:	af00      	add	r7, sp, #0
 80044c6:	6078      	str	r0, [r7, #4]
   uint32_t tickstart = 0U;
 80044c8:	2300      	movs	r3, #0
 80044ca:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  
  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	f003 0301 	and.w	r3, r3, #1
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	f000 8087 	beq.w	80045e8 <HAL_RCC_OscConfig+0x128>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
        
    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80044da:	4b92      	ldr	r3, [pc, #584]	; (8004724 <HAL_RCC_OscConfig+0x264>)
 80044dc:	685b      	ldr	r3, [r3, #4]
 80044de:	f003 030c 	and.w	r3, r3, #12
 80044e2:	2b04      	cmp	r3, #4
 80044e4:	d00c      	beq.n	8004500 <HAL_RCC_OscConfig+0x40>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80044e6:	4b8f      	ldr	r3, [pc, #572]	; (8004724 <HAL_RCC_OscConfig+0x264>)
 80044e8:	685b      	ldr	r3, [r3, #4]
 80044ea:	f003 030c 	and.w	r3, r3, #12
 80044ee:	2b08      	cmp	r3, #8
 80044f0:	d112      	bne.n	8004518 <HAL_RCC_OscConfig+0x58>
 80044f2:	4b8c      	ldr	r3, [pc, #560]	; (8004724 <HAL_RCC_OscConfig+0x264>)
 80044f4:	685b      	ldr	r3, [r3, #4]
 80044f6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80044fa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80044fe:	d10b      	bne.n	8004518 <HAL_RCC_OscConfig+0x58>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004500:	4b88      	ldr	r3, [pc, #544]	; (8004724 <HAL_RCC_OscConfig+0x264>)
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004508:	2b00      	cmp	r3, #0
 800450a:	d06c      	beq.n	80045e6 <HAL_RCC_OscConfig+0x126>
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	685b      	ldr	r3, [r3, #4]
 8004510:	2b00      	cmp	r3, #0
 8004512:	d168      	bne.n	80045e6 <HAL_RCC_OscConfig+0x126>
      {
        return HAL_ERROR;
 8004514:	2301      	movs	r3, #1
 8004516:	e22d      	b.n	8004974 <HAL_RCC_OscConfig+0x4b4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	685b      	ldr	r3, [r3, #4]
 800451c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004520:	d106      	bne.n	8004530 <HAL_RCC_OscConfig+0x70>
 8004522:	4b80      	ldr	r3, [pc, #512]	; (8004724 <HAL_RCC_OscConfig+0x264>)
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	4a7f      	ldr	r2, [pc, #508]	; (8004724 <HAL_RCC_OscConfig+0x264>)
 8004528:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800452c:	6013      	str	r3, [r2, #0]
 800452e:	e02e      	b.n	800458e <HAL_RCC_OscConfig+0xce>
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	685b      	ldr	r3, [r3, #4]
 8004534:	2b00      	cmp	r3, #0
 8004536:	d10c      	bne.n	8004552 <HAL_RCC_OscConfig+0x92>
 8004538:	4b7a      	ldr	r3, [pc, #488]	; (8004724 <HAL_RCC_OscConfig+0x264>)
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	4a79      	ldr	r2, [pc, #484]	; (8004724 <HAL_RCC_OscConfig+0x264>)
 800453e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004542:	6013      	str	r3, [r2, #0]
 8004544:	4b77      	ldr	r3, [pc, #476]	; (8004724 <HAL_RCC_OscConfig+0x264>)
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	4a76      	ldr	r2, [pc, #472]	; (8004724 <HAL_RCC_OscConfig+0x264>)
 800454a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800454e:	6013      	str	r3, [r2, #0]
 8004550:	e01d      	b.n	800458e <HAL_RCC_OscConfig+0xce>
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	685b      	ldr	r3, [r3, #4]
 8004556:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800455a:	d10c      	bne.n	8004576 <HAL_RCC_OscConfig+0xb6>
 800455c:	4b71      	ldr	r3, [pc, #452]	; (8004724 <HAL_RCC_OscConfig+0x264>)
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	4a70      	ldr	r2, [pc, #448]	; (8004724 <HAL_RCC_OscConfig+0x264>)
 8004562:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004566:	6013      	str	r3, [r2, #0]
 8004568:	4b6e      	ldr	r3, [pc, #440]	; (8004724 <HAL_RCC_OscConfig+0x264>)
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	4a6d      	ldr	r2, [pc, #436]	; (8004724 <HAL_RCC_OscConfig+0x264>)
 800456e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004572:	6013      	str	r3, [r2, #0]
 8004574:	e00b      	b.n	800458e <HAL_RCC_OscConfig+0xce>
 8004576:	4b6b      	ldr	r3, [pc, #428]	; (8004724 <HAL_RCC_OscConfig+0x264>)
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	4a6a      	ldr	r2, [pc, #424]	; (8004724 <HAL_RCC_OscConfig+0x264>)
 800457c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004580:	6013      	str	r3, [r2, #0]
 8004582:	4b68      	ldr	r3, [pc, #416]	; (8004724 <HAL_RCC_OscConfig+0x264>)
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	4a67      	ldr	r2, [pc, #412]	; (8004724 <HAL_RCC_OscConfig+0x264>)
 8004588:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800458c:	6013      	str	r3, [r2, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	685b      	ldr	r3, [r3, #4]
 8004592:	2b00      	cmp	r3, #0
 8004594:	d013      	beq.n	80045be <HAL_RCC_OscConfig+0xfe>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004596:	f7fe fa7d 	bl	8002a94 <HAL_GetTick>
 800459a:	6138      	str	r0, [r7, #16]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800459c:	e008      	b.n	80045b0 <HAL_RCC_OscConfig+0xf0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800459e:	f7fe fa79 	bl	8002a94 <HAL_GetTick>
 80045a2:	4602      	mov	r2, r0
 80045a4:	693b      	ldr	r3, [r7, #16]
 80045a6:	1ad3      	subs	r3, r2, r3
 80045a8:	2b64      	cmp	r3, #100	; 0x64
 80045aa:	d901      	bls.n	80045b0 <HAL_RCC_OscConfig+0xf0>
          {
            return HAL_TIMEOUT;
 80045ac:	2303      	movs	r3, #3
 80045ae:	e1e1      	b.n	8004974 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80045b0:	4b5c      	ldr	r3, [pc, #368]	; (8004724 <HAL_RCC_OscConfig+0x264>)
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d0f0      	beq.n	800459e <HAL_RCC_OscConfig+0xde>
 80045bc:	e014      	b.n	80045e8 <HAL_RCC_OscConfig+0x128>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80045be:	f7fe fa69 	bl	8002a94 <HAL_GetTick>
 80045c2:	6138      	str	r0, [r7, #16]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80045c4:	e008      	b.n	80045d8 <HAL_RCC_OscConfig+0x118>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80045c6:	f7fe fa65 	bl	8002a94 <HAL_GetTick>
 80045ca:	4602      	mov	r2, r0
 80045cc:	693b      	ldr	r3, [r7, #16]
 80045ce:	1ad3      	subs	r3, r2, r3
 80045d0:	2b64      	cmp	r3, #100	; 0x64
 80045d2:	d901      	bls.n	80045d8 <HAL_RCC_OscConfig+0x118>
          {
            return HAL_TIMEOUT;
 80045d4:	2303      	movs	r3, #3
 80045d6:	e1cd      	b.n	8004974 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80045d8:	4b52      	ldr	r3, [pc, #328]	; (8004724 <HAL_RCC_OscConfig+0x264>)
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d1f0      	bne.n	80045c6 <HAL_RCC_OscConfig+0x106>
 80045e4:	e000      	b.n	80045e8 <HAL_RCC_OscConfig+0x128>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80045e6:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	f003 0302 	and.w	r3, r3, #2
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d063      	beq.n	80046bc <HAL_RCC_OscConfig+0x1fc>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80045f4:	4b4b      	ldr	r3, [pc, #300]	; (8004724 <HAL_RCC_OscConfig+0x264>)
 80045f6:	685b      	ldr	r3, [r3, #4]
 80045f8:	f003 030c 	and.w	r3, r3, #12
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d00b      	beq.n	8004618 <HAL_RCC_OscConfig+0x158>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8004600:	4b48      	ldr	r3, [pc, #288]	; (8004724 <HAL_RCC_OscConfig+0x264>)
 8004602:	685b      	ldr	r3, [r3, #4]
 8004604:	f003 030c 	and.w	r3, r3, #12
 8004608:	2b08      	cmp	r3, #8
 800460a:	d11c      	bne.n	8004646 <HAL_RCC_OscConfig+0x186>
 800460c:	4b45      	ldr	r3, [pc, #276]	; (8004724 <HAL_RCC_OscConfig+0x264>)
 800460e:	685b      	ldr	r3, [r3, #4]
 8004610:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004614:	2b00      	cmp	r3, #0
 8004616:	d116      	bne.n	8004646 <HAL_RCC_OscConfig+0x186>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004618:	4b42      	ldr	r3, [pc, #264]	; (8004724 <HAL_RCC_OscConfig+0x264>)
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	f003 0302 	and.w	r3, r3, #2
 8004620:	2b00      	cmp	r3, #0
 8004622:	d005      	beq.n	8004630 <HAL_RCC_OscConfig+0x170>
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	691b      	ldr	r3, [r3, #16]
 8004628:	2b01      	cmp	r3, #1
 800462a:	d001      	beq.n	8004630 <HAL_RCC_OscConfig+0x170>
      {
        return HAL_ERROR;
 800462c:	2301      	movs	r3, #1
 800462e:	e1a1      	b.n	8004974 <HAL_RCC_OscConfig+0x4b4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004630:	4b3c      	ldr	r3, [pc, #240]	; (8004724 <HAL_RCC_OscConfig+0x264>)
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	695b      	ldr	r3, [r3, #20]
 800463c:	00db      	lsls	r3, r3, #3
 800463e:	4939      	ldr	r1, [pc, #228]	; (8004724 <HAL_RCC_OscConfig+0x264>)
 8004640:	4313      	orrs	r3, r2
 8004642:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004644:	e03a      	b.n	80046bc <HAL_RCC_OscConfig+0x1fc>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	691b      	ldr	r3, [r3, #16]
 800464a:	2b00      	cmp	r3, #0
 800464c:	d020      	beq.n	8004690 <HAL_RCC_OscConfig+0x1d0>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800464e:	4b36      	ldr	r3, [pc, #216]	; (8004728 <HAL_RCC_OscConfig+0x268>)
 8004650:	2201      	movs	r2, #1
 8004652:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004654:	f7fe fa1e 	bl	8002a94 <HAL_GetTick>
 8004658:	6138      	str	r0, [r7, #16]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800465a:	e008      	b.n	800466e <HAL_RCC_OscConfig+0x1ae>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800465c:	f7fe fa1a 	bl	8002a94 <HAL_GetTick>
 8004660:	4602      	mov	r2, r0
 8004662:	693b      	ldr	r3, [r7, #16]
 8004664:	1ad3      	subs	r3, r2, r3
 8004666:	2b02      	cmp	r3, #2
 8004668:	d901      	bls.n	800466e <HAL_RCC_OscConfig+0x1ae>
          {
            return HAL_TIMEOUT;
 800466a:	2303      	movs	r3, #3
 800466c:	e182      	b.n	8004974 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800466e:	4b2d      	ldr	r3, [pc, #180]	; (8004724 <HAL_RCC_OscConfig+0x264>)
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	f003 0302 	and.w	r3, r3, #2
 8004676:	2b00      	cmp	r3, #0
 8004678:	d0f0      	beq.n	800465c <HAL_RCC_OscConfig+0x19c>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800467a:	4b2a      	ldr	r3, [pc, #168]	; (8004724 <HAL_RCC_OscConfig+0x264>)
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	695b      	ldr	r3, [r3, #20]
 8004686:	00db      	lsls	r3, r3, #3
 8004688:	4926      	ldr	r1, [pc, #152]	; (8004724 <HAL_RCC_OscConfig+0x264>)
 800468a:	4313      	orrs	r3, r2
 800468c:	600b      	str	r3, [r1, #0]
 800468e:	e015      	b.n	80046bc <HAL_RCC_OscConfig+0x1fc>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004690:	4b25      	ldr	r3, [pc, #148]	; (8004728 <HAL_RCC_OscConfig+0x268>)
 8004692:	2200      	movs	r2, #0
 8004694:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004696:	f7fe f9fd 	bl	8002a94 <HAL_GetTick>
 800469a:	6138      	str	r0, [r7, #16]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800469c:	e008      	b.n	80046b0 <HAL_RCC_OscConfig+0x1f0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800469e:	f7fe f9f9 	bl	8002a94 <HAL_GetTick>
 80046a2:	4602      	mov	r2, r0
 80046a4:	693b      	ldr	r3, [r7, #16]
 80046a6:	1ad3      	subs	r3, r2, r3
 80046a8:	2b02      	cmp	r3, #2
 80046aa:	d901      	bls.n	80046b0 <HAL_RCC_OscConfig+0x1f0>
          {
            return HAL_TIMEOUT;
 80046ac:	2303      	movs	r3, #3
 80046ae:	e161      	b.n	8004974 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80046b0:	4b1c      	ldr	r3, [pc, #112]	; (8004724 <HAL_RCC_OscConfig+0x264>)
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	f003 0302 	and.w	r3, r3, #2
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d1f0      	bne.n	800469e <HAL_RCC_OscConfig+0x1de>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	f003 0308 	and.w	r3, r3, #8
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d039      	beq.n	800473c <HAL_RCC_OscConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	699b      	ldr	r3, [r3, #24]
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d019      	beq.n	8004704 <HAL_RCC_OscConfig+0x244>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80046d0:	4b16      	ldr	r3, [pc, #88]	; (800472c <HAL_RCC_OscConfig+0x26c>)
 80046d2:	2201      	movs	r2, #1
 80046d4:	601a      	str	r2, [r3, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80046d6:	f7fe f9dd 	bl	8002a94 <HAL_GetTick>
 80046da:	6138      	str	r0, [r7, #16]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80046dc:	e008      	b.n	80046f0 <HAL_RCC_OscConfig+0x230>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80046de:	f7fe f9d9 	bl	8002a94 <HAL_GetTick>
 80046e2:	4602      	mov	r2, r0
 80046e4:	693b      	ldr	r3, [r7, #16]
 80046e6:	1ad3      	subs	r3, r2, r3
 80046e8:	2b02      	cmp	r3, #2
 80046ea:	d901      	bls.n	80046f0 <HAL_RCC_OscConfig+0x230>
        {
          return HAL_TIMEOUT;
 80046ec:	2303      	movs	r3, #3
 80046ee:	e141      	b.n	8004974 <HAL_RCC_OscConfig+0x4b4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80046f0:	4b0c      	ldr	r3, [pc, #48]	; (8004724 <HAL_RCC_OscConfig+0x264>)
 80046f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046f4:	f003 0302 	and.w	r3, r3, #2
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d0f0      	beq.n	80046de <HAL_RCC_OscConfig+0x21e>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms 
          should be added.*/
      RCC_Delay(1);
 80046fc:	2001      	movs	r0, #1
 80046fe:	f000 facb 	bl	8004c98 <RCC_Delay>
 8004702:	e01b      	b.n	800473c <HAL_RCC_OscConfig+0x27c>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004704:	4b09      	ldr	r3, [pc, #36]	; (800472c <HAL_RCC_OscConfig+0x26c>)
 8004706:	2200      	movs	r2, #0
 8004708:	601a      	str	r2, [r3, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800470a:	f7fe f9c3 	bl	8002a94 <HAL_GetTick>
 800470e:	6138      	str	r0, [r7, #16]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004710:	e00e      	b.n	8004730 <HAL_RCC_OscConfig+0x270>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004712:	f7fe f9bf 	bl	8002a94 <HAL_GetTick>
 8004716:	4602      	mov	r2, r0
 8004718:	693b      	ldr	r3, [r7, #16]
 800471a:	1ad3      	subs	r3, r2, r3
 800471c:	2b02      	cmp	r3, #2
 800471e:	d907      	bls.n	8004730 <HAL_RCC_OscConfig+0x270>
        {
          return HAL_TIMEOUT;
 8004720:	2303      	movs	r3, #3
 8004722:	e127      	b.n	8004974 <HAL_RCC_OscConfig+0x4b4>
 8004724:	40021000 	.word	0x40021000
 8004728:	42420000 	.word	0x42420000
 800472c:	42420480 	.word	0x42420480
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004730:	4b92      	ldr	r3, [pc, #584]	; (800497c <HAL_RCC_OscConfig+0x4bc>)
 8004732:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004734:	f003 0302 	and.w	r3, r3, #2
 8004738:	2b00      	cmp	r3, #0
 800473a:	d1ea      	bne.n	8004712 <HAL_RCC_OscConfig+0x252>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	f003 0304 	and.w	r3, r3, #4
 8004744:	2b00      	cmp	r3, #0
 8004746:	f000 80a6 	beq.w	8004896 <HAL_RCC_OscConfig+0x3d6>
  {
    FlagStatus       pwrclkchanged = RESET;
 800474a:	2300      	movs	r3, #0
 800474c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800474e:	4b8b      	ldr	r3, [pc, #556]	; (800497c <HAL_RCC_OscConfig+0x4bc>)
 8004750:	69db      	ldr	r3, [r3, #28]
 8004752:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004756:	2b00      	cmp	r3, #0
 8004758:	d10d      	bne.n	8004776 <HAL_RCC_OscConfig+0x2b6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800475a:	4b88      	ldr	r3, [pc, #544]	; (800497c <HAL_RCC_OscConfig+0x4bc>)
 800475c:	69db      	ldr	r3, [r3, #28]
 800475e:	4a87      	ldr	r2, [pc, #540]	; (800497c <HAL_RCC_OscConfig+0x4bc>)
 8004760:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004764:	61d3      	str	r3, [r2, #28]
 8004766:	4b85      	ldr	r3, [pc, #532]	; (800497c <HAL_RCC_OscConfig+0x4bc>)
 8004768:	69db      	ldr	r3, [r3, #28]
 800476a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800476e:	60fb      	str	r3, [r7, #12]
 8004770:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8004772:	2301      	movs	r3, #1
 8004774:	75fb      	strb	r3, [r7, #23]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004776:	4b82      	ldr	r3, [pc, #520]	; (8004980 <HAL_RCC_OscConfig+0x4c0>)
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800477e:	2b00      	cmp	r3, #0
 8004780:	d118      	bne.n	80047b4 <HAL_RCC_OscConfig+0x2f4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004782:	4b7f      	ldr	r3, [pc, #508]	; (8004980 <HAL_RCC_OscConfig+0x4c0>)
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	4a7e      	ldr	r2, [pc, #504]	; (8004980 <HAL_RCC_OscConfig+0x4c0>)
 8004788:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800478c:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800478e:	f7fe f981 	bl	8002a94 <HAL_GetTick>
 8004792:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004794:	e008      	b.n	80047a8 <HAL_RCC_OscConfig+0x2e8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004796:	f7fe f97d 	bl	8002a94 <HAL_GetTick>
 800479a:	4602      	mov	r2, r0
 800479c:	693b      	ldr	r3, [r7, #16]
 800479e:	1ad3      	subs	r3, r2, r3
 80047a0:	2b64      	cmp	r3, #100	; 0x64
 80047a2:	d901      	bls.n	80047a8 <HAL_RCC_OscConfig+0x2e8>
        {
          return HAL_TIMEOUT;
 80047a4:	2303      	movs	r3, #3
 80047a6:	e0e5      	b.n	8004974 <HAL_RCC_OscConfig+0x4b4>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80047a8:	4b75      	ldr	r3, [pc, #468]	; (8004980 <HAL_RCC_OscConfig+0x4c0>)
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d0f0      	beq.n	8004796 <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	68db      	ldr	r3, [r3, #12]
 80047b8:	2b01      	cmp	r3, #1
 80047ba:	d106      	bne.n	80047ca <HAL_RCC_OscConfig+0x30a>
 80047bc:	4b6f      	ldr	r3, [pc, #444]	; (800497c <HAL_RCC_OscConfig+0x4bc>)
 80047be:	6a1b      	ldr	r3, [r3, #32]
 80047c0:	4a6e      	ldr	r2, [pc, #440]	; (800497c <HAL_RCC_OscConfig+0x4bc>)
 80047c2:	f043 0301 	orr.w	r3, r3, #1
 80047c6:	6213      	str	r3, [r2, #32]
 80047c8:	e02d      	b.n	8004826 <HAL_RCC_OscConfig+0x366>
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	68db      	ldr	r3, [r3, #12]
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d10c      	bne.n	80047ec <HAL_RCC_OscConfig+0x32c>
 80047d2:	4b6a      	ldr	r3, [pc, #424]	; (800497c <HAL_RCC_OscConfig+0x4bc>)
 80047d4:	6a1b      	ldr	r3, [r3, #32]
 80047d6:	4a69      	ldr	r2, [pc, #420]	; (800497c <HAL_RCC_OscConfig+0x4bc>)
 80047d8:	f023 0301 	bic.w	r3, r3, #1
 80047dc:	6213      	str	r3, [r2, #32]
 80047de:	4b67      	ldr	r3, [pc, #412]	; (800497c <HAL_RCC_OscConfig+0x4bc>)
 80047e0:	6a1b      	ldr	r3, [r3, #32]
 80047e2:	4a66      	ldr	r2, [pc, #408]	; (800497c <HAL_RCC_OscConfig+0x4bc>)
 80047e4:	f023 0304 	bic.w	r3, r3, #4
 80047e8:	6213      	str	r3, [r2, #32]
 80047ea:	e01c      	b.n	8004826 <HAL_RCC_OscConfig+0x366>
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	68db      	ldr	r3, [r3, #12]
 80047f0:	2b05      	cmp	r3, #5
 80047f2:	d10c      	bne.n	800480e <HAL_RCC_OscConfig+0x34e>
 80047f4:	4b61      	ldr	r3, [pc, #388]	; (800497c <HAL_RCC_OscConfig+0x4bc>)
 80047f6:	6a1b      	ldr	r3, [r3, #32]
 80047f8:	4a60      	ldr	r2, [pc, #384]	; (800497c <HAL_RCC_OscConfig+0x4bc>)
 80047fa:	f043 0304 	orr.w	r3, r3, #4
 80047fe:	6213      	str	r3, [r2, #32]
 8004800:	4b5e      	ldr	r3, [pc, #376]	; (800497c <HAL_RCC_OscConfig+0x4bc>)
 8004802:	6a1b      	ldr	r3, [r3, #32]
 8004804:	4a5d      	ldr	r2, [pc, #372]	; (800497c <HAL_RCC_OscConfig+0x4bc>)
 8004806:	f043 0301 	orr.w	r3, r3, #1
 800480a:	6213      	str	r3, [r2, #32]
 800480c:	e00b      	b.n	8004826 <HAL_RCC_OscConfig+0x366>
 800480e:	4b5b      	ldr	r3, [pc, #364]	; (800497c <HAL_RCC_OscConfig+0x4bc>)
 8004810:	6a1b      	ldr	r3, [r3, #32]
 8004812:	4a5a      	ldr	r2, [pc, #360]	; (800497c <HAL_RCC_OscConfig+0x4bc>)
 8004814:	f023 0301 	bic.w	r3, r3, #1
 8004818:	6213      	str	r3, [r2, #32]
 800481a:	4b58      	ldr	r3, [pc, #352]	; (800497c <HAL_RCC_OscConfig+0x4bc>)
 800481c:	6a1b      	ldr	r3, [r3, #32]
 800481e:	4a57      	ldr	r2, [pc, #348]	; (800497c <HAL_RCC_OscConfig+0x4bc>)
 8004820:	f023 0304 	bic.w	r3, r3, #4
 8004824:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	68db      	ldr	r3, [r3, #12]
 800482a:	2b00      	cmp	r3, #0
 800482c:	d015      	beq.n	800485a <HAL_RCC_OscConfig+0x39a>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800482e:	f7fe f931 	bl	8002a94 <HAL_GetTick>
 8004832:	6138      	str	r0, [r7, #16]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004834:	e00a      	b.n	800484c <HAL_RCC_OscConfig+0x38c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004836:	f7fe f92d 	bl	8002a94 <HAL_GetTick>
 800483a:	4602      	mov	r2, r0
 800483c:	693b      	ldr	r3, [r7, #16]
 800483e:	1ad3      	subs	r3, r2, r3
 8004840:	f241 3288 	movw	r2, #5000	; 0x1388
 8004844:	4293      	cmp	r3, r2
 8004846:	d901      	bls.n	800484c <HAL_RCC_OscConfig+0x38c>
        {
          return HAL_TIMEOUT;
 8004848:	2303      	movs	r3, #3
 800484a:	e093      	b.n	8004974 <HAL_RCC_OscConfig+0x4b4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800484c:	4b4b      	ldr	r3, [pc, #300]	; (800497c <HAL_RCC_OscConfig+0x4bc>)
 800484e:	6a1b      	ldr	r3, [r3, #32]
 8004850:	f003 0302 	and.w	r3, r3, #2
 8004854:	2b00      	cmp	r3, #0
 8004856:	d0ee      	beq.n	8004836 <HAL_RCC_OscConfig+0x376>
 8004858:	e014      	b.n	8004884 <HAL_RCC_OscConfig+0x3c4>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800485a:	f7fe f91b 	bl	8002a94 <HAL_GetTick>
 800485e:	6138      	str	r0, [r7, #16]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004860:	e00a      	b.n	8004878 <HAL_RCC_OscConfig+0x3b8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004862:	f7fe f917 	bl	8002a94 <HAL_GetTick>
 8004866:	4602      	mov	r2, r0
 8004868:	693b      	ldr	r3, [r7, #16]
 800486a:	1ad3      	subs	r3, r2, r3
 800486c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004870:	4293      	cmp	r3, r2
 8004872:	d901      	bls.n	8004878 <HAL_RCC_OscConfig+0x3b8>
        {
          return HAL_TIMEOUT;
 8004874:	2303      	movs	r3, #3
 8004876:	e07d      	b.n	8004974 <HAL_RCC_OscConfig+0x4b4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004878:	4b40      	ldr	r3, [pc, #256]	; (800497c <HAL_RCC_OscConfig+0x4bc>)
 800487a:	6a1b      	ldr	r3, [r3, #32]
 800487c:	f003 0302 	and.w	r3, r3, #2
 8004880:	2b00      	cmp	r3, #0
 8004882:	d1ee      	bne.n	8004862 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004884:	7dfb      	ldrb	r3, [r7, #23]
 8004886:	2b01      	cmp	r3, #1
 8004888:	d105      	bne.n	8004896 <HAL_RCC_OscConfig+0x3d6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800488a:	4b3c      	ldr	r3, [pc, #240]	; (800497c <HAL_RCC_OscConfig+0x4bc>)
 800488c:	69db      	ldr	r3, [r3, #28]
 800488e:	4a3b      	ldr	r2, [pc, #236]	; (800497c <HAL_RCC_OscConfig+0x4bc>)
 8004890:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004894:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	69db      	ldr	r3, [r3, #28]
 800489a:	2b00      	cmp	r3, #0
 800489c:	d069      	beq.n	8004972 <HAL_RCC_OscConfig+0x4b2>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800489e:	4b37      	ldr	r3, [pc, #220]	; (800497c <HAL_RCC_OscConfig+0x4bc>)
 80048a0:	685b      	ldr	r3, [r3, #4]
 80048a2:	f003 030c 	and.w	r3, r3, #12
 80048a6:	2b08      	cmp	r3, #8
 80048a8:	d061      	beq.n	800496e <HAL_RCC_OscConfig+0x4ae>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	69db      	ldr	r3, [r3, #28]
 80048ae:	2b02      	cmp	r3, #2
 80048b0:	d146      	bne.n	8004940 <HAL_RCC_OscConfig+0x480>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80048b2:	4b34      	ldr	r3, [pc, #208]	; (8004984 <HAL_RCC_OscConfig+0x4c4>)
 80048b4:	2200      	movs	r2, #0
 80048b6:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80048b8:	f7fe f8ec 	bl	8002a94 <HAL_GetTick>
 80048bc:	6138      	str	r0, [r7, #16]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80048be:	e008      	b.n	80048d2 <HAL_RCC_OscConfig+0x412>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80048c0:	f7fe f8e8 	bl	8002a94 <HAL_GetTick>
 80048c4:	4602      	mov	r2, r0
 80048c6:	693b      	ldr	r3, [r7, #16]
 80048c8:	1ad3      	subs	r3, r2, r3
 80048ca:	2b02      	cmp	r3, #2
 80048cc:	d901      	bls.n	80048d2 <HAL_RCC_OscConfig+0x412>
          {
            return HAL_TIMEOUT;
 80048ce:	2303      	movs	r3, #3
 80048d0:	e050      	b.n	8004974 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80048d2:	4b2a      	ldr	r3, [pc, #168]	; (800497c <HAL_RCC_OscConfig+0x4bc>)
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d1f0      	bne.n	80048c0 <HAL_RCC_OscConfig+0x400>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if(RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	6a1b      	ldr	r3, [r3, #32]
 80048e2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80048e6:	d108      	bne.n	80048fa <HAL_RCC_OscConfig+0x43a>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80048e8:	4b24      	ldr	r3, [pc, #144]	; (800497c <HAL_RCC_OscConfig+0x4bc>)
 80048ea:	685b      	ldr	r3, [r3, #4]
 80048ec:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	689b      	ldr	r3, [r3, #8]
 80048f4:	4921      	ldr	r1, [pc, #132]	; (800497c <HAL_RCC_OscConfig+0x4bc>)
 80048f6:	4313      	orrs	r3, r2
 80048f8:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80048fa:	4b20      	ldr	r3, [pc, #128]	; (800497c <HAL_RCC_OscConfig+0x4bc>)
 80048fc:	685b      	ldr	r3, [r3, #4]
 80048fe:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	6a19      	ldr	r1, [r3, #32]
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800490a:	430b      	orrs	r3, r1
 800490c:	491b      	ldr	r1, [pc, #108]	; (800497c <HAL_RCC_OscConfig+0x4bc>)
 800490e:	4313      	orrs	r3, r2
 8004910:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004912:	4b1c      	ldr	r3, [pc, #112]	; (8004984 <HAL_RCC_OscConfig+0x4c4>)
 8004914:	2201      	movs	r2, #1
 8004916:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004918:	f7fe f8bc 	bl	8002a94 <HAL_GetTick>
 800491c:	6138      	str	r0, [r7, #16]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800491e:	e008      	b.n	8004932 <HAL_RCC_OscConfig+0x472>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004920:	f7fe f8b8 	bl	8002a94 <HAL_GetTick>
 8004924:	4602      	mov	r2, r0
 8004926:	693b      	ldr	r3, [r7, #16]
 8004928:	1ad3      	subs	r3, r2, r3
 800492a:	2b02      	cmp	r3, #2
 800492c:	d901      	bls.n	8004932 <HAL_RCC_OscConfig+0x472>
          {
            return HAL_TIMEOUT;
 800492e:	2303      	movs	r3, #3
 8004930:	e020      	b.n	8004974 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004932:	4b12      	ldr	r3, [pc, #72]	; (800497c <HAL_RCC_OscConfig+0x4bc>)
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800493a:	2b00      	cmp	r3, #0
 800493c:	d0f0      	beq.n	8004920 <HAL_RCC_OscConfig+0x460>
 800493e:	e018      	b.n	8004972 <HAL_RCC_OscConfig+0x4b2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004940:	4b10      	ldr	r3, [pc, #64]	; (8004984 <HAL_RCC_OscConfig+0x4c4>)
 8004942:	2200      	movs	r2, #0
 8004944:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004946:	f7fe f8a5 	bl	8002a94 <HAL_GetTick>
 800494a:	6138      	str	r0, [r7, #16]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800494c:	e008      	b.n	8004960 <HAL_RCC_OscConfig+0x4a0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800494e:	f7fe f8a1 	bl	8002a94 <HAL_GetTick>
 8004952:	4602      	mov	r2, r0
 8004954:	693b      	ldr	r3, [r7, #16]
 8004956:	1ad3      	subs	r3, r2, r3
 8004958:	2b02      	cmp	r3, #2
 800495a:	d901      	bls.n	8004960 <HAL_RCC_OscConfig+0x4a0>
          {
            return HAL_TIMEOUT;
 800495c:	2303      	movs	r3, #3
 800495e:	e009      	b.n	8004974 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004960:	4b06      	ldr	r3, [pc, #24]	; (800497c <HAL_RCC_OscConfig+0x4bc>)
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004968:	2b00      	cmp	r3, #0
 800496a:	d1f0      	bne.n	800494e <HAL_RCC_OscConfig+0x48e>
 800496c:	e001      	b.n	8004972 <HAL_RCC_OscConfig+0x4b2>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 800496e:	2301      	movs	r3, #1
 8004970:	e000      	b.n	8004974 <HAL_RCC_OscConfig+0x4b4>
    }
  }
  
  return HAL_OK;
 8004972:	2300      	movs	r3, #0
}
 8004974:	4618      	mov	r0, r3
 8004976:	3718      	adds	r7, #24
 8004978:	46bd      	mov	sp, r7
 800497a:	bd80      	pop	{r7, pc}
 800497c:	40021000 	.word	0x40021000
 8004980:	40007000 	.word	0x40007000
 8004984:	42420060 	.word	0x42420060

08004988 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004988:	b580      	push	{r7, lr}
 800498a:	b084      	sub	sp, #16
 800498c:	af00      	add	r7, sp, #0
 800498e:	6078      	str	r0, [r7, #4]
 8004990:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8004992:	2300      	movs	r3, #0
 8004994:	60fb      	str	r3, [r7, #12]
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8004996:	4b72      	ldr	r3, [pc, #456]	; (8004b60 <HAL_RCC_ClockConfig+0x1d8>)
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	f003 0307 	and.w	r3, r3, #7
 800499e:	683a      	ldr	r2, [r7, #0]
 80049a0:	429a      	cmp	r2, r3
 80049a2:	d910      	bls.n	80049c6 <HAL_RCC_ClockConfig+0x3e>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80049a4:	4b6e      	ldr	r3, [pc, #440]	; (8004b60 <HAL_RCC_ClockConfig+0x1d8>)
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	f023 0207 	bic.w	r2, r3, #7
 80049ac:	496c      	ldr	r1, [pc, #432]	; (8004b60 <HAL_RCC_ClockConfig+0x1d8>)
 80049ae:	683b      	ldr	r3, [r7, #0]
 80049b0:	4313      	orrs	r3, r2
 80049b2:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80049b4:	4b6a      	ldr	r3, [pc, #424]	; (8004b60 <HAL_RCC_ClockConfig+0x1d8>)
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	f003 0307 	and.w	r3, r3, #7
 80049bc:	683a      	ldr	r2, [r7, #0]
 80049be:	429a      	cmp	r2, r3
 80049c0:	d001      	beq.n	80049c6 <HAL_RCC_ClockConfig+0x3e>
    {
      return HAL_ERROR;
 80049c2:	2301      	movs	r3, #1
 80049c4:	e0c8      	b.n	8004b58 <HAL_RCC_ClockConfig+0x1d0>
    }
  }

#endif /* FLASH_ACR_LATENCY */
  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	f003 0302 	and.w	r3, r3, #2
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d008      	beq.n	80049e4 <HAL_RCC_ClockConfig+0x5c>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80049d2:	4b64      	ldr	r3, [pc, #400]	; (8004b64 <HAL_RCC_ClockConfig+0x1dc>)
 80049d4:	685b      	ldr	r3, [r3, #4]
 80049d6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	689b      	ldr	r3, [r3, #8]
 80049de:	4961      	ldr	r1, [pc, #388]	; (8004b64 <HAL_RCC_ClockConfig+0x1dc>)
 80049e0:	4313      	orrs	r3, r2
 80049e2:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	f003 0301 	and.w	r3, r3, #1
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d06a      	beq.n	8004ac6 <HAL_RCC_ClockConfig+0x13e>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	685b      	ldr	r3, [r3, #4]
 80049f4:	2b01      	cmp	r3, #1
 80049f6:	d107      	bne.n	8004a08 <HAL_RCC_ClockConfig+0x80>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80049f8:	4b5a      	ldr	r3, [pc, #360]	; (8004b64 <HAL_RCC_ClockConfig+0x1dc>)
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d115      	bne.n	8004a30 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8004a04:	2301      	movs	r3, #1
 8004a06:	e0a7      	b.n	8004b58 <HAL_RCC_ClockConfig+0x1d0>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	685b      	ldr	r3, [r3, #4]
 8004a0c:	2b02      	cmp	r3, #2
 8004a0e:	d107      	bne.n	8004a20 <HAL_RCC_ClockConfig+0x98>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004a10:	4b54      	ldr	r3, [pc, #336]	; (8004b64 <HAL_RCC_ClockConfig+0x1dc>)
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d109      	bne.n	8004a30 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8004a1c:	2301      	movs	r3, #1
 8004a1e:	e09b      	b.n	8004b58 <HAL_RCC_ClockConfig+0x1d0>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004a20:	4b50      	ldr	r3, [pc, #320]	; (8004b64 <HAL_RCC_ClockConfig+0x1dc>)
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	f003 0302 	and.w	r3, r3, #2
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d101      	bne.n	8004a30 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8004a2c:	2301      	movs	r3, #1
 8004a2e:	e093      	b.n	8004b58 <HAL_RCC_ClockConfig+0x1d0>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004a30:	4b4c      	ldr	r3, [pc, #304]	; (8004b64 <HAL_RCC_ClockConfig+0x1dc>)
 8004a32:	685b      	ldr	r3, [r3, #4]
 8004a34:	f023 0203 	bic.w	r2, r3, #3
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	685b      	ldr	r3, [r3, #4]
 8004a3c:	4949      	ldr	r1, [pc, #292]	; (8004b64 <HAL_RCC_ClockConfig+0x1dc>)
 8004a3e:	4313      	orrs	r3, r2
 8004a40:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004a42:	f7fe f827 	bl	8002a94 <HAL_GetTick>
 8004a46:	60f8      	str	r0, [r7, #12]
    
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	685b      	ldr	r3, [r3, #4]
 8004a4c:	2b01      	cmp	r3, #1
 8004a4e:	d112      	bne.n	8004a76 <HAL_RCC_ClockConfig+0xee>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8004a50:	e00a      	b.n	8004a68 <HAL_RCC_ClockConfig+0xe0>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004a52:	f7fe f81f 	bl	8002a94 <HAL_GetTick>
 8004a56:	4602      	mov	r2, r0
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	1ad3      	subs	r3, r2, r3
 8004a5c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a60:	4293      	cmp	r3, r2
 8004a62:	d901      	bls.n	8004a68 <HAL_RCC_ClockConfig+0xe0>
        {
          return HAL_TIMEOUT;
 8004a64:	2303      	movs	r3, #3
 8004a66:	e077      	b.n	8004b58 <HAL_RCC_ClockConfig+0x1d0>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8004a68:	4b3e      	ldr	r3, [pc, #248]	; (8004b64 <HAL_RCC_ClockConfig+0x1dc>)
 8004a6a:	685b      	ldr	r3, [r3, #4]
 8004a6c:	f003 030c 	and.w	r3, r3, #12
 8004a70:	2b04      	cmp	r3, #4
 8004a72:	d1ee      	bne.n	8004a52 <HAL_RCC_ClockConfig+0xca>
 8004a74:	e027      	b.n	8004ac6 <HAL_RCC_ClockConfig+0x13e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	685b      	ldr	r3, [r3, #4]
 8004a7a:	2b02      	cmp	r3, #2
 8004a7c:	d11d      	bne.n	8004aba <HAL_RCC_ClockConfig+0x132>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004a7e:	e00a      	b.n	8004a96 <HAL_RCC_ClockConfig+0x10e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004a80:	f7fe f808 	bl	8002a94 <HAL_GetTick>
 8004a84:	4602      	mov	r2, r0
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	1ad3      	subs	r3, r2, r3
 8004a8a:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a8e:	4293      	cmp	r3, r2
 8004a90:	d901      	bls.n	8004a96 <HAL_RCC_ClockConfig+0x10e>
        {
          return HAL_TIMEOUT;
 8004a92:	2303      	movs	r3, #3
 8004a94:	e060      	b.n	8004b58 <HAL_RCC_ClockConfig+0x1d0>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004a96:	4b33      	ldr	r3, [pc, #204]	; (8004b64 <HAL_RCC_ClockConfig+0x1dc>)
 8004a98:	685b      	ldr	r3, [r3, #4]
 8004a9a:	f003 030c 	and.w	r3, r3, #12
 8004a9e:	2b08      	cmp	r3, #8
 8004aa0:	d1ee      	bne.n	8004a80 <HAL_RCC_ClockConfig+0xf8>
 8004aa2:	e010      	b.n	8004ac6 <HAL_RCC_ClockConfig+0x13e>
    }
    else
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004aa4:	f7fd fff6 	bl	8002a94 <HAL_GetTick>
 8004aa8:	4602      	mov	r2, r0
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	1ad3      	subs	r3, r2, r3
 8004aae:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ab2:	4293      	cmp	r3, r2
 8004ab4:	d901      	bls.n	8004aba <HAL_RCC_ClockConfig+0x132>
        {
          return HAL_TIMEOUT;
 8004ab6:	2303      	movs	r3, #3
 8004ab8:	e04e      	b.n	8004b58 <HAL_RCC_ClockConfig+0x1d0>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8004aba:	4b2a      	ldr	r3, [pc, #168]	; (8004b64 <HAL_RCC_ClockConfig+0x1dc>)
 8004abc:	685b      	ldr	r3, [r3, #4]
 8004abe:	f003 030c 	and.w	r3, r3, #12
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d1ee      	bne.n	8004aa4 <HAL_RCC_ClockConfig+0x11c>
      }
    }      
  }    
#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 8004ac6:	4b26      	ldr	r3, [pc, #152]	; (8004b60 <HAL_RCC_ClockConfig+0x1d8>)
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	f003 0307 	and.w	r3, r3, #7
 8004ace:	683a      	ldr	r2, [r7, #0]
 8004ad0:	429a      	cmp	r2, r3
 8004ad2:	d210      	bcs.n	8004af6 <HAL_RCC_ClockConfig+0x16e>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004ad4:	4b22      	ldr	r3, [pc, #136]	; (8004b60 <HAL_RCC_ClockConfig+0x1d8>)
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	f023 0207 	bic.w	r2, r3, #7
 8004adc:	4920      	ldr	r1, [pc, #128]	; (8004b60 <HAL_RCC_ClockConfig+0x1d8>)
 8004ade:	683b      	ldr	r3, [r7, #0]
 8004ae0:	4313      	orrs	r3, r2
 8004ae2:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8004ae4:	4b1e      	ldr	r3, [pc, #120]	; (8004b60 <HAL_RCC_ClockConfig+0x1d8>)
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	f003 0307 	and.w	r3, r3, #7
 8004aec:	683a      	ldr	r2, [r7, #0]
 8004aee:	429a      	cmp	r2, r3
 8004af0:	d001      	beq.n	8004af6 <HAL_RCC_ClockConfig+0x16e>
    {
      return HAL_ERROR;
 8004af2:	2301      	movs	r3, #1
 8004af4:	e030      	b.n	8004b58 <HAL_RCC_ClockConfig+0x1d0>
    }
  }    
#endif /* FLASH_ACR_LATENCY */

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	f003 0304 	and.w	r3, r3, #4
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d008      	beq.n	8004b14 <HAL_RCC_ClockConfig+0x18c>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004b02:	4b18      	ldr	r3, [pc, #96]	; (8004b64 <HAL_RCC_ClockConfig+0x1dc>)
 8004b04:	685b      	ldr	r3, [r3, #4]
 8004b06:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	68db      	ldr	r3, [r3, #12]
 8004b0e:	4915      	ldr	r1, [pc, #84]	; (8004b64 <HAL_RCC_ClockConfig+0x1dc>)
 8004b10:	4313      	orrs	r3, r2
 8004b12:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	f003 0308 	and.w	r3, r3, #8
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d009      	beq.n	8004b34 <HAL_RCC_ClockConfig+0x1ac>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004b20:	4b10      	ldr	r3, [pc, #64]	; (8004b64 <HAL_RCC_ClockConfig+0x1dc>)
 8004b22:	685b      	ldr	r3, [r3, #4]
 8004b24:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	691b      	ldr	r3, [r3, #16]
 8004b2c:	00db      	lsls	r3, r3, #3
 8004b2e:	490d      	ldr	r1, [pc, #52]	; (8004b64 <HAL_RCC_ClockConfig+0x1dc>)
 8004b30:	4313      	orrs	r3, r2
 8004b32:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004b34:	f000 f81c 	bl	8004b70 <HAL_RCC_GetSysClockFreq>
 8004b38:	4601      	mov	r1, r0
 8004b3a:	4b0a      	ldr	r3, [pc, #40]	; (8004b64 <HAL_RCC_ClockConfig+0x1dc>)
 8004b3c:	685b      	ldr	r3, [r3, #4]
 8004b3e:	091b      	lsrs	r3, r3, #4
 8004b40:	f003 030f 	and.w	r3, r3, #15
 8004b44:	4a08      	ldr	r2, [pc, #32]	; (8004b68 <HAL_RCC_ClockConfig+0x1e0>)
 8004b46:	5cd3      	ldrb	r3, [r2, r3]
 8004b48:	fa21 f303 	lsr.w	r3, r1, r3
 8004b4c:	4a07      	ldr	r2, [pc, #28]	; (8004b6c <HAL_RCC_ClockConfig+0x1e4>)
 8004b4e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8004b50:	2000      	movs	r0, #0
 8004b52:	f7fd ff75 	bl	8002a40 <HAL_InitTick>
  
  return HAL_OK;
 8004b56:	2300      	movs	r3, #0
}
 8004b58:	4618      	mov	r0, r3
 8004b5a:	3710      	adds	r7, #16
 8004b5c:	46bd      	mov	sp, r7
 8004b5e:	bd80      	pop	{r7, pc}
 8004b60:	40022000 	.word	0x40022000
 8004b64:	40021000 	.word	0x40021000
 8004b68:	0800a294 	.word	0x0800a294
 8004b6c:	20000018 	.word	0x20000018

08004b70 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004b70:	b490      	push	{r4, r7}
 8004b72:	b08a      	sub	sp, #40	; 0x28
 8004b74:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8004b76:	4b2a      	ldr	r3, [pc, #168]	; (8004c20 <HAL_RCC_GetSysClockFreq+0xb0>)
 8004b78:	1d3c      	adds	r4, r7, #4
 8004b7a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004b7c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8004b80:	4b28      	ldr	r3, [pc, #160]	; (8004c24 <HAL_RCC_GetSysClockFreq+0xb4>)
 8004b82:	881b      	ldrh	r3, [r3, #0]
 8004b84:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004b86:	2300      	movs	r3, #0
 8004b88:	61fb      	str	r3, [r7, #28]
 8004b8a:	2300      	movs	r3, #0
 8004b8c:	61bb      	str	r3, [r7, #24]
 8004b8e:	2300      	movs	r3, #0
 8004b90:	627b      	str	r3, [r7, #36]	; 0x24
 8004b92:	2300      	movs	r3, #0
 8004b94:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8004b96:	2300      	movs	r3, #0
 8004b98:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/
  
  tmpreg = RCC->CFGR;
 8004b9a:	4b23      	ldr	r3, [pc, #140]	; (8004c28 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004b9c:	685b      	ldr	r3, [r3, #4]
 8004b9e:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004ba0:	69fb      	ldr	r3, [r7, #28]
 8004ba2:	f003 030c 	and.w	r3, r3, #12
 8004ba6:	2b04      	cmp	r3, #4
 8004ba8:	d002      	beq.n	8004bb0 <HAL_RCC_GetSysClockFreq+0x40>
 8004baa:	2b08      	cmp	r3, #8
 8004bac:	d003      	beq.n	8004bb6 <HAL_RCC_GetSysClockFreq+0x46>
 8004bae:	e02d      	b.n	8004c0c <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004bb0:	4b1e      	ldr	r3, [pc, #120]	; (8004c2c <HAL_RCC_GetSysClockFreq+0xbc>)
 8004bb2:	623b      	str	r3, [r7, #32]
      break;
 8004bb4:	e02d      	b.n	8004c12 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004bb6:	69fb      	ldr	r3, [r7, #28]
 8004bb8:	0c9b      	lsrs	r3, r3, #18
 8004bba:	f003 030f 	and.w	r3, r3, #15
 8004bbe:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8004bc2:	4413      	add	r3, r2
 8004bc4:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8004bc8:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004bca:	69fb      	ldr	r3, [r7, #28]
 8004bcc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d013      	beq.n	8004bfc <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004bd4:	4b14      	ldr	r3, [pc, #80]	; (8004c28 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004bd6:	685b      	ldr	r3, [r3, #4]
 8004bd8:	0c5b      	lsrs	r3, r3, #17
 8004bda:	f003 0301 	and.w	r3, r3, #1
 8004bde:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8004be2:	4413      	add	r3, r2
 8004be4:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8004be8:	61bb      	str	r3, [r7, #24]
        {
            pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE / prediv) * pllmul);
 8004bea:	4a10      	ldr	r2, [pc, #64]	; (8004c2c <HAL_RCC_GetSysClockFreq+0xbc>)
 8004bec:	69bb      	ldr	r3, [r7, #24]
 8004bee:	fbb2 f2f3 	udiv	r2, r2, r3
 8004bf2:	697b      	ldr	r3, [r7, #20]
 8004bf4:	fb02 f303 	mul.w	r3, r2, r3
 8004bf8:	627b      	str	r3, [r7, #36]	; 0x24
 8004bfa:	e004      	b.n	8004c06 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004bfc:	697b      	ldr	r3, [r7, #20]
 8004bfe:	4a0c      	ldr	r2, [pc, #48]	; (8004c30 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004c00:	fb02 f303 	mul.w	r3, r2, r3
 8004c04:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8004c06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c08:	623b      	str	r3, [r7, #32]
      break;
 8004c0a:	e002      	b.n	8004c12 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004c0c:	4b07      	ldr	r3, [pc, #28]	; (8004c2c <HAL_RCC_GetSysClockFreq+0xbc>)
 8004c0e:	623b      	str	r3, [r7, #32]
      break;
 8004c10:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004c12:	6a3b      	ldr	r3, [r7, #32]
}
 8004c14:	4618      	mov	r0, r3
 8004c16:	3728      	adds	r7, #40	; 0x28
 8004c18:	46bd      	mov	sp, r7
 8004c1a:	bc90      	pop	{r4, r7}
 8004c1c:	4770      	bx	lr
 8004c1e:	bf00      	nop
 8004c20:	0800a26c 	.word	0x0800a26c
 8004c24:	0800a27c 	.word	0x0800a27c
 8004c28:	40021000 	.word	0x40021000
 8004c2c:	007a1200 	.word	0x007a1200
 8004c30:	003d0900 	.word	0x003d0900

08004c34 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004c34:	b480      	push	{r7}
 8004c36:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004c38:	4b02      	ldr	r3, [pc, #8]	; (8004c44 <HAL_RCC_GetHCLKFreq+0x10>)
 8004c3a:	681b      	ldr	r3, [r3, #0]
}
 8004c3c:	4618      	mov	r0, r3
 8004c3e:	46bd      	mov	sp, r7
 8004c40:	bc80      	pop	{r7}
 8004c42:	4770      	bx	lr
 8004c44:	20000018 	.word	0x20000018

08004c48 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004c48:	b580      	push	{r7, lr}
 8004c4a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004c4c:	f7ff fff2 	bl	8004c34 <HAL_RCC_GetHCLKFreq>
 8004c50:	4601      	mov	r1, r0
 8004c52:	4b05      	ldr	r3, [pc, #20]	; (8004c68 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004c54:	685b      	ldr	r3, [r3, #4]
 8004c56:	0a1b      	lsrs	r3, r3, #8
 8004c58:	f003 0307 	and.w	r3, r3, #7
 8004c5c:	4a03      	ldr	r2, [pc, #12]	; (8004c6c <HAL_RCC_GetPCLK1Freq+0x24>)
 8004c5e:	5cd3      	ldrb	r3, [r2, r3]
 8004c60:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8004c64:	4618      	mov	r0, r3
 8004c66:	bd80      	pop	{r7, pc}
 8004c68:	40021000 	.word	0x40021000
 8004c6c:	0800a2a4 	.word	0x0800a2a4

08004c70 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004c70:	b580      	push	{r7, lr}
 8004c72:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004c74:	f7ff ffde 	bl	8004c34 <HAL_RCC_GetHCLKFreq>
 8004c78:	4601      	mov	r1, r0
 8004c7a:	4b05      	ldr	r3, [pc, #20]	; (8004c90 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004c7c:	685b      	ldr	r3, [r3, #4]
 8004c7e:	0adb      	lsrs	r3, r3, #11
 8004c80:	f003 0307 	and.w	r3, r3, #7
 8004c84:	4a03      	ldr	r2, [pc, #12]	; (8004c94 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004c86:	5cd3      	ldrb	r3, [r2, r3]
 8004c88:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8004c8c:	4618      	mov	r0, r3
 8004c8e:	bd80      	pop	{r7, pc}
 8004c90:	40021000 	.word	0x40021000
 8004c94:	0800a2a4 	.word	0x0800a2a4

08004c98 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004c98:	b480      	push	{r7}
 8004c9a:	b085      	sub	sp, #20
 8004c9c:	af00      	add	r7, sp, #0
 8004c9e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004ca0:	4b0a      	ldr	r3, [pc, #40]	; (8004ccc <RCC_Delay+0x34>)
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	4a0a      	ldr	r2, [pc, #40]	; (8004cd0 <RCC_Delay+0x38>)
 8004ca6:	fba2 2303 	umull	r2, r3, r2, r3
 8004caa:	0a5b      	lsrs	r3, r3, #9
 8004cac:	687a      	ldr	r2, [r7, #4]
 8004cae:	fb02 f303 	mul.w	r3, r2, r3
 8004cb2:	60fb      	str	r3, [r7, #12]
  \brief   No Operation
  \details No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__((always_inline)) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
 8004cb4:	bf00      	nop
  do 
  {
    __NOP();
  } 
  while (Delay --);
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	1e5a      	subs	r2, r3, #1
 8004cba:	60fa      	str	r2, [r7, #12]
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d1f9      	bne.n	8004cb4 <RCC_Delay+0x1c>
}
 8004cc0:	bf00      	nop
 8004cc2:	3714      	adds	r7, #20
 8004cc4:	46bd      	mov	sp, r7
 8004cc6:	bc80      	pop	{r7}
 8004cc8:	4770      	bx	lr
 8004cca:	bf00      	nop
 8004ccc:	20000018 	.word	0x20000018
 8004cd0:	10624dd3 	.word	0x10624dd3

08004cd4 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004cd4:	b580      	push	{r7, lr}
 8004cd6:	b086      	sub	sp, #24
 8004cd8:	af00      	add	r7, sp, #0
 8004cda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8004cdc:	2300      	movs	r3, #0
 8004cde:	613b      	str	r3, [r7, #16]
 8004ce0:	2300      	movs	r3, #0
 8004ce2:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*------------------------------- RTC/LCD Configuration ------------------------*/ 
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	f003 0301 	and.w	r3, r3, #1
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d07d      	beq.n	8004dec <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 8004cf0:	2300      	movs	r3, #0
 8004cf2:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004cf4:	4b4f      	ldr	r3, [pc, #316]	; (8004e34 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004cf6:	69db      	ldr	r3, [r3, #28]
 8004cf8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d10d      	bne.n	8004d1c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004d00:	4b4c      	ldr	r3, [pc, #304]	; (8004e34 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004d02:	69db      	ldr	r3, [r3, #28]
 8004d04:	4a4b      	ldr	r2, [pc, #300]	; (8004e34 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004d06:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004d0a:	61d3      	str	r3, [r2, #28]
 8004d0c:	4b49      	ldr	r3, [pc, #292]	; (8004e34 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004d0e:	69db      	ldr	r3, [r3, #28]
 8004d10:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d14:	60bb      	str	r3, [r7, #8]
 8004d16:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004d18:	2301      	movs	r3, #1
 8004d1a:	75fb      	strb	r3, [r7, #23]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004d1c:	4b46      	ldr	r3, [pc, #280]	; (8004e38 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d118      	bne.n	8004d5a <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004d28:	4b43      	ldr	r3, [pc, #268]	; (8004e38 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	4a42      	ldr	r2, [pc, #264]	; (8004e38 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004d2e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004d32:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004d34:	f7fd feae 	bl	8002a94 <HAL_GetTick>
 8004d38:	6138      	str	r0, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004d3a:	e008      	b.n	8004d4e <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004d3c:	f7fd feaa 	bl	8002a94 <HAL_GetTick>
 8004d40:	4602      	mov	r2, r0
 8004d42:	693b      	ldr	r3, [r7, #16]
 8004d44:	1ad3      	subs	r3, r2, r3
 8004d46:	2b64      	cmp	r3, #100	; 0x64
 8004d48:	d901      	bls.n	8004d4e <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8004d4a:	2303      	movs	r3, #3
 8004d4c:	e06d      	b.n	8004e2a <HAL_RCCEx_PeriphCLKConfig+0x156>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004d4e:	4b3a      	ldr	r3, [pc, #232]	; (8004e38 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d0f0      	beq.n	8004d3c <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }
      
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004d5a:	4b36      	ldr	r3, [pc, #216]	; (8004e34 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004d5c:	6a1b      	ldr	r3, [r3, #32]
 8004d5e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004d62:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d02e      	beq.n	8004dc8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	685b      	ldr	r3, [r3, #4]
 8004d6e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004d72:	68fa      	ldr	r2, [r7, #12]
 8004d74:	429a      	cmp	r2, r3
 8004d76:	d027      	beq.n	8004dc8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004d78:	4b2e      	ldr	r3, [pc, #184]	; (8004e34 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004d7a:	6a1b      	ldr	r3, [r3, #32]
 8004d7c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004d80:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004d82:	4b2e      	ldr	r3, [pc, #184]	; (8004e3c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004d84:	2201      	movs	r2, #1
 8004d86:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004d88:	4b2c      	ldr	r3, [pc, #176]	; (8004e3c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004d8a:	2200      	movs	r2, #0
 8004d8c:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8004d8e:	4a29      	ldr	r2, [pc, #164]	; (8004e34 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	f003 0301 	and.w	r3, r3, #1
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d014      	beq.n	8004dc8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d9e:	f7fd fe79 	bl	8002a94 <HAL_GetTick>
 8004da2:	6138      	str	r0, [r7, #16]
      
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004da4:	e00a      	b.n	8004dbc <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004da6:	f7fd fe75 	bl	8002a94 <HAL_GetTick>
 8004daa:	4602      	mov	r2, r0
 8004dac:	693b      	ldr	r3, [r7, #16]
 8004dae:	1ad3      	subs	r3, r2, r3
 8004db0:	f241 3288 	movw	r2, #5000	; 0x1388
 8004db4:	4293      	cmp	r3, r2
 8004db6:	d901      	bls.n	8004dbc <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8004db8:	2303      	movs	r3, #3
 8004dba:	e036      	b.n	8004e2a <HAL_RCCEx_PeriphCLKConfig+0x156>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004dbc:	4b1d      	ldr	r3, [pc, #116]	; (8004e34 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004dbe:	6a1b      	ldr	r3, [r3, #32]
 8004dc0:	f003 0302 	and.w	r3, r3, #2
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d0ee      	beq.n	8004da6 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8004dc8:	4b1a      	ldr	r3, [pc, #104]	; (8004e34 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004dca:	6a1b      	ldr	r3, [r3, #32]
 8004dcc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	685b      	ldr	r3, [r3, #4]
 8004dd4:	4917      	ldr	r1, [pc, #92]	; (8004e34 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004dd6:	4313      	orrs	r3, r2
 8004dd8:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004dda:	7dfb      	ldrb	r3, [r7, #23]
 8004ddc:	2b01      	cmp	r3, #1
 8004dde:	d105      	bne.n	8004dec <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004de0:	4b14      	ldr	r3, [pc, #80]	; (8004e34 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004de2:	69db      	ldr	r3, [r3, #28]
 8004de4:	4a13      	ldr	r2, [pc, #76]	; (8004e34 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004de6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004dea:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	f003 0302 	and.w	r3, r3, #2
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d008      	beq.n	8004e0a <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));
    
    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004df8:	4b0e      	ldr	r3, [pc, #56]	; (8004e34 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004dfa:	685b      	ldr	r3, [r3, #4]
 8004dfc:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	689b      	ldr	r3, [r3, #8]
 8004e04:	490b      	ldr	r1, [pc, #44]	; (8004e34 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004e06:	4313      	orrs	r3, r2
 8004e08:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	f003 0310 	and.w	r3, r3, #16
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d008      	beq.n	8004e28 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004e16:	4b07      	ldr	r3, [pc, #28]	; (8004e34 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004e18:	685b      	ldr	r3, [r3, #4]
 8004e1a:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	68db      	ldr	r3, [r3, #12]
 8004e22:	4904      	ldr	r1, [pc, #16]	; (8004e34 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004e24:	4313      	orrs	r3, r2
 8004e26:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8004e28:	2300      	movs	r3, #0
}
 8004e2a:	4618      	mov	r0, r3
 8004e2c:	3718      	adds	r7, #24
 8004e2e:	46bd      	mov	sp, r7
 8004e30:	bd80      	pop	{r7, pc}
 8004e32:	bf00      	nop
 8004e34:	40021000 	.word	0x40021000
 8004e38:	40007000 	.word	0x40007000
 8004e3c:	42420440 	.word	0x42420440

08004e40 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8004e40:	b590      	push	{r4, r7, lr}
 8004e42:	b08d      	sub	sp, #52	; 0x34
 8004e44:	af00      	add	r7, sp, #0
 8004e46:	6078      	str	r0, [r7, #4]
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8004e48:	4b57      	ldr	r3, [pc, #348]	; (8004fa8 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8004e4a:	f107 040c 	add.w	r4, r7, #12
 8004e4e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004e50:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8004e54:	4b55      	ldr	r3, [pc, #340]	; (8004fac <HAL_RCCEx_GetPeriphCLKFreq+0x16c>)
 8004e56:	881b      	ldrh	r3, [r3, #0]
 8004e58:	813b      	strh	r3, [r7, #8]

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8004e5a:	2300      	movs	r3, #0
 8004e5c:	627b      	str	r3, [r7, #36]	; 0x24
 8004e5e:	2300      	movs	r3, #0
 8004e60:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004e62:	2300      	movs	r3, #0
 8004e64:	623b      	str	r3, [r7, #32]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8004e66:	2300      	movs	r3, #0
 8004e68:	61fb      	str	r3, [r7, #28]
 8004e6a:	2300      	movs	r3, #0
 8004e6c:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));
  
  switch (PeriphClk)
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	2b02      	cmp	r3, #2
 8004e72:	f000 8084 	beq.w	8004f7e <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 8004e76:	2b10      	cmp	r3, #16
 8004e78:	d002      	beq.n	8004e80 <HAL_RCCEx_GetPeriphCLKFreq+0x40>
 8004e7a:	2b01      	cmp	r3, #1
 8004e7c:	d049      	beq.n	8004f12 <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
  default: 
    {
      break;
 8004e7e:	e08d      	b.n	8004f9c <HAL_RCCEx_GetPeriphCLKFreq+0x15c>
      temp_reg = RCC->CFGR;
 8004e80:	4b4b      	ldr	r3, [pc, #300]	; (8004fb0 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8004e82:	685b      	ldr	r3, [r3, #4]
 8004e84:	61fb      	str	r3, [r7, #28]
      if (HAL_IS_BIT_SET(RCC->CR,RCC_CR_PLLON))
 8004e86:	4b4a      	ldr	r3, [pc, #296]	; (8004fb0 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	f000 8083 	beq.w	8004f9a <HAL_RCCEx_GetPeriphCLKFreq+0x15a>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004e94:	69fb      	ldr	r3, [r7, #28]
 8004e96:	0c9b      	lsrs	r3, r3, #18
 8004e98:	f003 030f 	and.w	r3, r3, #15
 8004e9c:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8004ea0:	4413      	add	r3, r2
 8004ea2:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8004ea6:	623b      	str	r3, [r7, #32]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004ea8:	69fb      	ldr	r3, [r7, #28]
 8004eaa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d018      	beq.n	8004ee4 <HAL_RCCEx_GetPeriphCLKFreq+0xa4>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004eb2:	4b3f      	ldr	r3, [pc, #252]	; (8004fb0 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8004eb4:	685b      	ldr	r3, [r3, #4]
 8004eb6:	0c5b      	lsrs	r3, r3, #17
 8004eb8:	f003 0301 	and.w	r3, r3, #1
 8004ebc:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8004ec0:	4413      	add	r3, r2
 8004ec2:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8004ec6:	627b      	str	r3, [r7, #36]	; 0x24
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004ec8:	69fb      	ldr	r3, [r7, #28]
 8004eca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d00d      	beq.n	8004eee <HAL_RCCEx_GetPeriphCLKFreq+0xae>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8004ed2:	4a38      	ldr	r2, [pc, #224]	; (8004fb4 <HAL_RCCEx_GetPeriphCLKFreq+0x174>)
 8004ed4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ed6:	fbb2 f2f3 	udiv	r2, r2, r3
 8004eda:	6a3b      	ldr	r3, [r7, #32]
 8004edc:	fb02 f303 	mul.w	r3, r2, r3
 8004ee0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004ee2:	e004      	b.n	8004eee <HAL_RCCEx_GetPeriphCLKFreq+0xae>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004ee4:	6a3b      	ldr	r3, [r7, #32]
 8004ee6:	4a34      	ldr	r2, [pc, #208]	; (8004fb8 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8004ee8:	fb02 f303 	mul.w	r3, r2, r3
 8004eec:	62fb      	str	r3, [r7, #44]	; 0x2c
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8004eee:	4b30      	ldr	r3, [pc, #192]	; (8004fb0 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8004ef0:	685b      	ldr	r3, [r3, #4]
 8004ef2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004ef6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004efa:	d102      	bne.n	8004f02 <HAL_RCCEx_GetPeriphCLKFreq+0xc2>
          frequency = pllclk;
 8004efc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004efe:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8004f00:	e04b      	b.n	8004f9a <HAL_RCCEx_GetPeriphCLKFreq+0x15a>
          frequency = (pllclk * 2) / 3;
 8004f02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f04:	005b      	lsls	r3, r3, #1
 8004f06:	4a2d      	ldr	r2, [pc, #180]	; (8004fbc <HAL_RCCEx_GetPeriphCLKFreq+0x17c>)
 8004f08:	fba2 2303 	umull	r2, r3, r2, r3
 8004f0c:	085b      	lsrs	r3, r3, #1
 8004f0e:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8004f10:	e043      	b.n	8004f9a <HAL_RCCEx_GetPeriphCLKFreq+0x15a>
      temp_reg = RCC->BDCR;
 8004f12:	4b27      	ldr	r3, [pc, #156]	; (8004fb0 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8004f14:	6a1b      	ldr	r3, [r3, #32]
 8004f16:	61fb      	str	r3, [r7, #28]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8004f18:	69fb      	ldr	r3, [r7, #28]
 8004f1a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004f1e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004f22:	d108      	bne.n	8004f36 <HAL_RCCEx_GetPeriphCLKFreq+0xf6>
 8004f24:	69fb      	ldr	r3, [r7, #28]
 8004f26:	f003 0302 	and.w	r3, r3, #2
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d003      	beq.n	8004f36 <HAL_RCCEx_GetPeriphCLKFreq+0xf6>
        frequency = LSE_VALUE;
 8004f2e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004f32:	62bb      	str	r3, [r7, #40]	; 0x28
 8004f34:	e022      	b.n	8004f7c <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8004f36:	69fb      	ldr	r3, [r7, #28]
 8004f38:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004f3c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004f40:	d109      	bne.n	8004f56 <HAL_RCCEx_GetPeriphCLKFreq+0x116>
 8004f42:	4b1b      	ldr	r3, [pc, #108]	; (8004fb0 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8004f44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f46:	f003 0302 	and.w	r3, r3, #2
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d003      	beq.n	8004f56 <HAL_RCCEx_GetPeriphCLKFreq+0x116>
        frequency = LSI_VALUE;
 8004f4e:	f649 4340 	movw	r3, #40000	; 0x9c40
 8004f52:	62bb      	str	r3, [r7, #40]	; 0x28
 8004f54:	e012      	b.n	8004f7c <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8004f56:	69fb      	ldr	r3, [r7, #28]
 8004f58:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004f5c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004f60:	d109      	bne.n	8004f76 <HAL_RCCEx_GetPeriphCLKFreq+0x136>
 8004f62:	4b13      	ldr	r3, [pc, #76]	; (8004fb0 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d003      	beq.n	8004f76 <HAL_RCCEx_GetPeriphCLKFreq+0x136>
        frequency = HSE_VALUE / 128U;
 8004f6e:	f24f 4324 	movw	r3, #62500	; 0xf424
 8004f72:	62bb      	str	r3, [r7, #40]	; 0x28
 8004f74:	e002      	b.n	8004f7c <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
        frequency = 0U;
 8004f76:	2300      	movs	r3, #0
 8004f78:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8004f7a:	e00f      	b.n	8004f9c <HAL_RCCEx_GetPeriphCLKFreq+0x15c>
 8004f7c:	e00e      	b.n	8004f9c <HAL_RCCEx_GetPeriphCLKFreq+0x15c>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8004f7e:	f7ff fe77 	bl	8004c70 <HAL_RCC_GetPCLK2Freq>
 8004f82:	4602      	mov	r2, r0
 8004f84:	4b0a      	ldr	r3, [pc, #40]	; (8004fb0 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8004f86:	685b      	ldr	r3, [r3, #4]
 8004f88:	0b9b      	lsrs	r3, r3, #14
 8004f8a:	f003 0303 	and.w	r3, r3, #3
 8004f8e:	3301      	adds	r3, #1
 8004f90:	005b      	lsls	r3, r3, #1
 8004f92:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f96:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8004f98:	e000      	b.n	8004f9c <HAL_RCCEx_GetPeriphCLKFreq+0x15c>
      break;
 8004f9a:	bf00      	nop
    }
  }
  return(frequency);
 8004f9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8004f9e:	4618      	mov	r0, r3
 8004fa0:	3734      	adds	r7, #52	; 0x34
 8004fa2:	46bd      	mov	sp, r7
 8004fa4:	bd90      	pop	{r4, r7, pc}
 8004fa6:	bf00      	nop
 8004fa8:	0800a280 	.word	0x0800a280
 8004fac:	0800a290 	.word	0x0800a290
 8004fb0:	40021000 	.word	0x40021000
 8004fb4:	007a1200 	.word	0x007a1200
 8004fb8:	003d0900 	.word	0x003d0900
 8004fbc:	aaaaaaab 	.word	0xaaaaaaab

08004fc0 <HAL_RTC_Init>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8004fc0:	b580      	push	{r7, lr}
 8004fc2:	b084      	sub	sp, #16
 8004fc4:	af00      	add	r7, sp, #0
 8004fc6:	6078      	str	r0, [r7, #4]
  uint32_t prescaler = 0U;
 8004fc8:	2300      	movs	r3, #0
 8004fca:	60fb      	str	r3, [r7, #12]
  /* Check input parameters */
  if(hrtc == NULL)
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d101      	bne.n	8004fd6 <HAL_RTC_Init+0x16>
  {
     return HAL_ERROR;
 8004fd2:	2301      	movs	r3, #1
 8004fd4:	e084      	b.n	80050e0 <HAL_RTC_Init+0x120>
  /* Check the parameters */
  assert_param(IS_RTC_ALL_INSTANCE(hrtc->Instance));
  assert_param(IS_RTC_CALIB_OUTPUT(hrtc->Init.OutPut));
  assert_param(IS_RTC_ASYNCH_PREDIV(hrtc->Init.AsynchPrediv));
    
  if(hrtc->State == HAL_RTC_STATE_RESET)
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	7c5b      	ldrb	r3, [r3, #17]
 8004fda:	b2db      	uxtb	r3, r3
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d105      	bne.n	8004fec <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	2200      	movs	r2, #0
 8004fe4:	741a      	strb	r2, [r3, #16]
    
    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8004fe6:	6878      	ldr	r0, [r7, #4]
 8004fe8:	f7fd f82a 	bl	8002040 <HAL_RTC_MspInit>
  }
  
  /* Set RTC state */  
  hrtc->State = HAL_RTC_STATE_BUSY;  
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	2202      	movs	r2, #2
 8004ff0:	745a      	strb	r2, [r3, #17]
       
  /* Waiting for synchro */
  if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004ff2:	6878      	ldr	r0, [r7, #4]
 8004ff4:	f000 f9c8 	bl	8005388 <HAL_RTC_WaitForSynchro>
 8004ff8:	4603      	mov	r3, r0
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d004      	beq.n	8005008 <HAL_RTC_Init+0x48>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	2204      	movs	r2, #4
 8005002:	745a      	strb	r2, [r3, #17]
    
    return HAL_ERROR;
 8005004:	2301      	movs	r3, #1
 8005006:	e06b      	b.n	80050e0 <HAL_RTC_Init+0x120>
  } 

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8005008:	6878      	ldr	r0, [r7, #4]
 800500a:	f000 fa81 	bl	8005510 <RTC_EnterInitMode>
 800500e:	4603      	mov	r3, r0
 8005010:	2b00      	cmp	r3, #0
 8005012:	d004      	beq.n	800501e <HAL_RTC_Init+0x5e>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	2204      	movs	r2, #4
 8005018:	745a      	strb	r2, [r3, #17]
    
    return HAL_ERROR;
 800501a:	2301      	movs	r3, #1
 800501c:	e060      	b.n	80050e0 <HAL_RTC_Init+0x120>
  } 
  else
  { 
    /* Clear Flags Bits */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_OW | RTC_FLAG_ALRAF | RTC_FLAG_SEC));
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	685a      	ldr	r2, [r3, #4]
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	f022 0207 	bic.w	r2, r2, #7
 800502c:	605a      	str	r2, [r3, #4]
    
    if(hrtc->Init.OutPut != RTC_OUTPUTSOURCE_NONE)
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	689b      	ldr	r3, [r3, #8]
 8005032:	2b00      	cmp	r3, #0
 8005034:	d005      	beq.n	8005042 <HAL_RTC_Init+0x82>
    {
      /* Disable the selected Tamper pin */
      CLEAR_BIT(BKP->CR, BKP_CR_TPE);
 8005036:	4b2c      	ldr	r3, [pc, #176]	; (80050e8 <HAL_RTC_Init+0x128>)
 8005038:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800503a:	4a2b      	ldr	r2, [pc, #172]	; (80050e8 <HAL_RTC_Init+0x128>)
 800503c:	f023 0301 	bic.w	r3, r3, #1
 8005040:	6313      	str	r3, [r2, #48]	; 0x30
    }
    
    /* Set the signal which will be routed to RTC Tamper pin*/
    MODIFY_REG(BKP->RTCCR, (BKP_RTCCR_CCO | BKP_RTCCR_ASOE | BKP_RTCCR_ASOS), hrtc->Init.OutPut);
 8005042:	4b29      	ldr	r3, [pc, #164]	; (80050e8 <HAL_RTC_Init+0x128>)
 8005044:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005046:	f423 7260 	bic.w	r2, r3, #896	; 0x380
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	689b      	ldr	r3, [r3, #8]
 800504e:	4926      	ldr	r1, [pc, #152]	; (80050e8 <HAL_RTC_Init+0x128>)
 8005050:	4313      	orrs	r3, r2
 8005052:	62cb      	str	r3, [r1, #44]	; 0x2c

    if (hrtc->Init.AsynchPrediv != RTC_AUTO_1_SECOND)
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	685b      	ldr	r3, [r3, #4]
 8005058:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800505c:	d003      	beq.n	8005066 <HAL_RTC_Init+0xa6>
    {
      /* RTC Prescaler provided directly by end-user*/
      prescaler = hrtc->Init.AsynchPrediv;
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	685b      	ldr	r3, [r3, #4]
 8005062:	60fb      	str	r3, [r7, #12]
 8005064:	e00e      	b.n	8005084 <HAL_RTC_Init+0xc4>
    }
    else
    {
      /* RTC Prescaler will be automatically calculated to get 1 second timebase */
      /* Get the RTCCLK frequency */
      prescaler = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_RTC);
 8005066:	2001      	movs	r0, #1
 8005068:	f7ff feea 	bl	8004e40 <HAL_RCCEx_GetPeriphCLKFreq>
 800506c:	60f8      	str	r0, [r7, #12]

      /* Check that RTC clock is enabled*/
      if (prescaler == 0U)
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	2b00      	cmp	r3, #0
 8005072:	d104      	bne.n	800507e <HAL_RTC_Init+0xbe>
      {
        /* Should not happen. Frequency is not available*/
        hrtc->State = HAL_RTC_STATE_ERROR;
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	2204      	movs	r2, #4
 8005078:	745a      	strb	r2, [r3, #17]
        return HAL_ERROR;
 800507a:	2301      	movs	r3, #1
 800507c:	e030      	b.n	80050e0 <HAL_RTC_Init+0x120>
      }
      else
      {
        /* RTC period = RTCCLK/(RTC_PR + 1) */
        prescaler = prescaler - 1U;
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	3b01      	subs	r3, #1
 8005082:	60fb      	str	r3, [r7, #12]
      }
    }
    
    /* Configure the RTC_PRLH / RTC_PRLL */
    MODIFY_REG(hrtc->Instance->PRLH, RTC_PRLH_PRL, (prescaler >> 16U));
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	689b      	ldr	r3, [r3, #8]
 800508a:	f023 010f 	bic.w	r1, r3, #15
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	0c1a      	lsrs	r2, r3, #16
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	430a      	orrs	r2, r1
 8005098:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hrtc->Instance->PRLL, RTC_PRLL_PRL, (prescaler & RTC_PRLL_PRL));
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	68db      	ldr	r3, [r3, #12]
 80050a0:	0c1b      	lsrs	r3, r3, #16
 80050a2:	041b      	lsls	r3, r3, #16
 80050a4:	68fa      	ldr	r2, [r7, #12]
 80050a6:	b291      	uxth	r1, r2
 80050a8:	687a      	ldr	r2, [r7, #4]
 80050aa:	6812      	ldr	r2, [r2, #0]
 80050ac:	430b      	orrs	r3, r1
 80050ae:	60d3      	str	r3, [r2, #12]
      
    /* Wait for synchro */
    if(RTC_ExitInitMode(hrtc) != HAL_OK)
 80050b0:	6878      	ldr	r0, [r7, #4]
 80050b2:	f000 fa55 	bl	8005560 <RTC_ExitInitMode>
 80050b6:	4603      	mov	r3, r0
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d004      	beq.n	80050c6 <HAL_RTC_Init+0x106>
    {       
      hrtc->State = HAL_RTC_STATE_ERROR;
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	2204      	movs	r2, #4
 80050c0:	745a      	strb	r2, [r3, #17]
      
      return HAL_ERROR;
 80050c2:	2301      	movs	r3, #1
 80050c4:	e00c      	b.n	80050e0 <HAL_RTC_Init+0x120>
    }
    
    /* Initialize date to 1st of January 2000 */
    hrtc->DateToUpdate.Year = 0x00U;
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	2200      	movs	r2, #0
 80050ca:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_MONTH_JANUARY;
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	2201      	movs	r2, #1
 80050d0:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date = 0x01U;
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	2201      	movs	r2, #1
 80050d6:	739a      	strb	r2, [r3, #14]

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	2201      	movs	r2, #1
 80050dc:	745a      	strb	r2, [r3, #17]
    
    return HAL_OK;
 80050de:	2300      	movs	r3, #0
  }
}
 80050e0:	4618      	mov	r0, r3
 80050e2:	3710      	adds	r7, #16
 80050e4:	46bd      	mov	sp, r7
 80050e6:	bd80      	pop	{r7, pc}
 80050e8:	40006c00 	.word	0x40006c00

080050ec <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format 
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80050ec:	b590      	push	{r4, r7, lr}
 80050ee:	b087      	sub	sp, #28
 80050f0:	af00      	add	r7, sp, #0
 80050f2:	60f8      	str	r0, [r7, #12]
 80050f4:	60b9      	str	r1, [r7, #8]
 80050f6:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U;
 80050f8:	2300      	movs	r3, #0
 80050fa:	617b      	str	r3, [r7, #20]
 80050fc:	2300      	movs	r3, #0
 80050fe:	613b      	str	r3, [r7, #16]
  
  /* Check input parameters */
  if((hrtc == NULL) || (sTime == NULL))
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	2b00      	cmp	r3, #0
 8005104:	d002      	beq.n	800510c <HAL_RTC_SetTime+0x20>
 8005106:	68bb      	ldr	r3, [r7, #8]
 8005108:	2b00      	cmp	r3, #0
 800510a:	d101      	bne.n	8005110 <HAL_RTC_SetTime+0x24>
  {
     return HAL_ERROR;
 800510c:	2301      	movs	r3, #1
 800510e:	e080      	b.n	8005212 <HAL_RTC_SetTime+0x126>
  
 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));
  
  /* Process Locked */ 
  __HAL_LOCK(hrtc);
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	7c1b      	ldrb	r3, [r3, #16]
 8005114:	2b01      	cmp	r3, #1
 8005116:	d101      	bne.n	800511c <HAL_RTC_SetTime+0x30>
 8005118:	2302      	movs	r3, #2
 800511a:	e07a      	b.n	8005212 <HAL_RTC_SetTime+0x126>
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	2201      	movs	r2, #1
 8005120:	741a      	strb	r2, [r3, #16]
  
  hrtc->State = HAL_RTC_STATE_BUSY;
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	2202      	movs	r2, #2
 8005126:	745a      	strb	r2, [r3, #17]
  
  if(Format == RTC_FORMAT_BIN)
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	2b00      	cmp	r3, #0
 800512c:	d113      	bne.n	8005156 <HAL_RTC_SetTime+0x6a>
  {
    assert_param(IS_RTC_HOUR24(sTime->Hours));
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 800512e:	68bb      	ldr	r3, [r7, #8]
 8005130:	781b      	ldrb	r3, [r3, #0]
 8005132:	461a      	mov	r2, r3
 8005134:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8005138:	fb03 f202 	mul.w	r2, r3, r2
                        ((uint32_t)sTime->Minutes * 60U) + \
 800513c:	68bb      	ldr	r3, [r7, #8]
 800513e:	785b      	ldrb	r3, [r3, #1]
 8005140:	4619      	mov	r1, r3
 8005142:	460b      	mov	r3, r1
 8005144:	011b      	lsls	r3, r3, #4
 8005146:	1a5b      	subs	r3, r3, r1
 8005148:	009b      	lsls	r3, r3, #2
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 800514a:	4413      	add	r3, r2
                        ((uint32_t)sTime->Seconds));  
 800514c:	68ba      	ldr	r2, [r7, #8]
 800514e:	7892      	ldrb	r2, [r2, #2]
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 8005150:	4413      	add	r3, r2
 8005152:	617b      	str	r3, [r7, #20]
 8005154:	e01e      	b.n	8005194 <HAL_RTC_SetTime+0xa8>
  {
    assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));

    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8005156:	68bb      	ldr	r3, [r7, #8]
 8005158:	781b      	ldrb	r3, [r3, #0]
 800515a:	4618      	mov	r0, r3
 800515c:	f000 fa28 	bl	80055b0 <RTC_Bcd2ToByte>
 8005160:	4603      	mov	r3, r0
 8005162:	461a      	mov	r2, r3
 8005164:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8005168:	fb03 f402 	mul.w	r4, r3, r2
              ((uint32_t)(RTC_Bcd2ToByte(sTime->Minutes)) * 60U) + \
 800516c:	68bb      	ldr	r3, [r7, #8]
 800516e:	785b      	ldrb	r3, [r3, #1]
 8005170:	4618      	mov	r0, r3
 8005172:	f000 fa1d 	bl	80055b0 <RTC_Bcd2ToByte>
 8005176:	4603      	mov	r3, r0
 8005178:	461a      	mov	r2, r3
 800517a:	4613      	mov	r3, r2
 800517c:	011b      	lsls	r3, r3, #4
 800517e:	1a9b      	subs	r3, r3, r2
 8005180:	009b      	lsls	r3, r3, #2
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8005182:	441c      	add	r4, r3
              ((uint32_t)(RTC_Bcd2ToByte(sTime->Seconds))));   
 8005184:	68bb      	ldr	r3, [r7, #8]
 8005186:	789b      	ldrb	r3, [r3, #2]
 8005188:	4618      	mov	r0, r3
 800518a:	f000 fa11 	bl	80055b0 <RTC_Bcd2ToByte>
 800518e:	4603      	mov	r3, r0
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8005190:	4423      	add	r3, r4
 8005192:	617b      	str	r3, [r7, #20]
  }

  /* Write time counter in RTC registers */
  if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 8005194:	6979      	ldr	r1, [r7, #20]
 8005196:	68f8      	ldr	r0, [r7, #12]
 8005198:	f000 f953 	bl	8005442 <RTC_WriteTimeCounter>
 800519c:	4603      	mov	r3, r0
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d007      	beq.n	80051b2 <HAL_RTC_SetTime+0xc6>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	2204      	movs	r2, #4
 80051a6:	745a      	strb	r2, [r3, #17]
    
    /* Process Unlocked */ 
    __HAL_UNLOCK(hrtc);
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	2200      	movs	r2, #0
 80051ac:	741a      	strb	r2, [r3, #16]
    
    return HAL_ERROR;
 80051ae:	2301      	movs	r3, #1
 80051b0:	e02f      	b.n	8005212 <HAL_RTC_SetTime+0x126>
  }
  else
  {
    /* Clear Second and overflow flags */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_SEC | RTC_FLAG_OW));
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	685a      	ldr	r2, [r3, #4]
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	f022 0205 	bic.w	r2, r2, #5
 80051c0:	605a      	str	r2, [r3, #4]
    
    /* Read current Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 80051c2:	68f8      	ldr	r0, [r7, #12]
 80051c4:	f000 f964 	bl	8005490 <RTC_ReadAlarmCounter>
 80051c8:	6138      	str	r0, [r7, #16]

    /* Set again alarm to match with new time if enabled */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 80051ca:	693b      	ldr	r3, [r7, #16]
 80051cc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80051d0:	d018      	beq.n	8005204 <HAL_RTC_SetTime+0x118>
    {
      if(counter_alarm < counter_time)
 80051d2:	693a      	ldr	r2, [r7, #16]
 80051d4:	697b      	ldr	r3, [r7, #20]
 80051d6:	429a      	cmp	r2, r3
 80051d8:	d214      	bcs.n	8005204 <HAL_RTC_SetTime+0x118>
      {
        /* Add 1 day to alarm counter*/
        counter_alarm += (uint32_t)(24U * 3600U);
 80051da:	693b      	ldr	r3, [r7, #16]
 80051dc:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
 80051e0:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 80051e4:	613b      	str	r3, [r7, #16]
        
        /* Write new Alarm counter in RTC registers */
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 80051e6:	6939      	ldr	r1, [r7, #16]
 80051e8:	68f8      	ldr	r0, [r7, #12]
 80051ea:	f000 f96a 	bl	80054c2 <RTC_WriteAlarmCounter>
 80051ee:	4603      	mov	r3, r0
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d007      	beq.n	8005204 <HAL_RTC_SetTime+0x118>
        {
          /* Set RTC state */
          hrtc->State = HAL_RTC_STATE_ERROR;
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	2204      	movs	r2, #4
 80051f8:	745a      	strb	r2, [r3, #17]
          
          /* Process Unlocked */ 
          __HAL_UNLOCK(hrtc);
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	2200      	movs	r2, #0
 80051fe:	741a      	strb	r2, [r3, #16]
          
          return HAL_ERROR;
 8005200:	2301      	movs	r3, #1
 8005202:	e006      	b.n	8005212 <HAL_RTC_SetTime+0x126>
        }
      }
    }
    
    hrtc->State = HAL_RTC_STATE_READY;
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	2201      	movs	r2, #1
 8005208:	745a      	strb	r2, [r3, #17]
  
   __HAL_UNLOCK(hrtc); 
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	2200      	movs	r2, #0
 800520e:	741a      	strb	r2, [r3, #16]
     
   return HAL_OK;
 8005210:	2300      	movs	r3, #0
  }
}
 8005212:	4618      	mov	r0, r3
 8005214:	371c      	adds	r7, #28
 8005216:	46bd      	mov	sp, r7
 8005218:	bd90      	pop	{r4, r7, pc}
	...

0800521c <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format 
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800521c:	b580      	push	{r7, lr}
 800521e:	b088      	sub	sp, #32
 8005220:	af00      	add	r7, sp, #0
 8005222:	60f8      	str	r0, [r7, #12]
 8005224:	60b9      	str	r1, [r7, #8]
 8005226:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U, hours = 0U;
 8005228:	2300      	movs	r3, #0
 800522a:	61fb      	str	r3, [r7, #28]
 800522c:	2300      	movs	r3, #0
 800522e:	61bb      	str	r3, [r7, #24]
 8005230:	2300      	movs	r3, #0
 8005232:	617b      	str	r3, [r7, #20]
  
  /* Check input parameters */
  if((hrtc == NULL) || (sDate == NULL))
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	2b00      	cmp	r3, #0
 8005238:	d002      	beq.n	8005240 <HAL_RTC_SetDate+0x24>
 800523a:	68bb      	ldr	r3, [r7, #8]
 800523c:	2b00      	cmp	r3, #0
 800523e:	d101      	bne.n	8005244 <HAL_RTC_SetDate+0x28>
  {
     return HAL_ERROR;
 8005240:	2301      	movs	r3, #1
 8005242:	e097      	b.n	8005374 <HAL_RTC_SetDate+0x158>
  
  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));
  
 /* Process Locked */ 
 __HAL_LOCK(hrtc);
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	7c1b      	ldrb	r3, [r3, #16]
 8005248:	2b01      	cmp	r3, #1
 800524a:	d101      	bne.n	8005250 <HAL_RTC_SetDate+0x34>
 800524c:	2302      	movs	r3, #2
 800524e:	e091      	b.n	8005374 <HAL_RTC_SetDate+0x158>
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	2201      	movs	r2, #1
 8005254:	741a      	strb	r2, [r3, #16]
  
  hrtc->State = HAL_RTC_STATE_BUSY; 
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	2202      	movs	r2, #2
 800525a:	745a      	strb	r2, [r3, #17]
  
  if(Format == RTC_FORMAT_BIN)
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	2b00      	cmp	r3, #0
 8005260:	d10c      	bne.n	800527c <HAL_RTC_SetDate+0x60>
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date)); 

    /* Change the current date */
    hrtc->DateToUpdate.Year  = sDate->Year;
 8005262:	68bb      	ldr	r3, [r7, #8]
 8005264:	78da      	ldrb	r2, [r3, #3]
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = sDate->Month;
 800526a:	68bb      	ldr	r3, [r7, #8]
 800526c:	785a      	ldrb	r2, [r3, #1]
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date  = sDate->Date;
 8005272:	68bb      	ldr	r3, [r7, #8]
 8005274:	789a      	ldrb	r2, [r3, #2]
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	739a      	strb	r2, [r3, #14]
 800527a:	e01a      	b.n	80052b2 <HAL_RTC_SetDate+0x96>
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));
    
    /* Change the current date */
    hrtc->DateToUpdate.Year  = RTC_Bcd2ToByte(sDate->Year);
 800527c:	68bb      	ldr	r3, [r7, #8]
 800527e:	78db      	ldrb	r3, [r3, #3]
 8005280:	4618      	mov	r0, r3
 8005282:	f000 f995 	bl	80055b0 <RTC_Bcd2ToByte>
 8005286:	4603      	mov	r3, r0
 8005288:	461a      	mov	r2, r3
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_Bcd2ToByte(sDate->Month);
 800528e:	68bb      	ldr	r3, [r7, #8]
 8005290:	785b      	ldrb	r3, [r3, #1]
 8005292:	4618      	mov	r0, r3
 8005294:	f000 f98c 	bl	80055b0 <RTC_Bcd2ToByte>
 8005298:	4603      	mov	r3, r0
 800529a:	461a      	mov	r2, r3
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date  = RTC_Bcd2ToByte(sDate->Date);
 80052a0:	68bb      	ldr	r3, [r7, #8]
 80052a2:	789b      	ldrb	r3, [r3, #2]
 80052a4:	4618      	mov	r0, r3
 80052a6:	f000 f983 	bl	80055b0 <RTC_Bcd2ToByte>
 80052aa:	4603      	mov	r3, r0
 80052ac:	461a      	mov	r2, r3
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	739a      	strb	r2, [r3, #14]
  }

  /* WeekDay set by user can be ignored because automatically calculated */
  hrtc->DateToUpdate.WeekDay = RTC_WeekDayNum(hrtc->DateToUpdate.Year, hrtc->DateToUpdate.Month, hrtc->DateToUpdate.Date);
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	7bdb      	ldrb	r3, [r3, #15]
 80052b6:	4618      	mov	r0, r3
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	7b59      	ldrb	r1, [r3, #13]
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	7b9b      	ldrb	r3, [r3, #14]
 80052c0:	461a      	mov	r2, r3
 80052c2:	f000 f993 	bl	80055ec <RTC_WeekDayNum>
 80052c6:	4603      	mov	r3, r0
 80052c8:	461a      	mov	r2, r3
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	731a      	strb	r2, [r3, #12]
  sDate->WeekDay = hrtc->DateToUpdate.WeekDay;
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	7b1a      	ldrb	r2, [r3, #12]
 80052d2:	68bb      	ldr	r3, [r7, #8]
 80052d4:	701a      	strb	r2, [r3, #0]

  /* Reset time to be aligned on the same day */
  /* Read the time counter*/
  counter_time = RTC_ReadTimeCounter(hrtc);
 80052d6:	68f8      	ldr	r0, [r7, #12]
 80052d8:	f000 f883 	bl	80053e2 <RTC_ReadTimeCounter>
 80052dc:	61f8      	str	r0, [r7, #28]

  /* Fill the structure fields with the read parameters */
  hours = counter_time / 3600U;
 80052de:	69fb      	ldr	r3, [r7, #28]
 80052e0:	4a26      	ldr	r2, [pc, #152]	; (800537c <HAL_RTC_SetDate+0x160>)
 80052e2:	fba2 2303 	umull	r2, r3, r2, r3
 80052e6:	0adb      	lsrs	r3, r3, #11
 80052e8:	617b      	str	r3, [r7, #20]
  if (hours > 24U)
 80052ea:	697b      	ldr	r3, [r7, #20]
 80052ec:	2b18      	cmp	r3, #24
 80052ee:	d93a      	bls.n	8005366 <HAL_RTC_SetDate+0x14a>
  {
    /* Set updated time in decreasing counter by number of days elapsed */
    counter_time -= ((hours / 24U) * 24U * 3600U);
 80052f0:	697b      	ldr	r3, [r7, #20]
 80052f2:	4a23      	ldr	r2, [pc, #140]	; (8005380 <HAL_RTC_SetDate+0x164>)
 80052f4:	fba2 2303 	umull	r2, r3, r2, r3
 80052f8:	091b      	lsrs	r3, r3, #4
 80052fa:	4a22      	ldr	r2, [pc, #136]	; (8005384 <HAL_RTC_SetDate+0x168>)
 80052fc:	fb02 f303 	mul.w	r3, r2, r3
 8005300:	69fa      	ldr	r2, [r7, #28]
 8005302:	1ad3      	subs	r3, r2, r3
 8005304:	61fb      	str	r3, [r7, #28]
    /* Write time counter in RTC registers */
    if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 8005306:	69f9      	ldr	r1, [r7, #28]
 8005308:	68f8      	ldr	r0, [r7, #12]
 800530a:	f000 f89a 	bl	8005442 <RTC_WriteTimeCounter>
 800530e:	4603      	mov	r3, r0
 8005310:	2b00      	cmp	r3, #0
 8005312:	d007      	beq.n	8005324 <HAL_RTC_SetDate+0x108>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	2204      	movs	r2, #4
 8005318:	745a      	strb	r2, [r3, #17]
      
      /* Process Unlocked */ 
      __HAL_UNLOCK(hrtc);
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	2200      	movs	r2, #0
 800531e:	741a      	strb	r2, [r3, #16]
      
      return HAL_ERROR;
 8005320:	2301      	movs	r3, #1
 8005322:	e027      	b.n	8005374 <HAL_RTC_SetDate+0x158>
    }

    /* Read current Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8005324:	68f8      	ldr	r0, [r7, #12]
 8005326:	f000 f8b3 	bl	8005490 <RTC_ReadAlarmCounter>
 800532a:	61b8      	str	r0, [r7, #24]

    /* Set again alarm to match with new time if enabled */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 800532c:	69bb      	ldr	r3, [r7, #24]
 800532e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005332:	d018      	beq.n	8005366 <HAL_RTC_SetDate+0x14a>
    {
      if(counter_alarm < counter_time)
 8005334:	69ba      	ldr	r2, [r7, #24]
 8005336:	69fb      	ldr	r3, [r7, #28]
 8005338:	429a      	cmp	r2, r3
 800533a:	d214      	bcs.n	8005366 <HAL_RTC_SetDate+0x14a>
      {
        /* Add 1 day to alarm counter*/
        counter_alarm += (uint32_t)(24U * 3600U);
 800533c:	69bb      	ldr	r3, [r7, #24]
 800533e:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
 8005342:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8005346:	61bb      	str	r3, [r7, #24]
        
        /* Write new Alarm counter in RTC registers */
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8005348:	69b9      	ldr	r1, [r7, #24]
 800534a:	68f8      	ldr	r0, [r7, #12]
 800534c:	f000 f8b9 	bl	80054c2 <RTC_WriteAlarmCounter>
 8005350:	4603      	mov	r3, r0
 8005352:	2b00      	cmp	r3, #0
 8005354:	d007      	beq.n	8005366 <HAL_RTC_SetDate+0x14a>
        {
          /* Set RTC state */
          hrtc->State = HAL_RTC_STATE_ERROR;
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	2204      	movs	r2, #4
 800535a:	745a      	strb	r2, [r3, #17]
          
          /* Process Unlocked */ 
          __HAL_UNLOCK(hrtc);
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	2200      	movs	r2, #0
 8005360:	741a      	strb	r2, [r3, #16]
          
          return HAL_ERROR;
 8005362:	2301      	movs	r3, #1
 8005364:	e006      	b.n	8005374 <HAL_RTC_SetDate+0x158>
    }
    

  }

  hrtc->State = HAL_RTC_STATE_READY ;
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	2201      	movs	r2, #1
 800536a:	745a      	strb	r2, [r3, #17]
  
  /* Process Unlocked */ 
  __HAL_UNLOCK(hrtc);
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	2200      	movs	r2, #0
 8005370:	741a      	strb	r2, [r3, #16]
  
  return HAL_OK;    
 8005372:	2300      	movs	r3, #0
}
 8005374:	4618      	mov	r0, r3
 8005376:	3720      	adds	r7, #32
 8005378:	46bd      	mov	sp, r7
 800537a:	bd80      	pop	{r7, pc}
 800537c:	91a2b3c5 	.word	0x91a2b3c5
 8005380:	aaaaaaab 	.word	0xaaaaaaab
 8005384:	00015180 	.word	0x00015180

08005388 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8005388:	b580      	push	{r7, lr}
 800538a:	b084      	sub	sp, #16
 800538c:	af00      	add	r7, sp, #0
 800538e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005390:	2300      	movs	r3, #0
 8005392:	60fb      	str	r3, [r7, #12]
  
  /* Check input parameters */
  if(hrtc == NULL)
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	2b00      	cmp	r3, #0
 8005398:	d101      	bne.n	800539e <HAL_RTC_WaitForSynchro+0x16>
  {
     return HAL_ERROR;
 800539a:	2301      	movs	r3, #1
 800539c:	e01d      	b.n	80053da <HAL_RTC_WaitForSynchro+0x52>
  }
  
  /* Clear RSF flag */
  CLEAR_BIT(hrtc->Instance->CRL, RTC_FLAG_RSF);
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	685a      	ldr	r2, [r3, #4]
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	f022 0208 	bic.w	r2, r2, #8
 80053ac:	605a      	str	r2, [r3, #4]
  
  tickstart = HAL_GetTick();
 80053ae:	f7fd fb71 	bl	8002a94 <HAL_GetTick>
 80053b2:	60f8      	str	r0, [r7, #12]
  
  /* Wait the registers to be synchronised */
  while((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 80053b4:	e009      	b.n	80053ca <HAL_RTC_WaitForSynchro+0x42>
  {
    if((HAL_GetTick() - tickstart ) >  RTC_TIMEOUT_VALUE)
 80053b6:	f7fd fb6d 	bl	8002a94 <HAL_GetTick>
 80053ba:	4602      	mov	r2, r0
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	1ad3      	subs	r3, r2, r3
 80053c0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80053c4:	d901      	bls.n	80053ca <HAL_RTC_WaitForSynchro+0x42>
    {       
      return HAL_TIMEOUT;
 80053c6:	2303      	movs	r3, #3
 80053c8:	e007      	b.n	80053da <HAL_RTC_WaitForSynchro+0x52>
  while((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	685b      	ldr	r3, [r3, #4]
 80053d0:	f003 0308 	and.w	r3, r3, #8
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d0ee      	beq.n	80053b6 <HAL_RTC_WaitForSynchro+0x2e>
    } 
  }
  
  return HAL_OK;
 80053d8:	2300      	movs	r3, #0
}
 80053da:	4618      	mov	r0, r3
 80053dc:	3710      	adds	r7, #16
 80053de:	46bd      	mov	sp, r7
 80053e0:	bd80      	pop	{r7, pc}

080053e2 <RTC_ReadTimeCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadTimeCounter(RTC_HandleTypeDef* hrtc)
{
 80053e2:	b480      	push	{r7}
 80053e4:	b087      	sub	sp, #28
 80053e6:	af00      	add	r7, sp, #0
 80053e8:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, high2 = 0U, low = 0U;
 80053ea:	2300      	movs	r3, #0
 80053ec:	827b      	strh	r3, [r7, #18]
 80053ee:	2300      	movs	r3, #0
 80053f0:	823b      	strh	r3, [r7, #16]
 80053f2:	2300      	movs	r3, #0
 80053f4:	81fb      	strh	r3, [r7, #14]
  uint32_t timecounter = 0U;
 80053f6:	2300      	movs	r3, #0
 80053f8:	617b      	str	r3, [r7, #20]

  high1 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	699b      	ldr	r3, [r3, #24]
 8005400:	827b      	strh	r3, [r7, #18]
  low   = READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT);
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	69db      	ldr	r3, [r3, #28]
 8005408:	81fb      	strh	r3, [r7, #14]
  high2 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	699b      	ldr	r3, [r3, #24]
 8005410:	823b      	strh	r3, [r7, #16]

  if (high1 != high2)
 8005412:	8a7a      	ldrh	r2, [r7, #18]
 8005414:	8a3b      	ldrh	r3, [r7, #16]
 8005416:	429a      	cmp	r2, r3
 8005418:	d008      	beq.n	800542c <RTC_ReadTimeCounter+0x4a>
  { /* In this case the counter roll over during reading of CNTL and CNTH registers, 
       read again CNTL register then return the counter value */
    timecounter = (((uint32_t) high2 << 16U) | READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT));
 800541a:	8a3b      	ldrh	r3, [r7, #16]
 800541c:	041a      	lsls	r2, r3, #16
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	69db      	ldr	r3, [r3, #28]
 8005424:	b29b      	uxth	r3, r3
 8005426:	4313      	orrs	r3, r2
 8005428:	617b      	str	r3, [r7, #20]
 800542a:	e004      	b.n	8005436 <RTC_ReadTimeCounter+0x54>
  }
  else
  { /* No counter roll over during reading of CNTL and CNTH registers, counter 
       value is equal to first value of CNTL and CNTH */
    timecounter = (((uint32_t) high1 << 16U) | low);
 800542c:	8a7b      	ldrh	r3, [r7, #18]
 800542e:	041a      	lsls	r2, r3, #16
 8005430:	89fb      	ldrh	r3, [r7, #14]
 8005432:	4313      	orrs	r3, r2
 8005434:	617b      	str	r3, [r7, #20]
  }

  return timecounter;
 8005436:	697b      	ldr	r3, [r7, #20]
}
 8005438:	4618      	mov	r0, r3
 800543a:	371c      	adds	r7, #28
 800543c:	46bd      	mov	sp, r7
 800543e:	bc80      	pop	{r7}
 8005440:	4770      	bx	lr

08005442 <RTC_WriteTimeCounter>:
  *                the configuration information for RTC.
  * @param  TimeCounter: Counter to write in RTC_CNT registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteTimeCounter(RTC_HandleTypeDef* hrtc, uint32_t TimeCounter)
{
 8005442:	b580      	push	{r7, lr}
 8005444:	b084      	sub	sp, #16
 8005446:	af00      	add	r7, sp, #0
 8005448:	6078      	str	r0, [r7, #4]
 800544a:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800544c:	2300      	movs	r3, #0
 800544e:	73fb      	strb	r3, [r7, #15]
  
  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8005450:	6878      	ldr	r0, [r7, #4]
 8005452:	f000 f85d 	bl	8005510 <RTC_EnterInitMode>
 8005456:	4603      	mov	r3, r0
 8005458:	2b00      	cmp	r3, #0
 800545a:	d002      	beq.n	8005462 <RTC_WriteTimeCounter+0x20>
  {
    status = HAL_ERROR;
 800545c:	2301      	movs	r3, #1
 800545e:	73fb      	strb	r3, [r7, #15]
 8005460:	e011      	b.n	8005486 <RTC_WriteTimeCounter+0x44>
  } 
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->CNTH, (TimeCounter >> 16U));
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	683a      	ldr	r2, [r7, #0]
 8005468:	0c12      	lsrs	r2, r2, #16
 800546a:	619a      	str	r2, [r3, #24]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->CNTL, (TimeCounter & RTC_CNTL_RTC_CNT));
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	683a      	ldr	r2, [r7, #0]
 8005472:	b292      	uxth	r2, r2
 8005474:	61da      	str	r2, [r3, #28]
    
    /* Wait for synchro */
    if(RTC_ExitInitMode(hrtc) != HAL_OK)
 8005476:	6878      	ldr	r0, [r7, #4]
 8005478:	f000 f872 	bl	8005560 <RTC_ExitInitMode>
 800547c:	4603      	mov	r3, r0
 800547e:	2b00      	cmp	r3, #0
 8005480:	d001      	beq.n	8005486 <RTC_WriteTimeCounter+0x44>
    {       
      status = HAL_ERROR;
 8005482:	2301      	movs	r3, #1
 8005484:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8005486:	7bfb      	ldrb	r3, [r7, #15]
}
 8005488:	4618      	mov	r0, r3
 800548a:	3710      	adds	r7, #16
 800548c:	46bd      	mov	sp, r7
 800548e:	bd80      	pop	{r7, pc}

08005490 <RTC_ReadAlarmCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadAlarmCounter(RTC_HandleTypeDef* hrtc)
{
 8005490:	b480      	push	{r7}
 8005492:	b085      	sub	sp, #20
 8005494:	af00      	add	r7, sp, #0
 8005496:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, low = 0U;
 8005498:	2300      	movs	r3, #0
 800549a:	81fb      	strh	r3, [r7, #14]
 800549c:	2300      	movs	r3, #0
 800549e:	81bb      	strh	r3, [r7, #12]

  high1 = READ_REG(hrtc->Instance->ALRH & RTC_CNTH_RTC_CNT);
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	6a1b      	ldr	r3, [r3, #32]
 80054a6:	81fb      	strh	r3, [r7, #14]
  low   = READ_REG(hrtc->Instance->ALRL & RTC_CNTL_RTC_CNT);
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054ae:	81bb      	strh	r3, [r7, #12]

  return (((uint32_t) high1 << 16U) | low);
 80054b0:	89fb      	ldrh	r3, [r7, #14]
 80054b2:	041a      	lsls	r2, r3, #16
 80054b4:	89bb      	ldrh	r3, [r7, #12]
 80054b6:	4313      	orrs	r3, r2
}
 80054b8:	4618      	mov	r0, r3
 80054ba:	3714      	adds	r7, #20
 80054bc:	46bd      	mov	sp, r7
 80054be:	bc80      	pop	{r7}
 80054c0:	4770      	bx	lr

080054c2 <RTC_WriteAlarmCounter>:
  *                the configuration information for RTC.
  * @param  AlarmCounter: Counter to write in RTC_ALR registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteAlarmCounter(RTC_HandleTypeDef* hrtc, uint32_t AlarmCounter)
{
 80054c2:	b580      	push	{r7, lr}
 80054c4:	b084      	sub	sp, #16
 80054c6:	af00      	add	r7, sp, #0
 80054c8:	6078      	str	r0, [r7, #4]
 80054ca:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80054cc:	2300      	movs	r3, #0
 80054ce:	73fb      	strb	r3, [r7, #15]
  
  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 80054d0:	6878      	ldr	r0, [r7, #4]
 80054d2:	f000 f81d 	bl	8005510 <RTC_EnterInitMode>
 80054d6:	4603      	mov	r3, r0
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d002      	beq.n	80054e2 <RTC_WriteAlarmCounter+0x20>
  {
    status = HAL_ERROR;
 80054dc:	2301      	movs	r3, #1
 80054de:	73fb      	strb	r3, [r7, #15]
 80054e0:	e011      	b.n	8005506 <RTC_WriteAlarmCounter+0x44>
  } 
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->ALRH, (AlarmCounter >> 16U));
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	683a      	ldr	r2, [r7, #0]
 80054e8:	0c12      	lsrs	r2, r2, #16
 80054ea:	621a      	str	r2, [r3, #32]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->ALRL, (AlarmCounter & RTC_ALRL_RTC_ALR));
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	683a      	ldr	r2, [r7, #0]
 80054f2:	b292      	uxth	r2, r2
 80054f4:	625a      	str	r2, [r3, #36]	; 0x24
    
    /* Wait for synchro */
    if(RTC_ExitInitMode(hrtc) != HAL_OK)
 80054f6:	6878      	ldr	r0, [r7, #4]
 80054f8:	f000 f832 	bl	8005560 <RTC_ExitInitMode>
 80054fc:	4603      	mov	r3, r0
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d001      	beq.n	8005506 <RTC_WriteAlarmCounter+0x44>
    {       
      status = HAL_ERROR;
 8005502:	2301      	movs	r3, #1
 8005504:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8005506:	7bfb      	ldrb	r3, [r7, #15]
}
 8005508:	4618      	mov	r0, r3
 800550a:	3710      	adds	r7, #16
 800550c:	46bd      	mov	sp, r7
 800550e:	bd80      	pop	{r7, pc}

08005510 <RTC_EnterInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8005510:	b580      	push	{r7, lr}
 8005512:	b084      	sub	sp, #16
 8005514:	af00      	add	r7, sp, #0
 8005516:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005518:	2300      	movs	r3, #0
 800551a:	60fb      	str	r3, [r7, #12]
  
  tickstart = HAL_GetTick();
 800551c:	f7fd faba 	bl	8002a94 <HAL_GetTick>
 8005520:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8005522:	e009      	b.n	8005538 <RTC_EnterInitMode+0x28>
  {
    if((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8005524:	f7fd fab6 	bl	8002a94 <HAL_GetTick>
 8005528:	4602      	mov	r2, r0
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	1ad3      	subs	r3, r2, r3
 800552e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005532:	d901      	bls.n	8005538 <RTC_EnterInitMode+0x28>
    {       
      return HAL_TIMEOUT;
 8005534:	2303      	movs	r3, #3
 8005536:	e00f      	b.n	8005558 <RTC_EnterInitMode+0x48>
  while((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	685b      	ldr	r3, [r3, #4]
 800553e:	f003 0320 	and.w	r3, r3, #32
 8005542:	2b00      	cmp	r3, #0
 8005544:	d0ee      	beq.n	8005524 <RTC_EnterInitMode+0x14>
    } 
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	685a      	ldr	r2, [r3, #4]
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	f042 0210 	orr.w	r2, r2, #16
 8005554:	605a      	str	r2, [r3, #4]
  
  
  return HAL_OK;  
 8005556:	2300      	movs	r3, #0
}
 8005558:	4618      	mov	r0, r3
 800555a:	3710      	adds	r7, #16
 800555c:	46bd      	mov	sp, r7
 800555e:	bd80      	pop	{r7, pc}

08005560 <RTC_ExitInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef* hrtc)
{
 8005560:	b580      	push	{r7, lr}
 8005562:	b084      	sub	sp, #16
 8005564:	af00      	add	r7, sp, #0
 8005566:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005568:	2300      	movs	r3, #0
 800556a:	60fb      	str	r3, [r7, #12]
  
  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	685a      	ldr	r2, [r3, #4]
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	f022 0210 	bic.w	r2, r2, #16
 800557a:	605a      	str	r2, [r3, #4]
  
  tickstart = HAL_GetTick();
 800557c:	f7fd fa8a 	bl	8002a94 <HAL_GetTick>
 8005580:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8005582:	e009      	b.n	8005598 <RTC_ExitInitMode+0x38>
  {
    if((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8005584:	f7fd fa86 	bl	8002a94 <HAL_GetTick>
 8005588:	4602      	mov	r2, r0
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	1ad3      	subs	r3, r2, r3
 800558e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005592:	d901      	bls.n	8005598 <RTC_ExitInitMode+0x38>
    {       
      return HAL_TIMEOUT;
 8005594:	2303      	movs	r3, #3
 8005596:	e007      	b.n	80055a8 <RTC_ExitInitMode+0x48>
  while((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	685b      	ldr	r3, [r3, #4]
 800559e:	f003 0320 	and.w	r3, r3, #32
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d0ee      	beq.n	8005584 <RTC_ExitInitMode+0x24>
    } 
  }
  
  return HAL_OK;  
 80055a6:	2300      	movs	r3, #0
}
 80055a8:	4618      	mov	r0, r3
 80055aa:	3710      	adds	r7, #16
 80055ac:	46bd      	mov	sp, r7
 80055ae:	bd80      	pop	{r7, pc}

080055b0 <RTC_Bcd2ToByte>:
  * @brief  Converts from 2 digit BCD to Binary.
  * @param  Value: BCD value to be converted
  * @retval Converted word
  */
static uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 80055b0:	b480      	push	{r7}
 80055b2:	b085      	sub	sp, #20
 80055b4:	af00      	add	r7, sp, #0
 80055b6:	4603      	mov	r3, r0
 80055b8:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0U;
 80055ba:	2300      	movs	r3, #0
 80055bc:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10U;
 80055be:	79fb      	ldrb	r3, [r7, #7]
 80055c0:	091b      	lsrs	r3, r3, #4
 80055c2:	b2db      	uxtb	r3, r3
 80055c4:	461a      	mov	r2, r3
 80055c6:	4613      	mov	r3, r2
 80055c8:	009b      	lsls	r3, r3, #2
 80055ca:	4413      	add	r3, r2
 80055cc:	005b      	lsls	r3, r3, #1
 80055ce:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0F));
 80055d0:	79fb      	ldrb	r3, [r7, #7]
 80055d2:	f003 030f 	and.w	r3, r3, #15
 80055d6:	b2da      	uxtb	r2, r3
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	b2db      	uxtb	r3, r3
 80055dc:	4413      	add	r3, r2
 80055de:	b2db      	uxtb	r3, r3
}
 80055e0:	4618      	mov	r0, r3
 80055e2:	3714      	adds	r7, #20
 80055e4:	46bd      	mov	sp, r7
 80055e6:	bc80      	pop	{r7}
 80055e8:	4770      	bx	lr
	...

080055ec <RTC_WeekDayNum>:
  *         @arg RTC_WEEKDAY_FRIDAY
  *         @arg RTC_WEEKDAY_SATURDAY
  *         @arg RTC_WEEKDAY_SUNDAY
  */
static uint8_t RTC_WeekDayNum(uint32_t nYear, uint8_t nMonth, uint8_t nDay)
{
 80055ec:	b480      	push	{r7}
 80055ee:	b085      	sub	sp, #20
 80055f0:	af00      	add	r7, sp, #0
 80055f2:	6078      	str	r0, [r7, #4]
 80055f4:	460b      	mov	r3, r1
 80055f6:	70fb      	strb	r3, [r7, #3]
 80055f8:	4613      	mov	r3, r2
 80055fa:	70bb      	strb	r3, [r7, #2]
  uint32_t year = 0U, weekday = 0U;
 80055fc:	2300      	movs	r3, #0
 80055fe:	60bb      	str	r3, [r7, #8]
 8005600:	2300      	movs	r3, #0
 8005602:	60fb      	str	r3, [r7, #12]

  year = 2000U + nYear;
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 800560a:	60bb      	str	r3, [r7, #8]
  
  if(nMonth < 3U)
 800560c:	78fb      	ldrb	r3, [r7, #3]
 800560e:	2b02      	cmp	r3, #2
 8005610:	d82d      	bhi.n	800566e <RTC_WeekDayNum+0x82>
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [(year-1)/4] - [(year-1)/100] + [(year-1)/400] } mod 7*/
    weekday = (((23U * nMonth)/9U) + nDay + 4U + year + ((year-1U)/4U) - ((year-1U)/100U) + ((year-1U)/400U)) % 7U;
 8005612:	78fa      	ldrb	r2, [r7, #3]
 8005614:	4613      	mov	r3, r2
 8005616:	005b      	lsls	r3, r3, #1
 8005618:	4413      	add	r3, r2
 800561a:	00db      	lsls	r3, r3, #3
 800561c:	1a9b      	subs	r3, r3, r2
 800561e:	4a2c      	ldr	r2, [pc, #176]	; (80056d0 <RTC_WeekDayNum+0xe4>)
 8005620:	fba2 2303 	umull	r2, r3, r2, r3
 8005624:	085a      	lsrs	r2, r3, #1
 8005626:	78bb      	ldrb	r3, [r7, #2]
 8005628:	441a      	add	r2, r3
 800562a:	68bb      	ldr	r3, [r7, #8]
 800562c:	441a      	add	r2, r3
 800562e:	68bb      	ldr	r3, [r7, #8]
 8005630:	3b01      	subs	r3, #1
 8005632:	089b      	lsrs	r3, r3, #2
 8005634:	441a      	add	r2, r3
 8005636:	68bb      	ldr	r3, [r7, #8]
 8005638:	3b01      	subs	r3, #1
 800563a:	4926      	ldr	r1, [pc, #152]	; (80056d4 <RTC_WeekDayNum+0xe8>)
 800563c:	fba1 1303 	umull	r1, r3, r1, r3
 8005640:	095b      	lsrs	r3, r3, #5
 8005642:	1ad2      	subs	r2, r2, r3
 8005644:	68bb      	ldr	r3, [r7, #8]
 8005646:	3b01      	subs	r3, #1
 8005648:	4922      	ldr	r1, [pc, #136]	; (80056d4 <RTC_WeekDayNum+0xe8>)
 800564a:	fba1 1303 	umull	r1, r3, r1, r3
 800564e:	09db      	lsrs	r3, r3, #7
 8005650:	4413      	add	r3, r2
 8005652:	1d1a      	adds	r2, r3, #4
 8005654:	4b20      	ldr	r3, [pc, #128]	; (80056d8 <RTC_WeekDayNum+0xec>)
 8005656:	fba3 1302 	umull	r1, r3, r3, r2
 800565a:	1ad1      	subs	r1, r2, r3
 800565c:	0849      	lsrs	r1, r1, #1
 800565e:	440b      	add	r3, r1
 8005660:	0899      	lsrs	r1, r3, #2
 8005662:	460b      	mov	r3, r1
 8005664:	00db      	lsls	r3, r3, #3
 8005666:	1a5b      	subs	r3, r3, r1
 8005668:	1ad3      	subs	r3, r2, r3
 800566a:	60fb      	str	r3, [r7, #12]
 800566c:	e029      	b.n	80056c2 <RTC_WeekDayNum+0xd6>
  }
  else
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [year/4] - [year/100] + [year/400] - 2 } mod 7*/
    weekday = (((23U * nMonth)/9U) + nDay + 4U + year + (year/4U) - (year/100U) + (year/400U) - 2U ) % 7U; 
 800566e:	78fa      	ldrb	r2, [r7, #3]
 8005670:	4613      	mov	r3, r2
 8005672:	005b      	lsls	r3, r3, #1
 8005674:	4413      	add	r3, r2
 8005676:	00db      	lsls	r3, r3, #3
 8005678:	1a9b      	subs	r3, r3, r2
 800567a:	4a15      	ldr	r2, [pc, #84]	; (80056d0 <RTC_WeekDayNum+0xe4>)
 800567c:	fba2 2303 	umull	r2, r3, r2, r3
 8005680:	085a      	lsrs	r2, r3, #1
 8005682:	78bb      	ldrb	r3, [r7, #2]
 8005684:	441a      	add	r2, r3
 8005686:	68bb      	ldr	r3, [r7, #8]
 8005688:	441a      	add	r2, r3
 800568a:	68bb      	ldr	r3, [r7, #8]
 800568c:	089b      	lsrs	r3, r3, #2
 800568e:	441a      	add	r2, r3
 8005690:	68bb      	ldr	r3, [r7, #8]
 8005692:	4910      	ldr	r1, [pc, #64]	; (80056d4 <RTC_WeekDayNum+0xe8>)
 8005694:	fba1 1303 	umull	r1, r3, r1, r3
 8005698:	095b      	lsrs	r3, r3, #5
 800569a:	1ad2      	subs	r2, r2, r3
 800569c:	68bb      	ldr	r3, [r7, #8]
 800569e:	490d      	ldr	r1, [pc, #52]	; (80056d4 <RTC_WeekDayNum+0xe8>)
 80056a0:	fba1 1303 	umull	r1, r3, r1, r3
 80056a4:	09db      	lsrs	r3, r3, #7
 80056a6:	4413      	add	r3, r2
 80056a8:	1c9a      	adds	r2, r3, #2
 80056aa:	4b0b      	ldr	r3, [pc, #44]	; (80056d8 <RTC_WeekDayNum+0xec>)
 80056ac:	fba3 1302 	umull	r1, r3, r3, r2
 80056b0:	1ad1      	subs	r1, r2, r3
 80056b2:	0849      	lsrs	r1, r1, #1
 80056b4:	440b      	add	r3, r1
 80056b6:	0899      	lsrs	r1, r3, #2
 80056b8:	460b      	mov	r3, r1
 80056ba:	00db      	lsls	r3, r3, #3
 80056bc:	1a5b      	subs	r3, r3, r1
 80056be:	1ad3      	subs	r3, r2, r3
 80056c0:	60fb      	str	r3, [r7, #12]
  }

  return (uint8_t)weekday;
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	b2db      	uxtb	r3, r3
}
 80056c6:	4618      	mov	r0, r3
 80056c8:	3714      	adds	r7, #20
 80056ca:	46bd      	mov	sp, r7
 80056cc:	bc80      	pop	{r7}
 80056ce:	4770      	bx	lr
 80056d0:	38e38e39 	.word	0x38e38e39
 80056d4:	51eb851f 	.word	0x51eb851f
 80056d8:	24924925 	.word	0x24924925

080056dc <HAL_RTCEx_BKUPWrite>:
  *                                 specify the register (depending devices).
  * @param  Data: Data to be written in the specified RTC Backup data register.                     
  * @retval None
  */
void HAL_RTCEx_BKUPWrite(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister, uint32_t Data)
{
 80056dc:	b480      	push	{r7}
 80056de:	b087      	sub	sp, #28
 80056e0:	af00      	add	r7, sp, #0
 80056e2:	60f8      	str	r0, [r7, #12]
 80056e4:	60b9      	str	r1, [r7, #8]
 80056e6:	607a      	str	r2, [r7, #4]
  uint32_t tmp = 0U;
 80056e8:	2300      	movs	r3, #0
 80056ea:	617b      	str	r3, [r7, #20]
  UNUSED(hrtc);

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));
  
  tmp = (uint32_t)BKP_BASE; 
 80056ec:	4b07      	ldr	r3, [pc, #28]	; (800570c <HAL_RTCEx_BKUPWrite+0x30>)
 80056ee:	617b      	str	r3, [r7, #20]
  tmp += (BackupRegister * 4U);
 80056f0:	68bb      	ldr	r3, [r7, #8]
 80056f2:	009b      	lsls	r3, r3, #2
 80056f4:	697a      	ldr	r2, [r7, #20]
 80056f6:	4413      	add	r3, r2
 80056f8:	617b      	str	r3, [r7, #20]

  *(__IO uint32_t *) tmp = (Data & BKP_DR1_D);
 80056fa:	697b      	ldr	r3, [r7, #20]
 80056fc:	687a      	ldr	r2, [r7, #4]
 80056fe:	b292      	uxth	r2, r2
 8005700:	601a      	str	r2, [r3, #0]
}
 8005702:	bf00      	nop
 8005704:	371c      	adds	r7, #28
 8005706:	46bd      	mov	sp, r7
 8005708:	bc80      	pop	{r7}
 800570a:	4770      	bx	lr
 800570c:	40006c00 	.word	0x40006c00

08005710 <HAL_RTCEx_BKUPRead>:
  *          This parameter can be: RTC_BKP_DRx where x can be from 1 to 10 (or 42) to 
  *                                 specify the register (depending devices).
  * @retval Read value
  */
uint32_t HAL_RTCEx_BKUPRead(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister)
{
 8005710:	b480      	push	{r7}
 8005712:	b085      	sub	sp, #20
 8005714:	af00      	add	r7, sp, #0
 8005716:	6078      	str	r0, [r7, #4]
 8005718:	6039      	str	r1, [r7, #0]
  uint32_t backupregister = 0U;
 800571a:	2300      	movs	r3, #0
 800571c:	60fb      	str	r3, [r7, #12]
  uint32_t pvalue = 0U;
 800571e:	2300      	movs	r3, #0
 8005720:	60bb      	str	r3, [r7, #8]
  UNUSED(hrtc);

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  backupregister = (uint32_t)BKP_BASE; 
 8005722:	4b08      	ldr	r3, [pc, #32]	; (8005744 <HAL_RTCEx_BKUPRead+0x34>)
 8005724:	60fb      	str	r3, [r7, #12]
  backupregister += (BackupRegister * 4U);
 8005726:	683b      	ldr	r3, [r7, #0]
 8005728:	009b      	lsls	r3, r3, #2
 800572a:	68fa      	ldr	r2, [r7, #12]
 800572c:	4413      	add	r3, r2
 800572e:	60fb      	str	r3, [r7, #12]
  
  pvalue = (*(__IO uint32_t *)(backupregister)) & BKP_DR1_D;
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	b29b      	uxth	r3, r3
 8005736:	60bb      	str	r3, [r7, #8]

  /* Read the specified register */
  return pvalue;
 8005738:	68bb      	ldr	r3, [r7, #8]
}
 800573a:	4618      	mov	r0, r3
 800573c:	3714      	adds	r7, #20
 800573e:	46bd      	mov	sp, r7
 8005740:	bc80      	pop	{r7}
 8005742:	4770      	bx	lr
 8005744:	40006c00 	.word	0x40006c00

08005748 <HAL_TIM_PWM_Init>:
  *         parameters in the TIM_HandleTypeDef and create the associated handle.
  * @param  htim : TIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005748:	b580      	push	{r7, lr}
 800574a:	b082      	sub	sp, #8
 800574c:	af00      	add	r7, sp, #0
 800574e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if(htim == NULL)
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	2b00      	cmp	r3, #0
 8005754:	d101      	bne.n	800575a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005756:	2301      	movs	r3, #1
 8005758:	e01d      	b.n	8005796 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if(htim->State == HAL_TIM_STATE_RESET)
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005760:	b2db      	uxtb	r3, r3
 8005762:	2b00      	cmp	r3, #0
 8005764:	d106      	bne.n	8005774 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	2200      	movs	r2, #0
 800576a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800576e:	6878      	ldr	r0, [r7, #4]
 8005770:	f7fc fdf8 	bl	8002364 <HAL_TIM_PWM_MspInit>
  }

  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	2202      	movs	r2, #2
 8005778:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	681a      	ldr	r2, [r3, #0]
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	3304      	adds	r3, #4
 8005784:	4619      	mov	r1, r3
 8005786:	4610      	mov	r0, r2
 8005788:	f000 f8f8 	bl	800597c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	2201      	movs	r2, #1
 8005790:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005794:	2300      	movs	r3, #0
}
 8005796:	4618      	mov	r0, r3
 8005798:	3708      	adds	r7, #8
 800579a:	46bd      	mov	sp, r7
 800579c:	bd80      	pop	{r7, pc}
	...

080057a0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80057a0:	b580      	push	{r7, lr}
 80057a2:	b082      	sub	sp, #8
 80057a4:	af00      	add	r7, sp, #0
 80057a6:	6078      	str	r0, [r7, #4]
 80057a8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	2201      	movs	r2, #1
 80057b0:	6839      	ldr	r1, [r7, #0]
 80057b2:	4618      	mov	r0, r3
 80057b4:	f000 fae8 	bl	8005d88 <TIM_CCxChannelCmd>

  if(IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	4a0b      	ldr	r2, [pc, #44]	; (80057ec <HAL_TIM_PWM_Start+0x4c>)
 80057be:	4293      	cmp	r3, r2
 80057c0:	d107      	bne.n	80057d2 <HAL_TIM_PWM_Start+0x32>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80057d0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	681a      	ldr	r2, [r3, #0]
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	f042 0201 	orr.w	r2, r2, #1
 80057e0:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80057e2:	2300      	movs	r3, #0
}
 80057e4:	4618      	mov	r0, r3
 80057e6:	3708      	adds	r7, #8
 80057e8:	46bd      	mov	sp, r7
 80057ea:	bd80      	pop	{r7, pc}
 80057ec:	40012c00 	.word	0x40012c00

080057f0 <HAL_TIM_PWM_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim, TIM_OC_InitTypeDef* sConfig, uint32_t Channel)
{
 80057f0:	b580      	push	{r7, lr}
 80057f2:	b084      	sub	sp, #16
 80057f4:	af00      	add	r7, sp, #0
 80057f6:	60f8      	str	r0, [r7, #12]
 80057f8:	60b9      	str	r1, [r7, #8]
 80057fa:	607a      	str	r2, [r7, #4]
  __HAL_LOCK(htim);
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005802:	2b01      	cmp	r3, #1
 8005804:	d101      	bne.n	800580a <HAL_TIM_PWM_ConfigChannel+0x1a>
 8005806:	2302      	movs	r3, #2
 8005808:	e0b4      	b.n	8005974 <HAL_TIM_PWM_ConfigChannel+0x184>
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	2201      	movs	r2, #1
 800580e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  htim->State = HAL_TIM_STATE_BUSY;
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	2202      	movs	r2, #2
 8005816:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	2b0c      	cmp	r3, #12
 800581e:	f200 809f 	bhi.w	8005960 <HAL_TIM_PWM_ConfigChannel+0x170>
 8005822:	a201      	add	r2, pc, #4	; (adr r2, 8005828 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8005824:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005828:	0800585d 	.word	0x0800585d
 800582c:	08005961 	.word	0x08005961
 8005830:	08005961 	.word	0x08005961
 8005834:	08005961 	.word	0x08005961
 8005838:	0800589d 	.word	0x0800589d
 800583c:	08005961 	.word	0x08005961
 8005840:	08005961 	.word	0x08005961
 8005844:	08005961 	.word	0x08005961
 8005848:	080058df 	.word	0x080058df
 800584c:	08005961 	.word	0x08005961
 8005850:	08005961 	.word	0x08005961
 8005854:	08005961 	.word	0x08005961
 8005858:	0800591f 	.word	0x0800591f
  {
    case TIM_CHANNEL_1:
    {
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	68b9      	ldr	r1, [r7, #8]
 8005862:	4618      	mov	r0, r3
 8005864:	f000 f8f0 	bl	8005a48 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	699a      	ldr	r2, [r3, #24]
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	f042 0208 	orr.w	r2, r2, #8
 8005876:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	699a      	ldr	r2, [r3, #24]
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	f022 0204 	bic.w	r2, r2, #4
 8005886:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	6999      	ldr	r1, [r3, #24]
 800588e:	68bb      	ldr	r3, [r7, #8]
 8005890:	691a      	ldr	r2, [r3, #16]
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	430a      	orrs	r2, r1
 8005898:	619a      	str	r2, [r3, #24]
    }
    break;
 800589a:	e062      	b.n	8005962 <HAL_TIM_PWM_ConfigChannel+0x172>

    case TIM_CHANNEL_2:
    {
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	68b9      	ldr	r1, [r7, #8]
 80058a2:	4618      	mov	r0, r3
 80058a4:	f000 f93c 	bl	8005b20 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	699a      	ldr	r2, [r3, #24]
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80058b6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	699a      	ldr	r2, [r3, #24]
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80058c6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8;
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	6999      	ldr	r1, [r3, #24]
 80058ce:	68bb      	ldr	r3, [r7, #8]
 80058d0:	691b      	ldr	r3, [r3, #16]
 80058d2:	021a      	lsls	r2, r3, #8
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	430a      	orrs	r2, r1
 80058da:	619a      	str	r2, [r3, #24]
    }
    break;
 80058dc:	e041      	b.n	8005962 <HAL_TIM_PWM_ConfigChannel+0x172>

    case TIM_CHANNEL_3:
    {
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));
      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	68b9      	ldr	r1, [r7, #8]
 80058e4:	4618      	mov	r0, r3
 80058e6:	f000 f98b 	bl	8005c00 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	69da      	ldr	r2, [r3, #28]
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	f042 0208 	orr.w	r2, r2, #8
 80058f8:	61da      	str	r2, [r3, #28]

     /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	69da      	ldr	r2, [r3, #28]
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	f022 0204 	bic.w	r2, r2, #4
 8005908:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	69d9      	ldr	r1, [r3, #28]
 8005910:	68bb      	ldr	r3, [r7, #8]
 8005912:	691a      	ldr	r2, [r3, #16]
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	430a      	orrs	r2, r1
 800591a:	61da      	str	r2, [r3, #28]
    }
    break;
 800591c:	e021      	b.n	8005962 <HAL_TIM_PWM_ConfigChannel+0x172>

    case TIM_CHANNEL_4:
    {
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));
      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	68b9      	ldr	r1, [r7, #8]
 8005924:	4618      	mov	r0, r3
 8005926:	f000 f9db 	bl	8005ce0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	69da      	ldr	r2, [r3, #28]
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005938:	61da      	str	r2, [r3, #28]

     /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	69da      	ldr	r2, [r3, #28]
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005948:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8;
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	69d9      	ldr	r1, [r3, #28]
 8005950:	68bb      	ldr	r3, [r7, #8]
 8005952:	691b      	ldr	r3, [r3, #16]
 8005954:	021a      	lsls	r2, r3, #8
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	430a      	orrs	r2, r1
 800595c:	61da      	str	r2, [r3, #28]
    }
    break;
 800595e:	e000      	b.n	8005962 <HAL_TIM_PWM_ConfigChannel+0x172>

    default:
    break;
 8005960:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	2201      	movs	r2, #1
 8005966:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	2200      	movs	r2, #0
 800596e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005972:	2300      	movs	r3, #0
}
 8005974:	4618      	mov	r0, r3
 8005976:	3710      	adds	r7, #16
 8005978:	46bd      	mov	sp, r7
 800597a:	bd80      	pop	{r7, pc}

0800597c <TIM_Base_SetConfig>:
  * @param  TIMx : TIM periheral
  * @param  Structure : TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800597c:	b480      	push	{r7}
 800597e:	b085      	sub	sp, #20
 8005980:	af00      	add	r7, sp, #0
 8005982:	6078      	str	r0, [r7, #4]
 8005984:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1 = 0U;
 8005986:	2300      	movs	r3, #0
 8005988:	60fb      	str	r3, [r7, #12]
  tmpcr1 = TIMx->CR1;
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	4a2a      	ldr	r2, [pc, #168]	; (8005a3c <TIM_Base_SetConfig+0xc0>)
 8005994:	4293      	cmp	r3, r2
 8005996:	d00b      	beq.n	80059b0 <TIM_Base_SetConfig+0x34>
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800599e:	d007      	beq.n	80059b0 <TIM_Base_SetConfig+0x34>
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	4a27      	ldr	r2, [pc, #156]	; (8005a40 <TIM_Base_SetConfig+0xc4>)
 80059a4:	4293      	cmp	r3, r2
 80059a6:	d003      	beq.n	80059b0 <TIM_Base_SetConfig+0x34>
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	4a26      	ldr	r2, [pc, #152]	; (8005a44 <TIM_Base_SetConfig+0xc8>)
 80059ac:	4293      	cmp	r3, r2
 80059ae:	d108      	bne.n	80059c2 <TIM_Base_SetConfig+0x46>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80059b6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80059b8:	683b      	ldr	r3, [r7, #0]
 80059ba:	685b      	ldr	r3, [r3, #4]
 80059bc:	68fa      	ldr	r2, [r7, #12]
 80059be:	4313      	orrs	r3, r2
 80059c0:	60fb      	str	r3, [r7, #12]
  }

  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	4a1d      	ldr	r2, [pc, #116]	; (8005a3c <TIM_Base_SetConfig+0xc0>)
 80059c6:	4293      	cmp	r3, r2
 80059c8:	d00b      	beq.n	80059e2 <TIM_Base_SetConfig+0x66>
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80059d0:	d007      	beq.n	80059e2 <TIM_Base_SetConfig+0x66>
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	4a1a      	ldr	r2, [pc, #104]	; (8005a40 <TIM_Base_SetConfig+0xc4>)
 80059d6:	4293      	cmp	r3, r2
 80059d8:	d003      	beq.n	80059e2 <TIM_Base_SetConfig+0x66>
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	4a19      	ldr	r2, [pc, #100]	; (8005a44 <TIM_Base_SetConfig+0xc8>)
 80059de:	4293      	cmp	r3, r2
 80059e0:	d108      	bne.n	80059f4 <TIM_Base_SetConfig+0x78>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80059e8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80059ea:	683b      	ldr	r3, [r7, #0]
 80059ec:	68db      	ldr	r3, [r3, #12]
 80059ee:	68fa      	ldr	r2, [r7, #12]
 80059f0:	4313      	orrs	r3, r2
 80059f2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  tmpcr1 &= ~TIM_CR1_ARPE;
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80059fa:	60fb      	str	r3, [r7, #12]
  tmpcr1 |= (uint32_t)Structure->AutoReloadPreload;
 80059fc:	683b      	ldr	r3, [r7, #0]
 80059fe:	695b      	ldr	r3, [r3, #20]
 8005a00:	68fa      	ldr	r2, [r7, #12]
 8005a02:	4313      	orrs	r3, r2
 8005a04:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	68fa      	ldr	r2, [r7, #12]
 8005a0a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005a0c:	683b      	ldr	r3, [r7, #0]
 8005a0e:	689a      	ldr	r2, [r3, #8]
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8005a14:	683b      	ldr	r3, [r7, #0]
 8005a16:	681a      	ldr	r2, [r3, #0]
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	4a07      	ldr	r2, [pc, #28]	; (8005a3c <TIM_Base_SetConfig+0xc0>)
 8005a20:	4293      	cmp	r3, r2
 8005a22:	d103      	bne.n	8005a2c <TIM_Base_SetConfig+0xb0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005a24:	683b      	ldr	r3, [r7, #0]
 8005a26:	691a      	ldr	r2, [r3, #16]
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediatly */
  TIMx->EGR = TIM_EGR_UG;
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	2201      	movs	r2, #1
 8005a30:	615a      	str	r2, [r3, #20]
}
 8005a32:	bf00      	nop
 8005a34:	3714      	adds	r7, #20
 8005a36:	46bd      	mov	sp, r7
 8005a38:	bc80      	pop	{r7}
 8005a3a:	4770      	bx	lr
 8005a3c:	40012c00 	.word	0x40012c00
 8005a40:	40000400 	.word	0x40000400
 8005a44:	40000800 	.word	0x40000800

08005a48 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config : The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005a48:	b480      	push	{r7}
 8005a4a:	b087      	sub	sp, #28
 8005a4c:	af00      	add	r7, sp, #0
 8005a4e:	6078      	str	r0, [r7, #4]
 8005a50:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0U;
 8005a52:	2300      	movs	r3, #0
 8005a54:	60fb      	str	r3, [r7, #12]
  uint32_t tmpccer = 0U;
 8005a56:	2300      	movs	r3, #0
 8005a58:	617b      	str	r3, [r7, #20]
  uint32_t tmpcr2 = 0U;
 8005a5a:	2300      	movs	r3, #0
 8005a5c:	613b      	str	r3, [r7, #16]

   /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	6a1b      	ldr	r3, [r3, #32]
 8005a62:	f023 0201 	bic.w	r2, r3, #1
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	6a1b      	ldr	r3, [r3, #32]
 8005a6e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	685b      	ldr	r3, [r3, #4]
 8005a74:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	699b      	ldr	r3, [r3, #24]
 8005a7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a82:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	f023 0303 	bic.w	r3, r3, #3
 8005a8a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005a8c:	683b      	ldr	r3, [r7, #0]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	68fa      	ldr	r2, [r7, #12]
 8005a92:	4313      	orrs	r3, r2
 8005a94:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005a96:	697b      	ldr	r3, [r7, #20]
 8005a98:	f023 0302 	bic.w	r3, r3, #2
 8005a9c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005a9e:	683b      	ldr	r3, [r7, #0]
 8005aa0:	689b      	ldr	r3, [r3, #8]
 8005aa2:	697a      	ldr	r2, [r7, #20]
 8005aa4:	4313      	orrs	r3, r2
 8005aa6:	617b      	str	r3, [r7, #20]

  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	4a1c      	ldr	r2, [pc, #112]	; (8005b1c <TIM_OC1_SetConfig+0xd4>)
 8005aac:	4293      	cmp	r3, r2
 8005aae:	d10c      	bne.n	8005aca <TIM_OC1_SetConfig+0x82>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005ab0:	697b      	ldr	r3, [r7, #20]
 8005ab2:	f023 0308 	bic.w	r3, r3, #8
 8005ab6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005ab8:	683b      	ldr	r3, [r7, #0]
 8005aba:	68db      	ldr	r3, [r3, #12]
 8005abc:	697a      	ldr	r2, [r7, #20]
 8005abe:	4313      	orrs	r3, r2
 8005ac0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005ac2:	697b      	ldr	r3, [r7, #20]
 8005ac4:	f023 0304 	bic.w	r3, r3, #4
 8005ac8:	617b      	str	r3, [r7, #20]
  }

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	4a13      	ldr	r2, [pc, #76]	; (8005b1c <TIM_OC1_SetConfig+0xd4>)
 8005ace:	4293      	cmp	r3, r2
 8005ad0:	d111      	bne.n	8005af6 <TIM_OC1_SetConfig+0xae>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005ad2:	693b      	ldr	r3, [r7, #16]
 8005ad4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005ad8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005ada:	693b      	ldr	r3, [r7, #16]
 8005adc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005ae0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005ae2:	683b      	ldr	r3, [r7, #0]
 8005ae4:	695b      	ldr	r3, [r3, #20]
 8005ae6:	693a      	ldr	r2, [r7, #16]
 8005ae8:	4313      	orrs	r3, r2
 8005aea:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005aec:	683b      	ldr	r3, [r7, #0]
 8005aee:	699b      	ldr	r3, [r3, #24]
 8005af0:	693a      	ldr	r2, [r7, #16]
 8005af2:	4313      	orrs	r3, r2
 8005af4:	613b      	str	r3, [r7, #16]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	693a      	ldr	r2, [r7, #16]
 8005afa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	68fa      	ldr	r2, [r7, #12]
 8005b00:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005b02:	683b      	ldr	r3, [r7, #0]
 8005b04:	685a      	ldr	r2, [r3, #4]
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	697a      	ldr	r2, [r7, #20]
 8005b0e:	621a      	str	r2, [r3, #32]
}
 8005b10:	bf00      	nop
 8005b12:	371c      	adds	r7, #28
 8005b14:	46bd      	mov	sp, r7
 8005b16:	bc80      	pop	{r7}
 8005b18:	4770      	bx	lr
 8005b1a:	bf00      	nop
 8005b1c:	40012c00 	.word	0x40012c00

08005b20 <TIM_OC2_SetConfig>:
  * @param  TIMx  to select the TIM peripheral
  * @param  OC_Config : The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005b20:	b480      	push	{r7}
 8005b22:	b087      	sub	sp, #28
 8005b24:	af00      	add	r7, sp, #0
 8005b26:	6078      	str	r0, [r7, #4]
 8005b28:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0U;
 8005b2a:	2300      	movs	r3, #0
 8005b2c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpccer = 0U;
 8005b2e:	2300      	movs	r3, #0
 8005b30:	617b      	str	r3, [r7, #20]
  uint32_t tmpcr2 = 0U;
 8005b32:	2300      	movs	r3, #0
 8005b34:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	6a1b      	ldr	r3, [r3, #32]
 8005b3a:	f023 0210 	bic.w	r2, r3, #16
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	6a1b      	ldr	r3, [r3, #32]
 8005b46:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	685b      	ldr	r3, [r3, #4]
 8005b4c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	699b      	ldr	r3, [r3, #24]
 8005b52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005b5a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005b62:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005b64:	683b      	ldr	r3, [r7, #0]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	021b      	lsls	r3, r3, #8
 8005b6a:	68fa      	ldr	r2, [r7, #12]
 8005b6c:	4313      	orrs	r3, r2
 8005b6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005b70:	697b      	ldr	r3, [r7, #20]
 8005b72:	f023 0320 	bic.w	r3, r3, #32
 8005b76:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005b78:	683b      	ldr	r3, [r7, #0]
 8005b7a:	689b      	ldr	r3, [r3, #8]
 8005b7c:	011b      	lsls	r3, r3, #4
 8005b7e:	697a      	ldr	r2, [r7, #20]
 8005b80:	4313      	orrs	r3, r2
 8005b82:	617b      	str	r3, [r7, #20]

  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	4a1d      	ldr	r2, [pc, #116]	; (8005bfc <TIM_OC2_SetConfig+0xdc>)
 8005b88:	4293      	cmp	r3, r2
 8005b8a:	d10d      	bne.n	8005ba8 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005b8c:	697b      	ldr	r3, [r7, #20]
 8005b8e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005b92:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005b94:	683b      	ldr	r3, [r7, #0]
 8005b96:	68db      	ldr	r3, [r3, #12]
 8005b98:	011b      	lsls	r3, r3, #4
 8005b9a:	697a      	ldr	r2, [r7, #20]
 8005b9c:	4313      	orrs	r3, r2
 8005b9e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005ba0:	697b      	ldr	r3, [r7, #20]
 8005ba2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005ba6:	617b      	str	r3, [r7, #20]

  }

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	4a14      	ldr	r2, [pc, #80]	; (8005bfc <TIM_OC2_SetConfig+0xdc>)
 8005bac:	4293      	cmp	r3, r2
 8005bae:	d113      	bne.n	8005bd8 <TIM_OC2_SetConfig+0xb8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005bb0:	693b      	ldr	r3, [r7, #16]
 8005bb2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005bb6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005bb8:	693b      	ldr	r3, [r7, #16]
 8005bba:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005bbe:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2);
 8005bc0:	683b      	ldr	r3, [r7, #0]
 8005bc2:	695b      	ldr	r3, [r3, #20]
 8005bc4:	009b      	lsls	r3, r3, #2
 8005bc6:	693a      	ldr	r2, [r7, #16]
 8005bc8:	4313      	orrs	r3, r2
 8005bca:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2);
 8005bcc:	683b      	ldr	r3, [r7, #0]
 8005bce:	699b      	ldr	r3, [r3, #24]
 8005bd0:	009b      	lsls	r3, r3, #2
 8005bd2:	693a      	ldr	r2, [r7, #16]
 8005bd4:	4313      	orrs	r3, r2
 8005bd6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	693a      	ldr	r2, [r7, #16]
 8005bdc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	68fa      	ldr	r2, [r7, #12]
 8005be2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005be4:	683b      	ldr	r3, [r7, #0]
 8005be6:	685a      	ldr	r2, [r3, #4]
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	697a      	ldr	r2, [r7, #20]
 8005bf0:	621a      	str	r2, [r3, #32]
}
 8005bf2:	bf00      	nop
 8005bf4:	371c      	adds	r7, #28
 8005bf6:	46bd      	mov	sp, r7
 8005bf8:	bc80      	pop	{r7}
 8005bfa:	4770      	bx	lr
 8005bfc:	40012c00 	.word	0x40012c00

08005c00 <TIM_OC3_SetConfig>:
  * @param  TIMx  to select the TIM peripheral
  * @param  OC_Config : The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005c00:	b480      	push	{r7}
 8005c02:	b087      	sub	sp, #28
 8005c04:	af00      	add	r7, sp, #0
 8005c06:	6078      	str	r0, [r7, #4]
 8005c08:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0U;
 8005c0a:	2300      	movs	r3, #0
 8005c0c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpccer = 0U;
 8005c0e:	2300      	movs	r3, #0
 8005c10:	617b      	str	r3, [r7, #20]
  uint32_t tmpcr2 = 0U;
 8005c12:	2300      	movs	r3, #0
 8005c14:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	6a1b      	ldr	r3, [r3, #32]
 8005c1a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	6a1b      	ldr	r3, [r3, #32]
 8005c26:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	685b      	ldr	r3, [r3, #4]
 8005c2c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	69db      	ldr	r3, [r3, #28]
 8005c32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c3a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	f023 0303 	bic.w	r3, r3, #3
 8005c42:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005c44:	683b      	ldr	r3, [r7, #0]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	68fa      	ldr	r2, [r7, #12]
 8005c4a:	4313      	orrs	r3, r2
 8005c4c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005c4e:	697b      	ldr	r3, [r7, #20]
 8005c50:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005c54:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005c56:	683b      	ldr	r3, [r7, #0]
 8005c58:	689b      	ldr	r3, [r3, #8]
 8005c5a:	021b      	lsls	r3, r3, #8
 8005c5c:	697a      	ldr	r2, [r7, #20]
 8005c5e:	4313      	orrs	r3, r2
 8005c60:	617b      	str	r3, [r7, #20]

  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	4a1d      	ldr	r2, [pc, #116]	; (8005cdc <TIM_OC3_SetConfig+0xdc>)
 8005c66:	4293      	cmp	r3, r2
 8005c68:	d10d      	bne.n	8005c86 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005c6a:	697b      	ldr	r3, [r7, #20]
 8005c6c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005c70:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005c72:	683b      	ldr	r3, [r7, #0]
 8005c74:	68db      	ldr	r3, [r3, #12]
 8005c76:	021b      	lsls	r3, r3, #8
 8005c78:	697a      	ldr	r2, [r7, #20]
 8005c7a:	4313      	orrs	r3, r2
 8005c7c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005c7e:	697b      	ldr	r3, [r7, #20]
 8005c80:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005c84:	617b      	str	r3, [r7, #20]
  }

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	4a14      	ldr	r2, [pc, #80]	; (8005cdc <TIM_OC3_SetConfig+0xdc>)
 8005c8a:	4293      	cmp	r3, r2
 8005c8c:	d113      	bne.n	8005cb6 <TIM_OC3_SetConfig+0xb6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005c8e:	693b      	ldr	r3, [r7, #16]
 8005c90:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005c94:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005c96:	693b      	ldr	r3, [r7, #16]
 8005c98:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005c9c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005c9e:	683b      	ldr	r3, [r7, #0]
 8005ca0:	695b      	ldr	r3, [r3, #20]
 8005ca2:	011b      	lsls	r3, r3, #4
 8005ca4:	693a      	ldr	r2, [r7, #16]
 8005ca6:	4313      	orrs	r3, r2
 8005ca8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005caa:	683b      	ldr	r3, [r7, #0]
 8005cac:	699b      	ldr	r3, [r3, #24]
 8005cae:	011b      	lsls	r3, r3, #4
 8005cb0:	693a      	ldr	r2, [r7, #16]
 8005cb2:	4313      	orrs	r3, r2
 8005cb4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	693a      	ldr	r2, [r7, #16]
 8005cba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	68fa      	ldr	r2, [r7, #12]
 8005cc0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005cc2:	683b      	ldr	r3, [r7, #0]
 8005cc4:	685a      	ldr	r2, [r3, #4]
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	697a      	ldr	r2, [r7, #20]
 8005cce:	621a      	str	r2, [r3, #32]
}
 8005cd0:	bf00      	nop
 8005cd2:	371c      	adds	r7, #28
 8005cd4:	46bd      	mov	sp, r7
 8005cd6:	bc80      	pop	{r7}
 8005cd8:	4770      	bx	lr
 8005cda:	bf00      	nop
 8005cdc:	40012c00 	.word	0x40012c00

08005ce0 <TIM_OC4_SetConfig>:
  * @param  TIMx  to select the TIM peripheral
  * @param  OC_Config : The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005ce0:	b480      	push	{r7}
 8005ce2:	b087      	sub	sp, #28
 8005ce4:	af00      	add	r7, sp, #0
 8005ce6:	6078      	str	r0, [r7, #4]
 8005ce8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0U;
 8005cea:	2300      	movs	r3, #0
 8005cec:	613b      	str	r3, [r7, #16]
  uint32_t tmpccer = 0U;
 8005cee:	2300      	movs	r3, #0
 8005cf0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpcr2 = 0U;
 8005cf2:	2300      	movs	r3, #0
 8005cf4:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	6a1b      	ldr	r3, [r3, #32]
 8005cfa:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	6a1b      	ldr	r3, [r3, #32]
 8005d06:	60fb      	str	r3, [r7, #12]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	685b      	ldr	r3, [r3, #4]
 8005d0c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	69db      	ldr	r3, [r3, #28]
 8005d12:	613b      	str	r3, [r7, #16]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005d14:	693b      	ldr	r3, [r7, #16]
 8005d16:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005d1a:	613b      	str	r3, [r7, #16]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005d1c:	693b      	ldr	r3, [r7, #16]
 8005d1e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005d22:	613b      	str	r3, [r7, #16]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005d24:	683b      	ldr	r3, [r7, #0]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	021b      	lsls	r3, r3, #8
 8005d2a:	693a      	ldr	r2, [r7, #16]
 8005d2c:	4313      	orrs	r3, r2
 8005d2e:	613b      	str	r3, [r7, #16]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005d36:	60fb      	str	r3, [r7, #12]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005d38:	683b      	ldr	r3, [r7, #0]
 8005d3a:	689b      	ldr	r3, [r3, #8]
 8005d3c:	031b      	lsls	r3, r3, #12
 8005d3e:	68fa      	ldr	r2, [r7, #12]
 8005d40:	4313      	orrs	r3, r2
 8005d42:	60fb      	str	r3, [r7, #12]

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	4a0f      	ldr	r2, [pc, #60]	; (8005d84 <TIM_OC4_SetConfig+0xa4>)
 8005d48:	4293      	cmp	r3, r2
 8005d4a:	d109      	bne.n	8005d60 <TIM_OC4_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

   /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005d4c:	697b      	ldr	r3, [r7, #20]
 8005d4e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005d52:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6);
 8005d54:	683b      	ldr	r3, [r7, #0]
 8005d56:	695b      	ldr	r3, [r3, #20]
 8005d58:	019b      	lsls	r3, r3, #6
 8005d5a:	697a      	ldr	r2, [r7, #20]
 8005d5c:	4313      	orrs	r3, r2
 8005d5e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	697a      	ldr	r2, [r7, #20]
 8005d64:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	693a      	ldr	r2, [r7, #16]
 8005d6a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005d6c:	683b      	ldr	r3, [r7, #0]
 8005d6e:	685a      	ldr	r2, [r3, #4]
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	68fa      	ldr	r2, [r7, #12]
 8005d78:	621a      	str	r2, [r3, #32]
}
 8005d7a:	bf00      	nop
 8005d7c:	371c      	adds	r7, #28
 8005d7e:	46bd      	mov	sp, r7
 8005d80:	bc80      	pop	{r7}
 8005d82:	4770      	bx	lr
 8005d84:	40012c00 	.word	0x40012c00

08005d88 <TIM_CCxChannelCmd>:
  * @param  ChannelState : specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_Disable.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef* TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005d88:	b480      	push	{r7}
 8005d8a:	b087      	sub	sp, #28
 8005d8c:	af00      	add	r7, sp, #0
 8005d8e:	60f8      	str	r0, [r7, #12]
 8005d90:	60b9      	str	r1, [r7, #8]
 8005d92:	607a      	str	r2, [r7, #4]
  uint32_t tmp = 0U;
 8005d94:	2300      	movs	r3, #0
 8005d96:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << Channel;
 8005d98:	2201      	movs	r2, #1
 8005d9a:	68bb      	ldr	r3, [r7, #8]
 8005d9c:	fa02 f303 	lsl.w	r3, r2, r3
 8005da0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	6a1a      	ldr	r2, [r3, #32]
 8005da6:	697b      	ldr	r3, [r7, #20]
 8005da8:	43db      	mvns	r3, r3
 8005daa:	401a      	ands	r2, r3
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |=  (uint32_t)(ChannelState << Channel);
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	6a1a      	ldr	r2, [r3, #32]
 8005db4:	6879      	ldr	r1, [r7, #4]
 8005db6:	68bb      	ldr	r3, [r7, #8]
 8005db8:	fa01 f303 	lsl.w	r3, r1, r3
 8005dbc:	431a      	orrs	r2, r3
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	621a      	str	r2, [r3, #32]
}
 8005dc2:	bf00      	nop
 8005dc4:	371c      	adds	r7, #28
 8005dc6:	46bd      	mov	sp, r7
 8005dc8:	bc80      	pop	{r7}
 8005dca:	4770      	bx	lr

08005dcc <HAL_TIMEx_MasterConfigSynchronization>:
  *         contains the selected trigger output (TRGO) and the Master/Slave
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim, TIM_MasterConfigTypeDef * sMasterConfig)
{
 8005dcc:	b480      	push	{r7}
 8005dce:	b083      	sub	sp, #12
 8005dd0:	af00      	add	r7, sp, #0
 8005dd2:	6078      	str	r0, [r7, #4]
 8005dd4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  __HAL_LOCK(htim);
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005ddc:	2b01      	cmp	r3, #1
 8005dde:	d101      	bne.n	8005de4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005de0:	2302      	movs	r3, #2
 8005de2:	e032      	b.n	8005e4a <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	2201      	movs	r2, #1
 8005de8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	2202      	movs	r2, #2
 8005df0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the MMS Bits */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	685a      	ldr	r2, [r3, #4]
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8005e02:	605a      	str	r2, [r3, #4]
  /* Select the TRGO source */
  htim->Instance->CR2 |=  sMasterConfig->MasterOutputTrigger;
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	6859      	ldr	r1, [r3, #4]
 8005e0a:	683b      	ldr	r3, [r7, #0]
 8005e0c:	681a      	ldr	r2, [r3, #0]
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	430a      	orrs	r2, r1
 8005e14:	605a      	str	r2, [r3, #4]

  /* Reset the MSM Bit */
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	689a      	ldr	r2, [r3, #8]
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005e24:	609a      	str	r2, [r3, #8]
  /* Set or Reset the MSM Bit */
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	6899      	ldr	r1, [r3, #8]
 8005e2c:	683b      	ldr	r3, [r7, #0]
 8005e2e:	685a      	ldr	r2, [r3, #4]
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	430a      	orrs	r2, r1
 8005e36:	609a      	str	r2, [r3, #8]

  htim->State = HAL_TIM_STATE_READY;
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	2201      	movs	r2, #1
 8005e3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	2200      	movs	r2, #0
 8005e44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005e48:	2300      	movs	r3, #0
}
 8005e4a:	4618      	mov	r0, r3
 8005e4c:	370c      	adds	r7, #12
 8005e4e:	46bd      	mov	sp, r7
 8005e50:	bc80      	pop	{r7}
 8005e52:	4770      	bx	lr

08005e54 <HAL_UART_Init>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005e54:	b580      	push	{r7, lr}
 8005e56:	b082      	sub	sp, #8
 8005e58:	af00      	add	r7, sp, #0
 8005e5a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if(huart == NULL)
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d101      	bne.n	8005e66 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005e62:	2301      	movs	r3, #1
 8005e64:	e03f      	b.n	8005ee6 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */
  
  if(huart->gState == HAL_UART_STATE_RESET)
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005e6c:	b2db      	uxtb	r3, r3
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	d106      	bne.n	8005e80 <HAL_UART_Init+0x2c>
  {  
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	2200      	movs	r2, #0
 8005e76:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    HAL_UART_MspInit(huart);
 8005e7a:	6878      	ldr	r0, [r7, #4]
 8005e7c:	f7fc fb22 	bl	80024c4 <HAL_UART_MspInit>
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	2224      	movs	r2, #36	; 0x24
 8005e84:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	68da      	ldr	r2, [r3, #12]
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005e96:	60da      	str	r2, [r3, #12]
  
  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005e98:	6878      	ldr	r0, [r7, #4]
 8005e9a:	f000 fa5f 	bl	800635c <UART_SetConfig>
  
  /* In asynchronous mode, the following bits must be kept cleared: 
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	691a      	ldr	r2, [r3, #16]
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005eac:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	695a      	ldr	r2, [r3, #20]
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005ebc:	615a      	str	r2, [r3, #20]
  
  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	68da      	ldr	r2, [r3, #12]
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005ecc:	60da      	str	r2, [r3, #12]
  
  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	2200      	movs	r2, #0
 8005ed2:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState= HAL_UART_STATE_READY;
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	2220      	movs	r2, #32
 8005ed8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState= HAL_UART_STATE_READY;
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	2220      	movs	r2, #32
 8005ee0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
  
  return HAL_OK;
 8005ee4:	2300      	movs	r3, #0
}
 8005ee6:	4618      	mov	r0, r3
 8005ee8:	3708      	adds	r7, #8
 8005eea:	46bd      	mov	sp, r7
 8005eec:	bd80      	pop	{r7, pc}
	...

08005ef0 <HAL_UART_IRQHandler>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005ef0:	b580      	push	{r7, lr}
 8005ef2:	b088      	sub	sp, #32
 8005ef4:	af00      	add	r7, sp, #0
 8005ef6:	6078      	str	r0, [r7, #4]
   uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	61fb      	str	r3, [r7, #28]
   uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	68db      	ldr	r3, [r3, #12]
 8005f06:	61bb      	str	r3, [r7, #24]
   uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	695b      	ldr	r3, [r3, #20]
 8005f0e:	617b      	str	r3, [r7, #20]
   uint32_t errorflags = 0x00U;
 8005f10:	2300      	movs	r3, #0
 8005f12:	613b      	str	r3, [r7, #16]
   uint32_t dmarequest = 0x00U;
 8005f14:	2300      	movs	r3, #0
 8005f16:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005f18:	69fb      	ldr	r3, [r7, #28]
 8005f1a:	f003 030f 	and.w	r3, r3, #15
 8005f1e:	613b      	str	r3, [r7, #16]
  if(errorflags == RESET)
 8005f20:	693b      	ldr	r3, [r7, #16]
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d10d      	bne.n	8005f42 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if(((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005f26:	69fb      	ldr	r3, [r7, #28]
 8005f28:	f003 0320 	and.w	r3, r3, #32
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	d008      	beq.n	8005f42 <HAL_UART_IRQHandler+0x52>
 8005f30:	69bb      	ldr	r3, [r7, #24]
 8005f32:	f003 0320 	and.w	r3, r3, #32
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d003      	beq.n	8005f42 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8005f3a:	6878      	ldr	r0, [r7, #4]
 8005f3c:	f000 f98d 	bl	800625a <UART_Receive_IT>
      return;
 8005f40:	e0cc      	b.n	80060dc <HAL_UART_IRQHandler+0x1ec>
    }
  }

  /* If some errors occur */
  if((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005f42:	693b      	ldr	r3, [r7, #16]
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	f000 80ab 	beq.w	80060a0 <HAL_UART_IRQHandler+0x1b0>
 8005f4a:	697b      	ldr	r3, [r7, #20]
 8005f4c:	f003 0301 	and.w	r3, r3, #1
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	d105      	bne.n	8005f60 <HAL_UART_IRQHandler+0x70>
 8005f54:	69bb      	ldr	r3, [r7, #24]
 8005f56:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	f000 80a0 	beq.w	80060a0 <HAL_UART_IRQHandler+0x1b0>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if(((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005f60:	69fb      	ldr	r3, [r7, #28]
 8005f62:	f003 0301 	and.w	r3, r3, #1
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d00a      	beq.n	8005f80 <HAL_UART_IRQHandler+0x90>
 8005f6a:	69bb      	ldr	r3, [r7, #24]
 8005f6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	d005      	beq.n	8005f80 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f78:	f043 0201 	orr.w	r2, r3, #1
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if(((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005f80:	69fb      	ldr	r3, [r7, #28]
 8005f82:	f003 0304 	and.w	r3, r3, #4
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d00a      	beq.n	8005fa0 <HAL_UART_IRQHandler+0xb0>
 8005f8a:	697b      	ldr	r3, [r7, #20]
 8005f8c:	f003 0301 	and.w	r3, r3, #1
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	d005      	beq.n	8005fa0 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f98:	f043 0202 	orr.w	r2, r3, #2
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if(((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005fa0:	69fb      	ldr	r3, [r7, #28]
 8005fa2:	f003 0302 	and.w	r3, r3, #2
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d00a      	beq.n	8005fc0 <HAL_UART_IRQHandler+0xd0>
 8005faa:	697b      	ldr	r3, [r7, #20]
 8005fac:	f003 0301 	and.w	r3, r3, #1
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	d005      	beq.n	8005fc0 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005fb8:	f043 0204 	orr.w	r2, r3, #4
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if(((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005fc0:	69fb      	ldr	r3, [r7, #28]
 8005fc2:	f003 0308 	and.w	r3, r3, #8
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d00a      	beq.n	8005fe0 <HAL_UART_IRQHandler+0xf0>
 8005fca:	697b      	ldr	r3, [r7, #20]
 8005fcc:	f003 0301 	and.w	r3, r3, #1
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	d005      	beq.n	8005fe0 <HAL_UART_IRQHandler+0xf0>
    { 
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005fd8:	f043 0208 	orr.w	r2, r3, #8
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if(huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	d078      	beq.n	80060da <HAL_UART_IRQHandler+0x1ea>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if(((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005fe8:	69fb      	ldr	r3, [r7, #28]
 8005fea:	f003 0320 	and.w	r3, r3, #32
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d007      	beq.n	8006002 <HAL_UART_IRQHandler+0x112>
 8005ff2:	69bb      	ldr	r3, [r7, #24]
 8005ff4:	f003 0320 	and.w	r3, r3, #32
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	d002      	beq.n	8006002 <HAL_UART_IRQHandler+0x112>
      {
        UART_Receive_IT(huart);
 8005ffc:	6878      	ldr	r0, [r7, #4]
 8005ffe:	f000 f92c 	bl	800625a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	695b      	ldr	r3, [r3, #20]
 8006008:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800600c:	2b00      	cmp	r3, #0
 800600e:	bf14      	ite	ne
 8006010:	2301      	movne	r3, #1
 8006012:	2300      	moveq	r3, #0
 8006014:	b2db      	uxtb	r3, r3
 8006016:	60fb      	str	r3, [r7, #12]
      if(((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800601c:	f003 0308 	and.w	r3, r3, #8
 8006020:	2b00      	cmp	r3, #0
 8006022:	d102      	bne.n	800602a <HAL_UART_IRQHandler+0x13a>
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	2b00      	cmp	r3, #0
 8006028:	d031      	beq.n	800608e <HAL_UART_IRQHandler+0x19e>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800602a:	6878      	ldr	r0, [r7, #4]
 800602c:	f000 f877 	bl	800611e <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	695b      	ldr	r3, [r3, #20]
 8006036:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800603a:	2b00      	cmp	r3, #0
 800603c:	d023      	beq.n	8006086 <HAL_UART_IRQHandler+0x196>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	695a      	ldr	r2, [r3, #20]
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800604c:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if(huart->hdmarx != NULL)
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006052:	2b00      	cmp	r3, #0
 8006054:	d013      	beq.n	800607e <HAL_UART_IRQHandler+0x18e>
          {
            /* Set the UART DMA Abort callback : 
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800605a:	4a22      	ldr	r2, [pc, #136]	; (80060e4 <HAL_UART_IRQHandler+0x1f4>)
 800605c:	635a      	str	r2, [r3, #52]	; 0x34
            if(HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006062:	4618      	mov	r0, r3
 8006064:	f7fd faf2 	bl	800364c <HAL_DMA_Abort_IT>
 8006068:	4603      	mov	r3, r0
 800606a:	2b00      	cmp	r3, #0
 800606c:	d016      	beq.n	800609c <HAL_UART_IRQHandler+0x1ac>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006072:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006074:	687a      	ldr	r2, [r7, #4]
 8006076:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8006078:	4610      	mov	r0, r2
 800607a:	4798      	blx	r3
        if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800607c:	e00e      	b.n	800609c <HAL_UART_IRQHandler+0x1ac>
            }
          }
          else
          {
            /* Call user error callback */
            HAL_UART_ErrorCallback(huart);
 800607e:	6878      	ldr	r0, [r7, #4]
 8006080:	f000 f844 	bl	800610c <HAL_UART_ErrorCallback>
        if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006084:	e00a      	b.n	800609c <HAL_UART_IRQHandler+0x1ac>
          }
        }
        else
        {
          /* Call user error callback */
          HAL_UART_ErrorCallback(huart);
 8006086:	6878      	ldr	r0, [r7, #4]
 8006088:	f000 f840 	bl	800610c <HAL_UART_ErrorCallback>
        if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800608c:	e006      	b.n	800609c <HAL_UART_IRQHandler+0x1ac>
      }
      else
      {
        /* Non Blocking error : transfer could go on. 
           Error is notified to user through user error callback */
        HAL_UART_ErrorCallback(huart);
 800608e:	6878      	ldr	r0, [r7, #4]
 8006090:	f000 f83c 	bl	800610c <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	2200      	movs	r2, #0
 8006098:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 800609a:	e01e      	b.n	80060da <HAL_UART_IRQHandler+0x1ea>
        if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800609c:	bf00      	nop
    return;
 800609e:	e01c      	b.n	80060da <HAL_UART_IRQHandler+0x1ea>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if(((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80060a0:	69fb      	ldr	r3, [r7, #28]
 80060a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d008      	beq.n	80060bc <HAL_UART_IRQHandler+0x1cc>
 80060aa:	69bb      	ldr	r3, [r7, #24]
 80060ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	d003      	beq.n	80060bc <HAL_UART_IRQHandler+0x1cc>
  {
    UART_Transmit_IT(huart);
 80060b4:	6878      	ldr	r0, [r7, #4]
 80060b6:	f000 f863 	bl	8006180 <UART_Transmit_IT>
    return;
 80060ba:	e00f      	b.n	80060dc <HAL_UART_IRQHandler+0x1ec>
  }
  
  /* UART in mode Transmitter end --------------------------------------------*/
  if(((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80060bc:	69fb      	ldr	r3, [r7, #28]
 80060be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d00a      	beq.n	80060dc <HAL_UART_IRQHandler+0x1ec>
 80060c6:	69bb      	ldr	r3, [r7, #24]
 80060c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	d005      	beq.n	80060dc <HAL_UART_IRQHandler+0x1ec>
  {
    UART_EndTransmit_IT(huart);
 80060d0:	6878      	ldr	r0, [r7, #4]
 80060d2:	f000 f8aa 	bl	800622a <UART_EndTransmit_IT>
    return;
 80060d6:	bf00      	nop
 80060d8:	e000      	b.n	80060dc <HAL_UART_IRQHandler+0x1ec>
    return;
 80060da:	bf00      	nop
  }
}
 80060dc:	3720      	adds	r7, #32
 80060de:	46bd      	mov	sp, r7
 80060e0:	bd80      	pop	{r7, pc}
 80060e2:	bf00      	nop
 80060e4:	08006159 	.word	0x08006159

080060e8 <HAL_UART_TxCpltCallback>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
 __weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80060e8:	b480      	push	{r7}
 80060ea:	b083      	sub	sp, #12
 80060ec:	af00      	add	r7, sp, #0
 80060ee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */ 
}
 80060f0:	bf00      	nop
 80060f2:	370c      	adds	r7, #12
 80060f4:	46bd      	mov	sp, r7
 80060f6:	bc80      	pop	{r7}
 80060f8:	4770      	bx	lr

080060fa <HAL_UART_RxCpltCallback>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80060fa:	b480      	push	{r7}
 80060fc:	b083      	sub	sp, #12
 80060fe:	af00      	add	r7, sp, #0
 8006100:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8006102:	bf00      	nop
 8006104:	370c      	adds	r7, #12
 8006106:	46bd      	mov	sp, r7
 8006108:	bc80      	pop	{r7}
 800610a:	4770      	bx	lr

0800610c <HAL_UART_ErrorCallback>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
 __weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800610c:	b480      	push	{r7}
 800610e:	b083      	sub	sp, #12
 8006110:	af00      	add	r7, sp, #0
 8006112:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart); 
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */ 
}
 8006114:	bf00      	nop
 8006116:	370c      	adds	r7, #12
 8006118:	46bd      	mov	sp, r7
 800611a:	bc80      	pop	{r7}
 800611c:	4770      	bx	lr

0800611e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart: UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800611e:	b480      	push	{r7}
 8006120:	b083      	sub	sp, #12
 8006122:	af00      	add	r7, sp, #0
 8006124:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	68da      	ldr	r2, [r3, #12]
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8006134:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	695a      	ldr	r2, [r3, #20]
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	f022 0201 	bic.w	r2, r2, #1
 8006144:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	2220      	movs	r2, #32
 800614a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 800614e:	bf00      	nop
 8006150:	370c      	adds	r7, #12
 8006152:	46bd      	mov	sp, r7
 8006154:	bc80      	pop	{r7}
 8006156:	4770      	bx	lr

08006158 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006158:	b580      	push	{r7, lr}
 800615a:	b084      	sub	sp, #16
 800615c:	af00      	add	r7, sp, #0
 800615e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006164:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	2200      	movs	r2, #0
 800616a:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	2200      	movs	r2, #0
 8006170:	84da      	strh	r2, [r3, #38]	; 0x26

  HAL_UART_ErrorCallback(huart);
 8006172:	68f8      	ldr	r0, [r7, #12]
 8006174:	f7ff ffca 	bl	800610c <HAL_UART_ErrorCallback>
}
 8006178:	bf00      	nop
 800617a:	3710      	adds	r7, #16
 800617c:	46bd      	mov	sp, r7
 800617e:	bd80      	pop	{r7, pc}

08006180 <UART_Transmit_IT>:
  * @param  huart: Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006180:	b480      	push	{r7}
 8006182:	b085      	sub	sp, #20
 8006184:	af00      	add	r7, sp, #0
 8006186:	6078      	str	r0, [r7, #4]
  uint16_t* tmp;
  
  /* Check that a Tx process is ongoing */
  if(huart->gState == HAL_UART_STATE_BUSY_TX)
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800618e:	b2db      	uxtb	r3, r3
 8006190:	2b21      	cmp	r3, #33	; 0x21
 8006192:	d144      	bne.n	800621e <UART_Transmit_IT+0x9e>
  {
    if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	689b      	ldr	r3, [r3, #8]
 8006198:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800619c:	d11a      	bne.n	80061d4 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t*) huart->pTxBuffPtr;
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	6a1b      	ldr	r3, [r3, #32]
 80061a2:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	881b      	ldrh	r3, [r3, #0]
 80061a8:	461a      	mov	r2, r3
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80061b2:	605a      	str	r2, [r3, #4]
      if(huart->Init.Parity == UART_PARITY_NONE)
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	691b      	ldr	r3, [r3, #16]
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	d105      	bne.n	80061c8 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	6a1b      	ldr	r3, [r3, #32]
 80061c0:	1c9a      	adds	r2, r3, #2
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	621a      	str	r2, [r3, #32]
 80061c6:	e00e      	b.n	80061e6 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	6a1b      	ldr	r3, [r3, #32]
 80061cc:	1c5a      	adds	r2, r3, #1
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	621a      	str	r2, [r3, #32]
 80061d2:	e008      	b.n	80061e6 <UART_Transmit_IT+0x66>
      }
    } 
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	6a1b      	ldr	r3, [r3, #32]
 80061d8:	1c59      	adds	r1, r3, #1
 80061da:	687a      	ldr	r2, [r7, #4]
 80061dc:	6211      	str	r1, [r2, #32]
 80061de:	781a      	ldrb	r2, [r3, #0]
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	605a      	str	r2, [r3, #4]
    }

    if(--huart->TxXferCount == 0U)
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80061ea:	b29b      	uxth	r3, r3
 80061ec:	3b01      	subs	r3, #1
 80061ee:	b29b      	uxth	r3, r3
 80061f0:	687a      	ldr	r2, [r7, #4]
 80061f2:	4619      	mov	r1, r3
 80061f4:	84d1      	strh	r1, [r2, #38]	; 0x26
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d10f      	bne.n	800621a <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	68da      	ldr	r2, [r3, #12]
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006208:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */    
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	68da      	ldr	r2, [r3, #12]
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006218:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800621a:	2300      	movs	r3, #0
 800621c:	e000      	b.n	8006220 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800621e:	2302      	movs	r3, #2
  }
}
 8006220:	4618      	mov	r0, r3
 8006222:	3714      	adds	r7, #20
 8006224:	46bd      	mov	sp, r7
 8006226:	bc80      	pop	{r7}
 8006228:	4770      	bx	lr

0800622a <UART_EndTransmit_IT>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800622a:	b580      	push	{r7, lr}
 800622c:	b082      	sub	sp, #8
 800622e:	af00      	add	r7, sp, #0
 8006230:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */    
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	68da      	ldr	r2, [r3, #12]
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006240:	60da      	str	r2, [r3, #12]
  
  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	2220      	movs	r2, #32
 8006246:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  HAL_UART_TxCpltCallback(huart);
 800624a:	6878      	ldr	r0, [r7, #4]
 800624c:	f7ff ff4c 	bl	80060e8 <HAL_UART_TxCpltCallback>
  
  return HAL_OK;
 8006250:	2300      	movs	r3, #0
}
 8006252:	4618      	mov	r0, r3
 8006254:	3708      	adds	r7, #8
 8006256:	46bd      	mov	sp, r7
 8006258:	bd80      	pop	{r7, pc}

0800625a <UART_Receive_IT>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800625a:	b580      	push	{r7, lr}
 800625c:	b084      	sub	sp, #16
 800625e:	af00      	add	r7, sp, #0
 8006260:	6078      	str	r0, [r7, #4]
  uint16_t* tmp;
  
  /* Check that a Rx process is ongoing */
  if(huart->RxState == HAL_UART_STATE_BUSY_RX) 
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8006268:	b2db      	uxtb	r3, r3
 800626a:	2b22      	cmp	r3, #34	; 0x22
 800626c:	d171      	bne.n	8006352 <UART_Receive_IT+0xf8>
  {
    if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	689b      	ldr	r3, [r3, #8]
 8006272:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006276:	d123      	bne.n	80062c0 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t*) huart->pRxBuffPtr;
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800627c:	60fb      	str	r3, [r7, #12]
      if(huart->Init.Parity == UART_PARITY_NONE)
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	691b      	ldr	r3, [r3, #16]
 8006282:	2b00      	cmp	r3, #0
 8006284:	d10e      	bne.n	80062a4 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	685b      	ldr	r3, [r3, #4]
 800628c:	b29b      	uxth	r3, r3
 800628e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006292:	b29a      	uxth	r2, r3
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800629c:	1c9a      	adds	r2, r3, #2
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	629a      	str	r2, [r3, #40]	; 0x28
 80062a2:	e029      	b.n	80062f8 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	685b      	ldr	r3, [r3, #4]
 80062aa:	b29b      	uxth	r3, r3
 80062ac:	b2db      	uxtb	r3, r3
 80062ae:	b29a      	uxth	r2, r3
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062b8:	1c5a      	adds	r2, r3, #1
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	629a      	str	r2, [r3, #40]	; 0x28
 80062be:	e01b      	b.n	80062f8 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if(huart->Init.Parity == UART_PARITY_NONE)
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	691b      	ldr	r3, [r3, #16]
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	d10a      	bne.n	80062de <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	6858      	ldr	r0, [r3, #4]
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062d2:	1c59      	adds	r1, r3, #1
 80062d4:	687a      	ldr	r2, [r7, #4]
 80062d6:	6291      	str	r1, [r2, #40]	; 0x28
 80062d8:	b2c2      	uxtb	r2, r0
 80062da:	701a      	strb	r2, [r3, #0]
 80062dc:	e00c      	b.n	80062f8 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	685b      	ldr	r3, [r3, #4]
 80062e4:	b2da      	uxtb	r2, r3
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062ea:	1c58      	adds	r0, r3, #1
 80062ec:	6879      	ldr	r1, [r7, #4]
 80062ee:	6288      	str	r0, [r1, #40]	; 0x28
 80062f0:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80062f4:	b2d2      	uxtb	r2, r2
 80062f6:	701a      	strb	r2, [r3, #0]
      }
    }

    if(--huart->RxXferCount == 0U)
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80062fc:	b29b      	uxth	r3, r3
 80062fe:	3b01      	subs	r3, #1
 8006300:	b29b      	uxth	r3, r3
 8006302:	687a      	ldr	r2, [r7, #4]
 8006304:	4619      	mov	r1, r3
 8006306:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8006308:	2b00      	cmp	r3, #0
 800630a:	d120      	bne.n	800634e <UART_Receive_IT+0xf4>
    {
      /* Disable the IRDA Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	68da      	ldr	r2, [r3, #12]
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	f022 0220 	bic.w	r2, r2, #32
 800631a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	68da      	ldr	r2, [r3, #12]
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800632a:	60da      	str	r2, [r3, #12]
        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	695a      	ldr	r2, [r3, #20]
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	f022 0201 	bic.w	r2, r2, #1
 800633a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	2220      	movs	r2, #32
 8006340:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

      HAL_UART_RxCpltCallback(huart);
 8006344:	6878      	ldr	r0, [r7, #4]
 8006346:	f7ff fed8 	bl	80060fa <HAL_UART_RxCpltCallback>

      return HAL_OK;
 800634a:	2300      	movs	r3, #0
 800634c:	e002      	b.n	8006354 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 800634e:	2300      	movs	r3, #0
 8006350:	e000      	b.n	8006354 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8006352:	2302      	movs	r3, #2
  }
}
 8006354:	4618      	mov	r0, r3
 8006356:	3710      	adds	r7, #16
 8006358:	46bd      	mov	sp, r7
 800635a:	bd80      	pop	{r7, pc}

0800635c <UART_SetConfig>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800635c:	b5b0      	push	{r4, r5, r7, lr}
 800635e:	b084      	sub	sp, #16
 8006360:	af00      	add	r7, sp, #0
 8006362:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0x00U;
 8006364:	2300      	movs	r3, #0
 8006366:	60fb      	str	r3, [r7, #12]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*------- UART-associated USART registers setting : CR2 Configuration ------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according 
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	691b      	ldr	r3, [r3, #16]
 800636e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	68da      	ldr	r2, [r3, #12]
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	430a      	orrs	r2, r1
 800637c:	611a      	str	r2, [r3, #16]
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1, 
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8), 
             tmpreg);
#else
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	689a      	ldr	r2, [r3, #8]
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	691b      	ldr	r3, [r3, #16]
 8006386:	431a      	orrs	r2, r3
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	695b      	ldr	r3, [r3, #20]
 800638c:	4313      	orrs	r3, r2
 800638e:	68fa      	ldr	r2, [r7, #12]
 8006390:	4313      	orrs	r3, r2
 8006392:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1, 
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	68db      	ldr	r3, [r3, #12]
 800639a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800639e:	f023 030c 	bic.w	r3, r3, #12
 80063a2:	687a      	ldr	r2, [r7, #4]
 80063a4:	6812      	ldr	r2, [r2, #0]
 80063a6:	68f9      	ldr	r1, [r7, #12]
 80063a8:	430b      	orrs	r3, r1
 80063aa:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*------- UART-associated USART registers setting : CR3 Configuration ------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	695b      	ldr	r3, [r3, #20]
 80063b2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	699a      	ldr	r2, [r3, #24]
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	430a      	orrs	r2, r1
 80063c0:	615a      	str	r2, [r3, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	4a6f      	ldr	r2, [pc, #444]	; (8006584 <UART_SetConfig+0x228>)
 80063c8:	4293      	cmp	r3, r2
 80063ca:	d16b      	bne.n	80064a4 <UART_SetConfig+0x148>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 80063cc:	f7fe fc50 	bl	8004c70 <HAL_RCC_GetPCLK2Freq>
 80063d0:	4602      	mov	r2, r0
 80063d2:	4613      	mov	r3, r2
 80063d4:	009b      	lsls	r3, r3, #2
 80063d6:	4413      	add	r3, r2
 80063d8:	009a      	lsls	r2, r3, #2
 80063da:	441a      	add	r2, r3
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	685b      	ldr	r3, [r3, #4]
 80063e0:	009b      	lsls	r3, r3, #2
 80063e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80063e6:	4a68      	ldr	r2, [pc, #416]	; (8006588 <UART_SetConfig+0x22c>)
 80063e8:	fba2 2303 	umull	r2, r3, r2, r3
 80063ec:	095b      	lsrs	r3, r3, #5
 80063ee:	011c      	lsls	r4, r3, #4
 80063f0:	f7fe fc3e 	bl	8004c70 <HAL_RCC_GetPCLK2Freq>
 80063f4:	4602      	mov	r2, r0
 80063f6:	4613      	mov	r3, r2
 80063f8:	009b      	lsls	r3, r3, #2
 80063fa:	4413      	add	r3, r2
 80063fc:	009a      	lsls	r2, r3, #2
 80063fe:	441a      	add	r2, r3
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	685b      	ldr	r3, [r3, #4]
 8006404:	009b      	lsls	r3, r3, #2
 8006406:	fbb2 f5f3 	udiv	r5, r2, r3
 800640a:	f7fe fc31 	bl	8004c70 <HAL_RCC_GetPCLK2Freq>
 800640e:	4602      	mov	r2, r0
 8006410:	4613      	mov	r3, r2
 8006412:	009b      	lsls	r3, r3, #2
 8006414:	4413      	add	r3, r2
 8006416:	009a      	lsls	r2, r3, #2
 8006418:	441a      	add	r2, r3
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	685b      	ldr	r3, [r3, #4]
 800641e:	009b      	lsls	r3, r3, #2
 8006420:	fbb2 f3f3 	udiv	r3, r2, r3
 8006424:	4a58      	ldr	r2, [pc, #352]	; (8006588 <UART_SetConfig+0x22c>)
 8006426:	fba2 2303 	umull	r2, r3, r2, r3
 800642a:	095b      	lsrs	r3, r3, #5
 800642c:	2264      	movs	r2, #100	; 0x64
 800642e:	fb02 f303 	mul.w	r3, r2, r3
 8006432:	1aeb      	subs	r3, r5, r3
 8006434:	011b      	lsls	r3, r3, #4
 8006436:	3332      	adds	r3, #50	; 0x32
 8006438:	4a53      	ldr	r2, [pc, #332]	; (8006588 <UART_SetConfig+0x22c>)
 800643a:	fba2 2303 	umull	r2, r3, r2, r3
 800643e:	095b      	lsrs	r3, r3, #5
 8006440:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006444:	441c      	add	r4, r3
 8006446:	f7fe fc13 	bl	8004c70 <HAL_RCC_GetPCLK2Freq>
 800644a:	4602      	mov	r2, r0
 800644c:	4613      	mov	r3, r2
 800644e:	009b      	lsls	r3, r3, #2
 8006450:	4413      	add	r3, r2
 8006452:	009a      	lsls	r2, r3, #2
 8006454:	441a      	add	r2, r3
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	685b      	ldr	r3, [r3, #4]
 800645a:	009b      	lsls	r3, r3, #2
 800645c:	fbb2 f5f3 	udiv	r5, r2, r3
 8006460:	f7fe fc06 	bl	8004c70 <HAL_RCC_GetPCLK2Freq>
 8006464:	4602      	mov	r2, r0
 8006466:	4613      	mov	r3, r2
 8006468:	009b      	lsls	r3, r3, #2
 800646a:	4413      	add	r3, r2
 800646c:	009a      	lsls	r2, r3, #2
 800646e:	441a      	add	r2, r3
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	685b      	ldr	r3, [r3, #4]
 8006474:	009b      	lsls	r3, r3, #2
 8006476:	fbb2 f3f3 	udiv	r3, r2, r3
 800647a:	4a43      	ldr	r2, [pc, #268]	; (8006588 <UART_SetConfig+0x22c>)
 800647c:	fba2 2303 	umull	r2, r3, r2, r3
 8006480:	095b      	lsrs	r3, r3, #5
 8006482:	2264      	movs	r2, #100	; 0x64
 8006484:	fb02 f303 	mul.w	r3, r2, r3
 8006488:	1aeb      	subs	r3, r5, r3
 800648a:	011b      	lsls	r3, r3, #4
 800648c:	3332      	adds	r3, #50	; 0x32
 800648e:	4a3e      	ldr	r2, [pc, #248]	; (8006588 <UART_SetConfig+0x22c>)
 8006490:	fba2 2303 	umull	r2, r3, r2, r3
 8006494:	095b      	lsrs	r3, r3, #5
 8006496:	f003 020f 	and.w	r2, r3, #15
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	4422      	add	r2, r4
 80064a0:	609a      	str	r2, [r3, #8]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
  }
#endif /* USART_CR1_OVER8 */
}
 80064a2:	e06a      	b.n	800657a <UART_SetConfig+0x21e>
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 80064a4:	f7fe fbd0 	bl	8004c48 <HAL_RCC_GetPCLK1Freq>
 80064a8:	4602      	mov	r2, r0
 80064aa:	4613      	mov	r3, r2
 80064ac:	009b      	lsls	r3, r3, #2
 80064ae:	4413      	add	r3, r2
 80064b0:	009a      	lsls	r2, r3, #2
 80064b2:	441a      	add	r2, r3
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	685b      	ldr	r3, [r3, #4]
 80064b8:	009b      	lsls	r3, r3, #2
 80064ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80064be:	4a32      	ldr	r2, [pc, #200]	; (8006588 <UART_SetConfig+0x22c>)
 80064c0:	fba2 2303 	umull	r2, r3, r2, r3
 80064c4:	095b      	lsrs	r3, r3, #5
 80064c6:	011c      	lsls	r4, r3, #4
 80064c8:	f7fe fbbe 	bl	8004c48 <HAL_RCC_GetPCLK1Freq>
 80064cc:	4602      	mov	r2, r0
 80064ce:	4613      	mov	r3, r2
 80064d0:	009b      	lsls	r3, r3, #2
 80064d2:	4413      	add	r3, r2
 80064d4:	009a      	lsls	r2, r3, #2
 80064d6:	441a      	add	r2, r3
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	685b      	ldr	r3, [r3, #4]
 80064dc:	009b      	lsls	r3, r3, #2
 80064de:	fbb2 f5f3 	udiv	r5, r2, r3
 80064e2:	f7fe fbb1 	bl	8004c48 <HAL_RCC_GetPCLK1Freq>
 80064e6:	4602      	mov	r2, r0
 80064e8:	4613      	mov	r3, r2
 80064ea:	009b      	lsls	r3, r3, #2
 80064ec:	4413      	add	r3, r2
 80064ee:	009a      	lsls	r2, r3, #2
 80064f0:	441a      	add	r2, r3
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	685b      	ldr	r3, [r3, #4]
 80064f6:	009b      	lsls	r3, r3, #2
 80064f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80064fc:	4a22      	ldr	r2, [pc, #136]	; (8006588 <UART_SetConfig+0x22c>)
 80064fe:	fba2 2303 	umull	r2, r3, r2, r3
 8006502:	095b      	lsrs	r3, r3, #5
 8006504:	2264      	movs	r2, #100	; 0x64
 8006506:	fb02 f303 	mul.w	r3, r2, r3
 800650a:	1aeb      	subs	r3, r5, r3
 800650c:	011b      	lsls	r3, r3, #4
 800650e:	3332      	adds	r3, #50	; 0x32
 8006510:	4a1d      	ldr	r2, [pc, #116]	; (8006588 <UART_SetConfig+0x22c>)
 8006512:	fba2 2303 	umull	r2, r3, r2, r3
 8006516:	095b      	lsrs	r3, r3, #5
 8006518:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800651c:	441c      	add	r4, r3
 800651e:	f7fe fb93 	bl	8004c48 <HAL_RCC_GetPCLK1Freq>
 8006522:	4602      	mov	r2, r0
 8006524:	4613      	mov	r3, r2
 8006526:	009b      	lsls	r3, r3, #2
 8006528:	4413      	add	r3, r2
 800652a:	009a      	lsls	r2, r3, #2
 800652c:	441a      	add	r2, r3
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	685b      	ldr	r3, [r3, #4]
 8006532:	009b      	lsls	r3, r3, #2
 8006534:	fbb2 f5f3 	udiv	r5, r2, r3
 8006538:	f7fe fb86 	bl	8004c48 <HAL_RCC_GetPCLK1Freq>
 800653c:	4602      	mov	r2, r0
 800653e:	4613      	mov	r3, r2
 8006540:	009b      	lsls	r3, r3, #2
 8006542:	4413      	add	r3, r2
 8006544:	009a      	lsls	r2, r3, #2
 8006546:	441a      	add	r2, r3
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	685b      	ldr	r3, [r3, #4]
 800654c:	009b      	lsls	r3, r3, #2
 800654e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006552:	4a0d      	ldr	r2, [pc, #52]	; (8006588 <UART_SetConfig+0x22c>)
 8006554:	fba2 2303 	umull	r2, r3, r2, r3
 8006558:	095b      	lsrs	r3, r3, #5
 800655a:	2264      	movs	r2, #100	; 0x64
 800655c:	fb02 f303 	mul.w	r3, r2, r3
 8006560:	1aeb      	subs	r3, r5, r3
 8006562:	011b      	lsls	r3, r3, #4
 8006564:	3332      	adds	r3, #50	; 0x32
 8006566:	4a08      	ldr	r2, [pc, #32]	; (8006588 <UART_SetConfig+0x22c>)
 8006568:	fba2 2303 	umull	r2, r3, r2, r3
 800656c:	095b      	lsrs	r3, r3, #5
 800656e:	f003 020f 	and.w	r2, r3, #15
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	4422      	add	r2, r4
 8006578:	609a      	str	r2, [r3, #8]
}
 800657a:	bf00      	nop
 800657c:	3710      	adds	r7, #16
 800657e:	46bd      	mov	sp, r7
 8006580:	bdb0      	pop	{r4, r5, r7, pc}
 8006582:	bf00      	nop
 8006584:	40013800 	.word	0x40013800
 8006588:	51eb851f 	.word	0x51eb851f

0800658c <__errno>:
 800658c:	4b01      	ldr	r3, [pc, #4]	; (8006594 <__errno+0x8>)
 800658e:	6818      	ldr	r0, [r3, #0]
 8006590:	4770      	bx	lr
 8006592:	bf00      	nop
 8006594:	20000024 	.word	0x20000024

08006598 <__libc_init_array>:
 8006598:	b570      	push	{r4, r5, r6, lr}
 800659a:	2500      	movs	r5, #0
 800659c:	4e0c      	ldr	r6, [pc, #48]	; (80065d0 <__libc_init_array+0x38>)
 800659e:	4c0d      	ldr	r4, [pc, #52]	; (80065d4 <__libc_init_array+0x3c>)
 80065a0:	1ba4      	subs	r4, r4, r6
 80065a2:	10a4      	asrs	r4, r4, #2
 80065a4:	42a5      	cmp	r5, r4
 80065a6:	d109      	bne.n	80065bc <__libc_init_array+0x24>
 80065a8:	f003 fd94 	bl	800a0d4 <_init>
 80065ac:	2500      	movs	r5, #0
 80065ae:	4e0a      	ldr	r6, [pc, #40]	; (80065d8 <__libc_init_array+0x40>)
 80065b0:	4c0a      	ldr	r4, [pc, #40]	; (80065dc <__libc_init_array+0x44>)
 80065b2:	1ba4      	subs	r4, r4, r6
 80065b4:	10a4      	asrs	r4, r4, #2
 80065b6:	42a5      	cmp	r5, r4
 80065b8:	d105      	bne.n	80065c6 <__libc_init_array+0x2e>
 80065ba:	bd70      	pop	{r4, r5, r6, pc}
 80065bc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80065c0:	4798      	blx	r3
 80065c2:	3501      	adds	r5, #1
 80065c4:	e7ee      	b.n	80065a4 <__libc_init_array+0xc>
 80065c6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80065ca:	4798      	blx	r3
 80065cc:	3501      	adds	r5, #1
 80065ce:	e7f2      	b.n	80065b6 <__libc_init_array+0x1e>
 80065d0:	0800ab50 	.word	0x0800ab50
 80065d4:	0800ab50 	.word	0x0800ab50
 80065d8:	0800ab50 	.word	0x0800ab50
 80065dc:	0800ab54 	.word	0x0800ab54

080065e0 <memcpy>:
 80065e0:	b510      	push	{r4, lr}
 80065e2:	1e43      	subs	r3, r0, #1
 80065e4:	440a      	add	r2, r1
 80065e6:	4291      	cmp	r1, r2
 80065e8:	d100      	bne.n	80065ec <memcpy+0xc>
 80065ea:	bd10      	pop	{r4, pc}
 80065ec:	f811 4b01 	ldrb.w	r4, [r1], #1
 80065f0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80065f4:	e7f7      	b.n	80065e6 <memcpy+0x6>

080065f6 <memmove>:
 80065f6:	4288      	cmp	r0, r1
 80065f8:	b510      	push	{r4, lr}
 80065fa:	eb01 0302 	add.w	r3, r1, r2
 80065fe:	d807      	bhi.n	8006610 <memmove+0x1a>
 8006600:	1e42      	subs	r2, r0, #1
 8006602:	4299      	cmp	r1, r3
 8006604:	d00a      	beq.n	800661c <memmove+0x26>
 8006606:	f811 4b01 	ldrb.w	r4, [r1], #1
 800660a:	f802 4f01 	strb.w	r4, [r2, #1]!
 800660e:	e7f8      	b.n	8006602 <memmove+0xc>
 8006610:	4283      	cmp	r3, r0
 8006612:	d9f5      	bls.n	8006600 <memmove+0xa>
 8006614:	1881      	adds	r1, r0, r2
 8006616:	1ad2      	subs	r2, r2, r3
 8006618:	42d3      	cmn	r3, r2
 800661a:	d100      	bne.n	800661e <memmove+0x28>
 800661c:	bd10      	pop	{r4, pc}
 800661e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006622:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8006626:	e7f7      	b.n	8006618 <memmove+0x22>

08006628 <memset>:
 8006628:	4603      	mov	r3, r0
 800662a:	4402      	add	r2, r0
 800662c:	4293      	cmp	r3, r2
 800662e:	d100      	bne.n	8006632 <memset+0xa>
 8006630:	4770      	bx	lr
 8006632:	f803 1b01 	strb.w	r1, [r3], #1
 8006636:	e7f9      	b.n	800662c <memset+0x4>

08006638 <__cvt>:
 8006638:	2b00      	cmp	r3, #0
 800663a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800663e:	461e      	mov	r6, r3
 8006640:	bfbb      	ittet	lt
 8006642:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8006646:	461e      	movlt	r6, r3
 8006648:	2300      	movge	r3, #0
 800664a:	232d      	movlt	r3, #45	; 0x2d
 800664c:	b088      	sub	sp, #32
 800664e:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8006650:	e9dd 1a12 	ldrd	r1, sl, [sp, #72]	; 0x48
 8006654:	f027 0720 	bic.w	r7, r7, #32
 8006658:	2f46      	cmp	r7, #70	; 0x46
 800665a:	4614      	mov	r4, r2
 800665c:	9d10      	ldr	r5, [sp, #64]	; 0x40
 800665e:	700b      	strb	r3, [r1, #0]
 8006660:	d004      	beq.n	800666c <__cvt+0x34>
 8006662:	2f45      	cmp	r7, #69	; 0x45
 8006664:	d100      	bne.n	8006668 <__cvt+0x30>
 8006666:	3501      	adds	r5, #1
 8006668:	2302      	movs	r3, #2
 800666a:	e000      	b.n	800666e <__cvt+0x36>
 800666c:	2303      	movs	r3, #3
 800666e:	aa07      	add	r2, sp, #28
 8006670:	9204      	str	r2, [sp, #16]
 8006672:	aa06      	add	r2, sp, #24
 8006674:	e9cd a202 	strd	sl, r2, [sp, #8]
 8006678:	e9cd 3500 	strd	r3, r5, [sp]
 800667c:	4622      	mov	r2, r4
 800667e:	4633      	mov	r3, r6
 8006680:	f001 fdb2 	bl	80081e8 <_dtoa_r>
 8006684:	2f47      	cmp	r7, #71	; 0x47
 8006686:	4680      	mov	r8, r0
 8006688:	d102      	bne.n	8006690 <__cvt+0x58>
 800668a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800668c:	07db      	lsls	r3, r3, #31
 800668e:	d526      	bpl.n	80066de <__cvt+0xa6>
 8006690:	2f46      	cmp	r7, #70	; 0x46
 8006692:	eb08 0905 	add.w	r9, r8, r5
 8006696:	d111      	bne.n	80066bc <__cvt+0x84>
 8006698:	f898 3000 	ldrb.w	r3, [r8]
 800669c:	2b30      	cmp	r3, #48	; 0x30
 800669e:	d10a      	bne.n	80066b6 <__cvt+0x7e>
 80066a0:	2200      	movs	r2, #0
 80066a2:	2300      	movs	r3, #0
 80066a4:	4620      	mov	r0, r4
 80066a6:	4631      	mov	r1, r6
 80066a8:	f7fa f97e 	bl	80009a8 <__aeabi_dcmpeq>
 80066ac:	b918      	cbnz	r0, 80066b6 <__cvt+0x7e>
 80066ae:	f1c5 0501 	rsb	r5, r5, #1
 80066b2:	f8ca 5000 	str.w	r5, [sl]
 80066b6:	f8da 3000 	ldr.w	r3, [sl]
 80066ba:	4499      	add	r9, r3
 80066bc:	2200      	movs	r2, #0
 80066be:	2300      	movs	r3, #0
 80066c0:	4620      	mov	r0, r4
 80066c2:	4631      	mov	r1, r6
 80066c4:	f7fa f970 	bl	80009a8 <__aeabi_dcmpeq>
 80066c8:	b938      	cbnz	r0, 80066da <__cvt+0xa2>
 80066ca:	2230      	movs	r2, #48	; 0x30
 80066cc:	9b07      	ldr	r3, [sp, #28]
 80066ce:	454b      	cmp	r3, r9
 80066d0:	d205      	bcs.n	80066de <__cvt+0xa6>
 80066d2:	1c59      	adds	r1, r3, #1
 80066d4:	9107      	str	r1, [sp, #28]
 80066d6:	701a      	strb	r2, [r3, #0]
 80066d8:	e7f8      	b.n	80066cc <__cvt+0x94>
 80066da:	f8cd 901c 	str.w	r9, [sp, #28]
 80066de:	4640      	mov	r0, r8
 80066e0:	9b07      	ldr	r3, [sp, #28]
 80066e2:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80066e4:	eba3 0308 	sub.w	r3, r3, r8
 80066e8:	6013      	str	r3, [r2, #0]
 80066ea:	b008      	add	sp, #32
 80066ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080066f0 <__exponent>:
 80066f0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80066f2:	2900      	cmp	r1, #0
 80066f4:	bfb4      	ite	lt
 80066f6:	232d      	movlt	r3, #45	; 0x2d
 80066f8:	232b      	movge	r3, #43	; 0x2b
 80066fa:	4604      	mov	r4, r0
 80066fc:	bfb8      	it	lt
 80066fe:	4249      	neglt	r1, r1
 8006700:	2909      	cmp	r1, #9
 8006702:	f804 2b02 	strb.w	r2, [r4], #2
 8006706:	7043      	strb	r3, [r0, #1]
 8006708:	dd21      	ble.n	800674e <__exponent+0x5e>
 800670a:	f10d 0307 	add.w	r3, sp, #7
 800670e:	461f      	mov	r7, r3
 8006710:	260a      	movs	r6, #10
 8006712:	fb91 f5f6 	sdiv	r5, r1, r6
 8006716:	fb06 1115 	mls	r1, r6, r5, r1
 800671a:	2d09      	cmp	r5, #9
 800671c:	f101 0130 	add.w	r1, r1, #48	; 0x30
 8006720:	f803 1c01 	strb.w	r1, [r3, #-1]
 8006724:	f103 32ff 	add.w	r2, r3, #4294967295	; 0xffffffff
 8006728:	4629      	mov	r1, r5
 800672a:	dc09      	bgt.n	8006740 <__exponent+0x50>
 800672c:	3130      	adds	r1, #48	; 0x30
 800672e:	3b02      	subs	r3, #2
 8006730:	f802 1c01 	strb.w	r1, [r2, #-1]
 8006734:	42bb      	cmp	r3, r7
 8006736:	4622      	mov	r2, r4
 8006738:	d304      	bcc.n	8006744 <__exponent+0x54>
 800673a:	1a10      	subs	r0, r2, r0
 800673c:	b003      	add	sp, #12
 800673e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006740:	4613      	mov	r3, r2
 8006742:	e7e6      	b.n	8006712 <__exponent+0x22>
 8006744:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006748:	f804 2b01 	strb.w	r2, [r4], #1
 800674c:	e7f2      	b.n	8006734 <__exponent+0x44>
 800674e:	2330      	movs	r3, #48	; 0x30
 8006750:	4419      	add	r1, r3
 8006752:	7083      	strb	r3, [r0, #2]
 8006754:	1d02      	adds	r2, r0, #4
 8006756:	70c1      	strb	r1, [r0, #3]
 8006758:	e7ef      	b.n	800673a <__exponent+0x4a>
	...

0800675c <_printf_float>:
 800675c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006760:	b091      	sub	sp, #68	; 0x44
 8006762:	460c      	mov	r4, r1
 8006764:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 8006766:	4693      	mov	fp, r2
 8006768:	461e      	mov	r6, r3
 800676a:	4605      	mov	r5, r0
 800676c:	f002 fe1e 	bl	80093ac <_localeconv_r>
 8006770:	6803      	ldr	r3, [r0, #0]
 8006772:	4618      	mov	r0, r3
 8006774:	9309      	str	r3, [sp, #36]	; 0x24
 8006776:	f7f9 fceb 	bl	8000150 <strlen>
 800677a:	2300      	movs	r3, #0
 800677c:	930e      	str	r3, [sp, #56]	; 0x38
 800677e:	683b      	ldr	r3, [r7, #0]
 8006780:	900a      	str	r0, [sp, #40]	; 0x28
 8006782:	3307      	adds	r3, #7
 8006784:	f023 0307 	bic.w	r3, r3, #7
 8006788:	f103 0208 	add.w	r2, r3, #8
 800678c:	f894 8018 	ldrb.w	r8, [r4, #24]
 8006790:	f8d4 a000 	ldr.w	sl, [r4]
 8006794:	603a      	str	r2, [r7, #0]
 8006796:	e9d3 2300 	ldrd	r2, r3, [r3]
 800679a:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800679e:	e9d4 7912 	ldrd	r7, r9, [r4, #72]	; 0x48
 80067a2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80067a6:	930b      	str	r3, [sp, #44]	; 0x2c
 80067a8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80067ac:	4ba6      	ldr	r3, [pc, #664]	; (8006a48 <_printf_float+0x2ec>)
 80067ae:	4638      	mov	r0, r7
 80067b0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80067b2:	f7fa f92b 	bl	8000a0c <__aeabi_dcmpun>
 80067b6:	bb68      	cbnz	r0, 8006814 <_printf_float+0xb8>
 80067b8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80067bc:	4ba2      	ldr	r3, [pc, #648]	; (8006a48 <_printf_float+0x2ec>)
 80067be:	4638      	mov	r0, r7
 80067c0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80067c2:	f7fa f905 	bl	80009d0 <__aeabi_dcmple>
 80067c6:	bb28      	cbnz	r0, 8006814 <_printf_float+0xb8>
 80067c8:	2200      	movs	r2, #0
 80067ca:	2300      	movs	r3, #0
 80067cc:	4638      	mov	r0, r7
 80067ce:	4649      	mov	r1, r9
 80067d0:	f7fa f8f4 	bl	80009bc <__aeabi_dcmplt>
 80067d4:	b110      	cbz	r0, 80067dc <_printf_float+0x80>
 80067d6:	232d      	movs	r3, #45	; 0x2d
 80067d8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80067dc:	4f9b      	ldr	r7, [pc, #620]	; (8006a4c <_printf_float+0x2f0>)
 80067de:	4b9c      	ldr	r3, [pc, #624]	; (8006a50 <_printf_float+0x2f4>)
 80067e0:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80067e4:	bf98      	it	ls
 80067e6:	461f      	movls	r7, r3
 80067e8:	2303      	movs	r3, #3
 80067ea:	f04f 0900 	mov.w	r9, #0
 80067ee:	6123      	str	r3, [r4, #16]
 80067f0:	f02a 0304 	bic.w	r3, sl, #4
 80067f4:	6023      	str	r3, [r4, #0]
 80067f6:	9600      	str	r6, [sp, #0]
 80067f8:	465b      	mov	r3, fp
 80067fa:	aa0f      	add	r2, sp, #60	; 0x3c
 80067fc:	4621      	mov	r1, r4
 80067fe:	4628      	mov	r0, r5
 8006800:	f000 f9e2 	bl	8006bc8 <_printf_common>
 8006804:	3001      	adds	r0, #1
 8006806:	f040 8090 	bne.w	800692a <_printf_float+0x1ce>
 800680a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800680e:	b011      	add	sp, #68	; 0x44
 8006810:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006814:	463a      	mov	r2, r7
 8006816:	464b      	mov	r3, r9
 8006818:	4638      	mov	r0, r7
 800681a:	4649      	mov	r1, r9
 800681c:	f7fa f8f6 	bl	8000a0c <__aeabi_dcmpun>
 8006820:	b110      	cbz	r0, 8006828 <_printf_float+0xcc>
 8006822:	4f8c      	ldr	r7, [pc, #560]	; (8006a54 <_printf_float+0x2f8>)
 8006824:	4b8c      	ldr	r3, [pc, #560]	; (8006a58 <_printf_float+0x2fc>)
 8006826:	e7db      	b.n	80067e0 <_printf_float+0x84>
 8006828:	6863      	ldr	r3, [r4, #4]
 800682a:	f44a 6280 	orr.w	r2, sl, #1024	; 0x400
 800682e:	1c59      	adds	r1, r3, #1
 8006830:	a80d      	add	r0, sp, #52	; 0x34
 8006832:	a90e      	add	r1, sp, #56	; 0x38
 8006834:	d140      	bne.n	80068b8 <_printf_float+0x15c>
 8006836:	2306      	movs	r3, #6
 8006838:	6063      	str	r3, [r4, #4]
 800683a:	f04f 0c00 	mov.w	ip, #0
 800683e:	f10d 0333 	add.w	r3, sp, #51	; 0x33
 8006842:	e9cd 2301 	strd	r2, r3, [sp, #4]
 8006846:	6863      	ldr	r3, [r4, #4]
 8006848:	6022      	str	r2, [r4, #0]
 800684a:	e9cd 0803 	strd	r0, r8, [sp, #12]
 800684e:	9300      	str	r3, [sp, #0]
 8006850:	463a      	mov	r2, r7
 8006852:	464b      	mov	r3, r9
 8006854:	e9cd 1c05 	strd	r1, ip, [sp, #20]
 8006858:	4628      	mov	r0, r5
 800685a:	f7ff feed 	bl	8006638 <__cvt>
 800685e:	f008 03df 	and.w	r3, r8, #223	; 0xdf
 8006862:	2b47      	cmp	r3, #71	; 0x47
 8006864:	4607      	mov	r7, r0
 8006866:	d109      	bne.n	800687c <_printf_float+0x120>
 8006868:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800686a:	1cd8      	adds	r0, r3, #3
 800686c:	db02      	blt.n	8006874 <_printf_float+0x118>
 800686e:	6862      	ldr	r2, [r4, #4]
 8006870:	4293      	cmp	r3, r2
 8006872:	dd47      	ble.n	8006904 <_printf_float+0x1a8>
 8006874:	f1a8 0802 	sub.w	r8, r8, #2
 8006878:	fa5f f888 	uxtb.w	r8, r8
 800687c:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 8006880:	990d      	ldr	r1, [sp, #52]	; 0x34
 8006882:	d824      	bhi.n	80068ce <_printf_float+0x172>
 8006884:	3901      	subs	r1, #1
 8006886:	4642      	mov	r2, r8
 8006888:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800688c:	910d      	str	r1, [sp, #52]	; 0x34
 800688e:	f7ff ff2f 	bl	80066f0 <__exponent>
 8006892:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006894:	4681      	mov	r9, r0
 8006896:	1813      	adds	r3, r2, r0
 8006898:	2a01      	cmp	r2, #1
 800689a:	6123      	str	r3, [r4, #16]
 800689c:	dc02      	bgt.n	80068a4 <_printf_float+0x148>
 800689e:	6822      	ldr	r2, [r4, #0]
 80068a0:	07d1      	lsls	r1, r2, #31
 80068a2:	d501      	bpl.n	80068a8 <_printf_float+0x14c>
 80068a4:	3301      	adds	r3, #1
 80068a6:	6123      	str	r3, [r4, #16]
 80068a8:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	d0a2      	beq.n	80067f6 <_printf_float+0x9a>
 80068b0:	232d      	movs	r3, #45	; 0x2d
 80068b2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80068b6:	e79e      	b.n	80067f6 <_printf_float+0x9a>
 80068b8:	f1b8 0f67 	cmp.w	r8, #103	; 0x67
 80068bc:	f000 816e 	beq.w	8006b9c <_printf_float+0x440>
 80068c0:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80068c4:	d1b9      	bne.n	800683a <_printf_float+0xde>
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	d1b7      	bne.n	800683a <_printf_float+0xde>
 80068ca:	2301      	movs	r3, #1
 80068cc:	e7b4      	b.n	8006838 <_printf_float+0xdc>
 80068ce:	f1b8 0f66 	cmp.w	r8, #102	; 0x66
 80068d2:	d119      	bne.n	8006908 <_printf_float+0x1ac>
 80068d4:	2900      	cmp	r1, #0
 80068d6:	6863      	ldr	r3, [r4, #4]
 80068d8:	dd0c      	ble.n	80068f4 <_printf_float+0x198>
 80068da:	6121      	str	r1, [r4, #16]
 80068dc:	b913      	cbnz	r3, 80068e4 <_printf_float+0x188>
 80068de:	6822      	ldr	r2, [r4, #0]
 80068e0:	07d2      	lsls	r2, r2, #31
 80068e2:	d502      	bpl.n	80068ea <_printf_float+0x18e>
 80068e4:	3301      	adds	r3, #1
 80068e6:	440b      	add	r3, r1
 80068e8:	6123      	str	r3, [r4, #16]
 80068ea:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80068ec:	f04f 0900 	mov.w	r9, #0
 80068f0:	65a3      	str	r3, [r4, #88]	; 0x58
 80068f2:	e7d9      	b.n	80068a8 <_printf_float+0x14c>
 80068f4:	b913      	cbnz	r3, 80068fc <_printf_float+0x1a0>
 80068f6:	6822      	ldr	r2, [r4, #0]
 80068f8:	07d0      	lsls	r0, r2, #31
 80068fa:	d501      	bpl.n	8006900 <_printf_float+0x1a4>
 80068fc:	3302      	adds	r3, #2
 80068fe:	e7f3      	b.n	80068e8 <_printf_float+0x18c>
 8006900:	2301      	movs	r3, #1
 8006902:	e7f1      	b.n	80068e8 <_printf_float+0x18c>
 8006904:	f04f 0867 	mov.w	r8, #103	; 0x67
 8006908:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 800690c:	4293      	cmp	r3, r2
 800690e:	db05      	blt.n	800691c <_printf_float+0x1c0>
 8006910:	6822      	ldr	r2, [r4, #0]
 8006912:	6123      	str	r3, [r4, #16]
 8006914:	07d1      	lsls	r1, r2, #31
 8006916:	d5e8      	bpl.n	80068ea <_printf_float+0x18e>
 8006918:	3301      	adds	r3, #1
 800691a:	e7e5      	b.n	80068e8 <_printf_float+0x18c>
 800691c:	2b00      	cmp	r3, #0
 800691e:	bfcc      	ite	gt
 8006920:	2301      	movgt	r3, #1
 8006922:	f1c3 0302 	rsble	r3, r3, #2
 8006926:	4413      	add	r3, r2
 8006928:	e7de      	b.n	80068e8 <_printf_float+0x18c>
 800692a:	6823      	ldr	r3, [r4, #0]
 800692c:	055a      	lsls	r2, r3, #21
 800692e:	d407      	bmi.n	8006940 <_printf_float+0x1e4>
 8006930:	6923      	ldr	r3, [r4, #16]
 8006932:	463a      	mov	r2, r7
 8006934:	4659      	mov	r1, fp
 8006936:	4628      	mov	r0, r5
 8006938:	47b0      	blx	r6
 800693a:	3001      	adds	r0, #1
 800693c:	d129      	bne.n	8006992 <_printf_float+0x236>
 800693e:	e764      	b.n	800680a <_printf_float+0xae>
 8006940:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 8006944:	f240 80d7 	bls.w	8006af6 <_printf_float+0x39a>
 8006948:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800694c:	2200      	movs	r2, #0
 800694e:	2300      	movs	r3, #0
 8006950:	f7fa f82a 	bl	80009a8 <__aeabi_dcmpeq>
 8006954:	b388      	cbz	r0, 80069ba <_printf_float+0x25e>
 8006956:	2301      	movs	r3, #1
 8006958:	4a40      	ldr	r2, [pc, #256]	; (8006a5c <_printf_float+0x300>)
 800695a:	4659      	mov	r1, fp
 800695c:	4628      	mov	r0, r5
 800695e:	47b0      	blx	r6
 8006960:	3001      	adds	r0, #1
 8006962:	f43f af52 	beq.w	800680a <_printf_float+0xae>
 8006966:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800696a:	429a      	cmp	r2, r3
 800696c:	db02      	blt.n	8006974 <_printf_float+0x218>
 800696e:	6823      	ldr	r3, [r4, #0]
 8006970:	07d8      	lsls	r0, r3, #31
 8006972:	d50e      	bpl.n	8006992 <_printf_float+0x236>
 8006974:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006978:	4659      	mov	r1, fp
 800697a:	4628      	mov	r0, r5
 800697c:	47b0      	blx	r6
 800697e:	3001      	adds	r0, #1
 8006980:	f43f af43 	beq.w	800680a <_printf_float+0xae>
 8006984:	2700      	movs	r7, #0
 8006986:	f104 081a 	add.w	r8, r4, #26
 800698a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800698c:	3b01      	subs	r3, #1
 800698e:	42bb      	cmp	r3, r7
 8006990:	dc09      	bgt.n	80069a6 <_printf_float+0x24a>
 8006992:	6823      	ldr	r3, [r4, #0]
 8006994:	079f      	lsls	r7, r3, #30
 8006996:	f100 80fd 	bmi.w	8006b94 <_printf_float+0x438>
 800699a:	68e0      	ldr	r0, [r4, #12]
 800699c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800699e:	4298      	cmp	r0, r3
 80069a0:	bfb8      	it	lt
 80069a2:	4618      	movlt	r0, r3
 80069a4:	e733      	b.n	800680e <_printf_float+0xb2>
 80069a6:	2301      	movs	r3, #1
 80069a8:	4642      	mov	r2, r8
 80069aa:	4659      	mov	r1, fp
 80069ac:	4628      	mov	r0, r5
 80069ae:	47b0      	blx	r6
 80069b0:	3001      	adds	r0, #1
 80069b2:	f43f af2a 	beq.w	800680a <_printf_float+0xae>
 80069b6:	3701      	adds	r7, #1
 80069b8:	e7e7      	b.n	800698a <_printf_float+0x22e>
 80069ba:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80069bc:	2b00      	cmp	r3, #0
 80069be:	dc2b      	bgt.n	8006a18 <_printf_float+0x2bc>
 80069c0:	2301      	movs	r3, #1
 80069c2:	4a26      	ldr	r2, [pc, #152]	; (8006a5c <_printf_float+0x300>)
 80069c4:	4659      	mov	r1, fp
 80069c6:	4628      	mov	r0, r5
 80069c8:	47b0      	blx	r6
 80069ca:	3001      	adds	r0, #1
 80069cc:	f43f af1d 	beq.w	800680a <_printf_float+0xae>
 80069d0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80069d2:	b923      	cbnz	r3, 80069de <_printf_float+0x282>
 80069d4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80069d6:	b913      	cbnz	r3, 80069de <_printf_float+0x282>
 80069d8:	6823      	ldr	r3, [r4, #0]
 80069da:	07d9      	lsls	r1, r3, #31
 80069dc:	d5d9      	bpl.n	8006992 <_printf_float+0x236>
 80069de:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80069e2:	4659      	mov	r1, fp
 80069e4:	4628      	mov	r0, r5
 80069e6:	47b0      	blx	r6
 80069e8:	3001      	adds	r0, #1
 80069ea:	f43f af0e 	beq.w	800680a <_printf_float+0xae>
 80069ee:	f04f 0800 	mov.w	r8, #0
 80069f2:	f104 091a 	add.w	r9, r4, #26
 80069f6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80069f8:	425b      	negs	r3, r3
 80069fa:	4543      	cmp	r3, r8
 80069fc:	dc01      	bgt.n	8006a02 <_printf_float+0x2a6>
 80069fe:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006a00:	e797      	b.n	8006932 <_printf_float+0x1d6>
 8006a02:	2301      	movs	r3, #1
 8006a04:	464a      	mov	r2, r9
 8006a06:	4659      	mov	r1, fp
 8006a08:	4628      	mov	r0, r5
 8006a0a:	47b0      	blx	r6
 8006a0c:	3001      	adds	r0, #1
 8006a0e:	f43f aefc 	beq.w	800680a <_printf_float+0xae>
 8006a12:	f108 0801 	add.w	r8, r8, #1
 8006a16:	e7ee      	b.n	80069f6 <_printf_float+0x29a>
 8006a18:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006a1a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006a1c:	429a      	cmp	r2, r3
 8006a1e:	bfa8      	it	ge
 8006a20:	461a      	movge	r2, r3
 8006a22:	2a00      	cmp	r2, #0
 8006a24:	4690      	mov	r8, r2
 8006a26:	dd07      	ble.n	8006a38 <_printf_float+0x2dc>
 8006a28:	4613      	mov	r3, r2
 8006a2a:	4659      	mov	r1, fp
 8006a2c:	463a      	mov	r2, r7
 8006a2e:	4628      	mov	r0, r5
 8006a30:	47b0      	blx	r6
 8006a32:	3001      	adds	r0, #1
 8006a34:	f43f aee9 	beq.w	800680a <_printf_float+0xae>
 8006a38:	f104 031a 	add.w	r3, r4, #26
 8006a3c:	f04f 0a00 	mov.w	sl, #0
 8006a40:	ea28 78e8 	bic.w	r8, r8, r8, asr #31
 8006a44:	930b      	str	r3, [sp, #44]	; 0x2c
 8006a46:	e015      	b.n	8006a74 <_printf_float+0x318>
 8006a48:	7fefffff 	.word	0x7fefffff
 8006a4c:	0800a8a0 	.word	0x0800a8a0
 8006a50:	0800a89c 	.word	0x0800a89c
 8006a54:	0800a8a8 	.word	0x0800a8a8
 8006a58:	0800a8a4 	.word	0x0800a8a4
 8006a5c:	0800a8ac 	.word	0x0800a8ac
 8006a60:	2301      	movs	r3, #1
 8006a62:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006a64:	4659      	mov	r1, fp
 8006a66:	4628      	mov	r0, r5
 8006a68:	47b0      	blx	r6
 8006a6a:	3001      	adds	r0, #1
 8006a6c:	f43f aecd 	beq.w	800680a <_printf_float+0xae>
 8006a70:	f10a 0a01 	add.w	sl, sl, #1
 8006a74:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
 8006a78:	eba9 0308 	sub.w	r3, r9, r8
 8006a7c:	4553      	cmp	r3, sl
 8006a7e:	dcef      	bgt.n	8006a60 <_printf_float+0x304>
 8006a80:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8006a84:	429a      	cmp	r2, r3
 8006a86:	444f      	add	r7, r9
 8006a88:	db14      	blt.n	8006ab4 <_printf_float+0x358>
 8006a8a:	6823      	ldr	r3, [r4, #0]
 8006a8c:	07da      	lsls	r2, r3, #31
 8006a8e:	d411      	bmi.n	8006ab4 <_printf_float+0x358>
 8006a90:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006a92:	990d      	ldr	r1, [sp, #52]	; 0x34
 8006a94:	eba3 0209 	sub.w	r2, r3, r9
 8006a98:	eba3 0901 	sub.w	r9, r3, r1
 8006a9c:	4591      	cmp	r9, r2
 8006a9e:	bfa8      	it	ge
 8006aa0:	4691      	movge	r9, r2
 8006aa2:	f1b9 0f00 	cmp.w	r9, #0
 8006aa6:	dc0d      	bgt.n	8006ac4 <_printf_float+0x368>
 8006aa8:	2700      	movs	r7, #0
 8006aaa:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006aae:	f104 081a 	add.w	r8, r4, #26
 8006ab2:	e018      	b.n	8006ae6 <_printf_float+0x38a>
 8006ab4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006ab8:	4659      	mov	r1, fp
 8006aba:	4628      	mov	r0, r5
 8006abc:	47b0      	blx	r6
 8006abe:	3001      	adds	r0, #1
 8006ac0:	d1e6      	bne.n	8006a90 <_printf_float+0x334>
 8006ac2:	e6a2      	b.n	800680a <_printf_float+0xae>
 8006ac4:	464b      	mov	r3, r9
 8006ac6:	463a      	mov	r2, r7
 8006ac8:	4659      	mov	r1, fp
 8006aca:	4628      	mov	r0, r5
 8006acc:	47b0      	blx	r6
 8006ace:	3001      	adds	r0, #1
 8006ad0:	d1ea      	bne.n	8006aa8 <_printf_float+0x34c>
 8006ad2:	e69a      	b.n	800680a <_printf_float+0xae>
 8006ad4:	2301      	movs	r3, #1
 8006ad6:	4642      	mov	r2, r8
 8006ad8:	4659      	mov	r1, fp
 8006ada:	4628      	mov	r0, r5
 8006adc:	47b0      	blx	r6
 8006ade:	3001      	adds	r0, #1
 8006ae0:	f43f ae93 	beq.w	800680a <_printf_float+0xae>
 8006ae4:	3701      	adds	r7, #1
 8006ae6:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8006aea:	1a9b      	subs	r3, r3, r2
 8006aec:	eba3 0309 	sub.w	r3, r3, r9
 8006af0:	42bb      	cmp	r3, r7
 8006af2:	dcef      	bgt.n	8006ad4 <_printf_float+0x378>
 8006af4:	e74d      	b.n	8006992 <_printf_float+0x236>
 8006af6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006af8:	2a01      	cmp	r2, #1
 8006afa:	dc01      	bgt.n	8006b00 <_printf_float+0x3a4>
 8006afc:	07db      	lsls	r3, r3, #31
 8006afe:	d538      	bpl.n	8006b72 <_printf_float+0x416>
 8006b00:	2301      	movs	r3, #1
 8006b02:	463a      	mov	r2, r7
 8006b04:	4659      	mov	r1, fp
 8006b06:	4628      	mov	r0, r5
 8006b08:	47b0      	blx	r6
 8006b0a:	3001      	adds	r0, #1
 8006b0c:	f43f ae7d 	beq.w	800680a <_printf_float+0xae>
 8006b10:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006b14:	4659      	mov	r1, fp
 8006b16:	4628      	mov	r0, r5
 8006b18:	47b0      	blx	r6
 8006b1a:	3001      	adds	r0, #1
 8006b1c:	f107 0701 	add.w	r7, r7, #1
 8006b20:	f43f ae73 	beq.w	800680a <_printf_float+0xae>
 8006b24:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006b28:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006b2a:	2200      	movs	r2, #0
 8006b2c:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8006b30:	2300      	movs	r3, #0
 8006b32:	f7f9 ff39 	bl	80009a8 <__aeabi_dcmpeq>
 8006b36:	b9c0      	cbnz	r0, 8006b6a <_printf_float+0x40e>
 8006b38:	4643      	mov	r3, r8
 8006b3a:	463a      	mov	r2, r7
 8006b3c:	4659      	mov	r1, fp
 8006b3e:	4628      	mov	r0, r5
 8006b40:	47b0      	blx	r6
 8006b42:	3001      	adds	r0, #1
 8006b44:	d10d      	bne.n	8006b62 <_printf_float+0x406>
 8006b46:	e660      	b.n	800680a <_printf_float+0xae>
 8006b48:	2301      	movs	r3, #1
 8006b4a:	4642      	mov	r2, r8
 8006b4c:	4659      	mov	r1, fp
 8006b4e:	4628      	mov	r0, r5
 8006b50:	47b0      	blx	r6
 8006b52:	3001      	adds	r0, #1
 8006b54:	f43f ae59 	beq.w	800680a <_printf_float+0xae>
 8006b58:	3701      	adds	r7, #1
 8006b5a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006b5c:	3b01      	subs	r3, #1
 8006b5e:	42bb      	cmp	r3, r7
 8006b60:	dcf2      	bgt.n	8006b48 <_printf_float+0x3ec>
 8006b62:	464b      	mov	r3, r9
 8006b64:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8006b68:	e6e4      	b.n	8006934 <_printf_float+0x1d8>
 8006b6a:	2700      	movs	r7, #0
 8006b6c:	f104 081a 	add.w	r8, r4, #26
 8006b70:	e7f3      	b.n	8006b5a <_printf_float+0x3fe>
 8006b72:	2301      	movs	r3, #1
 8006b74:	e7e1      	b.n	8006b3a <_printf_float+0x3de>
 8006b76:	2301      	movs	r3, #1
 8006b78:	4642      	mov	r2, r8
 8006b7a:	4659      	mov	r1, fp
 8006b7c:	4628      	mov	r0, r5
 8006b7e:	47b0      	blx	r6
 8006b80:	3001      	adds	r0, #1
 8006b82:	f43f ae42 	beq.w	800680a <_printf_float+0xae>
 8006b86:	3701      	adds	r7, #1
 8006b88:	68e3      	ldr	r3, [r4, #12]
 8006b8a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8006b8c:	1a9b      	subs	r3, r3, r2
 8006b8e:	42bb      	cmp	r3, r7
 8006b90:	dcf1      	bgt.n	8006b76 <_printf_float+0x41a>
 8006b92:	e702      	b.n	800699a <_printf_float+0x23e>
 8006b94:	2700      	movs	r7, #0
 8006b96:	f104 0819 	add.w	r8, r4, #25
 8006b9a:	e7f5      	b.n	8006b88 <_printf_float+0x42c>
 8006b9c:	2b00      	cmp	r3, #0
 8006b9e:	f43f ae94 	beq.w	80068ca <_printf_float+0x16e>
 8006ba2:	f04f 0c00 	mov.w	ip, #0
 8006ba6:	e9cd 1c05 	strd	r1, ip, [sp, #20]
 8006baa:	f10d 0133 	add.w	r1, sp, #51	; 0x33
 8006bae:	6022      	str	r2, [r4, #0]
 8006bb0:	e9cd 0803 	strd	r0, r8, [sp, #12]
 8006bb4:	e9cd 2101 	strd	r2, r1, [sp, #4]
 8006bb8:	9300      	str	r3, [sp, #0]
 8006bba:	463a      	mov	r2, r7
 8006bbc:	464b      	mov	r3, r9
 8006bbe:	4628      	mov	r0, r5
 8006bc0:	f7ff fd3a 	bl	8006638 <__cvt>
 8006bc4:	4607      	mov	r7, r0
 8006bc6:	e64f      	b.n	8006868 <_printf_float+0x10c>

08006bc8 <_printf_common>:
 8006bc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006bcc:	4691      	mov	r9, r2
 8006bce:	461f      	mov	r7, r3
 8006bd0:	688a      	ldr	r2, [r1, #8]
 8006bd2:	690b      	ldr	r3, [r1, #16]
 8006bd4:	4606      	mov	r6, r0
 8006bd6:	4293      	cmp	r3, r2
 8006bd8:	bfb8      	it	lt
 8006bda:	4613      	movlt	r3, r2
 8006bdc:	f8c9 3000 	str.w	r3, [r9]
 8006be0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006be4:	460c      	mov	r4, r1
 8006be6:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006bea:	b112      	cbz	r2, 8006bf2 <_printf_common+0x2a>
 8006bec:	3301      	adds	r3, #1
 8006bee:	f8c9 3000 	str.w	r3, [r9]
 8006bf2:	6823      	ldr	r3, [r4, #0]
 8006bf4:	0699      	lsls	r1, r3, #26
 8006bf6:	bf42      	ittt	mi
 8006bf8:	f8d9 3000 	ldrmi.w	r3, [r9]
 8006bfc:	3302      	addmi	r3, #2
 8006bfe:	f8c9 3000 	strmi.w	r3, [r9]
 8006c02:	6825      	ldr	r5, [r4, #0]
 8006c04:	f015 0506 	ands.w	r5, r5, #6
 8006c08:	d107      	bne.n	8006c1a <_printf_common+0x52>
 8006c0a:	f104 0a19 	add.w	sl, r4, #25
 8006c0e:	68e3      	ldr	r3, [r4, #12]
 8006c10:	f8d9 2000 	ldr.w	r2, [r9]
 8006c14:	1a9b      	subs	r3, r3, r2
 8006c16:	42ab      	cmp	r3, r5
 8006c18:	dc29      	bgt.n	8006c6e <_printf_common+0xa6>
 8006c1a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8006c1e:	6822      	ldr	r2, [r4, #0]
 8006c20:	3300      	adds	r3, #0
 8006c22:	bf18      	it	ne
 8006c24:	2301      	movne	r3, #1
 8006c26:	0692      	lsls	r2, r2, #26
 8006c28:	d42e      	bmi.n	8006c88 <_printf_common+0xc0>
 8006c2a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006c2e:	4639      	mov	r1, r7
 8006c30:	4630      	mov	r0, r6
 8006c32:	47c0      	blx	r8
 8006c34:	3001      	adds	r0, #1
 8006c36:	d021      	beq.n	8006c7c <_printf_common+0xb4>
 8006c38:	6823      	ldr	r3, [r4, #0]
 8006c3a:	68e5      	ldr	r5, [r4, #12]
 8006c3c:	f003 0306 	and.w	r3, r3, #6
 8006c40:	2b04      	cmp	r3, #4
 8006c42:	bf18      	it	ne
 8006c44:	2500      	movne	r5, #0
 8006c46:	f8d9 2000 	ldr.w	r2, [r9]
 8006c4a:	f04f 0900 	mov.w	r9, #0
 8006c4e:	bf08      	it	eq
 8006c50:	1aad      	subeq	r5, r5, r2
 8006c52:	68a3      	ldr	r3, [r4, #8]
 8006c54:	6922      	ldr	r2, [r4, #16]
 8006c56:	bf08      	it	eq
 8006c58:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006c5c:	4293      	cmp	r3, r2
 8006c5e:	bfc4      	itt	gt
 8006c60:	1a9b      	subgt	r3, r3, r2
 8006c62:	18ed      	addgt	r5, r5, r3
 8006c64:	341a      	adds	r4, #26
 8006c66:	454d      	cmp	r5, r9
 8006c68:	d11a      	bne.n	8006ca0 <_printf_common+0xd8>
 8006c6a:	2000      	movs	r0, #0
 8006c6c:	e008      	b.n	8006c80 <_printf_common+0xb8>
 8006c6e:	2301      	movs	r3, #1
 8006c70:	4652      	mov	r2, sl
 8006c72:	4639      	mov	r1, r7
 8006c74:	4630      	mov	r0, r6
 8006c76:	47c0      	blx	r8
 8006c78:	3001      	adds	r0, #1
 8006c7a:	d103      	bne.n	8006c84 <_printf_common+0xbc>
 8006c7c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006c80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006c84:	3501      	adds	r5, #1
 8006c86:	e7c2      	b.n	8006c0e <_printf_common+0x46>
 8006c88:	2030      	movs	r0, #48	; 0x30
 8006c8a:	18e1      	adds	r1, r4, r3
 8006c8c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006c90:	1c5a      	adds	r2, r3, #1
 8006c92:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006c96:	4422      	add	r2, r4
 8006c98:	3302      	adds	r3, #2
 8006c9a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006c9e:	e7c4      	b.n	8006c2a <_printf_common+0x62>
 8006ca0:	2301      	movs	r3, #1
 8006ca2:	4622      	mov	r2, r4
 8006ca4:	4639      	mov	r1, r7
 8006ca6:	4630      	mov	r0, r6
 8006ca8:	47c0      	blx	r8
 8006caa:	3001      	adds	r0, #1
 8006cac:	d0e6      	beq.n	8006c7c <_printf_common+0xb4>
 8006cae:	f109 0901 	add.w	r9, r9, #1
 8006cb2:	e7d8      	b.n	8006c66 <_printf_common+0x9e>

08006cb4 <_printf_i>:
 8006cb4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006cb8:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8006cbc:	460c      	mov	r4, r1
 8006cbe:	7e09      	ldrb	r1, [r1, #24]
 8006cc0:	b085      	sub	sp, #20
 8006cc2:	296e      	cmp	r1, #110	; 0x6e
 8006cc4:	4617      	mov	r7, r2
 8006cc6:	4606      	mov	r6, r0
 8006cc8:	4698      	mov	r8, r3
 8006cca:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006ccc:	f000 80b3 	beq.w	8006e36 <_printf_i+0x182>
 8006cd0:	d822      	bhi.n	8006d18 <_printf_i+0x64>
 8006cd2:	2963      	cmp	r1, #99	; 0x63
 8006cd4:	d036      	beq.n	8006d44 <_printf_i+0x90>
 8006cd6:	d80a      	bhi.n	8006cee <_printf_i+0x3a>
 8006cd8:	2900      	cmp	r1, #0
 8006cda:	f000 80b9 	beq.w	8006e50 <_printf_i+0x19c>
 8006cde:	2958      	cmp	r1, #88	; 0x58
 8006ce0:	f000 8083 	beq.w	8006dea <_printf_i+0x136>
 8006ce4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006ce8:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8006cec:	e032      	b.n	8006d54 <_printf_i+0xa0>
 8006cee:	2964      	cmp	r1, #100	; 0x64
 8006cf0:	d001      	beq.n	8006cf6 <_printf_i+0x42>
 8006cf2:	2969      	cmp	r1, #105	; 0x69
 8006cf4:	d1f6      	bne.n	8006ce4 <_printf_i+0x30>
 8006cf6:	6820      	ldr	r0, [r4, #0]
 8006cf8:	6813      	ldr	r3, [r2, #0]
 8006cfa:	0605      	lsls	r5, r0, #24
 8006cfc:	f103 0104 	add.w	r1, r3, #4
 8006d00:	d52a      	bpl.n	8006d58 <_printf_i+0xa4>
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	6011      	str	r1, [r2, #0]
 8006d06:	2b00      	cmp	r3, #0
 8006d08:	da03      	bge.n	8006d12 <_printf_i+0x5e>
 8006d0a:	222d      	movs	r2, #45	; 0x2d
 8006d0c:	425b      	negs	r3, r3
 8006d0e:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8006d12:	486f      	ldr	r0, [pc, #444]	; (8006ed0 <_printf_i+0x21c>)
 8006d14:	220a      	movs	r2, #10
 8006d16:	e039      	b.n	8006d8c <_printf_i+0xd8>
 8006d18:	2973      	cmp	r1, #115	; 0x73
 8006d1a:	f000 809d 	beq.w	8006e58 <_printf_i+0x1a4>
 8006d1e:	d808      	bhi.n	8006d32 <_printf_i+0x7e>
 8006d20:	296f      	cmp	r1, #111	; 0x6f
 8006d22:	d020      	beq.n	8006d66 <_printf_i+0xb2>
 8006d24:	2970      	cmp	r1, #112	; 0x70
 8006d26:	d1dd      	bne.n	8006ce4 <_printf_i+0x30>
 8006d28:	6823      	ldr	r3, [r4, #0]
 8006d2a:	f043 0320 	orr.w	r3, r3, #32
 8006d2e:	6023      	str	r3, [r4, #0]
 8006d30:	e003      	b.n	8006d3a <_printf_i+0x86>
 8006d32:	2975      	cmp	r1, #117	; 0x75
 8006d34:	d017      	beq.n	8006d66 <_printf_i+0xb2>
 8006d36:	2978      	cmp	r1, #120	; 0x78
 8006d38:	d1d4      	bne.n	8006ce4 <_printf_i+0x30>
 8006d3a:	2378      	movs	r3, #120	; 0x78
 8006d3c:	4865      	ldr	r0, [pc, #404]	; (8006ed4 <_printf_i+0x220>)
 8006d3e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006d42:	e055      	b.n	8006df0 <_printf_i+0x13c>
 8006d44:	6813      	ldr	r3, [r2, #0]
 8006d46:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006d4a:	1d19      	adds	r1, r3, #4
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	6011      	str	r1, [r2, #0]
 8006d50:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006d54:	2301      	movs	r3, #1
 8006d56:	e08c      	b.n	8006e72 <_printf_i+0x1be>
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006d5e:	6011      	str	r1, [r2, #0]
 8006d60:	bf18      	it	ne
 8006d62:	b21b      	sxthne	r3, r3
 8006d64:	e7cf      	b.n	8006d06 <_printf_i+0x52>
 8006d66:	6813      	ldr	r3, [r2, #0]
 8006d68:	6825      	ldr	r5, [r4, #0]
 8006d6a:	1d18      	adds	r0, r3, #4
 8006d6c:	6010      	str	r0, [r2, #0]
 8006d6e:	0628      	lsls	r0, r5, #24
 8006d70:	d501      	bpl.n	8006d76 <_printf_i+0xc2>
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	e002      	b.n	8006d7c <_printf_i+0xc8>
 8006d76:	0668      	lsls	r0, r5, #25
 8006d78:	d5fb      	bpl.n	8006d72 <_printf_i+0xbe>
 8006d7a:	881b      	ldrh	r3, [r3, #0]
 8006d7c:	296f      	cmp	r1, #111	; 0x6f
 8006d7e:	bf14      	ite	ne
 8006d80:	220a      	movne	r2, #10
 8006d82:	2208      	moveq	r2, #8
 8006d84:	4852      	ldr	r0, [pc, #328]	; (8006ed0 <_printf_i+0x21c>)
 8006d86:	2100      	movs	r1, #0
 8006d88:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006d8c:	6865      	ldr	r5, [r4, #4]
 8006d8e:	2d00      	cmp	r5, #0
 8006d90:	60a5      	str	r5, [r4, #8]
 8006d92:	f2c0 8095 	blt.w	8006ec0 <_printf_i+0x20c>
 8006d96:	6821      	ldr	r1, [r4, #0]
 8006d98:	f021 0104 	bic.w	r1, r1, #4
 8006d9c:	6021      	str	r1, [r4, #0]
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	d13d      	bne.n	8006e1e <_printf_i+0x16a>
 8006da2:	2d00      	cmp	r5, #0
 8006da4:	f040 808e 	bne.w	8006ec4 <_printf_i+0x210>
 8006da8:	4665      	mov	r5, ip
 8006daa:	2a08      	cmp	r2, #8
 8006dac:	d10b      	bne.n	8006dc6 <_printf_i+0x112>
 8006dae:	6823      	ldr	r3, [r4, #0]
 8006db0:	07db      	lsls	r3, r3, #31
 8006db2:	d508      	bpl.n	8006dc6 <_printf_i+0x112>
 8006db4:	6923      	ldr	r3, [r4, #16]
 8006db6:	6862      	ldr	r2, [r4, #4]
 8006db8:	429a      	cmp	r2, r3
 8006dba:	bfde      	ittt	le
 8006dbc:	2330      	movle	r3, #48	; 0x30
 8006dbe:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006dc2:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8006dc6:	ebac 0305 	sub.w	r3, ip, r5
 8006dca:	6123      	str	r3, [r4, #16]
 8006dcc:	f8cd 8000 	str.w	r8, [sp]
 8006dd0:	463b      	mov	r3, r7
 8006dd2:	aa03      	add	r2, sp, #12
 8006dd4:	4621      	mov	r1, r4
 8006dd6:	4630      	mov	r0, r6
 8006dd8:	f7ff fef6 	bl	8006bc8 <_printf_common>
 8006ddc:	3001      	adds	r0, #1
 8006dde:	d14d      	bne.n	8006e7c <_printf_i+0x1c8>
 8006de0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006de4:	b005      	add	sp, #20
 8006de6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006dea:	4839      	ldr	r0, [pc, #228]	; (8006ed0 <_printf_i+0x21c>)
 8006dec:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8006df0:	6813      	ldr	r3, [r2, #0]
 8006df2:	6821      	ldr	r1, [r4, #0]
 8006df4:	1d1d      	adds	r5, r3, #4
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	6015      	str	r5, [r2, #0]
 8006dfa:	060a      	lsls	r2, r1, #24
 8006dfc:	d50b      	bpl.n	8006e16 <_printf_i+0x162>
 8006dfe:	07ca      	lsls	r2, r1, #31
 8006e00:	bf44      	itt	mi
 8006e02:	f041 0120 	orrmi.w	r1, r1, #32
 8006e06:	6021      	strmi	r1, [r4, #0]
 8006e08:	b91b      	cbnz	r3, 8006e12 <_printf_i+0x15e>
 8006e0a:	6822      	ldr	r2, [r4, #0]
 8006e0c:	f022 0220 	bic.w	r2, r2, #32
 8006e10:	6022      	str	r2, [r4, #0]
 8006e12:	2210      	movs	r2, #16
 8006e14:	e7b7      	b.n	8006d86 <_printf_i+0xd2>
 8006e16:	064d      	lsls	r5, r1, #25
 8006e18:	bf48      	it	mi
 8006e1a:	b29b      	uxthmi	r3, r3
 8006e1c:	e7ef      	b.n	8006dfe <_printf_i+0x14a>
 8006e1e:	4665      	mov	r5, ip
 8006e20:	fbb3 f1f2 	udiv	r1, r3, r2
 8006e24:	fb02 3311 	mls	r3, r2, r1, r3
 8006e28:	5cc3      	ldrb	r3, [r0, r3]
 8006e2a:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8006e2e:	460b      	mov	r3, r1
 8006e30:	2900      	cmp	r1, #0
 8006e32:	d1f5      	bne.n	8006e20 <_printf_i+0x16c>
 8006e34:	e7b9      	b.n	8006daa <_printf_i+0xf6>
 8006e36:	6813      	ldr	r3, [r2, #0]
 8006e38:	6825      	ldr	r5, [r4, #0]
 8006e3a:	1d18      	adds	r0, r3, #4
 8006e3c:	6961      	ldr	r1, [r4, #20]
 8006e3e:	6010      	str	r0, [r2, #0]
 8006e40:	0628      	lsls	r0, r5, #24
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	d501      	bpl.n	8006e4a <_printf_i+0x196>
 8006e46:	6019      	str	r1, [r3, #0]
 8006e48:	e002      	b.n	8006e50 <_printf_i+0x19c>
 8006e4a:	066a      	lsls	r2, r5, #25
 8006e4c:	d5fb      	bpl.n	8006e46 <_printf_i+0x192>
 8006e4e:	8019      	strh	r1, [r3, #0]
 8006e50:	2300      	movs	r3, #0
 8006e52:	4665      	mov	r5, ip
 8006e54:	6123      	str	r3, [r4, #16]
 8006e56:	e7b9      	b.n	8006dcc <_printf_i+0x118>
 8006e58:	6813      	ldr	r3, [r2, #0]
 8006e5a:	1d19      	adds	r1, r3, #4
 8006e5c:	6011      	str	r1, [r2, #0]
 8006e5e:	681d      	ldr	r5, [r3, #0]
 8006e60:	6862      	ldr	r2, [r4, #4]
 8006e62:	2100      	movs	r1, #0
 8006e64:	4628      	mov	r0, r5
 8006e66:	f002 fac9 	bl	80093fc <memchr>
 8006e6a:	b108      	cbz	r0, 8006e70 <_printf_i+0x1bc>
 8006e6c:	1b40      	subs	r0, r0, r5
 8006e6e:	6060      	str	r0, [r4, #4]
 8006e70:	6863      	ldr	r3, [r4, #4]
 8006e72:	6123      	str	r3, [r4, #16]
 8006e74:	2300      	movs	r3, #0
 8006e76:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006e7a:	e7a7      	b.n	8006dcc <_printf_i+0x118>
 8006e7c:	6923      	ldr	r3, [r4, #16]
 8006e7e:	462a      	mov	r2, r5
 8006e80:	4639      	mov	r1, r7
 8006e82:	4630      	mov	r0, r6
 8006e84:	47c0      	blx	r8
 8006e86:	3001      	adds	r0, #1
 8006e88:	d0aa      	beq.n	8006de0 <_printf_i+0x12c>
 8006e8a:	6823      	ldr	r3, [r4, #0]
 8006e8c:	079b      	lsls	r3, r3, #30
 8006e8e:	d413      	bmi.n	8006eb8 <_printf_i+0x204>
 8006e90:	68e0      	ldr	r0, [r4, #12]
 8006e92:	9b03      	ldr	r3, [sp, #12]
 8006e94:	4298      	cmp	r0, r3
 8006e96:	bfb8      	it	lt
 8006e98:	4618      	movlt	r0, r3
 8006e9a:	e7a3      	b.n	8006de4 <_printf_i+0x130>
 8006e9c:	2301      	movs	r3, #1
 8006e9e:	464a      	mov	r2, r9
 8006ea0:	4639      	mov	r1, r7
 8006ea2:	4630      	mov	r0, r6
 8006ea4:	47c0      	blx	r8
 8006ea6:	3001      	adds	r0, #1
 8006ea8:	d09a      	beq.n	8006de0 <_printf_i+0x12c>
 8006eaa:	3501      	adds	r5, #1
 8006eac:	68e3      	ldr	r3, [r4, #12]
 8006eae:	9a03      	ldr	r2, [sp, #12]
 8006eb0:	1a9b      	subs	r3, r3, r2
 8006eb2:	42ab      	cmp	r3, r5
 8006eb4:	dcf2      	bgt.n	8006e9c <_printf_i+0x1e8>
 8006eb6:	e7eb      	b.n	8006e90 <_printf_i+0x1dc>
 8006eb8:	2500      	movs	r5, #0
 8006eba:	f104 0919 	add.w	r9, r4, #25
 8006ebe:	e7f5      	b.n	8006eac <_printf_i+0x1f8>
 8006ec0:	2b00      	cmp	r3, #0
 8006ec2:	d1ac      	bne.n	8006e1e <_printf_i+0x16a>
 8006ec4:	7803      	ldrb	r3, [r0, #0]
 8006ec6:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006eca:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006ece:	e76c      	b.n	8006daa <_printf_i+0xf6>
 8006ed0:	0800a8ae 	.word	0x0800a8ae
 8006ed4:	0800a8bf 	.word	0x0800a8bf

08006ed8 <_scanf_float>:
 8006ed8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006edc:	469a      	mov	sl, r3
 8006ede:	688b      	ldr	r3, [r1, #8]
 8006ee0:	4616      	mov	r6, r2
 8006ee2:	1e5a      	subs	r2, r3, #1
 8006ee4:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8006ee8:	bf88      	it	hi
 8006eea:	f46f 72ae 	mvnhi.w	r2, #348	; 0x15c
 8006eee:	b087      	sub	sp, #28
 8006ef0:	bf85      	ittet	hi
 8006ef2:	189b      	addhi	r3, r3, r2
 8006ef4:	9301      	strhi	r3, [sp, #4]
 8006ef6:	2300      	movls	r3, #0
 8006ef8:	f240 135d 	movwhi	r3, #349	; 0x15d
 8006efc:	4688      	mov	r8, r1
 8006efe:	f04f 0b00 	mov.w	fp, #0
 8006f02:	bf8c      	ite	hi
 8006f04:	608b      	strhi	r3, [r1, #8]
 8006f06:	9301      	strls	r3, [sp, #4]
 8006f08:	680b      	ldr	r3, [r1, #0]
 8006f0a:	4607      	mov	r7, r0
 8006f0c:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8006f10:	f848 3b1c 	str.w	r3, [r8], #28
 8006f14:	460c      	mov	r4, r1
 8006f16:	4645      	mov	r5, r8
 8006f18:	465a      	mov	r2, fp
 8006f1a:	46d9      	mov	r9, fp
 8006f1c:	e9cd bb03 	strd	fp, fp, [sp, #12]
 8006f20:	f8cd b008 	str.w	fp, [sp, #8]
 8006f24:	68a1      	ldr	r1, [r4, #8]
 8006f26:	b181      	cbz	r1, 8006f4a <_scanf_float+0x72>
 8006f28:	6833      	ldr	r3, [r6, #0]
 8006f2a:	781b      	ldrb	r3, [r3, #0]
 8006f2c:	2b49      	cmp	r3, #73	; 0x49
 8006f2e:	d071      	beq.n	8007014 <_scanf_float+0x13c>
 8006f30:	d84d      	bhi.n	8006fce <_scanf_float+0xf6>
 8006f32:	2b39      	cmp	r3, #57	; 0x39
 8006f34:	d840      	bhi.n	8006fb8 <_scanf_float+0xe0>
 8006f36:	2b31      	cmp	r3, #49	; 0x31
 8006f38:	f080 8088 	bcs.w	800704c <_scanf_float+0x174>
 8006f3c:	2b2d      	cmp	r3, #45	; 0x2d
 8006f3e:	f000 8090 	beq.w	8007062 <_scanf_float+0x18a>
 8006f42:	d815      	bhi.n	8006f70 <_scanf_float+0x98>
 8006f44:	2b2b      	cmp	r3, #43	; 0x2b
 8006f46:	f000 808c 	beq.w	8007062 <_scanf_float+0x18a>
 8006f4a:	f1b9 0f00 	cmp.w	r9, #0
 8006f4e:	d003      	beq.n	8006f58 <_scanf_float+0x80>
 8006f50:	6823      	ldr	r3, [r4, #0]
 8006f52:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006f56:	6023      	str	r3, [r4, #0]
 8006f58:	3a01      	subs	r2, #1
 8006f5a:	2a01      	cmp	r2, #1
 8006f5c:	f200 80ea 	bhi.w	8007134 <_scanf_float+0x25c>
 8006f60:	4545      	cmp	r5, r8
 8006f62:	f200 80dc 	bhi.w	800711e <_scanf_float+0x246>
 8006f66:	2601      	movs	r6, #1
 8006f68:	4630      	mov	r0, r6
 8006f6a:	b007      	add	sp, #28
 8006f6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006f70:	2b2e      	cmp	r3, #46	; 0x2e
 8006f72:	f000 809f 	beq.w	80070b4 <_scanf_float+0x1dc>
 8006f76:	2b30      	cmp	r3, #48	; 0x30
 8006f78:	d1e7      	bne.n	8006f4a <_scanf_float+0x72>
 8006f7a:	6820      	ldr	r0, [r4, #0]
 8006f7c:	f410 7f80 	tst.w	r0, #256	; 0x100
 8006f80:	d064      	beq.n	800704c <_scanf_float+0x174>
 8006f82:	9b01      	ldr	r3, [sp, #4]
 8006f84:	f020 0080 	bic.w	r0, r0, #128	; 0x80
 8006f88:	6020      	str	r0, [r4, #0]
 8006f8a:	f109 0901 	add.w	r9, r9, #1
 8006f8e:	b11b      	cbz	r3, 8006f98 <_scanf_float+0xc0>
 8006f90:	3b01      	subs	r3, #1
 8006f92:	3101      	adds	r1, #1
 8006f94:	9301      	str	r3, [sp, #4]
 8006f96:	60a1      	str	r1, [r4, #8]
 8006f98:	68a3      	ldr	r3, [r4, #8]
 8006f9a:	3b01      	subs	r3, #1
 8006f9c:	60a3      	str	r3, [r4, #8]
 8006f9e:	6923      	ldr	r3, [r4, #16]
 8006fa0:	3301      	adds	r3, #1
 8006fa2:	6123      	str	r3, [r4, #16]
 8006fa4:	6873      	ldr	r3, [r6, #4]
 8006fa6:	3b01      	subs	r3, #1
 8006fa8:	2b00      	cmp	r3, #0
 8006faa:	6073      	str	r3, [r6, #4]
 8006fac:	f340 80ac 	ble.w	8007108 <_scanf_float+0x230>
 8006fb0:	6833      	ldr	r3, [r6, #0]
 8006fb2:	3301      	adds	r3, #1
 8006fb4:	6033      	str	r3, [r6, #0]
 8006fb6:	e7b5      	b.n	8006f24 <_scanf_float+0x4c>
 8006fb8:	2b45      	cmp	r3, #69	; 0x45
 8006fba:	f000 8085 	beq.w	80070c8 <_scanf_float+0x1f0>
 8006fbe:	2b46      	cmp	r3, #70	; 0x46
 8006fc0:	d06a      	beq.n	8007098 <_scanf_float+0x1c0>
 8006fc2:	2b41      	cmp	r3, #65	; 0x41
 8006fc4:	d1c1      	bne.n	8006f4a <_scanf_float+0x72>
 8006fc6:	2a01      	cmp	r2, #1
 8006fc8:	d1bf      	bne.n	8006f4a <_scanf_float+0x72>
 8006fca:	2202      	movs	r2, #2
 8006fcc:	e046      	b.n	800705c <_scanf_float+0x184>
 8006fce:	2b65      	cmp	r3, #101	; 0x65
 8006fd0:	d07a      	beq.n	80070c8 <_scanf_float+0x1f0>
 8006fd2:	d818      	bhi.n	8007006 <_scanf_float+0x12e>
 8006fd4:	2b54      	cmp	r3, #84	; 0x54
 8006fd6:	d066      	beq.n	80070a6 <_scanf_float+0x1ce>
 8006fd8:	d811      	bhi.n	8006ffe <_scanf_float+0x126>
 8006fda:	2b4e      	cmp	r3, #78	; 0x4e
 8006fdc:	d1b5      	bne.n	8006f4a <_scanf_float+0x72>
 8006fde:	2a00      	cmp	r2, #0
 8006fe0:	d146      	bne.n	8007070 <_scanf_float+0x198>
 8006fe2:	f1b9 0f00 	cmp.w	r9, #0
 8006fe6:	d145      	bne.n	8007074 <_scanf_float+0x19c>
 8006fe8:	6821      	ldr	r1, [r4, #0]
 8006fea:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 8006fee:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 8006ff2:	d13f      	bne.n	8007074 <_scanf_float+0x19c>
 8006ff4:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8006ff8:	6021      	str	r1, [r4, #0]
 8006ffa:	2201      	movs	r2, #1
 8006ffc:	e02e      	b.n	800705c <_scanf_float+0x184>
 8006ffe:	2b59      	cmp	r3, #89	; 0x59
 8007000:	d01e      	beq.n	8007040 <_scanf_float+0x168>
 8007002:	2b61      	cmp	r3, #97	; 0x61
 8007004:	e7de      	b.n	8006fc4 <_scanf_float+0xec>
 8007006:	2b6e      	cmp	r3, #110	; 0x6e
 8007008:	d0e9      	beq.n	8006fde <_scanf_float+0x106>
 800700a:	d815      	bhi.n	8007038 <_scanf_float+0x160>
 800700c:	2b66      	cmp	r3, #102	; 0x66
 800700e:	d043      	beq.n	8007098 <_scanf_float+0x1c0>
 8007010:	2b69      	cmp	r3, #105	; 0x69
 8007012:	d19a      	bne.n	8006f4a <_scanf_float+0x72>
 8007014:	f1bb 0f00 	cmp.w	fp, #0
 8007018:	d138      	bne.n	800708c <_scanf_float+0x1b4>
 800701a:	f1b9 0f00 	cmp.w	r9, #0
 800701e:	d197      	bne.n	8006f50 <_scanf_float+0x78>
 8007020:	6821      	ldr	r1, [r4, #0]
 8007022:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 8007026:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 800702a:	d195      	bne.n	8006f58 <_scanf_float+0x80>
 800702c:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8007030:	6021      	str	r1, [r4, #0]
 8007032:	f04f 0b01 	mov.w	fp, #1
 8007036:	e011      	b.n	800705c <_scanf_float+0x184>
 8007038:	2b74      	cmp	r3, #116	; 0x74
 800703a:	d034      	beq.n	80070a6 <_scanf_float+0x1ce>
 800703c:	2b79      	cmp	r3, #121	; 0x79
 800703e:	d184      	bne.n	8006f4a <_scanf_float+0x72>
 8007040:	f1bb 0f07 	cmp.w	fp, #7
 8007044:	d181      	bne.n	8006f4a <_scanf_float+0x72>
 8007046:	f04f 0b08 	mov.w	fp, #8
 800704a:	e007      	b.n	800705c <_scanf_float+0x184>
 800704c:	eb12 0f0b 	cmn.w	r2, fp
 8007050:	f47f af7b 	bne.w	8006f4a <_scanf_float+0x72>
 8007054:	6821      	ldr	r1, [r4, #0]
 8007056:	f421 71c0 	bic.w	r1, r1, #384	; 0x180
 800705a:	6021      	str	r1, [r4, #0]
 800705c:	702b      	strb	r3, [r5, #0]
 800705e:	3501      	adds	r5, #1
 8007060:	e79a      	b.n	8006f98 <_scanf_float+0xc0>
 8007062:	6821      	ldr	r1, [r4, #0]
 8007064:	0608      	lsls	r0, r1, #24
 8007066:	f57f af70 	bpl.w	8006f4a <_scanf_float+0x72>
 800706a:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800706e:	e7f4      	b.n	800705a <_scanf_float+0x182>
 8007070:	2a02      	cmp	r2, #2
 8007072:	d047      	beq.n	8007104 <_scanf_float+0x22c>
 8007074:	f1bb 0f01 	cmp.w	fp, #1
 8007078:	d003      	beq.n	8007082 <_scanf_float+0x1aa>
 800707a:	f1bb 0f04 	cmp.w	fp, #4
 800707e:	f47f af64 	bne.w	8006f4a <_scanf_float+0x72>
 8007082:	f10b 0b01 	add.w	fp, fp, #1
 8007086:	fa5f fb8b 	uxtb.w	fp, fp
 800708a:	e7e7      	b.n	800705c <_scanf_float+0x184>
 800708c:	f1bb 0f03 	cmp.w	fp, #3
 8007090:	d0f7      	beq.n	8007082 <_scanf_float+0x1aa>
 8007092:	f1bb 0f05 	cmp.w	fp, #5
 8007096:	e7f2      	b.n	800707e <_scanf_float+0x1a6>
 8007098:	f1bb 0f02 	cmp.w	fp, #2
 800709c:	f47f af55 	bne.w	8006f4a <_scanf_float+0x72>
 80070a0:	f04f 0b03 	mov.w	fp, #3
 80070a4:	e7da      	b.n	800705c <_scanf_float+0x184>
 80070a6:	f1bb 0f06 	cmp.w	fp, #6
 80070aa:	f47f af4e 	bne.w	8006f4a <_scanf_float+0x72>
 80070ae:	f04f 0b07 	mov.w	fp, #7
 80070b2:	e7d3      	b.n	800705c <_scanf_float+0x184>
 80070b4:	6821      	ldr	r1, [r4, #0]
 80070b6:	0588      	lsls	r0, r1, #22
 80070b8:	f57f af47 	bpl.w	8006f4a <_scanf_float+0x72>
 80070bc:	f421 7120 	bic.w	r1, r1, #640	; 0x280
 80070c0:	6021      	str	r1, [r4, #0]
 80070c2:	f8cd 9008 	str.w	r9, [sp, #8]
 80070c6:	e7c9      	b.n	800705c <_scanf_float+0x184>
 80070c8:	6821      	ldr	r1, [r4, #0]
 80070ca:	f401 60a0 	and.w	r0, r1, #1280	; 0x500
 80070ce:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 80070d2:	d006      	beq.n	80070e2 <_scanf_float+0x20a>
 80070d4:	0548      	lsls	r0, r1, #21
 80070d6:	f57f af38 	bpl.w	8006f4a <_scanf_float+0x72>
 80070da:	f1b9 0f00 	cmp.w	r9, #0
 80070de:	f43f af3b 	beq.w	8006f58 <_scanf_float+0x80>
 80070e2:	0588      	lsls	r0, r1, #22
 80070e4:	bf58      	it	pl
 80070e6:	9802      	ldrpl	r0, [sp, #8]
 80070e8:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 80070ec:	bf58      	it	pl
 80070ee:	eba9 0000 	subpl.w	r0, r9, r0
 80070f2:	f441 71c0 	orr.w	r1, r1, #384	; 0x180
 80070f6:	bf58      	it	pl
 80070f8:	e9cd 0503 	strdpl	r0, r5, [sp, #12]
 80070fc:	6021      	str	r1, [r4, #0]
 80070fe:	f04f 0900 	mov.w	r9, #0
 8007102:	e7ab      	b.n	800705c <_scanf_float+0x184>
 8007104:	2203      	movs	r2, #3
 8007106:	e7a9      	b.n	800705c <_scanf_float+0x184>
 8007108:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800710c:	4631      	mov	r1, r6
 800710e:	4638      	mov	r0, r7
 8007110:	9205      	str	r2, [sp, #20]
 8007112:	4798      	blx	r3
 8007114:	9a05      	ldr	r2, [sp, #20]
 8007116:	2800      	cmp	r0, #0
 8007118:	f43f af04 	beq.w	8006f24 <_scanf_float+0x4c>
 800711c:	e715      	b.n	8006f4a <_scanf_float+0x72>
 800711e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007122:	4632      	mov	r2, r6
 8007124:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8007128:	4638      	mov	r0, r7
 800712a:	4798      	blx	r3
 800712c:	6923      	ldr	r3, [r4, #16]
 800712e:	3b01      	subs	r3, #1
 8007130:	6123      	str	r3, [r4, #16]
 8007132:	e715      	b.n	8006f60 <_scanf_float+0x88>
 8007134:	f10b 33ff 	add.w	r3, fp, #4294967295	; 0xffffffff
 8007138:	2b06      	cmp	r3, #6
 800713a:	d80a      	bhi.n	8007152 <_scanf_float+0x27a>
 800713c:	f1bb 0f02 	cmp.w	fp, #2
 8007140:	d967      	bls.n	8007212 <_scanf_float+0x33a>
 8007142:	f1ab 0b03 	sub.w	fp, fp, #3
 8007146:	fa5f fb8b 	uxtb.w	fp, fp
 800714a:	eba5 0b0b 	sub.w	fp, r5, fp
 800714e:	455d      	cmp	r5, fp
 8007150:	d14a      	bne.n	80071e8 <_scanf_float+0x310>
 8007152:	6823      	ldr	r3, [r4, #0]
 8007154:	05da      	lsls	r2, r3, #23
 8007156:	d51f      	bpl.n	8007198 <_scanf_float+0x2c0>
 8007158:	055b      	lsls	r3, r3, #21
 800715a:	d467      	bmi.n	800722c <_scanf_float+0x354>
 800715c:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8007160:	6923      	ldr	r3, [r4, #16]
 8007162:	2965      	cmp	r1, #101	; 0x65
 8007164:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 8007168:	f105 3bff 	add.w	fp, r5, #4294967295	; 0xffffffff
 800716c:	6123      	str	r3, [r4, #16]
 800716e:	d00d      	beq.n	800718c <_scanf_float+0x2b4>
 8007170:	2945      	cmp	r1, #69	; 0x45
 8007172:	d00b      	beq.n	800718c <_scanf_float+0x2b4>
 8007174:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007178:	4632      	mov	r2, r6
 800717a:	4638      	mov	r0, r7
 800717c:	4798      	blx	r3
 800717e:	6923      	ldr	r3, [r4, #16]
 8007180:	f815 1c02 	ldrb.w	r1, [r5, #-2]
 8007184:	3b01      	subs	r3, #1
 8007186:	f1a5 0b02 	sub.w	fp, r5, #2
 800718a:	6123      	str	r3, [r4, #16]
 800718c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007190:	4632      	mov	r2, r6
 8007192:	4638      	mov	r0, r7
 8007194:	4798      	blx	r3
 8007196:	465d      	mov	r5, fp
 8007198:	6826      	ldr	r6, [r4, #0]
 800719a:	f016 0610 	ands.w	r6, r6, #16
 800719e:	d176      	bne.n	800728e <_scanf_float+0x3b6>
 80071a0:	702e      	strb	r6, [r5, #0]
 80071a2:	6823      	ldr	r3, [r4, #0]
 80071a4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80071a8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80071ac:	d141      	bne.n	8007232 <_scanf_float+0x35a>
 80071ae:	9b02      	ldr	r3, [sp, #8]
 80071b0:	eba9 0303 	sub.w	r3, r9, r3
 80071b4:	425a      	negs	r2, r3
 80071b6:	2b00      	cmp	r3, #0
 80071b8:	d148      	bne.n	800724c <_scanf_float+0x374>
 80071ba:	4641      	mov	r1, r8
 80071bc:	2200      	movs	r2, #0
 80071be:	4638      	mov	r0, r7
 80071c0:	f000 fee6 	bl	8007f90 <_strtod_r>
 80071c4:	6825      	ldr	r5, [r4, #0]
 80071c6:	4680      	mov	r8, r0
 80071c8:	f015 0f02 	tst.w	r5, #2
 80071cc:	4689      	mov	r9, r1
 80071ce:	f8da 3000 	ldr.w	r3, [sl]
 80071d2:	d046      	beq.n	8007262 <_scanf_float+0x38a>
 80071d4:	1d1a      	adds	r2, r3, #4
 80071d6:	f8ca 2000 	str.w	r2, [sl]
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	e9c3 8900 	strd	r8, r9, [r3]
 80071e0:	68e3      	ldr	r3, [r4, #12]
 80071e2:	3301      	adds	r3, #1
 80071e4:	60e3      	str	r3, [r4, #12]
 80071e6:	e6bf      	b.n	8006f68 <_scanf_float+0x90>
 80071e8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80071ec:	4632      	mov	r2, r6
 80071ee:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 80071f2:	4638      	mov	r0, r7
 80071f4:	4798      	blx	r3
 80071f6:	6923      	ldr	r3, [r4, #16]
 80071f8:	3b01      	subs	r3, #1
 80071fa:	6123      	str	r3, [r4, #16]
 80071fc:	e7a7      	b.n	800714e <_scanf_float+0x276>
 80071fe:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007202:	4632      	mov	r2, r6
 8007204:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8007208:	4638      	mov	r0, r7
 800720a:	4798      	blx	r3
 800720c:	6923      	ldr	r3, [r4, #16]
 800720e:	3b01      	subs	r3, #1
 8007210:	6123      	str	r3, [r4, #16]
 8007212:	4545      	cmp	r5, r8
 8007214:	d8f3      	bhi.n	80071fe <_scanf_float+0x326>
 8007216:	e6a6      	b.n	8006f66 <_scanf_float+0x8e>
 8007218:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800721c:	4632      	mov	r2, r6
 800721e:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8007222:	4638      	mov	r0, r7
 8007224:	4798      	blx	r3
 8007226:	6923      	ldr	r3, [r4, #16]
 8007228:	3b01      	subs	r3, #1
 800722a:	6123      	str	r3, [r4, #16]
 800722c:	4545      	cmp	r5, r8
 800722e:	d8f3      	bhi.n	8007218 <_scanf_float+0x340>
 8007230:	e699      	b.n	8006f66 <_scanf_float+0x8e>
 8007232:	9b03      	ldr	r3, [sp, #12]
 8007234:	2b00      	cmp	r3, #0
 8007236:	d0c0      	beq.n	80071ba <_scanf_float+0x2e2>
 8007238:	9904      	ldr	r1, [sp, #16]
 800723a:	230a      	movs	r3, #10
 800723c:	4632      	mov	r2, r6
 800723e:	3101      	adds	r1, #1
 8007240:	4638      	mov	r0, r7
 8007242:	f000 ff31 	bl	80080a8 <_strtol_r>
 8007246:	9b03      	ldr	r3, [sp, #12]
 8007248:	9d04      	ldr	r5, [sp, #16]
 800724a:	1ac2      	subs	r2, r0, r3
 800724c:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8007250:	429d      	cmp	r5, r3
 8007252:	bf28      	it	cs
 8007254:	f504 75b7 	addcs.w	r5, r4, #366	; 0x16e
 8007258:	490e      	ldr	r1, [pc, #56]	; (8007294 <_scanf_float+0x3bc>)
 800725a:	4628      	mov	r0, r5
 800725c:	f000 f854 	bl	8007308 <siprintf>
 8007260:	e7ab      	b.n	80071ba <_scanf_float+0x2e2>
 8007262:	1d1f      	adds	r7, r3, #4
 8007264:	f015 0504 	ands.w	r5, r5, #4
 8007268:	f8ca 7000 	str.w	r7, [sl]
 800726c:	d1b5      	bne.n	80071da <_scanf_float+0x302>
 800726e:	681f      	ldr	r7, [r3, #0]
 8007270:	4602      	mov	r2, r0
 8007272:	460b      	mov	r3, r1
 8007274:	f7f9 fbca 	bl	8000a0c <__aeabi_dcmpun>
 8007278:	b120      	cbz	r0, 8007284 <_scanf_float+0x3ac>
 800727a:	4628      	mov	r0, r5
 800727c:	f000 f80c 	bl	8007298 <nanf>
 8007280:	6038      	str	r0, [r7, #0]
 8007282:	e7ad      	b.n	80071e0 <_scanf_float+0x308>
 8007284:	4640      	mov	r0, r8
 8007286:	4649      	mov	r1, r9
 8007288:	f7f9 fc1e 	bl	8000ac8 <__aeabi_d2f>
 800728c:	e7f8      	b.n	8007280 <_scanf_float+0x3a8>
 800728e:	2600      	movs	r6, #0
 8007290:	e66a      	b.n	8006f68 <_scanf_float+0x90>
 8007292:	bf00      	nop
 8007294:	0800a8d0 	.word	0x0800a8d0

08007298 <nanf>:
 8007298:	4800      	ldr	r0, [pc, #0]	; (800729c <nanf+0x4>)
 800729a:	4770      	bx	lr
 800729c:	7fc00000 	.word	0x7fc00000

080072a0 <sniprintf>:
 80072a0:	b40c      	push	{r2, r3}
 80072a2:	b530      	push	{r4, r5, lr}
 80072a4:	4b17      	ldr	r3, [pc, #92]	; (8007304 <sniprintf+0x64>)
 80072a6:	1e0c      	subs	r4, r1, #0
 80072a8:	b09d      	sub	sp, #116	; 0x74
 80072aa:	681d      	ldr	r5, [r3, #0]
 80072ac:	da08      	bge.n	80072c0 <sniprintf+0x20>
 80072ae:	238b      	movs	r3, #139	; 0x8b
 80072b0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80072b4:	602b      	str	r3, [r5, #0]
 80072b6:	b01d      	add	sp, #116	; 0x74
 80072b8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80072bc:	b002      	add	sp, #8
 80072be:	4770      	bx	lr
 80072c0:	f44f 7302 	mov.w	r3, #520	; 0x208
 80072c4:	f8ad 3014 	strh.w	r3, [sp, #20]
 80072c8:	bf0c      	ite	eq
 80072ca:	4623      	moveq	r3, r4
 80072cc:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 80072d0:	9304      	str	r3, [sp, #16]
 80072d2:	9307      	str	r3, [sp, #28]
 80072d4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80072d8:	9002      	str	r0, [sp, #8]
 80072da:	9006      	str	r0, [sp, #24]
 80072dc:	f8ad 3016 	strh.w	r3, [sp, #22]
 80072e0:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80072e2:	ab21      	add	r3, sp, #132	; 0x84
 80072e4:	a902      	add	r1, sp, #8
 80072e6:	4628      	mov	r0, r5
 80072e8:	9301      	str	r3, [sp, #4]
 80072ea:	f002 fd9b 	bl	8009e24 <_svfiprintf_r>
 80072ee:	1c43      	adds	r3, r0, #1
 80072f0:	bfbc      	itt	lt
 80072f2:	238b      	movlt	r3, #139	; 0x8b
 80072f4:	602b      	strlt	r3, [r5, #0]
 80072f6:	2c00      	cmp	r4, #0
 80072f8:	d0dd      	beq.n	80072b6 <sniprintf+0x16>
 80072fa:	2200      	movs	r2, #0
 80072fc:	9b02      	ldr	r3, [sp, #8]
 80072fe:	701a      	strb	r2, [r3, #0]
 8007300:	e7d9      	b.n	80072b6 <sniprintf+0x16>
 8007302:	bf00      	nop
 8007304:	20000024 	.word	0x20000024

08007308 <siprintf>:
 8007308:	b40e      	push	{r1, r2, r3}
 800730a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800730e:	b500      	push	{lr}
 8007310:	b09c      	sub	sp, #112	; 0x70
 8007312:	ab1d      	add	r3, sp, #116	; 0x74
 8007314:	9002      	str	r0, [sp, #8]
 8007316:	9006      	str	r0, [sp, #24]
 8007318:	9107      	str	r1, [sp, #28]
 800731a:	9104      	str	r1, [sp, #16]
 800731c:	4808      	ldr	r0, [pc, #32]	; (8007340 <siprintf+0x38>)
 800731e:	4909      	ldr	r1, [pc, #36]	; (8007344 <siprintf+0x3c>)
 8007320:	f853 2b04 	ldr.w	r2, [r3], #4
 8007324:	9105      	str	r1, [sp, #20]
 8007326:	6800      	ldr	r0, [r0, #0]
 8007328:	a902      	add	r1, sp, #8
 800732a:	9301      	str	r3, [sp, #4]
 800732c:	f002 fd7a 	bl	8009e24 <_svfiprintf_r>
 8007330:	2200      	movs	r2, #0
 8007332:	9b02      	ldr	r3, [sp, #8]
 8007334:	701a      	strb	r2, [r3, #0]
 8007336:	b01c      	add	sp, #112	; 0x70
 8007338:	f85d eb04 	ldr.w	lr, [sp], #4
 800733c:	b003      	add	sp, #12
 800733e:	4770      	bx	lr
 8007340:	20000024 	.word	0x20000024
 8007344:	ffff0208 	.word	0xffff0208

08007348 <sulp>:
 8007348:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800734c:	460f      	mov	r7, r1
 800734e:	4690      	mov	r8, r2
 8007350:	f002 fb2c 	bl	80099ac <__ulp>
 8007354:	4604      	mov	r4, r0
 8007356:	460d      	mov	r5, r1
 8007358:	f1b8 0f00 	cmp.w	r8, #0
 800735c:	d011      	beq.n	8007382 <sulp+0x3a>
 800735e:	f3c7 530a 	ubfx	r3, r7, #20, #11
 8007362:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8007366:	2b00      	cmp	r3, #0
 8007368:	dd0b      	ble.n	8007382 <sulp+0x3a>
 800736a:	2400      	movs	r4, #0
 800736c:	051b      	lsls	r3, r3, #20
 800736e:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8007372:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8007376:	4622      	mov	r2, r4
 8007378:	462b      	mov	r3, r5
 800737a:	f7f9 f8ad 	bl	80004d8 <__aeabi_dmul>
 800737e:	4604      	mov	r4, r0
 8007380:	460d      	mov	r5, r1
 8007382:	4620      	mov	r0, r4
 8007384:	4629      	mov	r1, r5
 8007386:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800738a:	0000      	movs	r0, r0
 800738c:	0000      	movs	r0, r0
	...

08007390 <_strtod_l>:
 8007390:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007394:	461f      	mov	r7, r3
 8007396:	2300      	movs	r3, #0
 8007398:	b0a1      	sub	sp, #132	; 0x84
 800739a:	4683      	mov	fp, r0
 800739c:	4638      	mov	r0, r7
 800739e:	460e      	mov	r6, r1
 80073a0:	9217      	str	r2, [sp, #92]	; 0x5c
 80073a2:	931c      	str	r3, [sp, #112]	; 0x70
 80073a4:	f001 ffff 	bl	80093a6 <__localeconv_l>
 80073a8:	4680      	mov	r8, r0
 80073aa:	6800      	ldr	r0, [r0, #0]
 80073ac:	f7f8 fed0 	bl	8000150 <strlen>
 80073b0:	f04f 0900 	mov.w	r9, #0
 80073b4:	4604      	mov	r4, r0
 80073b6:	f04f 0a00 	mov.w	sl, #0
 80073ba:	961b      	str	r6, [sp, #108]	; 0x6c
 80073bc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80073be:	781a      	ldrb	r2, [r3, #0]
 80073c0:	2a0d      	cmp	r2, #13
 80073c2:	d832      	bhi.n	800742a <_strtod_l+0x9a>
 80073c4:	2a09      	cmp	r2, #9
 80073c6:	d236      	bcs.n	8007436 <_strtod_l+0xa6>
 80073c8:	2a00      	cmp	r2, #0
 80073ca:	d03e      	beq.n	800744a <_strtod_l+0xba>
 80073cc:	2300      	movs	r3, #0
 80073ce:	930d      	str	r3, [sp, #52]	; 0x34
 80073d0:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 80073d2:	782b      	ldrb	r3, [r5, #0]
 80073d4:	2b30      	cmp	r3, #48	; 0x30
 80073d6:	f040 80ac 	bne.w	8007532 <_strtod_l+0x1a2>
 80073da:	786b      	ldrb	r3, [r5, #1]
 80073dc:	2b58      	cmp	r3, #88	; 0x58
 80073de:	d001      	beq.n	80073e4 <_strtod_l+0x54>
 80073e0:	2b78      	cmp	r3, #120	; 0x78
 80073e2:	d167      	bne.n	80074b4 <_strtod_l+0x124>
 80073e4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80073e6:	9702      	str	r7, [sp, #8]
 80073e8:	9301      	str	r3, [sp, #4]
 80073ea:	ab1c      	add	r3, sp, #112	; 0x70
 80073ec:	9300      	str	r3, [sp, #0]
 80073ee:	4a89      	ldr	r2, [pc, #548]	; (8007614 <_strtod_l+0x284>)
 80073f0:	ab1d      	add	r3, sp, #116	; 0x74
 80073f2:	a91b      	add	r1, sp, #108	; 0x6c
 80073f4:	4658      	mov	r0, fp
 80073f6:	f001 fcfb 	bl	8008df0 <__gethex>
 80073fa:	f010 0407 	ands.w	r4, r0, #7
 80073fe:	4606      	mov	r6, r0
 8007400:	d005      	beq.n	800740e <_strtod_l+0x7e>
 8007402:	2c06      	cmp	r4, #6
 8007404:	d12b      	bne.n	800745e <_strtod_l+0xce>
 8007406:	2300      	movs	r3, #0
 8007408:	3501      	adds	r5, #1
 800740a:	951b      	str	r5, [sp, #108]	; 0x6c
 800740c:	930d      	str	r3, [sp, #52]	; 0x34
 800740e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007410:	2b00      	cmp	r3, #0
 8007412:	f040 85a6 	bne.w	8007f62 <_strtod_l+0xbd2>
 8007416:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007418:	b1e3      	cbz	r3, 8007454 <_strtod_l+0xc4>
 800741a:	464a      	mov	r2, r9
 800741c:	f10a 4300 	add.w	r3, sl, #2147483648	; 0x80000000
 8007420:	4610      	mov	r0, r2
 8007422:	4619      	mov	r1, r3
 8007424:	b021      	add	sp, #132	; 0x84
 8007426:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800742a:	2a2b      	cmp	r2, #43	; 0x2b
 800742c:	d015      	beq.n	800745a <_strtod_l+0xca>
 800742e:	2a2d      	cmp	r2, #45	; 0x2d
 8007430:	d004      	beq.n	800743c <_strtod_l+0xac>
 8007432:	2a20      	cmp	r2, #32
 8007434:	d1ca      	bne.n	80073cc <_strtod_l+0x3c>
 8007436:	3301      	adds	r3, #1
 8007438:	931b      	str	r3, [sp, #108]	; 0x6c
 800743a:	e7bf      	b.n	80073bc <_strtod_l+0x2c>
 800743c:	2201      	movs	r2, #1
 800743e:	920d      	str	r2, [sp, #52]	; 0x34
 8007440:	1c5a      	adds	r2, r3, #1
 8007442:	921b      	str	r2, [sp, #108]	; 0x6c
 8007444:	785b      	ldrb	r3, [r3, #1]
 8007446:	2b00      	cmp	r3, #0
 8007448:	d1c2      	bne.n	80073d0 <_strtod_l+0x40>
 800744a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800744c:	961b      	str	r6, [sp, #108]	; 0x6c
 800744e:	2b00      	cmp	r3, #0
 8007450:	f040 8585 	bne.w	8007f5e <_strtod_l+0xbce>
 8007454:	464a      	mov	r2, r9
 8007456:	4653      	mov	r3, sl
 8007458:	e7e2      	b.n	8007420 <_strtod_l+0x90>
 800745a:	2200      	movs	r2, #0
 800745c:	e7ef      	b.n	800743e <_strtod_l+0xae>
 800745e:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8007460:	b13a      	cbz	r2, 8007472 <_strtod_l+0xe2>
 8007462:	2135      	movs	r1, #53	; 0x35
 8007464:	a81e      	add	r0, sp, #120	; 0x78
 8007466:	f002 fb94 	bl	8009b92 <__copybits>
 800746a:	991c      	ldr	r1, [sp, #112]	; 0x70
 800746c:	4658      	mov	r0, fp
 800746e:	f002 f807 	bl	8009480 <_Bfree>
 8007472:	3c01      	subs	r4, #1
 8007474:	2c04      	cmp	r4, #4
 8007476:	d806      	bhi.n	8007486 <_strtod_l+0xf6>
 8007478:	e8df f004 	tbb	[pc, r4]
 800747c:	1714030a 	.word	0x1714030a
 8007480:	0a          	.byte	0x0a
 8007481:	00          	.byte	0x00
 8007482:	e9dd 9a1e 	ldrd	r9, sl, [sp, #120]	; 0x78
 8007486:	0731      	lsls	r1, r6, #28
 8007488:	d5c1      	bpl.n	800740e <_strtod_l+0x7e>
 800748a:	f04a 4a00 	orr.w	sl, sl, #2147483648	; 0x80000000
 800748e:	e7be      	b.n	800740e <_strtod_l+0x7e>
 8007490:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8007492:	e9dd 931e 	ldrd	r9, r3, [sp, #120]	; 0x78
 8007496:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800749a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800749e:	ea43 5a02 	orr.w	sl, r3, r2, lsl #20
 80074a2:	e7f0      	b.n	8007486 <_strtod_l+0xf6>
 80074a4:	f8df a170 	ldr.w	sl, [pc, #368]	; 8007618 <_strtod_l+0x288>
 80074a8:	e7ed      	b.n	8007486 <_strtod_l+0xf6>
 80074aa:	f06f 4a00 	mvn.w	sl, #2147483648	; 0x80000000
 80074ae:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
 80074b2:	e7e8      	b.n	8007486 <_strtod_l+0xf6>
 80074b4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80074b6:	1c5a      	adds	r2, r3, #1
 80074b8:	921b      	str	r2, [sp, #108]	; 0x6c
 80074ba:	785b      	ldrb	r3, [r3, #1]
 80074bc:	2b30      	cmp	r3, #48	; 0x30
 80074be:	d0f9      	beq.n	80074b4 <_strtod_l+0x124>
 80074c0:	2b00      	cmp	r3, #0
 80074c2:	d0a4      	beq.n	800740e <_strtod_l+0x7e>
 80074c4:	2301      	movs	r3, #1
 80074c6:	2500      	movs	r5, #0
 80074c8:	220a      	movs	r2, #10
 80074ca:	9307      	str	r3, [sp, #28]
 80074cc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80074ce:	9506      	str	r5, [sp, #24]
 80074d0:	9308      	str	r3, [sp, #32]
 80074d2:	9504      	str	r5, [sp, #16]
 80074d4:	981b      	ldr	r0, [sp, #108]	; 0x6c
 80074d6:	7807      	ldrb	r7, [r0, #0]
 80074d8:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 80074dc:	b2d9      	uxtb	r1, r3
 80074de:	2909      	cmp	r1, #9
 80074e0:	d929      	bls.n	8007536 <_strtod_l+0x1a6>
 80074e2:	4622      	mov	r2, r4
 80074e4:	f8d8 1000 	ldr.w	r1, [r8]
 80074e8:	f002 fda4 	bl	800a034 <strncmp>
 80074ec:	2800      	cmp	r0, #0
 80074ee:	d031      	beq.n	8007554 <_strtod_l+0x1c4>
 80074f0:	2000      	movs	r0, #0
 80074f2:	463b      	mov	r3, r7
 80074f4:	4602      	mov	r2, r0
 80074f6:	9c04      	ldr	r4, [sp, #16]
 80074f8:	9005      	str	r0, [sp, #20]
 80074fa:	2b65      	cmp	r3, #101	; 0x65
 80074fc:	d001      	beq.n	8007502 <_strtod_l+0x172>
 80074fe:	2b45      	cmp	r3, #69	; 0x45
 8007500:	d114      	bne.n	800752c <_strtod_l+0x19c>
 8007502:	b924      	cbnz	r4, 800750e <_strtod_l+0x17e>
 8007504:	b910      	cbnz	r0, 800750c <_strtod_l+0x17c>
 8007506:	9b07      	ldr	r3, [sp, #28]
 8007508:	2b00      	cmp	r3, #0
 800750a:	d09e      	beq.n	800744a <_strtod_l+0xba>
 800750c:	2400      	movs	r4, #0
 800750e:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 8007510:	1c73      	adds	r3, r6, #1
 8007512:	931b      	str	r3, [sp, #108]	; 0x6c
 8007514:	7873      	ldrb	r3, [r6, #1]
 8007516:	2b2b      	cmp	r3, #43	; 0x2b
 8007518:	d078      	beq.n	800760c <_strtod_l+0x27c>
 800751a:	2b2d      	cmp	r3, #45	; 0x2d
 800751c:	d070      	beq.n	8007600 <_strtod_l+0x270>
 800751e:	f04f 0c00 	mov.w	ip, #0
 8007522:	f1a3 0730 	sub.w	r7, r3, #48	; 0x30
 8007526:	2f09      	cmp	r7, #9
 8007528:	d97c      	bls.n	8007624 <_strtod_l+0x294>
 800752a:	961b      	str	r6, [sp, #108]	; 0x6c
 800752c:	f04f 0e00 	mov.w	lr, #0
 8007530:	e09a      	b.n	8007668 <_strtod_l+0x2d8>
 8007532:	2300      	movs	r3, #0
 8007534:	e7c7      	b.n	80074c6 <_strtod_l+0x136>
 8007536:	9904      	ldr	r1, [sp, #16]
 8007538:	3001      	adds	r0, #1
 800753a:	2908      	cmp	r1, #8
 800753c:	bfd7      	itett	le
 800753e:	9906      	ldrle	r1, [sp, #24]
 8007540:	fb02 3505 	mlagt	r5, r2, r5, r3
 8007544:	fb02 3301 	mlale	r3, r2, r1, r3
 8007548:	9306      	strle	r3, [sp, #24]
 800754a:	9b04      	ldr	r3, [sp, #16]
 800754c:	901b      	str	r0, [sp, #108]	; 0x6c
 800754e:	3301      	adds	r3, #1
 8007550:	9304      	str	r3, [sp, #16]
 8007552:	e7bf      	b.n	80074d4 <_strtod_l+0x144>
 8007554:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007556:	191a      	adds	r2, r3, r4
 8007558:	921b      	str	r2, [sp, #108]	; 0x6c
 800755a:	9a04      	ldr	r2, [sp, #16]
 800755c:	5d1b      	ldrb	r3, [r3, r4]
 800755e:	2a00      	cmp	r2, #0
 8007560:	d037      	beq.n	80075d2 <_strtod_l+0x242>
 8007562:	4602      	mov	r2, r0
 8007564:	9c04      	ldr	r4, [sp, #16]
 8007566:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 800756a:	2909      	cmp	r1, #9
 800756c:	d913      	bls.n	8007596 <_strtod_l+0x206>
 800756e:	2101      	movs	r1, #1
 8007570:	9105      	str	r1, [sp, #20]
 8007572:	e7c2      	b.n	80074fa <_strtod_l+0x16a>
 8007574:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007576:	3001      	adds	r0, #1
 8007578:	1c5a      	adds	r2, r3, #1
 800757a:	921b      	str	r2, [sp, #108]	; 0x6c
 800757c:	785b      	ldrb	r3, [r3, #1]
 800757e:	2b30      	cmp	r3, #48	; 0x30
 8007580:	d0f8      	beq.n	8007574 <_strtod_l+0x1e4>
 8007582:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 8007586:	2a08      	cmp	r2, #8
 8007588:	f200 84f0 	bhi.w	8007f6c <_strtod_l+0xbdc>
 800758c:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800758e:	9208      	str	r2, [sp, #32]
 8007590:	4602      	mov	r2, r0
 8007592:	2000      	movs	r0, #0
 8007594:	4604      	mov	r4, r0
 8007596:	f1b3 0e30 	subs.w	lr, r3, #48	; 0x30
 800759a:	f100 0101 	add.w	r1, r0, #1
 800759e:	d012      	beq.n	80075c6 <_strtod_l+0x236>
 80075a0:	440a      	add	r2, r1
 80075a2:	270a      	movs	r7, #10
 80075a4:	4621      	mov	r1, r4
 80075a6:	eb00 0c04 	add.w	ip, r0, r4
 80075aa:	458c      	cmp	ip, r1
 80075ac:	d113      	bne.n	80075d6 <_strtod_l+0x246>
 80075ae:	1821      	adds	r1, r4, r0
 80075b0:	2908      	cmp	r1, #8
 80075b2:	f104 0401 	add.w	r4, r4, #1
 80075b6:	4404      	add	r4, r0
 80075b8:	dc19      	bgt.n	80075ee <_strtod_l+0x25e>
 80075ba:	210a      	movs	r1, #10
 80075bc:	9b06      	ldr	r3, [sp, #24]
 80075be:	fb01 e303 	mla	r3, r1, r3, lr
 80075c2:	9306      	str	r3, [sp, #24]
 80075c4:	2100      	movs	r1, #0
 80075c6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80075c8:	1c58      	adds	r0, r3, #1
 80075ca:	901b      	str	r0, [sp, #108]	; 0x6c
 80075cc:	785b      	ldrb	r3, [r3, #1]
 80075ce:	4608      	mov	r0, r1
 80075d0:	e7c9      	b.n	8007566 <_strtod_l+0x1d6>
 80075d2:	9804      	ldr	r0, [sp, #16]
 80075d4:	e7d3      	b.n	800757e <_strtod_l+0x1ee>
 80075d6:	2908      	cmp	r1, #8
 80075d8:	f101 0101 	add.w	r1, r1, #1
 80075dc:	dc03      	bgt.n	80075e6 <_strtod_l+0x256>
 80075de:	9b06      	ldr	r3, [sp, #24]
 80075e0:	437b      	muls	r3, r7
 80075e2:	9306      	str	r3, [sp, #24]
 80075e4:	e7e1      	b.n	80075aa <_strtod_l+0x21a>
 80075e6:	2910      	cmp	r1, #16
 80075e8:	bfd8      	it	le
 80075ea:	437d      	mulle	r5, r7
 80075ec:	e7dd      	b.n	80075aa <_strtod_l+0x21a>
 80075ee:	2c10      	cmp	r4, #16
 80075f0:	bfdc      	itt	le
 80075f2:	210a      	movle	r1, #10
 80075f4:	fb01 e505 	mlale	r5, r1, r5, lr
 80075f8:	e7e4      	b.n	80075c4 <_strtod_l+0x234>
 80075fa:	2301      	movs	r3, #1
 80075fc:	9305      	str	r3, [sp, #20]
 80075fe:	e781      	b.n	8007504 <_strtod_l+0x174>
 8007600:	f04f 0c01 	mov.w	ip, #1
 8007604:	1cb3      	adds	r3, r6, #2
 8007606:	931b      	str	r3, [sp, #108]	; 0x6c
 8007608:	78b3      	ldrb	r3, [r6, #2]
 800760a:	e78a      	b.n	8007522 <_strtod_l+0x192>
 800760c:	f04f 0c00 	mov.w	ip, #0
 8007610:	e7f8      	b.n	8007604 <_strtod_l+0x274>
 8007612:	bf00      	nop
 8007614:	0800a8d8 	.word	0x0800a8d8
 8007618:	7ff00000 	.word	0x7ff00000
 800761c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800761e:	1c5f      	adds	r7, r3, #1
 8007620:	971b      	str	r7, [sp, #108]	; 0x6c
 8007622:	785b      	ldrb	r3, [r3, #1]
 8007624:	2b30      	cmp	r3, #48	; 0x30
 8007626:	d0f9      	beq.n	800761c <_strtod_l+0x28c>
 8007628:	f1a3 0731 	sub.w	r7, r3, #49	; 0x31
 800762c:	2f08      	cmp	r7, #8
 800762e:	f63f af7d 	bhi.w	800752c <_strtod_l+0x19c>
 8007632:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 8007636:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007638:	9309      	str	r3, [sp, #36]	; 0x24
 800763a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800763c:	1c5f      	adds	r7, r3, #1
 800763e:	971b      	str	r7, [sp, #108]	; 0x6c
 8007640:	785b      	ldrb	r3, [r3, #1]
 8007642:	f1a3 0830 	sub.w	r8, r3, #48	; 0x30
 8007646:	f1b8 0f09 	cmp.w	r8, #9
 800764a:	d937      	bls.n	80076bc <_strtod_l+0x32c>
 800764c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800764e:	1a7f      	subs	r7, r7, r1
 8007650:	2f08      	cmp	r7, #8
 8007652:	f644 671f 	movw	r7, #19999	; 0x4e1f
 8007656:	dc37      	bgt.n	80076c8 <_strtod_l+0x338>
 8007658:	45be      	cmp	lr, r7
 800765a:	bfa8      	it	ge
 800765c:	46be      	movge	lr, r7
 800765e:	f1bc 0f00 	cmp.w	ip, #0
 8007662:	d001      	beq.n	8007668 <_strtod_l+0x2d8>
 8007664:	f1ce 0e00 	rsb	lr, lr, #0
 8007668:	2c00      	cmp	r4, #0
 800766a:	d151      	bne.n	8007710 <_strtod_l+0x380>
 800766c:	2800      	cmp	r0, #0
 800766e:	f47f aece 	bne.w	800740e <_strtod_l+0x7e>
 8007672:	9a07      	ldr	r2, [sp, #28]
 8007674:	2a00      	cmp	r2, #0
 8007676:	f47f aeca 	bne.w	800740e <_strtod_l+0x7e>
 800767a:	9a05      	ldr	r2, [sp, #20]
 800767c:	2a00      	cmp	r2, #0
 800767e:	f47f aee4 	bne.w	800744a <_strtod_l+0xba>
 8007682:	2b4e      	cmp	r3, #78	; 0x4e
 8007684:	d027      	beq.n	80076d6 <_strtod_l+0x346>
 8007686:	dc21      	bgt.n	80076cc <_strtod_l+0x33c>
 8007688:	2b49      	cmp	r3, #73	; 0x49
 800768a:	f47f aede 	bne.w	800744a <_strtod_l+0xba>
 800768e:	49a4      	ldr	r1, [pc, #656]	; (8007920 <_strtod_l+0x590>)
 8007690:	a81b      	add	r0, sp, #108	; 0x6c
 8007692:	f001 fde1 	bl	8009258 <__match>
 8007696:	2800      	cmp	r0, #0
 8007698:	f43f aed7 	beq.w	800744a <_strtod_l+0xba>
 800769c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800769e:	49a1      	ldr	r1, [pc, #644]	; (8007924 <_strtod_l+0x594>)
 80076a0:	3b01      	subs	r3, #1
 80076a2:	a81b      	add	r0, sp, #108	; 0x6c
 80076a4:	931b      	str	r3, [sp, #108]	; 0x6c
 80076a6:	f001 fdd7 	bl	8009258 <__match>
 80076aa:	b910      	cbnz	r0, 80076b2 <_strtod_l+0x322>
 80076ac:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80076ae:	3301      	adds	r3, #1
 80076b0:	931b      	str	r3, [sp, #108]	; 0x6c
 80076b2:	f8df a284 	ldr.w	sl, [pc, #644]	; 8007938 <_strtod_l+0x5a8>
 80076b6:	f04f 0900 	mov.w	r9, #0
 80076ba:	e6a8      	b.n	800740e <_strtod_l+0x7e>
 80076bc:	210a      	movs	r1, #10
 80076be:	fb01 3e0e 	mla	lr, r1, lr, r3
 80076c2:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 80076c6:	e7b8      	b.n	800763a <_strtod_l+0x2aa>
 80076c8:	46be      	mov	lr, r7
 80076ca:	e7c8      	b.n	800765e <_strtod_l+0x2ce>
 80076cc:	2b69      	cmp	r3, #105	; 0x69
 80076ce:	d0de      	beq.n	800768e <_strtod_l+0x2fe>
 80076d0:	2b6e      	cmp	r3, #110	; 0x6e
 80076d2:	f47f aeba 	bne.w	800744a <_strtod_l+0xba>
 80076d6:	4994      	ldr	r1, [pc, #592]	; (8007928 <_strtod_l+0x598>)
 80076d8:	a81b      	add	r0, sp, #108	; 0x6c
 80076da:	f001 fdbd 	bl	8009258 <__match>
 80076de:	2800      	cmp	r0, #0
 80076e0:	f43f aeb3 	beq.w	800744a <_strtod_l+0xba>
 80076e4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80076e6:	781b      	ldrb	r3, [r3, #0]
 80076e8:	2b28      	cmp	r3, #40	; 0x28
 80076ea:	d10e      	bne.n	800770a <_strtod_l+0x37a>
 80076ec:	aa1e      	add	r2, sp, #120	; 0x78
 80076ee:	498f      	ldr	r1, [pc, #572]	; (800792c <_strtod_l+0x59c>)
 80076f0:	a81b      	add	r0, sp, #108	; 0x6c
 80076f2:	f001 fdc5 	bl	8009280 <__hexnan>
 80076f6:	2805      	cmp	r0, #5
 80076f8:	d107      	bne.n	800770a <_strtod_l+0x37a>
 80076fa:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80076fc:	f8dd 9078 	ldr.w	r9, [sp, #120]	; 0x78
 8007700:	f043 4aff 	orr.w	sl, r3, #2139095040	; 0x7f800000
 8007704:	f44a 0ae0 	orr.w	sl, sl, #7340032	; 0x700000
 8007708:	e681      	b.n	800740e <_strtod_l+0x7e>
 800770a:	f8df a234 	ldr.w	sl, [pc, #564]	; 8007940 <_strtod_l+0x5b0>
 800770e:	e7d2      	b.n	80076b6 <_strtod_l+0x326>
 8007710:	ebae 0302 	sub.w	r3, lr, r2
 8007714:	9307      	str	r3, [sp, #28]
 8007716:	9b04      	ldr	r3, [sp, #16]
 8007718:	9806      	ldr	r0, [sp, #24]
 800771a:	2b00      	cmp	r3, #0
 800771c:	bf08      	it	eq
 800771e:	4623      	moveq	r3, r4
 8007720:	2c10      	cmp	r4, #16
 8007722:	9304      	str	r3, [sp, #16]
 8007724:	46a0      	mov	r8, r4
 8007726:	bfa8      	it	ge
 8007728:	f04f 0810 	movge.w	r8, #16
 800772c:	f7f8 fe5a 	bl	80003e4 <__aeabi_ui2d>
 8007730:	2c09      	cmp	r4, #9
 8007732:	4681      	mov	r9, r0
 8007734:	468a      	mov	sl, r1
 8007736:	dc13      	bgt.n	8007760 <_strtod_l+0x3d0>
 8007738:	9b07      	ldr	r3, [sp, #28]
 800773a:	2b00      	cmp	r3, #0
 800773c:	f43f ae67 	beq.w	800740e <_strtod_l+0x7e>
 8007740:	9b07      	ldr	r3, [sp, #28]
 8007742:	dd7e      	ble.n	8007842 <_strtod_l+0x4b2>
 8007744:	2b16      	cmp	r3, #22
 8007746:	dc65      	bgt.n	8007814 <_strtod_l+0x484>
 8007748:	4a79      	ldr	r2, [pc, #484]	; (8007930 <_strtod_l+0x5a0>)
 800774a:	eb02 0ec3 	add.w	lr, r2, r3, lsl #3
 800774e:	464a      	mov	r2, r9
 8007750:	e9de 0100 	ldrd	r0, r1, [lr]
 8007754:	4653      	mov	r3, sl
 8007756:	f7f8 febf 	bl	80004d8 <__aeabi_dmul>
 800775a:	4681      	mov	r9, r0
 800775c:	468a      	mov	sl, r1
 800775e:	e656      	b.n	800740e <_strtod_l+0x7e>
 8007760:	4b73      	ldr	r3, [pc, #460]	; (8007930 <_strtod_l+0x5a0>)
 8007762:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8007766:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800776a:	f7f8 feb5 	bl	80004d8 <__aeabi_dmul>
 800776e:	4606      	mov	r6, r0
 8007770:	4628      	mov	r0, r5
 8007772:	460f      	mov	r7, r1
 8007774:	f7f8 fe36 	bl	80003e4 <__aeabi_ui2d>
 8007778:	4602      	mov	r2, r0
 800777a:	460b      	mov	r3, r1
 800777c:	4630      	mov	r0, r6
 800777e:	4639      	mov	r1, r7
 8007780:	f7f8 fcf4 	bl	800016c <__adddf3>
 8007784:	2c0f      	cmp	r4, #15
 8007786:	4681      	mov	r9, r0
 8007788:	468a      	mov	sl, r1
 800778a:	ddd5      	ble.n	8007738 <_strtod_l+0x3a8>
 800778c:	9b07      	ldr	r3, [sp, #28]
 800778e:	eba4 0808 	sub.w	r8, r4, r8
 8007792:	4498      	add	r8, r3
 8007794:	f1b8 0f00 	cmp.w	r8, #0
 8007798:	f340 809a 	ble.w	80078d0 <_strtod_l+0x540>
 800779c:	f018 030f 	ands.w	r3, r8, #15
 80077a0:	d00a      	beq.n	80077b8 <_strtod_l+0x428>
 80077a2:	4963      	ldr	r1, [pc, #396]	; (8007930 <_strtod_l+0x5a0>)
 80077a4:	464a      	mov	r2, r9
 80077a6:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80077aa:	e9d1 0100 	ldrd	r0, r1, [r1]
 80077ae:	4653      	mov	r3, sl
 80077b0:	f7f8 fe92 	bl	80004d8 <__aeabi_dmul>
 80077b4:	4681      	mov	r9, r0
 80077b6:	468a      	mov	sl, r1
 80077b8:	f038 080f 	bics.w	r8, r8, #15
 80077bc:	d077      	beq.n	80078ae <_strtod_l+0x51e>
 80077be:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 80077c2:	dd4b      	ble.n	800785c <_strtod_l+0x4cc>
 80077c4:	f04f 0800 	mov.w	r8, #0
 80077c8:	f8cd 8010 	str.w	r8, [sp, #16]
 80077cc:	f8cd 8020 	str.w	r8, [sp, #32]
 80077d0:	f8cd 8018 	str.w	r8, [sp, #24]
 80077d4:	2322      	movs	r3, #34	; 0x22
 80077d6:	f04f 0900 	mov.w	r9, #0
 80077da:	f8df a15c 	ldr.w	sl, [pc, #348]	; 8007938 <_strtod_l+0x5a8>
 80077de:	f8cb 3000 	str.w	r3, [fp]
 80077e2:	9b08      	ldr	r3, [sp, #32]
 80077e4:	2b00      	cmp	r3, #0
 80077e6:	f43f ae12 	beq.w	800740e <_strtod_l+0x7e>
 80077ea:	991c      	ldr	r1, [sp, #112]	; 0x70
 80077ec:	4658      	mov	r0, fp
 80077ee:	f001 fe47 	bl	8009480 <_Bfree>
 80077f2:	9906      	ldr	r1, [sp, #24]
 80077f4:	4658      	mov	r0, fp
 80077f6:	f001 fe43 	bl	8009480 <_Bfree>
 80077fa:	9904      	ldr	r1, [sp, #16]
 80077fc:	4658      	mov	r0, fp
 80077fe:	f001 fe3f 	bl	8009480 <_Bfree>
 8007802:	9908      	ldr	r1, [sp, #32]
 8007804:	4658      	mov	r0, fp
 8007806:	f001 fe3b 	bl	8009480 <_Bfree>
 800780a:	4641      	mov	r1, r8
 800780c:	4658      	mov	r0, fp
 800780e:	f001 fe37 	bl	8009480 <_Bfree>
 8007812:	e5fc      	b.n	800740e <_strtod_l+0x7e>
 8007814:	9a07      	ldr	r2, [sp, #28]
 8007816:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 800781a:	4293      	cmp	r3, r2
 800781c:	dbb6      	blt.n	800778c <_strtod_l+0x3fc>
 800781e:	4d44      	ldr	r5, [pc, #272]	; (8007930 <_strtod_l+0x5a0>)
 8007820:	f1c4 040f 	rsb	r4, r4, #15
 8007824:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 8007828:	464a      	mov	r2, r9
 800782a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800782e:	4653      	mov	r3, sl
 8007830:	f7f8 fe52 	bl	80004d8 <__aeabi_dmul>
 8007834:	9b07      	ldr	r3, [sp, #28]
 8007836:	1b1c      	subs	r4, r3, r4
 8007838:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 800783c:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007840:	e789      	b.n	8007756 <_strtod_l+0x3c6>
 8007842:	f113 0f16 	cmn.w	r3, #22
 8007846:	dba1      	blt.n	800778c <_strtod_l+0x3fc>
 8007848:	4a39      	ldr	r2, [pc, #228]	; (8007930 <_strtod_l+0x5a0>)
 800784a:	4648      	mov	r0, r9
 800784c:	eba2 02c3 	sub.w	r2, r2, r3, lsl #3
 8007850:	e9d2 2300 	ldrd	r2, r3, [r2]
 8007854:	4651      	mov	r1, sl
 8007856:	f7f8 ff69 	bl	800072c <__aeabi_ddiv>
 800785a:	e77e      	b.n	800775a <_strtod_l+0x3ca>
 800785c:	2300      	movs	r3, #0
 800785e:	4648      	mov	r0, r9
 8007860:	4651      	mov	r1, sl
 8007862:	461d      	mov	r5, r3
 8007864:	4e33      	ldr	r6, [pc, #204]	; (8007934 <_strtod_l+0x5a4>)
 8007866:	ea4f 1828 	mov.w	r8, r8, asr #4
 800786a:	f1b8 0f01 	cmp.w	r8, #1
 800786e:	dc21      	bgt.n	80078b4 <_strtod_l+0x524>
 8007870:	b10b      	cbz	r3, 8007876 <_strtod_l+0x4e6>
 8007872:	4681      	mov	r9, r0
 8007874:	468a      	mov	sl, r1
 8007876:	4b2f      	ldr	r3, [pc, #188]	; (8007934 <_strtod_l+0x5a4>)
 8007878:	f1aa 7a54 	sub.w	sl, sl, #55574528	; 0x3500000
 800787c:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8007880:	464a      	mov	r2, r9
 8007882:	e9d5 0100 	ldrd	r0, r1, [r5]
 8007886:	4653      	mov	r3, sl
 8007888:	f7f8 fe26 	bl	80004d8 <__aeabi_dmul>
 800788c:	4b2a      	ldr	r3, [pc, #168]	; (8007938 <_strtod_l+0x5a8>)
 800788e:	460a      	mov	r2, r1
 8007890:	400b      	ands	r3, r1
 8007892:	492a      	ldr	r1, [pc, #168]	; (800793c <_strtod_l+0x5ac>)
 8007894:	4681      	mov	r9, r0
 8007896:	428b      	cmp	r3, r1
 8007898:	d894      	bhi.n	80077c4 <_strtod_l+0x434>
 800789a:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800789e:	428b      	cmp	r3, r1
 80078a0:	bf86      	itte	hi
 80078a2:	f04f 39ff 	movhi.w	r9, #4294967295	; 0xffffffff
 80078a6:	f8df a09c 	ldrhi.w	sl, [pc, #156]	; 8007944 <_strtod_l+0x5b4>
 80078aa:	f102 7a54 	addls.w	sl, r2, #55574528	; 0x3500000
 80078ae:	2300      	movs	r3, #0
 80078b0:	9305      	str	r3, [sp, #20]
 80078b2:	e07b      	b.n	80079ac <_strtod_l+0x61c>
 80078b4:	f018 0f01 	tst.w	r8, #1
 80078b8:	d006      	beq.n	80078c8 <_strtod_l+0x538>
 80078ba:	eb06 03c5 	add.w	r3, r6, r5, lsl #3
 80078be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078c2:	f7f8 fe09 	bl	80004d8 <__aeabi_dmul>
 80078c6:	2301      	movs	r3, #1
 80078c8:	3501      	adds	r5, #1
 80078ca:	ea4f 0868 	mov.w	r8, r8, asr #1
 80078ce:	e7cc      	b.n	800786a <_strtod_l+0x4da>
 80078d0:	d0ed      	beq.n	80078ae <_strtod_l+0x51e>
 80078d2:	f1c8 0800 	rsb	r8, r8, #0
 80078d6:	f018 020f 	ands.w	r2, r8, #15
 80078da:	d00a      	beq.n	80078f2 <_strtod_l+0x562>
 80078dc:	4b14      	ldr	r3, [pc, #80]	; (8007930 <_strtod_l+0x5a0>)
 80078de:	4648      	mov	r0, r9
 80078e0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80078e4:	4651      	mov	r1, sl
 80078e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078ea:	f7f8 ff1f 	bl	800072c <__aeabi_ddiv>
 80078ee:	4681      	mov	r9, r0
 80078f0:	468a      	mov	sl, r1
 80078f2:	ea5f 1828 	movs.w	r8, r8, asr #4
 80078f6:	d0da      	beq.n	80078ae <_strtod_l+0x51e>
 80078f8:	f1b8 0f1f 	cmp.w	r8, #31
 80078fc:	dd24      	ble.n	8007948 <_strtod_l+0x5b8>
 80078fe:	f04f 0800 	mov.w	r8, #0
 8007902:	f8cd 8010 	str.w	r8, [sp, #16]
 8007906:	f8cd 8020 	str.w	r8, [sp, #32]
 800790a:	f8cd 8018 	str.w	r8, [sp, #24]
 800790e:	2322      	movs	r3, #34	; 0x22
 8007910:	f04f 0900 	mov.w	r9, #0
 8007914:	f04f 0a00 	mov.w	sl, #0
 8007918:	f8cb 3000 	str.w	r3, [fp]
 800791c:	e761      	b.n	80077e2 <_strtod_l+0x452>
 800791e:	bf00      	nop
 8007920:	0800a8a1 	.word	0x0800a8a1
 8007924:	0800a92b 	.word	0x0800a92b
 8007928:	0800a8a9 	.word	0x0800a8a9
 800792c:	0800a8ec 	.word	0x0800a8ec
 8007930:	0800a968 	.word	0x0800a968
 8007934:	0800a940 	.word	0x0800a940
 8007938:	7ff00000 	.word	0x7ff00000
 800793c:	7ca00000 	.word	0x7ca00000
 8007940:	fff80000 	.word	0xfff80000
 8007944:	7fefffff 	.word	0x7fefffff
 8007948:	f018 0310 	ands.w	r3, r8, #16
 800794c:	bf18      	it	ne
 800794e:	236a      	movne	r3, #106	; 0x6a
 8007950:	4648      	mov	r0, r9
 8007952:	9305      	str	r3, [sp, #20]
 8007954:	4651      	mov	r1, sl
 8007956:	2300      	movs	r3, #0
 8007958:	4da1      	ldr	r5, [pc, #644]	; (8007be0 <_strtod_l+0x850>)
 800795a:	f1b8 0f00 	cmp.w	r8, #0
 800795e:	f300 8113 	bgt.w	8007b88 <_strtod_l+0x7f8>
 8007962:	b10b      	cbz	r3, 8007968 <_strtod_l+0x5d8>
 8007964:	4681      	mov	r9, r0
 8007966:	468a      	mov	sl, r1
 8007968:	9b05      	ldr	r3, [sp, #20]
 800796a:	b1bb      	cbz	r3, 800799c <_strtod_l+0x60c>
 800796c:	f3ca 530a 	ubfx	r3, sl, #20, #11
 8007970:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8007974:	2b00      	cmp	r3, #0
 8007976:	4651      	mov	r1, sl
 8007978:	dd10      	ble.n	800799c <_strtod_l+0x60c>
 800797a:	2b1f      	cmp	r3, #31
 800797c:	f340 8110 	ble.w	8007ba0 <_strtod_l+0x810>
 8007980:	2b34      	cmp	r3, #52	; 0x34
 8007982:	bfd8      	it	le
 8007984:	f04f 32ff 	movle.w	r2, #4294967295	; 0xffffffff
 8007988:	f04f 0900 	mov.w	r9, #0
 800798c:	bfcf      	iteee	gt
 800798e:	f04f 7a5c 	movgt.w	sl, #57671680	; 0x3700000
 8007992:	3b20      	suble	r3, #32
 8007994:	fa02 f303 	lslle.w	r3, r2, r3
 8007998:	ea03 0a01 	andle.w	sl, r3, r1
 800799c:	2200      	movs	r2, #0
 800799e:	2300      	movs	r3, #0
 80079a0:	4648      	mov	r0, r9
 80079a2:	4651      	mov	r1, sl
 80079a4:	f7f9 f800 	bl	80009a8 <__aeabi_dcmpeq>
 80079a8:	2800      	cmp	r0, #0
 80079aa:	d1a8      	bne.n	80078fe <_strtod_l+0x56e>
 80079ac:	9b06      	ldr	r3, [sp, #24]
 80079ae:	9a04      	ldr	r2, [sp, #16]
 80079b0:	9300      	str	r3, [sp, #0]
 80079b2:	9908      	ldr	r1, [sp, #32]
 80079b4:	4623      	mov	r3, r4
 80079b6:	4658      	mov	r0, fp
 80079b8:	f001 fdb4 	bl	8009524 <__s2b>
 80079bc:	9008      	str	r0, [sp, #32]
 80079be:	2800      	cmp	r0, #0
 80079c0:	f43f af00 	beq.w	80077c4 <_strtod_l+0x434>
 80079c4:	9a07      	ldr	r2, [sp, #28]
 80079c6:	9b07      	ldr	r3, [sp, #28]
 80079c8:	2a00      	cmp	r2, #0
 80079ca:	f1c3 0300 	rsb	r3, r3, #0
 80079ce:	bfa8      	it	ge
 80079d0:	2300      	movge	r3, #0
 80079d2:	f04f 0800 	mov.w	r8, #0
 80079d6:	930e      	str	r3, [sp, #56]	; 0x38
 80079d8:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 80079dc:	9316      	str	r3, [sp, #88]	; 0x58
 80079de:	f8cd 8010 	str.w	r8, [sp, #16]
 80079e2:	9b08      	ldr	r3, [sp, #32]
 80079e4:	4658      	mov	r0, fp
 80079e6:	6859      	ldr	r1, [r3, #4]
 80079e8:	f001 fd16 	bl	8009418 <_Balloc>
 80079ec:	9006      	str	r0, [sp, #24]
 80079ee:	2800      	cmp	r0, #0
 80079f0:	f43f aef0 	beq.w	80077d4 <_strtod_l+0x444>
 80079f4:	9b08      	ldr	r3, [sp, #32]
 80079f6:	300c      	adds	r0, #12
 80079f8:	691a      	ldr	r2, [r3, #16]
 80079fa:	f103 010c 	add.w	r1, r3, #12
 80079fe:	3202      	adds	r2, #2
 8007a00:	0092      	lsls	r2, r2, #2
 8007a02:	f7fe fded 	bl	80065e0 <memcpy>
 8007a06:	ab1e      	add	r3, sp, #120	; 0x78
 8007a08:	9301      	str	r3, [sp, #4]
 8007a0a:	ab1d      	add	r3, sp, #116	; 0x74
 8007a0c:	9300      	str	r3, [sp, #0]
 8007a0e:	464a      	mov	r2, r9
 8007a10:	4653      	mov	r3, sl
 8007a12:	4658      	mov	r0, fp
 8007a14:	e9cd 9a0a 	strd	r9, sl, [sp, #40]	; 0x28
 8007a18:	f002 f83e 	bl	8009a98 <__d2b>
 8007a1c:	901c      	str	r0, [sp, #112]	; 0x70
 8007a1e:	2800      	cmp	r0, #0
 8007a20:	f43f aed8 	beq.w	80077d4 <_strtod_l+0x444>
 8007a24:	2101      	movs	r1, #1
 8007a26:	4658      	mov	r0, fp
 8007a28:	f001 fe08 	bl	800963c <__i2b>
 8007a2c:	9004      	str	r0, [sp, #16]
 8007a2e:	4603      	mov	r3, r0
 8007a30:	2800      	cmp	r0, #0
 8007a32:	f43f aecf 	beq.w	80077d4 <_strtod_l+0x444>
 8007a36:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 8007a38:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8007a3a:	2d00      	cmp	r5, #0
 8007a3c:	bfab      	itete	ge
 8007a3e:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 8007a40:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 8007a42:	18ee      	addge	r6, r5, r3
 8007a44:	1b5c      	sublt	r4, r3, r5
 8007a46:	9b05      	ldr	r3, [sp, #20]
 8007a48:	bfa8      	it	ge
 8007a4a:	9c16      	ldrge	r4, [sp, #88]	; 0x58
 8007a4c:	eba5 0503 	sub.w	r5, r5, r3
 8007a50:	4415      	add	r5, r2
 8007a52:	4b64      	ldr	r3, [pc, #400]	; (8007be4 <_strtod_l+0x854>)
 8007a54:	f105 35ff 	add.w	r5, r5, #4294967295	; 0xffffffff
 8007a58:	bfb8      	it	lt
 8007a5a:	9e0e      	ldrlt	r6, [sp, #56]	; 0x38
 8007a5c:	429d      	cmp	r5, r3
 8007a5e:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8007a62:	f280 80af 	bge.w	8007bc4 <_strtod_l+0x834>
 8007a66:	1b5b      	subs	r3, r3, r5
 8007a68:	2b1f      	cmp	r3, #31
 8007a6a:	eba2 0203 	sub.w	r2, r2, r3
 8007a6e:	f04f 0701 	mov.w	r7, #1
 8007a72:	f300 809c 	bgt.w	8007bae <_strtod_l+0x81e>
 8007a76:	2500      	movs	r5, #0
 8007a78:	fa07 f303 	lsl.w	r3, r7, r3
 8007a7c:	930f      	str	r3, [sp, #60]	; 0x3c
 8007a7e:	18b7      	adds	r7, r6, r2
 8007a80:	9b05      	ldr	r3, [sp, #20]
 8007a82:	42be      	cmp	r6, r7
 8007a84:	4414      	add	r4, r2
 8007a86:	441c      	add	r4, r3
 8007a88:	4633      	mov	r3, r6
 8007a8a:	bfa8      	it	ge
 8007a8c:	463b      	movge	r3, r7
 8007a8e:	42a3      	cmp	r3, r4
 8007a90:	bfa8      	it	ge
 8007a92:	4623      	movge	r3, r4
 8007a94:	2b00      	cmp	r3, #0
 8007a96:	bfc2      	ittt	gt
 8007a98:	1aff      	subgt	r7, r7, r3
 8007a9a:	1ae4      	subgt	r4, r4, r3
 8007a9c:	1af6      	subgt	r6, r6, r3
 8007a9e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007aa0:	b1bb      	cbz	r3, 8007ad2 <_strtod_l+0x742>
 8007aa2:	461a      	mov	r2, r3
 8007aa4:	9904      	ldr	r1, [sp, #16]
 8007aa6:	4658      	mov	r0, fp
 8007aa8:	f001 fe66 	bl	8009778 <__pow5mult>
 8007aac:	9004      	str	r0, [sp, #16]
 8007aae:	2800      	cmp	r0, #0
 8007ab0:	f43f ae90 	beq.w	80077d4 <_strtod_l+0x444>
 8007ab4:	4601      	mov	r1, r0
 8007ab6:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8007ab8:	4658      	mov	r0, fp
 8007aba:	f001 fdc8 	bl	800964e <__multiply>
 8007abe:	9009      	str	r0, [sp, #36]	; 0x24
 8007ac0:	2800      	cmp	r0, #0
 8007ac2:	f43f ae87 	beq.w	80077d4 <_strtod_l+0x444>
 8007ac6:	991c      	ldr	r1, [sp, #112]	; 0x70
 8007ac8:	4658      	mov	r0, fp
 8007aca:	f001 fcd9 	bl	8009480 <_Bfree>
 8007ace:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007ad0:	931c      	str	r3, [sp, #112]	; 0x70
 8007ad2:	2f00      	cmp	r7, #0
 8007ad4:	dc7a      	bgt.n	8007bcc <_strtod_l+0x83c>
 8007ad6:	9b07      	ldr	r3, [sp, #28]
 8007ad8:	2b00      	cmp	r3, #0
 8007ada:	dd08      	ble.n	8007aee <_strtod_l+0x75e>
 8007adc:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8007ade:	9906      	ldr	r1, [sp, #24]
 8007ae0:	4658      	mov	r0, fp
 8007ae2:	f001 fe49 	bl	8009778 <__pow5mult>
 8007ae6:	9006      	str	r0, [sp, #24]
 8007ae8:	2800      	cmp	r0, #0
 8007aea:	f43f ae73 	beq.w	80077d4 <_strtod_l+0x444>
 8007aee:	2c00      	cmp	r4, #0
 8007af0:	dd08      	ble.n	8007b04 <_strtod_l+0x774>
 8007af2:	4622      	mov	r2, r4
 8007af4:	9906      	ldr	r1, [sp, #24]
 8007af6:	4658      	mov	r0, fp
 8007af8:	f001 fe8c 	bl	8009814 <__lshift>
 8007afc:	9006      	str	r0, [sp, #24]
 8007afe:	2800      	cmp	r0, #0
 8007b00:	f43f ae68 	beq.w	80077d4 <_strtod_l+0x444>
 8007b04:	2e00      	cmp	r6, #0
 8007b06:	dd08      	ble.n	8007b1a <_strtod_l+0x78a>
 8007b08:	4632      	mov	r2, r6
 8007b0a:	9904      	ldr	r1, [sp, #16]
 8007b0c:	4658      	mov	r0, fp
 8007b0e:	f001 fe81 	bl	8009814 <__lshift>
 8007b12:	9004      	str	r0, [sp, #16]
 8007b14:	2800      	cmp	r0, #0
 8007b16:	f43f ae5d 	beq.w	80077d4 <_strtod_l+0x444>
 8007b1a:	9a06      	ldr	r2, [sp, #24]
 8007b1c:	991c      	ldr	r1, [sp, #112]	; 0x70
 8007b1e:	4658      	mov	r0, fp
 8007b20:	f001 fee6 	bl	80098f0 <__mdiff>
 8007b24:	4680      	mov	r8, r0
 8007b26:	2800      	cmp	r0, #0
 8007b28:	f43f ae54 	beq.w	80077d4 <_strtod_l+0x444>
 8007b2c:	2400      	movs	r4, #0
 8007b2e:	68c3      	ldr	r3, [r0, #12]
 8007b30:	9904      	ldr	r1, [sp, #16]
 8007b32:	60c4      	str	r4, [r0, #12]
 8007b34:	930c      	str	r3, [sp, #48]	; 0x30
 8007b36:	f001 fec1 	bl	80098bc <__mcmp>
 8007b3a:	42a0      	cmp	r0, r4
 8007b3c:	da54      	bge.n	8007be8 <_strtod_l+0x858>
 8007b3e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007b40:	b9f3      	cbnz	r3, 8007b80 <_strtod_l+0x7f0>
 8007b42:	f1b9 0f00 	cmp.w	r9, #0
 8007b46:	d11b      	bne.n	8007b80 <_strtod_l+0x7f0>
 8007b48:	f3ca 0313 	ubfx	r3, sl, #0, #20
 8007b4c:	b9c3      	cbnz	r3, 8007b80 <_strtod_l+0x7f0>
 8007b4e:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 8007b52:	0d1b      	lsrs	r3, r3, #20
 8007b54:	051b      	lsls	r3, r3, #20
 8007b56:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8007b5a:	d911      	bls.n	8007b80 <_strtod_l+0x7f0>
 8007b5c:	f8d8 3014 	ldr.w	r3, [r8, #20]
 8007b60:	b91b      	cbnz	r3, 8007b6a <_strtod_l+0x7da>
 8007b62:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8007b66:	2b01      	cmp	r3, #1
 8007b68:	dd0a      	ble.n	8007b80 <_strtod_l+0x7f0>
 8007b6a:	4641      	mov	r1, r8
 8007b6c:	2201      	movs	r2, #1
 8007b6e:	4658      	mov	r0, fp
 8007b70:	f001 fe50 	bl	8009814 <__lshift>
 8007b74:	9904      	ldr	r1, [sp, #16]
 8007b76:	4680      	mov	r8, r0
 8007b78:	f001 fea0 	bl	80098bc <__mcmp>
 8007b7c:	2800      	cmp	r0, #0
 8007b7e:	dc68      	bgt.n	8007c52 <_strtod_l+0x8c2>
 8007b80:	9b05      	ldr	r3, [sp, #20]
 8007b82:	2b00      	cmp	r3, #0
 8007b84:	d172      	bne.n	8007c6c <_strtod_l+0x8dc>
 8007b86:	e630      	b.n	80077ea <_strtod_l+0x45a>
 8007b88:	f018 0f01 	tst.w	r8, #1
 8007b8c:	d004      	beq.n	8007b98 <_strtod_l+0x808>
 8007b8e:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007b92:	f7f8 fca1 	bl	80004d8 <__aeabi_dmul>
 8007b96:	2301      	movs	r3, #1
 8007b98:	ea4f 0868 	mov.w	r8, r8, asr #1
 8007b9c:	3508      	adds	r5, #8
 8007b9e:	e6dc      	b.n	800795a <_strtod_l+0x5ca>
 8007ba0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007ba4:	fa02 f303 	lsl.w	r3, r2, r3
 8007ba8:	ea03 0909 	and.w	r9, r3, r9
 8007bac:	e6f6      	b.n	800799c <_strtod_l+0x60c>
 8007bae:	f1c5 457f 	rsb	r5, r5, #4278190080	; 0xff000000
 8007bb2:	f505 057f 	add.w	r5, r5, #16711680	; 0xff0000
 8007bb6:	f505 457b 	add.w	r5, r5, #64256	; 0xfb00
 8007bba:	35e2      	adds	r5, #226	; 0xe2
 8007bbc:	fa07 f505 	lsl.w	r5, r7, r5
 8007bc0:	970f      	str	r7, [sp, #60]	; 0x3c
 8007bc2:	e75c      	b.n	8007a7e <_strtod_l+0x6ee>
 8007bc4:	2301      	movs	r3, #1
 8007bc6:	2500      	movs	r5, #0
 8007bc8:	930f      	str	r3, [sp, #60]	; 0x3c
 8007bca:	e758      	b.n	8007a7e <_strtod_l+0x6ee>
 8007bcc:	463a      	mov	r2, r7
 8007bce:	991c      	ldr	r1, [sp, #112]	; 0x70
 8007bd0:	4658      	mov	r0, fp
 8007bd2:	f001 fe1f 	bl	8009814 <__lshift>
 8007bd6:	901c      	str	r0, [sp, #112]	; 0x70
 8007bd8:	2800      	cmp	r0, #0
 8007bda:	f47f af7c 	bne.w	8007ad6 <_strtod_l+0x746>
 8007bde:	e5f9      	b.n	80077d4 <_strtod_l+0x444>
 8007be0:	0800a900 	.word	0x0800a900
 8007be4:	fffffc02 	.word	0xfffffc02
 8007be8:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 8007bec:	f040 8089 	bne.w	8007d02 <_strtod_l+0x972>
 8007bf0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007bf2:	f3ca 0313 	ubfx	r3, sl, #0, #20
 8007bf6:	b342      	cbz	r2, 8007c4a <_strtod_l+0x8ba>
 8007bf8:	4aaf      	ldr	r2, [pc, #700]	; (8007eb8 <_strtod_l+0xb28>)
 8007bfa:	4293      	cmp	r3, r2
 8007bfc:	d156      	bne.n	8007cac <_strtod_l+0x91c>
 8007bfe:	9b05      	ldr	r3, [sp, #20]
 8007c00:	4648      	mov	r0, r9
 8007c02:	b1eb      	cbz	r3, 8007c40 <_strtod_l+0x8b0>
 8007c04:	4653      	mov	r3, sl
 8007c06:	4aad      	ldr	r2, [pc, #692]	; (8007ebc <_strtod_l+0xb2c>)
 8007c08:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8007c0c:	401a      	ands	r2, r3
 8007c0e:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 8007c12:	d818      	bhi.n	8007c46 <_strtod_l+0x8b6>
 8007c14:	0d12      	lsrs	r2, r2, #20
 8007c16:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8007c1a:	fa01 f303 	lsl.w	r3, r1, r3
 8007c1e:	4298      	cmp	r0, r3
 8007c20:	d144      	bne.n	8007cac <_strtod_l+0x91c>
 8007c22:	4ba7      	ldr	r3, [pc, #668]	; (8007ec0 <_strtod_l+0xb30>)
 8007c24:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007c26:	429a      	cmp	r2, r3
 8007c28:	d102      	bne.n	8007c30 <_strtod_l+0x8a0>
 8007c2a:	3001      	adds	r0, #1
 8007c2c:	f43f add2 	beq.w	80077d4 <_strtod_l+0x444>
 8007c30:	4ba2      	ldr	r3, [pc, #648]	; (8007ebc <_strtod_l+0xb2c>)
 8007c32:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007c34:	f04f 0900 	mov.w	r9, #0
 8007c38:	401a      	ands	r2, r3
 8007c3a:	f502 1a80 	add.w	sl, r2, #1048576	; 0x100000
 8007c3e:	e79f      	b.n	8007b80 <_strtod_l+0x7f0>
 8007c40:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007c44:	e7eb      	b.n	8007c1e <_strtod_l+0x88e>
 8007c46:	460b      	mov	r3, r1
 8007c48:	e7e9      	b.n	8007c1e <_strtod_l+0x88e>
 8007c4a:	bb7b      	cbnz	r3, 8007cac <_strtod_l+0x91c>
 8007c4c:	f1b9 0f00 	cmp.w	r9, #0
 8007c50:	d12c      	bne.n	8007cac <_strtod_l+0x91c>
 8007c52:	9905      	ldr	r1, [sp, #20]
 8007c54:	4653      	mov	r3, sl
 8007c56:	4a99      	ldr	r2, [pc, #612]	; (8007ebc <_strtod_l+0xb2c>)
 8007c58:	b1f1      	cbz	r1, 8007c98 <_strtod_l+0x908>
 8007c5a:	ea02 010a 	and.w	r1, r2, sl
 8007c5e:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8007c62:	dc19      	bgt.n	8007c98 <_strtod_l+0x908>
 8007c64:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8007c68:	f77f ae51 	ble.w	800790e <_strtod_l+0x57e>
 8007c6c:	2300      	movs	r3, #0
 8007c6e:	4a95      	ldr	r2, [pc, #596]	; (8007ec4 <_strtod_l+0xb34>)
 8007c70:	4648      	mov	r0, r9
 8007c72:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 8007c76:	4651      	mov	r1, sl
 8007c78:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8007c7c:	f7f8 fc2c 	bl	80004d8 <__aeabi_dmul>
 8007c80:	4681      	mov	r9, r0
 8007c82:	468a      	mov	sl, r1
 8007c84:	2900      	cmp	r1, #0
 8007c86:	f47f adb0 	bne.w	80077ea <_strtod_l+0x45a>
 8007c8a:	2800      	cmp	r0, #0
 8007c8c:	f47f adad 	bne.w	80077ea <_strtod_l+0x45a>
 8007c90:	2322      	movs	r3, #34	; 0x22
 8007c92:	f8cb 3000 	str.w	r3, [fp]
 8007c96:	e5a8      	b.n	80077ea <_strtod_l+0x45a>
 8007c98:	4013      	ands	r3, r2
 8007c9a:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8007c9e:	ea6f 5a13 	mvn.w	sl, r3, lsr #20
 8007ca2:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
 8007ca6:	ea6f 5a0a 	mvn.w	sl, sl, lsl #20
 8007caa:	e769      	b.n	8007b80 <_strtod_l+0x7f0>
 8007cac:	b19d      	cbz	r5, 8007cd6 <_strtod_l+0x946>
 8007cae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007cb0:	421d      	tst	r5, r3
 8007cb2:	f43f af65 	beq.w	8007b80 <_strtod_l+0x7f0>
 8007cb6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007cb8:	9a05      	ldr	r2, [sp, #20]
 8007cba:	4648      	mov	r0, r9
 8007cbc:	4651      	mov	r1, sl
 8007cbe:	b173      	cbz	r3, 8007cde <_strtod_l+0x94e>
 8007cc0:	f7ff fb42 	bl	8007348 <sulp>
 8007cc4:	4602      	mov	r2, r0
 8007cc6:	460b      	mov	r3, r1
 8007cc8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8007ccc:	f7f8 fa4e 	bl	800016c <__adddf3>
 8007cd0:	4681      	mov	r9, r0
 8007cd2:	468a      	mov	sl, r1
 8007cd4:	e754      	b.n	8007b80 <_strtod_l+0x7f0>
 8007cd6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007cd8:	ea13 0f09 	tst.w	r3, r9
 8007cdc:	e7e9      	b.n	8007cb2 <_strtod_l+0x922>
 8007cde:	f7ff fb33 	bl	8007348 <sulp>
 8007ce2:	4602      	mov	r2, r0
 8007ce4:	460b      	mov	r3, r1
 8007ce6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8007cea:	f7f8 fa3d 	bl	8000168 <__aeabi_dsub>
 8007cee:	2200      	movs	r2, #0
 8007cf0:	2300      	movs	r3, #0
 8007cf2:	4681      	mov	r9, r0
 8007cf4:	468a      	mov	sl, r1
 8007cf6:	f7f8 fe57 	bl	80009a8 <__aeabi_dcmpeq>
 8007cfa:	2800      	cmp	r0, #0
 8007cfc:	f47f ae07 	bne.w	800790e <_strtod_l+0x57e>
 8007d00:	e73e      	b.n	8007b80 <_strtod_l+0x7f0>
 8007d02:	9904      	ldr	r1, [sp, #16]
 8007d04:	4640      	mov	r0, r8
 8007d06:	f001 ff16 	bl	8009b36 <__ratio>
 8007d0a:	2200      	movs	r2, #0
 8007d0c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8007d10:	4606      	mov	r6, r0
 8007d12:	460f      	mov	r7, r1
 8007d14:	f7f8 fe5c 	bl	80009d0 <__aeabi_dcmple>
 8007d18:	2800      	cmp	r0, #0
 8007d1a:	d075      	beq.n	8007e08 <_strtod_l+0xa78>
 8007d1c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007d1e:	2b00      	cmp	r3, #0
 8007d20:	d047      	beq.n	8007db2 <_strtod_l+0xa22>
 8007d22:	2600      	movs	r6, #0
 8007d24:	4f68      	ldr	r7, [pc, #416]	; (8007ec8 <_strtod_l+0xb38>)
 8007d26:	4d68      	ldr	r5, [pc, #416]	; (8007ec8 <_strtod_l+0xb38>)
 8007d28:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007d2a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007d2e:	0d1b      	lsrs	r3, r3, #20
 8007d30:	051b      	lsls	r3, r3, #20
 8007d32:	930f      	str	r3, [sp, #60]	; 0x3c
 8007d34:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007d36:	4b65      	ldr	r3, [pc, #404]	; (8007ecc <_strtod_l+0xb3c>)
 8007d38:	429a      	cmp	r2, r3
 8007d3a:	f040 80cf 	bne.w	8007edc <_strtod_l+0xb4c>
 8007d3e:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8007d42:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 8007d46:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007d48:	4648      	mov	r0, r9
 8007d4a:	f1a3 7a54 	sub.w	sl, r3, #55574528	; 0x3500000
 8007d4e:	4651      	mov	r1, sl
 8007d50:	f001 fe2c 	bl	80099ac <__ulp>
 8007d54:	4602      	mov	r2, r0
 8007d56:	460b      	mov	r3, r1
 8007d58:	4630      	mov	r0, r6
 8007d5a:	4639      	mov	r1, r7
 8007d5c:	f7f8 fbbc 	bl	80004d8 <__aeabi_dmul>
 8007d60:	464a      	mov	r2, r9
 8007d62:	4653      	mov	r3, sl
 8007d64:	f7f8 fa02 	bl	800016c <__adddf3>
 8007d68:	460b      	mov	r3, r1
 8007d6a:	4954      	ldr	r1, [pc, #336]	; (8007ebc <_strtod_l+0xb2c>)
 8007d6c:	4a58      	ldr	r2, [pc, #352]	; (8007ed0 <_strtod_l+0xb40>)
 8007d6e:	4019      	ands	r1, r3
 8007d70:	4291      	cmp	r1, r2
 8007d72:	4681      	mov	r9, r0
 8007d74:	d95e      	bls.n	8007e34 <_strtod_l+0xaa4>
 8007d76:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007d78:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8007d7c:	4293      	cmp	r3, r2
 8007d7e:	d103      	bne.n	8007d88 <_strtod_l+0x9f8>
 8007d80:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007d82:	3301      	adds	r3, #1
 8007d84:	f43f ad26 	beq.w	80077d4 <_strtod_l+0x444>
 8007d88:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
 8007d8c:	f8df a130 	ldr.w	sl, [pc, #304]	; 8007ec0 <_strtod_l+0xb30>
 8007d90:	991c      	ldr	r1, [sp, #112]	; 0x70
 8007d92:	4658      	mov	r0, fp
 8007d94:	f001 fb74 	bl	8009480 <_Bfree>
 8007d98:	9906      	ldr	r1, [sp, #24]
 8007d9a:	4658      	mov	r0, fp
 8007d9c:	f001 fb70 	bl	8009480 <_Bfree>
 8007da0:	9904      	ldr	r1, [sp, #16]
 8007da2:	4658      	mov	r0, fp
 8007da4:	f001 fb6c 	bl	8009480 <_Bfree>
 8007da8:	4641      	mov	r1, r8
 8007daa:	4658      	mov	r0, fp
 8007dac:	f001 fb68 	bl	8009480 <_Bfree>
 8007db0:	e617      	b.n	80079e2 <_strtod_l+0x652>
 8007db2:	f1b9 0f00 	cmp.w	r9, #0
 8007db6:	d119      	bne.n	8007dec <_strtod_l+0xa5c>
 8007db8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007dba:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007dbe:	b9e3      	cbnz	r3, 8007dfa <_strtod_l+0xa6a>
 8007dc0:	2200      	movs	r2, #0
 8007dc2:	4b41      	ldr	r3, [pc, #260]	; (8007ec8 <_strtod_l+0xb38>)
 8007dc4:	4630      	mov	r0, r6
 8007dc6:	4639      	mov	r1, r7
 8007dc8:	f7f8 fdf8 	bl	80009bc <__aeabi_dcmplt>
 8007dcc:	b9c8      	cbnz	r0, 8007e02 <_strtod_l+0xa72>
 8007dce:	2200      	movs	r2, #0
 8007dd0:	4b40      	ldr	r3, [pc, #256]	; (8007ed4 <_strtod_l+0xb44>)
 8007dd2:	4630      	mov	r0, r6
 8007dd4:	4639      	mov	r1, r7
 8007dd6:	f7f8 fb7f 	bl	80004d8 <__aeabi_dmul>
 8007dda:	4604      	mov	r4, r0
 8007ddc:	460d      	mov	r5, r1
 8007dde:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 8007de2:	9418      	str	r4, [sp, #96]	; 0x60
 8007de4:	9319      	str	r3, [sp, #100]	; 0x64
 8007de6:	e9dd 6718 	ldrd	r6, r7, [sp, #96]	; 0x60
 8007dea:	e79d      	b.n	8007d28 <_strtod_l+0x998>
 8007dec:	f1b9 0f01 	cmp.w	r9, #1
 8007df0:	d103      	bne.n	8007dfa <_strtod_l+0xa6a>
 8007df2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007df4:	2b00      	cmp	r3, #0
 8007df6:	f43f ad8a 	beq.w	800790e <_strtod_l+0x57e>
 8007dfa:	2600      	movs	r6, #0
 8007dfc:	4f36      	ldr	r7, [pc, #216]	; (8007ed8 <_strtod_l+0xb48>)
 8007dfe:	2400      	movs	r4, #0
 8007e00:	e791      	b.n	8007d26 <_strtod_l+0x996>
 8007e02:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8007e04:	4d33      	ldr	r5, [pc, #204]	; (8007ed4 <_strtod_l+0xb44>)
 8007e06:	e7ea      	b.n	8007dde <_strtod_l+0xa4e>
 8007e08:	4b32      	ldr	r3, [pc, #200]	; (8007ed4 <_strtod_l+0xb44>)
 8007e0a:	2200      	movs	r2, #0
 8007e0c:	4630      	mov	r0, r6
 8007e0e:	4639      	mov	r1, r7
 8007e10:	f7f8 fb62 	bl	80004d8 <__aeabi_dmul>
 8007e14:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007e16:	4604      	mov	r4, r0
 8007e18:	460d      	mov	r5, r1
 8007e1a:	b933      	cbnz	r3, 8007e2a <_strtod_l+0xa9a>
 8007e1c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007e20:	9010      	str	r0, [sp, #64]	; 0x40
 8007e22:	9311      	str	r3, [sp, #68]	; 0x44
 8007e24:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8007e28:	e77e      	b.n	8007d28 <_strtod_l+0x998>
 8007e2a:	4602      	mov	r2, r0
 8007e2c:	460b      	mov	r3, r1
 8007e2e:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 8007e32:	e7f7      	b.n	8007e24 <_strtod_l+0xa94>
 8007e34:	f103 7a54 	add.w	sl, r3, #55574528	; 0x3500000
 8007e38:	9b05      	ldr	r3, [sp, #20]
 8007e3a:	2b00      	cmp	r3, #0
 8007e3c:	d1a8      	bne.n	8007d90 <_strtod_l+0xa00>
 8007e3e:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 8007e42:	0d1b      	lsrs	r3, r3, #20
 8007e44:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007e46:	051b      	lsls	r3, r3, #20
 8007e48:	429a      	cmp	r2, r3
 8007e4a:	4656      	mov	r6, sl
 8007e4c:	d1a0      	bne.n	8007d90 <_strtod_l+0xa00>
 8007e4e:	4629      	mov	r1, r5
 8007e50:	4620      	mov	r0, r4
 8007e52:	f7f8 fdf1 	bl	8000a38 <__aeabi_d2iz>
 8007e56:	f7f8 fad5 	bl	8000404 <__aeabi_i2d>
 8007e5a:	460b      	mov	r3, r1
 8007e5c:	4602      	mov	r2, r0
 8007e5e:	4629      	mov	r1, r5
 8007e60:	4620      	mov	r0, r4
 8007e62:	f7f8 f981 	bl	8000168 <__aeabi_dsub>
 8007e66:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007e68:	4604      	mov	r4, r0
 8007e6a:	460d      	mov	r5, r1
 8007e6c:	b933      	cbnz	r3, 8007e7c <_strtod_l+0xaec>
 8007e6e:	f1b9 0f00 	cmp.w	r9, #0
 8007e72:	d103      	bne.n	8007e7c <_strtod_l+0xaec>
 8007e74:	f3ca 0613 	ubfx	r6, sl, #0, #20
 8007e78:	2e00      	cmp	r6, #0
 8007e7a:	d06a      	beq.n	8007f52 <_strtod_l+0xbc2>
 8007e7c:	a30a      	add	r3, pc, #40	; (adr r3, 8007ea8 <_strtod_l+0xb18>)
 8007e7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e82:	4620      	mov	r0, r4
 8007e84:	4629      	mov	r1, r5
 8007e86:	f7f8 fd99 	bl	80009bc <__aeabi_dcmplt>
 8007e8a:	2800      	cmp	r0, #0
 8007e8c:	f47f acad 	bne.w	80077ea <_strtod_l+0x45a>
 8007e90:	a307      	add	r3, pc, #28	; (adr r3, 8007eb0 <_strtod_l+0xb20>)
 8007e92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e96:	4620      	mov	r0, r4
 8007e98:	4629      	mov	r1, r5
 8007e9a:	f7f8 fdad 	bl	80009f8 <__aeabi_dcmpgt>
 8007e9e:	2800      	cmp	r0, #0
 8007ea0:	f43f af76 	beq.w	8007d90 <_strtod_l+0xa00>
 8007ea4:	e4a1      	b.n	80077ea <_strtod_l+0x45a>
 8007ea6:	bf00      	nop
 8007ea8:	94a03595 	.word	0x94a03595
 8007eac:	3fdfffff 	.word	0x3fdfffff
 8007eb0:	35afe535 	.word	0x35afe535
 8007eb4:	3fe00000 	.word	0x3fe00000
 8007eb8:	000fffff 	.word	0x000fffff
 8007ebc:	7ff00000 	.word	0x7ff00000
 8007ec0:	7fefffff 	.word	0x7fefffff
 8007ec4:	39500000 	.word	0x39500000
 8007ec8:	3ff00000 	.word	0x3ff00000
 8007ecc:	7fe00000 	.word	0x7fe00000
 8007ed0:	7c9fffff 	.word	0x7c9fffff
 8007ed4:	3fe00000 	.word	0x3fe00000
 8007ed8:	bff00000 	.word	0xbff00000
 8007edc:	9b05      	ldr	r3, [sp, #20]
 8007ede:	b313      	cbz	r3, 8007f26 <_strtod_l+0xb96>
 8007ee0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007ee2:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8007ee6:	d81e      	bhi.n	8007f26 <_strtod_l+0xb96>
 8007ee8:	a325      	add	r3, pc, #148	; (adr r3, 8007f80 <_strtod_l+0xbf0>)
 8007eea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007eee:	4620      	mov	r0, r4
 8007ef0:	4629      	mov	r1, r5
 8007ef2:	f7f8 fd6d 	bl	80009d0 <__aeabi_dcmple>
 8007ef6:	b190      	cbz	r0, 8007f1e <_strtod_l+0xb8e>
 8007ef8:	4629      	mov	r1, r5
 8007efa:	4620      	mov	r0, r4
 8007efc:	f7f8 fdc4 	bl	8000a88 <__aeabi_d2uiz>
 8007f00:	2800      	cmp	r0, #0
 8007f02:	bf08      	it	eq
 8007f04:	2001      	moveq	r0, #1
 8007f06:	f7f8 fa6d 	bl	80003e4 <__aeabi_ui2d>
 8007f0a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007f0c:	4604      	mov	r4, r0
 8007f0e:	460d      	mov	r5, r1
 8007f10:	b9d3      	cbnz	r3, 8007f48 <_strtod_l+0xbb8>
 8007f12:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007f16:	9012      	str	r0, [sp, #72]	; 0x48
 8007f18:	9313      	str	r3, [sp, #76]	; 0x4c
 8007f1a:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
 8007f1e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007f20:	f107 63d6 	add.w	r3, r7, #112197632	; 0x6b00000
 8007f24:	1a9f      	subs	r7, r3, r2
 8007f26:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8007f2a:	f001 fd3f 	bl	80099ac <__ulp>
 8007f2e:	4602      	mov	r2, r0
 8007f30:	460b      	mov	r3, r1
 8007f32:	4630      	mov	r0, r6
 8007f34:	4639      	mov	r1, r7
 8007f36:	f7f8 facf 	bl	80004d8 <__aeabi_dmul>
 8007f3a:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8007f3e:	f7f8 f915 	bl	800016c <__adddf3>
 8007f42:	4681      	mov	r9, r0
 8007f44:	468a      	mov	sl, r1
 8007f46:	e777      	b.n	8007e38 <_strtod_l+0xaa8>
 8007f48:	4602      	mov	r2, r0
 8007f4a:	460b      	mov	r3, r1
 8007f4c:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
 8007f50:	e7e3      	b.n	8007f1a <_strtod_l+0xb8a>
 8007f52:	a30d      	add	r3, pc, #52	; (adr r3, 8007f88 <_strtod_l+0xbf8>)
 8007f54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f58:	f7f8 fd30 	bl	80009bc <__aeabi_dcmplt>
 8007f5c:	e79f      	b.n	8007e9e <_strtod_l+0xb0e>
 8007f5e:	2300      	movs	r3, #0
 8007f60:	930d      	str	r3, [sp, #52]	; 0x34
 8007f62:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007f64:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8007f66:	6013      	str	r3, [r2, #0]
 8007f68:	f7ff ba55 	b.w	8007416 <_strtod_l+0x86>
 8007f6c:	2b65      	cmp	r3, #101	; 0x65
 8007f6e:	f04f 0200 	mov.w	r2, #0
 8007f72:	f43f ab42 	beq.w	80075fa <_strtod_l+0x26a>
 8007f76:	2101      	movs	r1, #1
 8007f78:	4614      	mov	r4, r2
 8007f7a:	9105      	str	r1, [sp, #20]
 8007f7c:	f7ff babf 	b.w	80074fe <_strtod_l+0x16e>
 8007f80:	ffc00000 	.word	0xffc00000
 8007f84:	41dfffff 	.word	0x41dfffff
 8007f88:	94a03595 	.word	0x94a03595
 8007f8c:	3fcfffff 	.word	0x3fcfffff

08007f90 <_strtod_r>:
 8007f90:	4b05      	ldr	r3, [pc, #20]	; (8007fa8 <_strtod_r+0x18>)
 8007f92:	b410      	push	{r4}
 8007f94:	681b      	ldr	r3, [r3, #0]
 8007f96:	4c05      	ldr	r4, [pc, #20]	; (8007fac <_strtod_r+0x1c>)
 8007f98:	6a1b      	ldr	r3, [r3, #32]
 8007f9a:	2b00      	cmp	r3, #0
 8007f9c:	bf08      	it	eq
 8007f9e:	4623      	moveq	r3, r4
 8007fa0:	bc10      	pop	{r4}
 8007fa2:	f7ff b9f5 	b.w	8007390 <_strtod_l>
 8007fa6:	bf00      	nop
 8007fa8:	20000024 	.word	0x20000024
 8007fac:	20000088 	.word	0x20000088

08007fb0 <_strtol_l.isra.0>:
 8007fb0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007fb4:	4680      	mov	r8, r0
 8007fb6:	4689      	mov	r9, r1
 8007fb8:	4692      	mov	sl, r2
 8007fba:	461e      	mov	r6, r3
 8007fbc:	460f      	mov	r7, r1
 8007fbe:	463d      	mov	r5, r7
 8007fc0:	9808      	ldr	r0, [sp, #32]
 8007fc2:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007fc6:	f001 f9eb 	bl	80093a0 <__locale_ctype_ptr_l>
 8007fca:	4420      	add	r0, r4
 8007fcc:	7843      	ldrb	r3, [r0, #1]
 8007fce:	f013 0308 	ands.w	r3, r3, #8
 8007fd2:	d132      	bne.n	800803a <_strtol_l.isra.0+0x8a>
 8007fd4:	2c2d      	cmp	r4, #45	; 0x2d
 8007fd6:	d132      	bne.n	800803e <_strtol_l.isra.0+0x8e>
 8007fd8:	2201      	movs	r2, #1
 8007fda:	787c      	ldrb	r4, [r7, #1]
 8007fdc:	1cbd      	adds	r5, r7, #2
 8007fde:	2e00      	cmp	r6, #0
 8007fe0:	d05d      	beq.n	800809e <_strtol_l.isra.0+0xee>
 8007fe2:	2e10      	cmp	r6, #16
 8007fe4:	d109      	bne.n	8007ffa <_strtol_l.isra.0+0x4a>
 8007fe6:	2c30      	cmp	r4, #48	; 0x30
 8007fe8:	d107      	bne.n	8007ffa <_strtol_l.isra.0+0x4a>
 8007fea:	782b      	ldrb	r3, [r5, #0]
 8007fec:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8007ff0:	2b58      	cmp	r3, #88	; 0x58
 8007ff2:	d14f      	bne.n	8008094 <_strtol_l.isra.0+0xe4>
 8007ff4:	2610      	movs	r6, #16
 8007ff6:	786c      	ldrb	r4, [r5, #1]
 8007ff8:	3502      	adds	r5, #2
 8007ffa:	2a00      	cmp	r2, #0
 8007ffc:	bf14      	ite	ne
 8007ffe:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 8008002:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 8008006:	2700      	movs	r7, #0
 8008008:	fbb1 fcf6 	udiv	ip, r1, r6
 800800c:	4638      	mov	r0, r7
 800800e:	fb06 1e1c 	mls	lr, r6, ip, r1
 8008012:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 8008016:	2b09      	cmp	r3, #9
 8008018:	d817      	bhi.n	800804a <_strtol_l.isra.0+0x9a>
 800801a:	461c      	mov	r4, r3
 800801c:	42a6      	cmp	r6, r4
 800801e:	dd23      	ble.n	8008068 <_strtol_l.isra.0+0xb8>
 8008020:	1c7b      	adds	r3, r7, #1
 8008022:	d007      	beq.n	8008034 <_strtol_l.isra.0+0x84>
 8008024:	4584      	cmp	ip, r0
 8008026:	d31c      	bcc.n	8008062 <_strtol_l.isra.0+0xb2>
 8008028:	d101      	bne.n	800802e <_strtol_l.isra.0+0x7e>
 800802a:	45a6      	cmp	lr, r4
 800802c:	db19      	blt.n	8008062 <_strtol_l.isra.0+0xb2>
 800802e:	2701      	movs	r7, #1
 8008030:	fb00 4006 	mla	r0, r0, r6, r4
 8008034:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008038:	e7eb      	b.n	8008012 <_strtol_l.isra.0+0x62>
 800803a:	462f      	mov	r7, r5
 800803c:	e7bf      	b.n	8007fbe <_strtol_l.isra.0+0xe>
 800803e:	2c2b      	cmp	r4, #43	; 0x2b
 8008040:	bf04      	itt	eq
 8008042:	1cbd      	addeq	r5, r7, #2
 8008044:	787c      	ldrbeq	r4, [r7, #1]
 8008046:	461a      	mov	r2, r3
 8008048:	e7c9      	b.n	8007fde <_strtol_l.isra.0+0x2e>
 800804a:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 800804e:	2b19      	cmp	r3, #25
 8008050:	d801      	bhi.n	8008056 <_strtol_l.isra.0+0xa6>
 8008052:	3c37      	subs	r4, #55	; 0x37
 8008054:	e7e2      	b.n	800801c <_strtol_l.isra.0+0x6c>
 8008056:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 800805a:	2b19      	cmp	r3, #25
 800805c:	d804      	bhi.n	8008068 <_strtol_l.isra.0+0xb8>
 800805e:	3c57      	subs	r4, #87	; 0x57
 8008060:	e7dc      	b.n	800801c <_strtol_l.isra.0+0x6c>
 8008062:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8008066:	e7e5      	b.n	8008034 <_strtol_l.isra.0+0x84>
 8008068:	1c7b      	adds	r3, r7, #1
 800806a:	d108      	bne.n	800807e <_strtol_l.isra.0+0xce>
 800806c:	2322      	movs	r3, #34	; 0x22
 800806e:	4608      	mov	r0, r1
 8008070:	f8c8 3000 	str.w	r3, [r8]
 8008074:	f1ba 0f00 	cmp.w	sl, #0
 8008078:	d107      	bne.n	800808a <_strtol_l.isra.0+0xda>
 800807a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800807e:	b102      	cbz	r2, 8008082 <_strtol_l.isra.0+0xd2>
 8008080:	4240      	negs	r0, r0
 8008082:	f1ba 0f00 	cmp.w	sl, #0
 8008086:	d0f8      	beq.n	800807a <_strtol_l.isra.0+0xca>
 8008088:	b10f      	cbz	r7, 800808e <_strtol_l.isra.0+0xde>
 800808a:	f105 39ff 	add.w	r9, r5, #4294967295	; 0xffffffff
 800808e:	f8ca 9000 	str.w	r9, [sl]
 8008092:	e7f2      	b.n	800807a <_strtol_l.isra.0+0xca>
 8008094:	2430      	movs	r4, #48	; 0x30
 8008096:	2e00      	cmp	r6, #0
 8008098:	d1af      	bne.n	8007ffa <_strtol_l.isra.0+0x4a>
 800809a:	2608      	movs	r6, #8
 800809c:	e7ad      	b.n	8007ffa <_strtol_l.isra.0+0x4a>
 800809e:	2c30      	cmp	r4, #48	; 0x30
 80080a0:	d0a3      	beq.n	8007fea <_strtol_l.isra.0+0x3a>
 80080a2:	260a      	movs	r6, #10
 80080a4:	e7a9      	b.n	8007ffa <_strtol_l.isra.0+0x4a>
	...

080080a8 <_strtol_r>:
 80080a8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80080aa:	4c06      	ldr	r4, [pc, #24]	; (80080c4 <_strtol_r+0x1c>)
 80080ac:	4d06      	ldr	r5, [pc, #24]	; (80080c8 <_strtol_r+0x20>)
 80080ae:	6824      	ldr	r4, [r4, #0]
 80080b0:	6a24      	ldr	r4, [r4, #32]
 80080b2:	2c00      	cmp	r4, #0
 80080b4:	bf08      	it	eq
 80080b6:	462c      	moveq	r4, r5
 80080b8:	9400      	str	r4, [sp, #0]
 80080ba:	f7ff ff79 	bl	8007fb0 <_strtol_l.isra.0>
 80080be:	b003      	add	sp, #12
 80080c0:	bd30      	pop	{r4, r5, pc}
 80080c2:	bf00      	nop
 80080c4:	20000024 	.word	0x20000024
 80080c8:	20000088 	.word	0x20000088

080080cc <quorem>:
 80080cc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80080d0:	6903      	ldr	r3, [r0, #16]
 80080d2:	690c      	ldr	r4, [r1, #16]
 80080d4:	4680      	mov	r8, r0
 80080d6:	42a3      	cmp	r3, r4
 80080d8:	f2c0 8084 	blt.w	80081e4 <quorem+0x118>
 80080dc:	3c01      	subs	r4, #1
 80080de:	f101 0714 	add.w	r7, r1, #20
 80080e2:	f100 0614 	add.w	r6, r0, #20
 80080e6:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 80080ea:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 80080ee:	3501      	adds	r5, #1
 80080f0:	fbb0 f5f5 	udiv	r5, r0, r5
 80080f4:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 80080f8:	eb06 030c 	add.w	r3, r6, ip
 80080fc:	eb07 090c 	add.w	r9, r7, ip
 8008100:	9301      	str	r3, [sp, #4]
 8008102:	b39d      	cbz	r5, 800816c <quorem+0xa0>
 8008104:	f04f 0a00 	mov.w	sl, #0
 8008108:	4638      	mov	r0, r7
 800810a:	46b6      	mov	lr, r6
 800810c:	46d3      	mov	fp, sl
 800810e:	f850 2b04 	ldr.w	r2, [r0], #4
 8008112:	b293      	uxth	r3, r2
 8008114:	fb05 a303 	mla	r3, r5, r3, sl
 8008118:	0c12      	lsrs	r2, r2, #16
 800811a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800811e:	fb05 a202 	mla	r2, r5, r2, sl
 8008122:	b29b      	uxth	r3, r3
 8008124:	ebab 0303 	sub.w	r3, fp, r3
 8008128:	f8de b000 	ldr.w	fp, [lr]
 800812c:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8008130:	fa1f fb8b 	uxth.w	fp, fp
 8008134:	445b      	add	r3, fp
 8008136:	fa1f fb82 	uxth.w	fp, r2
 800813a:	f8de 2000 	ldr.w	r2, [lr]
 800813e:	4581      	cmp	r9, r0
 8008140:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8008144:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008148:	b29b      	uxth	r3, r3
 800814a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800814e:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8008152:	f84e 3b04 	str.w	r3, [lr], #4
 8008156:	d2da      	bcs.n	800810e <quorem+0x42>
 8008158:	f856 300c 	ldr.w	r3, [r6, ip]
 800815c:	b933      	cbnz	r3, 800816c <quorem+0xa0>
 800815e:	9b01      	ldr	r3, [sp, #4]
 8008160:	3b04      	subs	r3, #4
 8008162:	429e      	cmp	r6, r3
 8008164:	461a      	mov	r2, r3
 8008166:	d331      	bcc.n	80081cc <quorem+0x100>
 8008168:	f8c8 4010 	str.w	r4, [r8, #16]
 800816c:	4640      	mov	r0, r8
 800816e:	f001 fba5 	bl	80098bc <__mcmp>
 8008172:	2800      	cmp	r0, #0
 8008174:	db26      	blt.n	80081c4 <quorem+0xf8>
 8008176:	4630      	mov	r0, r6
 8008178:	f04f 0c00 	mov.w	ip, #0
 800817c:	3501      	adds	r5, #1
 800817e:	f857 1b04 	ldr.w	r1, [r7], #4
 8008182:	f8d0 e000 	ldr.w	lr, [r0]
 8008186:	b28b      	uxth	r3, r1
 8008188:	ebac 0303 	sub.w	r3, ip, r3
 800818c:	fa1f f28e 	uxth.w	r2, lr
 8008190:	4413      	add	r3, r2
 8008192:	0c0a      	lsrs	r2, r1, #16
 8008194:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8008198:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800819c:	b29b      	uxth	r3, r3
 800819e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80081a2:	45b9      	cmp	r9, r7
 80081a4:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80081a8:	f840 3b04 	str.w	r3, [r0], #4
 80081ac:	d2e7      	bcs.n	800817e <quorem+0xb2>
 80081ae:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 80081b2:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 80081b6:	b92a      	cbnz	r2, 80081c4 <quorem+0xf8>
 80081b8:	3b04      	subs	r3, #4
 80081ba:	429e      	cmp	r6, r3
 80081bc:	461a      	mov	r2, r3
 80081be:	d30b      	bcc.n	80081d8 <quorem+0x10c>
 80081c0:	f8c8 4010 	str.w	r4, [r8, #16]
 80081c4:	4628      	mov	r0, r5
 80081c6:	b003      	add	sp, #12
 80081c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80081cc:	6812      	ldr	r2, [r2, #0]
 80081ce:	3b04      	subs	r3, #4
 80081d0:	2a00      	cmp	r2, #0
 80081d2:	d1c9      	bne.n	8008168 <quorem+0x9c>
 80081d4:	3c01      	subs	r4, #1
 80081d6:	e7c4      	b.n	8008162 <quorem+0x96>
 80081d8:	6812      	ldr	r2, [r2, #0]
 80081da:	3b04      	subs	r3, #4
 80081dc:	2a00      	cmp	r2, #0
 80081de:	d1ef      	bne.n	80081c0 <quorem+0xf4>
 80081e0:	3c01      	subs	r4, #1
 80081e2:	e7ea      	b.n	80081ba <quorem+0xee>
 80081e4:	2000      	movs	r0, #0
 80081e6:	e7ee      	b.n	80081c6 <quorem+0xfa>

080081e8 <_dtoa_r>:
 80081e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80081ec:	4616      	mov	r6, r2
 80081ee:	461f      	mov	r7, r3
 80081f0:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80081f2:	b095      	sub	sp, #84	; 0x54
 80081f4:	4604      	mov	r4, r0
 80081f6:	f8dd 8084 	ldr.w	r8, [sp, #132]	; 0x84
 80081fa:	e9cd 6702 	strd	r6, r7, [sp, #8]
 80081fe:	b93d      	cbnz	r5, 8008210 <_dtoa_r+0x28>
 8008200:	2010      	movs	r0, #16
 8008202:	f001 f8e1 	bl	80093c8 <malloc>
 8008206:	6260      	str	r0, [r4, #36]	; 0x24
 8008208:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800820c:	6005      	str	r5, [r0, #0]
 800820e:	60c5      	str	r5, [r0, #12]
 8008210:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008212:	6819      	ldr	r1, [r3, #0]
 8008214:	b151      	cbz	r1, 800822c <_dtoa_r+0x44>
 8008216:	685a      	ldr	r2, [r3, #4]
 8008218:	2301      	movs	r3, #1
 800821a:	4093      	lsls	r3, r2
 800821c:	604a      	str	r2, [r1, #4]
 800821e:	608b      	str	r3, [r1, #8]
 8008220:	4620      	mov	r0, r4
 8008222:	f001 f92d 	bl	8009480 <_Bfree>
 8008226:	2200      	movs	r2, #0
 8008228:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800822a:	601a      	str	r2, [r3, #0]
 800822c:	1e3b      	subs	r3, r7, #0
 800822e:	bfaf      	iteee	ge
 8008230:	2300      	movge	r3, #0
 8008232:	2201      	movlt	r2, #1
 8008234:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8008238:	9303      	strlt	r3, [sp, #12]
 800823a:	bfac      	ite	ge
 800823c:	f8c8 3000 	strge.w	r3, [r8]
 8008240:	f8c8 2000 	strlt.w	r2, [r8]
 8008244:	4bae      	ldr	r3, [pc, #696]	; (8008500 <_dtoa_r+0x318>)
 8008246:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800824a:	ea33 0308 	bics.w	r3, r3, r8
 800824e:	d11b      	bne.n	8008288 <_dtoa_r+0xa0>
 8008250:	f242 730f 	movw	r3, #9999	; 0x270f
 8008254:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8008256:	6013      	str	r3, [r2, #0]
 8008258:	9b02      	ldr	r3, [sp, #8]
 800825a:	b923      	cbnz	r3, 8008266 <_dtoa_r+0x7e>
 800825c:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8008260:	2800      	cmp	r0, #0
 8008262:	f000 8545 	beq.w	8008cf0 <_dtoa_r+0xb08>
 8008266:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008268:	b953      	cbnz	r3, 8008280 <_dtoa_r+0x98>
 800826a:	4ba6      	ldr	r3, [pc, #664]	; (8008504 <_dtoa_r+0x31c>)
 800826c:	e021      	b.n	80082b2 <_dtoa_r+0xca>
 800826e:	4ba6      	ldr	r3, [pc, #664]	; (8008508 <_dtoa_r+0x320>)
 8008270:	9306      	str	r3, [sp, #24]
 8008272:	3308      	adds	r3, #8
 8008274:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8008276:	6013      	str	r3, [r2, #0]
 8008278:	9806      	ldr	r0, [sp, #24]
 800827a:	b015      	add	sp, #84	; 0x54
 800827c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008280:	4ba0      	ldr	r3, [pc, #640]	; (8008504 <_dtoa_r+0x31c>)
 8008282:	9306      	str	r3, [sp, #24]
 8008284:	3303      	adds	r3, #3
 8008286:	e7f5      	b.n	8008274 <_dtoa_r+0x8c>
 8008288:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800828c:	2200      	movs	r2, #0
 800828e:	2300      	movs	r3, #0
 8008290:	4630      	mov	r0, r6
 8008292:	4639      	mov	r1, r7
 8008294:	f7f8 fb88 	bl	80009a8 <__aeabi_dcmpeq>
 8008298:	4682      	mov	sl, r0
 800829a:	b160      	cbz	r0, 80082b6 <_dtoa_r+0xce>
 800829c:	2301      	movs	r3, #1
 800829e:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80082a0:	6013      	str	r3, [r2, #0]
 80082a2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80082a4:	2b00      	cmp	r3, #0
 80082a6:	f000 8520 	beq.w	8008cea <_dtoa_r+0xb02>
 80082aa:	4b98      	ldr	r3, [pc, #608]	; (800850c <_dtoa_r+0x324>)
 80082ac:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80082ae:	6013      	str	r3, [r2, #0]
 80082b0:	3b01      	subs	r3, #1
 80082b2:	9306      	str	r3, [sp, #24]
 80082b4:	e7e0      	b.n	8008278 <_dtoa_r+0x90>
 80082b6:	ab12      	add	r3, sp, #72	; 0x48
 80082b8:	9301      	str	r3, [sp, #4]
 80082ba:	ab13      	add	r3, sp, #76	; 0x4c
 80082bc:	9300      	str	r3, [sp, #0]
 80082be:	4632      	mov	r2, r6
 80082c0:	463b      	mov	r3, r7
 80082c2:	4620      	mov	r0, r4
 80082c4:	f001 fbe8 	bl	8009a98 <__d2b>
 80082c8:	f3c8 550a 	ubfx	r5, r8, #20, #11
 80082cc:	4683      	mov	fp, r0
 80082ce:	2d00      	cmp	r5, #0
 80082d0:	d07d      	beq.n	80083ce <_dtoa_r+0x1e6>
 80082d2:	46b0      	mov	r8, r6
 80082d4:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80082d8:	f043 597f 	orr.w	r9, r3, #1069547520	; 0x3fc00000
 80082dc:	f449 1940 	orr.w	r9, r9, #3145728	; 0x300000
 80082e0:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80082e4:	f8cd a040 	str.w	sl, [sp, #64]	; 0x40
 80082e8:	2200      	movs	r2, #0
 80082ea:	4b89      	ldr	r3, [pc, #548]	; (8008510 <_dtoa_r+0x328>)
 80082ec:	4640      	mov	r0, r8
 80082ee:	4649      	mov	r1, r9
 80082f0:	f7f7 ff3a 	bl	8000168 <__aeabi_dsub>
 80082f4:	a37c      	add	r3, pc, #496	; (adr r3, 80084e8 <_dtoa_r+0x300>)
 80082f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082fa:	f7f8 f8ed 	bl	80004d8 <__aeabi_dmul>
 80082fe:	a37c      	add	r3, pc, #496	; (adr r3, 80084f0 <_dtoa_r+0x308>)
 8008300:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008304:	f7f7 ff32 	bl	800016c <__adddf3>
 8008308:	4606      	mov	r6, r0
 800830a:	4628      	mov	r0, r5
 800830c:	460f      	mov	r7, r1
 800830e:	f7f8 f879 	bl	8000404 <__aeabi_i2d>
 8008312:	a379      	add	r3, pc, #484	; (adr r3, 80084f8 <_dtoa_r+0x310>)
 8008314:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008318:	f7f8 f8de 	bl	80004d8 <__aeabi_dmul>
 800831c:	4602      	mov	r2, r0
 800831e:	460b      	mov	r3, r1
 8008320:	4630      	mov	r0, r6
 8008322:	4639      	mov	r1, r7
 8008324:	f7f7 ff22 	bl	800016c <__adddf3>
 8008328:	4606      	mov	r6, r0
 800832a:	460f      	mov	r7, r1
 800832c:	f7f8 fb84 	bl	8000a38 <__aeabi_d2iz>
 8008330:	2200      	movs	r2, #0
 8008332:	4682      	mov	sl, r0
 8008334:	2300      	movs	r3, #0
 8008336:	4630      	mov	r0, r6
 8008338:	4639      	mov	r1, r7
 800833a:	f7f8 fb3f 	bl	80009bc <__aeabi_dcmplt>
 800833e:	b148      	cbz	r0, 8008354 <_dtoa_r+0x16c>
 8008340:	4650      	mov	r0, sl
 8008342:	f7f8 f85f 	bl	8000404 <__aeabi_i2d>
 8008346:	4632      	mov	r2, r6
 8008348:	463b      	mov	r3, r7
 800834a:	f7f8 fb2d 	bl	80009a8 <__aeabi_dcmpeq>
 800834e:	b908      	cbnz	r0, 8008354 <_dtoa_r+0x16c>
 8008350:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8008354:	f1ba 0f16 	cmp.w	sl, #22
 8008358:	d85a      	bhi.n	8008410 <_dtoa_r+0x228>
 800835a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800835e:	496d      	ldr	r1, [pc, #436]	; (8008514 <_dtoa_r+0x32c>)
 8008360:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8008364:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008368:	f7f8 fb46 	bl	80009f8 <__aeabi_dcmpgt>
 800836c:	2800      	cmp	r0, #0
 800836e:	d051      	beq.n	8008414 <_dtoa_r+0x22c>
 8008370:	2300      	movs	r3, #0
 8008372:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8008376:	930d      	str	r3, [sp, #52]	; 0x34
 8008378:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800837a:	1b5d      	subs	r5, r3, r5
 800837c:	1e6b      	subs	r3, r5, #1
 800837e:	9307      	str	r3, [sp, #28]
 8008380:	bf43      	ittte	mi
 8008382:	2300      	movmi	r3, #0
 8008384:	f1c5 0901 	rsbmi	r9, r5, #1
 8008388:	9307      	strmi	r3, [sp, #28]
 800838a:	f04f 0900 	movpl.w	r9, #0
 800838e:	f1ba 0f00 	cmp.w	sl, #0
 8008392:	db41      	blt.n	8008418 <_dtoa_r+0x230>
 8008394:	9b07      	ldr	r3, [sp, #28]
 8008396:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
 800839a:	4453      	add	r3, sl
 800839c:	9307      	str	r3, [sp, #28]
 800839e:	2300      	movs	r3, #0
 80083a0:	9308      	str	r3, [sp, #32]
 80083a2:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80083a4:	2b09      	cmp	r3, #9
 80083a6:	f200 808f 	bhi.w	80084c8 <_dtoa_r+0x2e0>
 80083aa:	2b05      	cmp	r3, #5
 80083ac:	bfc4      	itt	gt
 80083ae:	3b04      	subgt	r3, #4
 80083b0:	931e      	strgt	r3, [sp, #120]	; 0x78
 80083b2:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80083b4:	bfc8      	it	gt
 80083b6:	2500      	movgt	r5, #0
 80083b8:	f1a3 0302 	sub.w	r3, r3, #2
 80083bc:	bfd8      	it	le
 80083be:	2501      	movle	r5, #1
 80083c0:	2b03      	cmp	r3, #3
 80083c2:	f200 808d 	bhi.w	80084e0 <_dtoa_r+0x2f8>
 80083c6:	e8df f003 	tbb	[pc, r3]
 80083ca:	7d7b      	.short	0x7d7b
 80083cc:	6f2f      	.short	0x6f2f
 80083ce:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 80083d2:	441d      	add	r5, r3
 80083d4:	f205 4032 	addw	r0, r5, #1074	; 0x432
 80083d8:	2820      	cmp	r0, #32
 80083da:	dd13      	ble.n	8008404 <_dtoa_r+0x21c>
 80083dc:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 80083e0:	9b02      	ldr	r3, [sp, #8]
 80083e2:	fa08 f800 	lsl.w	r8, r8, r0
 80083e6:	f205 4012 	addw	r0, r5, #1042	; 0x412
 80083ea:	fa23 f000 	lsr.w	r0, r3, r0
 80083ee:	ea48 0000 	orr.w	r0, r8, r0
 80083f2:	f7f7 fff7 	bl	80003e4 <__aeabi_ui2d>
 80083f6:	2301      	movs	r3, #1
 80083f8:	4680      	mov	r8, r0
 80083fa:	f1a1 79f8 	sub.w	r9, r1, #32505856	; 0x1f00000
 80083fe:	3d01      	subs	r5, #1
 8008400:	9310      	str	r3, [sp, #64]	; 0x40
 8008402:	e771      	b.n	80082e8 <_dtoa_r+0x100>
 8008404:	9b02      	ldr	r3, [sp, #8]
 8008406:	f1c0 0020 	rsb	r0, r0, #32
 800840a:	fa03 f000 	lsl.w	r0, r3, r0
 800840e:	e7f0      	b.n	80083f2 <_dtoa_r+0x20a>
 8008410:	2301      	movs	r3, #1
 8008412:	e7b0      	b.n	8008376 <_dtoa_r+0x18e>
 8008414:	900d      	str	r0, [sp, #52]	; 0x34
 8008416:	e7af      	b.n	8008378 <_dtoa_r+0x190>
 8008418:	f1ca 0300 	rsb	r3, sl, #0
 800841c:	9308      	str	r3, [sp, #32]
 800841e:	2300      	movs	r3, #0
 8008420:	eba9 090a 	sub.w	r9, r9, sl
 8008424:	930c      	str	r3, [sp, #48]	; 0x30
 8008426:	e7bc      	b.n	80083a2 <_dtoa_r+0x1ba>
 8008428:	2301      	movs	r3, #1
 800842a:	9309      	str	r3, [sp, #36]	; 0x24
 800842c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800842e:	2b00      	cmp	r3, #0
 8008430:	dd74      	ble.n	800851c <_dtoa_r+0x334>
 8008432:	4698      	mov	r8, r3
 8008434:	9304      	str	r3, [sp, #16]
 8008436:	2200      	movs	r2, #0
 8008438:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800843a:	6072      	str	r2, [r6, #4]
 800843c:	2204      	movs	r2, #4
 800843e:	f102 0014 	add.w	r0, r2, #20
 8008442:	4298      	cmp	r0, r3
 8008444:	6871      	ldr	r1, [r6, #4]
 8008446:	d96e      	bls.n	8008526 <_dtoa_r+0x33e>
 8008448:	4620      	mov	r0, r4
 800844a:	f000 ffe5 	bl	8009418 <_Balloc>
 800844e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008450:	6030      	str	r0, [r6, #0]
 8008452:	681b      	ldr	r3, [r3, #0]
 8008454:	f1b8 0f0e 	cmp.w	r8, #14
 8008458:	9306      	str	r3, [sp, #24]
 800845a:	f200 80ed 	bhi.w	8008638 <_dtoa_r+0x450>
 800845e:	2d00      	cmp	r5, #0
 8008460:	f000 80ea 	beq.w	8008638 <_dtoa_r+0x450>
 8008464:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008468:	f1ba 0f00 	cmp.w	sl, #0
 800846c:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8008470:	dd77      	ble.n	8008562 <_dtoa_r+0x37a>
 8008472:	4a28      	ldr	r2, [pc, #160]	; (8008514 <_dtoa_r+0x32c>)
 8008474:	f00a 030f 	and.w	r3, sl, #15
 8008478:	ea4f 162a 	mov.w	r6, sl, asr #4
 800847c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8008480:	06f0      	lsls	r0, r6, #27
 8008482:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008486:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800848a:	d568      	bpl.n	800855e <_dtoa_r+0x376>
 800848c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8008490:	4b21      	ldr	r3, [pc, #132]	; (8008518 <_dtoa_r+0x330>)
 8008492:	2503      	movs	r5, #3
 8008494:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008498:	f7f8 f948 	bl	800072c <__aeabi_ddiv>
 800849c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80084a0:	f006 060f 	and.w	r6, r6, #15
 80084a4:	4f1c      	ldr	r7, [pc, #112]	; (8008518 <_dtoa_r+0x330>)
 80084a6:	e04f      	b.n	8008548 <_dtoa_r+0x360>
 80084a8:	2301      	movs	r3, #1
 80084aa:	9309      	str	r3, [sp, #36]	; 0x24
 80084ac:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80084ae:	4453      	add	r3, sl
 80084b0:	f103 0801 	add.w	r8, r3, #1
 80084b4:	9304      	str	r3, [sp, #16]
 80084b6:	4643      	mov	r3, r8
 80084b8:	2b01      	cmp	r3, #1
 80084ba:	bfb8      	it	lt
 80084bc:	2301      	movlt	r3, #1
 80084be:	e7ba      	b.n	8008436 <_dtoa_r+0x24e>
 80084c0:	2300      	movs	r3, #0
 80084c2:	e7b2      	b.n	800842a <_dtoa_r+0x242>
 80084c4:	2300      	movs	r3, #0
 80084c6:	e7f0      	b.n	80084aa <_dtoa_r+0x2c2>
 80084c8:	2501      	movs	r5, #1
 80084ca:	2300      	movs	r3, #0
 80084cc:	9509      	str	r5, [sp, #36]	; 0x24
 80084ce:	931e      	str	r3, [sp, #120]	; 0x78
 80084d0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80084d4:	2200      	movs	r2, #0
 80084d6:	9304      	str	r3, [sp, #16]
 80084d8:	4698      	mov	r8, r3
 80084da:	2312      	movs	r3, #18
 80084dc:	921f      	str	r2, [sp, #124]	; 0x7c
 80084de:	e7aa      	b.n	8008436 <_dtoa_r+0x24e>
 80084e0:	2301      	movs	r3, #1
 80084e2:	9309      	str	r3, [sp, #36]	; 0x24
 80084e4:	e7f4      	b.n	80084d0 <_dtoa_r+0x2e8>
 80084e6:	bf00      	nop
 80084e8:	636f4361 	.word	0x636f4361
 80084ec:	3fd287a7 	.word	0x3fd287a7
 80084f0:	8b60c8b3 	.word	0x8b60c8b3
 80084f4:	3fc68a28 	.word	0x3fc68a28
 80084f8:	509f79fb 	.word	0x509f79fb
 80084fc:	3fd34413 	.word	0x3fd34413
 8008500:	7ff00000 	.word	0x7ff00000
 8008504:	0800a931 	.word	0x0800a931
 8008508:	0800a928 	.word	0x0800a928
 800850c:	0800a8ad 	.word	0x0800a8ad
 8008510:	3ff80000 	.word	0x3ff80000
 8008514:	0800a968 	.word	0x0800a968
 8008518:	0800a940 	.word	0x0800a940
 800851c:	2301      	movs	r3, #1
 800851e:	9304      	str	r3, [sp, #16]
 8008520:	4698      	mov	r8, r3
 8008522:	461a      	mov	r2, r3
 8008524:	e7da      	b.n	80084dc <_dtoa_r+0x2f4>
 8008526:	3101      	adds	r1, #1
 8008528:	6071      	str	r1, [r6, #4]
 800852a:	0052      	lsls	r2, r2, #1
 800852c:	e787      	b.n	800843e <_dtoa_r+0x256>
 800852e:	07f1      	lsls	r1, r6, #31
 8008530:	d508      	bpl.n	8008544 <_dtoa_r+0x35c>
 8008532:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8008536:	e9d7 2300 	ldrd	r2, r3, [r7]
 800853a:	f7f7 ffcd 	bl	80004d8 <__aeabi_dmul>
 800853e:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8008542:	3501      	adds	r5, #1
 8008544:	1076      	asrs	r6, r6, #1
 8008546:	3708      	adds	r7, #8
 8008548:	2e00      	cmp	r6, #0
 800854a:	d1f0      	bne.n	800852e <_dtoa_r+0x346>
 800854c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8008550:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008554:	f7f8 f8ea 	bl	800072c <__aeabi_ddiv>
 8008558:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800855c:	e01b      	b.n	8008596 <_dtoa_r+0x3ae>
 800855e:	2502      	movs	r5, #2
 8008560:	e7a0      	b.n	80084a4 <_dtoa_r+0x2bc>
 8008562:	f000 80a4 	beq.w	80086ae <_dtoa_r+0x4c6>
 8008566:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800856a:	f1ca 0600 	rsb	r6, sl, #0
 800856e:	4ba0      	ldr	r3, [pc, #640]	; (80087f0 <_dtoa_r+0x608>)
 8008570:	f006 020f 	and.w	r2, r6, #15
 8008574:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008578:	e9d3 2300 	ldrd	r2, r3, [r3]
 800857c:	f7f7 ffac 	bl	80004d8 <__aeabi_dmul>
 8008580:	2502      	movs	r5, #2
 8008582:	2300      	movs	r3, #0
 8008584:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008588:	4f9a      	ldr	r7, [pc, #616]	; (80087f4 <_dtoa_r+0x60c>)
 800858a:	1136      	asrs	r6, r6, #4
 800858c:	2e00      	cmp	r6, #0
 800858e:	f040 8083 	bne.w	8008698 <_dtoa_r+0x4b0>
 8008592:	2b00      	cmp	r3, #0
 8008594:	d1e0      	bne.n	8008558 <_dtoa_r+0x370>
 8008596:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008598:	2b00      	cmp	r3, #0
 800859a:	f000 808a 	beq.w	80086b2 <_dtoa_r+0x4ca>
 800859e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80085a2:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 80085a6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80085aa:	2200      	movs	r2, #0
 80085ac:	4b92      	ldr	r3, [pc, #584]	; (80087f8 <_dtoa_r+0x610>)
 80085ae:	f7f8 fa05 	bl	80009bc <__aeabi_dcmplt>
 80085b2:	2800      	cmp	r0, #0
 80085b4:	d07d      	beq.n	80086b2 <_dtoa_r+0x4ca>
 80085b6:	f1b8 0f00 	cmp.w	r8, #0
 80085ba:	d07a      	beq.n	80086b2 <_dtoa_r+0x4ca>
 80085bc:	9b04      	ldr	r3, [sp, #16]
 80085be:	2b00      	cmp	r3, #0
 80085c0:	dd36      	ble.n	8008630 <_dtoa_r+0x448>
 80085c2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80085c6:	2200      	movs	r2, #0
 80085c8:	4b8c      	ldr	r3, [pc, #560]	; (80087fc <_dtoa_r+0x614>)
 80085ca:	f7f7 ff85 	bl	80004d8 <__aeabi_dmul>
 80085ce:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80085d2:	9e04      	ldr	r6, [sp, #16]
 80085d4:	f10a 37ff 	add.w	r7, sl, #4294967295	; 0xffffffff
 80085d8:	3501      	adds	r5, #1
 80085da:	4628      	mov	r0, r5
 80085dc:	f7f7 ff12 	bl	8000404 <__aeabi_i2d>
 80085e0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80085e4:	f7f7 ff78 	bl	80004d8 <__aeabi_dmul>
 80085e8:	2200      	movs	r2, #0
 80085ea:	4b85      	ldr	r3, [pc, #532]	; (8008800 <_dtoa_r+0x618>)
 80085ec:	f7f7 fdbe 	bl	800016c <__adddf3>
 80085f0:	f1a1 7550 	sub.w	r5, r1, #54525952	; 0x3400000
 80085f4:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80085f8:	950b      	str	r5, [sp, #44]	; 0x2c
 80085fa:	2e00      	cmp	r6, #0
 80085fc:	d15c      	bne.n	80086b8 <_dtoa_r+0x4d0>
 80085fe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008602:	2200      	movs	r2, #0
 8008604:	4b7f      	ldr	r3, [pc, #508]	; (8008804 <_dtoa_r+0x61c>)
 8008606:	f7f7 fdaf 	bl	8000168 <__aeabi_dsub>
 800860a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800860c:	462b      	mov	r3, r5
 800860e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008612:	f7f8 f9f1 	bl	80009f8 <__aeabi_dcmpgt>
 8008616:	2800      	cmp	r0, #0
 8008618:	f040 8281 	bne.w	8008b1e <_dtoa_r+0x936>
 800861c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008620:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008622:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 8008626:	f7f8 f9c9 	bl	80009bc <__aeabi_dcmplt>
 800862a:	2800      	cmp	r0, #0
 800862c:	f040 8275 	bne.w	8008b1a <_dtoa_r+0x932>
 8008630:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8008634:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8008638:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800863a:	2b00      	cmp	r3, #0
 800863c:	f2c0 814b 	blt.w	80088d6 <_dtoa_r+0x6ee>
 8008640:	f1ba 0f0e 	cmp.w	sl, #14
 8008644:	f300 8147 	bgt.w	80088d6 <_dtoa_r+0x6ee>
 8008648:	4b69      	ldr	r3, [pc, #420]	; (80087f0 <_dtoa_r+0x608>)
 800864a:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800864e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008652:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8008656:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8008658:	2b00      	cmp	r3, #0
 800865a:	f280 80d7 	bge.w	800880c <_dtoa_r+0x624>
 800865e:	f1b8 0f00 	cmp.w	r8, #0
 8008662:	f300 80d3 	bgt.w	800880c <_dtoa_r+0x624>
 8008666:	f040 8257 	bne.w	8008b18 <_dtoa_r+0x930>
 800866a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800866e:	2200      	movs	r2, #0
 8008670:	4b64      	ldr	r3, [pc, #400]	; (8008804 <_dtoa_r+0x61c>)
 8008672:	f7f7 ff31 	bl	80004d8 <__aeabi_dmul>
 8008676:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800867a:	f7f8 f9b3 	bl	80009e4 <__aeabi_dcmpge>
 800867e:	4646      	mov	r6, r8
 8008680:	4647      	mov	r7, r8
 8008682:	2800      	cmp	r0, #0
 8008684:	f040 822d 	bne.w	8008ae2 <_dtoa_r+0x8fa>
 8008688:	9b06      	ldr	r3, [sp, #24]
 800868a:	9a06      	ldr	r2, [sp, #24]
 800868c:	1c5d      	adds	r5, r3, #1
 800868e:	2331      	movs	r3, #49	; 0x31
 8008690:	f10a 0a01 	add.w	sl, sl, #1
 8008694:	7013      	strb	r3, [r2, #0]
 8008696:	e228      	b.n	8008aea <_dtoa_r+0x902>
 8008698:	07f2      	lsls	r2, r6, #31
 800869a:	d505      	bpl.n	80086a8 <_dtoa_r+0x4c0>
 800869c:	e9d7 2300 	ldrd	r2, r3, [r7]
 80086a0:	f7f7 ff1a 	bl	80004d8 <__aeabi_dmul>
 80086a4:	2301      	movs	r3, #1
 80086a6:	3501      	adds	r5, #1
 80086a8:	1076      	asrs	r6, r6, #1
 80086aa:	3708      	adds	r7, #8
 80086ac:	e76e      	b.n	800858c <_dtoa_r+0x3a4>
 80086ae:	2502      	movs	r5, #2
 80086b0:	e771      	b.n	8008596 <_dtoa_r+0x3ae>
 80086b2:	4657      	mov	r7, sl
 80086b4:	4646      	mov	r6, r8
 80086b6:	e790      	b.n	80085da <_dtoa_r+0x3f2>
 80086b8:	4b4d      	ldr	r3, [pc, #308]	; (80087f0 <_dtoa_r+0x608>)
 80086ba:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80086be:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 80086c2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80086c4:	2b00      	cmp	r3, #0
 80086c6:	d048      	beq.n	800875a <_dtoa_r+0x572>
 80086c8:	4602      	mov	r2, r0
 80086ca:	460b      	mov	r3, r1
 80086cc:	2000      	movs	r0, #0
 80086ce:	494e      	ldr	r1, [pc, #312]	; (8008808 <_dtoa_r+0x620>)
 80086d0:	f7f8 f82c 	bl	800072c <__aeabi_ddiv>
 80086d4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80086d8:	f7f7 fd46 	bl	8000168 <__aeabi_dsub>
 80086dc:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80086e0:	9d06      	ldr	r5, [sp, #24]
 80086e2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80086e6:	f7f8 f9a7 	bl	8000a38 <__aeabi_d2iz>
 80086ea:	9011      	str	r0, [sp, #68]	; 0x44
 80086ec:	f7f7 fe8a 	bl	8000404 <__aeabi_i2d>
 80086f0:	4602      	mov	r2, r0
 80086f2:	460b      	mov	r3, r1
 80086f4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80086f8:	f7f7 fd36 	bl	8000168 <__aeabi_dsub>
 80086fc:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80086fe:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008702:	3330      	adds	r3, #48	; 0x30
 8008704:	f805 3b01 	strb.w	r3, [r5], #1
 8008708:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800870c:	f7f8 f956 	bl	80009bc <__aeabi_dcmplt>
 8008710:	2800      	cmp	r0, #0
 8008712:	d163      	bne.n	80087dc <_dtoa_r+0x5f4>
 8008714:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008718:	2000      	movs	r0, #0
 800871a:	4937      	ldr	r1, [pc, #220]	; (80087f8 <_dtoa_r+0x610>)
 800871c:	f7f7 fd24 	bl	8000168 <__aeabi_dsub>
 8008720:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8008724:	f7f8 f94a 	bl	80009bc <__aeabi_dcmplt>
 8008728:	2800      	cmp	r0, #0
 800872a:	f040 80b5 	bne.w	8008898 <_dtoa_r+0x6b0>
 800872e:	9b06      	ldr	r3, [sp, #24]
 8008730:	1aeb      	subs	r3, r5, r3
 8008732:	429e      	cmp	r6, r3
 8008734:	f77f af7c 	ble.w	8008630 <_dtoa_r+0x448>
 8008738:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800873c:	2200      	movs	r2, #0
 800873e:	4b2f      	ldr	r3, [pc, #188]	; (80087fc <_dtoa_r+0x614>)
 8008740:	f7f7 feca 	bl	80004d8 <__aeabi_dmul>
 8008744:	2200      	movs	r2, #0
 8008746:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800874a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800874e:	4b2b      	ldr	r3, [pc, #172]	; (80087fc <_dtoa_r+0x614>)
 8008750:	f7f7 fec2 	bl	80004d8 <__aeabi_dmul>
 8008754:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008758:	e7c3      	b.n	80086e2 <_dtoa_r+0x4fa>
 800875a:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800875e:	f7f7 febb 	bl	80004d8 <__aeabi_dmul>
 8008762:	9b06      	ldr	r3, [sp, #24]
 8008764:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8008768:	199d      	adds	r5, r3, r6
 800876a:	461e      	mov	r6, r3
 800876c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008770:	f7f8 f962 	bl	8000a38 <__aeabi_d2iz>
 8008774:	9011      	str	r0, [sp, #68]	; 0x44
 8008776:	f7f7 fe45 	bl	8000404 <__aeabi_i2d>
 800877a:	4602      	mov	r2, r0
 800877c:	460b      	mov	r3, r1
 800877e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008782:	f7f7 fcf1 	bl	8000168 <__aeabi_dsub>
 8008786:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008788:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800878c:	3330      	adds	r3, #48	; 0x30
 800878e:	f806 3b01 	strb.w	r3, [r6], #1
 8008792:	42ae      	cmp	r6, r5
 8008794:	f04f 0200 	mov.w	r2, #0
 8008798:	d124      	bne.n	80087e4 <_dtoa_r+0x5fc>
 800879a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800879e:	4b1a      	ldr	r3, [pc, #104]	; (8008808 <_dtoa_r+0x620>)
 80087a0:	f7f7 fce4 	bl	800016c <__adddf3>
 80087a4:	4602      	mov	r2, r0
 80087a6:	460b      	mov	r3, r1
 80087a8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80087ac:	f7f8 f924 	bl	80009f8 <__aeabi_dcmpgt>
 80087b0:	2800      	cmp	r0, #0
 80087b2:	d171      	bne.n	8008898 <_dtoa_r+0x6b0>
 80087b4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80087b8:	2000      	movs	r0, #0
 80087ba:	4913      	ldr	r1, [pc, #76]	; (8008808 <_dtoa_r+0x620>)
 80087bc:	f7f7 fcd4 	bl	8000168 <__aeabi_dsub>
 80087c0:	4602      	mov	r2, r0
 80087c2:	460b      	mov	r3, r1
 80087c4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80087c8:	f7f8 f8f8 	bl	80009bc <__aeabi_dcmplt>
 80087cc:	2800      	cmp	r0, #0
 80087ce:	f43f af2f 	beq.w	8008630 <_dtoa_r+0x448>
 80087d2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80087d6:	1e6a      	subs	r2, r5, #1
 80087d8:	2b30      	cmp	r3, #48	; 0x30
 80087da:	d001      	beq.n	80087e0 <_dtoa_r+0x5f8>
 80087dc:	46ba      	mov	sl, r7
 80087de:	e04a      	b.n	8008876 <_dtoa_r+0x68e>
 80087e0:	4615      	mov	r5, r2
 80087e2:	e7f6      	b.n	80087d2 <_dtoa_r+0x5ea>
 80087e4:	4b05      	ldr	r3, [pc, #20]	; (80087fc <_dtoa_r+0x614>)
 80087e6:	f7f7 fe77 	bl	80004d8 <__aeabi_dmul>
 80087ea:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80087ee:	e7bd      	b.n	800876c <_dtoa_r+0x584>
 80087f0:	0800a968 	.word	0x0800a968
 80087f4:	0800a940 	.word	0x0800a940
 80087f8:	3ff00000 	.word	0x3ff00000
 80087fc:	40240000 	.word	0x40240000
 8008800:	401c0000 	.word	0x401c0000
 8008804:	40140000 	.word	0x40140000
 8008808:	3fe00000 	.word	0x3fe00000
 800880c:	9d06      	ldr	r5, [sp, #24]
 800880e:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8008812:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008816:	4630      	mov	r0, r6
 8008818:	4639      	mov	r1, r7
 800881a:	f7f7 ff87 	bl	800072c <__aeabi_ddiv>
 800881e:	f7f8 f90b 	bl	8000a38 <__aeabi_d2iz>
 8008822:	4681      	mov	r9, r0
 8008824:	f7f7 fdee 	bl	8000404 <__aeabi_i2d>
 8008828:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800882c:	f7f7 fe54 	bl	80004d8 <__aeabi_dmul>
 8008830:	4602      	mov	r2, r0
 8008832:	460b      	mov	r3, r1
 8008834:	4630      	mov	r0, r6
 8008836:	4639      	mov	r1, r7
 8008838:	f7f7 fc96 	bl	8000168 <__aeabi_dsub>
 800883c:	f109 0630 	add.w	r6, r9, #48	; 0x30
 8008840:	f805 6b01 	strb.w	r6, [r5], #1
 8008844:	9e06      	ldr	r6, [sp, #24]
 8008846:	4602      	mov	r2, r0
 8008848:	1bae      	subs	r6, r5, r6
 800884a:	45b0      	cmp	r8, r6
 800884c:	460b      	mov	r3, r1
 800884e:	d135      	bne.n	80088bc <_dtoa_r+0x6d4>
 8008850:	f7f7 fc8c 	bl	800016c <__adddf3>
 8008854:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008858:	4606      	mov	r6, r0
 800885a:	460f      	mov	r7, r1
 800885c:	f7f8 f8cc 	bl	80009f8 <__aeabi_dcmpgt>
 8008860:	b9c8      	cbnz	r0, 8008896 <_dtoa_r+0x6ae>
 8008862:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008866:	4630      	mov	r0, r6
 8008868:	4639      	mov	r1, r7
 800886a:	f7f8 f89d 	bl	80009a8 <__aeabi_dcmpeq>
 800886e:	b110      	cbz	r0, 8008876 <_dtoa_r+0x68e>
 8008870:	f019 0f01 	tst.w	r9, #1
 8008874:	d10f      	bne.n	8008896 <_dtoa_r+0x6ae>
 8008876:	4659      	mov	r1, fp
 8008878:	4620      	mov	r0, r4
 800887a:	f000 fe01 	bl	8009480 <_Bfree>
 800887e:	2300      	movs	r3, #0
 8008880:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8008882:	702b      	strb	r3, [r5, #0]
 8008884:	f10a 0301 	add.w	r3, sl, #1
 8008888:	6013      	str	r3, [r2, #0]
 800888a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800888c:	2b00      	cmp	r3, #0
 800888e:	f43f acf3 	beq.w	8008278 <_dtoa_r+0x90>
 8008892:	601d      	str	r5, [r3, #0]
 8008894:	e4f0      	b.n	8008278 <_dtoa_r+0x90>
 8008896:	4657      	mov	r7, sl
 8008898:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800889c:	1e6b      	subs	r3, r5, #1
 800889e:	2a39      	cmp	r2, #57	; 0x39
 80088a0:	d106      	bne.n	80088b0 <_dtoa_r+0x6c8>
 80088a2:	9a06      	ldr	r2, [sp, #24]
 80088a4:	429a      	cmp	r2, r3
 80088a6:	d107      	bne.n	80088b8 <_dtoa_r+0x6d0>
 80088a8:	2330      	movs	r3, #48	; 0x30
 80088aa:	7013      	strb	r3, [r2, #0]
 80088ac:	4613      	mov	r3, r2
 80088ae:	3701      	adds	r7, #1
 80088b0:	781a      	ldrb	r2, [r3, #0]
 80088b2:	3201      	adds	r2, #1
 80088b4:	701a      	strb	r2, [r3, #0]
 80088b6:	e791      	b.n	80087dc <_dtoa_r+0x5f4>
 80088b8:	461d      	mov	r5, r3
 80088ba:	e7ed      	b.n	8008898 <_dtoa_r+0x6b0>
 80088bc:	2200      	movs	r2, #0
 80088be:	4b99      	ldr	r3, [pc, #612]	; (8008b24 <_dtoa_r+0x93c>)
 80088c0:	f7f7 fe0a 	bl	80004d8 <__aeabi_dmul>
 80088c4:	2200      	movs	r2, #0
 80088c6:	2300      	movs	r3, #0
 80088c8:	4606      	mov	r6, r0
 80088ca:	460f      	mov	r7, r1
 80088cc:	f7f8 f86c 	bl	80009a8 <__aeabi_dcmpeq>
 80088d0:	2800      	cmp	r0, #0
 80088d2:	d09e      	beq.n	8008812 <_dtoa_r+0x62a>
 80088d4:	e7cf      	b.n	8008876 <_dtoa_r+0x68e>
 80088d6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80088d8:	2a00      	cmp	r2, #0
 80088da:	f000 8088 	beq.w	80089ee <_dtoa_r+0x806>
 80088de:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80088e0:	2a01      	cmp	r2, #1
 80088e2:	dc6d      	bgt.n	80089c0 <_dtoa_r+0x7d8>
 80088e4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80088e6:	2a00      	cmp	r2, #0
 80088e8:	d066      	beq.n	80089b8 <_dtoa_r+0x7d0>
 80088ea:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80088ee:	464d      	mov	r5, r9
 80088f0:	9e08      	ldr	r6, [sp, #32]
 80088f2:	9a07      	ldr	r2, [sp, #28]
 80088f4:	2101      	movs	r1, #1
 80088f6:	441a      	add	r2, r3
 80088f8:	4620      	mov	r0, r4
 80088fa:	4499      	add	r9, r3
 80088fc:	9207      	str	r2, [sp, #28]
 80088fe:	f000 fe9d 	bl	800963c <__i2b>
 8008902:	4607      	mov	r7, r0
 8008904:	2d00      	cmp	r5, #0
 8008906:	dd0b      	ble.n	8008920 <_dtoa_r+0x738>
 8008908:	9b07      	ldr	r3, [sp, #28]
 800890a:	2b00      	cmp	r3, #0
 800890c:	dd08      	ble.n	8008920 <_dtoa_r+0x738>
 800890e:	42ab      	cmp	r3, r5
 8008910:	bfa8      	it	ge
 8008912:	462b      	movge	r3, r5
 8008914:	9a07      	ldr	r2, [sp, #28]
 8008916:	eba9 0903 	sub.w	r9, r9, r3
 800891a:	1aed      	subs	r5, r5, r3
 800891c:	1ad3      	subs	r3, r2, r3
 800891e:	9307      	str	r3, [sp, #28]
 8008920:	9b08      	ldr	r3, [sp, #32]
 8008922:	b1eb      	cbz	r3, 8008960 <_dtoa_r+0x778>
 8008924:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008926:	2b00      	cmp	r3, #0
 8008928:	d065      	beq.n	80089f6 <_dtoa_r+0x80e>
 800892a:	b18e      	cbz	r6, 8008950 <_dtoa_r+0x768>
 800892c:	4639      	mov	r1, r7
 800892e:	4632      	mov	r2, r6
 8008930:	4620      	mov	r0, r4
 8008932:	f000 ff21 	bl	8009778 <__pow5mult>
 8008936:	465a      	mov	r2, fp
 8008938:	4601      	mov	r1, r0
 800893a:	4607      	mov	r7, r0
 800893c:	4620      	mov	r0, r4
 800893e:	f000 fe86 	bl	800964e <__multiply>
 8008942:	4659      	mov	r1, fp
 8008944:	900a      	str	r0, [sp, #40]	; 0x28
 8008946:	4620      	mov	r0, r4
 8008948:	f000 fd9a 	bl	8009480 <_Bfree>
 800894c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800894e:	469b      	mov	fp, r3
 8008950:	9b08      	ldr	r3, [sp, #32]
 8008952:	1b9a      	subs	r2, r3, r6
 8008954:	d004      	beq.n	8008960 <_dtoa_r+0x778>
 8008956:	4659      	mov	r1, fp
 8008958:	4620      	mov	r0, r4
 800895a:	f000 ff0d 	bl	8009778 <__pow5mult>
 800895e:	4683      	mov	fp, r0
 8008960:	2101      	movs	r1, #1
 8008962:	4620      	mov	r0, r4
 8008964:	f000 fe6a 	bl	800963c <__i2b>
 8008968:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800896a:	4606      	mov	r6, r0
 800896c:	2b00      	cmp	r3, #0
 800896e:	f000 81c6 	beq.w	8008cfe <_dtoa_r+0xb16>
 8008972:	461a      	mov	r2, r3
 8008974:	4601      	mov	r1, r0
 8008976:	4620      	mov	r0, r4
 8008978:	f000 fefe 	bl	8009778 <__pow5mult>
 800897c:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800897e:	4606      	mov	r6, r0
 8008980:	2b01      	cmp	r3, #1
 8008982:	dc3e      	bgt.n	8008a02 <_dtoa_r+0x81a>
 8008984:	9b02      	ldr	r3, [sp, #8]
 8008986:	2b00      	cmp	r3, #0
 8008988:	d137      	bne.n	80089fa <_dtoa_r+0x812>
 800898a:	9b03      	ldr	r3, [sp, #12]
 800898c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008990:	2b00      	cmp	r3, #0
 8008992:	d134      	bne.n	80089fe <_dtoa_r+0x816>
 8008994:	9b03      	ldr	r3, [sp, #12]
 8008996:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800899a:	0d1b      	lsrs	r3, r3, #20
 800899c:	051b      	lsls	r3, r3, #20
 800899e:	b12b      	cbz	r3, 80089ac <_dtoa_r+0x7c4>
 80089a0:	9b07      	ldr	r3, [sp, #28]
 80089a2:	f109 0901 	add.w	r9, r9, #1
 80089a6:	3301      	adds	r3, #1
 80089a8:	9307      	str	r3, [sp, #28]
 80089aa:	2301      	movs	r3, #1
 80089ac:	9308      	str	r3, [sp, #32]
 80089ae:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80089b0:	2b00      	cmp	r3, #0
 80089b2:	d128      	bne.n	8008a06 <_dtoa_r+0x81e>
 80089b4:	2001      	movs	r0, #1
 80089b6:	e02e      	b.n	8008a16 <_dtoa_r+0x82e>
 80089b8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80089ba:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80089be:	e796      	b.n	80088ee <_dtoa_r+0x706>
 80089c0:	9b08      	ldr	r3, [sp, #32]
 80089c2:	f108 36ff 	add.w	r6, r8, #4294967295	; 0xffffffff
 80089c6:	42b3      	cmp	r3, r6
 80089c8:	bfb7      	itett	lt
 80089ca:	9b08      	ldrlt	r3, [sp, #32]
 80089cc:	1b9e      	subge	r6, r3, r6
 80089ce:	1af2      	sublt	r2, r6, r3
 80089d0:	9b0c      	ldrlt	r3, [sp, #48]	; 0x30
 80089d2:	bfbf      	itttt	lt
 80089d4:	9608      	strlt	r6, [sp, #32]
 80089d6:	189b      	addlt	r3, r3, r2
 80089d8:	930c      	strlt	r3, [sp, #48]	; 0x30
 80089da:	2600      	movlt	r6, #0
 80089dc:	f1b8 0f00 	cmp.w	r8, #0
 80089e0:	bfb9      	ittee	lt
 80089e2:	eba9 0508 	sublt.w	r5, r9, r8
 80089e6:	2300      	movlt	r3, #0
 80089e8:	464d      	movge	r5, r9
 80089ea:	4643      	movge	r3, r8
 80089ec:	e781      	b.n	80088f2 <_dtoa_r+0x70a>
 80089ee:	9e08      	ldr	r6, [sp, #32]
 80089f0:	464d      	mov	r5, r9
 80089f2:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80089f4:	e786      	b.n	8008904 <_dtoa_r+0x71c>
 80089f6:	9a08      	ldr	r2, [sp, #32]
 80089f8:	e7ad      	b.n	8008956 <_dtoa_r+0x76e>
 80089fa:	2300      	movs	r3, #0
 80089fc:	e7d6      	b.n	80089ac <_dtoa_r+0x7c4>
 80089fe:	9b02      	ldr	r3, [sp, #8]
 8008a00:	e7d4      	b.n	80089ac <_dtoa_r+0x7c4>
 8008a02:	2300      	movs	r3, #0
 8008a04:	9308      	str	r3, [sp, #32]
 8008a06:	6933      	ldr	r3, [r6, #16]
 8008a08:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8008a0c:	6918      	ldr	r0, [r3, #16]
 8008a0e:	f000 fdc7 	bl	80095a0 <__hi0bits>
 8008a12:	f1c0 0020 	rsb	r0, r0, #32
 8008a16:	9b07      	ldr	r3, [sp, #28]
 8008a18:	4418      	add	r0, r3
 8008a1a:	f010 001f 	ands.w	r0, r0, #31
 8008a1e:	d047      	beq.n	8008ab0 <_dtoa_r+0x8c8>
 8008a20:	f1c0 0320 	rsb	r3, r0, #32
 8008a24:	2b04      	cmp	r3, #4
 8008a26:	dd3b      	ble.n	8008aa0 <_dtoa_r+0x8b8>
 8008a28:	9b07      	ldr	r3, [sp, #28]
 8008a2a:	f1c0 001c 	rsb	r0, r0, #28
 8008a2e:	4481      	add	r9, r0
 8008a30:	4405      	add	r5, r0
 8008a32:	4403      	add	r3, r0
 8008a34:	9307      	str	r3, [sp, #28]
 8008a36:	f1b9 0f00 	cmp.w	r9, #0
 8008a3a:	dd05      	ble.n	8008a48 <_dtoa_r+0x860>
 8008a3c:	4659      	mov	r1, fp
 8008a3e:	464a      	mov	r2, r9
 8008a40:	4620      	mov	r0, r4
 8008a42:	f000 fee7 	bl	8009814 <__lshift>
 8008a46:	4683      	mov	fp, r0
 8008a48:	9b07      	ldr	r3, [sp, #28]
 8008a4a:	2b00      	cmp	r3, #0
 8008a4c:	dd05      	ble.n	8008a5a <_dtoa_r+0x872>
 8008a4e:	4631      	mov	r1, r6
 8008a50:	461a      	mov	r2, r3
 8008a52:	4620      	mov	r0, r4
 8008a54:	f000 fede 	bl	8009814 <__lshift>
 8008a58:	4606      	mov	r6, r0
 8008a5a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008a5c:	b353      	cbz	r3, 8008ab4 <_dtoa_r+0x8cc>
 8008a5e:	4631      	mov	r1, r6
 8008a60:	4658      	mov	r0, fp
 8008a62:	f000 ff2b 	bl	80098bc <__mcmp>
 8008a66:	2800      	cmp	r0, #0
 8008a68:	da24      	bge.n	8008ab4 <_dtoa_r+0x8cc>
 8008a6a:	2300      	movs	r3, #0
 8008a6c:	4659      	mov	r1, fp
 8008a6e:	220a      	movs	r2, #10
 8008a70:	4620      	mov	r0, r4
 8008a72:	f000 fd1c 	bl	80094ae <__multadd>
 8008a76:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008a78:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8008a7c:	4683      	mov	fp, r0
 8008a7e:	2b00      	cmp	r3, #0
 8008a80:	f000 8144 	beq.w	8008d0c <_dtoa_r+0xb24>
 8008a84:	2300      	movs	r3, #0
 8008a86:	4639      	mov	r1, r7
 8008a88:	220a      	movs	r2, #10
 8008a8a:	4620      	mov	r0, r4
 8008a8c:	f000 fd0f 	bl	80094ae <__multadd>
 8008a90:	9b04      	ldr	r3, [sp, #16]
 8008a92:	4607      	mov	r7, r0
 8008a94:	2b00      	cmp	r3, #0
 8008a96:	dc4d      	bgt.n	8008b34 <_dtoa_r+0x94c>
 8008a98:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8008a9a:	2b02      	cmp	r3, #2
 8008a9c:	dd4a      	ble.n	8008b34 <_dtoa_r+0x94c>
 8008a9e:	e011      	b.n	8008ac4 <_dtoa_r+0x8dc>
 8008aa0:	d0c9      	beq.n	8008a36 <_dtoa_r+0x84e>
 8008aa2:	9a07      	ldr	r2, [sp, #28]
 8008aa4:	331c      	adds	r3, #28
 8008aa6:	441a      	add	r2, r3
 8008aa8:	4499      	add	r9, r3
 8008aaa:	441d      	add	r5, r3
 8008aac:	4613      	mov	r3, r2
 8008aae:	e7c1      	b.n	8008a34 <_dtoa_r+0x84c>
 8008ab0:	4603      	mov	r3, r0
 8008ab2:	e7f6      	b.n	8008aa2 <_dtoa_r+0x8ba>
 8008ab4:	f1b8 0f00 	cmp.w	r8, #0
 8008ab8:	dc36      	bgt.n	8008b28 <_dtoa_r+0x940>
 8008aba:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8008abc:	2b02      	cmp	r3, #2
 8008abe:	dd33      	ble.n	8008b28 <_dtoa_r+0x940>
 8008ac0:	f8cd 8010 	str.w	r8, [sp, #16]
 8008ac4:	9b04      	ldr	r3, [sp, #16]
 8008ac6:	b963      	cbnz	r3, 8008ae2 <_dtoa_r+0x8fa>
 8008ac8:	4631      	mov	r1, r6
 8008aca:	2205      	movs	r2, #5
 8008acc:	4620      	mov	r0, r4
 8008ace:	f000 fcee 	bl	80094ae <__multadd>
 8008ad2:	4601      	mov	r1, r0
 8008ad4:	4606      	mov	r6, r0
 8008ad6:	4658      	mov	r0, fp
 8008ad8:	f000 fef0 	bl	80098bc <__mcmp>
 8008adc:	2800      	cmp	r0, #0
 8008ade:	f73f add3 	bgt.w	8008688 <_dtoa_r+0x4a0>
 8008ae2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8008ae4:	9d06      	ldr	r5, [sp, #24]
 8008ae6:	ea6f 0a03 	mvn.w	sl, r3
 8008aea:	f04f 0900 	mov.w	r9, #0
 8008aee:	4631      	mov	r1, r6
 8008af0:	4620      	mov	r0, r4
 8008af2:	f000 fcc5 	bl	8009480 <_Bfree>
 8008af6:	2f00      	cmp	r7, #0
 8008af8:	f43f aebd 	beq.w	8008876 <_dtoa_r+0x68e>
 8008afc:	f1b9 0f00 	cmp.w	r9, #0
 8008b00:	d005      	beq.n	8008b0e <_dtoa_r+0x926>
 8008b02:	45b9      	cmp	r9, r7
 8008b04:	d003      	beq.n	8008b0e <_dtoa_r+0x926>
 8008b06:	4649      	mov	r1, r9
 8008b08:	4620      	mov	r0, r4
 8008b0a:	f000 fcb9 	bl	8009480 <_Bfree>
 8008b0e:	4639      	mov	r1, r7
 8008b10:	4620      	mov	r0, r4
 8008b12:	f000 fcb5 	bl	8009480 <_Bfree>
 8008b16:	e6ae      	b.n	8008876 <_dtoa_r+0x68e>
 8008b18:	2600      	movs	r6, #0
 8008b1a:	4637      	mov	r7, r6
 8008b1c:	e7e1      	b.n	8008ae2 <_dtoa_r+0x8fa>
 8008b1e:	46ba      	mov	sl, r7
 8008b20:	4637      	mov	r7, r6
 8008b22:	e5b1      	b.n	8008688 <_dtoa_r+0x4a0>
 8008b24:	40240000 	.word	0x40240000
 8008b28:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008b2a:	f8cd 8010 	str.w	r8, [sp, #16]
 8008b2e:	2b00      	cmp	r3, #0
 8008b30:	f000 80f3 	beq.w	8008d1a <_dtoa_r+0xb32>
 8008b34:	2d00      	cmp	r5, #0
 8008b36:	dd05      	ble.n	8008b44 <_dtoa_r+0x95c>
 8008b38:	4639      	mov	r1, r7
 8008b3a:	462a      	mov	r2, r5
 8008b3c:	4620      	mov	r0, r4
 8008b3e:	f000 fe69 	bl	8009814 <__lshift>
 8008b42:	4607      	mov	r7, r0
 8008b44:	9b08      	ldr	r3, [sp, #32]
 8008b46:	2b00      	cmp	r3, #0
 8008b48:	d04c      	beq.n	8008be4 <_dtoa_r+0x9fc>
 8008b4a:	6879      	ldr	r1, [r7, #4]
 8008b4c:	4620      	mov	r0, r4
 8008b4e:	f000 fc63 	bl	8009418 <_Balloc>
 8008b52:	4605      	mov	r5, r0
 8008b54:	693a      	ldr	r2, [r7, #16]
 8008b56:	f107 010c 	add.w	r1, r7, #12
 8008b5a:	3202      	adds	r2, #2
 8008b5c:	0092      	lsls	r2, r2, #2
 8008b5e:	300c      	adds	r0, #12
 8008b60:	f7fd fd3e 	bl	80065e0 <memcpy>
 8008b64:	2201      	movs	r2, #1
 8008b66:	4629      	mov	r1, r5
 8008b68:	4620      	mov	r0, r4
 8008b6a:	f000 fe53 	bl	8009814 <__lshift>
 8008b6e:	46b9      	mov	r9, r7
 8008b70:	4607      	mov	r7, r0
 8008b72:	9b06      	ldr	r3, [sp, #24]
 8008b74:	9307      	str	r3, [sp, #28]
 8008b76:	9b02      	ldr	r3, [sp, #8]
 8008b78:	f003 0301 	and.w	r3, r3, #1
 8008b7c:	9308      	str	r3, [sp, #32]
 8008b7e:	4631      	mov	r1, r6
 8008b80:	4658      	mov	r0, fp
 8008b82:	f7ff faa3 	bl	80080cc <quorem>
 8008b86:	4649      	mov	r1, r9
 8008b88:	4605      	mov	r5, r0
 8008b8a:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8008b8e:	4658      	mov	r0, fp
 8008b90:	f000 fe94 	bl	80098bc <__mcmp>
 8008b94:	463a      	mov	r2, r7
 8008b96:	9002      	str	r0, [sp, #8]
 8008b98:	4631      	mov	r1, r6
 8008b9a:	4620      	mov	r0, r4
 8008b9c:	f000 fea8 	bl	80098f0 <__mdiff>
 8008ba0:	68c3      	ldr	r3, [r0, #12]
 8008ba2:	4602      	mov	r2, r0
 8008ba4:	bb03      	cbnz	r3, 8008be8 <_dtoa_r+0xa00>
 8008ba6:	4601      	mov	r1, r0
 8008ba8:	9009      	str	r0, [sp, #36]	; 0x24
 8008baa:	4658      	mov	r0, fp
 8008bac:	f000 fe86 	bl	80098bc <__mcmp>
 8008bb0:	4603      	mov	r3, r0
 8008bb2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008bb4:	4611      	mov	r1, r2
 8008bb6:	4620      	mov	r0, r4
 8008bb8:	9309      	str	r3, [sp, #36]	; 0x24
 8008bba:	f000 fc61 	bl	8009480 <_Bfree>
 8008bbe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008bc0:	b9a3      	cbnz	r3, 8008bec <_dtoa_r+0xa04>
 8008bc2:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8008bc4:	b992      	cbnz	r2, 8008bec <_dtoa_r+0xa04>
 8008bc6:	9a08      	ldr	r2, [sp, #32]
 8008bc8:	b982      	cbnz	r2, 8008bec <_dtoa_r+0xa04>
 8008bca:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8008bce:	d029      	beq.n	8008c24 <_dtoa_r+0xa3c>
 8008bd0:	9b02      	ldr	r3, [sp, #8]
 8008bd2:	2b00      	cmp	r3, #0
 8008bd4:	dd01      	ble.n	8008bda <_dtoa_r+0x9f2>
 8008bd6:	f105 0831 	add.w	r8, r5, #49	; 0x31
 8008bda:	9b07      	ldr	r3, [sp, #28]
 8008bdc:	1c5d      	adds	r5, r3, #1
 8008bde:	f883 8000 	strb.w	r8, [r3]
 8008be2:	e784      	b.n	8008aee <_dtoa_r+0x906>
 8008be4:	4638      	mov	r0, r7
 8008be6:	e7c2      	b.n	8008b6e <_dtoa_r+0x986>
 8008be8:	2301      	movs	r3, #1
 8008bea:	e7e3      	b.n	8008bb4 <_dtoa_r+0x9cc>
 8008bec:	9a02      	ldr	r2, [sp, #8]
 8008bee:	2a00      	cmp	r2, #0
 8008bf0:	db04      	blt.n	8008bfc <_dtoa_r+0xa14>
 8008bf2:	d123      	bne.n	8008c3c <_dtoa_r+0xa54>
 8008bf4:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8008bf6:	bb0a      	cbnz	r2, 8008c3c <_dtoa_r+0xa54>
 8008bf8:	9a08      	ldr	r2, [sp, #32]
 8008bfa:	b9fa      	cbnz	r2, 8008c3c <_dtoa_r+0xa54>
 8008bfc:	2b00      	cmp	r3, #0
 8008bfe:	ddec      	ble.n	8008bda <_dtoa_r+0x9f2>
 8008c00:	4659      	mov	r1, fp
 8008c02:	2201      	movs	r2, #1
 8008c04:	4620      	mov	r0, r4
 8008c06:	f000 fe05 	bl	8009814 <__lshift>
 8008c0a:	4631      	mov	r1, r6
 8008c0c:	4683      	mov	fp, r0
 8008c0e:	f000 fe55 	bl	80098bc <__mcmp>
 8008c12:	2800      	cmp	r0, #0
 8008c14:	dc03      	bgt.n	8008c1e <_dtoa_r+0xa36>
 8008c16:	d1e0      	bne.n	8008bda <_dtoa_r+0x9f2>
 8008c18:	f018 0f01 	tst.w	r8, #1
 8008c1c:	d0dd      	beq.n	8008bda <_dtoa_r+0x9f2>
 8008c1e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8008c22:	d1d8      	bne.n	8008bd6 <_dtoa_r+0x9ee>
 8008c24:	9b07      	ldr	r3, [sp, #28]
 8008c26:	9a07      	ldr	r2, [sp, #28]
 8008c28:	1c5d      	adds	r5, r3, #1
 8008c2a:	2339      	movs	r3, #57	; 0x39
 8008c2c:	7013      	strb	r3, [r2, #0]
 8008c2e:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8008c32:	1e6a      	subs	r2, r5, #1
 8008c34:	2b39      	cmp	r3, #57	; 0x39
 8008c36:	d04d      	beq.n	8008cd4 <_dtoa_r+0xaec>
 8008c38:	3301      	adds	r3, #1
 8008c3a:	e052      	b.n	8008ce2 <_dtoa_r+0xafa>
 8008c3c:	9a07      	ldr	r2, [sp, #28]
 8008c3e:	2b00      	cmp	r3, #0
 8008c40:	f102 0501 	add.w	r5, r2, #1
 8008c44:	dd06      	ble.n	8008c54 <_dtoa_r+0xa6c>
 8008c46:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8008c4a:	d0eb      	beq.n	8008c24 <_dtoa_r+0xa3c>
 8008c4c:	f108 0801 	add.w	r8, r8, #1
 8008c50:	9b07      	ldr	r3, [sp, #28]
 8008c52:	e7c4      	b.n	8008bde <_dtoa_r+0x9f6>
 8008c54:	9b06      	ldr	r3, [sp, #24]
 8008c56:	9a04      	ldr	r2, [sp, #16]
 8008c58:	1aeb      	subs	r3, r5, r3
 8008c5a:	4293      	cmp	r3, r2
 8008c5c:	f805 8c01 	strb.w	r8, [r5, #-1]
 8008c60:	d021      	beq.n	8008ca6 <_dtoa_r+0xabe>
 8008c62:	4659      	mov	r1, fp
 8008c64:	2300      	movs	r3, #0
 8008c66:	220a      	movs	r2, #10
 8008c68:	4620      	mov	r0, r4
 8008c6a:	f000 fc20 	bl	80094ae <__multadd>
 8008c6e:	45b9      	cmp	r9, r7
 8008c70:	4683      	mov	fp, r0
 8008c72:	f04f 0300 	mov.w	r3, #0
 8008c76:	f04f 020a 	mov.w	r2, #10
 8008c7a:	4649      	mov	r1, r9
 8008c7c:	4620      	mov	r0, r4
 8008c7e:	d105      	bne.n	8008c8c <_dtoa_r+0xaa4>
 8008c80:	f000 fc15 	bl	80094ae <__multadd>
 8008c84:	4681      	mov	r9, r0
 8008c86:	4607      	mov	r7, r0
 8008c88:	9507      	str	r5, [sp, #28]
 8008c8a:	e778      	b.n	8008b7e <_dtoa_r+0x996>
 8008c8c:	f000 fc0f 	bl	80094ae <__multadd>
 8008c90:	4639      	mov	r1, r7
 8008c92:	4681      	mov	r9, r0
 8008c94:	2300      	movs	r3, #0
 8008c96:	220a      	movs	r2, #10
 8008c98:	4620      	mov	r0, r4
 8008c9a:	f000 fc08 	bl	80094ae <__multadd>
 8008c9e:	4607      	mov	r7, r0
 8008ca0:	e7f2      	b.n	8008c88 <_dtoa_r+0xaa0>
 8008ca2:	f04f 0900 	mov.w	r9, #0
 8008ca6:	4659      	mov	r1, fp
 8008ca8:	2201      	movs	r2, #1
 8008caa:	4620      	mov	r0, r4
 8008cac:	f000 fdb2 	bl	8009814 <__lshift>
 8008cb0:	4631      	mov	r1, r6
 8008cb2:	4683      	mov	fp, r0
 8008cb4:	f000 fe02 	bl	80098bc <__mcmp>
 8008cb8:	2800      	cmp	r0, #0
 8008cba:	dcb8      	bgt.n	8008c2e <_dtoa_r+0xa46>
 8008cbc:	d102      	bne.n	8008cc4 <_dtoa_r+0xadc>
 8008cbe:	f018 0f01 	tst.w	r8, #1
 8008cc2:	d1b4      	bne.n	8008c2e <_dtoa_r+0xa46>
 8008cc4:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8008cc8:	1e6a      	subs	r2, r5, #1
 8008cca:	2b30      	cmp	r3, #48	; 0x30
 8008ccc:	f47f af0f 	bne.w	8008aee <_dtoa_r+0x906>
 8008cd0:	4615      	mov	r5, r2
 8008cd2:	e7f7      	b.n	8008cc4 <_dtoa_r+0xadc>
 8008cd4:	9b06      	ldr	r3, [sp, #24]
 8008cd6:	4293      	cmp	r3, r2
 8008cd8:	d105      	bne.n	8008ce6 <_dtoa_r+0xafe>
 8008cda:	2331      	movs	r3, #49	; 0x31
 8008cdc:	9a06      	ldr	r2, [sp, #24]
 8008cde:	f10a 0a01 	add.w	sl, sl, #1
 8008ce2:	7013      	strb	r3, [r2, #0]
 8008ce4:	e703      	b.n	8008aee <_dtoa_r+0x906>
 8008ce6:	4615      	mov	r5, r2
 8008ce8:	e7a1      	b.n	8008c2e <_dtoa_r+0xa46>
 8008cea:	4b17      	ldr	r3, [pc, #92]	; (8008d48 <_dtoa_r+0xb60>)
 8008cec:	f7ff bae1 	b.w	80082b2 <_dtoa_r+0xca>
 8008cf0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008cf2:	2b00      	cmp	r3, #0
 8008cf4:	f47f aabb 	bne.w	800826e <_dtoa_r+0x86>
 8008cf8:	4b14      	ldr	r3, [pc, #80]	; (8008d4c <_dtoa_r+0xb64>)
 8008cfa:	f7ff bada 	b.w	80082b2 <_dtoa_r+0xca>
 8008cfe:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8008d00:	2b01      	cmp	r3, #1
 8008d02:	f77f ae3f 	ble.w	8008984 <_dtoa_r+0x79c>
 8008d06:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008d08:	9308      	str	r3, [sp, #32]
 8008d0a:	e653      	b.n	80089b4 <_dtoa_r+0x7cc>
 8008d0c:	9b04      	ldr	r3, [sp, #16]
 8008d0e:	2b00      	cmp	r3, #0
 8008d10:	dc03      	bgt.n	8008d1a <_dtoa_r+0xb32>
 8008d12:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8008d14:	2b02      	cmp	r3, #2
 8008d16:	f73f aed5 	bgt.w	8008ac4 <_dtoa_r+0x8dc>
 8008d1a:	9d06      	ldr	r5, [sp, #24]
 8008d1c:	4631      	mov	r1, r6
 8008d1e:	4658      	mov	r0, fp
 8008d20:	f7ff f9d4 	bl	80080cc <quorem>
 8008d24:	9b06      	ldr	r3, [sp, #24]
 8008d26:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8008d2a:	f805 8b01 	strb.w	r8, [r5], #1
 8008d2e:	9a04      	ldr	r2, [sp, #16]
 8008d30:	1aeb      	subs	r3, r5, r3
 8008d32:	429a      	cmp	r2, r3
 8008d34:	ddb5      	ble.n	8008ca2 <_dtoa_r+0xaba>
 8008d36:	4659      	mov	r1, fp
 8008d38:	2300      	movs	r3, #0
 8008d3a:	220a      	movs	r2, #10
 8008d3c:	4620      	mov	r0, r4
 8008d3e:	f000 fbb6 	bl	80094ae <__multadd>
 8008d42:	4683      	mov	fp, r0
 8008d44:	e7ea      	b.n	8008d1c <_dtoa_r+0xb34>
 8008d46:	bf00      	nop
 8008d48:	0800a8ac 	.word	0x0800a8ac
 8008d4c:	0800a928 	.word	0x0800a928

08008d50 <rshift>:
 8008d50:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008d52:	6906      	ldr	r6, [r0, #16]
 8008d54:	114b      	asrs	r3, r1, #5
 8008d56:	429e      	cmp	r6, r3
 8008d58:	f100 0414 	add.w	r4, r0, #20
 8008d5c:	dd31      	ble.n	8008dc2 <rshift+0x72>
 8008d5e:	f011 011f 	ands.w	r1, r1, #31
 8008d62:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 8008d66:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 8008d6a:	d108      	bne.n	8008d7e <rshift+0x2e>
 8008d6c:	4621      	mov	r1, r4
 8008d6e:	42b2      	cmp	r2, r6
 8008d70:	460b      	mov	r3, r1
 8008d72:	d211      	bcs.n	8008d98 <rshift+0x48>
 8008d74:	f852 3b04 	ldr.w	r3, [r2], #4
 8008d78:	f841 3b04 	str.w	r3, [r1], #4
 8008d7c:	e7f7      	b.n	8008d6e <rshift+0x1e>
 8008d7e:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 8008d82:	4623      	mov	r3, r4
 8008d84:	f1c1 0c20 	rsb	ip, r1, #32
 8008d88:	40cd      	lsrs	r5, r1
 8008d8a:	3204      	adds	r2, #4
 8008d8c:	42b2      	cmp	r2, r6
 8008d8e:	4617      	mov	r7, r2
 8008d90:	d30d      	bcc.n	8008dae <rshift+0x5e>
 8008d92:	601d      	str	r5, [r3, #0]
 8008d94:	b105      	cbz	r5, 8008d98 <rshift+0x48>
 8008d96:	3304      	adds	r3, #4
 8008d98:	42a3      	cmp	r3, r4
 8008d9a:	eba3 0204 	sub.w	r2, r3, r4
 8008d9e:	bf08      	it	eq
 8008da0:	2300      	moveq	r3, #0
 8008da2:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8008da6:	6102      	str	r2, [r0, #16]
 8008da8:	bf08      	it	eq
 8008daa:	6143      	streq	r3, [r0, #20]
 8008dac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008dae:	683f      	ldr	r7, [r7, #0]
 8008db0:	fa07 f70c 	lsl.w	r7, r7, ip
 8008db4:	433d      	orrs	r5, r7
 8008db6:	f843 5b04 	str.w	r5, [r3], #4
 8008dba:	f852 5b04 	ldr.w	r5, [r2], #4
 8008dbe:	40cd      	lsrs	r5, r1
 8008dc0:	e7e4      	b.n	8008d8c <rshift+0x3c>
 8008dc2:	4623      	mov	r3, r4
 8008dc4:	e7e8      	b.n	8008d98 <rshift+0x48>

08008dc6 <__hexdig_fun>:
 8008dc6:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8008dca:	2b09      	cmp	r3, #9
 8008dcc:	d802      	bhi.n	8008dd4 <__hexdig_fun+0xe>
 8008dce:	3820      	subs	r0, #32
 8008dd0:	b2c0      	uxtb	r0, r0
 8008dd2:	4770      	bx	lr
 8008dd4:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8008dd8:	2b05      	cmp	r3, #5
 8008dda:	d801      	bhi.n	8008de0 <__hexdig_fun+0x1a>
 8008ddc:	3847      	subs	r0, #71	; 0x47
 8008dde:	e7f7      	b.n	8008dd0 <__hexdig_fun+0xa>
 8008de0:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8008de4:	2b05      	cmp	r3, #5
 8008de6:	d801      	bhi.n	8008dec <__hexdig_fun+0x26>
 8008de8:	3827      	subs	r0, #39	; 0x27
 8008dea:	e7f1      	b.n	8008dd0 <__hexdig_fun+0xa>
 8008dec:	2000      	movs	r0, #0
 8008dee:	4770      	bx	lr

08008df0 <__gethex>:
 8008df0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008df4:	b08b      	sub	sp, #44	; 0x2c
 8008df6:	9002      	str	r0, [sp, #8]
 8008df8:	9816      	ldr	r0, [sp, #88]	; 0x58
 8008dfa:	468a      	mov	sl, r1
 8008dfc:	4690      	mov	r8, r2
 8008dfe:	9306      	str	r3, [sp, #24]
 8008e00:	f000 fad1 	bl	80093a6 <__localeconv_l>
 8008e04:	6803      	ldr	r3, [r0, #0]
 8008e06:	f04f 0b00 	mov.w	fp, #0
 8008e0a:	4618      	mov	r0, r3
 8008e0c:	9303      	str	r3, [sp, #12]
 8008e0e:	f7f7 f99f 	bl	8000150 <strlen>
 8008e12:	9b03      	ldr	r3, [sp, #12]
 8008e14:	9001      	str	r0, [sp, #4]
 8008e16:	4403      	add	r3, r0
 8008e18:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8008e1c:	9307      	str	r3, [sp, #28]
 8008e1e:	f8da 3000 	ldr.w	r3, [sl]
 8008e22:	3302      	adds	r3, #2
 8008e24:	461f      	mov	r7, r3
 8008e26:	f813 0b01 	ldrb.w	r0, [r3], #1
 8008e2a:	2830      	cmp	r0, #48	; 0x30
 8008e2c:	d06c      	beq.n	8008f08 <__gethex+0x118>
 8008e2e:	f7ff ffca 	bl	8008dc6 <__hexdig_fun>
 8008e32:	4604      	mov	r4, r0
 8008e34:	2800      	cmp	r0, #0
 8008e36:	d16a      	bne.n	8008f0e <__gethex+0x11e>
 8008e38:	9a01      	ldr	r2, [sp, #4]
 8008e3a:	9903      	ldr	r1, [sp, #12]
 8008e3c:	4638      	mov	r0, r7
 8008e3e:	f001 f8f9 	bl	800a034 <strncmp>
 8008e42:	2800      	cmp	r0, #0
 8008e44:	d166      	bne.n	8008f14 <__gethex+0x124>
 8008e46:	9b01      	ldr	r3, [sp, #4]
 8008e48:	5cf8      	ldrb	r0, [r7, r3]
 8008e4a:	18fe      	adds	r6, r7, r3
 8008e4c:	f7ff ffbb 	bl	8008dc6 <__hexdig_fun>
 8008e50:	2800      	cmp	r0, #0
 8008e52:	d062      	beq.n	8008f1a <__gethex+0x12a>
 8008e54:	4633      	mov	r3, r6
 8008e56:	7818      	ldrb	r0, [r3, #0]
 8008e58:	461f      	mov	r7, r3
 8008e5a:	2830      	cmp	r0, #48	; 0x30
 8008e5c:	f103 0301 	add.w	r3, r3, #1
 8008e60:	d0f9      	beq.n	8008e56 <__gethex+0x66>
 8008e62:	f7ff ffb0 	bl	8008dc6 <__hexdig_fun>
 8008e66:	fab0 f580 	clz	r5, r0
 8008e6a:	4634      	mov	r4, r6
 8008e6c:	f04f 0b01 	mov.w	fp, #1
 8008e70:	096d      	lsrs	r5, r5, #5
 8008e72:	463a      	mov	r2, r7
 8008e74:	4616      	mov	r6, r2
 8008e76:	7830      	ldrb	r0, [r6, #0]
 8008e78:	3201      	adds	r2, #1
 8008e7a:	f7ff ffa4 	bl	8008dc6 <__hexdig_fun>
 8008e7e:	2800      	cmp	r0, #0
 8008e80:	d1f8      	bne.n	8008e74 <__gethex+0x84>
 8008e82:	9a01      	ldr	r2, [sp, #4]
 8008e84:	9903      	ldr	r1, [sp, #12]
 8008e86:	4630      	mov	r0, r6
 8008e88:	f001 f8d4 	bl	800a034 <strncmp>
 8008e8c:	b950      	cbnz	r0, 8008ea4 <__gethex+0xb4>
 8008e8e:	b954      	cbnz	r4, 8008ea6 <__gethex+0xb6>
 8008e90:	9b01      	ldr	r3, [sp, #4]
 8008e92:	18f4      	adds	r4, r6, r3
 8008e94:	4622      	mov	r2, r4
 8008e96:	4616      	mov	r6, r2
 8008e98:	7830      	ldrb	r0, [r6, #0]
 8008e9a:	3201      	adds	r2, #1
 8008e9c:	f7ff ff93 	bl	8008dc6 <__hexdig_fun>
 8008ea0:	2800      	cmp	r0, #0
 8008ea2:	d1f8      	bne.n	8008e96 <__gethex+0xa6>
 8008ea4:	b10c      	cbz	r4, 8008eaa <__gethex+0xba>
 8008ea6:	1ba4      	subs	r4, r4, r6
 8008ea8:	00a4      	lsls	r4, r4, #2
 8008eaa:	7833      	ldrb	r3, [r6, #0]
 8008eac:	2b50      	cmp	r3, #80	; 0x50
 8008eae:	d001      	beq.n	8008eb4 <__gethex+0xc4>
 8008eb0:	2b70      	cmp	r3, #112	; 0x70
 8008eb2:	d140      	bne.n	8008f36 <__gethex+0x146>
 8008eb4:	7873      	ldrb	r3, [r6, #1]
 8008eb6:	2b2b      	cmp	r3, #43	; 0x2b
 8008eb8:	d031      	beq.n	8008f1e <__gethex+0x12e>
 8008eba:	2b2d      	cmp	r3, #45	; 0x2d
 8008ebc:	d033      	beq.n	8008f26 <__gethex+0x136>
 8008ebe:	f04f 0900 	mov.w	r9, #0
 8008ec2:	1c71      	adds	r1, r6, #1
 8008ec4:	7808      	ldrb	r0, [r1, #0]
 8008ec6:	f7ff ff7e 	bl	8008dc6 <__hexdig_fun>
 8008eca:	1e43      	subs	r3, r0, #1
 8008ecc:	b2db      	uxtb	r3, r3
 8008ece:	2b18      	cmp	r3, #24
 8008ed0:	d831      	bhi.n	8008f36 <__gethex+0x146>
 8008ed2:	f1a0 0210 	sub.w	r2, r0, #16
 8008ed6:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8008eda:	f7ff ff74 	bl	8008dc6 <__hexdig_fun>
 8008ede:	1e43      	subs	r3, r0, #1
 8008ee0:	b2db      	uxtb	r3, r3
 8008ee2:	2b18      	cmp	r3, #24
 8008ee4:	d922      	bls.n	8008f2c <__gethex+0x13c>
 8008ee6:	f1b9 0f00 	cmp.w	r9, #0
 8008eea:	d000      	beq.n	8008eee <__gethex+0xfe>
 8008eec:	4252      	negs	r2, r2
 8008eee:	4414      	add	r4, r2
 8008ef0:	f8ca 1000 	str.w	r1, [sl]
 8008ef4:	b30d      	cbz	r5, 8008f3a <__gethex+0x14a>
 8008ef6:	f1bb 0f00 	cmp.w	fp, #0
 8008efa:	bf0c      	ite	eq
 8008efc:	2706      	moveq	r7, #6
 8008efe:	2700      	movne	r7, #0
 8008f00:	4638      	mov	r0, r7
 8008f02:	b00b      	add	sp, #44	; 0x2c
 8008f04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008f08:	f10b 0b01 	add.w	fp, fp, #1
 8008f0c:	e78a      	b.n	8008e24 <__gethex+0x34>
 8008f0e:	2500      	movs	r5, #0
 8008f10:	462c      	mov	r4, r5
 8008f12:	e7ae      	b.n	8008e72 <__gethex+0x82>
 8008f14:	463e      	mov	r6, r7
 8008f16:	2501      	movs	r5, #1
 8008f18:	e7c7      	b.n	8008eaa <__gethex+0xba>
 8008f1a:	4604      	mov	r4, r0
 8008f1c:	e7fb      	b.n	8008f16 <__gethex+0x126>
 8008f1e:	f04f 0900 	mov.w	r9, #0
 8008f22:	1cb1      	adds	r1, r6, #2
 8008f24:	e7ce      	b.n	8008ec4 <__gethex+0xd4>
 8008f26:	f04f 0901 	mov.w	r9, #1
 8008f2a:	e7fa      	b.n	8008f22 <__gethex+0x132>
 8008f2c:	230a      	movs	r3, #10
 8008f2e:	fb03 0202 	mla	r2, r3, r2, r0
 8008f32:	3a10      	subs	r2, #16
 8008f34:	e7cf      	b.n	8008ed6 <__gethex+0xe6>
 8008f36:	4631      	mov	r1, r6
 8008f38:	e7da      	b.n	8008ef0 <__gethex+0x100>
 8008f3a:	4629      	mov	r1, r5
 8008f3c:	1bf3      	subs	r3, r6, r7
 8008f3e:	3b01      	subs	r3, #1
 8008f40:	2b07      	cmp	r3, #7
 8008f42:	dc49      	bgt.n	8008fd8 <__gethex+0x1e8>
 8008f44:	9802      	ldr	r0, [sp, #8]
 8008f46:	f000 fa67 	bl	8009418 <_Balloc>
 8008f4a:	f04f 0b00 	mov.w	fp, #0
 8008f4e:	4605      	mov	r5, r0
 8008f50:	46da      	mov	sl, fp
 8008f52:	9b01      	ldr	r3, [sp, #4]
 8008f54:	f100 0914 	add.w	r9, r0, #20
 8008f58:	f1c3 0301 	rsb	r3, r3, #1
 8008f5c:	f8cd 9010 	str.w	r9, [sp, #16]
 8008f60:	9308      	str	r3, [sp, #32]
 8008f62:	42b7      	cmp	r7, r6
 8008f64:	d33b      	bcc.n	8008fde <__gethex+0x1ee>
 8008f66:	9804      	ldr	r0, [sp, #16]
 8008f68:	f840 ab04 	str.w	sl, [r0], #4
 8008f6c:	eba0 0009 	sub.w	r0, r0, r9
 8008f70:	1080      	asrs	r0, r0, #2
 8008f72:	6128      	str	r0, [r5, #16]
 8008f74:	0147      	lsls	r7, r0, #5
 8008f76:	4650      	mov	r0, sl
 8008f78:	f000 fb12 	bl	80095a0 <__hi0bits>
 8008f7c:	f8d8 6000 	ldr.w	r6, [r8]
 8008f80:	1a3f      	subs	r7, r7, r0
 8008f82:	42b7      	cmp	r7, r6
 8008f84:	dd64      	ble.n	8009050 <__gethex+0x260>
 8008f86:	1bbf      	subs	r7, r7, r6
 8008f88:	4639      	mov	r1, r7
 8008f8a:	4628      	mov	r0, r5
 8008f8c:	f000 fe1b 	bl	8009bc6 <__any_on>
 8008f90:	4682      	mov	sl, r0
 8008f92:	b178      	cbz	r0, 8008fb4 <__gethex+0x1c4>
 8008f94:	f04f 0a01 	mov.w	sl, #1
 8008f98:	1e7b      	subs	r3, r7, #1
 8008f9a:	1159      	asrs	r1, r3, #5
 8008f9c:	f003 021f 	and.w	r2, r3, #31
 8008fa0:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8008fa4:	fa0a f202 	lsl.w	r2, sl, r2
 8008fa8:	420a      	tst	r2, r1
 8008faa:	d003      	beq.n	8008fb4 <__gethex+0x1c4>
 8008fac:	4553      	cmp	r3, sl
 8008fae:	dc46      	bgt.n	800903e <__gethex+0x24e>
 8008fb0:	f04f 0a02 	mov.w	sl, #2
 8008fb4:	4639      	mov	r1, r7
 8008fb6:	4628      	mov	r0, r5
 8008fb8:	f7ff feca 	bl	8008d50 <rshift>
 8008fbc:	443c      	add	r4, r7
 8008fbe:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8008fc2:	42a3      	cmp	r3, r4
 8008fc4:	da52      	bge.n	800906c <__gethex+0x27c>
 8008fc6:	4629      	mov	r1, r5
 8008fc8:	9802      	ldr	r0, [sp, #8]
 8008fca:	f000 fa59 	bl	8009480 <_Bfree>
 8008fce:	2300      	movs	r3, #0
 8008fd0:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8008fd2:	27a3      	movs	r7, #163	; 0xa3
 8008fd4:	6013      	str	r3, [r2, #0]
 8008fd6:	e793      	b.n	8008f00 <__gethex+0x110>
 8008fd8:	3101      	adds	r1, #1
 8008fda:	105b      	asrs	r3, r3, #1
 8008fdc:	e7b0      	b.n	8008f40 <__gethex+0x150>
 8008fde:	1e73      	subs	r3, r6, #1
 8008fe0:	9305      	str	r3, [sp, #20]
 8008fe2:	9a07      	ldr	r2, [sp, #28]
 8008fe4:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8008fe8:	4293      	cmp	r3, r2
 8008fea:	d018      	beq.n	800901e <__gethex+0x22e>
 8008fec:	f1bb 0f20 	cmp.w	fp, #32
 8008ff0:	d107      	bne.n	8009002 <__gethex+0x212>
 8008ff2:	9b04      	ldr	r3, [sp, #16]
 8008ff4:	f8c3 a000 	str.w	sl, [r3]
 8008ff8:	f04f 0a00 	mov.w	sl, #0
 8008ffc:	46d3      	mov	fp, sl
 8008ffe:	3304      	adds	r3, #4
 8009000:	9304      	str	r3, [sp, #16]
 8009002:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8009006:	f7ff fede 	bl	8008dc6 <__hexdig_fun>
 800900a:	f000 000f 	and.w	r0, r0, #15
 800900e:	fa00 f00b 	lsl.w	r0, r0, fp
 8009012:	ea4a 0a00 	orr.w	sl, sl, r0
 8009016:	f10b 0b04 	add.w	fp, fp, #4
 800901a:	9b05      	ldr	r3, [sp, #20]
 800901c:	e00d      	b.n	800903a <__gethex+0x24a>
 800901e:	9b05      	ldr	r3, [sp, #20]
 8009020:	9a08      	ldr	r2, [sp, #32]
 8009022:	4413      	add	r3, r2
 8009024:	42bb      	cmp	r3, r7
 8009026:	d3e1      	bcc.n	8008fec <__gethex+0x1fc>
 8009028:	4618      	mov	r0, r3
 800902a:	9a01      	ldr	r2, [sp, #4]
 800902c:	9903      	ldr	r1, [sp, #12]
 800902e:	9309      	str	r3, [sp, #36]	; 0x24
 8009030:	f001 f800 	bl	800a034 <strncmp>
 8009034:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009036:	2800      	cmp	r0, #0
 8009038:	d1d8      	bne.n	8008fec <__gethex+0x1fc>
 800903a:	461e      	mov	r6, r3
 800903c:	e791      	b.n	8008f62 <__gethex+0x172>
 800903e:	1eb9      	subs	r1, r7, #2
 8009040:	4628      	mov	r0, r5
 8009042:	f000 fdc0 	bl	8009bc6 <__any_on>
 8009046:	2800      	cmp	r0, #0
 8009048:	d0b2      	beq.n	8008fb0 <__gethex+0x1c0>
 800904a:	f04f 0a03 	mov.w	sl, #3
 800904e:	e7b1      	b.n	8008fb4 <__gethex+0x1c4>
 8009050:	da09      	bge.n	8009066 <__gethex+0x276>
 8009052:	1bf7      	subs	r7, r6, r7
 8009054:	4629      	mov	r1, r5
 8009056:	463a      	mov	r2, r7
 8009058:	9802      	ldr	r0, [sp, #8]
 800905a:	f000 fbdb 	bl	8009814 <__lshift>
 800905e:	4605      	mov	r5, r0
 8009060:	1be4      	subs	r4, r4, r7
 8009062:	f100 0914 	add.w	r9, r0, #20
 8009066:	f04f 0a00 	mov.w	sl, #0
 800906a:	e7a8      	b.n	8008fbe <__gethex+0x1ce>
 800906c:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8009070:	42a0      	cmp	r0, r4
 8009072:	dd6b      	ble.n	800914c <__gethex+0x35c>
 8009074:	1b04      	subs	r4, r0, r4
 8009076:	42a6      	cmp	r6, r4
 8009078:	dc2e      	bgt.n	80090d8 <__gethex+0x2e8>
 800907a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800907e:	2b02      	cmp	r3, #2
 8009080:	d022      	beq.n	80090c8 <__gethex+0x2d8>
 8009082:	2b03      	cmp	r3, #3
 8009084:	d024      	beq.n	80090d0 <__gethex+0x2e0>
 8009086:	2b01      	cmp	r3, #1
 8009088:	d115      	bne.n	80090b6 <__gethex+0x2c6>
 800908a:	42a6      	cmp	r6, r4
 800908c:	d113      	bne.n	80090b6 <__gethex+0x2c6>
 800908e:	2e01      	cmp	r6, #1
 8009090:	dc0b      	bgt.n	80090aa <__gethex+0x2ba>
 8009092:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8009096:	9a06      	ldr	r2, [sp, #24]
 8009098:	2762      	movs	r7, #98	; 0x62
 800909a:	6013      	str	r3, [r2, #0]
 800909c:	2301      	movs	r3, #1
 800909e:	612b      	str	r3, [r5, #16]
 80090a0:	f8c9 3000 	str.w	r3, [r9]
 80090a4:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80090a6:	601d      	str	r5, [r3, #0]
 80090a8:	e72a      	b.n	8008f00 <__gethex+0x110>
 80090aa:	1e71      	subs	r1, r6, #1
 80090ac:	4628      	mov	r0, r5
 80090ae:	f000 fd8a 	bl	8009bc6 <__any_on>
 80090b2:	2800      	cmp	r0, #0
 80090b4:	d1ed      	bne.n	8009092 <__gethex+0x2a2>
 80090b6:	4629      	mov	r1, r5
 80090b8:	9802      	ldr	r0, [sp, #8]
 80090ba:	f000 f9e1 	bl	8009480 <_Bfree>
 80090be:	2300      	movs	r3, #0
 80090c0:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80090c2:	2750      	movs	r7, #80	; 0x50
 80090c4:	6013      	str	r3, [r2, #0]
 80090c6:	e71b      	b.n	8008f00 <__gethex+0x110>
 80090c8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80090ca:	2b00      	cmp	r3, #0
 80090cc:	d0e1      	beq.n	8009092 <__gethex+0x2a2>
 80090ce:	e7f2      	b.n	80090b6 <__gethex+0x2c6>
 80090d0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80090d2:	2b00      	cmp	r3, #0
 80090d4:	d1dd      	bne.n	8009092 <__gethex+0x2a2>
 80090d6:	e7ee      	b.n	80090b6 <__gethex+0x2c6>
 80090d8:	1e67      	subs	r7, r4, #1
 80090da:	f1ba 0f00 	cmp.w	sl, #0
 80090de:	d132      	bne.n	8009146 <__gethex+0x356>
 80090e0:	b127      	cbz	r7, 80090ec <__gethex+0x2fc>
 80090e2:	4639      	mov	r1, r7
 80090e4:	4628      	mov	r0, r5
 80090e6:	f000 fd6e 	bl	8009bc6 <__any_on>
 80090ea:	4682      	mov	sl, r0
 80090ec:	2301      	movs	r3, #1
 80090ee:	117a      	asrs	r2, r7, #5
 80090f0:	f007 071f 	and.w	r7, r7, #31
 80090f4:	fa03 f707 	lsl.w	r7, r3, r7
 80090f8:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 80090fc:	4621      	mov	r1, r4
 80090fe:	421f      	tst	r7, r3
 8009100:	f04f 0702 	mov.w	r7, #2
 8009104:	4628      	mov	r0, r5
 8009106:	bf18      	it	ne
 8009108:	f04a 0a02 	orrne.w	sl, sl, #2
 800910c:	1b36      	subs	r6, r6, r4
 800910e:	f7ff fe1f 	bl	8008d50 <rshift>
 8009112:	f8d8 4004 	ldr.w	r4, [r8, #4]
 8009116:	f1ba 0f00 	cmp.w	sl, #0
 800911a:	d048      	beq.n	80091ae <__gethex+0x3be>
 800911c:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8009120:	2b02      	cmp	r3, #2
 8009122:	d015      	beq.n	8009150 <__gethex+0x360>
 8009124:	2b03      	cmp	r3, #3
 8009126:	d017      	beq.n	8009158 <__gethex+0x368>
 8009128:	2b01      	cmp	r3, #1
 800912a:	d109      	bne.n	8009140 <__gethex+0x350>
 800912c:	f01a 0f02 	tst.w	sl, #2
 8009130:	d006      	beq.n	8009140 <__gethex+0x350>
 8009132:	f8d9 3000 	ldr.w	r3, [r9]
 8009136:	ea4a 0a03 	orr.w	sl, sl, r3
 800913a:	f01a 0f01 	tst.w	sl, #1
 800913e:	d10e      	bne.n	800915e <__gethex+0x36e>
 8009140:	f047 0710 	orr.w	r7, r7, #16
 8009144:	e033      	b.n	80091ae <__gethex+0x3be>
 8009146:	f04f 0a01 	mov.w	sl, #1
 800914a:	e7cf      	b.n	80090ec <__gethex+0x2fc>
 800914c:	2701      	movs	r7, #1
 800914e:	e7e2      	b.n	8009116 <__gethex+0x326>
 8009150:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009152:	f1c3 0301 	rsb	r3, r3, #1
 8009156:	9315      	str	r3, [sp, #84]	; 0x54
 8009158:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800915a:	2b00      	cmp	r3, #0
 800915c:	d0f0      	beq.n	8009140 <__gethex+0x350>
 800915e:	f04f 0c00 	mov.w	ip, #0
 8009162:	f8d5 9010 	ldr.w	r9, [r5, #16]
 8009166:	f105 0314 	add.w	r3, r5, #20
 800916a:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 800916e:	eb03 010a 	add.w	r1, r3, sl
 8009172:	4618      	mov	r0, r3
 8009174:	f853 2b04 	ldr.w	r2, [r3], #4
 8009178:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
 800917c:	d01c      	beq.n	80091b8 <__gethex+0x3c8>
 800917e:	3201      	adds	r2, #1
 8009180:	6002      	str	r2, [r0, #0]
 8009182:	2f02      	cmp	r7, #2
 8009184:	f105 0314 	add.w	r3, r5, #20
 8009188:	d138      	bne.n	80091fc <__gethex+0x40c>
 800918a:	f8d8 2000 	ldr.w	r2, [r8]
 800918e:	3a01      	subs	r2, #1
 8009190:	42b2      	cmp	r2, r6
 8009192:	d10a      	bne.n	80091aa <__gethex+0x3ba>
 8009194:	2201      	movs	r2, #1
 8009196:	1171      	asrs	r1, r6, #5
 8009198:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800919c:	f006 061f 	and.w	r6, r6, #31
 80091a0:	fa02 f606 	lsl.w	r6, r2, r6
 80091a4:	421e      	tst	r6, r3
 80091a6:	bf18      	it	ne
 80091a8:	4617      	movne	r7, r2
 80091aa:	f047 0720 	orr.w	r7, r7, #32
 80091ae:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80091b0:	601d      	str	r5, [r3, #0]
 80091b2:	9b06      	ldr	r3, [sp, #24]
 80091b4:	601c      	str	r4, [r3, #0]
 80091b6:	e6a3      	b.n	8008f00 <__gethex+0x110>
 80091b8:	4299      	cmp	r1, r3
 80091ba:	f843 cc04 	str.w	ip, [r3, #-4]
 80091be:	d8d8      	bhi.n	8009172 <__gethex+0x382>
 80091c0:	68ab      	ldr	r3, [r5, #8]
 80091c2:	4599      	cmp	r9, r3
 80091c4:	db12      	blt.n	80091ec <__gethex+0x3fc>
 80091c6:	6869      	ldr	r1, [r5, #4]
 80091c8:	9802      	ldr	r0, [sp, #8]
 80091ca:	3101      	adds	r1, #1
 80091cc:	f000 f924 	bl	8009418 <_Balloc>
 80091d0:	4683      	mov	fp, r0
 80091d2:	692a      	ldr	r2, [r5, #16]
 80091d4:	f105 010c 	add.w	r1, r5, #12
 80091d8:	3202      	adds	r2, #2
 80091da:	0092      	lsls	r2, r2, #2
 80091dc:	300c      	adds	r0, #12
 80091de:	f7fd f9ff 	bl	80065e0 <memcpy>
 80091e2:	4629      	mov	r1, r5
 80091e4:	9802      	ldr	r0, [sp, #8]
 80091e6:	f000 f94b 	bl	8009480 <_Bfree>
 80091ea:	465d      	mov	r5, fp
 80091ec:	692b      	ldr	r3, [r5, #16]
 80091ee:	1c5a      	adds	r2, r3, #1
 80091f0:	612a      	str	r2, [r5, #16]
 80091f2:	2201      	movs	r2, #1
 80091f4:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 80091f8:	615a      	str	r2, [r3, #20]
 80091fa:	e7c2      	b.n	8009182 <__gethex+0x392>
 80091fc:	692a      	ldr	r2, [r5, #16]
 80091fe:	454a      	cmp	r2, r9
 8009200:	dd0b      	ble.n	800921a <__gethex+0x42a>
 8009202:	2101      	movs	r1, #1
 8009204:	4628      	mov	r0, r5
 8009206:	f7ff fda3 	bl	8008d50 <rshift>
 800920a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800920e:	3401      	adds	r4, #1
 8009210:	42a3      	cmp	r3, r4
 8009212:	f6ff aed8 	blt.w	8008fc6 <__gethex+0x1d6>
 8009216:	2701      	movs	r7, #1
 8009218:	e7c7      	b.n	80091aa <__gethex+0x3ba>
 800921a:	f016 061f 	ands.w	r6, r6, #31
 800921e:	d0fa      	beq.n	8009216 <__gethex+0x426>
 8009220:	449a      	add	sl, r3
 8009222:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 8009226:	f000 f9bb 	bl	80095a0 <__hi0bits>
 800922a:	f1c6 0620 	rsb	r6, r6, #32
 800922e:	42b0      	cmp	r0, r6
 8009230:	dbe7      	blt.n	8009202 <__gethex+0x412>
 8009232:	e7f0      	b.n	8009216 <__gethex+0x426>

08009234 <L_shift>:
 8009234:	f1c2 0208 	rsb	r2, r2, #8
 8009238:	0092      	lsls	r2, r2, #2
 800923a:	b570      	push	{r4, r5, r6, lr}
 800923c:	f1c2 0620 	rsb	r6, r2, #32
 8009240:	6843      	ldr	r3, [r0, #4]
 8009242:	6804      	ldr	r4, [r0, #0]
 8009244:	fa03 f506 	lsl.w	r5, r3, r6
 8009248:	432c      	orrs	r4, r5
 800924a:	40d3      	lsrs	r3, r2
 800924c:	6004      	str	r4, [r0, #0]
 800924e:	f840 3f04 	str.w	r3, [r0, #4]!
 8009252:	4288      	cmp	r0, r1
 8009254:	d3f4      	bcc.n	8009240 <L_shift+0xc>
 8009256:	bd70      	pop	{r4, r5, r6, pc}

08009258 <__match>:
 8009258:	b530      	push	{r4, r5, lr}
 800925a:	6803      	ldr	r3, [r0, #0]
 800925c:	3301      	adds	r3, #1
 800925e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009262:	b914      	cbnz	r4, 800926a <__match+0x12>
 8009264:	6003      	str	r3, [r0, #0]
 8009266:	2001      	movs	r0, #1
 8009268:	bd30      	pop	{r4, r5, pc}
 800926a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800926e:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8009272:	2d19      	cmp	r5, #25
 8009274:	bf98      	it	ls
 8009276:	3220      	addls	r2, #32
 8009278:	42a2      	cmp	r2, r4
 800927a:	d0f0      	beq.n	800925e <__match+0x6>
 800927c:	2000      	movs	r0, #0
 800927e:	e7f3      	b.n	8009268 <__match+0x10>

08009280 <__hexnan>:
 8009280:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009284:	2500      	movs	r5, #0
 8009286:	680b      	ldr	r3, [r1, #0]
 8009288:	4682      	mov	sl, r0
 800928a:	115f      	asrs	r7, r3, #5
 800928c:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 8009290:	f013 031f 	ands.w	r3, r3, #31
 8009294:	bf18      	it	ne
 8009296:	3704      	addne	r7, #4
 8009298:	1f3e      	subs	r6, r7, #4
 800929a:	4690      	mov	r8, r2
 800929c:	46b1      	mov	r9, r6
 800929e:	4634      	mov	r4, r6
 80092a0:	46ab      	mov	fp, r5
 80092a2:	b087      	sub	sp, #28
 80092a4:	6801      	ldr	r1, [r0, #0]
 80092a6:	9301      	str	r3, [sp, #4]
 80092a8:	f847 5c04 	str.w	r5, [r7, #-4]
 80092ac:	9502      	str	r5, [sp, #8]
 80092ae:	784a      	ldrb	r2, [r1, #1]
 80092b0:	1c4b      	adds	r3, r1, #1
 80092b2:	9303      	str	r3, [sp, #12]
 80092b4:	b342      	cbz	r2, 8009308 <__hexnan+0x88>
 80092b6:	4610      	mov	r0, r2
 80092b8:	9105      	str	r1, [sp, #20]
 80092ba:	9204      	str	r2, [sp, #16]
 80092bc:	f7ff fd83 	bl	8008dc6 <__hexdig_fun>
 80092c0:	2800      	cmp	r0, #0
 80092c2:	d143      	bne.n	800934c <__hexnan+0xcc>
 80092c4:	9a04      	ldr	r2, [sp, #16]
 80092c6:	9905      	ldr	r1, [sp, #20]
 80092c8:	2a20      	cmp	r2, #32
 80092ca:	d818      	bhi.n	80092fe <__hexnan+0x7e>
 80092cc:	9b02      	ldr	r3, [sp, #8]
 80092ce:	459b      	cmp	fp, r3
 80092d0:	dd13      	ble.n	80092fa <__hexnan+0x7a>
 80092d2:	454c      	cmp	r4, r9
 80092d4:	d206      	bcs.n	80092e4 <__hexnan+0x64>
 80092d6:	2d07      	cmp	r5, #7
 80092d8:	dc04      	bgt.n	80092e4 <__hexnan+0x64>
 80092da:	462a      	mov	r2, r5
 80092dc:	4649      	mov	r1, r9
 80092de:	4620      	mov	r0, r4
 80092e0:	f7ff ffa8 	bl	8009234 <L_shift>
 80092e4:	4544      	cmp	r4, r8
 80092e6:	d944      	bls.n	8009372 <__hexnan+0xf2>
 80092e8:	2300      	movs	r3, #0
 80092ea:	f1a4 0904 	sub.w	r9, r4, #4
 80092ee:	f844 3c04 	str.w	r3, [r4, #-4]
 80092f2:	461d      	mov	r5, r3
 80092f4:	464c      	mov	r4, r9
 80092f6:	f8cd b008 	str.w	fp, [sp, #8]
 80092fa:	9903      	ldr	r1, [sp, #12]
 80092fc:	e7d7      	b.n	80092ae <__hexnan+0x2e>
 80092fe:	2a29      	cmp	r2, #41	; 0x29
 8009300:	d14a      	bne.n	8009398 <__hexnan+0x118>
 8009302:	3102      	adds	r1, #2
 8009304:	f8ca 1000 	str.w	r1, [sl]
 8009308:	f1bb 0f00 	cmp.w	fp, #0
 800930c:	d044      	beq.n	8009398 <__hexnan+0x118>
 800930e:	454c      	cmp	r4, r9
 8009310:	d206      	bcs.n	8009320 <__hexnan+0xa0>
 8009312:	2d07      	cmp	r5, #7
 8009314:	dc04      	bgt.n	8009320 <__hexnan+0xa0>
 8009316:	462a      	mov	r2, r5
 8009318:	4649      	mov	r1, r9
 800931a:	4620      	mov	r0, r4
 800931c:	f7ff ff8a 	bl	8009234 <L_shift>
 8009320:	4544      	cmp	r4, r8
 8009322:	d928      	bls.n	8009376 <__hexnan+0xf6>
 8009324:	4643      	mov	r3, r8
 8009326:	f854 2b04 	ldr.w	r2, [r4], #4
 800932a:	42a6      	cmp	r6, r4
 800932c:	f843 2b04 	str.w	r2, [r3], #4
 8009330:	d2f9      	bcs.n	8009326 <__hexnan+0xa6>
 8009332:	2200      	movs	r2, #0
 8009334:	f843 2b04 	str.w	r2, [r3], #4
 8009338:	429e      	cmp	r6, r3
 800933a:	d2fb      	bcs.n	8009334 <__hexnan+0xb4>
 800933c:	6833      	ldr	r3, [r6, #0]
 800933e:	b91b      	cbnz	r3, 8009348 <__hexnan+0xc8>
 8009340:	4546      	cmp	r6, r8
 8009342:	d127      	bne.n	8009394 <__hexnan+0x114>
 8009344:	2301      	movs	r3, #1
 8009346:	6033      	str	r3, [r6, #0]
 8009348:	2005      	movs	r0, #5
 800934a:	e026      	b.n	800939a <__hexnan+0x11a>
 800934c:	3501      	adds	r5, #1
 800934e:	2d08      	cmp	r5, #8
 8009350:	f10b 0b01 	add.w	fp, fp, #1
 8009354:	dd06      	ble.n	8009364 <__hexnan+0xe4>
 8009356:	4544      	cmp	r4, r8
 8009358:	d9cf      	bls.n	80092fa <__hexnan+0x7a>
 800935a:	2300      	movs	r3, #0
 800935c:	2501      	movs	r5, #1
 800935e:	f844 3c04 	str.w	r3, [r4, #-4]
 8009362:	3c04      	subs	r4, #4
 8009364:	6822      	ldr	r2, [r4, #0]
 8009366:	f000 000f 	and.w	r0, r0, #15
 800936a:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800936e:	6020      	str	r0, [r4, #0]
 8009370:	e7c3      	b.n	80092fa <__hexnan+0x7a>
 8009372:	2508      	movs	r5, #8
 8009374:	e7c1      	b.n	80092fa <__hexnan+0x7a>
 8009376:	9b01      	ldr	r3, [sp, #4]
 8009378:	2b00      	cmp	r3, #0
 800937a:	d0df      	beq.n	800933c <__hexnan+0xbc>
 800937c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009380:	f1c3 0320 	rsb	r3, r3, #32
 8009384:	fa22 f303 	lsr.w	r3, r2, r3
 8009388:	f857 2c04 	ldr.w	r2, [r7, #-4]
 800938c:	401a      	ands	r2, r3
 800938e:	f847 2c04 	str.w	r2, [r7, #-4]
 8009392:	e7d3      	b.n	800933c <__hexnan+0xbc>
 8009394:	3e04      	subs	r6, #4
 8009396:	e7d1      	b.n	800933c <__hexnan+0xbc>
 8009398:	2004      	movs	r0, #4
 800939a:	b007      	add	sp, #28
 800939c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080093a0 <__locale_ctype_ptr_l>:
 80093a0:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 80093a4:	4770      	bx	lr

080093a6 <__localeconv_l>:
 80093a6:	30f0      	adds	r0, #240	; 0xf0
 80093a8:	4770      	bx	lr
	...

080093ac <_localeconv_r>:
 80093ac:	4b04      	ldr	r3, [pc, #16]	; (80093c0 <_localeconv_r+0x14>)
 80093ae:	681b      	ldr	r3, [r3, #0]
 80093b0:	6a18      	ldr	r0, [r3, #32]
 80093b2:	4b04      	ldr	r3, [pc, #16]	; (80093c4 <_localeconv_r+0x18>)
 80093b4:	2800      	cmp	r0, #0
 80093b6:	bf08      	it	eq
 80093b8:	4618      	moveq	r0, r3
 80093ba:	30f0      	adds	r0, #240	; 0xf0
 80093bc:	4770      	bx	lr
 80093be:	bf00      	nop
 80093c0:	20000024 	.word	0x20000024
 80093c4:	20000088 	.word	0x20000088

080093c8 <malloc>:
 80093c8:	4b02      	ldr	r3, [pc, #8]	; (80093d4 <malloc+0xc>)
 80093ca:	4601      	mov	r1, r0
 80093cc:	6818      	ldr	r0, [r3, #0]
 80093ce:	f000 bc75 	b.w	8009cbc <_malloc_r>
 80093d2:	bf00      	nop
 80093d4:	20000024 	.word	0x20000024

080093d8 <__ascii_mbtowc>:
 80093d8:	b082      	sub	sp, #8
 80093da:	b901      	cbnz	r1, 80093de <__ascii_mbtowc+0x6>
 80093dc:	a901      	add	r1, sp, #4
 80093de:	b142      	cbz	r2, 80093f2 <__ascii_mbtowc+0x1a>
 80093e0:	b14b      	cbz	r3, 80093f6 <__ascii_mbtowc+0x1e>
 80093e2:	7813      	ldrb	r3, [r2, #0]
 80093e4:	600b      	str	r3, [r1, #0]
 80093e6:	7812      	ldrb	r2, [r2, #0]
 80093e8:	1c10      	adds	r0, r2, #0
 80093ea:	bf18      	it	ne
 80093ec:	2001      	movne	r0, #1
 80093ee:	b002      	add	sp, #8
 80093f0:	4770      	bx	lr
 80093f2:	4610      	mov	r0, r2
 80093f4:	e7fb      	b.n	80093ee <__ascii_mbtowc+0x16>
 80093f6:	f06f 0001 	mvn.w	r0, #1
 80093fa:	e7f8      	b.n	80093ee <__ascii_mbtowc+0x16>

080093fc <memchr>:
 80093fc:	b510      	push	{r4, lr}
 80093fe:	b2c9      	uxtb	r1, r1
 8009400:	4402      	add	r2, r0
 8009402:	4290      	cmp	r0, r2
 8009404:	4603      	mov	r3, r0
 8009406:	d101      	bne.n	800940c <memchr+0x10>
 8009408:	2300      	movs	r3, #0
 800940a:	e003      	b.n	8009414 <memchr+0x18>
 800940c:	781c      	ldrb	r4, [r3, #0]
 800940e:	3001      	adds	r0, #1
 8009410:	428c      	cmp	r4, r1
 8009412:	d1f6      	bne.n	8009402 <memchr+0x6>
 8009414:	4618      	mov	r0, r3
 8009416:	bd10      	pop	{r4, pc}

08009418 <_Balloc>:
 8009418:	b570      	push	{r4, r5, r6, lr}
 800941a:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800941c:	4604      	mov	r4, r0
 800941e:	460e      	mov	r6, r1
 8009420:	b93d      	cbnz	r5, 8009432 <_Balloc+0x1a>
 8009422:	2010      	movs	r0, #16
 8009424:	f7ff ffd0 	bl	80093c8 <malloc>
 8009428:	6260      	str	r0, [r4, #36]	; 0x24
 800942a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800942e:	6005      	str	r5, [r0, #0]
 8009430:	60c5      	str	r5, [r0, #12]
 8009432:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8009434:	68eb      	ldr	r3, [r5, #12]
 8009436:	b183      	cbz	r3, 800945a <_Balloc+0x42>
 8009438:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800943a:	68db      	ldr	r3, [r3, #12]
 800943c:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8009440:	b9b8      	cbnz	r0, 8009472 <_Balloc+0x5a>
 8009442:	2101      	movs	r1, #1
 8009444:	fa01 f506 	lsl.w	r5, r1, r6
 8009448:	1d6a      	adds	r2, r5, #5
 800944a:	0092      	lsls	r2, r2, #2
 800944c:	4620      	mov	r0, r4
 800944e:	f000 fbdb 	bl	8009c08 <_calloc_r>
 8009452:	b160      	cbz	r0, 800946e <_Balloc+0x56>
 8009454:	e9c0 6501 	strd	r6, r5, [r0, #4]
 8009458:	e00e      	b.n	8009478 <_Balloc+0x60>
 800945a:	2221      	movs	r2, #33	; 0x21
 800945c:	2104      	movs	r1, #4
 800945e:	4620      	mov	r0, r4
 8009460:	f000 fbd2 	bl	8009c08 <_calloc_r>
 8009464:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009466:	60e8      	str	r0, [r5, #12]
 8009468:	68db      	ldr	r3, [r3, #12]
 800946a:	2b00      	cmp	r3, #0
 800946c:	d1e4      	bne.n	8009438 <_Balloc+0x20>
 800946e:	2000      	movs	r0, #0
 8009470:	bd70      	pop	{r4, r5, r6, pc}
 8009472:	6802      	ldr	r2, [r0, #0]
 8009474:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8009478:	2300      	movs	r3, #0
 800947a:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800947e:	e7f7      	b.n	8009470 <_Balloc+0x58>

08009480 <_Bfree>:
 8009480:	b570      	push	{r4, r5, r6, lr}
 8009482:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8009484:	4606      	mov	r6, r0
 8009486:	460d      	mov	r5, r1
 8009488:	b93c      	cbnz	r4, 800949a <_Bfree+0x1a>
 800948a:	2010      	movs	r0, #16
 800948c:	f7ff ff9c 	bl	80093c8 <malloc>
 8009490:	6270      	str	r0, [r6, #36]	; 0x24
 8009492:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009496:	6004      	str	r4, [r0, #0]
 8009498:	60c4      	str	r4, [r0, #12]
 800949a:	b13d      	cbz	r5, 80094ac <_Bfree+0x2c>
 800949c:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800949e:	686a      	ldr	r2, [r5, #4]
 80094a0:	68db      	ldr	r3, [r3, #12]
 80094a2:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80094a6:	6029      	str	r1, [r5, #0]
 80094a8:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 80094ac:	bd70      	pop	{r4, r5, r6, pc}

080094ae <__multadd>:
 80094ae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80094b2:	461f      	mov	r7, r3
 80094b4:	4606      	mov	r6, r0
 80094b6:	460c      	mov	r4, r1
 80094b8:	2300      	movs	r3, #0
 80094ba:	690d      	ldr	r5, [r1, #16]
 80094bc:	f101 0c14 	add.w	ip, r1, #20
 80094c0:	f8dc 0000 	ldr.w	r0, [ip]
 80094c4:	3301      	adds	r3, #1
 80094c6:	b281      	uxth	r1, r0
 80094c8:	fb02 7101 	mla	r1, r2, r1, r7
 80094cc:	0c00      	lsrs	r0, r0, #16
 80094ce:	0c0f      	lsrs	r7, r1, #16
 80094d0:	fb02 7000 	mla	r0, r2, r0, r7
 80094d4:	b289      	uxth	r1, r1
 80094d6:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 80094da:	429d      	cmp	r5, r3
 80094dc:	ea4f 4710 	mov.w	r7, r0, lsr #16
 80094e0:	f84c 1b04 	str.w	r1, [ip], #4
 80094e4:	dcec      	bgt.n	80094c0 <__multadd+0x12>
 80094e6:	b1d7      	cbz	r7, 800951e <__multadd+0x70>
 80094e8:	68a3      	ldr	r3, [r4, #8]
 80094ea:	42ab      	cmp	r3, r5
 80094ec:	dc12      	bgt.n	8009514 <__multadd+0x66>
 80094ee:	6861      	ldr	r1, [r4, #4]
 80094f0:	4630      	mov	r0, r6
 80094f2:	3101      	adds	r1, #1
 80094f4:	f7ff ff90 	bl	8009418 <_Balloc>
 80094f8:	4680      	mov	r8, r0
 80094fa:	6922      	ldr	r2, [r4, #16]
 80094fc:	f104 010c 	add.w	r1, r4, #12
 8009500:	3202      	adds	r2, #2
 8009502:	0092      	lsls	r2, r2, #2
 8009504:	300c      	adds	r0, #12
 8009506:	f7fd f86b 	bl	80065e0 <memcpy>
 800950a:	4621      	mov	r1, r4
 800950c:	4630      	mov	r0, r6
 800950e:	f7ff ffb7 	bl	8009480 <_Bfree>
 8009512:	4644      	mov	r4, r8
 8009514:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8009518:	3501      	adds	r5, #1
 800951a:	615f      	str	r7, [r3, #20]
 800951c:	6125      	str	r5, [r4, #16]
 800951e:	4620      	mov	r0, r4
 8009520:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08009524 <__s2b>:
 8009524:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009528:	4615      	mov	r5, r2
 800952a:	2209      	movs	r2, #9
 800952c:	461f      	mov	r7, r3
 800952e:	3308      	adds	r3, #8
 8009530:	460c      	mov	r4, r1
 8009532:	fb93 f3f2 	sdiv	r3, r3, r2
 8009536:	4606      	mov	r6, r0
 8009538:	2201      	movs	r2, #1
 800953a:	2100      	movs	r1, #0
 800953c:	429a      	cmp	r2, r3
 800953e:	db20      	blt.n	8009582 <__s2b+0x5e>
 8009540:	4630      	mov	r0, r6
 8009542:	f7ff ff69 	bl	8009418 <_Balloc>
 8009546:	9b08      	ldr	r3, [sp, #32]
 8009548:	2d09      	cmp	r5, #9
 800954a:	6143      	str	r3, [r0, #20]
 800954c:	f04f 0301 	mov.w	r3, #1
 8009550:	6103      	str	r3, [r0, #16]
 8009552:	dd19      	ble.n	8009588 <__s2b+0x64>
 8009554:	f104 0809 	add.w	r8, r4, #9
 8009558:	46c1      	mov	r9, r8
 800955a:	442c      	add	r4, r5
 800955c:	f819 3b01 	ldrb.w	r3, [r9], #1
 8009560:	4601      	mov	r1, r0
 8009562:	3b30      	subs	r3, #48	; 0x30
 8009564:	220a      	movs	r2, #10
 8009566:	4630      	mov	r0, r6
 8009568:	f7ff ffa1 	bl	80094ae <__multadd>
 800956c:	45a1      	cmp	r9, r4
 800956e:	d1f5      	bne.n	800955c <__s2b+0x38>
 8009570:	eb08 0405 	add.w	r4, r8, r5
 8009574:	3c08      	subs	r4, #8
 8009576:	1b2d      	subs	r5, r5, r4
 8009578:	1963      	adds	r3, r4, r5
 800957a:	42bb      	cmp	r3, r7
 800957c:	db07      	blt.n	800958e <__s2b+0x6a>
 800957e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009582:	0052      	lsls	r2, r2, #1
 8009584:	3101      	adds	r1, #1
 8009586:	e7d9      	b.n	800953c <__s2b+0x18>
 8009588:	340a      	adds	r4, #10
 800958a:	2509      	movs	r5, #9
 800958c:	e7f3      	b.n	8009576 <__s2b+0x52>
 800958e:	f814 3b01 	ldrb.w	r3, [r4], #1
 8009592:	4601      	mov	r1, r0
 8009594:	3b30      	subs	r3, #48	; 0x30
 8009596:	220a      	movs	r2, #10
 8009598:	4630      	mov	r0, r6
 800959a:	f7ff ff88 	bl	80094ae <__multadd>
 800959e:	e7eb      	b.n	8009578 <__s2b+0x54>

080095a0 <__hi0bits>:
 80095a0:	0c02      	lsrs	r2, r0, #16
 80095a2:	0412      	lsls	r2, r2, #16
 80095a4:	4603      	mov	r3, r0
 80095a6:	b9b2      	cbnz	r2, 80095d6 <__hi0bits+0x36>
 80095a8:	0403      	lsls	r3, r0, #16
 80095aa:	2010      	movs	r0, #16
 80095ac:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 80095b0:	bf04      	itt	eq
 80095b2:	021b      	lsleq	r3, r3, #8
 80095b4:	3008      	addeq	r0, #8
 80095b6:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 80095ba:	bf04      	itt	eq
 80095bc:	011b      	lsleq	r3, r3, #4
 80095be:	3004      	addeq	r0, #4
 80095c0:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 80095c4:	bf04      	itt	eq
 80095c6:	009b      	lsleq	r3, r3, #2
 80095c8:	3002      	addeq	r0, #2
 80095ca:	2b00      	cmp	r3, #0
 80095cc:	db06      	blt.n	80095dc <__hi0bits+0x3c>
 80095ce:	005b      	lsls	r3, r3, #1
 80095d0:	d503      	bpl.n	80095da <__hi0bits+0x3a>
 80095d2:	3001      	adds	r0, #1
 80095d4:	4770      	bx	lr
 80095d6:	2000      	movs	r0, #0
 80095d8:	e7e8      	b.n	80095ac <__hi0bits+0xc>
 80095da:	2020      	movs	r0, #32
 80095dc:	4770      	bx	lr

080095de <__lo0bits>:
 80095de:	6803      	ldr	r3, [r0, #0]
 80095e0:	4601      	mov	r1, r0
 80095e2:	f013 0207 	ands.w	r2, r3, #7
 80095e6:	d00b      	beq.n	8009600 <__lo0bits+0x22>
 80095e8:	07da      	lsls	r2, r3, #31
 80095ea:	d423      	bmi.n	8009634 <__lo0bits+0x56>
 80095ec:	0798      	lsls	r0, r3, #30
 80095ee:	bf49      	itett	mi
 80095f0:	085b      	lsrmi	r3, r3, #1
 80095f2:	089b      	lsrpl	r3, r3, #2
 80095f4:	2001      	movmi	r0, #1
 80095f6:	600b      	strmi	r3, [r1, #0]
 80095f8:	bf5c      	itt	pl
 80095fa:	600b      	strpl	r3, [r1, #0]
 80095fc:	2002      	movpl	r0, #2
 80095fe:	4770      	bx	lr
 8009600:	b298      	uxth	r0, r3
 8009602:	b9a8      	cbnz	r0, 8009630 <__lo0bits+0x52>
 8009604:	2010      	movs	r0, #16
 8009606:	0c1b      	lsrs	r3, r3, #16
 8009608:	f013 0fff 	tst.w	r3, #255	; 0xff
 800960c:	bf04      	itt	eq
 800960e:	0a1b      	lsreq	r3, r3, #8
 8009610:	3008      	addeq	r0, #8
 8009612:	071a      	lsls	r2, r3, #28
 8009614:	bf04      	itt	eq
 8009616:	091b      	lsreq	r3, r3, #4
 8009618:	3004      	addeq	r0, #4
 800961a:	079a      	lsls	r2, r3, #30
 800961c:	bf04      	itt	eq
 800961e:	089b      	lsreq	r3, r3, #2
 8009620:	3002      	addeq	r0, #2
 8009622:	07da      	lsls	r2, r3, #31
 8009624:	d402      	bmi.n	800962c <__lo0bits+0x4e>
 8009626:	085b      	lsrs	r3, r3, #1
 8009628:	d006      	beq.n	8009638 <__lo0bits+0x5a>
 800962a:	3001      	adds	r0, #1
 800962c:	600b      	str	r3, [r1, #0]
 800962e:	4770      	bx	lr
 8009630:	4610      	mov	r0, r2
 8009632:	e7e9      	b.n	8009608 <__lo0bits+0x2a>
 8009634:	2000      	movs	r0, #0
 8009636:	4770      	bx	lr
 8009638:	2020      	movs	r0, #32
 800963a:	4770      	bx	lr

0800963c <__i2b>:
 800963c:	b510      	push	{r4, lr}
 800963e:	460c      	mov	r4, r1
 8009640:	2101      	movs	r1, #1
 8009642:	f7ff fee9 	bl	8009418 <_Balloc>
 8009646:	2201      	movs	r2, #1
 8009648:	6144      	str	r4, [r0, #20]
 800964a:	6102      	str	r2, [r0, #16]
 800964c:	bd10      	pop	{r4, pc}

0800964e <__multiply>:
 800964e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009652:	4614      	mov	r4, r2
 8009654:	690a      	ldr	r2, [r1, #16]
 8009656:	6923      	ldr	r3, [r4, #16]
 8009658:	4688      	mov	r8, r1
 800965a:	429a      	cmp	r2, r3
 800965c:	bfbe      	ittt	lt
 800965e:	460b      	movlt	r3, r1
 8009660:	46a0      	movlt	r8, r4
 8009662:	461c      	movlt	r4, r3
 8009664:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8009668:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800966c:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8009670:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8009674:	eb07 0609 	add.w	r6, r7, r9
 8009678:	42b3      	cmp	r3, r6
 800967a:	bfb8      	it	lt
 800967c:	3101      	addlt	r1, #1
 800967e:	f7ff fecb 	bl	8009418 <_Balloc>
 8009682:	f100 0514 	add.w	r5, r0, #20
 8009686:	462b      	mov	r3, r5
 8009688:	2200      	movs	r2, #0
 800968a:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 800968e:	4573      	cmp	r3, lr
 8009690:	d316      	bcc.n	80096c0 <__multiply+0x72>
 8009692:	f104 0214 	add.w	r2, r4, #20
 8009696:	f108 0114 	add.w	r1, r8, #20
 800969a:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 800969e:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 80096a2:	9300      	str	r3, [sp, #0]
 80096a4:	9b00      	ldr	r3, [sp, #0]
 80096a6:	9201      	str	r2, [sp, #4]
 80096a8:	4293      	cmp	r3, r2
 80096aa:	d80c      	bhi.n	80096c6 <__multiply+0x78>
 80096ac:	2e00      	cmp	r6, #0
 80096ae:	dd03      	ble.n	80096b8 <__multiply+0x6a>
 80096b0:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 80096b4:	2b00      	cmp	r3, #0
 80096b6:	d05d      	beq.n	8009774 <__multiply+0x126>
 80096b8:	6106      	str	r6, [r0, #16]
 80096ba:	b003      	add	sp, #12
 80096bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80096c0:	f843 2b04 	str.w	r2, [r3], #4
 80096c4:	e7e3      	b.n	800968e <__multiply+0x40>
 80096c6:	f8b2 b000 	ldrh.w	fp, [r2]
 80096ca:	f1bb 0f00 	cmp.w	fp, #0
 80096ce:	d023      	beq.n	8009718 <__multiply+0xca>
 80096d0:	4689      	mov	r9, r1
 80096d2:	46ac      	mov	ip, r5
 80096d4:	f04f 0800 	mov.w	r8, #0
 80096d8:	f859 4b04 	ldr.w	r4, [r9], #4
 80096dc:	f8dc a000 	ldr.w	sl, [ip]
 80096e0:	b2a3      	uxth	r3, r4
 80096e2:	fa1f fa8a 	uxth.w	sl, sl
 80096e6:	fb0b a303 	mla	r3, fp, r3, sl
 80096ea:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 80096ee:	f8dc 4000 	ldr.w	r4, [ip]
 80096f2:	4443      	add	r3, r8
 80096f4:	ea4f 4814 	mov.w	r8, r4, lsr #16
 80096f8:	fb0b 840a 	mla	r4, fp, sl, r8
 80096fc:	46e2      	mov	sl, ip
 80096fe:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8009702:	b29b      	uxth	r3, r3
 8009704:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8009708:	454f      	cmp	r7, r9
 800970a:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800970e:	f84a 3b04 	str.w	r3, [sl], #4
 8009712:	d82b      	bhi.n	800976c <__multiply+0x11e>
 8009714:	f8cc 8004 	str.w	r8, [ip, #4]
 8009718:	9b01      	ldr	r3, [sp, #4]
 800971a:	3204      	adds	r2, #4
 800971c:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8009720:	f1ba 0f00 	cmp.w	sl, #0
 8009724:	d020      	beq.n	8009768 <__multiply+0x11a>
 8009726:	4689      	mov	r9, r1
 8009728:	46a8      	mov	r8, r5
 800972a:	f04f 0b00 	mov.w	fp, #0
 800972e:	682b      	ldr	r3, [r5, #0]
 8009730:	f8b9 c000 	ldrh.w	ip, [r9]
 8009734:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8009738:	b29b      	uxth	r3, r3
 800973a:	fb0a 440c 	mla	r4, sl, ip, r4
 800973e:	46c4      	mov	ip, r8
 8009740:	445c      	add	r4, fp
 8009742:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8009746:	f84c 3b04 	str.w	r3, [ip], #4
 800974a:	f859 3b04 	ldr.w	r3, [r9], #4
 800974e:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8009752:	0c1b      	lsrs	r3, r3, #16
 8009754:	fb0a b303 	mla	r3, sl, r3, fp
 8009758:	454f      	cmp	r7, r9
 800975a:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 800975e:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8009762:	d805      	bhi.n	8009770 <__multiply+0x122>
 8009764:	f8c8 3004 	str.w	r3, [r8, #4]
 8009768:	3504      	adds	r5, #4
 800976a:	e79b      	b.n	80096a4 <__multiply+0x56>
 800976c:	46d4      	mov	ip, sl
 800976e:	e7b3      	b.n	80096d8 <__multiply+0x8a>
 8009770:	46e0      	mov	r8, ip
 8009772:	e7dd      	b.n	8009730 <__multiply+0xe2>
 8009774:	3e01      	subs	r6, #1
 8009776:	e799      	b.n	80096ac <__multiply+0x5e>

08009778 <__pow5mult>:
 8009778:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800977c:	4615      	mov	r5, r2
 800977e:	f012 0203 	ands.w	r2, r2, #3
 8009782:	4606      	mov	r6, r0
 8009784:	460f      	mov	r7, r1
 8009786:	d007      	beq.n	8009798 <__pow5mult+0x20>
 8009788:	4c21      	ldr	r4, [pc, #132]	; (8009810 <__pow5mult+0x98>)
 800978a:	3a01      	subs	r2, #1
 800978c:	2300      	movs	r3, #0
 800978e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009792:	f7ff fe8c 	bl	80094ae <__multadd>
 8009796:	4607      	mov	r7, r0
 8009798:	10ad      	asrs	r5, r5, #2
 800979a:	d035      	beq.n	8009808 <__pow5mult+0x90>
 800979c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800979e:	b93c      	cbnz	r4, 80097b0 <__pow5mult+0x38>
 80097a0:	2010      	movs	r0, #16
 80097a2:	f7ff fe11 	bl	80093c8 <malloc>
 80097a6:	6270      	str	r0, [r6, #36]	; 0x24
 80097a8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80097ac:	6004      	str	r4, [r0, #0]
 80097ae:	60c4      	str	r4, [r0, #12]
 80097b0:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80097b4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80097b8:	b94c      	cbnz	r4, 80097ce <__pow5mult+0x56>
 80097ba:	f240 2171 	movw	r1, #625	; 0x271
 80097be:	4630      	mov	r0, r6
 80097c0:	f7ff ff3c 	bl	800963c <__i2b>
 80097c4:	2300      	movs	r3, #0
 80097c6:	4604      	mov	r4, r0
 80097c8:	f8c8 0008 	str.w	r0, [r8, #8]
 80097cc:	6003      	str	r3, [r0, #0]
 80097ce:	f04f 0800 	mov.w	r8, #0
 80097d2:	07eb      	lsls	r3, r5, #31
 80097d4:	d50a      	bpl.n	80097ec <__pow5mult+0x74>
 80097d6:	4639      	mov	r1, r7
 80097d8:	4622      	mov	r2, r4
 80097da:	4630      	mov	r0, r6
 80097dc:	f7ff ff37 	bl	800964e <__multiply>
 80097e0:	4681      	mov	r9, r0
 80097e2:	4639      	mov	r1, r7
 80097e4:	4630      	mov	r0, r6
 80097e6:	f7ff fe4b 	bl	8009480 <_Bfree>
 80097ea:	464f      	mov	r7, r9
 80097ec:	106d      	asrs	r5, r5, #1
 80097ee:	d00b      	beq.n	8009808 <__pow5mult+0x90>
 80097f0:	6820      	ldr	r0, [r4, #0]
 80097f2:	b938      	cbnz	r0, 8009804 <__pow5mult+0x8c>
 80097f4:	4622      	mov	r2, r4
 80097f6:	4621      	mov	r1, r4
 80097f8:	4630      	mov	r0, r6
 80097fa:	f7ff ff28 	bl	800964e <__multiply>
 80097fe:	6020      	str	r0, [r4, #0]
 8009800:	f8c0 8000 	str.w	r8, [r0]
 8009804:	4604      	mov	r4, r0
 8009806:	e7e4      	b.n	80097d2 <__pow5mult+0x5a>
 8009808:	4638      	mov	r0, r7
 800980a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800980e:	bf00      	nop
 8009810:	0800aa30 	.word	0x0800aa30

08009814 <__lshift>:
 8009814:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009818:	460c      	mov	r4, r1
 800981a:	4607      	mov	r7, r0
 800981c:	4616      	mov	r6, r2
 800981e:	6923      	ldr	r3, [r4, #16]
 8009820:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009824:	eb0a 0903 	add.w	r9, sl, r3
 8009828:	6849      	ldr	r1, [r1, #4]
 800982a:	68a3      	ldr	r3, [r4, #8]
 800982c:	f109 0501 	add.w	r5, r9, #1
 8009830:	42ab      	cmp	r3, r5
 8009832:	db32      	blt.n	800989a <__lshift+0x86>
 8009834:	4638      	mov	r0, r7
 8009836:	f7ff fdef 	bl	8009418 <_Balloc>
 800983a:	2300      	movs	r3, #0
 800983c:	4680      	mov	r8, r0
 800983e:	461a      	mov	r2, r3
 8009840:	f100 0114 	add.w	r1, r0, #20
 8009844:	4553      	cmp	r3, sl
 8009846:	db2b      	blt.n	80098a0 <__lshift+0x8c>
 8009848:	6920      	ldr	r0, [r4, #16]
 800984a:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800984e:	f104 0314 	add.w	r3, r4, #20
 8009852:	f016 021f 	ands.w	r2, r6, #31
 8009856:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800985a:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800985e:	d025      	beq.n	80098ac <__lshift+0x98>
 8009860:	2000      	movs	r0, #0
 8009862:	f1c2 0e20 	rsb	lr, r2, #32
 8009866:	468a      	mov	sl, r1
 8009868:	681e      	ldr	r6, [r3, #0]
 800986a:	4096      	lsls	r6, r2
 800986c:	4330      	orrs	r0, r6
 800986e:	f84a 0b04 	str.w	r0, [sl], #4
 8009872:	f853 0b04 	ldr.w	r0, [r3], #4
 8009876:	459c      	cmp	ip, r3
 8009878:	fa20 f00e 	lsr.w	r0, r0, lr
 800987c:	d814      	bhi.n	80098a8 <__lshift+0x94>
 800987e:	6048      	str	r0, [r1, #4]
 8009880:	b108      	cbz	r0, 8009886 <__lshift+0x72>
 8009882:	f109 0502 	add.w	r5, r9, #2
 8009886:	3d01      	subs	r5, #1
 8009888:	4638      	mov	r0, r7
 800988a:	f8c8 5010 	str.w	r5, [r8, #16]
 800988e:	4621      	mov	r1, r4
 8009890:	f7ff fdf6 	bl	8009480 <_Bfree>
 8009894:	4640      	mov	r0, r8
 8009896:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800989a:	3101      	adds	r1, #1
 800989c:	005b      	lsls	r3, r3, #1
 800989e:	e7c7      	b.n	8009830 <__lshift+0x1c>
 80098a0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 80098a4:	3301      	adds	r3, #1
 80098a6:	e7cd      	b.n	8009844 <__lshift+0x30>
 80098a8:	4651      	mov	r1, sl
 80098aa:	e7dc      	b.n	8009866 <__lshift+0x52>
 80098ac:	3904      	subs	r1, #4
 80098ae:	f853 2b04 	ldr.w	r2, [r3], #4
 80098b2:	459c      	cmp	ip, r3
 80098b4:	f841 2f04 	str.w	r2, [r1, #4]!
 80098b8:	d8f9      	bhi.n	80098ae <__lshift+0x9a>
 80098ba:	e7e4      	b.n	8009886 <__lshift+0x72>

080098bc <__mcmp>:
 80098bc:	6903      	ldr	r3, [r0, #16]
 80098be:	690a      	ldr	r2, [r1, #16]
 80098c0:	b530      	push	{r4, r5, lr}
 80098c2:	1a9b      	subs	r3, r3, r2
 80098c4:	d10c      	bne.n	80098e0 <__mcmp+0x24>
 80098c6:	0092      	lsls	r2, r2, #2
 80098c8:	3014      	adds	r0, #20
 80098ca:	3114      	adds	r1, #20
 80098cc:	1884      	adds	r4, r0, r2
 80098ce:	4411      	add	r1, r2
 80098d0:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80098d4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80098d8:	4295      	cmp	r5, r2
 80098da:	d003      	beq.n	80098e4 <__mcmp+0x28>
 80098dc:	d305      	bcc.n	80098ea <__mcmp+0x2e>
 80098de:	2301      	movs	r3, #1
 80098e0:	4618      	mov	r0, r3
 80098e2:	bd30      	pop	{r4, r5, pc}
 80098e4:	42a0      	cmp	r0, r4
 80098e6:	d3f3      	bcc.n	80098d0 <__mcmp+0x14>
 80098e8:	e7fa      	b.n	80098e0 <__mcmp+0x24>
 80098ea:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80098ee:	e7f7      	b.n	80098e0 <__mcmp+0x24>

080098f0 <__mdiff>:
 80098f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80098f4:	460d      	mov	r5, r1
 80098f6:	4607      	mov	r7, r0
 80098f8:	4611      	mov	r1, r2
 80098fa:	4628      	mov	r0, r5
 80098fc:	4614      	mov	r4, r2
 80098fe:	f7ff ffdd 	bl	80098bc <__mcmp>
 8009902:	1e06      	subs	r6, r0, #0
 8009904:	d108      	bne.n	8009918 <__mdiff+0x28>
 8009906:	4631      	mov	r1, r6
 8009908:	4638      	mov	r0, r7
 800990a:	f7ff fd85 	bl	8009418 <_Balloc>
 800990e:	2301      	movs	r3, #1
 8009910:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8009914:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009918:	bfa4      	itt	ge
 800991a:	4623      	movge	r3, r4
 800991c:	462c      	movge	r4, r5
 800991e:	4638      	mov	r0, r7
 8009920:	6861      	ldr	r1, [r4, #4]
 8009922:	bfa6      	itte	ge
 8009924:	461d      	movge	r5, r3
 8009926:	2600      	movge	r6, #0
 8009928:	2601      	movlt	r6, #1
 800992a:	f7ff fd75 	bl	8009418 <_Balloc>
 800992e:	f04f 0e00 	mov.w	lr, #0
 8009932:	60c6      	str	r6, [r0, #12]
 8009934:	692b      	ldr	r3, [r5, #16]
 8009936:	6926      	ldr	r6, [r4, #16]
 8009938:	f104 0214 	add.w	r2, r4, #20
 800993c:	f105 0914 	add.w	r9, r5, #20
 8009940:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8009944:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8009948:	f100 0114 	add.w	r1, r0, #20
 800994c:	f852 ab04 	ldr.w	sl, [r2], #4
 8009950:	f859 5b04 	ldr.w	r5, [r9], #4
 8009954:	fa1f f38a 	uxth.w	r3, sl
 8009958:	4473      	add	r3, lr
 800995a:	b2ac      	uxth	r4, r5
 800995c:	1b1b      	subs	r3, r3, r4
 800995e:	0c2c      	lsrs	r4, r5, #16
 8009960:	ebc4 441a 	rsb	r4, r4, sl, lsr #16
 8009964:	eb04 4423 	add.w	r4, r4, r3, asr #16
 8009968:	b29b      	uxth	r3, r3
 800996a:	ea4f 4e24 	mov.w	lr, r4, asr #16
 800996e:	45c8      	cmp	r8, r9
 8009970:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8009974:	4694      	mov	ip, r2
 8009976:	f841 4b04 	str.w	r4, [r1], #4
 800997a:	d8e7      	bhi.n	800994c <__mdiff+0x5c>
 800997c:	45bc      	cmp	ip, r7
 800997e:	d304      	bcc.n	800998a <__mdiff+0x9a>
 8009980:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8009984:	b183      	cbz	r3, 80099a8 <__mdiff+0xb8>
 8009986:	6106      	str	r6, [r0, #16]
 8009988:	e7c4      	b.n	8009914 <__mdiff+0x24>
 800998a:	f85c 4b04 	ldr.w	r4, [ip], #4
 800998e:	b2a2      	uxth	r2, r4
 8009990:	4472      	add	r2, lr
 8009992:	1413      	asrs	r3, r2, #16
 8009994:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8009998:	b292      	uxth	r2, r2
 800999a:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800999e:	ea4f 4e23 	mov.w	lr, r3, asr #16
 80099a2:	f841 2b04 	str.w	r2, [r1], #4
 80099a6:	e7e9      	b.n	800997c <__mdiff+0x8c>
 80099a8:	3e01      	subs	r6, #1
 80099aa:	e7e9      	b.n	8009980 <__mdiff+0x90>

080099ac <__ulp>:
 80099ac:	4b10      	ldr	r3, [pc, #64]	; (80099f0 <__ulp+0x44>)
 80099ae:	400b      	ands	r3, r1
 80099b0:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 80099b4:	2b00      	cmp	r3, #0
 80099b6:	dd02      	ble.n	80099be <__ulp+0x12>
 80099b8:	2000      	movs	r0, #0
 80099ba:	4619      	mov	r1, r3
 80099bc:	4770      	bx	lr
 80099be:	425b      	negs	r3, r3
 80099c0:	151b      	asrs	r3, r3, #20
 80099c2:	2b13      	cmp	r3, #19
 80099c4:	f04f 0000 	mov.w	r0, #0
 80099c8:	f04f 0100 	mov.w	r1, #0
 80099cc:	dc04      	bgt.n	80099d8 <__ulp+0x2c>
 80099ce:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80099d2:	fa42 f103 	asr.w	r1, r2, r3
 80099d6:	4770      	bx	lr
 80099d8:	2201      	movs	r2, #1
 80099da:	3b14      	subs	r3, #20
 80099dc:	2b1e      	cmp	r3, #30
 80099de:	bfce      	itee	gt
 80099e0:	4613      	movgt	r3, r2
 80099e2:	f1c3 031f 	rsble	r3, r3, #31
 80099e6:	fa02 f303 	lslle.w	r3, r2, r3
 80099ea:	4618      	mov	r0, r3
 80099ec:	4770      	bx	lr
 80099ee:	bf00      	nop
 80099f0:	7ff00000 	.word	0x7ff00000

080099f4 <__b2d>:
 80099f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80099f8:	6907      	ldr	r7, [r0, #16]
 80099fa:	f100 0914 	add.w	r9, r0, #20
 80099fe:	eb09 0787 	add.w	r7, r9, r7, lsl #2
 8009a02:	f857 6c04 	ldr.w	r6, [r7, #-4]
 8009a06:	f1a7 0804 	sub.w	r8, r7, #4
 8009a0a:	4630      	mov	r0, r6
 8009a0c:	f7ff fdc8 	bl	80095a0 <__hi0bits>
 8009a10:	f1c0 0320 	rsb	r3, r0, #32
 8009a14:	280a      	cmp	r0, #10
 8009a16:	600b      	str	r3, [r1, #0]
 8009a18:	491e      	ldr	r1, [pc, #120]	; (8009a94 <__b2d+0xa0>)
 8009a1a:	dc17      	bgt.n	8009a4c <__b2d+0x58>
 8009a1c:	45c1      	cmp	r9, r8
 8009a1e:	bf28      	it	cs
 8009a20:	2200      	movcs	r2, #0
 8009a22:	f1c0 0c0b 	rsb	ip, r0, #11
 8009a26:	fa26 f30c 	lsr.w	r3, r6, ip
 8009a2a:	bf38      	it	cc
 8009a2c:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 8009a30:	ea43 0501 	orr.w	r5, r3, r1
 8009a34:	f100 0315 	add.w	r3, r0, #21
 8009a38:	fa06 f303 	lsl.w	r3, r6, r3
 8009a3c:	fa22 f20c 	lsr.w	r2, r2, ip
 8009a40:	ea43 0402 	orr.w	r4, r3, r2
 8009a44:	4620      	mov	r0, r4
 8009a46:	4629      	mov	r1, r5
 8009a48:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009a4c:	45c1      	cmp	r9, r8
 8009a4e:	bf3a      	itte	cc
 8009a50:	f1a7 0808 	subcc.w	r8, r7, #8
 8009a54:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 8009a58:	2200      	movcs	r2, #0
 8009a5a:	f1b0 030b 	subs.w	r3, r0, #11
 8009a5e:	d015      	beq.n	8009a8c <__b2d+0x98>
 8009a60:	409e      	lsls	r6, r3
 8009a62:	f1c3 0720 	rsb	r7, r3, #32
 8009a66:	f046 567f 	orr.w	r6, r6, #1069547520	; 0x3fc00000
 8009a6a:	fa22 f107 	lsr.w	r1, r2, r7
 8009a6e:	45c8      	cmp	r8, r9
 8009a70:	f446 1640 	orr.w	r6, r6, #3145728	; 0x300000
 8009a74:	ea46 0501 	orr.w	r5, r6, r1
 8009a78:	bf94      	ite	ls
 8009a7a:	2100      	movls	r1, #0
 8009a7c:	f858 1c04 	ldrhi.w	r1, [r8, #-4]
 8009a80:	fa02 f003 	lsl.w	r0, r2, r3
 8009a84:	40f9      	lsrs	r1, r7
 8009a86:	ea40 0401 	orr.w	r4, r0, r1
 8009a8a:	e7db      	b.n	8009a44 <__b2d+0x50>
 8009a8c:	ea46 0501 	orr.w	r5, r6, r1
 8009a90:	4614      	mov	r4, r2
 8009a92:	e7d7      	b.n	8009a44 <__b2d+0x50>
 8009a94:	3ff00000 	.word	0x3ff00000

08009a98 <__d2b>:
 8009a98:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8009a9c:	461c      	mov	r4, r3
 8009a9e:	e9dd 6508 	ldrd	r6, r5, [sp, #32]
 8009aa2:	2101      	movs	r1, #1
 8009aa4:	4690      	mov	r8, r2
 8009aa6:	f7ff fcb7 	bl	8009418 <_Balloc>
 8009aaa:	f3c4 0213 	ubfx	r2, r4, #0, #20
 8009aae:	f3c4 540a 	ubfx	r4, r4, #20, #11
 8009ab2:	4607      	mov	r7, r0
 8009ab4:	bb34      	cbnz	r4, 8009b04 <__d2b+0x6c>
 8009ab6:	9201      	str	r2, [sp, #4]
 8009ab8:	f1b8 0200 	subs.w	r2, r8, #0
 8009abc:	d027      	beq.n	8009b0e <__d2b+0x76>
 8009abe:	a802      	add	r0, sp, #8
 8009ac0:	f840 2d08 	str.w	r2, [r0, #-8]!
 8009ac4:	f7ff fd8b 	bl	80095de <__lo0bits>
 8009ac8:	9900      	ldr	r1, [sp, #0]
 8009aca:	b1f0      	cbz	r0, 8009b0a <__d2b+0x72>
 8009acc:	9a01      	ldr	r2, [sp, #4]
 8009ace:	f1c0 0320 	rsb	r3, r0, #32
 8009ad2:	fa02 f303 	lsl.w	r3, r2, r3
 8009ad6:	430b      	orrs	r3, r1
 8009ad8:	40c2      	lsrs	r2, r0
 8009ada:	617b      	str	r3, [r7, #20]
 8009adc:	9201      	str	r2, [sp, #4]
 8009ade:	9b01      	ldr	r3, [sp, #4]
 8009ae0:	2b00      	cmp	r3, #0
 8009ae2:	bf14      	ite	ne
 8009ae4:	2102      	movne	r1, #2
 8009ae6:	2101      	moveq	r1, #1
 8009ae8:	61bb      	str	r3, [r7, #24]
 8009aea:	6139      	str	r1, [r7, #16]
 8009aec:	b1c4      	cbz	r4, 8009b20 <__d2b+0x88>
 8009aee:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8009af2:	4404      	add	r4, r0
 8009af4:	6034      	str	r4, [r6, #0]
 8009af6:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8009afa:	6028      	str	r0, [r5, #0]
 8009afc:	4638      	mov	r0, r7
 8009afe:	b002      	add	sp, #8
 8009b00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009b04:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8009b08:	e7d5      	b.n	8009ab6 <__d2b+0x1e>
 8009b0a:	6179      	str	r1, [r7, #20]
 8009b0c:	e7e7      	b.n	8009ade <__d2b+0x46>
 8009b0e:	a801      	add	r0, sp, #4
 8009b10:	f7ff fd65 	bl	80095de <__lo0bits>
 8009b14:	2101      	movs	r1, #1
 8009b16:	9b01      	ldr	r3, [sp, #4]
 8009b18:	6139      	str	r1, [r7, #16]
 8009b1a:	617b      	str	r3, [r7, #20]
 8009b1c:	3020      	adds	r0, #32
 8009b1e:	e7e5      	b.n	8009aec <__d2b+0x54>
 8009b20:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8009b24:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8009b28:	6030      	str	r0, [r6, #0]
 8009b2a:	6918      	ldr	r0, [r3, #16]
 8009b2c:	f7ff fd38 	bl	80095a0 <__hi0bits>
 8009b30:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8009b34:	e7e1      	b.n	8009afa <__d2b+0x62>

08009b36 <__ratio>:
 8009b36:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009b3a:	4688      	mov	r8, r1
 8009b3c:	4669      	mov	r1, sp
 8009b3e:	4681      	mov	r9, r0
 8009b40:	f7ff ff58 	bl	80099f4 <__b2d>
 8009b44:	468b      	mov	fp, r1
 8009b46:	4606      	mov	r6, r0
 8009b48:	460f      	mov	r7, r1
 8009b4a:	4640      	mov	r0, r8
 8009b4c:	a901      	add	r1, sp, #4
 8009b4e:	f7ff ff51 	bl	80099f4 <__b2d>
 8009b52:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8009b56:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8009b5a:	460d      	mov	r5, r1
 8009b5c:	eba3 0c02 	sub.w	ip, r3, r2
 8009b60:	e9dd 3200 	ldrd	r3, r2, [sp]
 8009b64:	1a9b      	subs	r3, r3, r2
 8009b66:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8009b6a:	2b00      	cmp	r3, #0
 8009b6c:	bfd5      	itete	le
 8009b6e:	460a      	movle	r2, r1
 8009b70:	463a      	movgt	r2, r7
 8009b72:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8009b76:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 8009b7a:	bfd8      	it	le
 8009b7c:	eb02 5503 	addle.w	r5, r2, r3, lsl #20
 8009b80:	462b      	mov	r3, r5
 8009b82:	4602      	mov	r2, r0
 8009b84:	4659      	mov	r1, fp
 8009b86:	4630      	mov	r0, r6
 8009b88:	f7f6 fdd0 	bl	800072c <__aeabi_ddiv>
 8009b8c:	b003      	add	sp, #12
 8009b8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08009b92 <__copybits>:
 8009b92:	3901      	subs	r1, #1
 8009b94:	b510      	push	{r4, lr}
 8009b96:	1149      	asrs	r1, r1, #5
 8009b98:	6914      	ldr	r4, [r2, #16]
 8009b9a:	3101      	adds	r1, #1
 8009b9c:	f102 0314 	add.w	r3, r2, #20
 8009ba0:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8009ba4:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8009ba8:	42a3      	cmp	r3, r4
 8009baa:	4602      	mov	r2, r0
 8009bac:	d303      	bcc.n	8009bb6 <__copybits+0x24>
 8009bae:	2300      	movs	r3, #0
 8009bb0:	428a      	cmp	r2, r1
 8009bb2:	d305      	bcc.n	8009bc0 <__copybits+0x2e>
 8009bb4:	bd10      	pop	{r4, pc}
 8009bb6:	f853 2b04 	ldr.w	r2, [r3], #4
 8009bba:	f840 2b04 	str.w	r2, [r0], #4
 8009bbe:	e7f3      	b.n	8009ba8 <__copybits+0x16>
 8009bc0:	f842 3b04 	str.w	r3, [r2], #4
 8009bc4:	e7f4      	b.n	8009bb0 <__copybits+0x1e>

08009bc6 <__any_on>:
 8009bc6:	f100 0214 	add.w	r2, r0, #20
 8009bca:	6900      	ldr	r0, [r0, #16]
 8009bcc:	114b      	asrs	r3, r1, #5
 8009bce:	4298      	cmp	r0, r3
 8009bd0:	b510      	push	{r4, lr}
 8009bd2:	db11      	blt.n	8009bf8 <__any_on+0x32>
 8009bd4:	dd0a      	ble.n	8009bec <__any_on+0x26>
 8009bd6:	f011 011f 	ands.w	r1, r1, #31
 8009bda:	d007      	beq.n	8009bec <__any_on+0x26>
 8009bdc:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8009be0:	fa24 f001 	lsr.w	r0, r4, r1
 8009be4:	fa00 f101 	lsl.w	r1, r0, r1
 8009be8:	428c      	cmp	r4, r1
 8009bea:	d10b      	bne.n	8009c04 <__any_on+0x3e>
 8009bec:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8009bf0:	4293      	cmp	r3, r2
 8009bf2:	d803      	bhi.n	8009bfc <__any_on+0x36>
 8009bf4:	2000      	movs	r0, #0
 8009bf6:	bd10      	pop	{r4, pc}
 8009bf8:	4603      	mov	r3, r0
 8009bfa:	e7f7      	b.n	8009bec <__any_on+0x26>
 8009bfc:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8009c00:	2900      	cmp	r1, #0
 8009c02:	d0f5      	beq.n	8009bf0 <__any_on+0x2a>
 8009c04:	2001      	movs	r0, #1
 8009c06:	e7f6      	b.n	8009bf6 <__any_on+0x30>

08009c08 <_calloc_r>:
 8009c08:	b538      	push	{r3, r4, r5, lr}
 8009c0a:	fb02 f401 	mul.w	r4, r2, r1
 8009c0e:	4621      	mov	r1, r4
 8009c10:	f000 f854 	bl	8009cbc <_malloc_r>
 8009c14:	4605      	mov	r5, r0
 8009c16:	b118      	cbz	r0, 8009c20 <_calloc_r+0x18>
 8009c18:	4622      	mov	r2, r4
 8009c1a:	2100      	movs	r1, #0
 8009c1c:	f7fc fd04 	bl	8006628 <memset>
 8009c20:	4628      	mov	r0, r5
 8009c22:	bd38      	pop	{r3, r4, r5, pc}

08009c24 <_free_r>:
 8009c24:	b538      	push	{r3, r4, r5, lr}
 8009c26:	4605      	mov	r5, r0
 8009c28:	2900      	cmp	r1, #0
 8009c2a:	d043      	beq.n	8009cb4 <_free_r+0x90>
 8009c2c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009c30:	1f0c      	subs	r4, r1, #4
 8009c32:	2b00      	cmp	r3, #0
 8009c34:	bfb8      	it	lt
 8009c36:	18e4      	addlt	r4, r4, r3
 8009c38:	f000 fa1b 	bl	800a072 <__malloc_lock>
 8009c3c:	4a1e      	ldr	r2, [pc, #120]	; (8009cb8 <_free_r+0x94>)
 8009c3e:	6813      	ldr	r3, [r2, #0]
 8009c40:	4610      	mov	r0, r2
 8009c42:	b933      	cbnz	r3, 8009c52 <_free_r+0x2e>
 8009c44:	6063      	str	r3, [r4, #4]
 8009c46:	6014      	str	r4, [r2, #0]
 8009c48:	4628      	mov	r0, r5
 8009c4a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009c4e:	f000 ba11 	b.w	800a074 <__malloc_unlock>
 8009c52:	42a3      	cmp	r3, r4
 8009c54:	d90b      	bls.n	8009c6e <_free_r+0x4a>
 8009c56:	6821      	ldr	r1, [r4, #0]
 8009c58:	1862      	adds	r2, r4, r1
 8009c5a:	4293      	cmp	r3, r2
 8009c5c:	bf01      	itttt	eq
 8009c5e:	681a      	ldreq	r2, [r3, #0]
 8009c60:	685b      	ldreq	r3, [r3, #4]
 8009c62:	1852      	addeq	r2, r2, r1
 8009c64:	6022      	streq	r2, [r4, #0]
 8009c66:	6063      	str	r3, [r4, #4]
 8009c68:	6004      	str	r4, [r0, #0]
 8009c6a:	e7ed      	b.n	8009c48 <_free_r+0x24>
 8009c6c:	4613      	mov	r3, r2
 8009c6e:	685a      	ldr	r2, [r3, #4]
 8009c70:	b10a      	cbz	r2, 8009c76 <_free_r+0x52>
 8009c72:	42a2      	cmp	r2, r4
 8009c74:	d9fa      	bls.n	8009c6c <_free_r+0x48>
 8009c76:	6819      	ldr	r1, [r3, #0]
 8009c78:	1858      	adds	r0, r3, r1
 8009c7a:	42a0      	cmp	r0, r4
 8009c7c:	d10b      	bne.n	8009c96 <_free_r+0x72>
 8009c7e:	6820      	ldr	r0, [r4, #0]
 8009c80:	4401      	add	r1, r0
 8009c82:	1858      	adds	r0, r3, r1
 8009c84:	4282      	cmp	r2, r0
 8009c86:	6019      	str	r1, [r3, #0]
 8009c88:	d1de      	bne.n	8009c48 <_free_r+0x24>
 8009c8a:	6810      	ldr	r0, [r2, #0]
 8009c8c:	6852      	ldr	r2, [r2, #4]
 8009c8e:	4401      	add	r1, r0
 8009c90:	6019      	str	r1, [r3, #0]
 8009c92:	605a      	str	r2, [r3, #4]
 8009c94:	e7d8      	b.n	8009c48 <_free_r+0x24>
 8009c96:	d902      	bls.n	8009c9e <_free_r+0x7a>
 8009c98:	230c      	movs	r3, #12
 8009c9a:	602b      	str	r3, [r5, #0]
 8009c9c:	e7d4      	b.n	8009c48 <_free_r+0x24>
 8009c9e:	6820      	ldr	r0, [r4, #0]
 8009ca0:	1821      	adds	r1, r4, r0
 8009ca2:	428a      	cmp	r2, r1
 8009ca4:	bf01      	itttt	eq
 8009ca6:	6811      	ldreq	r1, [r2, #0]
 8009ca8:	6852      	ldreq	r2, [r2, #4]
 8009caa:	1809      	addeq	r1, r1, r0
 8009cac:	6021      	streq	r1, [r4, #0]
 8009cae:	6062      	str	r2, [r4, #4]
 8009cb0:	605c      	str	r4, [r3, #4]
 8009cb2:	e7c9      	b.n	8009c48 <_free_r+0x24>
 8009cb4:	bd38      	pop	{r3, r4, r5, pc}
 8009cb6:	bf00      	nop
 8009cb8:	20000674 	.word	0x20000674

08009cbc <_malloc_r>:
 8009cbc:	b570      	push	{r4, r5, r6, lr}
 8009cbe:	1ccd      	adds	r5, r1, #3
 8009cc0:	f025 0503 	bic.w	r5, r5, #3
 8009cc4:	3508      	adds	r5, #8
 8009cc6:	2d0c      	cmp	r5, #12
 8009cc8:	bf38      	it	cc
 8009cca:	250c      	movcc	r5, #12
 8009ccc:	2d00      	cmp	r5, #0
 8009cce:	4606      	mov	r6, r0
 8009cd0:	db01      	blt.n	8009cd6 <_malloc_r+0x1a>
 8009cd2:	42a9      	cmp	r1, r5
 8009cd4:	d903      	bls.n	8009cde <_malloc_r+0x22>
 8009cd6:	230c      	movs	r3, #12
 8009cd8:	6033      	str	r3, [r6, #0]
 8009cda:	2000      	movs	r0, #0
 8009cdc:	bd70      	pop	{r4, r5, r6, pc}
 8009cde:	f000 f9c8 	bl	800a072 <__malloc_lock>
 8009ce2:	4a21      	ldr	r2, [pc, #132]	; (8009d68 <_malloc_r+0xac>)
 8009ce4:	6814      	ldr	r4, [r2, #0]
 8009ce6:	4621      	mov	r1, r4
 8009ce8:	b991      	cbnz	r1, 8009d10 <_malloc_r+0x54>
 8009cea:	4c20      	ldr	r4, [pc, #128]	; (8009d6c <_malloc_r+0xb0>)
 8009cec:	6823      	ldr	r3, [r4, #0]
 8009cee:	b91b      	cbnz	r3, 8009cf8 <_malloc_r+0x3c>
 8009cf0:	4630      	mov	r0, r6
 8009cf2:	f000 f98f 	bl	800a014 <_sbrk_r>
 8009cf6:	6020      	str	r0, [r4, #0]
 8009cf8:	4629      	mov	r1, r5
 8009cfa:	4630      	mov	r0, r6
 8009cfc:	f000 f98a 	bl	800a014 <_sbrk_r>
 8009d00:	1c43      	adds	r3, r0, #1
 8009d02:	d124      	bne.n	8009d4e <_malloc_r+0x92>
 8009d04:	230c      	movs	r3, #12
 8009d06:	4630      	mov	r0, r6
 8009d08:	6033      	str	r3, [r6, #0]
 8009d0a:	f000 f9b3 	bl	800a074 <__malloc_unlock>
 8009d0e:	e7e4      	b.n	8009cda <_malloc_r+0x1e>
 8009d10:	680b      	ldr	r3, [r1, #0]
 8009d12:	1b5b      	subs	r3, r3, r5
 8009d14:	d418      	bmi.n	8009d48 <_malloc_r+0x8c>
 8009d16:	2b0b      	cmp	r3, #11
 8009d18:	d90f      	bls.n	8009d3a <_malloc_r+0x7e>
 8009d1a:	600b      	str	r3, [r1, #0]
 8009d1c:	18cc      	adds	r4, r1, r3
 8009d1e:	50cd      	str	r5, [r1, r3]
 8009d20:	4630      	mov	r0, r6
 8009d22:	f000 f9a7 	bl	800a074 <__malloc_unlock>
 8009d26:	f104 000b 	add.w	r0, r4, #11
 8009d2a:	1d23      	adds	r3, r4, #4
 8009d2c:	f020 0007 	bic.w	r0, r0, #7
 8009d30:	1ac3      	subs	r3, r0, r3
 8009d32:	d0d3      	beq.n	8009cdc <_malloc_r+0x20>
 8009d34:	425a      	negs	r2, r3
 8009d36:	50e2      	str	r2, [r4, r3]
 8009d38:	e7d0      	b.n	8009cdc <_malloc_r+0x20>
 8009d3a:	684b      	ldr	r3, [r1, #4]
 8009d3c:	428c      	cmp	r4, r1
 8009d3e:	bf16      	itet	ne
 8009d40:	6063      	strne	r3, [r4, #4]
 8009d42:	6013      	streq	r3, [r2, #0]
 8009d44:	460c      	movne	r4, r1
 8009d46:	e7eb      	b.n	8009d20 <_malloc_r+0x64>
 8009d48:	460c      	mov	r4, r1
 8009d4a:	6849      	ldr	r1, [r1, #4]
 8009d4c:	e7cc      	b.n	8009ce8 <_malloc_r+0x2c>
 8009d4e:	1cc4      	adds	r4, r0, #3
 8009d50:	f024 0403 	bic.w	r4, r4, #3
 8009d54:	42a0      	cmp	r0, r4
 8009d56:	d005      	beq.n	8009d64 <_malloc_r+0xa8>
 8009d58:	1a21      	subs	r1, r4, r0
 8009d5a:	4630      	mov	r0, r6
 8009d5c:	f000 f95a 	bl	800a014 <_sbrk_r>
 8009d60:	3001      	adds	r0, #1
 8009d62:	d0cf      	beq.n	8009d04 <_malloc_r+0x48>
 8009d64:	6025      	str	r5, [r4, #0]
 8009d66:	e7db      	b.n	8009d20 <_malloc_r+0x64>
 8009d68:	20000674 	.word	0x20000674
 8009d6c:	20000678 	.word	0x20000678

08009d70 <__ssputs_r>:
 8009d70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009d74:	688e      	ldr	r6, [r1, #8]
 8009d76:	4682      	mov	sl, r0
 8009d78:	429e      	cmp	r6, r3
 8009d7a:	460c      	mov	r4, r1
 8009d7c:	4690      	mov	r8, r2
 8009d7e:	4699      	mov	r9, r3
 8009d80:	d837      	bhi.n	8009df2 <__ssputs_r+0x82>
 8009d82:	898a      	ldrh	r2, [r1, #12]
 8009d84:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009d88:	d031      	beq.n	8009dee <__ssputs_r+0x7e>
 8009d8a:	2302      	movs	r3, #2
 8009d8c:	6825      	ldr	r5, [r4, #0]
 8009d8e:	6909      	ldr	r1, [r1, #16]
 8009d90:	1a6f      	subs	r7, r5, r1
 8009d92:	6965      	ldr	r5, [r4, #20]
 8009d94:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009d98:	fb95 f5f3 	sdiv	r5, r5, r3
 8009d9c:	f109 0301 	add.w	r3, r9, #1
 8009da0:	443b      	add	r3, r7
 8009da2:	429d      	cmp	r5, r3
 8009da4:	bf38      	it	cc
 8009da6:	461d      	movcc	r5, r3
 8009da8:	0553      	lsls	r3, r2, #21
 8009daa:	d530      	bpl.n	8009e0e <__ssputs_r+0x9e>
 8009dac:	4629      	mov	r1, r5
 8009dae:	f7ff ff85 	bl	8009cbc <_malloc_r>
 8009db2:	4606      	mov	r6, r0
 8009db4:	b950      	cbnz	r0, 8009dcc <__ssputs_r+0x5c>
 8009db6:	230c      	movs	r3, #12
 8009db8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009dbc:	f8ca 3000 	str.w	r3, [sl]
 8009dc0:	89a3      	ldrh	r3, [r4, #12]
 8009dc2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009dc6:	81a3      	strh	r3, [r4, #12]
 8009dc8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009dcc:	463a      	mov	r2, r7
 8009dce:	6921      	ldr	r1, [r4, #16]
 8009dd0:	f7fc fc06 	bl	80065e0 <memcpy>
 8009dd4:	89a3      	ldrh	r3, [r4, #12]
 8009dd6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009dda:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009dde:	81a3      	strh	r3, [r4, #12]
 8009de0:	6126      	str	r6, [r4, #16]
 8009de2:	443e      	add	r6, r7
 8009de4:	6026      	str	r6, [r4, #0]
 8009de6:	464e      	mov	r6, r9
 8009de8:	6165      	str	r5, [r4, #20]
 8009dea:	1bed      	subs	r5, r5, r7
 8009dec:	60a5      	str	r5, [r4, #8]
 8009dee:	454e      	cmp	r6, r9
 8009df0:	d900      	bls.n	8009df4 <__ssputs_r+0x84>
 8009df2:	464e      	mov	r6, r9
 8009df4:	4632      	mov	r2, r6
 8009df6:	4641      	mov	r1, r8
 8009df8:	6820      	ldr	r0, [r4, #0]
 8009dfa:	f7fc fbfc 	bl	80065f6 <memmove>
 8009dfe:	68a3      	ldr	r3, [r4, #8]
 8009e00:	2000      	movs	r0, #0
 8009e02:	1b9b      	subs	r3, r3, r6
 8009e04:	60a3      	str	r3, [r4, #8]
 8009e06:	6823      	ldr	r3, [r4, #0]
 8009e08:	441e      	add	r6, r3
 8009e0a:	6026      	str	r6, [r4, #0]
 8009e0c:	e7dc      	b.n	8009dc8 <__ssputs_r+0x58>
 8009e0e:	462a      	mov	r2, r5
 8009e10:	f000 f931 	bl	800a076 <_realloc_r>
 8009e14:	4606      	mov	r6, r0
 8009e16:	2800      	cmp	r0, #0
 8009e18:	d1e2      	bne.n	8009de0 <__ssputs_r+0x70>
 8009e1a:	6921      	ldr	r1, [r4, #16]
 8009e1c:	4650      	mov	r0, sl
 8009e1e:	f7ff ff01 	bl	8009c24 <_free_r>
 8009e22:	e7c8      	b.n	8009db6 <__ssputs_r+0x46>

08009e24 <_svfiprintf_r>:
 8009e24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009e28:	461d      	mov	r5, r3
 8009e2a:	898b      	ldrh	r3, [r1, #12]
 8009e2c:	b09d      	sub	sp, #116	; 0x74
 8009e2e:	061f      	lsls	r7, r3, #24
 8009e30:	4680      	mov	r8, r0
 8009e32:	460c      	mov	r4, r1
 8009e34:	4616      	mov	r6, r2
 8009e36:	d50f      	bpl.n	8009e58 <_svfiprintf_r+0x34>
 8009e38:	690b      	ldr	r3, [r1, #16]
 8009e3a:	b96b      	cbnz	r3, 8009e58 <_svfiprintf_r+0x34>
 8009e3c:	2140      	movs	r1, #64	; 0x40
 8009e3e:	f7ff ff3d 	bl	8009cbc <_malloc_r>
 8009e42:	6020      	str	r0, [r4, #0]
 8009e44:	6120      	str	r0, [r4, #16]
 8009e46:	b928      	cbnz	r0, 8009e54 <_svfiprintf_r+0x30>
 8009e48:	230c      	movs	r3, #12
 8009e4a:	f8c8 3000 	str.w	r3, [r8]
 8009e4e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009e52:	e0c8      	b.n	8009fe6 <_svfiprintf_r+0x1c2>
 8009e54:	2340      	movs	r3, #64	; 0x40
 8009e56:	6163      	str	r3, [r4, #20]
 8009e58:	2300      	movs	r3, #0
 8009e5a:	9309      	str	r3, [sp, #36]	; 0x24
 8009e5c:	2320      	movs	r3, #32
 8009e5e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009e62:	2330      	movs	r3, #48	; 0x30
 8009e64:	f04f 0b01 	mov.w	fp, #1
 8009e68:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009e6c:	9503      	str	r5, [sp, #12]
 8009e6e:	4637      	mov	r7, r6
 8009e70:	463d      	mov	r5, r7
 8009e72:	f815 3b01 	ldrb.w	r3, [r5], #1
 8009e76:	b10b      	cbz	r3, 8009e7c <_svfiprintf_r+0x58>
 8009e78:	2b25      	cmp	r3, #37	; 0x25
 8009e7a:	d13e      	bne.n	8009efa <_svfiprintf_r+0xd6>
 8009e7c:	ebb7 0a06 	subs.w	sl, r7, r6
 8009e80:	d00b      	beq.n	8009e9a <_svfiprintf_r+0x76>
 8009e82:	4653      	mov	r3, sl
 8009e84:	4632      	mov	r2, r6
 8009e86:	4621      	mov	r1, r4
 8009e88:	4640      	mov	r0, r8
 8009e8a:	f7ff ff71 	bl	8009d70 <__ssputs_r>
 8009e8e:	3001      	adds	r0, #1
 8009e90:	f000 80a4 	beq.w	8009fdc <_svfiprintf_r+0x1b8>
 8009e94:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009e96:	4453      	add	r3, sl
 8009e98:	9309      	str	r3, [sp, #36]	; 0x24
 8009e9a:	783b      	ldrb	r3, [r7, #0]
 8009e9c:	2b00      	cmp	r3, #0
 8009e9e:	f000 809d 	beq.w	8009fdc <_svfiprintf_r+0x1b8>
 8009ea2:	2300      	movs	r3, #0
 8009ea4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009ea8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009eac:	9304      	str	r3, [sp, #16]
 8009eae:	9307      	str	r3, [sp, #28]
 8009eb0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009eb4:	931a      	str	r3, [sp, #104]	; 0x68
 8009eb6:	462f      	mov	r7, r5
 8009eb8:	2205      	movs	r2, #5
 8009eba:	f817 1b01 	ldrb.w	r1, [r7], #1
 8009ebe:	4850      	ldr	r0, [pc, #320]	; (800a000 <_svfiprintf_r+0x1dc>)
 8009ec0:	f7ff fa9c 	bl	80093fc <memchr>
 8009ec4:	9b04      	ldr	r3, [sp, #16]
 8009ec6:	b9d0      	cbnz	r0, 8009efe <_svfiprintf_r+0xda>
 8009ec8:	06d9      	lsls	r1, r3, #27
 8009eca:	bf44      	itt	mi
 8009ecc:	2220      	movmi	r2, #32
 8009ece:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8009ed2:	071a      	lsls	r2, r3, #28
 8009ed4:	bf44      	itt	mi
 8009ed6:	222b      	movmi	r2, #43	; 0x2b
 8009ed8:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8009edc:	782a      	ldrb	r2, [r5, #0]
 8009ede:	2a2a      	cmp	r2, #42	; 0x2a
 8009ee0:	d015      	beq.n	8009f0e <_svfiprintf_r+0xea>
 8009ee2:	462f      	mov	r7, r5
 8009ee4:	2000      	movs	r0, #0
 8009ee6:	250a      	movs	r5, #10
 8009ee8:	9a07      	ldr	r2, [sp, #28]
 8009eea:	4639      	mov	r1, r7
 8009eec:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009ef0:	3b30      	subs	r3, #48	; 0x30
 8009ef2:	2b09      	cmp	r3, #9
 8009ef4:	d94d      	bls.n	8009f92 <_svfiprintf_r+0x16e>
 8009ef6:	b1b8      	cbz	r0, 8009f28 <_svfiprintf_r+0x104>
 8009ef8:	e00f      	b.n	8009f1a <_svfiprintf_r+0xf6>
 8009efa:	462f      	mov	r7, r5
 8009efc:	e7b8      	b.n	8009e70 <_svfiprintf_r+0x4c>
 8009efe:	4a40      	ldr	r2, [pc, #256]	; (800a000 <_svfiprintf_r+0x1dc>)
 8009f00:	463d      	mov	r5, r7
 8009f02:	1a80      	subs	r0, r0, r2
 8009f04:	fa0b f000 	lsl.w	r0, fp, r0
 8009f08:	4318      	orrs	r0, r3
 8009f0a:	9004      	str	r0, [sp, #16]
 8009f0c:	e7d3      	b.n	8009eb6 <_svfiprintf_r+0x92>
 8009f0e:	9a03      	ldr	r2, [sp, #12]
 8009f10:	1d11      	adds	r1, r2, #4
 8009f12:	6812      	ldr	r2, [r2, #0]
 8009f14:	9103      	str	r1, [sp, #12]
 8009f16:	2a00      	cmp	r2, #0
 8009f18:	db01      	blt.n	8009f1e <_svfiprintf_r+0xfa>
 8009f1a:	9207      	str	r2, [sp, #28]
 8009f1c:	e004      	b.n	8009f28 <_svfiprintf_r+0x104>
 8009f1e:	4252      	negs	r2, r2
 8009f20:	f043 0302 	orr.w	r3, r3, #2
 8009f24:	9207      	str	r2, [sp, #28]
 8009f26:	9304      	str	r3, [sp, #16]
 8009f28:	783b      	ldrb	r3, [r7, #0]
 8009f2a:	2b2e      	cmp	r3, #46	; 0x2e
 8009f2c:	d10c      	bne.n	8009f48 <_svfiprintf_r+0x124>
 8009f2e:	787b      	ldrb	r3, [r7, #1]
 8009f30:	2b2a      	cmp	r3, #42	; 0x2a
 8009f32:	d133      	bne.n	8009f9c <_svfiprintf_r+0x178>
 8009f34:	9b03      	ldr	r3, [sp, #12]
 8009f36:	3702      	adds	r7, #2
 8009f38:	1d1a      	adds	r2, r3, #4
 8009f3a:	681b      	ldr	r3, [r3, #0]
 8009f3c:	9203      	str	r2, [sp, #12]
 8009f3e:	2b00      	cmp	r3, #0
 8009f40:	bfb8      	it	lt
 8009f42:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8009f46:	9305      	str	r3, [sp, #20]
 8009f48:	4d2e      	ldr	r5, [pc, #184]	; (800a004 <_svfiprintf_r+0x1e0>)
 8009f4a:	2203      	movs	r2, #3
 8009f4c:	7839      	ldrb	r1, [r7, #0]
 8009f4e:	4628      	mov	r0, r5
 8009f50:	f7ff fa54 	bl	80093fc <memchr>
 8009f54:	b138      	cbz	r0, 8009f66 <_svfiprintf_r+0x142>
 8009f56:	2340      	movs	r3, #64	; 0x40
 8009f58:	1b40      	subs	r0, r0, r5
 8009f5a:	fa03 f000 	lsl.w	r0, r3, r0
 8009f5e:	9b04      	ldr	r3, [sp, #16]
 8009f60:	3701      	adds	r7, #1
 8009f62:	4303      	orrs	r3, r0
 8009f64:	9304      	str	r3, [sp, #16]
 8009f66:	7839      	ldrb	r1, [r7, #0]
 8009f68:	2206      	movs	r2, #6
 8009f6a:	4827      	ldr	r0, [pc, #156]	; (800a008 <_svfiprintf_r+0x1e4>)
 8009f6c:	1c7e      	adds	r6, r7, #1
 8009f6e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009f72:	f7ff fa43 	bl	80093fc <memchr>
 8009f76:	2800      	cmp	r0, #0
 8009f78:	d038      	beq.n	8009fec <_svfiprintf_r+0x1c8>
 8009f7a:	4b24      	ldr	r3, [pc, #144]	; (800a00c <_svfiprintf_r+0x1e8>)
 8009f7c:	bb13      	cbnz	r3, 8009fc4 <_svfiprintf_r+0x1a0>
 8009f7e:	9b03      	ldr	r3, [sp, #12]
 8009f80:	3307      	adds	r3, #7
 8009f82:	f023 0307 	bic.w	r3, r3, #7
 8009f86:	3308      	adds	r3, #8
 8009f88:	9303      	str	r3, [sp, #12]
 8009f8a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009f8c:	444b      	add	r3, r9
 8009f8e:	9309      	str	r3, [sp, #36]	; 0x24
 8009f90:	e76d      	b.n	8009e6e <_svfiprintf_r+0x4a>
 8009f92:	fb05 3202 	mla	r2, r5, r2, r3
 8009f96:	2001      	movs	r0, #1
 8009f98:	460f      	mov	r7, r1
 8009f9a:	e7a6      	b.n	8009eea <_svfiprintf_r+0xc6>
 8009f9c:	2300      	movs	r3, #0
 8009f9e:	250a      	movs	r5, #10
 8009fa0:	4619      	mov	r1, r3
 8009fa2:	3701      	adds	r7, #1
 8009fa4:	9305      	str	r3, [sp, #20]
 8009fa6:	4638      	mov	r0, r7
 8009fa8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009fac:	3a30      	subs	r2, #48	; 0x30
 8009fae:	2a09      	cmp	r2, #9
 8009fb0:	d903      	bls.n	8009fba <_svfiprintf_r+0x196>
 8009fb2:	2b00      	cmp	r3, #0
 8009fb4:	d0c8      	beq.n	8009f48 <_svfiprintf_r+0x124>
 8009fb6:	9105      	str	r1, [sp, #20]
 8009fb8:	e7c6      	b.n	8009f48 <_svfiprintf_r+0x124>
 8009fba:	fb05 2101 	mla	r1, r5, r1, r2
 8009fbe:	2301      	movs	r3, #1
 8009fc0:	4607      	mov	r7, r0
 8009fc2:	e7f0      	b.n	8009fa6 <_svfiprintf_r+0x182>
 8009fc4:	ab03      	add	r3, sp, #12
 8009fc6:	9300      	str	r3, [sp, #0]
 8009fc8:	4622      	mov	r2, r4
 8009fca:	4b11      	ldr	r3, [pc, #68]	; (800a010 <_svfiprintf_r+0x1ec>)
 8009fcc:	a904      	add	r1, sp, #16
 8009fce:	4640      	mov	r0, r8
 8009fd0:	f7fc fbc4 	bl	800675c <_printf_float>
 8009fd4:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8009fd8:	4681      	mov	r9, r0
 8009fda:	d1d6      	bne.n	8009f8a <_svfiprintf_r+0x166>
 8009fdc:	89a3      	ldrh	r3, [r4, #12]
 8009fde:	065b      	lsls	r3, r3, #25
 8009fe0:	f53f af35 	bmi.w	8009e4e <_svfiprintf_r+0x2a>
 8009fe4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009fe6:	b01d      	add	sp, #116	; 0x74
 8009fe8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009fec:	ab03      	add	r3, sp, #12
 8009fee:	9300      	str	r3, [sp, #0]
 8009ff0:	4622      	mov	r2, r4
 8009ff2:	4b07      	ldr	r3, [pc, #28]	; (800a010 <_svfiprintf_r+0x1ec>)
 8009ff4:	a904      	add	r1, sp, #16
 8009ff6:	4640      	mov	r0, r8
 8009ff8:	f7fc fe5c 	bl	8006cb4 <_printf_i>
 8009ffc:	e7ea      	b.n	8009fd4 <_svfiprintf_r+0x1b0>
 8009ffe:	bf00      	nop
 800a000:	0800aa3c 	.word	0x0800aa3c
 800a004:	0800aa42 	.word	0x0800aa42
 800a008:	0800aa46 	.word	0x0800aa46
 800a00c:	0800675d 	.word	0x0800675d
 800a010:	08009d71 	.word	0x08009d71

0800a014 <_sbrk_r>:
 800a014:	b538      	push	{r3, r4, r5, lr}
 800a016:	2300      	movs	r3, #0
 800a018:	4c05      	ldr	r4, [pc, #20]	; (800a030 <_sbrk_r+0x1c>)
 800a01a:	4605      	mov	r5, r0
 800a01c:	4608      	mov	r0, r1
 800a01e:	6023      	str	r3, [r4, #0]
 800a020:	f7f8 f8d6 	bl	80021d0 <_sbrk>
 800a024:	1c43      	adds	r3, r0, #1
 800a026:	d102      	bne.n	800a02e <_sbrk_r+0x1a>
 800a028:	6823      	ldr	r3, [r4, #0]
 800a02a:	b103      	cbz	r3, 800a02e <_sbrk_r+0x1a>
 800a02c:	602b      	str	r3, [r5, #0]
 800a02e:	bd38      	pop	{r3, r4, r5, pc}
 800a030:	200009c8 	.word	0x200009c8

0800a034 <strncmp>:
 800a034:	b510      	push	{r4, lr}
 800a036:	b16a      	cbz	r2, 800a054 <strncmp+0x20>
 800a038:	3901      	subs	r1, #1
 800a03a:	1884      	adds	r4, r0, r2
 800a03c:	f810 3b01 	ldrb.w	r3, [r0], #1
 800a040:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800a044:	4293      	cmp	r3, r2
 800a046:	d103      	bne.n	800a050 <strncmp+0x1c>
 800a048:	42a0      	cmp	r0, r4
 800a04a:	d001      	beq.n	800a050 <strncmp+0x1c>
 800a04c:	2b00      	cmp	r3, #0
 800a04e:	d1f5      	bne.n	800a03c <strncmp+0x8>
 800a050:	1a98      	subs	r0, r3, r2
 800a052:	bd10      	pop	{r4, pc}
 800a054:	4610      	mov	r0, r2
 800a056:	e7fc      	b.n	800a052 <strncmp+0x1e>

0800a058 <__ascii_wctomb>:
 800a058:	b149      	cbz	r1, 800a06e <__ascii_wctomb+0x16>
 800a05a:	2aff      	cmp	r2, #255	; 0xff
 800a05c:	bf8b      	itete	hi
 800a05e:	238a      	movhi	r3, #138	; 0x8a
 800a060:	700a      	strbls	r2, [r1, #0]
 800a062:	6003      	strhi	r3, [r0, #0]
 800a064:	2001      	movls	r0, #1
 800a066:	bf88      	it	hi
 800a068:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 800a06c:	4770      	bx	lr
 800a06e:	4608      	mov	r0, r1
 800a070:	4770      	bx	lr

0800a072 <__malloc_lock>:
 800a072:	4770      	bx	lr

0800a074 <__malloc_unlock>:
 800a074:	4770      	bx	lr

0800a076 <_realloc_r>:
 800a076:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a078:	4607      	mov	r7, r0
 800a07a:	4614      	mov	r4, r2
 800a07c:	460e      	mov	r6, r1
 800a07e:	b921      	cbnz	r1, 800a08a <_realloc_r+0x14>
 800a080:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800a084:	4611      	mov	r1, r2
 800a086:	f7ff be19 	b.w	8009cbc <_malloc_r>
 800a08a:	b922      	cbnz	r2, 800a096 <_realloc_r+0x20>
 800a08c:	f7ff fdca 	bl	8009c24 <_free_r>
 800a090:	4625      	mov	r5, r4
 800a092:	4628      	mov	r0, r5
 800a094:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a096:	f000 f814 	bl	800a0c2 <_malloc_usable_size_r>
 800a09a:	42a0      	cmp	r0, r4
 800a09c:	d20f      	bcs.n	800a0be <_realloc_r+0x48>
 800a09e:	4621      	mov	r1, r4
 800a0a0:	4638      	mov	r0, r7
 800a0a2:	f7ff fe0b 	bl	8009cbc <_malloc_r>
 800a0a6:	4605      	mov	r5, r0
 800a0a8:	2800      	cmp	r0, #0
 800a0aa:	d0f2      	beq.n	800a092 <_realloc_r+0x1c>
 800a0ac:	4631      	mov	r1, r6
 800a0ae:	4622      	mov	r2, r4
 800a0b0:	f7fc fa96 	bl	80065e0 <memcpy>
 800a0b4:	4631      	mov	r1, r6
 800a0b6:	4638      	mov	r0, r7
 800a0b8:	f7ff fdb4 	bl	8009c24 <_free_r>
 800a0bc:	e7e9      	b.n	800a092 <_realloc_r+0x1c>
 800a0be:	4635      	mov	r5, r6
 800a0c0:	e7e7      	b.n	800a092 <_realloc_r+0x1c>

0800a0c2 <_malloc_usable_size_r>:
 800a0c2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a0c6:	1f18      	subs	r0, r3, #4
 800a0c8:	2b00      	cmp	r3, #0
 800a0ca:	bfbc      	itt	lt
 800a0cc:	580b      	ldrlt	r3, [r1, r0]
 800a0ce:	18c0      	addlt	r0, r0, r3
 800a0d0:	4770      	bx	lr
	...

0800a0d4 <_init>:
 800a0d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a0d6:	bf00      	nop
 800a0d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a0da:	bc08      	pop	{r3}
 800a0dc:	469e      	mov	lr, r3
 800a0de:	4770      	bx	lr

0800a0e0 <_fini>:
 800a0e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a0e2:	bf00      	nop
 800a0e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a0e6:	bc08      	pop	{r3}
 800a0e8:	469e      	mov	lr, r3
 800a0ea:	4770      	bx	lr
