
main.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000084e4  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000009a8  080085f8  080085f8  000185f8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008fa0  08008fa0  000201e8  2**0
                  CONTENTS
  4 .ARM          00000000  08008fa0  08008fa0  000201e8  2**0
                  CONTENTS
  5 .preinit_array 00000000  08008fa0  08008fa0  000201e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008fa0  08008fa0  00018fa0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008fa4  08008fa4  00018fa4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e8  20000000  08008fa8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000076c  200001e8  08009190  000201e8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000954  08009190  00020954  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201e8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001818c  00000000  00000000  00020211  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003202  00000000  00000000  0003839d  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000e78  00000000  00000000  0003b5a0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000d08  00000000  00000000  0003c418  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00017cb9  00000000  00000000  0003d120  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000f11e  00000000  00000000  00054dd9  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00078435  00000000  00000000  00063ef7  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000dc32c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004828  00000000  00000000  000dc3a8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001e8 	.word	0x200001e8
 800012c:	00000000 	.word	0x00000000
 8000130:	080085dc 	.word	0x080085dc

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001ec 	.word	0x200001ec
 800014c:	080085dc 	.word	0x080085dc

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800029e:	f1a4 0401 	sub.w	r4, r4, #1
 80002a2:	d1e9      	bne.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2uiz>:
 8000a88:	004a      	lsls	r2, r1, #1
 8000a8a:	d211      	bcs.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a90:	d211      	bcs.n	8000ab6 <__aeabi_d2uiz+0x2e>
 8000a92:	d50d      	bpl.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a9c:	d40e      	bmi.n	8000abc <__aeabi_d2uiz+0x34>
 8000a9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aa6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_d2uiz+0x3a>
 8000abc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0000 	mov.w	r0, #0
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_d2f>:
 8000ac8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000acc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ad0:	bf24      	itt	cs
 8000ad2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ad6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ada:	d90d      	bls.n	8000af8 <__aeabi_d2f+0x30>
 8000adc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ae0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000af0:	bf08      	it	eq
 8000af2:	f020 0001 	biceq.w	r0, r0, #1
 8000af6:	4770      	bx	lr
 8000af8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000afc:	d121      	bne.n	8000b42 <__aeabi_d2f+0x7a>
 8000afe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b02:	bfbc      	itt	lt
 8000b04:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b08:	4770      	bxlt	lr
 8000b0a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b12:	f1c2 0218 	rsb	r2, r2, #24
 8000b16:	f1c2 0c20 	rsb	ip, r2, #32
 8000b1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b22:	bf18      	it	ne
 8000b24:	f040 0001 	orrne.w	r0, r0, #1
 8000b28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b34:	ea40 000c 	orr.w	r0, r0, ip
 8000b38:	fa23 f302 	lsr.w	r3, r3, r2
 8000b3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b40:	e7cc      	b.n	8000adc <__aeabi_d2f+0x14>
 8000b42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b46:	d107      	bne.n	8000b58 <__aeabi_d2f+0x90>
 8000b48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b4c:	bf1e      	ittt	ne
 8000b4e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b52:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b56:	4770      	bxne	lr
 8000b58:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b5c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b60:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop

08000b68 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	b084      	sub	sp, #16
 8000b6c:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig;

    /**Common config
    */
  hadc1.Instance = ADC1;
 8000b6e:	4b23      	ldr	r3, [pc, #140]	; (8000bfc <MX_ADC1_Init+0x94>)
 8000b70:	4a23      	ldr	r2, [pc, #140]	; (8000c00 <MX_ADC1_Init+0x98>)
 8000b72:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000b74:	4b21      	ldr	r3, [pc, #132]	; (8000bfc <MX_ADC1_Init+0x94>)
 8000b76:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000b7a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000b7c:	4b1f      	ldr	r3, [pc, #124]	; (8000bfc <MX_ADC1_Init+0x94>)
 8000b7e:	2201      	movs	r2, #1
 8000b80:	60da      	str	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000b82:	4b1e      	ldr	r3, [pc, #120]	; (8000bfc <MX_ADC1_Init+0x94>)
 8000b84:	2200      	movs	r2, #0
 8000b86:	615a      	str	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000b88:	4b1c      	ldr	r3, [pc, #112]	; (8000bfc <MX_ADC1_Init+0x94>)
 8000b8a:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8000b8e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000b90:	4b1a      	ldr	r3, [pc, #104]	; (8000bfc <MX_ADC1_Init+0x94>)
 8000b92:	2200      	movs	r2, #0
 8000b94:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 2;
 8000b96:	4b19      	ldr	r3, [pc, #100]	; (8000bfc <MX_ADC1_Init+0x94>)
 8000b98:	2202      	movs	r2, #2
 8000b9a:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000b9c:	4817      	ldr	r0, [pc, #92]	; (8000bfc <MX_ADC1_Init+0x94>)
 8000b9e:	f001 facd 	bl	800213c <HAL_ADC_Init>
 8000ba2:	4603      	mov	r3, r0
 8000ba4:	2b00      	cmp	r3, #0
 8000ba6:	d003      	beq.n	8000bb0 <MX_ADC1_Init+0x48>
  {
    _Error_Handler(__FILE__, __LINE__);
 8000ba8:	2145      	movs	r1, #69	; 0x45
 8000baa:	4816      	ldr	r0, [pc, #88]	; (8000c04 <MX_ADC1_Init+0x9c>)
 8000bac:	f000 fe0a 	bl	80017c4 <_Error_Handler>
  }

    /**Configure Regular Channel
    */
  sConfig.Channel = ADC_CHANNEL_8;
 8000bb0:	2308      	movs	r3, #8
 8000bb2:	607b      	str	r3, [r7, #4]
  sConfig.Rank = 1;
 8000bb4:	2301      	movs	r3, #1
 8000bb6:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000bb8:	2300      	movs	r3, #0
 8000bba:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000bbc:	1d3b      	adds	r3, r7, #4
 8000bbe:	4619      	mov	r1, r3
 8000bc0:	480e      	ldr	r0, [pc, #56]	; (8000bfc <MX_ADC1_Init+0x94>)
 8000bc2:	f001 fc8d 	bl	80024e0 <HAL_ADC_ConfigChannel>
 8000bc6:	4603      	mov	r3, r0
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	d003      	beq.n	8000bd4 <MX_ADC1_Init+0x6c>
  {
    _Error_Handler(__FILE__, __LINE__);
 8000bcc:	214f      	movs	r1, #79	; 0x4f
 8000bce:	480d      	ldr	r0, [pc, #52]	; (8000c04 <MX_ADC1_Init+0x9c>)
 8000bd0:	f000 fdf8 	bl	80017c4 <_Error_Handler>
  }

    /**Configure Regular Channel
    */
  sConfig.Channel = ADC_CHANNEL_7;
 8000bd4:	2307      	movs	r3, #7
 8000bd6:	607b      	str	r3, [r7, #4]
  sConfig.Rank = 2;
 8000bd8:	2302      	movs	r3, #2
 8000bda:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000bdc:	1d3b      	adds	r3, r7, #4
 8000bde:	4619      	mov	r1, r3
 8000be0:	4806      	ldr	r0, [pc, #24]	; (8000bfc <MX_ADC1_Init+0x94>)
 8000be2:	f001 fc7d 	bl	80024e0 <HAL_ADC_ConfigChannel>
 8000be6:	4603      	mov	r3, r0
 8000be8:	2b00      	cmp	r3, #0
 8000bea:	d003      	beq.n	8000bf4 <MX_ADC1_Init+0x8c>
  {
    _Error_Handler(__FILE__, __LINE__);
 8000bec:	2158      	movs	r1, #88	; 0x58
 8000bee:	4805      	ldr	r0, [pc, #20]	; (8000c04 <MX_ADC1_Init+0x9c>)
 8000bf0:	f000 fde8 	bl	80017c4 <_Error_Handler>
  }

}
 8000bf4:	bf00      	nop
 8000bf6:	3710      	adds	r7, #16
 8000bf8:	46bd      	mov	sp, r7
 8000bfa:	bd80      	pop	{r7, pc}
 8000bfc:	20000658 	.word	0x20000658
 8000c00:	40012400 	.word	0x40012400
 8000c04:	080085f8 	.word	0x080085f8

08000c08 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	b088      	sub	sp, #32
 8000c0c:	af00      	add	r7, sp, #0
 8000c0e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  if(adcHandle->Instance==ADC1)
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	681b      	ldr	r3, [r3, #0]
 8000c14:	4a28      	ldr	r2, [pc, #160]	; (8000cb8 <HAL_ADC_MspInit+0xb0>)
 8000c16:	4293      	cmp	r3, r2
 8000c18:	d149      	bne.n	8000cae <HAL_ADC_MspInit+0xa6>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000c1a:	4b28      	ldr	r3, [pc, #160]	; (8000cbc <HAL_ADC_MspInit+0xb4>)
 8000c1c:	699b      	ldr	r3, [r3, #24]
 8000c1e:	4a27      	ldr	r2, [pc, #156]	; (8000cbc <HAL_ADC_MspInit+0xb4>)
 8000c20:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000c24:	6193      	str	r3, [r2, #24]
 8000c26:	4b25      	ldr	r3, [pc, #148]	; (8000cbc <HAL_ADC_MspInit+0xb4>)
 8000c28:	699b      	ldr	r3, [r3, #24]
 8000c2a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000c2e:	60fb      	str	r3, [r7, #12]
 8000c30:	68fb      	ldr	r3, [r7, #12]

    /**ADC1 GPIO Configuration
    PA7     ------> ADC1_IN7
    PB0     ------> ADC1_IN8
    */
    GPIO_InitStruct.Pin = ADC1_Pin;
 8000c32:	2380      	movs	r3, #128	; 0x80
 8000c34:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000c36:	2303      	movs	r3, #3
 8000c38:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(ADC1_GPIO_Port, &GPIO_InitStruct);
 8000c3a:	f107 0310 	add.w	r3, r7, #16
 8000c3e:	4619      	mov	r1, r3
 8000c40:	481f      	ldr	r0, [pc, #124]	; (8000cc0 <HAL_ADC_MspInit+0xb8>)
 8000c42:	f002 f963 	bl	8002f0c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ADC2_Pin;
 8000c46:	2301      	movs	r3, #1
 8000c48:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000c4a:	2303      	movs	r3, #3
 8000c4c:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(ADC2_GPIO_Port, &GPIO_InitStruct);
 8000c4e:	f107 0310 	add.w	r3, r7, #16
 8000c52:	4619      	mov	r1, r3
 8000c54:	481b      	ldr	r0, [pc, #108]	; (8000cc4 <HAL_ADC_MspInit+0xbc>)
 8000c56:	f002 f959 	bl	8002f0c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8000c5a:	4b1b      	ldr	r3, [pc, #108]	; (8000cc8 <HAL_ADC_MspInit+0xc0>)
 8000c5c:	4a1b      	ldr	r2, [pc, #108]	; (8000ccc <HAL_ADC_MspInit+0xc4>)
 8000c5e:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000c60:	4b19      	ldr	r3, [pc, #100]	; (8000cc8 <HAL_ADC_MspInit+0xc0>)
 8000c62:	2200      	movs	r2, #0
 8000c64:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000c66:	4b18      	ldr	r3, [pc, #96]	; (8000cc8 <HAL_ADC_MspInit+0xc0>)
 8000c68:	2200      	movs	r2, #0
 8000c6a:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000c6c:	4b16      	ldr	r3, [pc, #88]	; (8000cc8 <HAL_ADC_MspInit+0xc0>)
 8000c6e:	2280      	movs	r2, #128	; 0x80
 8000c70:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000c72:	4b15      	ldr	r3, [pc, #84]	; (8000cc8 <HAL_ADC_MspInit+0xc0>)
 8000c74:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000c78:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000c7a:	4b13      	ldr	r3, [pc, #76]	; (8000cc8 <HAL_ADC_MspInit+0xc0>)
 8000c7c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000c80:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000c82:	4b11      	ldr	r3, [pc, #68]	; (8000cc8 <HAL_ADC_MspInit+0xc0>)
 8000c84:	2220      	movs	r2, #32
 8000c86:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000c88:	4b0f      	ldr	r3, [pc, #60]	; (8000cc8 <HAL_ADC_MspInit+0xc0>)
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000c8e:	480e      	ldr	r0, [pc, #56]	; (8000cc8 <HAL_ADC_MspInit+0xc0>)
 8000c90:	f001 ff42 	bl	8002b18 <HAL_DMA_Init>
 8000c94:	4603      	mov	r3, r0
 8000c96:	2b00      	cmp	r3, #0
 8000c98:	d003      	beq.n	8000ca2 <HAL_ADC_MspInit+0x9a>
    {
      _Error_Handler(__FILE__, __LINE__);
 8000c9a:	2181      	movs	r1, #129	; 0x81
 8000c9c:	480c      	ldr	r0, [pc, #48]	; (8000cd0 <HAL_ADC_MspInit+0xc8>)
 8000c9e:	f000 fd91 	bl	80017c4 <_Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	4a08      	ldr	r2, [pc, #32]	; (8000cc8 <HAL_ADC_MspInit+0xc0>)
 8000ca6:	621a      	str	r2, [r3, #32]
 8000ca8:	4a07      	ldr	r2, [pc, #28]	; (8000cc8 <HAL_ADC_MspInit+0xc0>)
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	6253      	str	r3, [r2, #36]	; 0x24

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000cae:	bf00      	nop
 8000cb0:	3720      	adds	r7, #32
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	bd80      	pop	{r7, pc}
 8000cb6:	bf00      	nop
 8000cb8:	40012400 	.word	0x40012400
 8000cbc:	40021000 	.word	0x40021000
 8000cc0:	40010800 	.word	0x40010800
 8000cc4:	40010c00 	.word	0x40010c00
 8000cc8:	20000688 	.word	0x20000688
 8000ccc:	40020008 	.word	0x40020008
 8000cd0:	080085f8 	.word	0x080085f8

08000cd4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	b082      	sub	sp, #8
 8000cd8:	af00      	add	r7, sp, #0
  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000cda:	4b0c      	ldr	r3, [pc, #48]	; (8000d0c <MX_DMA_Init+0x38>)
 8000cdc:	695b      	ldr	r3, [r3, #20]
 8000cde:	4a0b      	ldr	r2, [pc, #44]	; (8000d0c <MX_DMA_Init+0x38>)
 8000ce0:	f043 0301 	orr.w	r3, r3, #1
 8000ce4:	6153      	str	r3, [r2, #20]
 8000ce6:	4b09      	ldr	r3, [pc, #36]	; (8000d0c <MX_DMA_Init+0x38>)
 8000ce8:	695b      	ldr	r3, [r3, #20]
 8000cea:	f003 0301 	and.w	r3, r3, #1
 8000cee:	607b      	str	r3, [r7, #4]
 8000cf0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	2100      	movs	r1, #0
 8000cf6:	200b      	movs	r0, #11
 8000cf8:	f001 feaf 	bl	8002a5a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000cfc:	200b      	movs	r0, #11
 8000cfe:	f001 fec8 	bl	8002a92 <HAL_NVIC_EnableIRQ>

}
 8000d02:	bf00      	nop
 8000d04:	3708      	adds	r7, #8
 8000d06:	46bd      	mov	sp, r7
 8000d08:	bd80      	pop	{r7, pc}
 8000d0a:	bf00      	nop
 8000d0c:	40021000 	.word	0x40021000

08000d10 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	b088      	sub	sp, #32
 8000d14:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d16:	4b31      	ldr	r3, [pc, #196]	; (8000ddc <MX_GPIO_Init+0xcc>)
 8000d18:	699b      	ldr	r3, [r3, #24]
 8000d1a:	4a30      	ldr	r2, [pc, #192]	; (8000ddc <MX_GPIO_Init+0xcc>)
 8000d1c:	f043 0310 	orr.w	r3, r3, #16
 8000d20:	6193      	str	r3, [r2, #24]
 8000d22:	4b2e      	ldr	r3, [pc, #184]	; (8000ddc <MX_GPIO_Init+0xcc>)
 8000d24:	699b      	ldr	r3, [r3, #24]
 8000d26:	f003 0310 	and.w	r3, r3, #16
 8000d2a:	60fb      	str	r3, [r7, #12]
 8000d2c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d2e:	4b2b      	ldr	r3, [pc, #172]	; (8000ddc <MX_GPIO_Init+0xcc>)
 8000d30:	699b      	ldr	r3, [r3, #24]
 8000d32:	4a2a      	ldr	r2, [pc, #168]	; (8000ddc <MX_GPIO_Init+0xcc>)
 8000d34:	f043 0304 	orr.w	r3, r3, #4
 8000d38:	6193      	str	r3, [r2, #24]
 8000d3a:	4b28      	ldr	r3, [pc, #160]	; (8000ddc <MX_GPIO_Init+0xcc>)
 8000d3c:	699b      	ldr	r3, [r3, #24]
 8000d3e:	f003 0304 	and.w	r3, r3, #4
 8000d42:	60bb      	str	r3, [r7, #8]
 8000d44:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d46:	4b25      	ldr	r3, [pc, #148]	; (8000ddc <MX_GPIO_Init+0xcc>)
 8000d48:	699b      	ldr	r3, [r3, #24]
 8000d4a:	4a24      	ldr	r2, [pc, #144]	; (8000ddc <MX_GPIO_Init+0xcc>)
 8000d4c:	f043 0308 	orr.w	r3, r3, #8
 8000d50:	6193      	str	r3, [r2, #24]
 8000d52:	4b22      	ldr	r3, [pc, #136]	; (8000ddc <MX_GPIO_Init+0xcc>)
 8000d54:	699b      	ldr	r3, [r3, #24]
 8000d56:	f003 0308 	and.w	r3, r3, #8
 8000d5a:	607b      	str	r3, [r7, #4]
 8000d5c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000d5e:	2200      	movs	r2, #0
 8000d60:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000d64:	481e      	ldr	r0, [pc, #120]	; (8000de0 <MX_GPIO_Init+0xd0>)
 8000d66:	f002 fa46 	bl	80031f6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, OUTPUT_M1_Pin|OUTPUT_M2_Pin, GPIO_PIN_RESET);
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	f44f 7140 	mov.w	r1, #768	; 0x300
 8000d70:	481c      	ldr	r0, [pc, #112]	; (8000de4 <MX_GPIO_Init+0xd4>)
 8000d72:	f002 fa40 	bl	80031f6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000d76:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000d7a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d7c:	2301      	movs	r3, #1
 8000d7e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d80:	2302      	movs	r3, #2
 8000d82:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d84:	f107 0310 	add.w	r3, r7, #16
 8000d88:	4619      	mov	r1, r3
 8000d8a:	4815      	ldr	r0, [pc, #84]	; (8000de0 <MX_GPIO_Init+0xd0>)
 8000d8c:	f002 f8be 	bl	8002f0c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = INPUT_B1_Pin|INPUT_B2_Pin|INPUT_B3_Pin|INPUT_B4_Pin;
 8000d90:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8000d94:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000d96:	4b14      	ldr	r3, [pc, #80]	; (8000de8 <MX_GPIO_Init+0xd8>)
 8000d98:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000d9a:	2302      	movs	r3, #2
 8000d9c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d9e:	f107 0310 	add.w	r3, r7, #16
 8000da2:	4619      	mov	r1, r3
 8000da4:	4811      	ldr	r0, [pc, #68]	; (8000dec <MX_GPIO_Init+0xdc>)
 8000da6:	f002 f8b1 	bl	8002f0c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = OUTPUT_M1_Pin|OUTPUT_M2_Pin;
 8000daa:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000dae:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000db0:	2301      	movs	r3, #1
 8000db2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000db4:	2302      	movs	r3, #2
 8000db6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000db8:	f107 0310 	add.w	r3, r7, #16
 8000dbc:	4619      	mov	r1, r3
 8000dbe:	4809      	ldr	r0, [pc, #36]	; (8000de4 <MX_GPIO_Init+0xd4>)
 8000dc0:	f002 f8a4 	bl	8002f0c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	2100      	movs	r1, #0
 8000dc8:	2028      	movs	r0, #40	; 0x28
 8000dca:	f001 fe46 	bl	8002a5a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000dce:	2028      	movs	r0, #40	; 0x28
 8000dd0:	f001 fe5f 	bl	8002a92 <HAL_NVIC_EnableIRQ>

}
 8000dd4:	bf00      	nop
 8000dd6:	3720      	adds	r7, #32
 8000dd8:	46bd      	mov	sp, r7
 8000dda:	bd80      	pop	{r7, pc}
 8000ddc:	40021000 	.word	0x40021000
 8000de0:	40011000 	.word	0x40011000
 8000de4:	40010800 	.word	0x40010800
 8000de8:	10110000 	.word	0x10110000
 8000dec:	40010c00 	.word	0x40010c00

08000df0 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000df0:	b580      	push	{r7, lr}
 8000df2:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 8000df4:	4b13      	ldr	r3, [pc, #76]	; (8000e44 <MX_I2C1_Init+0x54>)
 8000df6:	4a14      	ldr	r2, [pc, #80]	; (8000e48 <MX_I2C1_Init+0x58>)
 8000df8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000dfa:	4b12      	ldr	r3, [pc, #72]	; (8000e44 <MX_I2C1_Init+0x54>)
 8000dfc:	4a13      	ldr	r2, [pc, #76]	; (8000e4c <MX_I2C1_Init+0x5c>)
 8000dfe:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000e00:	4b10      	ldr	r3, [pc, #64]	; (8000e44 <MX_I2C1_Init+0x54>)
 8000e02:	2200      	movs	r2, #0
 8000e04:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000e06:	4b0f      	ldr	r3, [pc, #60]	; (8000e44 <MX_I2C1_Init+0x54>)
 8000e08:	2200      	movs	r2, #0
 8000e0a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000e0c:	4b0d      	ldr	r3, [pc, #52]	; (8000e44 <MX_I2C1_Init+0x54>)
 8000e0e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000e12:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000e14:	4b0b      	ldr	r3, [pc, #44]	; (8000e44 <MX_I2C1_Init+0x54>)
 8000e16:	2200      	movs	r2, #0
 8000e18:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000e1a:	4b0a      	ldr	r3, [pc, #40]	; (8000e44 <MX_I2C1_Init+0x54>)
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000e20:	4b08      	ldr	r3, [pc, #32]	; (8000e44 <MX_I2C1_Init+0x54>)
 8000e22:	2200      	movs	r2, #0
 8000e24:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000e26:	4b07      	ldr	r3, [pc, #28]	; (8000e44 <MX_I2C1_Init+0x54>)
 8000e28:	2200      	movs	r2, #0
 8000e2a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000e2c:	4805      	ldr	r0, [pc, #20]	; (8000e44 <MX_I2C1_Init+0x54>)
 8000e2e:	f002 fa23 	bl	8003278 <HAL_I2C_Init>
 8000e32:	4603      	mov	r3, r0
 8000e34:	2b00      	cmp	r3, #0
 8000e36:	d003      	beq.n	8000e40 <MX_I2C1_Init+0x50>
  {
    _Error_Handler(__FILE__, __LINE__);
 8000e38:	2142      	movs	r1, #66	; 0x42
 8000e3a:	4805      	ldr	r0, [pc, #20]	; (8000e50 <MX_I2C1_Init+0x60>)
 8000e3c:	f000 fcc2 	bl	80017c4 <_Error_Handler>
  }

}
 8000e40:	bf00      	nop
 8000e42:	bd80      	pop	{r7, pc}
 8000e44:	200006cc 	.word	0x200006cc
 8000e48:	40005400 	.word	0x40005400
 8000e4c:	000186a0 	.word	0x000186a0
 8000e50:	0800860c 	.word	0x0800860c

08000e54 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000e54:	b580      	push	{r7, lr}
 8000e56:	b088      	sub	sp, #32
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  if(i2cHandle->Instance==I2C1)
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	4a0f      	ldr	r2, [pc, #60]	; (8000ea0 <HAL_I2C_MspInit+0x4c>)
 8000e62:	4293      	cmp	r3, r2
 8000e64:	d117      	bne.n	8000e96 <HAL_I2C_MspInit+0x42>

    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000e66:	23c0      	movs	r3, #192	; 0xc0
 8000e68:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000e6a:	2312      	movs	r3, #18
 8000e6c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000e6e:	2303      	movs	r3, #3
 8000e70:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e72:	f107 0310 	add.w	r3, r7, #16
 8000e76:	4619      	mov	r1, r3
 8000e78:	480a      	ldr	r0, [pc, #40]	; (8000ea4 <HAL_I2C_MspInit+0x50>)
 8000e7a:	f002 f847 	bl	8002f0c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000e7e:	4b0a      	ldr	r3, [pc, #40]	; (8000ea8 <HAL_I2C_MspInit+0x54>)
 8000e80:	69db      	ldr	r3, [r3, #28]
 8000e82:	4a09      	ldr	r2, [pc, #36]	; (8000ea8 <HAL_I2C_MspInit+0x54>)
 8000e84:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000e88:	61d3      	str	r3, [r2, #28]
 8000e8a:	4b07      	ldr	r3, [pc, #28]	; (8000ea8 <HAL_I2C_MspInit+0x54>)
 8000e8c:	69db      	ldr	r3, [r3, #28]
 8000e8e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000e92:	60fb      	str	r3, [r7, #12]
 8000e94:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000e96:	bf00      	nop
 8000e98:	3720      	adds	r7, #32
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	bd80      	pop	{r7, pc}
 8000e9e:	bf00      	nop
 8000ea0:	40005400 	.word	0x40005400
 8000ea4:	40010c00 	.word	0x40010c00
 8000ea8:	40021000 	.word	0x40021000

08000eac <motor_control>:
/* Private function prototypes -----------------------------------------------*/

/* USER CODE END PFP */

/* USER CODE BEGIN 0 */
void motor_control(int dir, int pwm) {
 8000eac:	b580      	push	{r7, lr}
 8000eae:	b082      	sub	sp, #8
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	6078      	str	r0, [r7, #4]
 8000eb4:	6039      	str	r1, [r7, #0]
	if (dir >= 1) {
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	2b00      	cmp	r3, #0
 8000eba:	dd1e      	ble.n	8000efa <motor_control+0x4e>
		OUTPUT_1_State = 1;
 8000ebc:	4b32      	ldr	r3, [pc, #200]	; (8000f88 <motor_control+0xdc>)
 8000ebe:	2201      	movs	r2, #1
 8000ec0:	601a      	str	r2, [r3, #0]
		OUTPUT_2_State = 0;
 8000ec2:	4b32      	ldr	r3, [pc, #200]	; (8000f8c <motor_control+0xe0>)
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	601a      	str	r2, [r3, #0]
		HAL_GPIO_WritePin(OUTPUT_M1_GPIO_Port, OUTPUT_M1_Pin, 1);
 8000ec8:	2201      	movs	r2, #1
 8000eca:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000ece:	4830      	ldr	r0, [pc, #192]	; (8000f90 <motor_control+0xe4>)
 8000ed0:	f002 f991 	bl	80031f6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(OUTPUT_M2_GPIO_Port, OUTPUT_M2_Pin, 0);
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000eda:	482d      	ldr	r0, [pc, #180]	; (8000f90 <motor_control+0xe4>)
 8000edc:	f002 f98b 	bl	80031f6 <HAL_GPIO_WritePin>
		PWM1 = pwm;
 8000ee0:	683b      	ldr	r3, [r7, #0]
 8000ee2:	4a2c      	ldr	r2, [pc, #176]	; (8000f94 <motor_control+0xe8>)
 8000ee4:	6013      	str	r3, [r2, #0]
		PWM2 = 0;
 8000ee6:	4b2c      	ldr	r3, [pc, #176]	; (8000f98 <motor_control+0xec>)
 8000ee8:	2200      	movs	r2, #0
 8000eea:	601a      	str	r2, [r3, #0]
		user_pwm_setvalue_1(pwm);
 8000eec:	6838      	ldr	r0, [r7, #0]
 8000eee:	f000 fe19 	bl	8001b24 <user_pwm_setvalue_1>
		user_pwm_setvalue_2(0);
 8000ef2:	2000      	movs	r0, #0
 8000ef4:	f000 fe34 	bl	8001b60 <user_pwm_setvalue_2>
		HAL_GPIO_WritePin(OUTPUT_M1_GPIO_Port, OUTPUT_M1_Pin, 0);
		HAL_GPIO_WritePin(OUTPUT_M2_GPIO_Port, OUTPUT_M2_Pin, 0);
		user_pwm_setvalue_1(0);
		user_pwm_setvalue_2(0);
	}
}
 8000ef8:	e042      	b.n	8000f80 <motor_control+0xd4>
	} else if (dir <= -1) {
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	da1e      	bge.n	8000f3e <motor_control+0x92>
		OUTPUT_1_State = 0;
 8000f00:	4b21      	ldr	r3, [pc, #132]	; (8000f88 <motor_control+0xdc>)
 8000f02:	2200      	movs	r2, #0
 8000f04:	601a      	str	r2, [r3, #0]
		OUTPUT_2_State = 1;
 8000f06:	4b21      	ldr	r3, [pc, #132]	; (8000f8c <motor_control+0xe0>)
 8000f08:	2201      	movs	r2, #1
 8000f0a:	601a      	str	r2, [r3, #0]
		HAL_GPIO_WritePin(OUTPUT_M1_GPIO_Port, OUTPUT_M1_Pin, 0);
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000f12:	481f      	ldr	r0, [pc, #124]	; (8000f90 <motor_control+0xe4>)
 8000f14:	f002 f96f 	bl	80031f6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(OUTPUT_M2_GPIO_Port, OUTPUT_M2_Pin, 1);
 8000f18:	2201      	movs	r2, #1
 8000f1a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000f1e:	481c      	ldr	r0, [pc, #112]	; (8000f90 <motor_control+0xe4>)
 8000f20:	f002 f969 	bl	80031f6 <HAL_GPIO_WritePin>
		PWM1 = 0;
 8000f24:	4b1b      	ldr	r3, [pc, #108]	; (8000f94 <motor_control+0xe8>)
 8000f26:	2200      	movs	r2, #0
 8000f28:	601a      	str	r2, [r3, #0]
		PWM2 = pwm;
 8000f2a:	683b      	ldr	r3, [r7, #0]
 8000f2c:	4a1a      	ldr	r2, [pc, #104]	; (8000f98 <motor_control+0xec>)
 8000f2e:	6013      	str	r3, [r2, #0]
		user_pwm_setvalue_1(0);
 8000f30:	2000      	movs	r0, #0
 8000f32:	f000 fdf7 	bl	8001b24 <user_pwm_setvalue_1>
		user_pwm_setvalue_2(pwm);
 8000f36:	6838      	ldr	r0, [r7, #0]
 8000f38:	f000 fe12 	bl	8001b60 <user_pwm_setvalue_2>
}
 8000f3c:	e020      	b.n	8000f80 <motor_control+0xd4>
	} else if (dir == 0) {
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	d11d      	bne.n	8000f80 <motor_control+0xd4>
		OUTPUT_1_State = 0;
 8000f44:	4b10      	ldr	r3, [pc, #64]	; (8000f88 <motor_control+0xdc>)
 8000f46:	2200      	movs	r2, #0
 8000f48:	601a      	str	r2, [r3, #0]
		OUTPUT_2_State = 0;
 8000f4a:	4b10      	ldr	r3, [pc, #64]	; (8000f8c <motor_control+0xe0>)
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	601a      	str	r2, [r3, #0]
		PWM1 = 0;
 8000f50:	4b10      	ldr	r3, [pc, #64]	; (8000f94 <motor_control+0xe8>)
 8000f52:	2200      	movs	r2, #0
 8000f54:	601a      	str	r2, [r3, #0]
		PWM2 = 0;
 8000f56:	4b10      	ldr	r3, [pc, #64]	; (8000f98 <motor_control+0xec>)
 8000f58:	2200      	movs	r2, #0
 8000f5a:	601a      	str	r2, [r3, #0]
		HAL_GPIO_WritePin(OUTPUT_M1_GPIO_Port, OUTPUT_M1_Pin, 0);
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000f62:	480b      	ldr	r0, [pc, #44]	; (8000f90 <motor_control+0xe4>)
 8000f64:	f002 f947 	bl	80031f6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(OUTPUT_M2_GPIO_Port, OUTPUT_M2_Pin, 0);
 8000f68:	2200      	movs	r2, #0
 8000f6a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000f6e:	4808      	ldr	r0, [pc, #32]	; (8000f90 <motor_control+0xe4>)
 8000f70:	f002 f941 	bl	80031f6 <HAL_GPIO_WritePin>
		user_pwm_setvalue_1(0);
 8000f74:	2000      	movs	r0, #0
 8000f76:	f000 fdd5 	bl	8001b24 <user_pwm_setvalue_1>
		user_pwm_setvalue_2(0);
 8000f7a:	2000      	movs	r0, #0
 8000f7c:	f000 fdf0 	bl	8001b60 <user_pwm_setvalue_2>
}
 8000f80:	bf00      	nop
 8000f82:	3708      	adds	r7, #8
 8000f84:	46bd      	mov	sp, r7
 8000f86:	bd80      	pop	{r7, pc}
 8000f88:	2000021c 	.word	0x2000021c
 8000f8c:	20000220 	.word	0x20000220
 8000f90:	40010800 	.word	0x40010800
 8000f94:	20000214 	.word	0x20000214
 8000f98:	20000218 	.word	0x20000218

08000f9c <clean_buttom_flag>:

void clean_buttom_flag(void) {
 8000f9c:	b480      	push	{r7}
 8000f9e:	af00      	add	r7, sp, #0
	//Usart2DmaPrintf("clena\n");
	for (i = 0; i <= 5; i++) { //clean flag
 8000fa0:	4b0b      	ldr	r3, [pc, #44]	; (8000fd0 <clean_buttom_flag+0x34>)
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	601a      	str	r2, [r3, #0]
 8000fa6:	e00a      	b.n	8000fbe <clean_buttom_flag+0x22>
		buttom_flag[i] = 0;
 8000fa8:	4b09      	ldr	r3, [pc, #36]	; (8000fd0 <clean_buttom_flag+0x34>)
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	4a09      	ldr	r2, [pc, #36]	; (8000fd4 <clean_buttom_flag+0x38>)
 8000fae:	2100      	movs	r1, #0
 8000fb0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (i = 0; i <= 5; i++) { //clean flag
 8000fb4:	4b06      	ldr	r3, [pc, #24]	; (8000fd0 <clean_buttom_flag+0x34>)
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	3301      	adds	r3, #1
 8000fba:	4a05      	ldr	r2, [pc, #20]	; (8000fd0 <clean_buttom_flag+0x34>)
 8000fbc:	6013      	str	r3, [r2, #0]
 8000fbe:	4b04      	ldr	r3, [pc, #16]	; (8000fd0 <clean_buttom_flag+0x34>)
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	2b05      	cmp	r3, #5
 8000fc4:	ddf0      	ble.n	8000fa8 <clean_buttom_flag+0xc>
		//HAL_Delay(1);
	}
}
 8000fc6:	bf00      	nop
 8000fc8:	46bd      	mov	sp, r7
 8000fca:	bc80      	pop	{r7}
 8000fcc:	4770      	bx	lr
 8000fce:	bf00      	nop
 8000fd0:	200008fc 	.word	0x200008fc
 8000fd4:	20000230 	.word	0x20000230

08000fd8 <read_ADC>:
int read_ADC() {
 8000fd8:	b480      	push	{r7}
 8000fda:	af00      	add	r7, sp, #0
	for (i = 0, ad1 = 0, ad2 = 0; i < 10;) {
 8000fdc:	4b22      	ldr	r3, [pc, #136]	; (8001068 <read_ADC+0x90>)
 8000fde:	2200      	movs	r2, #0
 8000fe0:	601a      	str	r2, [r3, #0]
 8000fe2:	4b22      	ldr	r3, [pc, #136]	; (800106c <read_ADC+0x94>)
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	601a      	str	r2, [r3, #0]
 8000fe8:	4b21      	ldr	r3, [pc, #132]	; (8001070 <read_ADC+0x98>)
 8000fea:	2200      	movs	r2, #0
 8000fec:	601a      	str	r2, [r3, #0]
 8000fee:	e019      	b.n	8001024 <read_ADC+0x4c>
		ad1 += ADC_Value[i++];
 8000ff0:	4b1d      	ldr	r3, [pc, #116]	; (8001068 <read_ADC+0x90>)
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	1c5a      	adds	r2, r3, #1
 8000ff6:	491c      	ldr	r1, [pc, #112]	; (8001068 <read_ADC+0x90>)
 8000ff8:	600a      	str	r2, [r1, #0]
 8000ffa:	4a1e      	ldr	r2, [pc, #120]	; (8001074 <read_ADC+0x9c>)
 8000ffc:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001000:	4b1a      	ldr	r3, [pc, #104]	; (800106c <read_ADC+0x94>)
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	4413      	add	r3, r2
 8001006:	4a19      	ldr	r2, [pc, #100]	; (800106c <read_ADC+0x94>)
 8001008:	6013      	str	r3, [r2, #0]
		ad2 += ADC_Value[i++];
 800100a:	4b17      	ldr	r3, [pc, #92]	; (8001068 <read_ADC+0x90>)
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	1c5a      	adds	r2, r3, #1
 8001010:	4915      	ldr	r1, [pc, #84]	; (8001068 <read_ADC+0x90>)
 8001012:	600a      	str	r2, [r1, #0]
 8001014:	4a17      	ldr	r2, [pc, #92]	; (8001074 <read_ADC+0x9c>)
 8001016:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800101a:	4b15      	ldr	r3, [pc, #84]	; (8001070 <read_ADC+0x98>)
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	4413      	add	r3, r2
 8001020:	4a13      	ldr	r2, [pc, #76]	; (8001070 <read_ADC+0x98>)
 8001022:	6013      	str	r3, [r2, #0]
	for (i = 0, ad1 = 0, ad2 = 0; i < 10;) {
 8001024:	4b10      	ldr	r3, [pc, #64]	; (8001068 <read_ADC+0x90>)
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	2b09      	cmp	r3, #9
 800102a:	dde1      	ble.n	8000ff0 <read_ADC+0x18>
		//HAL_Delay(1);
	}
	real_adc1 = ad1 / 5;
 800102c:	4b0f      	ldr	r3, [pc, #60]	; (800106c <read_ADC+0x94>)
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	4a11      	ldr	r2, [pc, #68]	; (8001078 <read_ADC+0xa0>)
 8001032:	fba2 2303 	umull	r2, r3, r2, r3
 8001036:	089b      	lsrs	r3, r3, #2
 8001038:	4a10      	ldr	r2, [pc, #64]	; (800107c <read_ADC+0xa4>)
 800103a:	6013      	str	r3, [r2, #0]
	real_adc2 = ad2 / 5;
 800103c:	4b0c      	ldr	r3, [pc, #48]	; (8001070 <read_ADC+0x98>)
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	4a0d      	ldr	r2, [pc, #52]	; (8001078 <read_ADC+0xa0>)
 8001042:	fba2 2303 	umull	r2, r3, r2, r3
 8001046:	089b      	lsrs	r3, r3, #2
 8001048:	4a0d      	ldr	r2, [pc, #52]	; (8001080 <read_ADC+0xa8>)
 800104a:	6013      	str	r3, [r2, #0]
	if (real_adc1 <= real_adc2) {
 800104c:	4b0b      	ldr	r3, [pc, #44]	; (800107c <read_ADC+0xa4>)
 800104e:	681a      	ldr	r2, [r3, #0]
 8001050:	4b0b      	ldr	r3, [pc, #44]	; (8001080 <read_ADC+0xa8>)
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	429a      	cmp	r2, r3
 8001056:	d801      	bhi.n	800105c <read_ADC+0x84>
		return 1;
 8001058:	2301      	movs	r3, #1
 800105a:	e000      	b.n	800105e <read_ADC+0x86>
	} else {
		return 0;
 800105c:	2300      	movs	r3, #0
	}
}
 800105e:	4618      	mov	r0, r3
 8001060:	46bd      	mov	sp, r7
 8001062:	bc80      	pop	{r7}
 8001064:	4770      	bx	lr
 8001066:	bf00      	nop
 8001068:	200008fc 	.word	0x200008fc
 800106c:	200008f8 	.word	0x200008f8
 8001070:	20000900 	.word	0x20000900
 8001074:	20000768 	.word	0x20000768
 8001078:	cccccccd 	.word	0xcccccccd
 800107c:	20000904 	.word	0x20000904
 8001080:	20000764 	.word	0x20000764

08001084 <detection_load>:
//檢知附載
int detection_load(int time, int th) {
 8001084:	b480      	push	{r7}
 8001086:	b083      	sub	sp, #12
 8001088:	af00      	add	r7, sp, #0
 800108a:	6078      	str	r0, [r7, #4]
 800108c:	6039      	str	r1, [r7, #0]
	if (time == 0)
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	2b00      	cmp	r3, #0
 8001092:	d104      	bne.n	800109e <detection_load+0x1a>
		keep_adc1 = real_adc1;
 8001094:	4b0d      	ldr	r3, [pc, #52]	; (80010cc <detection_load+0x48>)
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	4a0d      	ldr	r2, [pc, #52]	; (80010d0 <detection_load+0x4c>)
 800109a:	6013      	str	r3, [r2, #0]
			return 1;
		} else {
			return 0;
		}
	}
}
 800109c:	e011      	b.n	80010c2 <detection_load+0x3e>
		if (abs(keep_adc1 - real_adc1) > th) {
 800109e:	4b0c      	ldr	r3, [pc, #48]	; (80010d0 <detection_load+0x4c>)
 80010a0:	681a      	ldr	r2, [r3, #0]
 80010a2:	4b0a      	ldr	r3, [pc, #40]	; (80010cc <detection_load+0x48>)
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	1ad3      	subs	r3, r2, r3
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	bfb8      	it	lt
 80010ac:	425b      	neglt	r3, r3
 80010ae:	683a      	ldr	r2, [r7, #0]
 80010b0:	429a      	cmp	r2, r3
 80010b2:	da05      	bge.n	80010c0 <detection_load+0x3c>
			keep_adc1 = real_adc1;
 80010b4:	4b05      	ldr	r3, [pc, #20]	; (80010cc <detection_load+0x48>)
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	4a05      	ldr	r2, [pc, #20]	; (80010d0 <detection_load+0x4c>)
 80010ba:	6013      	str	r3, [r2, #0]
			return 1;
 80010bc:	2301      	movs	r3, #1
 80010be:	e000      	b.n	80010c2 <detection_load+0x3e>
			return 0;
 80010c0:	2300      	movs	r3, #0
}
 80010c2:	4618      	mov	r0, r3
 80010c4:	370c      	adds	r7, #12
 80010c6:	46bd      	mov	sp, r7
 80010c8:	bc80      	pop	{r7}
 80010ca:	4770      	bx	lr
 80010cc:	20000904 	.word	0x20000904
 80010d0:	20000908 	.word	0x20000908

080010d4 <Display>:

void Display() {
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b084      	sub	sp, #16
 80010d8:	af04      	add	r7, sp, #16
	ssd1306_Fill(Black);
 80010da:	2000      	movs	r0, #0
 80010dc:	f000 fe00 	bl	8001ce0 <ssd1306_Fill>
	ssd1306_SetCursor(2, 0);
 80010e0:	2100      	movs	r1, #0
 80010e2:	2002      	movs	r0, #2
 80010e4:	f000 ff52 	bl	8001f8c <ssd1306_SetCursor>
	snprintf(buff, sizeof(buff), "System steta:%d,%d", sysinfo_State, stage);
 80010e8:	4b59      	ldr	r3, [pc, #356]	; (8001250 <Display+0x17c>)
 80010ea:	681a      	ldr	r2, [r3, #0]
 80010ec:	4b59      	ldr	r3, [pc, #356]	; (8001254 <Display+0x180>)
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	9300      	str	r3, [sp, #0]
 80010f2:	4613      	mov	r3, r2
 80010f4:	4a58      	ldr	r2, [pc, #352]	; (8001258 <Display+0x184>)
 80010f6:	2140      	movs	r1, #64	; 0x40
 80010f8:	4858      	ldr	r0, [pc, #352]	; (800125c <Display+0x188>)
 80010fa:	f004 fb57 	bl	80057ac <sniprintf>
	ssd1306_WriteString(buff, Font_6x8, White);
 80010fe:	4a58      	ldr	r2, [pc, #352]	; (8001260 <Display+0x18c>)
 8001100:	2301      	movs	r3, #1
 8001102:	ca06      	ldmia	r2, {r1, r2}
 8001104:	4855      	ldr	r0, [pc, #340]	; (800125c <Display+0x188>)
 8001106:	f000 ff1b 	bl	8001f40 <ssd1306_WriteString>

	snprintf(buff, sizeof(buff), "[B0]:%d,KA1:%d", real_adc1, keep_adc1);
 800110a:	4b56      	ldr	r3, [pc, #344]	; (8001264 <Display+0x190>)
 800110c:	681a      	ldr	r2, [r3, #0]
 800110e:	4b56      	ldr	r3, [pc, #344]	; (8001268 <Display+0x194>)
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	9300      	str	r3, [sp, #0]
 8001114:	4613      	mov	r3, r2
 8001116:	4a55      	ldr	r2, [pc, #340]	; (800126c <Display+0x198>)
 8001118:	2140      	movs	r1, #64	; 0x40
 800111a:	4850      	ldr	r0, [pc, #320]	; (800125c <Display+0x188>)
 800111c:	f004 fb46 	bl	80057ac <sniprintf>
	ssd1306_SetCursor(2, 0 + 8);
 8001120:	2108      	movs	r1, #8
 8001122:	2002      	movs	r0, #2
 8001124:	f000 ff32 	bl	8001f8c <ssd1306_SetCursor>
	ssd1306_WriteString(buff, Font_6x8, White);
 8001128:	4a4d      	ldr	r2, [pc, #308]	; (8001260 <Display+0x18c>)
 800112a:	2301      	movs	r3, #1
 800112c:	ca06      	ldmia	r2, {r1, r2}
 800112e:	484b      	ldr	r0, [pc, #300]	; (800125c <Display+0x188>)
 8001130:	f000 ff06 	bl	8001f40 <ssd1306_WriteString>

	snprintf(buff, sizeof(buff), "[A7]:%d,KA2:%d", real_adc2, keep_adc2);
 8001134:	4b4e      	ldr	r3, [pc, #312]	; (8001270 <Display+0x19c>)
 8001136:	681a      	ldr	r2, [r3, #0]
 8001138:	4b4e      	ldr	r3, [pc, #312]	; (8001274 <Display+0x1a0>)
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	9300      	str	r3, [sp, #0]
 800113e:	4613      	mov	r3, r2
 8001140:	4a4d      	ldr	r2, [pc, #308]	; (8001278 <Display+0x1a4>)
 8001142:	2140      	movs	r1, #64	; 0x40
 8001144:	4845      	ldr	r0, [pc, #276]	; (800125c <Display+0x188>)
 8001146:	f004 fb31 	bl	80057ac <sniprintf>
	ssd1306_SetCursor(2, 0 + 16);
 800114a:	2110      	movs	r1, #16
 800114c:	2002      	movs	r0, #2
 800114e:	f000 ff1d 	bl	8001f8c <ssd1306_SetCursor>
	ssd1306_WriteString(buff, Font_6x8, White);
 8001152:	4a43      	ldr	r2, [pc, #268]	; (8001260 <Display+0x18c>)
 8001154:	2301      	movs	r3, #1
 8001156:	ca06      	ldmia	r2, {r1, r2}
 8001158:	4840      	ldr	r0, [pc, #256]	; (800125c <Display+0x188>)
 800115a:	f000 fef1 	bl	8001f40 <ssd1306_WriteString>

	snprintf(buff, sizeof(buff), "PWM1:%d, GPIO1:%d", PWM1, OUTPUT_1_State);
 800115e:	4b47      	ldr	r3, [pc, #284]	; (800127c <Display+0x1a8>)
 8001160:	681a      	ldr	r2, [r3, #0]
 8001162:	4b47      	ldr	r3, [pc, #284]	; (8001280 <Display+0x1ac>)
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	9300      	str	r3, [sp, #0]
 8001168:	4613      	mov	r3, r2
 800116a:	4a46      	ldr	r2, [pc, #280]	; (8001284 <Display+0x1b0>)
 800116c:	2140      	movs	r1, #64	; 0x40
 800116e:	483b      	ldr	r0, [pc, #236]	; (800125c <Display+0x188>)
 8001170:	f004 fb1c 	bl	80057ac <sniprintf>
	ssd1306_SetCursor(2, 0 + 24);
 8001174:	2118      	movs	r1, #24
 8001176:	2002      	movs	r0, #2
 8001178:	f000 ff08 	bl	8001f8c <ssd1306_SetCursor>
	ssd1306_WriteString(buff, Font_6x8, White);
 800117c:	4a38      	ldr	r2, [pc, #224]	; (8001260 <Display+0x18c>)
 800117e:	2301      	movs	r3, #1
 8001180:	ca06      	ldmia	r2, {r1, r2}
 8001182:	4836      	ldr	r0, [pc, #216]	; (800125c <Display+0x188>)
 8001184:	f000 fedc 	bl	8001f40 <ssd1306_WriteString>
	snprintf(buff, sizeof(buff), "PWM2:%d, GPIO2:%d", PWM2, OUTPUT_2_State);
 8001188:	4b3f      	ldr	r3, [pc, #252]	; (8001288 <Display+0x1b4>)
 800118a:	681a      	ldr	r2, [r3, #0]
 800118c:	4b3f      	ldr	r3, [pc, #252]	; (800128c <Display+0x1b8>)
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	9300      	str	r3, [sp, #0]
 8001192:	4613      	mov	r3, r2
 8001194:	4a3e      	ldr	r2, [pc, #248]	; (8001290 <Display+0x1bc>)
 8001196:	2140      	movs	r1, #64	; 0x40
 8001198:	4830      	ldr	r0, [pc, #192]	; (800125c <Display+0x188>)
 800119a:	f004 fb07 	bl	80057ac <sniprintf>
	ssd1306_SetCursor(2, 0 + 32);
 800119e:	2120      	movs	r1, #32
 80011a0:	2002      	movs	r0, #2
 80011a2:	f000 fef3 	bl	8001f8c <ssd1306_SetCursor>
	ssd1306_WriteString(buff, Font_6x8, White);
 80011a6:	4a2e      	ldr	r2, [pc, #184]	; (8001260 <Display+0x18c>)
 80011a8:	2301      	movs	r3, #1
 80011aa:	ca06      	ldmia	r2, {r1, r2}
 80011ac:	482b      	ldr	r0, [pc, #172]	; (800125c <Display+0x188>)
 80011ae:	f000 fec7 	bl	8001f40 <ssd1306_WriteString>

	snprintf(buff, sizeof(buff), "Buttom:%d,%d,%d,%d", buttom_flag[1],
 80011b2:	4b38      	ldr	r3, [pc, #224]	; (8001294 <Display+0x1c0>)
 80011b4:	6858      	ldr	r0, [r3, #4]
 80011b6:	4b37      	ldr	r3, [pc, #220]	; (8001294 <Display+0x1c0>)
 80011b8:	689b      	ldr	r3, [r3, #8]
 80011ba:	4a36      	ldr	r2, [pc, #216]	; (8001294 <Display+0x1c0>)
 80011bc:	68d2      	ldr	r2, [r2, #12]
 80011be:	4935      	ldr	r1, [pc, #212]	; (8001294 <Display+0x1c0>)
 80011c0:	6909      	ldr	r1, [r1, #16]
 80011c2:	9102      	str	r1, [sp, #8]
 80011c4:	9201      	str	r2, [sp, #4]
 80011c6:	9300      	str	r3, [sp, #0]
 80011c8:	4603      	mov	r3, r0
 80011ca:	4a33      	ldr	r2, [pc, #204]	; (8001298 <Display+0x1c4>)
 80011cc:	2140      	movs	r1, #64	; 0x40
 80011ce:	4823      	ldr	r0, [pc, #140]	; (800125c <Display+0x188>)
 80011d0:	f004 faec 	bl	80057ac <sniprintf>
			buttom_flag[2], buttom_flag[3], buttom_flag[4]);
	ssd1306_SetCursor(2, 0 + 40);
 80011d4:	2128      	movs	r1, #40	; 0x28
 80011d6:	2002      	movs	r0, #2
 80011d8:	f000 fed8 	bl	8001f8c <ssd1306_SetCursor>
	ssd1306_WriteString(buff, Font_6x8, White);
 80011dc:	4a20      	ldr	r2, [pc, #128]	; (8001260 <Display+0x18c>)
 80011de:	2301      	movs	r3, #1
 80011e0:	ca06      	ldmia	r2, {r1, r2}
 80011e2:	481e      	ldr	r0, [pc, #120]	; (800125c <Display+0x188>)
 80011e4:	f000 feac 	bl	8001f40 <ssd1306_WriteString>

	snprintf(buff, sizeof(buff), "time:%d,%d", end, start);
 80011e8:	4b2c      	ldr	r3, [pc, #176]	; (800129c <Display+0x1c8>)
 80011ea:	681a      	ldr	r2, [r3, #0]
 80011ec:	4b2c      	ldr	r3, [pc, #176]	; (80012a0 <Display+0x1cc>)
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	9300      	str	r3, [sp, #0]
 80011f2:	4613      	mov	r3, r2
 80011f4:	4a2b      	ldr	r2, [pc, #172]	; (80012a4 <Display+0x1d0>)
 80011f6:	2140      	movs	r1, #64	; 0x40
 80011f8:	4818      	ldr	r0, [pc, #96]	; (800125c <Display+0x188>)
 80011fa:	f004 fad7 	bl	80057ac <sniprintf>
	ssd1306_SetCursor(2, 0 + 48);
 80011fe:	2130      	movs	r1, #48	; 0x30
 8001200:	2002      	movs	r0, #2
 8001202:	f000 fec3 	bl	8001f8c <ssd1306_SetCursor>
	ssd1306_WriteString(buff, Font_6x8, White);
 8001206:	4a16      	ldr	r2, [pc, #88]	; (8001260 <Display+0x18c>)
 8001208:	2301      	movs	r3, #1
 800120a:	ca06      	ldmia	r2, {r1, r2}
 800120c:	4813      	ldr	r0, [pc, #76]	; (800125c <Display+0x188>)
 800120e:	f000 fe97 	bl	8001f40 <ssd1306_WriteString>
	if (end > start) {
 8001212:	4b22      	ldr	r3, [pc, #136]	; (800129c <Display+0x1c8>)
 8001214:	681a      	ldr	r2, [r3, #0]
 8001216:	4b22      	ldr	r3, [pc, #136]	; (80012a0 <Display+0x1cc>)
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	429a      	cmp	r2, r3
 800121c:	d913      	bls.n	8001246 <Display+0x172>
		snprintf(buff, sizeof(buff), "time:%d", end - start);
 800121e:	4b1f      	ldr	r3, [pc, #124]	; (800129c <Display+0x1c8>)
 8001220:	681a      	ldr	r2, [r3, #0]
 8001222:	4b1f      	ldr	r3, [pc, #124]	; (80012a0 <Display+0x1cc>)
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	1ad3      	subs	r3, r2, r3
 8001228:	4a1f      	ldr	r2, [pc, #124]	; (80012a8 <Display+0x1d4>)
 800122a:	2140      	movs	r1, #64	; 0x40
 800122c:	480b      	ldr	r0, [pc, #44]	; (800125c <Display+0x188>)
 800122e:	f004 fabd 	bl	80057ac <sniprintf>
		ssd1306_SetCursor(2, 0 + 56);
 8001232:	2138      	movs	r1, #56	; 0x38
 8001234:	2002      	movs	r0, #2
 8001236:	f000 fea9 	bl	8001f8c <ssd1306_SetCursor>
		ssd1306_WriteString(buff, Font_6x8, White);
 800123a:	4a09      	ldr	r2, [pc, #36]	; (8001260 <Display+0x18c>)
 800123c:	2301      	movs	r3, #1
 800123e:	ca06      	ldmia	r2, {r1, r2}
 8001240:	4806      	ldr	r0, [pc, #24]	; (800125c <Display+0x188>)
 8001242:	f000 fe7d 	bl	8001f40 <ssd1306_WriteString>
	}
	ssd1306_UpdateScreen();
 8001246:	f000 fd6d 	bl	8001d24 <ssd1306_UpdateScreen>

}
 800124a:	bf00      	nop
 800124c:	46bd      	mov	sp, r7
 800124e:	bd80      	pop	{r7, pc}
 8001250:	20000224 	.word	0x20000224
 8001254:	20000204 	.word	0x20000204
 8001258:	08008620 	.word	0x08008620
 800125c:	20000724 	.word	0x20000724
 8001260:	20000010 	.word	0x20000010
 8001264:	20000904 	.word	0x20000904
 8001268:	20000908 	.word	0x20000908
 800126c:	08008634 	.word	0x08008634
 8001270:	20000764 	.word	0x20000764
 8001274:	20000720 	.word	0x20000720
 8001278:	08008644 	.word	0x08008644
 800127c:	20000214 	.word	0x20000214
 8001280:	2000021c 	.word	0x2000021c
 8001284:	08008654 	.word	0x08008654
 8001288:	20000218 	.word	0x20000218
 800128c:	20000220 	.word	0x20000220
 8001290:	08008668 	.word	0x08008668
 8001294:	20000230 	.word	0x20000230
 8001298:	0800867c 	.word	0x0800867c
 800129c:	20000210 	.word	0x20000210
 80012a0:	2000020c 	.word	0x2000020c
 80012a4:	08008690 	.word	0x08008690
 80012a8:	0800869c 	.word	0x0800869c

080012ac <read_GPIO>:
	if (!i) {
		str[i++] = '0';
	}
	str[i] = 0;
}
int read_GPIO(int th) {
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b084      	sub	sp, #16
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	6078      	str	r0, [r7, #4]
	int state = 0;
 80012b4:	2300      	movs	r3, #0
 80012b6:	60fb      	str	r3, [r7, #12]
	if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_12) == GPIO_PIN_SET) {
 80012b8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80012bc:	482a      	ldr	r0, [pc, #168]	; (8001368 <read_GPIO+0xbc>)
 80012be:	f001 ff83 	bl	80031c8 <HAL_GPIO_ReadPin>
 80012c2:	4603      	mov	r3, r0
 80012c4:	2b01      	cmp	r3, #1
 80012c6:	d104      	bne.n	80012d2 <read_GPIO+0x26>
		buttom_flag[1]++;
 80012c8:	4b28      	ldr	r3, [pc, #160]	; (800136c <read_GPIO+0xc0>)
 80012ca:	685b      	ldr	r3, [r3, #4]
 80012cc:	3301      	adds	r3, #1
 80012ce:	4a27      	ldr	r2, [pc, #156]	; (800136c <read_GPIO+0xc0>)
 80012d0:	6053      	str	r3, [r2, #4]
	}
	if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_13) == GPIO_PIN_SET) {
 80012d2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80012d6:	4824      	ldr	r0, [pc, #144]	; (8001368 <read_GPIO+0xbc>)
 80012d8:	f001 ff76 	bl	80031c8 <HAL_GPIO_ReadPin>
 80012dc:	4603      	mov	r3, r0
 80012de:	2b01      	cmp	r3, #1
 80012e0:	d104      	bne.n	80012ec <read_GPIO+0x40>
		buttom_flag[2]++;
 80012e2:	4b22      	ldr	r3, [pc, #136]	; (800136c <read_GPIO+0xc0>)
 80012e4:	689b      	ldr	r3, [r3, #8]
 80012e6:	3301      	adds	r3, #1
 80012e8:	4a20      	ldr	r2, [pc, #128]	; (800136c <read_GPIO+0xc0>)
 80012ea:	6093      	str	r3, [r2, #8]
	}
	if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_14) == GPIO_PIN_SET) {
 80012ec:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80012f0:	481d      	ldr	r0, [pc, #116]	; (8001368 <read_GPIO+0xbc>)
 80012f2:	f001 ff69 	bl	80031c8 <HAL_GPIO_ReadPin>
 80012f6:	4603      	mov	r3, r0
 80012f8:	2b01      	cmp	r3, #1
 80012fa:	d104      	bne.n	8001306 <read_GPIO+0x5a>
		buttom_flag[3]++;
 80012fc:	4b1b      	ldr	r3, [pc, #108]	; (800136c <read_GPIO+0xc0>)
 80012fe:	68db      	ldr	r3, [r3, #12]
 8001300:	3301      	adds	r3, #1
 8001302:	4a1a      	ldr	r2, [pc, #104]	; (800136c <read_GPIO+0xc0>)
 8001304:	60d3      	str	r3, [r2, #12]
	}
	if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_15) == GPIO_PIN_SET) {
 8001306:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800130a:	4817      	ldr	r0, [pc, #92]	; (8001368 <read_GPIO+0xbc>)
 800130c:	f001 ff5c 	bl	80031c8 <HAL_GPIO_ReadPin>
 8001310:	4603      	mov	r3, r0
 8001312:	2b01      	cmp	r3, #1
 8001314:	d104      	bne.n	8001320 <read_GPIO+0x74>
		buttom_flag[4]++;
 8001316:	4b15      	ldr	r3, [pc, #84]	; (800136c <read_GPIO+0xc0>)
 8001318:	691b      	ldr	r3, [r3, #16]
 800131a:	3301      	adds	r3, #1
 800131c:	4a13      	ldr	r2, [pc, #76]	; (800136c <read_GPIO+0xc0>)
 800131e:	6113      	str	r3, [r2, #16]
	}

	if (buttom_flag[1] >= th)
 8001320:	4b12      	ldr	r3, [pc, #72]	; (800136c <read_GPIO+0xc0>)
 8001322:	685b      	ldr	r3, [r3, #4]
 8001324:	687a      	ldr	r2, [r7, #4]
 8001326:	429a      	cmp	r2, r3
 8001328:	dc01      	bgt.n	800132e <read_GPIO+0x82>
		state = 1;
 800132a:	2301      	movs	r3, #1
 800132c:	60fb      	str	r3, [r7, #12]
	if (buttom_flag[2] >= th)
 800132e:	4b0f      	ldr	r3, [pc, #60]	; (800136c <read_GPIO+0xc0>)
 8001330:	689b      	ldr	r3, [r3, #8]
 8001332:	687a      	ldr	r2, [r7, #4]
 8001334:	429a      	cmp	r2, r3
 8001336:	dc02      	bgt.n	800133e <read_GPIO+0x92>
		state = state + 2;
 8001338:	68fb      	ldr	r3, [r7, #12]
 800133a:	3302      	adds	r3, #2
 800133c:	60fb      	str	r3, [r7, #12]
	if (buttom_flag[3] >= th)
 800133e:	4b0b      	ldr	r3, [pc, #44]	; (800136c <read_GPIO+0xc0>)
 8001340:	68db      	ldr	r3, [r3, #12]
 8001342:	687a      	ldr	r2, [r7, #4]
 8001344:	429a      	cmp	r2, r3
 8001346:	dc02      	bgt.n	800134e <read_GPIO+0xa2>
		state = state + 4;
 8001348:	68fb      	ldr	r3, [r7, #12]
 800134a:	3304      	adds	r3, #4
 800134c:	60fb      	str	r3, [r7, #12]
	if (buttom_flag[4] >= th)
 800134e:	4b07      	ldr	r3, [pc, #28]	; (800136c <read_GPIO+0xc0>)
 8001350:	691b      	ldr	r3, [r3, #16]
 8001352:	687a      	ldr	r2, [r7, #4]
 8001354:	429a      	cmp	r2, r3
 8001356:	dc02      	bgt.n	800135e <read_GPIO+0xb2>
		state = state + 8;
 8001358:	68fb      	ldr	r3, [r7, #12]
 800135a:	3308      	adds	r3, #8
 800135c:	60fb      	str	r3, [r7, #12]

	return state;
 800135e:	68fb      	ldr	r3, [r7, #12]
}
 8001360:	4618      	mov	r0, r3
 8001362:	3710      	adds	r7, #16
 8001364:	46bd      	mov	sp, r7
 8001366:	bd80      	pop	{r7, pc}
 8001368:	40010c00 	.word	0x40010c00
 800136c:	20000230 	.word	0x20000230

08001370 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8001370:	b480      	push	{r7}
 8001372:	b083      	sub	sp, #12
 8001374:	af00      	add	r7, sp, #0
 8001376:	4603      	mov	r3, r0
 8001378:	80fb      	strh	r3, [r7, #6]
	 HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13); //PC13 Led
	 buttom_flag[4]++;
	 break;
	 }
	 */
}
 800137a:	bf00      	nop
 800137c:	370c      	adds	r7, #12
 800137e:	46bd      	mov	sp, r7
 8001380:	bc80      	pop	{r7}
 8001382:	4770      	bx	lr

08001384 <main>:
/* USER CODE END 0 */

int main(void) {
 8001384:	b580      	push	{r7, lr}
 8001386:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration----------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8001388:	f000 fe70 	bl	800206c <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 800138c:	f000 f9b6 	bl	80016fc <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8001390:	f7ff fcbe 	bl	8000d10 <MX_GPIO_Init>
	MX_DMA_Init();
 8001394:	f7ff fc9e 	bl	8000cd4 <MX_DMA_Init>
	MX_I2C1_Init();
 8001398:	f7ff fd2a 	bl	8000df0 <MX_I2C1_Init>
	MX_ADC1_Init();
 800139c:	f7ff fbe4 	bl	8000b68 <MX_ADC1_Init>
	MX_TIM2_Init();
 80013a0:	f000 fb1a 	bl	80019d8 <MX_TIM2_Init>

	/* USER CODE BEGIN 2 */
	//ssd1306_Reset();
	ssd1306_Init();
 80013a4:	f000 fc32 	bl	8001c0c <ssd1306_Init>
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*) &ADC_Value, 100);
 80013a8:	2264      	movs	r2, #100	; 0x64
 80013aa:	499a      	ldr	r1, [pc, #616]	; (8001614 <main+0x290>)
 80013ac:	489a      	ldr	r0, [pc, #616]	; (8001618 <main+0x294>)
 80013ae:	f000 ff9d 	bl	80022ec <HAL_ADC_Start_DMA>

	motor_control(0, 0);
 80013b2:	2100      	movs	r1, #0
 80013b4:	2000      	movs	r0, #0
 80013b6:	f7ff fd79 	bl	8000eac <motor_control>
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */

		//系統運行時間
		start = HAL_GetTick();
 80013ba:	f000 fe97 	bl	80020ec <HAL_GetTick>
 80013be:	4602      	mov	r2, r0
 80013c0:	4b96      	ldr	r3, [pc, #600]	; (800161c <main+0x298>)
 80013c2:	601a      	str	r2, [r3, #0]
		if (start < end) {	//時間未結束
 80013c4:	4b95      	ldr	r3, [pc, #596]	; (800161c <main+0x298>)
 80013c6:	681a      	ldr	r2, [r3, #0]
 80013c8:	4b95      	ldr	r3, [pc, #596]	; (8001620 <main+0x29c>)
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	429a      	cmp	r2, r3
 80013ce:	f080 8133 	bcs.w	8001638 <main+0x2b4>
			if (dir_flag == 1) {
 80013d2:	4b94      	ldr	r3, [pc, #592]	; (8001624 <main+0x2a0>)
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	2b01      	cmp	r3, #1
 80013d8:	f040 8086 	bne.w	80014e8 <main+0x164>
				if (start < end - 4000) {
 80013dc:	4b90      	ldr	r3, [pc, #576]	; (8001620 <main+0x29c>)
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	f5a3 627a 	sub.w	r2, r3, #4000	; 0xfa0
 80013e4:	4b8d      	ldr	r3, [pc, #564]	; (800161c <main+0x298>)
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	429a      	cmp	r2, r3
 80013ea:	d924      	bls.n	8001436 <main+0xb2>
					stage = 1;
 80013ec:	4b8e      	ldr	r3, [pc, #568]	; (8001628 <main+0x2a4>)
 80013ee:	2201      	movs	r2, #1
 80013f0:	601a      	str	r2, [r3, #0]
					if (stage != last_stage) {
 80013f2:	4b8d      	ldr	r3, [pc, #564]	; (8001628 <main+0x2a4>)
 80013f4:	681a      	ldr	r2, [r3, #0]
 80013f6:	4b8d      	ldr	r3, [pc, #564]	; (800162c <main+0x2a8>)
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	429a      	cmp	r2, r3
 80013fc:	d009      	beq.n	8001412 <main+0x8e>
						last_stage = stage;
 80013fe:	4b8a      	ldr	r3, [pc, #552]	; (8001628 <main+0x2a4>)
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	4a8a      	ldr	r2, [pc, #552]	; (800162c <main+0x2a8>)
 8001404:	6013      	str	r3, [r2, #0]
						detection_load(0, sensitivity);
 8001406:	4b8a      	ldr	r3, [pc, #552]	; (8001630 <main+0x2ac>)
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	4619      	mov	r1, r3
 800140c:	2000      	movs	r0, #0
 800140e:	f7ff fe39 	bl	8001084 <detection_load>
					}
					if (detection_load(1, sensitivity))
 8001412:	4b87      	ldr	r3, [pc, #540]	; (8001630 <main+0x2ac>)
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	4619      	mov	r1, r3
 8001418:	2001      	movs	r0, #1
 800141a:	f7ff fe33 	bl	8001084 <detection_load>
 800141e:	4603      	mov	r3, r0
 8001420:	2b00      	cmp	r3, #0
 8001422:	d002      	beq.n	800142a <main+0xa6>
						sysinfo_State = 1;
 8001424:	4b83      	ldr	r3, [pc, #524]	; (8001634 <main+0x2b0>)
 8001426:	2201      	movs	r2, #1
 8001428:	601a      	str	r2, [r3, #0]
					motor_control(1, 1000);
 800142a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800142e:	2001      	movs	r0, #1
 8001430:	f7ff fd3c 	bl	8000eac <motor_control>
 8001434:	e0e4      	b.n	8001600 <main+0x27c>
				} else if (start < end - 2000) {
 8001436:	4b7a      	ldr	r3, [pc, #488]	; (8001620 <main+0x29c>)
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	f5a3 62fa 	sub.w	r2, r3, #2000	; 0x7d0
 800143e:	4b77      	ldr	r3, [pc, #476]	; (800161c <main+0x298>)
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	429a      	cmp	r2, r3
 8001444:	d924      	bls.n	8001490 <main+0x10c>
					stage = 2;
 8001446:	4b78      	ldr	r3, [pc, #480]	; (8001628 <main+0x2a4>)
 8001448:	2202      	movs	r2, #2
 800144a:	601a      	str	r2, [r3, #0]
					if (stage != last_stage) {
 800144c:	4b76      	ldr	r3, [pc, #472]	; (8001628 <main+0x2a4>)
 800144e:	681a      	ldr	r2, [r3, #0]
 8001450:	4b76      	ldr	r3, [pc, #472]	; (800162c <main+0x2a8>)
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	429a      	cmp	r2, r3
 8001456:	d009      	beq.n	800146c <main+0xe8>
						last_stage = stage;
 8001458:	4b73      	ldr	r3, [pc, #460]	; (8001628 <main+0x2a4>)
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	4a73      	ldr	r2, [pc, #460]	; (800162c <main+0x2a8>)
 800145e:	6013      	str	r3, [r2, #0]
						detection_load(0, sensitivity);
 8001460:	4b73      	ldr	r3, [pc, #460]	; (8001630 <main+0x2ac>)
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	4619      	mov	r1, r3
 8001466:	2000      	movs	r0, #0
 8001468:	f7ff fe0c 	bl	8001084 <detection_load>
					}
					if (detection_load(1, sensitivity))
 800146c:	4b70      	ldr	r3, [pc, #448]	; (8001630 <main+0x2ac>)
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	4619      	mov	r1, r3
 8001472:	2001      	movs	r0, #1
 8001474:	f7ff fe06 	bl	8001084 <detection_load>
 8001478:	4603      	mov	r3, r0
 800147a:	2b00      	cmp	r3, #0
 800147c:	d002      	beq.n	8001484 <main+0x100>
						sysinfo_State = 1;
 800147e:	4b6d      	ldr	r3, [pc, #436]	; (8001634 <main+0x2b0>)
 8001480:	2201      	movs	r2, #1
 8001482:	601a      	str	r2, [r3, #0]
					motor_control(1, 4000);
 8001484:	f44f 617a 	mov.w	r1, #4000	; 0xfa0
 8001488:	2001      	movs	r0, #1
 800148a:	f7ff fd0f 	bl	8000eac <motor_control>
 800148e:	e0b7      	b.n	8001600 <main+0x27c>
				} else if (start < end) {
 8001490:	4b62      	ldr	r3, [pc, #392]	; (800161c <main+0x298>)
 8001492:	681a      	ldr	r2, [r3, #0]
 8001494:	4b62      	ldr	r3, [pc, #392]	; (8001620 <main+0x29c>)
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	429a      	cmp	r2, r3
 800149a:	f080 80b1 	bcs.w	8001600 <main+0x27c>
					stage = 3;
 800149e:	4b62      	ldr	r3, [pc, #392]	; (8001628 <main+0x2a4>)
 80014a0:	2203      	movs	r2, #3
 80014a2:	601a      	str	r2, [r3, #0]
					if (stage != last_stage) {
 80014a4:	4b60      	ldr	r3, [pc, #384]	; (8001628 <main+0x2a4>)
 80014a6:	681a      	ldr	r2, [r3, #0]
 80014a8:	4b60      	ldr	r3, [pc, #384]	; (800162c <main+0x2a8>)
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	429a      	cmp	r2, r3
 80014ae:	d009      	beq.n	80014c4 <main+0x140>
						last_stage = stage;
 80014b0:	4b5d      	ldr	r3, [pc, #372]	; (8001628 <main+0x2a4>)
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	4a5d      	ldr	r2, [pc, #372]	; (800162c <main+0x2a8>)
 80014b6:	6013      	str	r3, [r2, #0]
						detection_load(0, sensitivity);
 80014b8:	4b5d      	ldr	r3, [pc, #372]	; (8001630 <main+0x2ac>)
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	4619      	mov	r1, r3
 80014be:	2000      	movs	r0, #0
 80014c0:	f7ff fde0 	bl	8001084 <detection_load>
					}
					if (detection_load(1, sensitivity))
 80014c4:	4b5a      	ldr	r3, [pc, #360]	; (8001630 <main+0x2ac>)
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	4619      	mov	r1, r3
 80014ca:	2001      	movs	r0, #1
 80014cc:	f7ff fdda 	bl	8001084 <detection_load>
 80014d0:	4603      	mov	r3, r0
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d002      	beq.n	80014dc <main+0x158>
						sysinfo_State = 1;
 80014d6:	4b57      	ldr	r3, [pc, #348]	; (8001634 <main+0x2b0>)
 80014d8:	2201      	movs	r2, #1
 80014da:	601a      	str	r2, [r3, #0]
					motor_control(1, 1000);
 80014dc:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80014e0:	2001      	movs	r0, #1
 80014e2:	f7ff fce3 	bl	8000eac <motor_control>
 80014e6:	e08b      	b.n	8001600 <main+0x27c>
				}
			} else if (dir_flag == 4) {
 80014e8:	4b4e      	ldr	r3, [pc, #312]	; (8001624 <main+0x2a0>)
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	2b04      	cmp	r3, #4
 80014ee:	f040 8087 	bne.w	8001600 <main+0x27c>
				if (start < end - 4000) {
 80014f2:	4b4b      	ldr	r3, [pc, #300]	; (8001620 <main+0x29c>)
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	f5a3 627a 	sub.w	r2, r3, #4000	; 0xfa0
 80014fa:	4b48      	ldr	r3, [pc, #288]	; (800161c <main+0x298>)
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	429a      	cmp	r2, r3
 8001500:	d925      	bls.n	800154e <main+0x1ca>
					stage = 1;
 8001502:	4b49      	ldr	r3, [pc, #292]	; (8001628 <main+0x2a4>)
 8001504:	2201      	movs	r2, #1
 8001506:	601a      	str	r2, [r3, #0]
					if (stage != last_stage) {
 8001508:	4b47      	ldr	r3, [pc, #284]	; (8001628 <main+0x2a4>)
 800150a:	681a      	ldr	r2, [r3, #0]
 800150c:	4b47      	ldr	r3, [pc, #284]	; (800162c <main+0x2a8>)
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	429a      	cmp	r2, r3
 8001512:	d009      	beq.n	8001528 <main+0x1a4>
						last_stage = stage;
 8001514:	4b44      	ldr	r3, [pc, #272]	; (8001628 <main+0x2a4>)
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	4a44      	ldr	r2, [pc, #272]	; (800162c <main+0x2a8>)
 800151a:	6013      	str	r3, [r2, #0]
						detection_load(0, sensitivity);
 800151c:	4b44      	ldr	r3, [pc, #272]	; (8001630 <main+0x2ac>)
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	4619      	mov	r1, r3
 8001522:	2000      	movs	r0, #0
 8001524:	f7ff fdae 	bl	8001084 <detection_load>
					}
					if (detection_load(1, sensitivity))
 8001528:	4b41      	ldr	r3, [pc, #260]	; (8001630 <main+0x2ac>)
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	4619      	mov	r1, r3
 800152e:	2001      	movs	r0, #1
 8001530:	f7ff fda8 	bl	8001084 <detection_load>
 8001534:	4603      	mov	r3, r0
 8001536:	2b00      	cmp	r3, #0
 8001538:	d002      	beq.n	8001540 <main+0x1bc>
						sysinfo_State = 1;
 800153a:	4b3e      	ldr	r3, [pc, #248]	; (8001634 <main+0x2b0>)
 800153c:	2201      	movs	r2, #1
 800153e:	601a      	str	r2, [r3, #0]
					motor_control(-1, 1000);
 8001540:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001544:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001548:	f7ff fcb0 	bl	8000eac <motor_control>
 800154c:	e058      	b.n	8001600 <main+0x27c>
				} else if (start < end - 2000) {
 800154e:	4b34      	ldr	r3, [pc, #208]	; (8001620 <main+0x29c>)
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	f5a3 62fa 	sub.w	r2, r3, #2000	; 0x7d0
 8001556:	4b31      	ldr	r3, [pc, #196]	; (800161c <main+0x298>)
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	429a      	cmp	r2, r3
 800155c:	d925      	bls.n	80015aa <main+0x226>
					stage = 2;
 800155e:	4b32      	ldr	r3, [pc, #200]	; (8001628 <main+0x2a4>)
 8001560:	2202      	movs	r2, #2
 8001562:	601a      	str	r2, [r3, #0]
					if (stage != last_stage) {
 8001564:	4b30      	ldr	r3, [pc, #192]	; (8001628 <main+0x2a4>)
 8001566:	681a      	ldr	r2, [r3, #0]
 8001568:	4b30      	ldr	r3, [pc, #192]	; (800162c <main+0x2a8>)
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	429a      	cmp	r2, r3
 800156e:	d009      	beq.n	8001584 <main+0x200>
						last_stage = stage;
 8001570:	4b2d      	ldr	r3, [pc, #180]	; (8001628 <main+0x2a4>)
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	4a2d      	ldr	r2, [pc, #180]	; (800162c <main+0x2a8>)
 8001576:	6013      	str	r3, [r2, #0]
						detection_load(0, sensitivity);
 8001578:	4b2d      	ldr	r3, [pc, #180]	; (8001630 <main+0x2ac>)
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	4619      	mov	r1, r3
 800157e:	2000      	movs	r0, #0
 8001580:	f7ff fd80 	bl	8001084 <detection_load>
					}
					if (detection_load(1, sensitivity))
 8001584:	4b2a      	ldr	r3, [pc, #168]	; (8001630 <main+0x2ac>)
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	4619      	mov	r1, r3
 800158a:	2001      	movs	r0, #1
 800158c:	f7ff fd7a 	bl	8001084 <detection_load>
 8001590:	4603      	mov	r3, r0
 8001592:	2b00      	cmp	r3, #0
 8001594:	d002      	beq.n	800159c <main+0x218>
						sysinfo_State = 1;
 8001596:	4b27      	ldr	r3, [pc, #156]	; (8001634 <main+0x2b0>)
 8001598:	2201      	movs	r2, #1
 800159a:	601a      	str	r2, [r3, #0]
					motor_control(-1, 4000);
 800159c:	f44f 617a 	mov.w	r1, #4000	; 0xfa0
 80015a0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80015a4:	f7ff fc82 	bl	8000eac <motor_control>
 80015a8:	e02a      	b.n	8001600 <main+0x27c>
				} else if (start < end) {
 80015aa:	4b1c      	ldr	r3, [pc, #112]	; (800161c <main+0x298>)
 80015ac:	681a      	ldr	r2, [r3, #0]
 80015ae:	4b1c      	ldr	r3, [pc, #112]	; (8001620 <main+0x29c>)
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	429a      	cmp	r2, r3
 80015b4:	d224      	bcs.n	8001600 <main+0x27c>
					stage = 3;
 80015b6:	4b1c      	ldr	r3, [pc, #112]	; (8001628 <main+0x2a4>)
 80015b8:	2203      	movs	r2, #3
 80015ba:	601a      	str	r2, [r3, #0]
					if (stage != last_stage) {
 80015bc:	4b1a      	ldr	r3, [pc, #104]	; (8001628 <main+0x2a4>)
 80015be:	681a      	ldr	r2, [r3, #0]
 80015c0:	4b1a      	ldr	r3, [pc, #104]	; (800162c <main+0x2a8>)
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	429a      	cmp	r2, r3
 80015c6:	d009      	beq.n	80015dc <main+0x258>
						last_stage = stage;
 80015c8:	4b17      	ldr	r3, [pc, #92]	; (8001628 <main+0x2a4>)
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	4a17      	ldr	r2, [pc, #92]	; (800162c <main+0x2a8>)
 80015ce:	6013      	str	r3, [r2, #0]
						detection_load(0, sensitivity);
 80015d0:	4b17      	ldr	r3, [pc, #92]	; (8001630 <main+0x2ac>)
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	4619      	mov	r1, r3
 80015d6:	2000      	movs	r0, #0
 80015d8:	f7ff fd54 	bl	8001084 <detection_load>
					}
					if (detection_load(1, sensitivity))
 80015dc:	4b14      	ldr	r3, [pc, #80]	; (8001630 <main+0x2ac>)
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	4619      	mov	r1, r3
 80015e2:	2001      	movs	r0, #1
 80015e4:	f7ff fd4e 	bl	8001084 <detection_load>
 80015e8:	4603      	mov	r3, r0
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d002      	beq.n	80015f4 <main+0x270>
						sysinfo_State = 1;
 80015ee:	4b11      	ldr	r3, [pc, #68]	; (8001634 <main+0x2b0>)
 80015f0:	2201      	movs	r2, #1
 80015f2:	601a      	str	r2, [r3, #0]
					motor_control(-1, 1000);
 80015f4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80015f8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80015fc:	f7ff fc56 	bl	8000eac <motor_control>
				}
			}
			if (sysinfo_State == 1)
 8001600:	4b0c      	ldr	r3, [pc, #48]	; (8001634 <main+0x2b0>)
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	2b01      	cmp	r3, #1
 8001606:	d125      	bne.n	8001654 <main+0x2d0>
				end = start;	//壓力觸發
 8001608:	4b04      	ldr	r3, [pc, #16]	; (800161c <main+0x298>)
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	4a04      	ldr	r2, [pc, #16]	; (8001620 <main+0x29c>)
 800160e:	6013      	str	r3, [r2, #0]
 8001610:	e020      	b.n	8001654 <main+0x2d0>
 8001612:	bf00      	nop
 8001614:	20000768 	.word	0x20000768
 8001618:	20000658 	.word	0x20000658
 800161c:	2000020c 	.word	0x2000020c
 8001620:	20000210 	.word	0x20000210
 8001624:	2000022c 	.word	0x2000022c
 8001628:	20000204 	.word	0x20000204
 800162c:	20000208 	.word	0x20000208
 8001630:	20000004 	.word	0x20000004
 8001634:	20000224 	.word	0x20000224
		} else {	//時間結束
			stage = 0;
 8001638:	4b27      	ldr	r3, [pc, #156]	; (80016d8 <main+0x354>)
 800163a:	2200      	movs	r2, #0
 800163c:	601a      	str	r2, [r3, #0]
			sysinfo_State = 0;
 800163e:	4b27      	ldr	r3, [pc, #156]	; (80016dc <main+0x358>)
 8001640:	2200      	movs	r2, #0
 8001642:	601a      	str	r2, [r3, #0]
			detection_load(0, 50);
 8001644:	2132      	movs	r1, #50	; 0x32
 8001646:	2000      	movs	r0, #0
 8001648:	f7ff fd1c 	bl	8001084 <detection_load>
			motor_control(0, 0);
 800164c:	2100      	movs	r1, #0
 800164e:	2000      	movs	r0, #0
 8001650:	f7ff fc2c 	bl	8000eac <motor_control>
		}

		//壓力觸動時輸出1
		//sysinfo_State = read_ADC();
		read_ADC();
 8001654:	f7ff fcc0 	bl	8000fd8 <read_ADC>

		//讀取案就狀態
		buttom_State = read_GPIO(1);
 8001658:	2001      	movs	r0, #1
 800165a:	f7ff fe27 	bl	80012ac <read_GPIO>
 800165e:	4603      	mov	r3, r0
 8001660:	461a      	mov	r2, r3
 8001662:	4b1f      	ldr	r3, [pc, #124]	; (80016e0 <main+0x35c>)
 8001664:	601a      	str	r2, [r3, #0]
		if (buttom_State == 1) {
 8001666:	4b1e      	ldr	r3, [pc, #120]	; (80016e0 <main+0x35c>)
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	2b01      	cmp	r3, #1
 800166c:	d10a      	bne.n	8001684 <main+0x300>
			end = start + runtime;
 800166e:	4b1d      	ldr	r3, [pc, #116]	; (80016e4 <main+0x360>)
 8001670:	681a      	ldr	r2, [r3, #0]
 8001672:	4b1d      	ldr	r3, [pc, #116]	; (80016e8 <main+0x364>)
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	4413      	add	r3, r2
 8001678:	4a1c      	ldr	r2, [pc, #112]	; (80016ec <main+0x368>)
 800167a:	6013      	str	r3, [r2, #0]
			dir_flag = 1;
 800167c:	4b1c      	ldr	r3, [pc, #112]	; (80016f0 <main+0x36c>)
 800167e:	2201      	movs	r2, #1
 8001680:	601a      	str	r2, [r3, #0]
 8001682:	e01a      	b.n	80016ba <main+0x336>
		} else if (buttom_State == 4) {
 8001684:	4b16      	ldr	r3, [pc, #88]	; (80016e0 <main+0x35c>)
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	2b04      	cmp	r3, #4
 800168a:	d10a      	bne.n	80016a2 <main+0x31e>
			end = start + runtime;
 800168c:	4b15      	ldr	r3, [pc, #84]	; (80016e4 <main+0x360>)
 800168e:	681a      	ldr	r2, [r3, #0]
 8001690:	4b15      	ldr	r3, [pc, #84]	; (80016e8 <main+0x364>)
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	4413      	add	r3, r2
 8001696:	4a15      	ldr	r2, [pc, #84]	; (80016ec <main+0x368>)
 8001698:	6013      	str	r3, [r2, #0]
			dir_flag = 4;
 800169a:	4b15      	ldr	r3, [pc, #84]	; (80016f0 <main+0x36c>)
 800169c:	2204      	movs	r2, #4
 800169e:	601a      	str	r2, [r3, #0]
 80016a0:	e00b      	b.n	80016ba <main+0x336>
		} else if (buttom_State == 2) {
 80016a2:	4b0f      	ldr	r3, [pc, #60]	; (80016e0 <main+0x35c>)
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	2b02      	cmp	r3, #2
 80016a8:	d107      	bne.n	80016ba <main+0x336>
			end = start;
 80016aa:	4b0e      	ldr	r3, [pc, #56]	; (80016e4 <main+0x360>)
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	4a0f      	ldr	r2, [pc, #60]	; (80016ec <main+0x368>)
 80016b0:	6013      	str	r3, [r2, #0]
			motor_control(0, 0);
 80016b2:	2100      	movs	r1, #0
 80016b4:	2000      	movs	r0, #0
 80016b6:	f7ff fbf9 	bl	8000eac <motor_control>
		}

		//LCD畫面
		if (i2c_working == 1)
 80016ba:	4b0e      	ldr	r3, [pc, #56]	; (80016f4 <main+0x370>)
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	2b01      	cmp	r3, #1
 80016c0:	d101      	bne.n	80016c6 <main+0x342>
			Display();
 80016c2:	f7ff fd07 	bl	80010d4 <Display>

		//系統LED PC13
		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 80016c6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80016ca:	480b      	ldr	r0, [pc, #44]	; (80016f8 <main+0x374>)
 80016cc:	f001 fdab 	bl	8003226 <HAL_GPIO_TogglePin>

		//清除buttom flag
		clean_buttom_flag();
 80016d0:	f7ff fc64 	bl	8000f9c <clean_buttom_flag>
		start = HAL_GetTick();
 80016d4:	e671      	b.n	80013ba <main+0x36>
 80016d6:	bf00      	nop
 80016d8:	20000204 	.word	0x20000204
 80016dc:	20000224 	.word	0x20000224
 80016e0:	20000228 	.word	0x20000228
 80016e4:	2000020c 	.word	0x2000020c
 80016e8:	20000000 	.word	0x20000000
 80016ec:	20000210 	.word	0x20000210
 80016f0:	2000022c 	.word	0x2000022c
 80016f4:	20000008 	.word	0x20000008
 80016f8:	40011000 	.word	0x40011000

080016fc <SystemClock_Config>:

}

/** System Clock Configuration
 */
void SystemClock_Config(void) {
 80016fc:	b580      	push	{r7, lr}
 80016fe:	b094      	sub	sp, #80	; 0x50
 8001700:	af00      	add	r7, sp, #0
	RCC_ClkInitTypeDef RCC_ClkInitStruct;
	RCC_PeriphCLKInitTypeDef PeriphClkInit;

	/**Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001702:	2302      	movs	r3, #2
 8001704:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001706:	2301      	movs	r3, #1
 8001708:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.HSICalibrationValue = 16;
 800170a:	2310      	movs	r3, #16
 800170c:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800170e:	2302      	movs	r3, #2
 8001710:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8001712:	2300      	movs	r3, #0
 8001714:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8001716:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 800171a:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 800171c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001720:	4618      	mov	r0, r3
 8001722:	f002 f987 	bl	8003a34 <HAL_RCC_OscConfig>
 8001726:	4603      	mov	r3, r0
 8001728:	2b00      	cmp	r3, #0
 800172a:	d004      	beq.n	8001736 <SystemClock_Config+0x3a>
		_Error_Handler(__FILE__, __LINE__);
 800172c:	f240 11b7 	movw	r1, #439	; 0x1b7
 8001730:	4822      	ldr	r0, [pc, #136]	; (80017bc <SystemClock_Config+0xc0>)
 8001732:	f000 f847 	bl	80017c4 <_Error_Handler>
	}

	/**Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8001736:	230f      	movs	r3, #15
 8001738:	617b      	str	r3, [r7, #20]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800173a:	2302      	movs	r3, #2
 800173c:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800173e:	2300      	movs	r3, #0
 8001740:	61fb      	str	r3, [r7, #28]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001742:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001746:	623b      	str	r3, [r7, #32]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV16;
 8001748:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 800174c:	627b      	str	r3, [r7, #36]	; 0x24

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 800174e:	f107 0314 	add.w	r3, r7, #20
 8001752:	2102      	movs	r1, #2
 8001754:	4618      	mov	r0, r3
 8001756:	f002 fbd1 	bl	8003efc <HAL_RCC_ClockConfig>
 800175a:	4603      	mov	r3, r0
 800175c:	2b00      	cmp	r3, #0
 800175e:	d004      	beq.n	800176a <SystemClock_Config+0x6e>
		_Error_Handler(__FILE__, __LINE__);
 8001760:	f44f 71e2 	mov.w	r1, #452	; 0x1c4
 8001764:	4815      	ldr	r0, [pc, #84]	; (80017bc <SystemClock_Config+0xc0>)
 8001766:	f000 f82d 	bl	80017c4 <_Error_Handler>
	}

	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800176a:	2302      	movs	r3, #2
 800176c:	607b      	str	r3, [r7, #4]
	PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV8;
 800176e:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8001772:	60fb      	str	r3, [r7, #12]
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK) {
 8001774:	1d3b      	adds	r3, r7, #4
 8001776:	4618      	mov	r0, r3
 8001778:	f002 fd52 	bl	8004220 <HAL_RCCEx_PeriphCLKConfig>
 800177c:	4603      	mov	r3, r0
 800177e:	2b00      	cmp	r3, #0
 8001780:	d004      	beq.n	800178c <SystemClock_Config+0x90>
		_Error_Handler(__FILE__, __LINE__);
 8001782:	f44f 71e5 	mov.w	r1, #458	; 0x1ca
 8001786:	480d      	ldr	r0, [pc, #52]	; (80017bc <SystemClock_Config+0xc0>)
 8001788:	f000 f81c 	bl	80017c4 <_Error_Handler>
	}

	/**Configure the Systick interrupt time
	 */
	HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / 1000);
 800178c:	f002 fd0c 	bl	80041a8 <HAL_RCC_GetHCLKFreq>
 8001790:	4602      	mov	r2, r0
 8001792:	4b0b      	ldr	r3, [pc, #44]	; (80017c0 <SystemClock_Config+0xc4>)
 8001794:	fba3 2302 	umull	r2, r3, r3, r2
 8001798:	099b      	lsrs	r3, r3, #6
 800179a:	4618      	mov	r0, r3
 800179c:	f001 f987 	bl	8002aae <HAL_SYSTICK_Config>

	/**Configure the Systick
	 */
	HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 80017a0:	2004      	movs	r0, #4
 80017a2:	f001 f991 	bl	8002ac8 <HAL_SYSTICK_CLKSourceConfig>

	/* SysTick_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 80017a6:	2200      	movs	r2, #0
 80017a8:	2100      	movs	r1, #0
 80017aa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80017ae:	f001 f954 	bl	8002a5a <HAL_NVIC_SetPriority>
}
 80017b2:	bf00      	nop
 80017b4:	3750      	adds	r7, #80	; 0x50
 80017b6:	46bd      	mov	sp, r7
 80017b8:	bd80      	pop	{r7, pc}
 80017ba:	bf00      	nop
 80017bc:	080086a4 	.word	0x080086a4
 80017c0:	10624dd3 	.word	0x10624dd3

080017c4 <_Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @param  None
 * @retval None
 */
void _Error_Handler(char *file, int line) {
 80017c4:	b480      	push	{r7}
 80017c6:	b083      	sub	sp, #12
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	6078      	str	r0, [r7, #4]
 80017cc:	6039      	str	r1, [r7, #0]
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	while (1) {
 80017ce:	e7fe      	b.n	80017ce <_Error_Handler+0xa>

080017d0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80017d0:	b580      	push	{r7, lr}
 80017d2:	b082      	sub	sp, #8
 80017d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80017d6:	4b24      	ldr	r3, [pc, #144]	; (8001868 <HAL_MspInit+0x98>)
 80017d8:	699b      	ldr	r3, [r3, #24]
 80017da:	4a23      	ldr	r2, [pc, #140]	; (8001868 <HAL_MspInit+0x98>)
 80017dc:	f043 0301 	orr.w	r3, r3, #1
 80017e0:	6193      	str	r3, [r2, #24]
 80017e2:	4b21      	ldr	r3, [pc, #132]	; (8001868 <HAL_MspInit+0x98>)
 80017e4:	699b      	ldr	r3, [r3, #24]
 80017e6:	f003 0301 	and.w	r3, r3, #1
 80017ea:	607b      	str	r3, [r7, #4]
 80017ec:	687b      	ldr	r3, [r7, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80017ee:	2003      	movs	r0, #3
 80017f0:	f001 f928 	bl	8002a44 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 80017f4:	2200      	movs	r2, #0
 80017f6:	2100      	movs	r1, #0
 80017f8:	f06f 000b 	mvn.w	r0, #11
 80017fc:	f001 f92d 	bl	8002a5a <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 8001800:	2200      	movs	r2, #0
 8001802:	2100      	movs	r1, #0
 8001804:	f06f 000a 	mvn.w	r0, #10
 8001808:	f001 f927 	bl	8002a5a <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 800180c:	2200      	movs	r2, #0
 800180e:	2100      	movs	r1, #0
 8001810:	f06f 0009 	mvn.w	r0, #9
 8001814:	f001 f921 	bl	8002a5a <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 8001818:	2200      	movs	r2, #0
 800181a:	2100      	movs	r1, #0
 800181c:	f06f 0004 	mvn.w	r0, #4
 8001820:	f001 f91b 	bl	8002a5a <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 8001824:	2200      	movs	r2, #0
 8001826:	2100      	movs	r1, #0
 8001828:	f06f 0003 	mvn.w	r0, #3
 800182c:	f001 f915 	bl	8002a5a <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 8001830:	2200      	movs	r2, #0
 8001832:	2100      	movs	r1, #0
 8001834:	f06f 0001 	mvn.w	r0, #1
 8001838:	f001 f90f 	bl	8002a5a <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 800183c:	2200      	movs	r2, #0
 800183e:	2100      	movs	r1, #0
 8001840:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001844:	f001 f909 	bl	8002a5a <HAL_NVIC_SetPriority>

    /**NOJTAG: JTAG-DP Disabled and SW-DP Enabled
    */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001848:	4b08      	ldr	r3, [pc, #32]	; (800186c <HAL_MspInit+0x9c>)
 800184a:	685b      	ldr	r3, [r3, #4]
 800184c:	4a07      	ldr	r2, [pc, #28]	; (800186c <HAL_MspInit+0x9c>)
 800184e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001852:	6053      	str	r3, [r2, #4]
 8001854:	4b05      	ldr	r3, [pc, #20]	; (800186c <HAL_MspInit+0x9c>)
 8001856:	685b      	ldr	r3, [r3, #4]
 8001858:	4a04      	ldr	r2, [pc, #16]	; (800186c <HAL_MspInit+0x9c>)
 800185a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800185e:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001860:	bf00      	nop
 8001862:	3708      	adds	r7, #8
 8001864:	46bd      	mov	sp, r7
 8001866:	bd80      	pop	{r7, pc}
 8001868:	40021000 	.word	0x40021000
 800186c:	40010000 	.word	0x40010000

08001870 <NMI_Handler>:

/**
* @brief This function handles Non maskable interrupt.
*/
void NMI_Handler(void)
{
 8001870:	b480      	push	{r7}
 8001872:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001874:	bf00      	nop
 8001876:	46bd      	mov	sp, r7
 8001878:	bc80      	pop	{r7}
 800187a:	4770      	bx	lr

0800187c <HardFault_Handler>:

/**
* @brief This function handles Hard fault interrupt.
*/
void HardFault_Handler(void)
{
 800187c:	b480      	push	{r7}
 800187e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001880:	e7fe      	b.n	8001880 <HardFault_Handler+0x4>

08001882 <MemManage_Handler>:

/**
* @brief This function handles Memory management fault.
*/
void MemManage_Handler(void)
{
 8001882:	b480      	push	{r7}
 8001884:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001886:	e7fe      	b.n	8001886 <MemManage_Handler+0x4>

08001888 <BusFault_Handler>:

/**
* @brief This function handles Prefetch fault, memory access fault.
*/
void BusFault_Handler(void)
{
 8001888:	b480      	push	{r7}
 800188a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800188c:	e7fe      	b.n	800188c <BusFault_Handler+0x4>

0800188e <UsageFault_Handler>:

/**
* @brief This function handles Undefined instruction or illegal state.
*/
void UsageFault_Handler(void)
{
 800188e:	b480      	push	{r7}
 8001890:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001892:	e7fe      	b.n	8001892 <UsageFault_Handler+0x4>

08001894 <SVC_Handler>:

/**
* @brief This function handles System service call via SWI instruction.
*/
void SVC_Handler(void)
{
 8001894:	b480      	push	{r7}
 8001896:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001898:	bf00      	nop
 800189a:	46bd      	mov	sp, r7
 800189c:	bc80      	pop	{r7}
 800189e:	4770      	bx	lr

080018a0 <DebugMon_Handler>:

/**
* @brief This function handles Debug monitor.
*/
void DebugMon_Handler(void)
{
 80018a0:	b480      	push	{r7}
 80018a2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80018a4:	bf00      	nop
 80018a6:	46bd      	mov	sp, r7
 80018a8:	bc80      	pop	{r7}
 80018aa:	4770      	bx	lr

080018ac <PendSV_Handler>:

/**
* @brief This function handles Pendable request for system service.
*/
void PendSV_Handler(void)
{
 80018ac:	b480      	push	{r7}
 80018ae:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80018b0:	bf00      	nop
 80018b2:	46bd      	mov	sp, r7
 80018b4:	bc80      	pop	{r7}
 80018b6:	4770      	bx	lr

080018b8 <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 80018b8:	b580      	push	{r7, lr}
 80018ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80018bc:	f000 fc08 	bl	80020d0 <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
 80018c0:	f001 f91e 	bl	8002b00 <HAL_SYSTICK_IRQHandler>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80018c4:	bf00      	nop
 80018c6:	bd80      	pop	{r7, pc}

080018c8 <DMA1_Channel1_IRQHandler>:

/**
* @brief This function handles DMA1 channel1 global interrupt.
*/
void DMA1_Channel1_IRQHandler(void)
{
 80018c8:	b580      	push	{r7, lr}
 80018ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80018cc:	4802      	ldr	r0, [pc, #8]	; (80018d8 <DMA1_Channel1_IRQHandler+0x10>)
 80018ce:	f001 f9e9 	bl	8002ca4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80018d2:	bf00      	nop
 80018d4:	bd80      	pop	{r7, pc}
 80018d6:	bf00      	nop
 80018d8:	20000688 	.word	0x20000688

080018dc <EXTI15_10_IRQHandler>:

/**
* @brief This function handles EXTI line[15:10] interrupts.
*/
void EXTI15_10_IRQHandler(void)
{
 80018dc:	b580      	push	{r7, lr}
 80018de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 80018e0:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80018e4:	f001 fcb0 	bl	8003248 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 80018e8:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80018ec:	f001 fcac 	bl	8003248 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 80018f0:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80018f4:	f001 fca8 	bl	8003248 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 80018f8:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80018fc:	f001 fca4 	bl	8003248 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001900:	bf00      	nop
 8001902:	bd80      	pop	{r7, pc}

08001904 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001904:	b580      	push	{r7, lr}
 8001906:	b086      	sub	sp, #24
 8001908:	af00      	add	r7, sp, #0
 800190a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800190c:	4a14      	ldr	r2, [pc, #80]	; (8001960 <_sbrk+0x5c>)
 800190e:	4b15      	ldr	r3, [pc, #84]	; (8001964 <_sbrk+0x60>)
 8001910:	1ad3      	subs	r3, r2, r3
 8001912:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001914:	697b      	ldr	r3, [r7, #20]
 8001916:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001918:	4b13      	ldr	r3, [pc, #76]	; (8001968 <_sbrk+0x64>)
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	2b00      	cmp	r3, #0
 800191e:	d102      	bne.n	8001926 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001920:	4b11      	ldr	r3, [pc, #68]	; (8001968 <_sbrk+0x64>)
 8001922:	4a12      	ldr	r2, [pc, #72]	; (800196c <_sbrk+0x68>)
 8001924:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001926:	4b10      	ldr	r3, [pc, #64]	; (8001968 <_sbrk+0x64>)
 8001928:	681a      	ldr	r2, [r3, #0]
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	4413      	add	r3, r2
 800192e:	693a      	ldr	r2, [r7, #16]
 8001930:	429a      	cmp	r2, r3
 8001932:	d207      	bcs.n	8001944 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001934:	f003 f8b0 	bl	8004a98 <__errno>
 8001938:	4602      	mov	r2, r0
 800193a:	230c      	movs	r3, #12
 800193c:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 800193e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001942:	e009      	b.n	8001958 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001944:	4b08      	ldr	r3, [pc, #32]	; (8001968 <_sbrk+0x64>)
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800194a:	4b07      	ldr	r3, [pc, #28]	; (8001968 <_sbrk+0x64>)
 800194c:	681a      	ldr	r2, [r3, #0]
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	4413      	add	r3, r2
 8001952:	4a05      	ldr	r2, [pc, #20]	; (8001968 <_sbrk+0x64>)
 8001954:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001956:	68fb      	ldr	r3, [r7, #12]
}
 8001958:	4618      	mov	r0, r3
 800195a:	3718      	adds	r7, #24
 800195c:	46bd      	mov	sp, r7
 800195e:	bd80      	pop	{r7, pc}
 8001960:	20005000 	.word	0x20005000
 8001964:	00000400 	.word	0x00000400
 8001968:	20000244 	.word	0x20000244
 800196c:	20000958 	.word	0x20000958

08001970 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001970:	b480      	push	{r7}
 8001972:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8001974:	4b15      	ldr	r3, [pc, #84]	; (80019cc <SystemInit+0x5c>)
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	4a14      	ldr	r2, [pc, #80]	; (80019cc <SystemInit+0x5c>)
 800197a:	f043 0301 	orr.w	r3, r3, #1
 800197e:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8001980:	4b12      	ldr	r3, [pc, #72]	; (80019cc <SystemInit+0x5c>)
 8001982:	685a      	ldr	r2, [r3, #4]
 8001984:	4911      	ldr	r1, [pc, #68]	; (80019cc <SystemInit+0x5c>)
 8001986:	4b12      	ldr	r3, [pc, #72]	; (80019d0 <SystemInit+0x60>)
 8001988:	4013      	ands	r3, r2
 800198a:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 800198c:	4b0f      	ldr	r3, [pc, #60]	; (80019cc <SystemInit+0x5c>)
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	4a0e      	ldr	r2, [pc, #56]	; (80019cc <SystemInit+0x5c>)
 8001992:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8001996:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800199a:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800199c:	4b0b      	ldr	r3, [pc, #44]	; (80019cc <SystemInit+0x5c>)
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	4a0a      	ldr	r2, [pc, #40]	; (80019cc <SystemInit+0x5c>)
 80019a2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80019a6:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 80019a8:	4b08      	ldr	r3, [pc, #32]	; (80019cc <SystemInit+0x5c>)
 80019aa:	685b      	ldr	r3, [r3, #4]
 80019ac:	4a07      	ldr	r2, [pc, #28]	; (80019cc <SystemInit+0x5c>)
 80019ae:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 80019b2:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 80019b4:	4b05      	ldr	r3, [pc, #20]	; (80019cc <SystemInit+0x5c>)
 80019b6:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 80019ba:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 80019bc:	4b05      	ldr	r3, [pc, #20]	; (80019d4 <SystemInit+0x64>)
 80019be:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80019c2:	609a      	str	r2, [r3, #8]
#endif 
}
 80019c4:	bf00      	nop
 80019c6:	46bd      	mov	sp, r7
 80019c8:	bc80      	pop	{r7}
 80019ca:	4770      	bx	lr
 80019cc:	40021000 	.word	0x40021000
 80019d0:	f8ff0000 	.word	0xf8ff0000
 80019d4:	e000ed00 	.word	0xe000ed00

080019d8 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80019d8:	b580      	push	{r7, lr}
 80019da:	b08a      	sub	sp, #40	; 0x28
 80019dc:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig;
  TIM_OC_InitTypeDef sConfigOC;

  htim2.Instance = TIM2;
 80019de:	4b2c      	ldr	r3, [pc, #176]	; (8001a90 <MX_TIM2_Init+0xb8>)
 80019e0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80019e4:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80019e6:	4b2a      	ldr	r3, [pc, #168]	; (8001a90 <MX_TIM2_Init+0xb8>)
 80019e8:	2200      	movs	r2, #0
 80019ea:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80019ec:	4b28      	ldr	r3, [pc, #160]	; (8001a90 <MX_TIM2_Init+0xb8>)
 80019ee:	2200      	movs	r2, #0
 80019f0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10000-1;
 80019f2:	4b27      	ldr	r3, [pc, #156]	; (8001a90 <MX_TIM2_Init+0xb8>)
 80019f4:	f242 720f 	movw	r2, #9999	; 0x270f
 80019f8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80019fa:	4b25      	ldr	r3, [pc, #148]	; (8001a90 <MX_TIM2_Init+0xb8>)
 80019fc:	2200      	movs	r2, #0
 80019fe:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a00:	4b23      	ldr	r3, [pc, #140]	; (8001a90 <MX_TIM2_Init+0xb8>)
 8001a02:	2200      	movs	r2, #0
 8001a04:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001a06:	4822      	ldr	r0, [pc, #136]	; (8001a90 <MX_TIM2_Init+0xb8>)
 8001a08:	f002 fcc0 	bl	800438c <HAL_TIM_PWM_Init>
 8001a0c:	4603      	mov	r3, r0
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d003      	beq.n	8001a1a <MX_TIM2_Init+0x42>
  {
    _Error_Handler(__FILE__, __LINE__);
 8001a12:	213f      	movs	r1, #63	; 0x3f
 8001a14:	481f      	ldr	r0, [pc, #124]	; (8001a94 <MX_TIM2_Init+0xbc>)
 8001a16:	f7ff fed5 	bl	80017c4 <_Error_Handler>
  }

  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a1a:	2300      	movs	r3, #0
 8001a1c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a1e:	2300      	movs	r3, #0
 8001a20:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001a22:	f107 0320 	add.w	r3, r7, #32
 8001a26:	4619      	mov	r1, r3
 8001a28:	4819      	ldr	r0, [pc, #100]	; (8001a90 <MX_TIM2_Init+0xb8>)
 8001a2a:	f002 fff1 	bl	8004a10 <HAL_TIMEx_MasterConfigSynchronization>
 8001a2e:	4603      	mov	r3, r0
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d003      	beq.n	8001a3c <MX_TIM2_Init+0x64>
  {
    _Error_Handler(__FILE__, __LINE__);
 8001a34:	2146      	movs	r1, #70	; 0x46
 8001a36:	4817      	ldr	r0, [pc, #92]	; (8001a94 <MX_TIM2_Init+0xbc>)
 8001a38:	f7ff fec4 	bl	80017c4 <_Error_Handler>
  }

  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001a3c:	2360      	movs	r3, #96	; 0x60
 8001a3e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001a40:	2300      	movs	r3, #0
 8001a42:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001a44:	2300      	movs	r3, #0
 8001a46:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001a48:	2300      	movs	r3, #0
 8001a4a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001a4c:	1d3b      	adds	r3, r7, #4
 8001a4e:	2208      	movs	r2, #8
 8001a50:	4619      	mov	r1, r3
 8001a52:	480f      	ldr	r0, [pc, #60]	; (8001a90 <MX_TIM2_Init+0xb8>)
 8001a54:	f002 fcee 	bl	8004434 <HAL_TIM_PWM_ConfigChannel>
 8001a58:	4603      	mov	r3, r0
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d003      	beq.n	8001a66 <MX_TIM2_Init+0x8e>
  {
    _Error_Handler(__FILE__, __LINE__);
 8001a5e:	214f      	movs	r1, #79	; 0x4f
 8001a60:	480c      	ldr	r0, [pc, #48]	; (8001a94 <MX_TIM2_Init+0xbc>)
 8001a62:	f7ff feaf 	bl	80017c4 <_Error_Handler>
  }

  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001a66:	1d3b      	adds	r3, r7, #4
 8001a68:	220c      	movs	r2, #12
 8001a6a:	4619      	mov	r1, r3
 8001a6c:	4808      	ldr	r0, [pc, #32]	; (8001a90 <MX_TIM2_Init+0xb8>)
 8001a6e:	f002 fce1 	bl	8004434 <HAL_TIM_PWM_ConfigChannel>
 8001a72:	4603      	mov	r3, r0
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d003      	beq.n	8001a80 <MX_TIM2_Init+0xa8>
  {
    _Error_Handler(__FILE__, __LINE__);
 8001a78:	2154      	movs	r1, #84	; 0x54
 8001a7a:	4806      	ldr	r0, [pc, #24]	; (8001a94 <MX_TIM2_Init+0xbc>)
 8001a7c:	f7ff fea2 	bl	80017c4 <_Error_Handler>
  }

  HAL_TIM_MspPostInit(&htim2);
 8001a80:	4803      	ldr	r0, [pc, #12]	; (8001a90 <MX_TIM2_Init+0xb8>)
 8001a82:	f000 f825 	bl	8001ad0 <HAL_TIM_MspPostInit>

}
 8001a86:	bf00      	nop
 8001a88:	3728      	adds	r7, #40	; 0x28
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	bd80      	pop	{r7, pc}
 8001a8e:	bf00      	nop
 8001a90:	2000090c 	.word	0x2000090c
 8001a94:	080086b8 	.word	0x080086b8

08001a98 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8001a98:	b480      	push	{r7}
 8001a9a:	b085      	sub	sp, #20
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM2)
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001aa8:	d10b      	bne.n	8001ac2 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001aaa:	4b08      	ldr	r3, [pc, #32]	; (8001acc <HAL_TIM_PWM_MspInit+0x34>)
 8001aac:	69db      	ldr	r3, [r3, #28]
 8001aae:	4a07      	ldr	r2, [pc, #28]	; (8001acc <HAL_TIM_PWM_MspInit+0x34>)
 8001ab0:	f043 0301 	orr.w	r3, r3, #1
 8001ab4:	61d3      	str	r3, [r2, #28]
 8001ab6:	4b05      	ldr	r3, [pc, #20]	; (8001acc <HAL_TIM_PWM_MspInit+0x34>)
 8001ab8:	69db      	ldr	r3, [r3, #28]
 8001aba:	f003 0301 	and.w	r3, r3, #1
 8001abe:	60fb      	str	r3, [r7, #12]
 8001ac0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8001ac2:	bf00      	nop
 8001ac4:	3714      	adds	r7, #20
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	bc80      	pop	{r7}
 8001aca:	4770      	bx	lr
 8001acc:	40021000 	.word	0x40021000

08001ad0 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	b086      	sub	sp, #24
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  if(timHandle->Instance==TIM2)
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001ae0:	d118      	bne.n	8001b14 <HAL_TIM_MspPostInit+0x44>

    /**TIM2 GPIO Configuration
    PB10     ------> TIM2_CH3
    PB11     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = PWM_M1_Pin|PWM_M2_Pin;
 8001ae2:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001ae6:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ae8:	2302      	movs	r3, #2
 8001aea:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001aec:	2302      	movs	r3, #2
 8001aee:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001af0:	f107 0308 	add.w	r3, r7, #8
 8001af4:	4619      	mov	r1, r3
 8001af6:	4809      	ldr	r0, [pc, #36]	; (8001b1c <HAL_TIM_MspPostInit+0x4c>)
 8001af8:	f001 fa08 	bl	8002f0c <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM2_PARTIAL_2();
 8001afc:	4b08      	ldr	r3, [pc, #32]	; (8001b20 <HAL_TIM_MspPostInit+0x50>)
 8001afe:	685b      	ldr	r3, [r3, #4]
 8001b00:	4a07      	ldr	r2, [pc, #28]	; (8001b20 <HAL_TIM_MspPostInit+0x50>)
 8001b02:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001b06:	6053      	str	r3, [r2, #4]
 8001b08:	4b05      	ldr	r3, [pc, #20]	; (8001b20 <HAL_TIM_MspPostInit+0x50>)
 8001b0a:	685b      	ldr	r3, [r3, #4]
 8001b0c:	4a04      	ldr	r2, [pc, #16]	; (8001b20 <HAL_TIM_MspPostInit+0x50>)
 8001b0e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001b12:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001b14:	bf00      	nop
 8001b16:	3718      	adds	r7, #24
 8001b18:	46bd      	mov	sp, r7
 8001b1a:	bd80      	pop	{r7, pc}
 8001b1c:	40010c00 	.word	0x40010c00
 8001b20:	40010000 	.word	0x40010000

08001b24 <user_pwm_setvalue_1>:

/* USER CODE BEGIN 1 */


void user_pwm_setvalue_1(uint16_t value)
{
 8001b24:	b580      	push	{r7, lr}
 8001b26:	b08a      	sub	sp, #40	; 0x28
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	4603      	mov	r3, r0
 8001b2c:	80fb      	strh	r3, [r7, #6]
    TIM_OC_InitTypeDef sConfigOC;

    sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001b2e:	2360      	movs	r3, #96	; 0x60
 8001b30:	60fb      	str	r3, [r7, #12]
    sConfigOC.Pulse = value;
 8001b32:	88fb      	ldrh	r3, [r7, #6]
 8001b34:	613b      	str	r3, [r7, #16]
    sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001b36:	2300      	movs	r3, #0
 8001b38:	617b      	str	r3, [r7, #20]
    sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001b3a:	2300      	movs	r3, #0
 8001b3c:	61fb      	str	r3, [r7, #28]
    HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3);
 8001b3e:	f107 030c 	add.w	r3, r7, #12
 8001b42:	2208      	movs	r2, #8
 8001b44:	4619      	mov	r1, r3
 8001b46:	4805      	ldr	r0, [pc, #20]	; (8001b5c <user_pwm_setvalue_1+0x38>)
 8001b48:	f002 fc74 	bl	8004434 <HAL_TIM_PWM_ConfigChannel>
    HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 8001b4c:	2108      	movs	r1, #8
 8001b4e:	4803      	ldr	r0, [pc, #12]	; (8001b5c <user_pwm_setvalue_1+0x38>)
 8001b50:	f002 fc48 	bl	80043e4 <HAL_TIM_PWM_Start>
    //HAL_TIM_MspPostInit(&htim2);
}
 8001b54:	bf00      	nop
 8001b56:	3728      	adds	r7, #40	; 0x28
 8001b58:	46bd      	mov	sp, r7
 8001b5a:	bd80      	pop	{r7, pc}
 8001b5c:	2000090c 	.word	0x2000090c

08001b60 <user_pwm_setvalue_2>:
void user_pwm_setvalue_2(uint16_t value)
{
 8001b60:	b580      	push	{r7, lr}
 8001b62:	b08a      	sub	sp, #40	; 0x28
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	4603      	mov	r3, r0
 8001b68:	80fb      	strh	r3, [r7, #6]
    TIM_OC_InitTypeDef sConfigOC;

    sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001b6a:	2360      	movs	r3, #96	; 0x60
 8001b6c:	60fb      	str	r3, [r7, #12]
    sConfigOC.Pulse = value;
 8001b6e:	88fb      	ldrh	r3, [r7, #6]
 8001b70:	613b      	str	r3, [r7, #16]
    sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001b72:	2300      	movs	r3, #0
 8001b74:	617b      	str	r3, [r7, #20]
    sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001b76:	2300      	movs	r3, #0
 8001b78:	61fb      	str	r3, [r7, #28]
    HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4);
 8001b7a:	f107 030c 	add.w	r3, r7, #12
 8001b7e:	220c      	movs	r2, #12
 8001b80:	4619      	mov	r1, r3
 8001b82:	4805      	ldr	r0, [pc, #20]	; (8001b98 <user_pwm_setvalue_2+0x38>)
 8001b84:	f002 fc56 	bl	8004434 <HAL_TIM_PWM_ConfigChannel>
    HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 8001b88:	210c      	movs	r1, #12
 8001b8a:	4803      	ldr	r0, [pc, #12]	; (8001b98 <user_pwm_setvalue_2+0x38>)
 8001b8c:	f002 fc2a 	bl	80043e4 <HAL_TIM_PWM_Start>
   // HAL_TIM_MspPostInit(&htim2);
}
 8001b90:	bf00      	nop
 8001b92:	3728      	adds	r7, #40	; 0x28
 8001b94:	46bd      	mov	sp, r7
 8001b96:	bd80      	pop	{r7, pc}
 8001b98:	2000090c 	.word	0x2000090c

08001b9c <ssd1306_Reset>:
#include <stdlib.h>
#include <string.h>  // For memcpy

#if defined(SSD1306_USE_I2C)

void ssd1306_Reset(void) {
 8001b9c:	b480      	push	{r7}
 8001b9e:	af00      	add	r7, sp, #0
    /* for I2C - do nothing */
}
 8001ba0:	bf00      	nop
 8001ba2:	46bd      	mov	sp, r7
 8001ba4:	bc80      	pop	{r7}
 8001ba6:	4770      	bx	lr

08001ba8 <ssd1306_WriteCommand>:


// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	b086      	sub	sp, #24
 8001bac:	af04      	add	r7, sp, #16
 8001bae:	4603      	mov	r3, r0
 8001bb0:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 8001bb2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001bb6:	9302      	str	r3, [sp, #8]
 8001bb8:	2301      	movs	r3, #1
 8001bba:	9301      	str	r3, [sp, #4]
 8001bbc:	1dfb      	adds	r3, r7, #7
 8001bbe:	9300      	str	r3, [sp, #0]
 8001bc0:	2301      	movs	r3, #1
 8001bc2:	2200      	movs	r2, #0
 8001bc4:	2178      	movs	r1, #120	; 0x78
 8001bc6:	4803      	ldr	r0, [pc, #12]	; (8001bd4 <ssd1306_WriteCommand+0x2c>)
 8001bc8:	f001 fc36 	bl	8003438 <HAL_I2C_Mem_Write>
}
 8001bcc:	bf00      	nop
 8001bce:	3708      	adds	r7, #8
 8001bd0:	46bd      	mov	sp, r7
 8001bd2:	bd80      	pop	{r7, pc}
 8001bd4:	200006cc 	.word	0x200006cc

08001bd8 <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	b086      	sub	sp, #24
 8001bdc:	af04      	add	r7, sp, #16
 8001bde:	6078      	str	r0, [r7, #4]
 8001be0:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 8001be2:	683b      	ldr	r3, [r7, #0]
 8001be4:	b29b      	uxth	r3, r3
 8001be6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001bea:	9202      	str	r2, [sp, #8]
 8001bec:	9301      	str	r3, [sp, #4]
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	9300      	str	r3, [sp, #0]
 8001bf2:	2301      	movs	r3, #1
 8001bf4:	2240      	movs	r2, #64	; 0x40
 8001bf6:	2178      	movs	r1, #120	; 0x78
 8001bf8:	4803      	ldr	r0, [pc, #12]	; (8001c08 <ssd1306_WriteData+0x30>)
 8001bfa:	f001 fc1d 	bl	8003438 <HAL_I2C_Mem_Write>
}
 8001bfe:	bf00      	nop
 8001c00:	3708      	adds	r7, #8
 8001c02:	46bd      	mov	sp, r7
 8001c04:	bd80      	pop	{r7, pc}
 8001c06:	bf00      	nop
 8001c08:	200006cc 	.word	0x200006cc

08001c0c <ssd1306_Init>:
    }
    return ret;
}

// Initialize the oled screen
void ssd1306_Init(void) {
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 8001c10:	f7ff ffc4 	bl	8001b9c <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 8001c14:	2064      	movs	r0, #100	; 0x64
 8001c16:	f000 fa73 	bl	8002100 <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 8001c1a:	2000      	movs	r0, #0
 8001c1c:	f000 f9e2 	bl	8001fe4 <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 8001c20:	2020      	movs	r0, #32
 8001c22:	f7ff ffc1 	bl	8001ba8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 8001c26:	2000      	movs	r0, #0
 8001c28:	f7ff ffbe 	bl	8001ba8 <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8001c2c:	20b0      	movs	r0, #176	; 0xb0
 8001c2e:	f7ff ffbb 	bl	8001ba8 <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 8001c32:	20c8      	movs	r0, #200	; 0xc8
 8001c34:	f7ff ffb8 	bl	8001ba8 <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 8001c38:	2000      	movs	r0, #0
 8001c3a:	f7ff ffb5 	bl	8001ba8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 8001c3e:	2010      	movs	r0, #16
 8001c40:	f7ff ffb2 	bl	8001ba8 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 8001c44:	2040      	movs	r0, #64	; 0x40
 8001c46:	f7ff ffaf 	bl	8001ba8 <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 8001c4a:	20ff      	movs	r0, #255	; 0xff
 8001c4c:	f000 f9b6 	bl	8001fbc <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 8001c50:	20a1      	movs	r0, #161	; 0xa1
 8001c52:	f7ff ffa9 	bl	8001ba8 <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 8001c56:	20a6      	movs	r0, #166	; 0xa6
 8001c58:	f7ff ffa6 	bl	8001ba8 <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 8001c5c:	20a8      	movs	r0, #168	; 0xa8
 8001c5e:	f7ff ffa3 	bl	8001ba8 <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x3F); //
 8001c62:	203f      	movs	r0, #63	; 0x3f
 8001c64:	f7ff ffa0 	bl	8001ba8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8001c68:	20a4      	movs	r0, #164	; 0xa4
 8001c6a:	f7ff ff9d 	bl	8001ba8 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 8001c6e:	20d3      	movs	r0, #211	; 0xd3
 8001c70:	f7ff ff9a 	bl	8001ba8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 8001c74:	2000      	movs	r0, #0
 8001c76:	f7ff ff97 	bl	8001ba8 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 8001c7a:	20d5      	movs	r0, #213	; 0xd5
 8001c7c:	f7ff ff94 	bl	8001ba8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 8001c80:	20f0      	movs	r0, #240	; 0xf0
 8001c82:	f7ff ff91 	bl	8001ba8 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 8001c86:	20d9      	movs	r0, #217	; 0xd9
 8001c88:	f7ff ff8e 	bl	8001ba8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 8001c8c:	2022      	movs	r0, #34	; 0x22
 8001c8e:	f7ff ff8b 	bl	8001ba8 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 8001c92:	20da      	movs	r0, #218	; 0xda
 8001c94:	f7ff ff88 	bl	8001ba8 <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x12);
 8001c98:	2012      	movs	r0, #18
 8001c9a:	f7ff ff85 	bl	8001ba8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 8001c9e:	20db      	movs	r0, #219	; 0xdb
 8001ca0:	f7ff ff82 	bl	8001ba8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 8001ca4:	2020      	movs	r0, #32
 8001ca6:	f7ff ff7f 	bl	8001ba8 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 8001caa:	208d      	movs	r0, #141	; 0x8d
 8001cac:	f7ff ff7c 	bl	8001ba8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 8001cb0:	2014      	movs	r0, #20
 8001cb2:	f7ff ff79 	bl	8001ba8 <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 8001cb6:	2001      	movs	r0, #1
 8001cb8:	f000 f994 	bl	8001fe4 <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 8001cbc:	2000      	movs	r0, #0
 8001cbe:	f000 f80f 	bl	8001ce0 <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 8001cc2:	f000 f82f 	bl	8001d24 <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 8001cc6:	4b05      	ldr	r3, [pc, #20]	; (8001cdc <ssd1306_Init+0xd0>)
 8001cc8:	2200      	movs	r2, #0
 8001cca:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 8001ccc:	4b03      	ldr	r3, [pc, #12]	; (8001cdc <ssd1306_Init+0xd0>)
 8001cce:	2200      	movs	r2, #0
 8001cd0:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 8001cd2:	4b02      	ldr	r3, [pc, #8]	; (8001cdc <ssd1306_Init+0xd0>)
 8001cd4:	2201      	movs	r2, #1
 8001cd6:	715a      	strb	r2, [r3, #5]
}
 8001cd8:	bf00      	nop
 8001cda:	bd80      	pop	{r7, pc}
 8001cdc:	20000648 	.word	0x20000648

08001ce0 <ssd1306_Fill>:

// Fill the whole screen with the given color
void ssd1306_Fill(SSD1306_COLOR color) {
 8001ce0:	b480      	push	{r7}
 8001ce2:	b085      	sub	sp, #20
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	4603      	mov	r3, r0
 8001ce8:	71fb      	strb	r3, [r7, #7]
    /* Set memory */
    uint32_t i;

    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 8001cea:	2300      	movs	r3, #0
 8001cec:	60fb      	str	r3, [r7, #12]
 8001cee:	e00d      	b.n	8001d0c <ssd1306_Fill+0x2c>
        SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 8001cf0:	79fb      	ldrb	r3, [r7, #7]
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d101      	bne.n	8001cfa <ssd1306_Fill+0x1a>
 8001cf6:	2100      	movs	r1, #0
 8001cf8:	e000      	b.n	8001cfc <ssd1306_Fill+0x1c>
 8001cfa:	21ff      	movs	r1, #255	; 0xff
 8001cfc:	4a08      	ldr	r2, [pc, #32]	; (8001d20 <ssd1306_Fill+0x40>)
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	4413      	add	r3, r2
 8001d02:	460a      	mov	r2, r1
 8001d04:	701a      	strb	r2, [r3, #0]
    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	3301      	adds	r3, #1
 8001d0a:	60fb      	str	r3, [r7, #12]
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001d12:	d3ed      	bcc.n	8001cf0 <ssd1306_Fill+0x10>
    }
}
 8001d14:	bf00      	nop
 8001d16:	3714      	adds	r7, #20
 8001d18:	46bd      	mov	sp, r7
 8001d1a:	bc80      	pop	{r7}
 8001d1c:	4770      	bx	lr
 8001d1e:	bf00      	nop
 8001d20:	20000248 	.word	0x20000248

08001d24 <ssd1306_UpdateScreen>:

// Write the screenbuffer with changed to the screen
void ssd1306_UpdateScreen(void) {
 8001d24:	b580      	push	{r7, lr}
 8001d26:	b082      	sub	sp, #8
 8001d28:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8001d2a:	2300      	movs	r3, #0
 8001d2c:	71fb      	strb	r3, [r7, #7]
 8001d2e:	e016      	b.n	8001d5e <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 8001d30:	79fb      	ldrb	r3, [r7, #7]
 8001d32:	3b50      	subs	r3, #80	; 0x50
 8001d34:	b2db      	uxtb	r3, r3
 8001d36:	4618      	mov	r0, r3
 8001d38:	f7ff ff36 	bl	8001ba8 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00);
 8001d3c:	2000      	movs	r0, #0
 8001d3e:	f7ff ff33 	bl	8001ba8 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10);
 8001d42:	2010      	movs	r0, #16
 8001d44:	f7ff ff30 	bl	8001ba8 <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 8001d48:	79fb      	ldrb	r3, [r7, #7]
 8001d4a:	01db      	lsls	r3, r3, #7
 8001d4c:	4a07      	ldr	r2, [pc, #28]	; (8001d6c <ssd1306_UpdateScreen+0x48>)
 8001d4e:	4413      	add	r3, r2
 8001d50:	2180      	movs	r1, #128	; 0x80
 8001d52:	4618      	mov	r0, r3
 8001d54:	f7ff ff40 	bl	8001bd8 <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8001d58:	79fb      	ldrb	r3, [r7, #7]
 8001d5a:	3301      	adds	r3, #1
 8001d5c:	71fb      	strb	r3, [r7, #7]
 8001d5e:	79fb      	ldrb	r3, [r7, #7]
 8001d60:	2b07      	cmp	r3, #7
 8001d62:	d9e5      	bls.n	8001d30 <ssd1306_UpdateScreen+0xc>
    }
}
 8001d64:	bf00      	nop
 8001d66:	3708      	adds	r7, #8
 8001d68:	46bd      	mov	sp, r7
 8001d6a:	bd80      	pop	{r7, pc}
 8001d6c:	20000248 	.word	0x20000248

08001d70 <ssd1306_DrawPixel>:

//    Draw one pixel in the screenbuffer
//    X => X Coordinate
//    Y => Y Coordinate
//    color => Pixel color
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 8001d70:	b480      	push	{r7}
 8001d72:	b083      	sub	sp, #12
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	4603      	mov	r3, r0
 8001d78:	71fb      	strb	r3, [r7, #7]
 8001d7a:	460b      	mov	r3, r1
 8001d7c:	71bb      	strb	r3, [r7, #6]
 8001d7e:	4613      	mov	r3, r2
 8001d80:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 8001d82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	db48      	blt.n	8001e1c <ssd1306_DrawPixel+0xac>
 8001d8a:	79bb      	ldrb	r3, [r7, #6]
 8001d8c:	2b3f      	cmp	r3, #63	; 0x3f
 8001d8e:	d845      	bhi.n	8001e1c <ssd1306_DrawPixel+0xac>
        // Don't write outside the buffer
        return;
    }
    
    // Check if pixel should be inverted
    if(SSD1306.Inverted) {
 8001d90:	4b25      	ldr	r3, [pc, #148]	; (8001e28 <ssd1306_DrawPixel+0xb8>)
 8001d92:	791b      	ldrb	r3, [r3, #4]
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d006      	beq.n	8001da6 <ssd1306_DrawPixel+0x36>
        color = (SSD1306_COLOR)!color;
 8001d98:	797b      	ldrb	r3, [r7, #5]
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	bf0c      	ite	eq
 8001d9e:	2301      	moveq	r3, #1
 8001da0:	2300      	movne	r3, #0
 8001da2:	b2db      	uxtb	r3, r3
 8001da4:	717b      	strb	r3, [r7, #5]
    }
    
    // Draw in the right color
    if(color == White) {
 8001da6:	797b      	ldrb	r3, [r7, #5]
 8001da8:	2b01      	cmp	r3, #1
 8001daa:	d11a      	bne.n	8001de2 <ssd1306_DrawPixel+0x72>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8001dac:	79fa      	ldrb	r2, [r7, #7]
 8001dae:	79bb      	ldrb	r3, [r7, #6]
 8001db0:	08db      	lsrs	r3, r3, #3
 8001db2:	b2d8      	uxtb	r0, r3
 8001db4:	4603      	mov	r3, r0
 8001db6:	01db      	lsls	r3, r3, #7
 8001db8:	4413      	add	r3, r2
 8001dba:	4a1c      	ldr	r2, [pc, #112]	; (8001e2c <ssd1306_DrawPixel+0xbc>)
 8001dbc:	5cd3      	ldrb	r3, [r2, r3]
 8001dbe:	b25a      	sxtb	r2, r3
 8001dc0:	79bb      	ldrb	r3, [r7, #6]
 8001dc2:	f003 0307 	and.w	r3, r3, #7
 8001dc6:	2101      	movs	r1, #1
 8001dc8:	fa01 f303 	lsl.w	r3, r1, r3
 8001dcc:	b25b      	sxtb	r3, r3
 8001dce:	4313      	orrs	r3, r2
 8001dd0:	b259      	sxtb	r1, r3
 8001dd2:	79fa      	ldrb	r2, [r7, #7]
 8001dd4:	4603      	mov	r3, r0
 8001dd6:	01db      	lsls	r3, r3, #7
 8001dd8:	4413      	add	r3, r2
 8001dda:	b2c9      	uxtb	r1, r1
 8001ddc:	4a13      	ldr	r2, [pc, #76]	; (8001e2c <ssd1306_DrawPixel+0xbc>)
 8001dde:	54d1      	strb	r1, [r2, r3]
 8001de0:	e01d      	b.n	8001e1e <ssd1306_DrawPixel+0xae>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8001de2:	79fa      	ldrb	r2, [r7, #7]
 8001de4:	79bb      	ldrb	r3, [r7, #6]
 8001de6:	08db      	lsrs	r3, r3, #3
 8001de8:	b2d8      	uxtb	r0, r3
 8001dea:	4603      	mov	r3, r0
 8001dec:	01db      	lsls	r3, r3, #7
 8001dee:	4413      	add	r3, r2
 8001df0:	4a0e      	ldr	r2, [pc, #56]	; (8001e2c <ssd1306_DrawPixel+0xbc>)
 8001df2:	5cd3      	ldrb	r3, [r2, r3]
 8001df4:	b25a      	sxtb	r2, r3
 8001df6:	79bb      	ldrb	r3, [r7, #6]
 8001df8:	f003 0307 	and.w	r3, r3, #7
 8001dfc:	2101      	movs	r1, #1
 8001dfe:	fa01 f303 	lsl.w	r3, r1, r3
 8001e02:	b25b      	sxtb	r3, r3
 8001e04:	43db      	mvns	r3, r3
 8001e06:	b25b      	sxtb	r3, r3
 8001e08:	4013      	ands	r3, r2
 8001e0a:	b259      	sxtb	r1, r3
 8001e0c:	79fa      	ldrb	r2, [r7, #7]
 8001e0e:	4603      	mov	r3, r0
 8001e10:	01db      	lsls	r3, r3, #7
 8001e12:	4413      	add	r3, r2
 8001e14:	b2c9      	uxtb	r1, r1
 8001e16:	4a05      	ldr	r2, [pc, #20]	; (8001e2c <ssd1306_DrawPixel+0xbc>)
 8001e18:	54d1      	strb	r1, [r2, r3]
 8001e1a:	e000      	b.n	8001e1e <ssd1306_DrawPixel+0xae>
        return;
 8001e1c:	bf00      	nop
    }
}
 8001e1e:	370c      	adds	r7, #12
 8001e20:	46bd      	mov	sp, r7
 8001e22:	bc80      	pop	{r7}
 8001e24:	4770      	bx	lr
 8001e26:	bf00      	nop
 8001e28:	20000648 	.word	0x20000648
 8001e2c:	20000248 	.word	0x20000248

08001e30 <ssd1306_WriteChar>:

// Draw 1 char to the screen buffer
// ch       => char om weg te schrijven
// Font     => Font waarmee we gaan schrijven
// color    => Black or White
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color) {
 8001e30:	b590      	push	{r4, r7, lr}
 8001e32:	b089      	sub	sp, #36	; 0x24
 8001e34:	af00      	add	r7, sp, #0
 8001e36:	4604      	mov	r4, r0
 8001e38:	1d38      	adds	r0, r7, #4
 8001e3a:	e880 0006 	stmia.w	r0, {r1, r2}
 8001e3e:	461a      	mov	r2, r3
 8001e40:	4623      	mov	r3, r4
 8001e42:	73fb      	strb	r3, [r7, #15]
 8001e44:	4613      	mov	r3, r2
 8001e46:	73bb      	strb	r3, [r7, #14]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 8001e48:	7bfb      	ldrb	r3, [r7, #15]
 8001e4a:	2b1f      	cmp	r3, #31
 8001e4c:	d902      	bls.n	8001e54 <ssd1306_WriteChar+0x24>
 8001e4e:	7bfb      	ldrb	r3, [r7, #15]
 8001e50:	2b7e      	cmp	r3, #126	; 0x7e
 8001e52:	d901      	bls.n	8001e58 <ssd1306_WriteChar+0x28>
        return 0;
 8001e54:	2300      	movs	r3, #0
 8001e56:	e06d      	b.n	8001f34 <ssd1306_WriteChar+0x104>
    
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 8001e58:	4b38      	ldr	r3, [pc, #224]	; (8001f3c <ssd1306_WriteChar+0x10c>)
 8001e5a:	881b      	ldrh	r3, [r3, #0]
 8001e5c:	461a      	mov	r2, r3
 8001e5e:	793b      	ldrb	r3, [r7, #4]
 8001e60:	4413      	add	r3, r2
 8001e62:	2b80      	cmp	r3, #128	; 0x80
 8001e64:	dc06      	bgt.n	8001e74 <ssd1306_WriteChar+0x44>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.FontHeight))
 8001e66:	4b35      	ldr	r3, [pc, #212]	; (8001f3c <ssd1306_WriteChar+0x10c>)
 8001e68:	885b      	ldrh	r3, [r3, #2]
 8001e6a:	461a      	mov	r2, r3
 8001e6c:	797b      	ldrb	r3, [r7, #5]
 8001e6e:	4413      	add	r3, r2
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 8001e70:	2b40      	cmp	r3, #64	; 0x40
 8001e72:	dd01      	ble.n	8001e78 <ssd1306_WriteChar+0x48>
    {
        // Not enough space on current line
        return 0;
 8001e74:	2300      	movs	r3, #0
 8001e76:	e05d      	b.n	8001f34 <ssd1306_WriteChar+0x104>
    }
    
    // Use the font to write
    for(i = 0; i < Font.FontHeight; i++) {
 8001e78:	2300      	movs	r3, #0
 8001e7a:	61fb      	str	r3, [r7, #28]
 8001e7c:	e04c      	b.n	8001f18 <ssd1306_WriteChar+0xe8>
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 8001e7e:	68ba      	ldr	r2, [r7, #8]
 8001e80:	7bfb      	ldrb	r3, [r7, #15]
 8001e82:	3b20      	subs	r3, #32
 8001e84:	7979      	ldrb	r1, [r7, #5]
 8001e86:	fb01 f303 	mul.w	r3, r1, r3
 8001e8a:	4619      	mov	r1, r3
 8001e8c:	69fb      	ldr	r3, [r7, #28]
 8001e8e:	440b      	add	r3, r1
 8001e90:	005b      	lsls	r3, r3, #1
 8001e92:	4413      	add	r3, r2
 8001e94:	881b      	ldrh	r3, [r3, #0]
 8001e96:	617b      	str	r3, [r7, #20]
        for(j = 0; j < Font.FontWidth; j++) {
 8001e98:	2300      	movs	r3, #0
 8001e9a:	61bb      	str	r3, [r7, #24]
 8001e9c:	e034      	b.n	8001f08 <ssd1306_WriteChar+0xd8>
            if((b << j) & 0x8000)  {
 8001e9e:	697a      	ldr	r2, [r7, #20]
 8001ea0:	69bb      	ldr	r3, [r7, #24]
 8001ea2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ea6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d012      	beq.n	8001ed4 <ssd1306_WriteChar+0xa4>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 8001eae:	4b23      	ldr	r3, [pc, #140]	; (8001f3c <ssd1306_WriteChar+0x10c>)
 8001eb0:	881b      	ldrh	r3, [r3, #0]
 8001eb2:	b2da      	uxtb	r2, r3
 8001eb4:	69bb      	ldr	r3, [r7, #24]
 8001eb6:	b2db      	uxtb	r3, r3
 8001eb8:	4413      	add	r3, r2
 8001eba:	b2d8      	uxtb	r0, r3
 8001ebc:	4b1f      	ldr	r3, [pc, #124]	; (8001f3c <ssd1306_WriteChar+0x10c>)
 8001ebe:	885b      	ldrh	r3, [r3, #2]
 8001ec0:	b2da      	uxtb	r2, r3
 8001ec2:	69fb      	ldr	r3, [r7, #28]
 8001ec4:	b2db      	uxtb	r3, r3
 8001ec6:	4413      	add	r3, r2
 8001ec8:	b2db      	uxtb	r3, r3
 8001eca:	7bba      	ldrb	r2, [r7, #14]
 8001ecc:	4619      	mov	r1, r3
 8001ece:	f7ff ff4f 	bl	8001d70 <ssd1306_DrawPixel>
 8001ed2:	e016      	b.n	8001f02 <ssd1306_WriteChar+0xd2>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8001ed4:	4b19      	ldr	r3, [pc, #100]	; (8001f3c <ssd1306_WriteChar+0x10c>)
 8001ed6:	881b      	ldrh	r3, [r3, #0]
 8001ed8:	b2da      	uxtb	r2, r3
 8001eda:	69bb      	ldr	r3, [r7, #24]
 8001edc:	b2db      	uxtb	r3, r3
 8001ede:	4413      	add	r3, r2
 8001ee0:	b2d8      	uxtb	r0, r3
 8001ee2:	4b16      	ldr	r3, [pc, #88]	; (8001f3c <ssd1306_WriteChar+0x10c>)
 8001ee4:	885b      	ldrh	r3, [r3, #2]
 8001ee6:	b2da      	uxtb	r2, r3
 8001ee8:	69fb      	ldr	r3, [r7, #28]
 8001eea:	b2db      	uxtb	r3, r3
 8001eec:	4413      	add	r3, r2
 8001eee:	b2d9      	uxtb	r1, r3
 8001ef0:	7bbb      	ldrb	r3, [r7, #14]
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	bf0c      	ite	eq
 8001ef6:	2301      	moveq	r3, #1
 8001ef8:	2300      	movne	r3, #0
 8001efa:	b2db      	uxtb	r3, r3
 8001efc:	461a      	mov	r2, r3
 8001efe:	f7ff ff37 	bl	8001d70 <ssd1306_DrawPixel>
        for(j = 0; j < Font.FontWidth; j++) {
 8001f02:	69bb      	ldr	r3, [r7, #24]
 8001f04:	3301      	adds	r3, #1
 8001f06:	61bb      	str	r3, [r7, #24]
 8001f08:	793b      	ldrb	r3, [r7, #4]
 8001f0a:	461a      	mov	r2, r3
 8001f0c:	69bb      	ldr	r3, [r7, #24]
 8001f0e:	4293      	cmp	r3, r2
 8001f10:	d3c5      	bcc.n	8001e9e <ssd1306_WriteChar+0x6e>
    for(i = 0; i < Font.FontHeight; i++) {
 8001f12:	69fb      	ldr	r3, [r7, #28]
 8001f14:	3301      	adds	r3, #1
 8001f16:	61fb      	str	r3, [r7, #28]
 8001f18:	797b      	ldrb	r3, [r7, #5]
 8001f1a:	461a      	mov	r2, r3
 8001f1c:	69fb      	ldr	r3, [r7, #28]
 8001f1e:	4293      	cmp	r3, r2
 8001f20:	d3ad      	bcc.n	8001e7e <ssd1306_WriteChar+0x4e>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += Font.FontWidth;
 8001f22:	4b06      	ldr	r3, [pc, #24]	; (8001f3c <ssd1306_WriteChar+0x10c>)
 8001f24:	881a      	ldrh	r2, [r3, #0]
 8001f26:	793b      	ldrb	r3, [r7, #4]
 8001f28:	b29b      	uxth	r3, r3
 8001f2a:	4413      	add	r3, r2
 8001f2c:	b29a      	uxth	r2, r3
 8001f2e:	4b03      	ldr	r3, [pc, #12]	; (8001f3c <ssd1306_WriteChar+0x10c>)
 8001f30:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 8001f32:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f34:	4618      	mov	r0, r3
 8001f36:	3724      	adds	r7, #36	; 0x24
 8001f38:	46bd      	mov	sp, r7
 8001f3a:	bd90      	pop	{r4, r7, pc}
 8001f3c:	20000648 	.word	0x20000648

08001f40 <ssd1306_WriteString>:

// Write full string to screenbuffer
char ssd1306_WriteString(char* str, FontDef Font, SSD1306_COLOR color) {
 8001f40:	b580      	push	{r7, lr}
 8001f42:	b084      	sub	sp, #16
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	60f8      	str	r0, [r7, #12]
 8001f48:	1d38      	adds	r0, r7, #4
 8001f4a:	e880 0006 	stmia.w	r0, {r1, r2}
 8001f4e:	70fb      	strb	r3, [r7, #3]
    // Write until null-byte
    while (*str) {
 8001f50:	e012      	b.n	8001f78 <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	7818      	ldrb	r0, [r3, #0]
 8001f56:	78fb      	ldrb	r3, [r7, #3]
 8001f58:	1d3a      	adds	r2, r7, #4
 8001f5a:	ca06      	ldmia	r2, {r1, r2}
 8001f5c:	f7ff ff68 	bl	8001e30 <ssd1306_WriteChar>
 8001f60:	4603      	mov	r3, r0
 8001f62:	461a      	mov	r2, r3
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	781b      	ldrb	r3, [r3, #0]
 8001f68:	429a      	cmp	r2, r3
 8001f6a:	d002      	beq.n	8001f72 <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	781b      	ldrb	r3, [r3, #0]
 8001f70:	e008      	b.n	8001f84 <ssd1306_WriteString+0x44>
        }
        
        // Next char
        str++;
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	3301      	adds	r3, #1
 8001f76:	60fb      	str	r3, [r7, #12]
    while (*str) {
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	781b      	ldrb	r3, [r3, #0]
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d1e8      	bne.n	8001f52 <ssd1306_WriteString+0x12>
    }
    
    // Everything ok
    return *str;
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	781b      	ldrb	r3, [r3, #0]
}
 8001f84:	4618      	mov	r0, r3
 8001f86:	3710      	adds	r7, #16
 8001f88:	46bd      	mov	sp, r7
 8001f8a:	bd80      	pop	{r7, pc}

08001f8c <ssd1306_SetCursor>:

// Position the cursor
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 8001f8c:	b480      	push	{r7}
 8001f8e:	b083      	sub	sp, #12
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	4603      	mov	r3, r0
 8001f94:	460a      	mov	r2, r1
 8001f96:	71fb      	strb	r3, [r7, #7]
 8001f98:	4613      	mov	r3, r2
 8001f9a:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 8001f9c:	79fb      	ldrb	r3, [r7, #7]
 8001f9e:	b29a      	uxth	r2, r3
 8001fa0:	4b05      	ldr	r3, [pc, #20]	; (8001fb8 <ssd1306_SetCursor+0x2c>)
 8001fa2:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 8001fa4:	79bb      	ldrb	r3, [r7, #6]
 8001fa6:	b29a      	uxth	r2, r3
 8001fa8:	4b03      	ldr	r3, [pc, #12]	; (8001fb8 <ssd1306_SetCursor+0x2c>)
 8001faa:	805a      	strh	r2, [r3, #2]
}
 8001fac:	bf00      	nop
 8001fae:	370c      	adds	r7, #12
 8001fb0:	46bd      	mov	sp, r7
 8001fb2:	bc80      	pop	{r7}
 8001fb4:	4770      	bx	lr
 8001fb6:	bf00      	nop
 8001fb8:	20000648 	.word	0x20000648

08001fbc <ssd1306_SetContrast>:
  ssd1306_Line(x1,y2,x1,y1,color);

  return;
}

void ssd1306_SetContrast(const uint8_t value) {
 8001fbc:	b580      	push	{r7, lr}
 8001fbe:	b084      	sub	sp, #16
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	4603      	mov	r3, r0
 8001fc4:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 8001fc6:	2381      	movs	r3, #129	; 0x81
 8001fc8:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 8001fca:	7bfb      	ldrb	r3, [r7, #15]
 8001fcc:	4618      	mov	r0, r3
 8001fce:	f7ff fdeb 	bl	8001ba8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 8001fd2:	79fb      	ldrb	r3, [r7, #7]
 8001fd4:	4618      	mov	r0, r3
 8001fd6:	f7ff fde7 	bl	8001ba8 <ssd1306_WriteCommand>
}
 8001fda:	bf00      	nop
 8001fdc:	3710      	adds	r7, #16
 8001fde:	46bd      	mov	sp, r7
 8001fe0:	bd80      	pop	{r7, pc}
	...

08001fe4 <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 8001fe4:	b580      	push	{r7, lr}
 8001fe6:	b084      	sub	sp, #16
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	4603      	mov	r3, r0
 8001fec:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on) {
 8001fee:	79fb      	ldrb	r3, [r7, #7]
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d005      	beq.n	8002000 <ssd1306_SetDisplayOn+0x1c>
        value = 0xAF;   // Display on
 8001ff4:	23af      	movs	r3, #175	; 0xaf
 8001ff6:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 8001ff8:	4b08      	ldr	r3, [pc, #32]	; (800201c <ssd1306_SetDisplayOn+0x38>)
 8001ffa:	2201      	movs	r2, #1
 8001ffc:	719a      	strb	r2, [r3, #6]
 8001ffe:	e004      	b.n	800200a <ssd1306_SetDisplayOn+0x26>
    } else {
        value = 0xAE;   // Display off
 8002000:	23ae      	movs	r3, #174	; 0xae
 8002002:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 8002004:	4b05      	ldr	r3, [pc, #20]	; (800201c <ssd1306_SetDisplayOn+0x38>)
 8002006:	2200      	movs	r2, #0
 8002008:	719a      	strb	r2, [r3, #6]
    }
    ssd1306_WriteCommand(value);
 800200a:	7bfb      	ldrb	r3, [r7, #15]
 800200c:	4618      	mov	r0, r3
 800200e:	f7ff fdcb 	bl	8001ba8 <ssd1306_WriteCommand>
}
 8002012:	bf00      	nop
 8002014:	3710      	adds	r7, #16
 8002016:	46bd      	mov	sp, r7
 8002018:	bd80      	pop	{r7, pc}
 800201a:	bf00      	nop
 800201c:	20000648 	.word	0x20000648

08002020 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8002020:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8002022:	e003      	b.n	800202c <LoopCopyDataInit>

08002024 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8002024:	4b0b      	ldr	r3, [pc, #44]	; (8002054 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8002026:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8002028:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800202a:	3104      	adds	r1, #4

0800202c <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 800202c:	480a      	ldr	r0, [pc, #40]	; (8002058 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 800202e:	4b0b      	ldr	r3, [pc, #44]	; (800205c <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8002030:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8002032:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8002034:	d3f6      	bcc.n	8002024 <CopyDataInit>
  ldr r2, =_sbss
 8002036:	4a0a      	ldr	r2, [pc, #40]	; (8002060 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8002038:	e002      	b.n	8002040 <LoopFillZerobss>

0800203a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 800203a:	2300      	movs	r3, #0
  str r3, [r2], #4
 800203c:	f842 3b04 	str.w	r3, [r2], #4

08002040 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8002040:	4b08      	ldr	r3, [pc, #32]	; (8002064 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8002042:	429a      	cmp	r2, r3
  bcc FillZerobss
 8002044:	d3f9      	bcc.n	800203a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002046:	f7ff fc93 	bl	8001970 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800204a:	f002 fd2b 	bl	8004aa4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800204e:	f7ff f999 	bl	8001384 <main>
  bx lr
 8002052:	4770      	bx	lr
  ldr r3, =_sidata
 8002054:	08008fa8 	.word	0x08008fa8
  ldr r0, =_sdata
 8002058:	20000000 	.word	0x20000000
  ldr r3, =_edata
 800205c:	200001e8 	.word	0x200001e8
  ldr r2, =_sbss
 8002060:	200001e8 	.word	0x200001e8
  ldr r3, = _ebss
 8002064:	20000954 	.word	0x20000954

08002068 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002068:	e7fe      	b.n	8002068 <ADC1_2_IRQHandler>
	...

0800206c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800206c:	b580      	push	{r7, lr}
 800206e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002070:	4b08      	ldr	r3, [pc, #32]	; (8002094 <HAL_Init+0x28>)
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	4a07      	ldr	r2, [pc, #28]	; (8002094 <HAL_Init+0x28>)
 8002076:	f043 0310 	orr.w	r3, r3, #16
 800207a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800207c:	2003      	movs	r0, #3
 800207e:	f000 fce1 	bl	8002a44 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002082:	2000      	movs	r0, #0
 8002084:	f000 f808 	bl	8002098 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002088:	f7ff fba2 	bl	80017d0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800208c:	2300      	movs	r3, #0
}
 800208e:	4618      	mov	r0, r3
 8002090:	bd80      	pop	{r7, pc}
 8002092:	bf00      	nop
 8002094:	40022000 	.word	0x40022000

08002098 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002098:	b580      	push	{r7, lr}
 800209a:	b082      	sub	sp, #8
 800209c:	af00      	add	r7, sp, #0
 800209e:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(SystemCoreClock/1000U);
 80020a0:	4b09      	ldr	r3, [pc, #36]	; (80020c8 <HAL_InitTick+0x30>)
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	4a09      	ldr	r2, [pc, #36]	; (80020cc <HAL_InitTick+0x34>)
 80020a6:	fba2 2303 	umull	r2, r3, r2, r3
 80020aa:	099b      	lsrs	r3, r3, #6
 80020ac:	4618      	mov	r0, r3
 80020ae:	f000 fcfe 	bl	8002aae <HAL_SYSTICK_Config>

  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0U);
 80020b2:	2200      	movs	r2, #0
 80020b4:	6879      	ldr	r1, [r7, #4]
 80020b6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80020ba:	f000 fcce 	bl	8002a5a <HAL_NVIC_SetPriority>

  /* Return function status */
  return HAL_OK;
 80020be:	2300      	movs	r3, #0
}
 80020c0:	4618      	mov	r0, r3
 80020c2:	3708      	adds	r7, #8
 80020c4:	46bd      	mov	sp, r7
 80020c6:	bd80      	pop	{r7, pc}
 80020c8:	2000000c 	.word	0x2000000c
 80020cc:	10624dd3 	.word	0x10624dd3

080020d0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80020d0:	b480      	push	{r7}
 80020d2:	af00      	add	r7, sp, #0
  uwTick++;
 80020d4:	4b04      	ldr	r3, [pc, #16]	; (80020e8 <HAL_IncTick+0x18>)
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	3301      	adds	r3, #1
 80020da:	4a03      	ldr	r2, [pc, #12]	; (80020e8 <HAL_IncTick+0x18>)
 80020dc:	6013      	str	r3, [r2, #0]
}
 80020de:	bf00      	nop
 80020e0:	46bd      	mov	sp, r7
 80020e2:	bc80      	pop	{r7}
 80020e4:	4770      	bx	lr
 80020e6:	bf00      	nop
 80020e8:	2000094c 	.word	0x2000094c

080020ec <HAL_GetTick>:
  * @note  This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80020ec:	b480      	push	{r7}
 80020ee:	af00      	add	r7, sp, #0
  return uwTick;
 80020f0:	4b02      	ldr	r3, [pc, #8]	; (80020fc <HAL_GetTick+0x10>)
 80020f2:	681b      	ldr	r3, [r3, #0]
}
 80020f4:	4618      	mov	r0, r3
 80020f6:	46bd      	mov	sp, r7
 80020f8:	bc80      	pop	{r7}
 80020fa:	4770      	bx	lr
 80020fc:	2000094c 	.word	0x2000094c

08002100 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay: specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(__IO uint32_t Delay)
{
 8002100:	b580      	push	{r7, lr}
 8002102:	b084      	sub	sp, #16
 8002104:	af00      	add	r7, sp, #0
 8002106:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002108:	f7ff fff0 	bl	80020ec <HAL_GetTick>
 800210c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	60fb      	str	r3, [r7, #12]
  
  /* Add a period to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002118:	d002      	beq.n	8002120 <HAL_Delay+0x20>
  {
     wait++;
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	3301      	adds	r3, #1
 800211e:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8002120:	bf00      	nop
 8002122:	f7ff ffe3 	bl	80020ec <HAL_GetTick>
 8002126:	4602      	mov	r2, r0
 8002128:	68bb      	ldr	r3, [r7, #8]
 800212a:	1ad3      	subs	r3, r2, r3
 800212c:	68fa      	ldr	r2, [r7, #12]
 800212e:	429a      	cmp	r2, r3
 8002130:	d8f7      	bhi.n	8002122 <HAL_Delay+0x22>
  {
  }
}
 8002132:	bf00      	nop
 8002134:	3710      	adds	r7, #16
 8002136:	46bd      	mov	sp, r7
 8002138:	bd80      	pop	{r7, pc}
	...

0800213c <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800213c:	b580      	push	{r7, lr}
 800213e:	b086      	sub	sp, #24
 8002140:	af00      	add	r7, sp, #0
 8002142:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002144:	2300      	movs	r3, #0
 8002146:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8002148:	2300      	movs	r3, #0
 800214a:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 800214c:	2300      	movs	r3, #0
 800214e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8002150:	2300      	movs	r3, #0
 8002152:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	2b00      	cmp	r3, #0
 8002158:	d101      	bne.n	800215e <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 800215a:	2301      	movs	r3, #1
 800215c:	e0be      	b.n	80022dc <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	689b      	ldr	r3, [r3, #8]
 8002162:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002168:	2b00      	cmp	r3, #0
 800216a:	d109      	bne.n	8002180 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	2200      	movs	r2, #0
 8002170:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	2200      	movs	r2, #0
 8002176:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800217a:	6878      	ldr	r0, [r7, #4]
 800217c:	f7fe fd44 	bl	8000c08 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8002180:	6878      	ldr	r0, [r7, #4]
 8002182:	f000 faf7 	bl	8002774 <ADC_ConversionStop_Disable>
 8002186:	4603      	mov	r3, r0
 8002188:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800218e:	f003 0310 	and.w	r3, r3, #16
 8002192:	2b00      	cmp	r3, #0
 8002194:	f040 8099 	bne.w	80022ca <HAL_ADC_Init+0x18e>
 8002198:	7dfb      	ldrb	r3, [r7, #23]
 800219a:	2b00      	cmp	r3, #0
 800219c:	f040 8095 	bne.w	80022ca <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021a4:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80021a8:	f023 0302 	bic.w	r3, r3, #2
 80021ac:	f043 0202 	orr.w	r2, r3, #2
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                               |
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv) |
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                               |
 80021bc:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS(hadc->Init.ContinuousConvMode)   );
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	68db      	ldr	r3, [r3, #12]
 80021c2:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv) |
 80021c4:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                               |
 80021c6:	68ba      	ldr	r2, [r7, #8]
 80021c8:	4313      	orrs	r3, r2
 80021ca:	60bb      	str	r3, [r7, #8]
    
    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	689b      	ldr	r3, [r3, #8]
 80021d0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80021d4:	d003      	beq.n	80021de <HAL_ADC_Init+0xa2>
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	689b      	ldr	r3, [r3, #8]
 80021da:	2b01      	cmp	r3, #1
 80021dc:	d102      	bne.n	80021e4 <HAL_ADC_Init+0xa8>
 80021de:	f44f 7380 	mov.w	r3, #256	; 0x100
 80021e2:	e000      	b.n	80021e6 <HAL_ADC_Init+0xaa>
 80021e4:	2300      	movs	r3, #0
 80021e6:	693a      	ldr	r2, [r7, #16]
 80021e8:	4313      	orrs	r3, r2
 80021ea:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	695b      	ldr	r3, [r3, #20]
 80021f0:	2b01      	cmp	r3, #1
 80021f2:	d119      	bne.n	8002228 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	68db      	ldr	r3, [r3, #12]
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d109      	bne.n	8002210 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	699b      	ldr	r3, [r3, #24]
 8002200:	3b01      	subs	r3, #1
 8002202:	035a      	lsls	r2, r3, #13
 8002204:	693b      	ldr	r3, [r7, #16]
 8002206:	4313      	orrs	r3, r2
 8002208:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800220c:	613b      	str	r3, [r7, #16]
 800220e:	e00b      	b.n	8002228 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002214:	f043 0220 	orr.w	r2, r3, #32
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002220:	f043 0201 	orr.w	r2, r3, #1
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	685b      	ldr	r3, [r3, #4]
 800222e:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	693a      	ldr	r2, [r7, #16]
 8002238:	430a      	orrs	r2, r1
 800223a:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	689a      	ldr	r2, [r3, #8]
 8002242:	4b28      	ldr	r3, [pc, #160]	; (80022e4 <HAL_ADC_Init+0x1a8>)
 8002244:	4013      	ands	r3, r2
 8002246:	687a      	ldr	r2, [r7, #4]
 8002248:	6812      	ldr	r2, [r2, #0]
 800224a:	68b9      	ldr	r1, [r7, #8]
 800224c:	430b      	orrs	r3, r1
 800224e:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	689b      	ldr	r3, [r3, #8]
 8002254:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002258:	d003      	beq.n	8002262 <HAL_ADC_Init+0x126>
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	689b      	ldr	r3, [r3, #8]
 800225e:	2b01      	cmp	r3, #1
 8002260:	d104      	bne.n	800226c <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	691b      	ldr	r3, [r3, #16]
 8002266:	3b01      	subs	r3, #1
 8002268:	051b      	lsls	r3, r3, #20
 800226a:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002272:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	68fa      	ldr	r2, [r7, #12]
 800227c:	430a      	orrs	r2, r1
 800227e:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	689a      	ldr	r2, [r3, #8]
 8002286:	4b18      	ldr	r3, [pc, #96]	; (80022e8 <HAL_ADC_Init+0x1ac>)
 8002288:	4013      	ands	r3, r2
 800228a:	68ba      	ldr	r2, [r7, #8]
 800228c:	429a      	cmp	r2, r3
 800228e:	d10b      	bne.n	80022a8 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	2200      	movs	r2, #0
 8002294:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800229a:	f023 0303 	bic.w	r3, r3, #3
 800229e:	f043 0201 	orr.w	r2, r3, #1
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80022a6:	e018      	b.n	80022da <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022ac:	f023 0312 	bic.w	r3, r3, #18
 80022b0:	f043 0210 	orr.w	r2, r3, #16
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022bc:	f043 0201 	orr.w	r2, r3, #1
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 80022c4:	2301      	movs	r3, #1
 80022c6:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80022c8:	e007      	b.n	80022da <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022ce:	f043 0210 	orr.w	r2, r3, #16
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 80022d6:	2301      	movs	r3, #1
 80022d8:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80022da:	7dfb      	ldrb	r3, [r7, #23]
}
 80022dc:	4618      	mov	r0, r3
 80022de:	3718      	adds	r7, #24
 80022e0:	46bd      	mov	sp, r7
 80022e2:	bd80      	pop	{r7, pc}
 80022e4:	ffe1f7fd 	.word	0xffe1f7fd
 80022e8:	ff1f0efe 	.word	0xff1f0efe

080022ec <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80022ec:	b580      	push	{r7, lr}
 80022ee:	b086      	sub	sp, #24
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	60f8      	str	r0, [r7, #12]
 80022f4:	60b9      	str	r1, [r7, #8]
 80022f6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80022f8:	2300      	movs	r3, #0
 80022fa:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	4a64      	ldr	r2, [pc, #400]	; (8002494 <HAL_ADC_Start_DMA+0x1a8>)
 8002302:	4293      	cmp	r3, r2
 8002304:	d004      	beq.n	8002310 <HAL_ADC_Start_DMA+0x24>
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	4a63      	ldr	r2, [pc, #396]	; (8002498 <HAL_ADC_Start_DMA+0x1ac>)
 800230c:	4293      	cmp	r3, r2
 800230e:	d106      	bne.n	800231e <HAL_ADC_Start_DMA+0x32>
 8002310:	4b60      	ldr	r3, [pc, #384]	; (8002494 <HAL_ADC_Start_DMA+0x1a8>)
 8002312:	685b      	ldr	r3, [r3, #4]
 8002314:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8002318:	2b00      	cmp	r3, #0
 800231a:	f040 80b3 	bne.w	8002484 <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002324:	2b01      	cmp	r3, #1
 8002326:	d101      	bne.n	800232c <HAL_ADC_Start_DMA+0x40>
 8002328:	2302      	movs	r3, #2
 800232a:	e0ae      	b.n	800248a <HAL_ADC_Start_DMA+0x19e>
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	2201      	movs	r2, #1
 8002330:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8002334:	68f8      	ldr	r0, [r7, #12]
 8002336:	f000 f9cb 	bl	80026d0 <ADC_Enable>
 800233a:	4603      	mov	r3, r0
 800233c:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800233e:	7dfb      	ldrb	r3, [r7, #23]
 8002340:	2b00      	cmp	r3, #0
 8002342:	f040 809a 	bne.w	800247a <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800234a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800234e:	f023 0301 	bic.w	r3, r3, #1
 8002352:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	4a4e      	ldr	r2, [pc, #312]	; (8002498 <HAL_ADC_Start_DMA+0x1ac>)
 8002360:	4293      	cmp	r3, r2
 8002362:	d105      	bne.n	8002370 <HAL_ADC_Start_DMA+0x84>
 8002364:	4b4b      	ldr	r3, [pc, #300]	; (8002494 <HAL_ADC_Start_DMA+0x1a8>)
 8002366:	685b      	ldr	r3, [r3, #4]
 8002368:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 800236c:	2b00      	cmp	r3, #0
 800236e:	d115      	bne.n	800239c <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002374:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	685b      	ldr	r3, [r3, #4]
 8002382:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002386:	2b00      	cmp	r3, #0
 8002388:	d026      	beq.n	80023d8 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800238e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002392:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800239a:	e01d      	b.n	80023d8 <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023a0:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	4a39      	ldr	r2, [pc, #228]	; (8002494 <HAL_ADC_Start_DMA+0x1a8>)
 80023ae:	4293      	cmp	r3, r2
 80023b0:	d004      	beq.n	80023bc <HAL_ADC_Start_DMA+0xd0>
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	4a38      	ldr	r2, [pc, #224]	; (8002498 <HAL_ADC_Start_DMA+0x1ac>)
 80023b8:	4293      	cmp	r3, r2
 80023ba:	d10d      	bne.n	80023d8 <HAL_ADC_Start_DMA+0xec>
 80023bc:	4b35      	ldr	r3, [pc, #212]	; (8002494 <HAL_ADC_Start_DMA+0x1a8>)
 80023be:	685b      	ldr	r3, [r3, #4]
 80023c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d007      	beq.n	80023d8 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023cc:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80023d0:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023dc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d006      	beq.n	80023f2 <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023e8:	f023 0206 	bic.w	r2, r3, #6
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	62da      	str	r2, [r3, #44]	; 0x2c
 80023f0:	e002      	b.n	80023f8 <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	2200      	movs	r2, #0
 80023f6:	62da      	str	r2, [r3, #44]	; 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	2200      	movs	r2, #0
 80023fc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	6a1b      	ldr	r3, [r3, #32]
 8002404:	4a25      	ldr	r2, [pc, #148]	; (800249c <HAL_ADC_Start_DMA+0x1b0>)
 8002406:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	6a1b      	ldr	r3, [r3, #32]
 800240c:	4a24      	ldr	r2, [pc, #144]	; (80024a0 <HAL_ADC_Start_DMA+0x1b4>)
 800240e:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	6a1b      	ldr	r3, [r3, #32]
 8002414:	4a23      	ldr	r2, [pc, #140]	; (80024a4 <HAL_ADC_Start_DMA+0x1b8>)
 8002416:	631a      	str	r2, [r3, #48]	; 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	f06f 0202 	mvn.w	r2, #2
 8002420:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	689a      	ldr	r2, [r3, #8]
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002430:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	6a18      	ldr	r0, [r3, #32]
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	334c      	adds	r3, #76	; 0x4c
 800243c:	4619      	mov	r1, r3
 800243e:	68ba      	ldr	r2, [r7, #8]
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	f000 fbcf 	bl	8002be4 <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	689b      	ldr	r3, [r3, #8]
 800244c:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8002450:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8002454:	d108      	bne.n	8002468 <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	689a      	ldr	r2, [r3, #8]
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8002464:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8002466:	e00f      	b.n	8002488 <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	689a      	ldr	r2, [r3, #8]
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8002476:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8002478:	e006      	b.n	8002488 <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	2200      	movs	r2, #0
 800247e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    if (tmp_hal_status == HAL_OK)
 8002482:	e001      	b.n	8002488 <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002484:	2301      	movs	r3, #1
 8002486:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002488:	7dfb      	ldrb	r3, [r7, #23]
}
 800248a:	4618      	mov	r0, r3
 800248c:	3718      	adds	r7, #24
 800248e:	46bd      	mov	sp, r7
 8002490:	bd80      	pop	{r7, pc}
 8002492:	bf00      	nop
 8002494:	40012400 	.word	0x40012400
 8002498:	40012800 	.word	0x40012800
 800249c:	080027e9 	.word	0x080027e9
 80024a0:	08002865 	.word	0x08002865
 80024a4:	08002881 	.word	0x08002881

080024a8 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80024a8:	b480      	push	{r7}
 80024aa:	b083      	sub	sp, #12
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 80024b0:	bf00      	nop
 80024b2:	370c      	adds	r7, #12
 80024b4:	46bd      	mov	sp, r7
 80024b6:	bc80      	pop	{r7}
 80024b8:	4770      	bx	lr

080024ba <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80024ba:	b480      	push	{r7}
 80024bc:	b083      	sub	sp, #12
 80024be:	af00      	add	r7, sp, #0
 80024c0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80024c2:	bf00      	nop
 80024c4:	370c      	adds	r7, #12
 80024c6:	46bd      	mov	sp, r7
 80024c8:	bc80      	pop	{r7}
 80024ca:	4770      	bx	lr

080024cc <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80024cc:	b480      	push	{r7}
 80024ce:	b083      	sub	sp, #12
 80024d0:	af00      	add	r7, sp, #0
 80024d2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80024d4:	bf00      	nop
 80024d6:	370c      	adds	r7, #12
 80024d8:	46bd      	mov	sp, r7
 80024da:	bc80      	pop	{r7}
 80024dc:	4770      	bx	lr
	...

080024e0 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 80024e0:	b480      	push	{r7}
 80024e2:	b085      	sub	sp, #20
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	6078      	str	r0, [r7, #4]
 80024e8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80024ea:	2300      	movs	r3, #0
 80024ec:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 80024ee:	2300      	movs	r3, #0
 80024f0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80024f8:	2b01      	cmp	r3, #1
 80024fa:	d101      	bne.n	8002500 <HAL_ADC_ConfigChannel+0x20>
 80024fc:	2302      	movs	r3, #2
 80024fe:	e0dc      	b.n	80026ba <HAL_ADC_ConfigChannel+0x1da>
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	2201      	movs	r2, #1
 8002504:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002508:	683b      	ldr	r3, [r7, #0]
 800250a:	685b      	ldr	r3, [r3, #4]
 800250c:	2b06      	cmp	r3, #6
 800250e:	d81c      	bhi.n	800254a <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002516:	683b      	ldr	r3, [r7, #0]
 8002518:	685a      	ldr	r2, [r3, #4]
 800251a:	4613      	mov	r3, r2
 800251c:	009b      	lsls	r3, r3, #2
 800251e:	4413      	add	r3, r2
 8002520:	3b05      	subs	r3, #5
 8002522:	221f      	movs	r2, #31
 8002524:	fa02 f303 	lsl.w	r3, r2, r3
 8002528:	43db      	mvns	r3, r3
 800252a:	4019      	ands	r1, r3
 800252c:	683b      	ldr	r3, [r7, #0]
 800252e:	6818      	ldr	r0, [r3, #0]
 8002530:	683b      	ldr	r3, [r7, #0]
 8002532:	685a      	ldr	r2, [r3, #4]
 8002534:	4613      	mov	r3, r2
 8002536:	009b      	lsls	r3, r3, #2
 8002538:	4413      	add	r3, r2
 800253a:	3b05      	subs	r3, #5
 800253c:	fa00 f203 	lsl.w	r2, r0, r3
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	430a      	orrs	r2, r1
 8002546:	635a      	str	r2, [r3, #52]	; 0x34
 8002548:	e03c      	b.n	80025c4 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800254a:	683b      	ldr	r3, [r7, #0]
 800254c:	685b      	ldr	r3, [r3, #4]
 800254e:	2b0c      	cmp	r3, #12
 8002550:	d81c      	bhi.n	800258c <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002558:	683b      	ldr	r3, [r7, #0]
 800255a:	685a      	ldr	r2, [r3, #4]
 800255c:	4613      	mov	r3, r2
 800255e:	009b      	lsls	r3, r3, #2
 8002560:	4413      	add	r3, r2
 8002562:	3b23      	subs	r3, #35	; 0x23
 8002564:	221f      	movs	r2, #31
 8002566:	fa02 f303 	lsl.w	r3, r2, r3
 800256a:	43db      	mvns	r3, r3
 800256c:	4019      	ands	r1, r3
 800256e:	683b      	ldr	r3, [r7, #0]
 8002570:	6818      	ldr	r0, [r3, #0]
 8002572:	683b      	ldr	r3, [r7, #0]
 8002574:	685a      	ldr	r2, [r3, #4]
 8002576:	4613      	mov	r3, r2
 8002578:	009b      	lsls	r3, r3, #2
 800257a:	4413      	add	r3, r2
 800257c:	3b23      	subs	r3, #35	; 0x23
 800257e:	fa00 f203 	lsl.w	r2, r0, r3
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	430a      	orrs	r2, r1
 8002588:	631a      	str	r2, [r3, #48]	; 0x30
 800258a:	e01b      	b.n	80025c4 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002592:	683b      	ldr	r3, [r7, #0]
 8002594:	685a      	ldr	r2, [r3, #4]
 8002596:	4613      	mov	r3, r2
 8002598:	009b      	lsls	r3, r3, #2
 800259a:	4413      	add	r3, r2
 800259c:	3b41      	subs	r3, #65	; 0x41
 800259e:	221f      	movs	r2, #31
 80025a0:	fa02 f303 	lsl.w	r3, r2, r3
 80025a4:	43db      	mvns	r3, r3
 80025a6:	4019      	ands	r1, r3
 80025a8:	683b      	ldr	r3, [r7, #0]
 80025aa:	6818      	ldr	r0, [r3, #0]
 80025ac:	683b      	ldr	r3, [r7, #0]
 80025ae:	685a      	ldr	r2, [r3, #4]
 80025b0:	4613      	mov	r3, r2
 80025b2:	009b      	lsls	r3, r3, #2
 80025b4:	4413      	add	r3, r2
 80025b6:	3b41      	subs	r3, #65	; 0x41
 80025b8:	fa00 f203 	lsl.w	r2, r0, r3
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	430a      	orrs	r2, r1
 80025c2:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 80025c4:	683b      	ldr	r3, [r7, #0]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	2b09      	cmp	r3, #9
 80025ca:	d91c      	bls.n	8002606 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	68d9      	ldr	r1, [r3, #12]
 80025d2:	683b      	ldr	r3, [r7, #0]
 80025d4:	681a      	ldr	r2, [r3, #0]
 80025d6:	4613      	mov	r3, r2
 80025d8:	005b      	lsls	r3, r3, #1
 80025da:	4413      	add	r3, r2
 80025dc:	3b1e      	subs	r3, #30
 80025de:	2207      	movs	r2, #7
 80025e0:	fa02 f303 	lsl.w	r3, r2, r3
 80025e4:	43db      	mvns	r3, r3
 80025e6:	4019      	ands	r1, r3
 80025e8:	683b      	ldr	r3, [r7, #0]
 80025ea:	6898      	ldr	r0, [r3, #8]
 80025ec:	683b      	ldr	r3, [r7, #0]
 80025ee:	681a      	ldr	r2, [r3, #0]
 80025f0:	4613      	mov	r3, r2
 80025f2:	005b      	lsls	r3, r3, #1
 80025f4:	4413      	add	r3, r2
 80025f6:	3b1e      	subs	r3, #30
 80025f8:	fa00 f203 	lsl.w	r2, r0, r3
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	430a      	orrs	r2, r1
 8002602:	60da      	str	r2, [r3, #12]
 8002604:	e019      	b.n	800263a <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	6919      	ldr	r1, [r3, #16]
 800260c:	683b      	ldr	r3, [r7, #0]
 800260e:	681a      	ldr	r2, [r3, #0]
 8002610:	4613      	mov	r3, r2
 8002612:	005b      	lsls	r3, r3, #1
 8002614:	4413      	add	r3, r2
 8002616:	2207      	movs	r2, #7
 8002618:	fa02 f303 	lsl.w	r3, r2, r3
 800261c:	43db      	mvns	r3, r3
 800261e:	4019      	ands	r1, r3
 8002620:	683b      	ldr	r3, [r7, #0]
 8002622:	6898      	ldr	r0, [r3, #8]
 8002624:	683b      	ldr	r3, [r7, #0]
 8002626:	681a      	ldr	r2, [r3, #0]
 8002628:	4613      	mov	r3, r2
 800262a:	005b      	lsls	r3, r3, #1
 800262c:	4413      	add	r3, r2
 800262e:	fa00 f203 	lsl.w	r2, r0, r3
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	430a      	orrs	r2, r1
 8002638:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800263a:	683b      	ldr	r3, [r7, #0]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	2b10      	cmp	r3, #16
 8002640:	d003      	beq.n	800264a <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8002642:	683b      	ldr	r3, [r7, #0]
 8002644:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002646:	2b11      	cmp	r3, #17
 8002648:	d132      	bne.n	80026b0 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	4a1d      	ldr	r2, [pc, #116]	; (80026c4 <HAL_ADC_ConfigChannel+0x1e4>)
 8002650:	4293      	cmp	r3, r2
 8002652:	d125      	bne.n	80026a0 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	689b      	ldr	r3, [r3, #8]
 800265a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800265e:	2b00      	cmp	r3, #0
 8002660:	d126      	bne.n	80026b0 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	689a      	ldr	r2, [r3, #8]
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8002670:	609a      	str	r2, [r3, #8]
        
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8002672:	683b      	ldr	r3, [r7, #0]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	2b10      	cmp	r3, #16
 8002678:	d11a      	bne.n	80026b0 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800267a:	4b13      	ldr	r3, [pc, #76]	; (80026c8 <HAL_ADC_ConfigChannel+0x1e8>)
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	4a13      	ldr	r2, [pc, #76]	; (80026cc <HAL_ADC_ConfigChannel+0x1ec>)
 8002680:	fba2 2303 	umull	r2, r3, r2, r3
 8002684:	0c9a      	lsrs	r2, r3, #18
 8002686:	4613      	mov	r3, r2
 8002688:	009b      	lsls	r3, r3, #2
 800268a:	4413      	add	r3, r2
 800268c:	005b      	lsls	r3, r3, #1
 800268e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002690:	e002      	b.n	8002698 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8002692:	68bb      	ldr	r3, [r7, #8]
 8002694:	3b01      	subs	r3, #1
 8002696:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002698:	68bb      	ldr	r3, [r7, #8]
 800269a:	2b00      	cmp	r3, #0
 800269c:	d1f9      	bne.n	8002692 <HAL_ADC_ConfigChannel+0x1b2>
 800269e:	e007      	b.n	80026b0 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026a4:	f043 0220 	orr.w	r2, r3, #32
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 80026ac:	2301      	movs	r3, #1
 80026ae:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	2200      	movs	r2, #0
 80026b4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80026b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80026ba:	4618      	mov	r0, r3
 80026bc:	3714      	adds	r7, #20
 80026be:	46bd      	mov	sp, r7
 80026c0:	bc80      	pop	{r7}
 80026c2:	4770      	bx	lr
 80026c4:	40012400 	.word	0x40012400
 80026c8:	2000000c 	.word	0x2000000c
 80026cc:	431bde83 	.word	0x431bde83

080026d0 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80026d0:	b580      	push	{r7, lr}
 80026d2:	b084      	sub	sp, #16
 80026d4:	af00      	add	r7, sp, #0
 80026d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80026d8:	2300      	movs	r3, #0
 80026da:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 80026dc:	2300      	movs	r3, #0
 80026de:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	689b      	ldr	r3, [r3, #8]
 80026e6:	f003 0301 	and.w	r3, r3, #1
 80026ea:	2b01      	cmp	r3, #1
 80026ec:	d039      	beq.n	8002762 <ADC_Enable+0x92>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	689a      	ldr	r2, [r3, #8]
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	f042 0201 	orr.w	r2, r2, #1
 80026fc:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80026fe:	4b1b      	ldr	r3, [pc, #108]	; (800276c <ADC_Enable+0x9c>)
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	4a1b      	ldr	r2, [pc, #108]	; (8002770 <ADC_Enable+0xa0>)
 8002704:	fba2 2303 	umull	r2, r3, r2, r3
 8002708:	0c9b      	lsrs	r3, r3, #18
 800270a:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 800270c:	e002      	b.n	8002714 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 800270e:	68bb      	ldr	r3, [r7, #8]
 8002710:	3b01      	subs	r3, #1
 8002712:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002714:	68bb      	ldr	r3, [r7, #8]
 8002716:	2b00      	cmp	r3, #0
 8002718:	d1f9      	bne.n	800270e <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 800271a:	f7ff fce7 	bl	80020ec <HAL_GetTick>
 800271e:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002720:	e018      	b.n	8002754 <ADC_Enable+0x84>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002722:	f7ff fce3 	bl	80020ec <HAL_GetTick>
 8002726:	4602      	mov	r2, r0
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	1ad3      	subs	r3, r2, r3
 800272c:	2b02      	cmp	r3, #2
 800272e:	d911      	bls.n	8002754 <ADC_Enable+0x84>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002734:	f043 0210 	orr.w	r2, r3, #16
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	629a      	str	r2, [r3, #40]	; 0x28
      
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002740:	f043 0201 	orr.w	r2, r3, #1
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	62da      	str	r2, [r3, #44]	; 0x2c
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	2200      	movs	r2, #0
 800274c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
        return HAL_ERROR;
 8002750:	2301      	movs	r3, #1
 8002752:	e007      	b.n	8002764 <ADC_Enable+0x94>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	689b      	ldr	r3, [r3, #8]
 800275a:	f003 0301 	and.w	r3, r3, #1
 800275e:	2b01      	cmp	r3, #1
 8002760:	d1df      	bne.n	8002722 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8002762:	2300      	movs	r3, #0
}
 8002764:	4618      	mov	r0, r3
 8002766:	3710      	adds	r7, #16
 8002768:	46bd      	mov	sp, r7
 800276a:	bd80      	pop	{r7, pc}
 800276c:	2000000c 	.word	0x2000000c
 8002770:	431bde83 	.word	0x431bde83

08002774 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8002774:	b580      	push	{r7, lr}
 8002776:	b084      	sub	sp, #16
 8002778:	af00      	add	r7, sp, #0
 800277a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800277c:	2300      	movs	r3, #0
 800277e:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	689b      	ldr	r3, [r3, #8]
 8002786:	f003 0301 	and.w	r3, r3, #1
 800278a:	2b01      	cmp	r3, #1
 800278c:	d127      	bne.n	80027de <ADC_ConversionStop_Disable+0x6a>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	689a      	ldr	r2, [r3, #8]
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	f022 0201 	bic.w	r2, r2, #1
 800279c:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 800279e:	f7ff fca5 	bl	80020ec <HAL_GetTick>
 80027a2:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 80027a4:	e014      	b.n	80027d0 <ADC_ConversionStop_Disable+0x5c>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80027a6:	f7ff fca1 	bl	80020ec <HAL_GetTick>
 80027aa:	4602      	mov	r2, r0
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	1ad3      	subs	r3, r2, r3
 80027b0:	2b02      	cmp	r3, #2
 80027b2:	d90d      	bls.n	80027d0 <ADC_ConversionStop_Disable+0x5c>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027b8:	f043 0210 	orr.w	r2, r3, #16
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027c4:	f043 0201 	orr.w	r2, r3, #1
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	62da      	str	r2, [r3, #44]	; 0x2c
        
        return HAL_ERROR;
 80027cc:	2301      	movs	r3, #1
 80027ce:	e007      	b.n	80027e0 <ADC_ConversionStop_Disable+0x6c>
    while(ADC_IS_ENABLE(hadc) != RESET)
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	689b      	ldr	r3, [r3, #8]
 80027d6:	f003 0301 	and.w	r3, r3, #1
 80027da:	2b01      	cmp	r3, #1
 80027dc:	d0e3      	beq.n	80027a6 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80027de:	2300      	movs	r3, #0
}
 80027e0:	4618      	mov	r0, r3
 80027e2:	3710      	adds	r7, #16
 80027e4:	46bd      	mov	sp, r7
 80027e6:	bd80      	pop	{r7, pc}

080027e8 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80027e8:	b580      	push	{r7, lr}
 80027ea:	b084      	sub	sp, #16
 80027ec:	af00      	add	r7, sp, #0
 80027ee:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027f4:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027fa:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d127      	bne.n	8002852 <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002806:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	629a      	str	r2, [r3, #40]	; 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	689b      	ldr	r3, [r3, #8]
 8002814:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8002818:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 800281c:	d115      	bne.n	800284a <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	68db      	ldr	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002822:	2b00      	cmp	r3, #0
 8002824:	d111      	bne.n	800284a <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800282a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	629a      	str	r2, [r3, #40]	; 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002836:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800283a:	2b00      	cmp	r3, #0
 800283c:	d105      	bne.n	800284a <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002842:	f043 0201 	orr.w	r2, r3, #1
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* Conversion complete callback */
    HAL_ADC_ConvCpltCallback(hadc); 
 800284a:	68f8      	ldr	r0, [r7, #12]
 800284c:	f7ff fe2c 	bl	80024a8 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8002850:	e004      	b.n	800285c <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	6a1b      	ldr	r3, [r3, #32]
 8002856:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002858:	6878      	ldr	r0, [r7, #4]
 800285a:	4798      	blx	r3
}
 800285c:	bf00      	nop
 800285e:	3710      	adds	r7, #16
 8002860:	46bd      	mov	sp, r7
 8002862:	bd80      	pop	{r7, pc}

08002864 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002864:	b580      	push	{r7, lr}
 8002866:	b084      	sub	sp, #16
 8002868:	af00      	add	r7, sp, #0
 800286a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002870:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
  HAL_ADC_ConvHalfCpltCallback(hadc); 
 8002872:	68f8      	ldr	r0, [r7, #12]
 8002874:	f7ff fe21 	bl	80024ba <HAL_ADC_ConvHalfCpltCallback>
}
 8002878:	bf00      	nop
 800287a:	3710      	adds	r7, #16
 800287c:	46bd      	mov	sp, r7
 800287e:	bd80      	pop	{r7, pc}

08002880 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8002880:	b580      	push	{r7, lr}
 8002882:	b084      	sub	sp, #16
 8002884:	af00      	add	r7, sp, #0
 8002886:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800288c:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002892:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800289e:	f043 0204 	orr.w	r2, r3, #4
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Error callback */
  HAL_ADC_ErrorCallback(hadc); 
 80028a6:	68f8      	ldr	r0, [r7, #12]
 80028a8:	f7ff fe10 	bl	80024cc <HAL_ADC_ErrorCallback>
}
 80028ac:	bf00      	nop
 80028ae:	3710      	adds	r7, #16
 80028b0:	46bd      	mov	sp, r7
 80028b2:	bd80      	pop	{r7, pc}

080028b4 <NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80028b4:	b480      	push	{r7}
 80028b6:	b085      	sub	sp, #20
 80028b8:	af00      	add	r7, sp, #0
 80028ba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	f003 0307 	and.w	r3, r3, #7
 80028c2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80028c4:	4b0c      	ldr	r3, [pc, #48]	; (80028f8 <NVIC_SetPriorityGrouping+0x44>)
 80028c6:	68db      	ldr	r3, [r3, #12]
 80028c8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80028ca:	68ba      	ldr	r2, [r7, #8]
 80028cc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80028d0:	4013      	ands	r3, r2
 80028d2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80028d8:	68bb      	ldr	r3, [r7, #8]
 80028da:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80028dc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80028e0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80028e4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80028e6:	4a04      	ldr	r2, [pc, #16]	; (80028f8 <NVIC_SetPriorityGrouping+0x44>)
 80028e8:	68bb      	ldr	r3, [r7, #8]
 80028ea:	60d3      	str	r3, [r2, #12]
}
 80028ec:	bf00      	nop
 80028ee:	3714      	adds	r7, #20
 80028f0:	46bd      	mov	sp, r7
 80028f2:	bc80      	pop	{r7}
 80028f4:	4770      	bx	lr
 80028f6:	bf00      	nop
 80028f8:	e000ed00 	.word	0xe000ed00

080028fc <NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
 80028fc:	b480      	push	{r7}
 80028fe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002900:	4b04      	ldr	r3, [pc, #16]	; (8002914 <NVIC_GetPriorityGrouping+0x18>)
 8002902:	68db      	ldr	r3, [r3, #12]
 8002904:	0a1b      	lsrs	r3, r3, #8
 8002906:	f003 0307 	and.w	r3, r3, #7
}
 800290a:	4618      	mov	r0, r3
 800290c:	46bd      	mov	sp, r7
 800290e:	bc80      	pop	{r7}
 8002910:	4770      	bx	lr
 8002912:	bf00      	nop
 8002914:	e000ed00 	.word	0xe000ed00

08002918 <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002918:	b480      	push	{r7}
 800291a:	b083      	sub	sp, #12
 800291c:	af00      	add	r7, sp, #0
 800291e:	4603      	mov	r3, r0
 8002920:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8002922:	79fb      	ldrb	r3, [r7, #7]
 8002924:	f003 021f 	and.w	r2, r3, #31
 8002928:	4906      	ldr	r1, [pc, #24]	; (8002944 <NVIC_EnableIRQ+0x2c>)
 800292a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800292e:	095b      	lsrs	r3, r3, #5
 8002930:	2001      	movs	r0, #1
 8002932:	fa00 f202 	lsl.w	r2, r0, r2
 8002936:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800293a:	bf00      	nop
 800293c:	370c      	adds	r7, #12
 800293e:	46bd      	mov	sp, r7
 8002940:	bc80      	pop	{r7}
 8002942:	4770      	bx	lr
 8002944:	e000e100 	.word	0xe000e100

08002948 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002948:	b480      	push	{r7}
 800294a:	b083      	sub	sp, #12
 800294c:	af00      	add	r7, sp, #0
 800294e:	4603      	mov	r3, r0
 8002950:	6039      	str	r1, [r7, #0]
 8002952:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 8002954:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002958:	2b00      	cmp	r3, #0
 800295a:	da0b      	bge.n	8002974 <NVIC_SetPriority+0x2c>
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800295c:	683b      	ldr	r3, [r7, #0]
 800295e:	b2da      	uxtb	r2, r3
 8002960:	490c      	ldr	r1, [pc, #48]	; (8002994 <NVIC_SetPriority+0x4c>)
 8002962:	79fb      	ldrb	r3, [r7, #7]
 8002964:	f003 030f 	and.w	r3, r3, #15
 8002968:	3b04      	subs	r3, #4
 800296a:	0112      	lsls	r2, r2, #4
 800296c:	b2d2      	uxtb	r2, r2
 800296e:	440b      	add	r3, r1
 8002970:	761a      	strb	r2, [r3, #24]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002972:	e009      	b.n	8002988 <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002974:	683b      	ldr	r3, [r7, #0]
 8002976:	b2da      	uxtb	r2, r3
 8002978:	4907      	ldr	r1, [pc, #28]	; (8002998 <NVIC_SetPriority+0x50>)
 800297a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800297e:	0112      	lsls	r2, r2, #4
 8002980:	b2d2      	uxtb	r2, r2
 8002982:	440b      	add	r3, r1
 8002984:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8002988:	bf00      	nop
 800298a:	370c      	adds	r7, #12
 800298c:	46bd      	mov	sp, r7
 800298e:	bc80      	pop	{r7}
 8002990:	4770      	bx	lr
 8002992:	bf00      	nop
 8002994:	e000ed00 	.word	0xe000ed00
 8002998:	e000e100 	.word	0xe000e100

0800299c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800299c:	b480      	push	{r7}
 800299e:	b089      	sub	sp, #36	; 0x24
 80029a0:	af00      	add	r7, sp, #0
 80029a2:	60f8      	str	r0, [r7, #12]
 80029a4:	60b9      	str	r1, [r7, #8]
 80029a6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	f003 0307 	and.w	r3, r3, #7
 80029ae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80029b0:	69fb      	ldr	r3, [r7, #28]
 80029b2:	f1c3 0307 	rsb	r3, r3, #7
 80029b6:	2b04      	cmp	r3, #4
 80029b8:	bf28      	it	cs
 80029ba:	2304      	movcs	r3, #4
 80029bc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80029be:	69fb      	ldr	r3, [r7, #28]
 80029c0:	3304      	adds	r3, #4
 80029c2:	2b06      	cmp	r3, #6
 80029c4:	d902      	bls.n	80029cc <NVIC_EncodePriority+0x30>
 80029c6:	69fb      	ldr	r3, [r7, #28]
 80029c8:	3b03      	subs	r3, #3
 80029ca:	e000      	b.n	80029ce <NVIC_EncodePriority+0x32>
 80029cc:	2300      	movs	r3, #0
 80029ce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80029d0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80029d4:	69bb      	ldr	r3, [r7, #24]
 80029d6:	fa02 f303 	lsl.w	r3, r2, r3
 80029da:	43da      	mvns	r2, r3
 80029dc:	68bb      	ldr	r3, [r7, #8]
 80029de:	401a      	ands	r2, r3
 80029e0:	697b      	ldr	r3, [r7, #20]
 80029e2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80029e4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80029e8:	697b      	ldr	r3, [r7, #20]
 80029ea:	fa01 f303 	lsl.w	r3, r1, r3
 80029ee:	43d9      	mvns	r1, r3
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80029f4:	4313      	orrs	r3, r2
         );
}
 80029f6:	4618      	mov	r0, r3
 80029f8:	3724      	adds	r7, #36	; 0x24
 80029fa:	46bd      	mov	sp, r7
 80029fc:	bc80      	pop	{r7}
 80029fe:	4770      	bx	lr

08002a00 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002a00:	b580      	push	{r7, lr}
 8002a02:	b082      	sub	sp, #8
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	3b01      	subs	r3, #1
 8002a0c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002a10:	d301      	bcc.n	8002a16 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002a12:	2301      	movs	r3, #1
 8002a14:	e00f      	b.n	8002a36 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002a16:	4a0a      	ldr	r2, [pc, #40]	; (8002a40 <SysTick_Config+0x40>)
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	3b01      	subs	r3, #1
 8002a1c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002a1e:	210f      	movs	r1, #15
 8002a20:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002a24:	f7ff ff90 	bl	8002948 <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002a28:	4b05      	ldr	r3, [pc, #20]	; (8002a40 <SysTick_Config+0x40>)
 8002a2a:	2200      	movs	r2, #0
 8002a2c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002a2e:	4b04      	ldr	r3, [pc, #16]	; (8002a40 <SysTick_Config+0x40>)
 8002a30:	2207      	movs	r2, #7
 8002a32:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002a34:	2300      	movs	r3, #0
}
 8002a36:	4618      	mov	r0, r3
 8002a38:	3708      	adds	r7, #8
 8002a3a:	46bd      	mov	sp, r7
 8002a3c:	bd80      	pop	{r7, pc}
 8002a3e:	bf00      	nop
 8002a40:	e000e010 	.word	0xe000e010

08002a44 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a44:	b580      	push	{r7, lr}
 8002a46:	b082      	sub	sp, #8
 8002a48:	af00      	add	r7, sp, #0
 8002a4a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002a4c:	6878      	ldr	r0, [r7, #4]
 8002a4e:	f7ff ff31 	bl	80028b4 <NVIC_SetPriorityGrouping>
}
 8002a52:	bf00      	nop
 8002a54:	3708      	adds	r7, #8
 8002a56:	46bd      	mov	sp, r7
 8002a58:	bd80      	pop	{r7, pc}

08002a5a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002a5a:	b580      	push	{r7, lr}
 8002a5c:	b086      	sub	sp, #24
 8002a5e:	af00      	add	r7, sp, #0
 8002a60:	4603      	mov	r3, r0
 8002a62:	60b9      	str	r1, [r7, #8]
 8002a64:	607a      	str	r2, [r7, #4]
 8002a66:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002a68:	2300      	movs	r3, #0
 8002a6a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002a6c:	f7ff ff46 	bl	80028fc <NVIC_GetPriorityGrouping>
 8002a70:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002a72:	687a      	ldr	r2, [r7, #4]
 8002a74:	68b9      	ldr	r1, [r7, #8]
 8002a76:	6978      	ldr	r0, [r7, #20]
 8002a78:	f7ff ff90 	bl	800299c <NVIC_EncodePriority>
 8002a7c:	4602      	mov	r2, r0
 8002a7e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002a82:	4611      	mov	r1, r2
 8002a84:	4618      	mov	r0, r3
 8002a86:	f7ff ff5f 	bl	8002948 <NVIC_SetPriority>
}
 8002a8a:	bf00      	nop
 8002a8c:	3718      	adds	r7, #24
 8002a8e:	46bd      	mov	sp, r7
 8002a90:	bd80      	pop	{r7, pc}

08002a92 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a92:	b580      	push	{r7, lr}
 8002a94:	b082      	sub	sp, #8
 8002a96:	af00      	add	r7, sp, #0
 8002a98:	4603      	mov	r3, r0
 8002a9a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002a9c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002aa0:	4618      	mov	r0, r3
 8002aa2:	f7ff ff39 	bl	8002918 <NVIC_EnableIRQ>
}
 8002aa6:	bf00      	nop
 8002aa8:	3708      	adds	r7, #8
 8002aaa:	46bd      	mov	sp, r7
 8002aac:	bd80      	pop	{r7, pc}

08002aae <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002aae:	b580      	push	{r7, lr}
 8002ab0:	b082      	sub	sp, #8
 8002ab2:	af00      	add	r7, sp, #0
 8002ab4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002ab6:	6878      	ldr	r0, [r7, #4]
 8002ab8:	f7ff ffa2 	bl	8002a00 <SysTick_Config>
 8002abc:	4603      	mov	r3, r0
}
 8002abe:	4618      	mov	r0, r3
 8002ac0:	3708      	adds	r7, #8
 8002ac2:	46bd      	mov	sp, r7
 8002ac4:	bd80      	pop	{r7, pc}
	...

08002ac8 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8002ac8:	b480      	push	{r7}
 8002aca:	b083      	sub	sp, #12
 8002acc:	af00      	add	r7, sp, #0
 8002ace:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	2b04      	cmp	r3, #4
 8002ad4:	d106      	bne.n	8002ae4 <HAL_SYSTICK_CLKSourceConfig+0x1c>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8002ad6:	4b09      	ldr	r3, [pc, #36]	; (8002afc <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	4a08      	ldr	r2, [pc, #32]	; (8002afc <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8002adc:	f043 0304 	orr.w	r3, r3, #4
 8002ae0:	6013      	str	r3, [r2, #0]
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
  }
}
 8002ae2:	e005      	b.n	8002af0 <HAL_SYSTICK_CLKSourceConfig+0x28>
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8002ae4:	4b05      	ldr	r3, [pc, #20]	; (8002afc <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	4a04      	ldr	r2, [pc, #16]	; (8002afc <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8002aea:	f023 0304 	bic.w	r3, r3, #4
 8002aee:	6013      	str	r3, [r2, #0]
}
 8002af0:	bf00      	nop
 8002af2:	370c      	adds	r7, #12
 8002af4:	46bd      	mov	sp, r7
 8002af6:	bc80      	pop	{r7}
 8002af8:	4770      	bx	lr
 8002afa:	bf00      	nop
 8002afc:	e000e010 	.word	0xe000e010

08002b00 <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 8002b00:	b580      	push	{r7, lr}
 8002b02:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 8002b04:	f000 f802 	bl	8002b0c <HAL_SYSTICK_Callback>
}
 8002b08:	bf00      	nop
 8002b0a:	bd80      	pop	{r7, pc}

08002b0c <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8002b0c:	b480      	push	{r7}
 8002b0e:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 8002b10:	bf00      	nop
 8002b12:	46bd      	mov	sp, r7
 8002b14:	bc80      	pop	{r7}
 8002b16:	4770      	bx	lr

08002b18 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002b18:	b480      	push	{r7}
 8002b1a:	b085      	sub	sp, #20
 8002b1c:	af00      	add	r7, sp, #0
 8002b1e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002b20:	2300      	movs	r3, #0
 8002b22:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d101      	bne.n	8002b2e <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8002b2a:	2301      	movs	r3, #1
 8002b2c:	e04f      	b.n	8002bce <HAL_DMA_Init+0xb6>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	461a      	mov	r2, r3
 8002b34:	4b28      	ldr	r3, [pc, #160]	; (8002bd8 <HAL_DMA_Init+0xc0>)
 8002b36:	4413      	add	r3, r2
 8002b38:	4a28      	ldr	r2, [pc, #160]	; (8002bdc <HAL_DMA_Init+0xc4>)
 8002b3a:	fba2 2303 	umull	r2, r3, r2, r3
 8002b3e:	091b      	lsrs	r3, r3, #4
 8002b40:	009a      	lsls	r2, r3, #2
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	4a25      	ldr	r2, [pc, #148]	; (8002be0 <HAL_DMA_Init+0xc8>)
 8002b4a:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* STM32F101xE || STM32F101xG || STM32F103xE || STM32F103xG || STM32F100xE || STM32F105xC || STM32F107xC */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	2202      	movs	r2, #2
 8002b50:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002b62:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8002b66:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8002b70:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	68db      	ldr	r3, [r3, #12]
 8002b76:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002b7c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	695b      	ldr	r3, [r3, #20]
 8002b82:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002b88:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	69db      	ldr	r3, [r3, #28]
 8002b8e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002b90:	68fa      	ldr	r2, [r7, #12]
 8002b92:	4313      	orrs	r3, r2
 8002b94:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	68fa      	ldr	r2, [r7, #12]
 8002b9c:	601a      	str	r2, [r3, #0]


  /* Clean callbacks */
  hdma->XferCpltCallback = NULL;
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	2200      	movs	r2, #0
 8002ba2:	629a      	str	r2, [r3, #40]	; 0x28
  hdma->XferHalfCpltCallback = NULL;
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	2200      	movs	r2, #0
 8002ba8:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma->XferErrorCallback = NULL;
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	2200      	movs	r2, #0
 8002bae:	631a      	str	r2, [r3, #48]	; 0x30
  hdma->XferAbortCallback = NULL;
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	2200      	movs	r2, #0
 8002bb4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	2200      	movs	r2, #0
 8002bba:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	2201      	movs	r2, #1
 8002bc0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	2200      	movs	r2, #0
 8002bc8:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8002bcc:	2300      	movs	r3, #0
}
 8002bce:	4618      	mov	r0, r3
 8002bd0:	3714      	adds	r7, #20
 8002bd2:	46bd      	mov	sp, r7
 8002bd4:	bc80      	pop	{r7}
 8002bd6:	4770      	bx	lr
 8002bd8:	bffdfff8 	.word	0xbffdfff8
 8002bdc:	cccccccd 	.word	0xcccccccd
 8002be0:	40020000 	.word	0x40020000

08002be4 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002be4:	b580      	push	{r7, lr}
 8002be6:	b086      	sub	sp, #24
 8002be8:	af00      	add	r7, sp, #0
 8002bea:	60f8      	str	r0, [r7, #12]
 8002bec:	60b9      	str	r1, [r7, #8]
 8002bee:	607a      	str	r2, [r7, #4]
 8002bf0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002bf2:	2300      	movs	r3, #0
 8002bf4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002bfc:	2b01      	cmp	r3, #1
 8002bfe:	d101      	bne.n	8002c04 <HAL_DMA_Start_IT+0x20>
 8002c00:	2302      	movs	r3, #2
 8002c02:	e04a      	b.n	8002c9a <HAL_DMA_Start_IT+0xb6>
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	2201      	movs	r2, #1
 8002c08:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002c12:	2b01      	cmp	r3, #1
 8002c14:	d13a      	bne.n	8002c8c <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	2202      	movs	r2, #2
 8002c1a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	2200      	movs	r2, #0
 8002c22:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	681a      	ldr	r2, [r3, #0]
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	f022 0201 	bic.w	r2, r2, #1
 8002c32:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002c34:	683b      	ldr	r3, [r7, #0]
 8002c36:	687a      	ldr	r2, [r7, #4]
 8002c38:	68b9      	ldr	r1, [r7, #8]
 8002c3a:	68f8      	ldr	r0, [r7, #12]
 8002c3c:	f000 f938 	bl	8002eb0 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d008      	beq.n	8002c5a <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	681a      	ldr	r2, [r3, #0]
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	f042 020e 	orr.w	r2, r2, #14
 8002c56:	601a      	str	r2, [r3, #0]
 8002c58:	e00f      	b.n	8002c7a <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	681a      	ldr	r2, [r3, #0]
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	f022 0204 	bic.w	r2, r2, #4
 8002c68:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	681a      	ldr	r2, [r3, #0]
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	f042 020a 	orr.w	r2, r2, #10
 8002c78:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	681a      	ldr	r2, [r3, #0]
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	f042 0201 	orr.w	r2, r2, #1
 8002c88:	601a      	str	r2, [r3, #0]
 8002c8a:	e005      	b.n	8002c98 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	2200      	movs	r2, #0
 8002c90:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8002c94:	2302      	movs	r3, #2
 8002c96:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8002c98:	7dfb      	ldrb	r3, [r7, #23]
}
 8002c9a:	4618      	mov	r0, r3
 8002c9c:	3718      	adds	r7, #24
 8002c9e:	46bd      	mov	sp, r7
 8002ca0:	bd80      	pop	{r7, pc}
	...

08002ca4 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002ca4:	b580      	push	{r7, lr}
 8002ca6:	b084      	sub	sp, #16
 8002ca8:	af00      	add	r7, sp, #0
 8002caa:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cc0:	2204      	movs	r2, #4
 8002cc2:	409a      	lsls	r2, r3
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	4013      	ands	r3, r2
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d04f      	beq.n	8002d6c <HAL_DMA_IRQHandler+0xc8>
 8002ccc:	68bb      	ldr	r3, [r7, #8]
 8002cce:	f003 0304 	and.w	r3, r3, #4
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d04a      	beq.n	8002d6c <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	f003 0320 	and.w	r3, r3, #32
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d107      	bne.n	8002cf4 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	681a      	ldr	r2, [r3, #0]
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	f022 0204 	bic.w	r2, r2, #4
 8002cf2:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	4a66      	ldr	r2, [pc, #408]	; (8002e94 <HAL_DMA_IRQHandler+0x1f0>)
 8002cfa:	4293      	cmp	r3, r2
 8002cfc:	d029      	beq.n	8002d52 <HAL_DMA_IRQHandler+0xae>
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	4a65      	ldr	r2, [pc, #404]	; (8002e98 <HAL_DMA_IRQHandler+0x1f4>)
 8002d04:	4293      	cmp	r3, r2
 8002d06:	d022      	beq.n	8002d4e <HAL_DMA_IRQHandler+0xaa>
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	4a63      	ldr	r2, [pc, #396]	; (8002e9c <HAL_DMA_IRQHandler+0x1f8>)
 8002d0e:	4293      	cmp	r3, r2
 8002d10:	d01a      	beq.n	8002d48 <HAL_DMA_IRQHandler+0xa4>
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	4a62      	ldr	r2, [pc, #392]	; (8002ea0 <HAL_DMA_IRQHandler+0x1fc>)
 8002d18:	4293      	cmp	r3, r2
 8002d1a:	d012      	beq.n	8002d42 <HAL_DMA_IRQHandler+0x9e>
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	4a60      	ldr	r2, [pc, #384]	; (8002ea4 <HAL_DMA_IRQHandler+0x200>)
 8002d22:	4293      	cmp	r3, r2
 8002d24:	d00a      	beq.n	8002d3c <HAL_DMA_IRQHandler+0x98>
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	4a5f      	ldr	r2, [pc, #380]	; (8002ea8 <HAL_DMA_IRQHandler+0x204>)
 8002d2c:	4293      	cmp	r3, r2
 8002d2e:	d102      	bne.n	8002d36 <HAL_DMA_IRQHandler+0x92>
 8002d30:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002d34:	e00e      	b.n	8002d54 <HAL_DMA_IRQHandler+0xb0>
 8002d36:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8002d3a:	e00b      	b.n	8002d54 <HAL_DMA_IRQHandler+0xb0>
 8002d3c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002d40:	e008      	b.n	8002d54 <HAL_DMA_IRQHandler+0xb0>
 8002d42:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002d46:	e005      	b.n	8002d54 <HAL_DMA_IRQHandler+0xb0>
 8002d48:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002d4c:	e002      	b.n	8002d54 <HAL_DMA_IRQHandler+0xb0>
 8002d4e:	2340      	movs	r3, #64	; 0x40
 8002d50:	e000      	b.n	8002d54 <HAL_DMA_IRQHandler+0xb0>
 8002d52:	2304      	movs	r3, #4
 8002d54:	4a55      	ldr	r2, [pc, #340]	; (8002eac <HAL_DMA_IRQHandler+0x208>)
 8002d56:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	f000 8094 	beq.w	8002e8a <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d66:	6878      	ldr	r0, [r7, #4]
 8002d68:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8002d6a:	e08e      	b.n	8002e8a <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d70:	2202      	movs	r2, #2
 8002d72:	409a      	lsls	r2, r3
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	4013      	ands	r3, r2
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d056      	beq.n	8002e2a <HAL_DMA_IRQHandler+0x186>
 8002d7c:	68bb      	ldr	r3, [r7, #8]
 8002d7e:	f003 0302 	and.w	r3, r3, #2
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d051      	beq.n	8002e2a <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	f003 0320 	and.w	r3, r3, #32
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d10b      	bne.n	8002dac <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	681a      	ldr	r2, [r3, #0]
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	f022 020a 	bic.w	r2, r2, #10
 8002da2:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	2201      	movs	r2, #1
 8002da8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	4a38      	ldr	r2, [pc, #224]	; (8002e94 <HAL_DMA_IRQHandler+0x1f0>)
 8002db2:	4293      	cmp	r3, r2
 8002db4:	d029      	beq.n	8002e0a <HAL_DMA_IRQHandler+0x166>
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	4a37      	ldr	r2, [pc, #220]	; (8002e98 <HAL_DMA_IRQHandler+0x1f4>)
 8002dbc:	4293      	cmp	r3, r2
 8002dbe:	d022      	beq.n	8002e06 <HAL_DMA_IRQHandler+0x162>
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	4a35      	ldr	r2, [pc, #212]	; (8002e9c <HAL_DMA_IRQHandler+0x1f8>)
 8002dc6:	4293      	cmp	r3, r2
 8002dc8:	d01a      	beq.n	8002e00 <HAL_DMA_IRQHandler+0x15c>
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	4a34      	ldr	r2, [pc, #208]	; (8002ea0 <HAL_DMA_IRQHandler+0x1fc>)
 8002dd0:	4293      	cmp	r3, r2
 8002dd2:	d012      	beq.n	8002dfa <HAL_DMA_IRQHandler+0x156>
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	4a32      	ldr	r2, [pc, #200]	; (8002ea4 <HAL_DMA_IRQHandler+0x200>)
 8002dda:	4293      	cmp	r3, r2
 8002ddc:	d00a      	beq.n	8002df4 <HAL_DMA_IRQHandler+0x150>
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	4a31      	ldr	r2, [pc, #196]	; (8002ea8 <HAL_DMA_IRQHandler+0x204>)
 8002de4:	4293      	cmp	r3, r2
 8002de6:	d102      	bne.n	8002dee <HAL_DMA_IRQHandler+0x14a>
 8002de8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002dec:	e00e      	b.n	8002e0c <HAL_DMA_IRQHandler+0x168>
 8002dee:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002df2:	e00b      	b.n	8002e0c <HAL_DMA_IRQHandler+0x168>
 8002df4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002df8:	e008      	b.n	8002e0c <HAL_DMA_IRQHandler+0x168>
 8002dfa:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002dfe:	e005      	b.n	8002e0c <HAL_DMA_IRQHandler+0x168>
 8002e00:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002e04:	e002      	b.n	8002e0c <HAL_DMA_IRQHandler+0x168>
 8002e06:	2320      	movs	r3, #32
 8002e08:	e000      	b.n	8002e0c <HAL_DMA_IRQHandler+0x168>
 8002e0a:	2302      	movs	r3, #2
 8002e0c:	4a27      	ldr	r2, [pc, #156]	; (8002eac <HAL_DMA_IRQHandler+0x208>)
 8002e0e:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	2200      	movs	r2, #0
 8002e14:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d034      	beq.n	8002e8a <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e24:	6878      	ldr	r0, [r7, #4]
 8002e26:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8002e28:	e02f      	b.n	8002e8a <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e2e:	2208      	movs	r2, #8
 8002e30:	409a      	lsls	r2, r3
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	4013      	ands	r3, r2
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d028      	beq.n	8002e8c <HAL_DMA_IRQHandler+0x1e8>
 8002e3a:	68bb      	ldr	r3, [r7, #8]
 8002e3c:	f003 0308 	and.w	r3, r3, #8
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d023      	beq.n	8002e8c <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	681a      	ldr	r2, [r3, #0]
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	f022 020e 	bic.w	r2, r2, #14
 8002e52:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e5c:	2101      	movs	r1, #1
 8002e5e:	fa01 f202 	lsl.w	r2, r1, r2
 8002e62:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	2201      	movs	r2, #1
 8002e68:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	2201      	movs	r2, #1
 8002e6e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	2200      	movs	r2, #0
 8002e76:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d004      	beq.n	8002e8c <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e86:	6878      	ldr	r0, [r7, #4]
 8002e88:	4798      	blx	r3
    }
  }
  return;
 8002e8a:	bf00      	nop
 8002e8c:	bf00      	nop
}
 8002e8e:	3710      	adds	r7, #16
 8002e90:	46bd      	mov	sp, r7
 8002e92:	bd80      	pop	{r7, pc}
 8002e94:	40020008 	.word	0x40020008
 8002e98:	4002001c 	.word	0x4002001c
 8002e9c:	40020030 	.word	0x40020030
 8002ea0:	40020044 	.word	0x40020044
 8002ea4:	40020058 	.word	0x40020058
 8002ea8:	4002006c 	.word	0x4002006c
 8002eac:	40020000 	.word	0x40020000

08002eb0 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002eb0:	b480      	push	{r7}
 8002eb2:	b085      	sub	sp, #20
 8002eb4:	af00      	add	r7, sp, #0
 8002eb6:	60f8      	str	r0, [r7, #12]
 8002eb8:	60b9      	str	r1, [r7, #8]
 8002eba:	607a      	str	r2, [r7, #4]
 8002ebc:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ec6:	2101      	movs	r1, #1
 8002ec8:	fa01 f202 	lsl.w	r2, r1, r2
 8002ecc:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	683a      	ldr	r2, [r7, #0]
 8002ed4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	685b      	ldr	r3, [r3, #4]
 8002eda:	2b10      	cmp	r3, #16
 8002edc:	d108      	bne.n	8002ef0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	687a      	ldr	r2, [r7, #4]
 8002ee4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	68ba      	ldr	r2, [r7, #8]
 8002eec:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002eee:	e007      	b.n	8002f00 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	68ba      	ldr	r2, [r7, #8]
 8002ef6:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	687a      	ldr	r2, [r7, #4]
 8002efe:	60da      	str	r2, [r3, #12]
}
 8002f00:	bf00      	nop
 8002f02:	3714      	adds	r7, #20
 8002f04:	46bd      	mov	sp, r7
 8002f06:	bc80      	pop	{r7}
 8002f08:	4770      	bx	lr
	...

08002f0c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002f0c:	b480      	push	{r7}
 8002f0e:	b08b      	sub	sp, #44	; 0x2c
 8002f10:	af00      	add	r7, sp, #0
 8002f12:	6078      	str	r0, [r7, #4]
 8002f14:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002f16:	2300      	movs	r3, #0
 8002f18:	61fb      	str	r3, [r7, #28]
  uint32_t iocurrent = 0x00U;
 8002f1a:	2300      	movs	r3, #0
 8002f1c:	61bb      	str	r3, [r7, #24]
  uint32_t temp = 0x00U;
 8002f1e:	2300      	movs	r3, #0
 8002f20:	617b      	str	r3, [r7, #20]
  uint32_t config = 0x00U;
 8002f22:	2300      	movs	r3, #0
 8002f24:	623b      	str	r3, [r7, #32]
  __IO uint32_t *configregister; /* Store the address of CRL or CRH register based on pin number */
  uint32_t registeroffset = 0U; /* offset used during computation of CNF and MODE bits placement inside CRL or CRH register */
 8002f26:	2300      	movs	r3, #0
 8002f28:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0U; position < GPIO_NUMBER; position++)
 8002f2a:	2300      	movs	r3, #0
 8002f2c:	627b      	str	r3, [r7, #36]	; 0x24
 8002f2e:	e127      	b.n	8003180 <HAL_GPIO_Init+0x274>
  {
    /* Get the IO position */
    ioposition = (0x01U << position);
 8002f30:	2201      	movs	r2, #1
 8002f32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f34:	fa02 f303 	lsl.w	r3, r2, r3
 8002f38:	61fb      	str	r3, [r7, #28]
    
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002f3a:	683b      	ldr	r3, [r7, #0]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	69fa      	ldr	r2, [r7, #28]
 8002f40:	4013      	ands	r3, r2
 8002f42:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002f44:	69ba      	ldr	r2, [r7, #24]
 8002f46:	69fb      	ldr	r3, [r7, #28]
 8002f48:	429a      	cmp	r2, r3
 8002f4a:	f040 8116 	bne.w	800317a <HAL_GPIO_Init+0x26e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002f4e:	683b      	ldr	r3, [r7, #0]
 8002f50:	685b      	ldr	r3, [r3, #4]
 8002f52:	2b12      	cmp	r3, #18
 8002f54:	d034      	beq.n	8002fc0 <HAL_GPIO_Init+0xb4>
 8002f56:	2b12      	cmp	r3, #18
 8002f58:	d80d      	bhi.n	8002f76 <HAL_GPIO_Init+0x6a>
 8002f5a:	2b02      	cmp	r3, #2
 8002f5c:	d02b      	beq.n	8002fb6 <HAL_GPIO_Init+0xaa>
 8002f5e:	2b02      	cmp	r3, #2
 8002f60:	d804      	bhi.n	8002f6c <HAL_GPIO_Init+0x60>
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d031      	beq.n	8002fca <HAL_GPIO_Init+0xbe>
 8002f66:	2b01      	cmp	r3, #1
 8002f68:	d01c      	beq.n	8002fa4 <HAL_GPIO_Init+0x98>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;
        
        /* Parameters are checked with assert_param */
        default:
          break;
 8002f6a:	e048      	b.n	8002ffe <HAL_GPIO_Init+0xf2>
      switch (GPIO_Init->Mode)
 8002f6c:	2b03      	cmp	r3, #3
 8002f6e:	d043      	beq.n	8002ff8 <HAL_GPIO_Init+0xec>
 8002f70:	2b11      	cmp	r3, #17
 8002f72:	d01b      	beq.n	8002fac <HAL_GPIO_Init+0xa0>
          break;
 8002f74:	e043      	b.n	8002ffe <HAL_GPIO_Init+0xf2>
      switch (GPIO_Init->Mode)
 8002f76:	4a87      	ldr	r2, [pc, #540]	; (8003194 <HAL_GPIO_Init+0x288>)
 8002f78:	4293      	cmp	r3, r2
 8002f7a:	d026      	beq.n	8002fca <HAL_GPIO_Init+0xbe>
 8002f7c:	4a85      	ldr	r2, [pc, #532]	; (8003194 <HAL_GPIO_Init+0x288>)
 8002f7e:	4293      	cmp	r3, r2
 8002f80:	d806      	bhi.n	8002f90 <HAL_GPIO_Init+0x84>
 8002f82:	4a85      	ldr	r2, [pc, #532]	; (8003198 <HAL_GPIO_Init+0x28c>)
 8002f84:	4293      	cmp	r3, r2
 8002f86:	d020      	beq.n	8002fca <HAL_GPIO_Init+0xbe>
 8002f88:	4a84      	ldr	r2, [pc, #528]	; (800319c <HAL_GPIO_Init+0x290>)
 8002f8a:	4293      	cmp	r3, r2
 8002f8c:	d01d      	beq.n	8002fca <HAL_GPIO_Init+0xbe>
          break;
 8002f8e:	e036      	b.n	8002ffe <HAL_GPIO_Init+0xf2>
      switch (GPIO_Init->Mode)
 8002f90:	4a83      	ldr	r2, [pc, #524]	; (80031a0 <HAL_GPIO_Init+0x294>)
 8002f92:	4293      	cmp	r3, r2
 8002f94:	d019      	beq.n	8002fca <HAL_GPIO_Init+0xbe>
 8002f96:	4a83      	ldr	r2, [pc, #524]	; (80031a4 <HAL_GPIO_Init+0x298>)
 8002f98:	4293      	cmp	r3, r2
 8002f9a:	d016      	beq.n	8002fca <HAL_GPIO_Init+0xbe>
 8002f9c:	4a82      	ldr	r2, [pc, #520]	; (80031a8 <HAL_GPIO_Init+0x29c>)
 8002f9e:	4293      	cmp	r3, r2
 8002fa0:	d013      	beq.n	8002fca <HAL_GPIO_Init+0xbe>
          break;
 8002fa2:	e02c      	b.n	8002ffe <HAL_GPIO_Init+0xf2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002fa4:	683b      	ldr	r3, [r7, #0]
 8002fa6:	68db      	ldr	r3, [r3, #12]
 8002fa8:	623b      	str	r3, [r7, #32]
          break;
 8002faa:	e028      	b.n	8002ffe <HAL_GPIO_Init+0xf2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002fac:	683b      	ldr	r3, [r7, #0]
 8002fae:	68db      	ldr	r3, [r3, #12]
 8002fb0:	3304      	adds	r3, #4
 8002fb2:	623b      	str	r3, [r7, #32]
          break;
 8002fb4:	e023      	b.n	8002ffe <HAL_GPIO_Init+0xf2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002fb6:	683b      	ldr	r3, [r7, #0]
 8002fb8:	68db      	ldr	r3, [r3, #12]
 8002fba:	3308      	adds	r3, #8
 8002fbc:	623b      	str	r3, [r7, #32]
          break;
 8002fbe:	e01e      	b.n	8002ffe <HAL_GPIO_Init+0xf2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002fc0:	683b      	ldr	r3, [r7, #0]
 8002fc2:	68db      	ldr	r3, [r3, #12]
 8002fc4:	330c      	adds	r3, #12
 8002fc6:	623b      	str	r3, [r7, #32]
          break;
 8002fc8:	e019      	b.n	8002ffe <HAL_GPIO_Init+0xf2>
          if(GPIO_Init->Pull == GPIO_NOPULL)
 8002fca:	683b      	ldr	r3, [r7, #0]
 8002fcc:	689b      	ldr	r3, [r3, #8]
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d102      	bne.n	8002fd8 <HAL_GPIO_Init+0xcc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002fd2:	2304      	movs	r3, #4
 8002fd4:	623b      	str	r3, [r7, #32]
          break; 
 8002fd6:	e012      	b.n	8002ffe <HAL_GPIO_Init+0xf2>
          else if(GPIO_Init->Pull == GPIO_PULLUP)
 8002fd8:	683b      	ldr	r3, [r7, #0]
 8002fda:	689b      	ldr	r3, [r3, #8]
 8002fdc:	2b01      	cmp	r3, #1
 8002fde:	d105      	bne.n	8002fec <HAL_GPIO_Init+0xe0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002fe0:	2308      	movs	r3, #8
 8002fe2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	69fa      	ldr	r2, [r7, #28]
 8002fe8:	611a      	str	r2, [r3, #16]
          break; 
 8002fea:	e008      	b.n	8002ffe <HAL_GPIO_Init+0xf2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002fec:	2308      	movs	r3, #8
 8002fee:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	69fa      	ldr	r2, [r7, #28]
 8002ff4:	615a      	str	r2, [r3, #20]
          break; 
 8002ff6:	e002      	b.n	8002ffe <HAL_GPIO_Init+0xf2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002ff8:	2300      	movs	r3, #0
 8002ffa:	623b      	str	r3, [r7, #32]
          break;
 8002ffc:	bf00      	nop
      }
      
      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002ffe:	69bb      	ldr	r3, [r7, #24]
 8003000:	2bff      	cmp	r3, #255	; 0xff
 8003002:	d801      	bhi.n	8003008 <HAL_GPIO_Init+0xfc>
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	e001      	b.n	800300c <HAL_GPIO_Init+0x100>
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	3304      	adds	r3, #4
 800300c:	60fb      	str	r3, [r7, #12]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2U) : ((position - 8U) << 2U);
 800300e:	69bb      	ldr	r3, [r7, #24]
 8003010:	2bff      	cmp	r3, #255	; 0xff
 8003012:	d802      	bhi.n	800301a <HAL_GPIO_Init+0x10e>
 8003014:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003016:	009b      	lsls	r3, r3, #2
 8003018:	e002      	b.n	8003020 <HAL_GPIO_Init+0x114>
 800301a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800301c:	3b08      	subs	r3, #8
 800301e:	009b      	lsls	r3, r3, #2
 8003020:	613b      	str	r3, [r7, #16]
      
      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset ), (config << registeroffset));
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	681a      	ldr	r2, [r3, #0]
 8003026:	210f      	movs	r1, #15
 8003028:	693b      	ldr	r3, [r7, #16]
 800302a:	fa01 f303 	lsl.w	r3, r1, r3
 800302e:	43db      	mvns	r3, r3
 8003030:	401a      	ands	r2, r3
 8003032:	6a39      	ldr	r1, [r7, #32]
 8003034:	693b      	ldr	r3, [r7, #16]
 8003036:	fa01 f303 	lsl.w	r3, r1, r3
 800303a:	431a      	orrs	r2, r3
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	601a      	str	r2, [r3, #0]
      
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 8003040:	683b      	ldr	r3, [r7, #0]
 8003042:	685b      	ldr	r3, [r3, #4]
 8003044:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003048:	2b00      	cmp	r3, #0
 800304a:	f000 8096 	beq.w	800317a <HAL_GPIO_Init+0x26e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800304e:	4b57      	ldr	r3, [pc, #348]	; (80031ac <HAL_GPIO_Init+0x2a0>)
 8003050:	699b      	ldr	r3, [r3, #24]
 8003052:	4a56      	ldr	r2, [pc, #344]	; (80031ac <HAL_GPIO_Init+0x2a0>)
 8003054:	f043 0301 	orr.w	r3, r3, #1
 8003058:	6193      	str	r3, [r2, #24]
 800305a:	4b54      	ldr	r3, [pc, #336]	; (80031ac <HAL_GPIO_Init+0x2a0>)
 800305c:	699b      	ldr	r3, [r3, #24]
 800305e:	f003 0301 	and.w	r3, r3, #1
 8003062:	60bb      	str	r3, [r7, #8]
 8003064:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2U];
 8003066:	4a52      	ldr	r2, [pc, #328]	; (80031b0 <HAL_GPIO_Init+0x2a4>)
 8003068:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800306a:	089b      	lsrs	r3, r3, #2
 800306c:	3302      	adds	r3, #2
 800306e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003072:	617b      	str	r3, [r7, #20]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8003074:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003076:	f003 0303 	and.w	r3, r3, #3
 800307a:	009b      	lsls	r3, r3, #2
 800307c:	220f      	movs	r2, #15
 800307e:	fa02 f303 	lsl.w	r3, r2, r3
 8003082:	43db      	mvns	r3, r3
 8003084:	697a      	ldr	r2, [r7, #20]
 8003086:	4013      	ands	r3, r2
 8003088:	617b      	str	r3, [r7, #20]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	4a49      	ldr	r2, [pc, #292]	; (80031b4 <HAL_GPIO_Init+0x2a8>)
 800308e:	4293      	cmp	r3, r2
 8003090:	d013      	beq.n	80030ba <HAL_GPIO_Init+0x1ae>
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	4a48      	ldr	r2, [pc, #288]	; (80031b8 <HAL_GPIO_Init+0x2ac>)
 8003096:	4293      	cmp	r3, r2
 8003098:	d00d      	beq.n	80030b6 <HAL_GPIO_Init+0x1aa>
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	4a47      	ldr	r2, [pc, #284]	; (80031bc <HAL_GPIO_Init+0x2b0>)
 800309e:	4293      	cmp	r3, r2
 80030a0:	d007      	beq.n	80030b2 <HAL_GPIO_Init+0x1a6>
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	4a46      	ldr	r2, [pc, #280]	; (80031c0 <HAL_GPIO_Init+0x2b4>)
 80030a6:	4293      	cmp	r3, r2
 80030a8:	d101      	bne.n	80030ae <HAL_GPIO_Init+0x1a2>
 80030aa:	2303      	movs	r3, #3
 80030ac:	e006      	b.n	80030bc <HAL_GPIO_Init+0x1b0>
 80030ae:	2304      	movs	r3, #4
 80030b0:	e004      	b.n	80030bc <HAL_GPIO_Init+0x1b0>
 80030b2:	2302      	movs	r3, #2
 80030b4:	e002      	b.n	80030bc <HAL_GPIO_Init+0x1b0>
 80030b6:	2301      	movs	r3, #1
 80030b8:	e000      	b.n	80030bc <HAL_GPIO_Init+0x1b0>
 80030ba:	2300      	movs	r3, #0
 80030bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80030be:	f002 0203 	and.w	r2, r2, #3
 80030c2:	0092      	lsls	r2, r2, #2
 80030c4:	4093      	lsls	r3, r2
 80030c6:	697a      	ldr	r2, [r7, #20]
 80030c8:	4313      	orrs	r3, r2
 80030ca:	617b      	str	r3, [r7, #20]
        AFIO->EXTICR[position >> 2U] = temp;
 80030cc:	4938      	ldr	r1, [pc, #224]	; (80031b0 <HAL_GPIO_Init+0x2a4>)
 80030ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030d0:	089b      	lsrs	r3, r3, #2
 80030d2:	3302      	adds	r3, #2
 80030d4:	697a      	ldr	r2, [r7, #20]
 80030d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        

        /* Configure the interrupt mask */
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80030da:	683b      	ldr	r3, [r7, #0]
 80030dc:	685b      	ldr	r3, [r3, #4]
 80030de:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d006      	beq.n	80030f4 <HAL_GPIO_Init+0x1e8>
        {
          SET_BIT(EXTI->IMR, iocurrent); 
 80030e6:	4b37      	ldr	r3, [pc, #220]	; (80031c4 <HAL_GPIO_Init+0x2b8>)
 80030e8:	681a      	ldr	r2, [r3, #0]
 80030ea:	4936      	ldr	r1, [pc, #216]	; (80031c4 <HAL_GPIO_Init+0x2b8>)
 80030ec:	69bb      	ldr	r3, [r7, #24]
 80030ee:	4313      	orrs	r3, r2
 80030f0:	600b      	str	r3, [r1, #0]
 80030f2:	e006      	b.n	8003102 <HAL_GPIO_Init+0x1f6>
        } 
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent); 
 80030f4:	4b33      	ldr	r3, [pc, #204]	; (80031c4 <HAL_GPIO_Init+0x2b8>)
 80030f6:	681a      	ldr	r2, [r3, #0]
 80030f8:	69bb      	ldr	r3, [r7, #24]
 80030fa:	43db      	mvns	r3, r3
 80030fc:	4931      	ldr	r1, [pc, #196]	; (80031c4 <HAL_GPIO_Init+0x2b8>)
 80030fe:	4013      	ands	r3, r2
 8003100:	600b      	str	r3, [r1, #0]
        } 
        
        /* Configure the event mask */
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003102:	683b      	ldr	r3, [r7, #0]
 8003104:	685b      	ldr	r3, [r3, #4]
 8003106:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800310a:	2b00      	cmp	r3, #0
 800310c:	d006      	beq.n	800311c <HAL_GPIO_Init+0x210>
        {
          SET_BIT(EXTI->EMR, iocurrent); 
 800310e:	4b2d      	ldr	r3, [pc, #180]	; (80031c4 <HAL_GPIO_Init+0x2b8>)
 8003110:	685a      	ldr	r2, [r3, #4]
 8003112:	492c      	ldr	r1, [pc, #176]	; (80031c4 <HAL_GPIO_Init+0x2b8>)
 8003114:	69bb      	ldr	r3, [r7, #24]
 8003116:	4313      	orrs	r3, r2
 8003118:	604b      	str	r3, [r1, #4]
 800311a:	e006      	b.n	800312a <HAL_GPIO_Init+0x21e>
        } 
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent); 
 800311c:	4b29      	ldr	r3, [pc, #164]	; (80031c4 <HAL_GPIO_Init+0x2b8>)
 800311e:	685a      	ldr	r2, [r3, #4]
 8003120:	69bb      	ldr	r3, [r7, #24]
 8003122:	43db      	mvns	r3, r3
 8003124:	4927      	ldr	r1, [pc, #156]	; (80031c4 <HAL_GPIO_Init+0x2b8>)
 8003126:	4013      	ands	r3, r2
 8003128:	604b      	str	r3, [r1, #4]
        }
        
        /* Enable or disable the rising trigger */
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800312a:	683b      	ldr	r3, [r7, #0]
 800312c:	685b      	ldr	r3, [r3, #4]
 800312e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003132:	2b00      	cmp	r3, #0
 8003134:	d006      	beq.n	8003144 <HAL_GPIO_Init+0x238>
        {
          SET_BIT(EXTI->RTSR, iocurrent); 
 8003136:	4b23      	ldr	r3, [pc, #140]	; (80031c4 <HAL_GPIO_Init+0x2b8>)
 8003138:	689a      	ldr	r2, [r3, #8]
 800313a:	4922      	ldr	r1, [pc, #136]	; (80031c4 <HAL_GPIO_Init+0x2b8>)
 800313c:	69bb      	ldr	r3, [r7, #24]
 800313e:	4313      	orrs	r3, r2
 8003140:	608b      	str	r3, [r1, #8]
 8003142:	e006      	b.n	8003152 <HAL_GPIO_Init+0x246>
        } 
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent); 
 8003144:	4b1f      	ldr	r3, [pc, #124]	; (80031c4 <HAL_GPIO_Init+0x2b8>)
 8003146:	689a      	ldr	r2, [r3, #8]
 8003148:	69bb      	ldr	r3, [r7, #24]
 800314a:	43db      	mvns	r3, r3
 800314c:	491d      	ldr	r1, [pc, #116]	; (80031c4 <HAL_GPIO_Init+0x2b8>)
 800314e:	4013      	ands	r3, r2
 8003150:	608b      	str	r3, [r1, #8]
        }
        
        /* Enable or disable the falling trigger */
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003152:	683b      	ldr	r3, [r7, #0]
 8003154:	685b      	ldr	r3, [r3, #4]
 8003156:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800315a:	2b00      	cmp	r3, #0
 800315c:	d006      	beq.n	800316c <HAL_GPIO_Init+0x260>
        {
          SET_BIT(EXTI->FTSR, iocurrent); 
 800315e:	4b19      	ldr	r3, [pc, #100]	; (80031c4 <HAL_GPIO_Init+0x2b8>)
 8003160:	68da      	ldr	r2, [r3, #12]
 8003162:	4918      	ldr	r1, [pc, #96]	; (80031c4 <HAL_GPIO_Init+0x2b8>)
 8003164:	69bb      	ldr	r3, [r7, #24]
 8003166:	4313      	orrs	r3, r2
 8003168:	60cb      	str	r3, [r1, #12]
 800316a:	e006      	b.n	800317a <HAL_GPIO_Init+0x26e>
        } 
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent); 
 800316c:	4b15      	ldr	r3, [pc, #84]	; (80031c4 <HAL_GPIO_Init+0x2b8>)
 800316e:	68da      	ldr	r2, [r3, #12]
 8003170:	69bb      	ldr	r3, [r7, #24]
 8003172:	43db      	mvns	r3, r3
 8003174:	4913      	ldr	r1, [pc, #76]	; (80031c4 <HAL_GPIO_Init+0x2b8>)
 8003176:	4013      	ands	r3, r2
 8003178:	60cb      	str	r3, [r1, #12]
  for (position = 0U; position < GPIO_NUMBER; position++)
 800317a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800317c:	3301      	adds	r3, #1
 800317e:	627b      	str	r3, [r7, #36]	; 0x24
 8003180:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003182:	2b0f      	cmp	r3, #15
 8003184:	f67f aed4 	bls.w	8002f30 <HAL_GPIO_Init+0x24>
        }
      }
    }
  }
}
 8003188:	bf00      	nop
 800318a:	372c      	adds	r7, #44	; 0x2c
 800318c:	46bd      	mov	sp, r7
 800318e:	bc80      	pop	{r7}
 8003190:	4770      	bx	lr
 8003192:	bf00      	nop
 8003194:	10210000 	.word	0x10210000
 8003198:	10110000 	.word	0x10110000
 800319c:	10120000 	.word	0x10120000
 80031a0:	10310000 	.word	0x10310000
 80031a4:	10320000 	.word	0x10320000
 80031a8:	10220000 	.word	0x10220000
 80031ac:	40021000 	.word	0x40021000
 80031b0:	40010000 	.word	0x40010000
 80031b4:	40010800 	.word	0x40010800
 80031b8:	40010c00 	.word	0x40010c00
 80031bc:	40011000 	.word	0x40011000
 80031c0:	40011400 	.word	0x40011400
 80031c4:	40010400 	.word	0x40010400

080031c8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80031c8:	b480      	push	{r7}
 80031ca:	b085      	sub	sp, #20
 80031cc:	af00      	add	r7, sp, #0
 80031ce:	6078      	str	r0, [r7, #4]
 80031d0:	460b      	mov	r3, r1
 80031d2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	689a      	ldr	r2, [r3, #8]
 80031d8:	887b      	ldrh	r3, [r7, #2]
 80031da:	4013      	ands	r3, r2
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d002      	beq.n	80031e6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80031e0:	2301      	movs	r3, #1
 80031e2:	73fb      	strb	r3, [r7, #15]
 80031e4:	e001      	b.n	80031ea <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80031e6:	2300      	movs	r3, #0
 80031e8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80031ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80031ec:	4618      	mov	r0, r3
 80031ee:	3714      	adds	r7, #20
 80031f0:	46bd      	mov	sp, r7
 80031f2:	bc80      	pop	{r7}
 80031f4:	4770      	bx	lr

080031f6 <HAL_GPIO_WritePin>:
  *            @arg GPIO_BIT_RESET: to clear the port pin
  *            @arg GPIO_BIT_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80031f6:	b480      	push	{r7}
 80031f8:	b083      	sub	sp, #12
 80031fa:	af00      	add	r7, sp, #0
 80031fc:	6078      	str	r0, [r7, #4]
 80031fe:	460b      	mov	r3, r1
 8003200:	807b      	strh	r3, [r7, #2]
 8003202:	4613      	mov	r3, r2
 8003204:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003206:	787b      	ldrb	r3, [r7, #1]
 8003208:	2b00      	cmp	r3, #0
 800320a:	d003      	beq.n	8003214 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800320c:	887a      	ldrh	r2, [r7, #2]
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003212:	e003      	b.n	800321c <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003214:	887b      	ldrh	r3, [r7, #2]
 8003216:	041a      	lsls	r2, r3, #16
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	611a      	str	r2, [r3, #16]
}
 800321c:	bf00      	nop
 800321e:	370c      	adds	r7, #12
 8003220:	46bd      	mov	sp, r7
 8003222:	bc80      	pop	{r7}
 8003224:	4770      	bx	lr

08003226 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral 
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003226:	b480      	push	{r7}
 8003228:	b083      	sub	sp, #12
 800322a:	af00      	add	r7, sp, #0
 800322c:	6078      	str	r0, [r7, #4]
 800322e:	460b      	mov	r3, r1
 8003230:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->ODR ^= GPIO_Pin;
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	68da      	ldr	r2, [r3, #12]
 8003236:	887b      	ldrh	r3, [r7, #2]
 8003238:	405a      	eors	r2, r3
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	60da      	str	r2, [r3, #12]
}
 800323e:	bf00      	nop
 8003240:	370c      	adds	r7, #12
 8003242:	46bd      	mov	sp, r7
 8003244:	bc80      	pop	{r7}
 8003246:	4770      	bx	lr

08003248 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003248:	b580      	push	{r7, lr}
 800324a:	b082      	sub	sp, #8
 800324c:	af00      	add	r7, sp, #0
 800324e:	4603      	mov	r3, r0
 8003250:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8003252:	4b08      	ldr	r3, [pc, #32]	; (8003274 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003254:	695a      	ldr	r2, [r3, #20]
 8003256:	88fb      	ldrh	r3, [r7, #6]
 8003258:	4013      	ands	r3, r2
 800325a:	2b00      	cmp	r3, #0
 800325c:	d006      	beq.n	800326c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800325e:	4a05      	ldr	r2, [pc, #20]	; (8003274 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003260:	88fb      	ldrh	r3, [r7, #6]
 8003262:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003264:	88fb      	ldrh	r3, [r7, #6]
 8003266:	4618      	mov	r0, r3
 8003268:	f7fe f882 	bl	8001370 <HAL_GPIO_EXTI_Callback>
  }
}
 800326c:	bf00      	nop
 800326e:	3708      	adds	r7, #8
 8003270:	46bd      	mov	sp, r7
 8003272:	bd80      	pop	{r7, pc}
 8003274:	40010400 	.word	0x40010400

08003278 <HAL_I2C_Init>:
  * @param  hi2c: pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003278:	b580      	push	{r7, lr}
 800327a:	b084      	sub	sp, #16
 800327c:	af00      	add	r7, sp, #0
 800327e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange = 0U;
 8003280:	2300      	movs	r3, #0
 8003282:	60fb      	str	r3, [r7, #12]
  uint32_t pclk1 = 0U;
 8003284:	2300      	movs	r3, #0
 8003286:	60bb      	str	r3, [r7, #8]

  /* Check the I2C handle allocation */
  if(hi2c == NULL)
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	2b00      	cmp	r3, #0
 800328c:	d101      	bne.n	8003292 <HAL_I2C_Init+0x1a>
  {
    return HAL_ERROR;
 800328e:	2301      	movs	r3, #1
 8003290:	e0c8      	b.n	8003424 <HAL_I2C_Init+0x1ac>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if(hi2c->State == HAL_I2C_STATE_RESET)
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003298:	b2db      	uxtb	r3, r3
 800329a:	2b00      	cmp	r3, #0
 800329c:	d106      	bne.n	80032ac <HAL_I2C_Init+0x34>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	2200      	movs	r2, #0
 80032a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80032a6:	6878      	ldr	r0, [r7, #4]
 80032a8:	f7fd fdd4 	bl	8000e54 <HAL_I2C_MspInit>
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	2224      	movs	r2, #36	; 0x24
 80032b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	681a      	ldr	r2, [r3, #0]
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	f022 0201 	bic.w	r2, r2, #1
 80032c2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80032c4:	f000 ff7a 	bl	80041bc <HAL_RCC_GetPCLK1Freq>
 80032c8:	60b8      	str	r0, [r7, #8]

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80032ca:	68bb      	ldr	r3, [r7, #8]
 80032cc:	4a57      	ldr	r2, [pc, #348]	; (800342c <HAL_I2C_Init+0x1b4>)
 80032ce:	fba2 2303 	umull	r2, r3, r2, r3
 80032d2:	0c9b      	lsrs	r3, r3, #18
 80032d4:	60fb      	str	r3, [r7, #12]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->CR2 = freqrange;
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	68fa      	ldr	r2, [r7, #12]
 80032dc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	685b      	ldr	r3, [r3, #4]
 80032e2:	4a53      	ldr	r2, [pc, #332]	; (8003430 <HAL_I2C_Init+0x1b8>)
 80032e4:	4293      	cmp	r3, r2
 80032e6:	d802      	bhi.n	80032ee <HAL_I2C_Init+0x76>
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	3301      	adds	r3, #1
 80032ec:	e009      	b.n	8003302 <HAL_I2C_Init+0x8a>
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80032f4:	fb02 f303 	mul.w	r3, r2, r3
 80032f8:	4a4e      	ldr	r2, [pc, #312]	; (8003434 <HAL_I2C_Init+0x1bc>)
 80032fa:	fba2 2303 	umull	r2, r3, r2, r3
 80032fe:	099b      	lsrs	r3, r3, #6
 8003300:	3301      	adds	r3, #1
 8003302:	687a      	ldr	r2, [r7, #4]
 8003304:	6812      	ldr	r2, [r2, #0]
 8003306:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  hi2c->Instance->CCR = I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle);
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	685b      	ldr	r3, [r3, #4]
 800330c:	4a48      	ldr	r2, [pc, #288]	; (8003430 <HAL_I2C_Init+0x1b8>)
 800330e:	4293      	cmp	r3, r2
 8003310:	d812      	bhi.n	8003338 <HAL_I2C_Init+0xc0>
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	685b      	ldr	r3, [r3, #4]
 8003316:	005b      	lsls	r3, r3, #1
 8003318:	68ba      	ldr	r2, [r7, #8]
 800331a:	fbb2 f3f3 	udiv	r3, r2, r3
 800331e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003322:	2b03      	cmp	r3, #3
 8003324:	d906      	bls.n	8003334 <HAL_I2C_Init+0xbc>
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	685b      	ldr	r3, [r3, #4]
 800332a:	005b      	lsls	r3, r3, #1
 800332c:	68ba      	ldr	r2, [r7, #8]
 800332e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003332:	e045      	b.n	80033c0 <HAL_I2C_Init+0x148>
 8003334:	2304      	movs	r3, #4
 8003336:	e043      	b.n	80033c0 <HAL_I2C_Init+0x148>
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	689b      	ldr	r3, [r3, #8]
 800333c:	2b00      	cmp	r3, #0
 800333e:	d10f      	bne.n	8003360 <HAL_I2C_Init+0xe8>
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	685a      	ldr	r2, [r3, #4]
 8003344:	4613      	mov	r3, r2
 8003346:	005b      	lsls	r3, r3, #1
 8003348:	4413      	add	r3, r2
 800334a:	68ba      	ldr	r2, [r7, #8]
 800334c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003350:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003354:	2b00      	cmp	r3, #0
 8003356:	bf0c      	ite	eq
 8003358:	2301      	moveq	r3, #1
 800335a:	2300      	movne	r3, #0
 800335c:	b2db      	uxtb	r3, r3
 800335e:	e010      	b.n	8003382 <HAL_I2C_Init+0x10a>
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	685a      	ldr	r2, [r3, #4]
 8003364:	4613      	mov	r3, r2
 8003366:	009b      	lsls	r3, r3, #2
 8003368:	4413      	add	r3, r2
 800336a:	009a      	lsls	r2, r3, #2
 800336c:	4413      	add	r3, r2
 800336e:	68ba      	ldr	r2, [r7, #8]
 8003370:	fbb2 f3f3 	udiv	r3, r2, r3
 8003374:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003378:	2b00      	cmp	r3, #0
 800337a:	bf0c      	ite	eq
 800337c:	2301      	moveq	r3, #1
 800337e:	2300      	movne	r3, #0
 8003380:	b2db      	uxtb	r3, r3
 8003382:	2b00      	cmp	r3, #0
 8003384:	d001      	beq.n	800338a <HAL_I2C_Init+0x112>
 8003386:	2301      	movs	r3, #1
 8003388:	e01a      	b.n	80033c0 <HAL_I2C_Init+0x148>
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	689b      	ldr	r3, [r3, #8]
 800338e:	2b00      	cmp	r3, #0
 8003390:	d10a      	bne.n	80033a8 <HAL_I2C_Init+0x130>
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	685a      	ldr	r2, [r3, #4]
 8003396:	4613      	mov	r3, r2
 8003398:	005b      	lsls	r3, r3, #1
 800339a:	4413      	add	r3, r2
 800339c:	68ba      	ldr	r2, [r7, #8]
 800339e:	fbb2 f3f3 	udiv	r3, r2, r3
 80033a2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80033a6:	e00b      	b.n	80033c0 <HAL_I2C_Init+0x148>
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	685a      	ldr	r2, [r3, #4]
 80033ac:	4613      	mov	r3, r2
 80033ae:	009b      	lsls	r3, r3, #2
 80033b0:	4413      	add	r3, r2
 80033b2:	009a      	lsls	r2, r3, #2
 80033b4:	4413      	add	r3, r2
 80033b6:	68ba      	ldr	r2, [r7, #8]
 80033b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80033bc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80033c0:	687a      	ldr	r2, [r7, #4]
 80033c2:	6812      	ldr	r2, [r2, #0]
 80033c4:	61d3      	str	r3, [r2, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	69d9      	ldr	r1, [r3, #28]
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	6a1a      	ldr	r2, [r3, #32]
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	430a      	orrs	r2, r1
 80033d4:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  hi2c->Instance->OAR1 = (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1);
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	6919      	ldr	r1, [r3, #16]
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	68da      	ldr	r2, [r3, #12]
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	430a      	orrs	r2, r1
 80033e4:	609a      	str	r2, [r3, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2);
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	6959      	ldr	r1, [r3, #20]
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	699a      	ldr	r2, [r3, #24]
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	430a      	orrs	r2, r1
 80033f4:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	681a      	ldr	r2, [r3, #0]
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	f042 0201 	orr.w	r2, r2, #1
 8003404:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	2200      	movs	r2, #0
 800340a:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	2220      	movs	r2, #32
 8003410:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	2200      	movs	r2, #0
 8003418:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	2200      	movs	r2, #0
 800341e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003422:	2300      	movs	r3, #0
}
 8003424:	4618      	mov	r0, r3
 8003426:	3710      	adds	r7, #16
 8003428:	46bd      	mov	sp, r7
 800342a:	bd80      	pop	{r7, pc}
 800342c:	431bde83 	.word	0x431bde83
 8003430:	000186a0 	.word	0x000186a0
 8003434:	10624dd3 	.word	0x10624dd3

08003438 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003438:	b580      	push	{r7, lr}
 800343a:	b088      	sub	sp, #32
 800343c:	af02      	add	r7, sp, #8
 800343e:	60f8      	str	r0, [r7, #12]
 8003440:	4608      	mov	r0, r1
 8003442:	4611      	mov	r1, r2
 8003444:	461a      	mov	r2, r3
 8003446:	4603      	mov	r3, r0
 8003448:	817b      	strh	r3, [r7, #10]
 800344a:	460b      	mov	r3, r1
 800344c:	813b      	strh	r3, [r7, #8]
 800344e:	4613      	mov	r3, r2
 8003450:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart = 0x00U;
 8003452:	2300      	movs	r3, #0
 8003454:	617b      	str	r3, [r7, #20]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003456:	f7fe fe49 	bl	80020ec <HAL_GetTick>
 800345a:	6178      	str	r0, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if(hi2c->State == HAL_I2C_STATE_READY)
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003462:	b2db      	uxtb	r3, r3
 8003464:	2b20      	cmp	r3, #32
 8003466:	f040 80e7 	bne.w	8003638 <HAL_I2C_Mem_Write+0x200>
  {
    /* Wait until BUSY flag is reset */
    if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800346a:	697b      	ldr	r3, [r7, #20]
 800346c:	9300      	str	r3, [sp, #0]
 800346e:	2319      	movs	r3, #25
 8003470:	2201      	movs	r2, #1
 8003472:	4974      	ldr	r1, [pc, #464]	; (8003644 <HAL_I2C_Mem_Write+0x20c>)
 8003474:	68f8      	ldr	r0, [r7, #12]
 8003476:	f000 f97d 	bl	8003774 <I2C_WaitOnFlagUntilTimeout>
 800347a:	4603      	mov	r3, r0
 800347c:	2b00      	cmp	r3, #0
 800347e:	d001      	beq.n	8003484 <HAL_I2C_Mem_Write+0x4c>
    {
      return HAL_BUSY;
 8003480:	2302      	movs	r3, #2
 8003482:	e0da      	b.n	800363a <HAL_I2C_Mem_Write+0x202>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800348a:	2b01      	cmp	r3, #1
 800348c:	d101      	bne.n	8003492 <HAL_I2C_Mem_Write+0x5a>
 800348e:	2302      	movs	r3, #2
 8003490:	e0d3      	b.n	800363a <HAL_I2C_Mem_Write+0x202>
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	2201      	movs	r2, #1
 8003496:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Check if the I2C is already enabled */
    if((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	f003 0301 	and.w	r3, r3, #1
 80034a4:	2b01      	cmp	r3, #1
 80034a6:	d007      	beq.n	80034b8 <HAL_I2C_Mem_Write+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	681a      	ldr	r2, [r3, #0]
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	f042 0201 	orr.w	r2, r2, #1
 80034b6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	681a      	ldr	r2, [r3, #0]
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80034c6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	2221      	movs	r2, #33	; 0x21
 80034cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	2240      	movs	r2, #64	; 0x40
 80034d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	2200      	movs	r2, #0
 80034dc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	6a3a      	ldr	r2, [r7, #32]
 80034e2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80034e8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	4a56      	ldr	r2, [pc, #344]	; (8003648 <HAL_I2C_Mem_Write+0x210>)
 80034ee:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferSize    = hi2c->XferCount;
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034f4:	b29a      	uxth	r2, r3
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	851a      	strh	r2, [r3, #40]	; 0x28
    
    /* Send Slave Address and Memory Address */
    if(I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80034fa:	88f8      	ldrh	r0, [r7, #6]
 80034fc:	893a      	ldrh	r2, [r7, #8]
 80034fe:	8979      	ldrh	r1, [r7, #10]
 8003500:	697b      	ldr	r3, [r7, #20]
 8003502:	9301      	str	r3, [sp, #4]
 8003504:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003506:	9300      	str	r3, [sp, #0]
 8003508:	4603      	mov	r3, r0
 800350a:	68f8      	ldr	r0, [r7, #12]
 800350c:	f000 f89e 	bl	800364c <I2C_RequestMemoryWrite>
 8003510:	4603      	mov	r3, r0
 8003512:	2b00      	cmp	r3, #0
 8003514:	d05e      	beq.n	80035d4 <HAL_I2C_Mem_Write+0x19c>
    {
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800351a:	2b04      	cmp	r3, #4
 800351c:	d105      	bne.n	800352a <HAL_I2C_Mem_Write+0xf2>
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	2200      	movs	r2, #0
 8003522:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        return HAL_ERROR;
 8003526:	2301      	movs	r3, #1
 8003528:	e087      	b.n	800363a <HAL_I2C_Mem_Write+0x202>
      }
      else
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	2200      	movs	r2, #0
 800352e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        return HAL_TIMEOUT;
 8003532:	2303      	movs	r3, #3
 8003534:	e081      	b.n	800363a <HAL_I2C_Mem_Write+0x202>
    }

    while(hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003536:	697a      	ldr	r2, [r7, #20]
 8003538:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800353a:	68f8      	ldr	r0, [r7, #12]
 800353c:	f000 f9d9 	bl	80038f2 <I2C_WaitOnTXEFlagUntilTimeout>
 8003540:	4603      	mov	r3, r0
 8003542:	2b00      	cmp	r3, #0
 8003544:	d00f      	beq.n	8003566 <HAL_I2C_Mem_Write+0x12e>
      {
        if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800354a:	2b04      	cmp	r3, #4
 800354c:	d109      	bne.n	8003562 <HAL_I2C_Mem_Write+0x12a>
        {
          /* Generate Stop */
          hi2c->Instance->CR1 |= I2C_CR1_STOP;
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	681a      	ldr	r2, [r3, #0]
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800355c:	601a      	str	r2, [r3, #0]
          return HAL_ERROR;
 800355e:	2301      	movs	r3, #1
 8003560:	e06b      	b.n	800363a <HAL_I2C_Mem_Write+0x202>
        }
        else
        {
          return HAL_TIMEOUT;
 8003562:	2303      	movs	r3, #3
 8003564:	e069      	b.n	800363a <HAL_I2C_Mem_Write+0x202>
        }
      }

      /* Write data to DR */
      hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800356a:	1c59      	adds	r1, r3, #1
 800356c:	68fa      	ldr	r2, [r7, #12]
 800356e:	6251      	str	r1, [r2, #36]	; 0x24
 8003570:	781a      	ldrb	r2, [r3, #0]
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	611a      	str	r2, [r3, #16]
      hi2c->XferSize--;
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800357c:	3b01      	subs	r3, #1
 800357e:	b29a      	uxth	r2, r3
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003588:	b29b      	uxth	r3, r3
 800358a:	3b01      	subs	r3, #1
 800358c:	b29a      	uxth	r2, r3
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	855a      	strh	r2, [r3, #42]	; 0x2a

      if((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	695b      	ldr	r3, [r3, #20]
 8003598:	f003 0304 	and.w	r3, r3, #4
 800359c:	2b04      	cmp	r3, #4
 800359e:	d119      	bne.n	80035d4 <HAL_I2C_Mem_Write+0x19c>
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d015      	beq.n	80035d4 <HAL_I2C_Mem_Write+0x19c>
      {
        /* Write data to DR */
        hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035ac:	1c59      	adds	r1, r3, #1
 80035ae:	68fa      	ldr	r2, [r7, #12]
 80035b0:	6251      	str	r1, [r2, #36]	; 0x24
 80035b2:	781a      	ldrb	r2, [r3, #0]
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	611a      	str	r2, [r3, #16]
        hi2c->XferSize--;
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80035be:	3b01      	subs	r3, #1
 80035c0:	b29a      	uxth	r2, r3
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035ca:	b29b      	uxth	r3, r3
 80035cc:	3b01      	subs	r3, #1
 80035ce:	b29a      	uxth	r2, r3
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	855a      	strh	r2, [r3, #42]	; 0x2a
    while(hi2c->XferSize > 0U)
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d1ac      	bne.n	8003536 <HAL_I2C_Mem_Write+0xfe>
      }
    }
    
    /* Wait until BTF flag is set */
    if(I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80035dc:	697a      	ldr	r2, [r7, #20]
 80035de:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80035e0:	68f8      	ldr	r0, [r7, #12]
 80035e2:	f000 f9c3 	bl	800396c <I2C_WaitOnBTFFlagUntilTimeout>
 80035e6:	4603      	mov	r3, r0
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d00f      	beq.n	800360c <HAL_I2C_Mem_Write+0x1d4>
    {
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035f0:	2b04      	cmp	r3, #4
 80035f2:	d109      	bne.n	8003608 <HAL_I2C_Mem_Write+0x1d0>
      {
        /* Generate Stop */
        hi2c->Instance->CR1 |= I2C_CR1_STOP;
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	681a      	ldr	r2, [r3, #0]
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003602:	601a      	str	r2, [r3, #0]
        return HAL_ERROR;
 8003604:	2301      	movs	r3, #1
 8003606:	e018      	b.n	800363a <HAL_I2C_Mem_Write+0x202>
      }
      else
      {
        return HAL_TIMEOUT;
 8003608:	2303      	movs	r3, #3
 800360a:	e016      	b.n	800363a <HAL_I2C_Mem_Write+0x202>
      }
    }

    /* Generate Stop */
    hi2c->Instance->CR1 |= I2C_CR1_STOP;
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	681a      	ldr	r2, [r3, #0]
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800361a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	2220      	movs	r2, #32
 8003620:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	2200      	movs	r2, #0
 8003628:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    
    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	2200      	movs	r2, #0
 8003630:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003634:	2300      	movs	r3, #0
 8003636:	e000      	b.n	800363a <HAL_I2C_Mem_Write+0x202>
  }
  else
  {
    return HAL_BUSY;
 8003638:	2302      	movs	r3, #2
  }
}
 800363a:	4618      	mov	r0, r3
 800363c:	3718      	adds	r7, #24
 800363e:	46bd      	mov	sp, r7
 8003640:	bd80      	pop	{r7, pc}
 8003642:	bf00      	nop
 8003644:	00100002 	.word	0x00100002
 8003648:	ffff0000 	.word	0xffff0000

0800364c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800364c:	b580      	push	{r7, lr}
 800364e:	b088      	sub	sp, #32
 8003650:	af02      	add	r7, sp, #8
 8003652:	60f8      	str	r0, [r7, #12]
 8003654:	4608      	mov	r0, r1
 8003656:	4611      	mov	r1, r2
 8003658:	461a      	mov	r2, r3
 800365a:	4603      	mov	r3, r0
 800365c:	817b      	strh	r3, [r7, #10]
 800365e:	460b      	mov	r3, r1
 8003660:	813b      	strh	r3, [r7, #8]
 8003662:	4613      	mov	r3, r2
 8003664:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  hi2c->Instance->CR1 |= I2C_CR1_START;
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	681a      	ldr	r2, [r3, #0]
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003674:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003676:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003678:	9300      	str	r3, [sp, #0]
 800367a:	6a3b      	ldr	r3, [r7, #32]
 800367c:	2200      	movs	r2, #0
 800367e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003682:	68f8      	ldr	r0, [r7, #12]
 8003684:	f000 f876 	bl	8003774 <I2C_WaitOnFlagUntilTimeout>
 8003688:	4603      	mov	r3, r0
 800368a:	2b00      	cmp	r3, #0
 800368c:	d001      	beq.n	8003692 <I2C_RequestMemoryWrite+0x46>
  {
    return HAL_TIMEOUT;
 800368e:	2303      	movs	r3, #3
 8003690:	e069      	b.n	8003766 <I2C_RequestMemoryWrite+0x11a>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003692:	897b      	ldrh	r3, [r7, #10]
 8003694:	b2db      	uxtb	r3, r3
 8003696:	461a      	mov	r2, r3
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80036a0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80036a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036a4:	6a3a      	ldr	r2, [r7, #32]
 80036a6:	4932      	ldr	r1, [pc, #200]	; (8003770 <I2C_RequestMemoryWrite+0x124>)
 80036a8:	68f8      	ldr	r0, [r7, #12]
 80036aa:	f000 f8b4 	bl	8003816 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80036ae:	4603      	mov	r3, r0
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d007      	beq.n	80036c4 <I2C_RequestMemoryWrite+0x78>
  {
    if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036b8:	2b04      	cmp	r3, #4
 80036ba:	d101      	bne.n	80036c0 <I2C_RequestMemoryWrite+0x74>
    {
      return HAL_ERROR;
 80036bc:	2301      	movs	r3, #1
 80036be:	e052      	b.n	8003766 <I2C_RequestMemoryWrite+0x11a>
    }
    else
    {
      return HAL_TIMEOUT;
 80036c0:	2303      	movs	r3, #3
 80036c2:	e050      	b.n	8003766 <I2C_RequestMemoryWrite+0x11a>
    }
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80036c4:	2300      	movs	r3, #0
 80036c6:	617b      	str	r3, [r7, #20]
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	695b      	ldr	r3, [r3, #20]
 80036ce:	617b      	str	r3, [r7, #20]
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	699b      	ldr	r3, [r3, #24]
 80036d6:	617b      	str	r3, [r7, #20]
 80036d8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80036da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80036dc:	6a39      	ldr	r1, [r7, #32]
 80036de:	68f8      	ldr	r0, [r7, #12]
 80036e0:	f000 f907 	bl	80038f2 <I2C_WaitOnTXEFlagUntilTimeout>
 80036e4:	4603      	mov	r3, r0
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d00f      	beq.n	800370a <I2C_RequestMemoryWrite+0xbe>
  {
    if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036ee:	2b04      	cmp	r3, #4
 80036f0:	d109      	bne.n	8003706 <I2C_RequestMemoryWrite+0xba>
    {
      /* Generate Stop */
      hi2c->Instance->CR1 |= I2C_CR1_STOP;
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	681a      	ldr	r2, [r3, #0]
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003700:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
 8003702:	2301      	movs	r3, #1
 8003704:	e02f      	b.n	8003766 <I2C_RequestMemoryWrite+0x11a>
    }
    else
    {
      return HAL_TIMEOUT;
 8003706:	2303      	movs	r3, #3
 8003708:	e02d      	b.n	8003766 <I2C_RequestMemoryWrite+0x11a>
    }
  }

  /* If Memory address size is 8Bit */
  if(MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800370a:	88fb      	ldrh	r3, [r7, #6]
 800370c:	2b01      	cmp	r3, #1
 800370e:	d105      	bne.n	800371c <I2C_RequestMemoryWrite+0xd0>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003710:	893b      	ldrh	r3, [r7, #8]
 8003712:	b2da      	uxtb	r2, r3
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	611a      	str	r2, [r3, #16]
 800371a:	e023      	b.n	8003764 <I2C_RequestMemoryWrite+0x118>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800371c:	893b      	ldrh	r3, [r7, #8]
 800371e:	0a1b      	lsrs	r3, r3, #8
 8003720:	b29b      	uxth	r3, r3
 8003722:	b2da      	uxtb	r2, r3
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800372a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800372c:	6a39      	ldr	r1, [r7, #32]
 800372e:	68f8      	ldr	r0, [r7, #12]
 8003730:	f000 f8df 	bl	80038f2 <I2C_WaitOnTXEFlagUntilTimeout>
 8003734:	4603      	mov	r3, r0
 8003736:	2b00      	cmp	r3, #0
 8003738:	d00f      	beq.n	800375a <I2C_RequestMemoryWrite+0x10e>
    {
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800373e:	2b04      	cmp	r3, #4
 8003740:	d109      	bne.n	8003756 <I2C_RequestMemoryWrite+0x10a>
      {
        /* Generate Stop */
        hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	681a      	ldr	r2, [r3, #0]
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003750:	601a      	str	r2, [r3, #0]
        return HAL_ERROR;
 8003752:	2301      	movs	r3, #1
 8003754:	e007      	b.n	8003766 <I2C_RequestMemoryWrite+0x11a>
      }
      else
      {
        return HAL_TIMEOUT;
 8003756:	2303      	movs	r3, #3
 8003758:	e005      	b.n	8003766 <I2C_RequestMemoryWrite+0x11a>
      }
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800375a:	893b      	ldrh	r3, [r7, #8]
 800375c:	b2da      	uxtb	r2, r3
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8003764:	2300      	movs	r3, #0
}
 8003766:	4618      	mov	r0, r3
 8003768:	3718      	adds	r7, #24
 800376a:	46bd      	mov	sp, r7
 800376c:	bd80      	pop	{r7, pc}
 800376e:	bf00      	nop
 8003770:	00010002 	.word	0x00010002

08003774 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003774:	b580      	push	{r7, lr}
 8003776:	b084      	sub	sp, #16
 8003778:	af00      	add	r7, sp, #0
 800377a:	60f8      	str	r0, [r7, #12]
 800377c:	60b9      	str	r1, [r7, #8]
 800377e:	603b      	str	r3, [r7, #0]
 8003780:	4613      	mov	r3, r2
 8003782:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while((__HAL_I2C_GET_FLAG(hi2c, Flag) ? SET : RESET) == Status) 
 8003784:	e01f      	b.n	80037c6 <I2C_WaitOnFlagUntilTimeout+0x52>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 8003786:	683b      	ldr	r3, [r7, #0]
 8003788:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800378c:	d01b      	beq.n	80037c6 <I2C_WaitOnFlagUntilTimeout+0x52>
    {
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 800378e:	683b      	ldr	r3, [r7, #0]
 8003790:	2b00      	cmp	r3, #0
 8003792:	d007      	beq.n	80037a4 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003794:	f7fe fcaa 	bl	80020ec <HAL_GetTick>
 8003798:	4602      	mov	r2, r0
 800379a:	69bb      	ldr	r3, [r7, #24]
 800379c:	1ad3      	subs	r3, r2, r3
 800379e:	683a      	ldr	r2, [r7, #0]
 80037a0:	429a      	cmp	r2, r3
 80037a2:	d210      	bcs.n	80037c6 <I2C_WaitOnFlagUntilTimeout+0x52>
      {
        hi2c->PreviousState = I2C_STATE_NONE;
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	2200      	movs	r2, #0
 80037a8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State= HAL_I2C_STATE_READY;
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	2220      	movs	r2, #32
 80037ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	2200      	movs	r2, #0
 80037b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	2200      	movs	r2, #0
 80037be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_TIMEOUT;
 80037c2:	2303      	movs	r3, #3
 80037c4:	e023      	b.n	800380e <I2C_WaitOnFlagUntilTimeout+0x9a>
  while((__HAL_I2C_GET_FLAG(hi2c, Flag) ? SET : RESET) == Status) 
 80037c6:	68bb      	ldr	r3, [r7, #8]
 80037c8:	0c1b      	lsrs	r3, r3, #16
 80037ca:	b2db      	uxtb	r3, r3
 80037cc:	2b01      	cmp	r3, #1
 80037ce:	d10d      	bne.n	80037ec <I2C_WaitOnFlagUntilTimeout+0x78>
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	695b      	ldr	r3, [r3, #20]
 80037d6:	43da      	mvns	r2, r3
 80037d8:	68bb      	ldr	r3, [r7, #8]
 80037da:	4013      	ands	r3, r2
 80037dc:	b29b      	uxth	r3, r3
 80037de:	2b00      	cmp	r3, #0
 80037e0:	bf0c      	ite	eq
 80037e2:	2301      	moveq	r3, #1
 80037e4:	2300      	movne	r3, #0
 80037e6:	b2db      	uxtb	r3, r3
 80037e8:	461a      	mov	r2, r3
 80037ea:	e00c      	b.n	8003806 <I2C_WaitOnFlagUntilTimeout+0x92>
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	699b      	ldr	r3, [r3, #24]
 80037f2:	43da      	mvns	r2, r3
 80037f4:	68bb      	ldr	r3, [r7, #8]
 80037f6:	4013      	ands	r3, r2
 80037f8:	b29b      	uxth	r3, r3
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	bf0c      	ite	eq
 80037fe:	2301      	moveq	r3, #1
 8003800:	2300      	movne	r3, #0
 8003802:	b2db      	uxtb	r3, r3
 8003804:	461a      	mov	r2, r3
 8003806:	79fb      	ldrb	r3, [r7, #7]
 8003808:	429a      	cmp	r2, r3
 800380a:	d0bc      	beq.n	8003786 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  
  return HAL_OK;
 800380c:	2300      	movs	r3, #0
}
 800380e:	4618      	mov	r0, r3
 8003810:	3710      	adds	r7, #16
 8003812:	46bd      	mov	sp, r7
 8003814:	bd80      	pop	{r7, pc}

08003816 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003816:	b580      	push	{r7, lr}
 8003818:	b084      	sub	sp, #16
 800381a:	af00      	add	r7, sp, #0
 800381c:	60f8      	str	r0, [r7, #12]
 800381e:	60b9      	str	r1, [r7, #8]
 8003820:	607a      	str	r2, [r7, #4]
 8003822:	603b      	str	r3, [r7, #0]
  while(__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003824:	e040      	b.n	80038a8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x92>
  {
    if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	695b      	ldr	r3, [r3, #20]
 800382c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003830:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003834:	d11c      	bne.n	8003870 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x5a>
    {
      /* Generate Stop */
      hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	681a      	ldr	r2, [r3, #0]
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003844:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800384e:	615a      	str	r2, [r3, #20]

      hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	2204      	movs	r2, #4
 8003854:	641a      	str	r2, [r3, #64]	; 0x40
      hi2c->PreviousState = I2C_STATE_NONE;
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	2200      	movs	r2, #0
 800385a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State= HAL_I2C_STATE_READY;
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	2220      	movs	r2, #32
 8003860:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	2200      	movs	r2, #0
 8003868:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800386c:	2301      	movs	r3, #1
 800386e:	e03c      	b.n	80038ea <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd4>
    }

    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003876:	d017      	beq.n	80038a8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x92>
    {
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	2b00      	cmp	r3, #0
 800387c:	d007      	beq.n	800388e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x78>
 800387e:	f7fe fc35 	bl	80020ec <HAL_GetTick>
 8003882:	4602      	mov	r2, r0
 8003884:	683b      	ldr	r3, [r7, #0]
 8003886:	1ad3      	subs	r3, r2, r3
 8003888:	687a      	ldr	r2, [r7, #4]
 800388a:	429a      	cmp	r2, r3
 800388c:	d20c      	bcs.n	80038a8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x92>
      {
        hi2c->PreviousState = I2C_STATE_NONE;
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	2200      	movs	r2, #0
 8003892:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State= HAL_I2C_STATE_READY;
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	2220      	movs	r2, #32
 8003898:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	2200      	movs	r2, #0
 80038a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80038a4:	2303      	movs	r3, #3
 80038a6:	e020      	b.n	80038ea <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd4>
  while(__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80038a8:	68bb      	ldr	r3, [r7, #8]
 80038aa:	0c1b      	lsrs	r3, r3, #16
 80038ac:	b2db      	uxtb	r3, r3
 80038ae:	2b01      	cmp	r3, #1
 80038b0:	d10c      	bne.n	80038cc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb6>
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	695b      	ldr	r3, [r3, #20]
 80038b8:	43da      	mvns	r2, r3
 80038ba:	68bb      	ldr	r3, [r7, #8]
 80038bc:	4013      	ands	r3, r2
 80038be:	b29b      	uxth	r3, r3
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	bf14      	ite	ne
 80038c4:	2301      	movne	r3, #1
 80038c6:	2300      	moveq	r3, #0
 80038c8:	b2db      	uxtb	r3, r3
 80038ca:	e00b      	b.n	80038e4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xce>
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	699b      	ldr	r3, [r3, #24]
 80038d2:	43da      	mvns	r2, r3
 80038d4:	68bb      	ldr	r3, [r7, #8]
 80038d6:	4013      	ands	r3, r2
 80038d8:	b29b      	uxth	r3, r3
 80038da:	2b00      	cmp	r3, #0
 80038dc:	bf14      	ite	ne
 80038de:	2301      	movne	r3, #1
 80038e0:	2300      	moveq	r3, #0
 80038e2:	b2db      	uxtb	r3, r3
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d19e      	bne.n	8003826 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80038e8:	2300      	movs	r3, #0
}
 80038ea:	4618      	mov	r0, r3
 80038ec:	3710      	adds	r7, #16
 80038ee:	46bd      	mov	sp, r7
 80038f0:	bd80      	pop	{r7, pc}

080038f2 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{    
 80038f2:	b580      	push	{r7, lr}
 80038f4:	b084      	sub	sp, #16
 80038f6:	af00      	add	r7, sp, #0
 80038f8:	60f8      	str	r0, [r7, #12]
 80038fa:	60b9      	str	r1, [r7, #8]
 80038fc:	607a      	str	r2, [r7, #4]
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80038fe:	e029      	b.n	8003954 <I2C_WaitOnTXEFlagUntilTimeout+0x62>
  {
    /* Check if a NACK is detected */
    if(I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003900:	68f8      	ldr	r0, [r7, #12]
 8003902:	f000 f870 	bl	80039e6 <I2C_IsAcknowledgeFailed>
 8003906:	4603      	mov	r3, r0
 8003908:	2b00      	cmp	r3, #0
 800390a:	d001      	beq.n	8003910 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800390c:	2301      	movs	r3, #1
 800390e:	e029      	b.n	8003964 <I2C_WaitOnTXEFlagUntilTimeout+0x72>
    }
		
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 8003910:	68bb      	ldr	r3, [r7, #8]
 8003912:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003916:	d01d      	beq.n	8003954 <I2C_WaitOnTXEFlagUntilTimeout+0x62>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8003918:	68bb      	ldr	r3, [r7, #8]
 800391a:	2b00      	cmp	r3, #0
 800391c:	d007      	beq.n	800392e <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800391e:	f7fe fbe5 	bl	80020ec <HAL_GetTick>
 8003922:	4602      	mov	r2, r0
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	1ad3      	subs	r3, r2, r3
 8003928:	68ba      	ldr	r2, [r7, #8]
 800392a:	429a      	cmp	r2, r3
 800392c:	d212      	bcs.n	8003954 <I2C_WaitOnTXEFlagUntilTimeout+0x62>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003932:	f043 0220 	orr.w	r2, r3, #32
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	641a      	str	r2, [r3, #64]	; 0x40
        hi2c->PreviousState = I2C_STATE_NONE;
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	2200      	movs	r2, #0
 800393e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State= HAL_I2C_STATE_READY;
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	2220      	movs	r2, #32
 8003944:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	2200      	movs	r2, #0
 800394c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8003950:	2303      	movs	r3, #3
 8003952:	e007      	b.n	8003964 <I2C_WaitOnTXEFlagUntilTimeout+0x72>
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	695b      	ldr	r3, [r3, #20]
 800395a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800395e:	2b80      	cmp	r3, #128	; 0x80
 8003960:	d1ce      	bne.n	8003900 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;      
 8003962:	2300      	movs	r3, #0
}
 8003964:	4618      	mov	r0, r3
 8003966:	3710      	adds	r7, #16
 8003968:	46bd      	mov	sp, r7
 800396a:	bd80      	pop	{r7, pc}

0800396c <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{  
 800396c:	b580      	push	{r7, lr}
 800396e:	b084      	sub	sp, #16
 8003970:	af00      	add	r7, sp, #0
 8003972:	60f8      	str	r0, [r7, #12]
 8003974:	60b9      	str	r1, [r7, #8]
 8003976:	607a      	str	r2, [r7, #4]
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003978:	e029      	b.n	80039ce <I2C_WaitOnBTFFlagUntilTimeout+0x62>
  {
    /* Check if a NACK is detected */
    if(I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800397a:	68f8      	ldr	r0, [r7, #12]
 800397c:	f000 f833 	bl	80039e6 <I2C_IsAcknowledgeFailed>
 8003980:	4603      	mov	r3, r0
 8003982:	2b00      	cmp	r3, #0
 8003984:	d001      	beq.n	800398a <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003986:	2301      	movs	r3, #1
 8003988:	e029      	b.n	80039de <I2C_WaitOnBTFFlagUntilTimeout+0x72>
    }

    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 800398a:	68bb      	ldr	r3, [r7, #8]
 800398c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003990:	d01d      	beq.n	80039ce <I2C_WaitOnBTFFlagUntilTimeout+0x62>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8003992:	68bb      	ldr	r3, [r7, #8]
 8003994:	2b00      	cmp	r3, #0
 8003996:	d007      	beq.n	80039a8 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003998:	f7fe fba8 	bl	80020ec <HAL_GetTick>
 800399c:	4602      	mov	r2, r0
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	1ad3      	subs	r3, r2, r3
 80039a2:	68ba      	ldr	r2, [r7, #8]
 80039a4:	429a      	cmp	r2, r3
 80039a6:	d212      	bcs.n	80039ce <I2C_WaitOnBTFFlagUntilTimeout+0x62>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039ac:	f043 0220 	orr.w	r2, r3, #32
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	641a      	str	r2, [r3, #64]	; 0x40
        hi2c->PreviousState = I2C_STATE_NONE;
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	2200      	movs	r2, #0
 80039b8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State= HAL_I2C_STATE_READY;
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	2220      	movs	r2, #32
 80039be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	2200      	movs	r2, #0
 80039c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80039ca:	2303      	movs	r3, #3
 80039cc:	e007      	b.n	80039de <I2C_WaitOnBTFFlagUntilTimeout+0x72>
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	695b      	ldr	r3, [r3, #20]
 80039d4:	f003 0304 	and.w	r3, r3, #4
 80039d8:	2b04      	cmp	r3, #4
 80039da:	d1ce      	bne.n	800397a <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80039dc:	2300      	movs	r3, #0
}
 80039de:	4618      	mov	r0, r3
 80039e0:	3710      	adds	r7, #16
 80039e2:	46bd      	mov	sp, r7
 80039e4:	bd80      	pop	{r7, pc}

080039e6 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80039e6:	b480      	push	{r7}
 80039e8:	b083      	sub	sp, #12
 80039ea:	af00      	add	r7, sp, #0
 80039ec:	6078      	str	r0, [r7, #4]
  if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	695b      	ldr	r3, [r3, #20]
 80039f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80039f8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80039fc:	d114      	bne.n	8003a28 <I2C_IsAcknowledgeFailed+0x42>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003a06:	615a      	str	r2, [r3, #20]

    hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	2204      	movs	r2, #4
 8003a0c:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->PreviousState = I2C_STATE_NONE;
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	2200      	movs	r2, #0
 8003a12:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State= HAL_I2C_STATE_READY;
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	2220      	movs	r2, #32
 8003a18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	2200      	movs	r2, #0
 8003a20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003a24:	2301      	movs	r3, #1
 8003a26:	e000      	b.n	8003a2a <I2C_IsAcknowledgeFailed+0x44>
  }
  return HAL_OK;
 8003a28:	2300      	movs	r3, #0
}
 8003a2a:	4618      	mov	r0, r3
 8003a2c:	370c      	adds	r7, #12
 8003a2e:	46bd      	mov	sp, r7
 8003a30:	bc80      	pop	{r7}
 8003a32:	4770      	bx	lr

08003a34 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003a34:	b580      	push	{r7, lr}
 8003a36:	b086      	sub	sp, #24
 8003a38:	af00      	add	r7, sp, #0
 8003a3a:	6078      	str	r0, [r7, #4]
   uint32_t tickstart = 0U;
 8003a3c:	2300      	movs	r3, #0
 8003a3e:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  
  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	f003 0301 	and.w	r3, r3, #1
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	f000 8087 	beq.w	8003b5c <HAL_RCC_OscConfig+0x128>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
        
    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8003a4e:	4b92      	ldr	r3, [pc, #584]	; (8003c98 <HAL_RCC_OscConfig+0x264>)
 8003a50:	685b      	ldr	r3, [r3, #4]
 8003a52:	f003 030c 	and.w	r3, r3, #12
 8003a56:	2b04      	cmp	r3, #4
 8003a58:	d00c      	beq.n	8003a74 <HAL_RCC_OscConfig+0x40>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003a5a:	4b8f      	ldr	r3, [pc, #572]	; (8003c98 <HAL_RCC_OscConfig+0x264>)
 8003a5c:	685b      	ldr	r3, [r3, #4]
 8003a5e:	f003 030c 	and.w	r3, r3, #12
 8003a62:	2b08      	cmp	r3, #8
 8003a64:	d112      	bne.n	8003a8c <HAL_RCC_OscConfig+0x58>
 8003a66:	4b8c      	ldr	r3, [pc, #560]	; (8003c98 <HAL_RCC_OscConfig+0x264>)
 8003a68:	685b      	ldr	r3, [r3, #4]
 8003a6a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003a6e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a72:	d10b      	bne.n	8003a8c <HAL_RCC_OscConfig+0x58>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a74:	4b88      	ldr	r3, [pc, #544]	; (8003c98 <HAL_RCC_OscConfig+0x264>)
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d06c      	beq.n	8003b5a <HAL_RCC_OscConfig+0x126>
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	685b      	ldr	r3, [r3, #4]
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d168      	bne.n	8003b5a <HAL_RCC_OscConfig+0x126>
      {
        return HAL_ERROR;
 8003a88:	2301      	movs	r3, #1
 8003a8a:	e22d      	b.n	8003ee8 <HAL_RCC_OscConfig+0x4b4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	685b      	ldr	r3, [r3, #4]
 8003a90:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a94:	d106      	bne.n	8003aa4 <HAL_RCC_OscConfig+0x70>
 8003a96:	4b80      	ldr	r3, [pc, #512]	; (8003c98 <HAL_RCC_OscConfig+0x264>)
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	4a7f      	ldr	r2, [pc, #508]	; (8003c98 <HAL_RCC_OscConfig+0x264>)
 8003a9c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003aa0:	6013      	str	r3, [r2, #0]
 8003aa2:	e02e      	b.n	8003b02 <HAL_RCC_OscConfig+0xce>
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	685b      	ldr	r3, [r3, #4]
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d10c      	bne.n	8003ac6 <HAL_RCC_OscConfig+0x92>
 8003aac:	4b7a      	ldr	r3, [pc, #488]	; (8003c98 <HAL_RCC_OscConfig+0x264>)
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	4a79      	ldr	r2, [pc, #484]	; (8003c98 <HAL_RCC_OscConfig+0x264>)
 8003ab2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003ab6:	6013      	str	r3, [r2, #0]
 8003ab8:	4b77      	ldr	r3, [pc, #476]	; (8003c98 <HAL_RCC_OscConfig+0x264>)
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	4a76      	ldr	r2, [pc, #472]	; (8003c98 <HAL_RCC_OscConfig+0x264>)
 8003abe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003ac2:	6013      	str	r3, [r2, #0]
 8003ac4:	e01d      	b.n	8003b02 <HAL_RCC_OscConfig+0xce>
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	685b      	ldr	r3, [r3, #4]
 8003aca:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003ace:	d10c      	bne.n	8003aea <HAL_RCC_OscConfig+0xb6>
 8003ad0:	4b71      	ldr	r3, [pc, #452]	; (8003c98 <HAL_RCC_OscConfig+0x264>)
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	4a70      	ldr	r2, [pc, #448]	; (8003c98 <HAL_RCC_OscConfig+0x264>)
 8003ad6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003ada:	6013      	str	r3, [r2, #0]
 8003adc:	4b6e      	ldr	r3, [pc, #440]	; (8003c98 <HAL_RCC_OscConfig+0x264>)
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	4a6d      	ldr	r2, [pc, #436]	; (8003c98 <HAL_RCC_OscConfig+0x264>)
 8003ae2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ae6:	6013      	str	r3, [r2, #0]
 8003ae8:	e00b      	b.n	8003b02 <HAL_RCC_OscConfig+0xce>
 8003aea:	4b6b      	ldr	r3, [pc, #428]	; (8003c98 <HAL_RCC_OscConfig+0x264>)
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	4a6a      	ldr	r2, [pc, #424]	; (8003c98 <HAL_RCC_OscConfig+0x264>)
 8003af0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003af4:	6013      	str	r3, [r2, #0]
 8003af6:	4b68      	ldr	r3, [pc, #416]	; (8003c98 <HAL_RCC_OscConfig+0x264>)
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	4a67      	ldr	r2, [pc, #412]	; (8003c98 <HAL_RCC_OscConfig+0x264>)
 8003afc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003b00:	6013      	str	r3, [r2, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	685b      	ldr	r3, [r3, #4]
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d013      	beq.n	8003b32 <HAL_RCC_OscConfig+0xfe>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b0a:	f7fe faef 	bl	80020ec <HAL_GetTick>
 8003b0e:	6138      	str	r0, [r7, #16]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b10:	e008      	b.n	8003b24 <HAL_RCC_OscConfig+0xf0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003b12:	f7fe faeb 	bl	80020ec <HAL_GetTick>
 8003b16:	4602      	mov	r2, r0
 8003b18:	693b      	ldr	r3, [r7, #16]
 8003b1a:	1ad3      	subs	r3, r2, r3
 8003b1c:	2b64      	cmp	r3, #100	; 0x64
 8003b1e:	d901      	bls.n	8003b24 <HAL_RCC_OscConfig+0xf0>
          {
            return HAL_TIMEOUT;
 8003b20:	2303      	movs	r3, #3
 8003b22:	e1e1      	b.n	8003ee8 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b24:	4b5c      	ldr	r3, [pc, #368]	; (8003c98 <HAL_RCC_OscConfig+0x264>)
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d0f0      	beq.n	8003b12 <HAL_RCC_OscConfig+0xde>
 8003b30:	e014      	b.n	8003b5c <HAL_RCC_OscConfig+0x128>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b32:	f7fe fadb 	bl	80020ec <HAL_GetTick>
 8003b36:	6138      	str	r0, [r7, #16]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003b38:	e008      	b.n	8003b4c <HAL_RCC_OscConfig+0x118>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003b3a:	f7fe fad7 	bl	80020ec <HAL_GetTick>
 8003b3e:	4602      	mov	r2, r0
 8003b40:	693b      	ldr	r3, [r7, #16]
 8003b42:	1ad3      	subs	r3, r2, r3
 8003b44:	2b64      	cmp	r3, #100	; 0x64
 8003b46:	d901      	bls.n	8003b4c <HAL_RCC_OscConfig+0x118>
          {
            return HAL_TIMEOUT;
 8003b48:	2303      	movs	r3, #3
 8003b4a:	e1cd      	b.n	8003ee8 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003b4c:	4b52      	ldr	r3, [pc, #328]	; (8003c98 <HAL_RCC_OscConfig+0x264>)
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d1f0      	bne.n	8003b3a <HAL_RCC_OscConfig+0x106>
 8003b58:	e000      	b.n	8003b5c <HAL_RCC_OscConfig+0x128>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b5a:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	f003 0302 	and.w	r3, r3, #2
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d063      	beq.n	8003c30 <HAL_RCC_OscConfig+0x1fc>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8003b68:	4b4b      	ldr	r3, [pc, #300]	; (8003c98 <HAL_RCC_OscConfig+0x264>)
 8003b6a:	685b      	ldr	r3, [r3, #4]
 8003b6c:	f003 030c 	and.w	r3, r3, #12
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d00b      	beq.n	8003b8c <HAL_RCC_OscConfig+0x158>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003b74:	4b48      	ldr	r3, [pc, #288]	; (8003c98 <HAL_RCC_OscConfig+0x264>)
 8003b76:	685b      	ldr	r3, [r3, #4]
 8003b78:	f003 030c 	and.w	r3, r3, #12
 8003b7c:	2b08      	cmp	r3, #8
 8003b7e:	d11c      	bne.n	8003bba <HAL_RCC_OscConfig+0x186>
 8003b80:	4b45      	ldr	r3, [pc, #276]	; (8003c98 <HAL_RCC_OscConfig+0x264>)
 8003b82:	685b      	ldr	r3, [r3, #4]
 8003b84:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d116      	bne.n	8003bba <HAL_RCC_OscConfig+0x186>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003b8c:	4b42      	ldr	r3, [pc, #264]	; (8003c98 <HAL_RCC_OscConfig+0x264>)
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	f003 0302 	and.w	r3, r3, #2
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d005      	beq.n	8003ba4 <HAL_RCC_OscConfig+0x170>
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	691b      	ldr	r3, [r3, #16]
 8003b9c:	2b01      	cmp	r3, #1
 8003b9e:	d001      	beq.n	8003ba4 <HAL_RCC_OscConfig+0x170>
      {
        return HAL_ERROR;
 8003ba0:	2301      	movs	r3, #1
 8003ba2:	e1a1      	b.n	8003ee8 <HAL_RCC_OscConfig+0x4b4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ba4:	4b3c      	ldr	r3, [pc, #240]	; (8003c98 <HAL_RCC_OscConfig+0x264>)
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	695b      	ldr	r3, [r3, #20]
 8003bb0:	00db      	lsls	r3, r3, #3
 8003bb2:	4939      	ldr	r1, [pc, #228]	; (8003c98 <HAL_RCC_OscConfig+0x264>)
 8003bb4:	4313      	orrs	r3, r2
 8003bb6:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003bb8:	e03a      	b.n	8003c30 <HAL_RCC_OscConfig+0x1fc>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	691b      	ldr	r3, [r3, #16]
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d020      	beq.n	8003c04 <HAL_RCC_OscConfig+0x1d0>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003bc2:	4b36      	ldr	r3, [pc, #216]	; (8003c9c <HAL_RCC_OscConfig+0x268>)
 8003bc4:	2201      	movs	r2, #1
 8003bc6:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003bc8:	f7fe fa90 	bl	80020ec <HAL_GetTick>
 8003bcc:	6138      	str	r0, [r7, #16]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003bce:	e008      	b.n	8003be2 <HAL_RCC_OscConfig+0x1ae>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003bd0:	f7fe fa8c 	bl	80020ec <HAL_GetTick>
 8003bd4:	4602      	mov	r2, r0
 8003bd6:	693b      	ldr	r3, [r7, #16]
 8003bd8:	1ad3      	subs	r3, r2, r3
 8003bda:	2b02      	cmp	r3, #2
 8003bdc:	d901      	bls.n	8003be2 <HAL_RCC_OscConfig+0x1ae>
          {
            return HAL_TIMEOUT;
 8003bde:	2303      	movs	r3, #3
 8003be0:	e182      	b.n	8003ee8 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003be2:	4b2d      	ldr	r3, [pc, #180]	; (8003c98 <HAL_RCC_OscConfig+0x264>)
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	f003 0302 	and.w	r3, r3, #2
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d0f0      	beq.n	8003bd0 <HAL_RCC_OscConfig+0x19c>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003bee:	4b2a      	ldr	r3, [pc, #168]	; (8003c98 <HAL_RCC_OscConfig+0x264>)
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	695b      	ldr	r3, [r3, #20]
 8003bfa:	00db      	lsls	r3, r3, #3
 8003bfc:	4926      	ldr	r1, [pc, #152]	; (8003c98 <HAL_RCC_OscConfig+0x264>)
 8003bfe:	4313      	orrs	r3, r2
 8003c00:	600b      	str	r3, [r1, #0]
 8003c02:	e015      	b.n	8003c30 <HAL_RCC_OscConfig+0x1fc>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003c04:	4b25      	ldr	r3, [pc, #148]	; (8003c9c <HAL_RCC_OscConfig+0x268>)
 8003c06:	2200      	movs	r2, #0
 8003c08:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c0a:	f7fe fa6f 	bl	80020ec <HAL_GetTick>
 8003c0e:	6138      	str	r0, [r7, #16]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003c10:	e008      	b.n	8003c24 <HAL_RCC_OscConfig+0x1f0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003c12:	f7fe fa6b 	bl	80020ec <HAL_GetTick>
 8003c16:	4602      	mov	r2, r0
 8003c18:	693b      	ldr	r3, [r7, #16]
 8003c1a:	1ad3      	subs	r3, r2, r3
 8003c1c:	2b02      	cmp	r3, #2
 8003c1e:	d901      	bls.n	8003c24 <HAL_RCC_OscConfig+0x1f0>
          {
            return HAL_TIMEOUT;
 8003c20:	2303      	movs	r3, #3
 8003c22:	e161      	b.n	8003ee8 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003c24:	4b1c      	ldr	r3, [pc, #112]	; (8003c98 <HAL_RCC_OscConfig+0x264>)
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	f003 0302 	and.w	r3, r3, #2
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d1f0      	bne.n	8003c12 <HAL_RCC_OscConfig+0x1de>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	f003 0308 	and.w	r3, r3, #8
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d039      	beq.n	8003cb0 <HAL_RCC_OscConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	699b      	ldr	r3, [r3, #24]
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d019      	beq.n	8003c78 <HAL_RCC_OscConfig+0x244>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003c44:	4b16      	ldr	r3, [pc, #88]	; (8003ca0 <HAL_RCC_OscConfig+0x26c>)
 8003c46:	2201      	movs	r2, #1
 8003c48:	601a      	str	r2, [r3, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003c4a:	f7fe fa4f 	bl	80020ec <HAL_GetTick>
 8003c4e:	6138      	str	r0, [r7, #16]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003c50:	e008      	b.n	8003c64 <HAL_RCC_OscConfig+0x230>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003c52:	f7fe fa4b 	bl	80020ec <HAL_GetTick>
 8003c56:	4602      	mov	r2, r0
 8003c58:	693b      	ldr	r3, [r7, #16]
 8003c5a:	1ad3      	subs	r3, r2, r3
 8003c5c:	2b02      	cmp	r3, #2
 8003c5e:	d901      	bls.n	8003c64 <HAL_RCC_OscConfig+0x230>
        {
          return HAL_TIMEOUT;
 8003c60:	2303      	movs	r3, #3
 8003c62:	e141      	b.n	8003ee8 <HAL_RCC_OscConfig+0x4b4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003c64:	4b0c      	ldr	r3, [pc, #48]	; (8003c98 <HAL_RCC_OscConfig+0x264>)
 8003c66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c68:	f003 0302 	and.w	r3, r3, #2
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d0f0      	beq.n	8003c52 <HAL_RCC_OscConfig+0x21e>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms 
          should be added.*/
      RCC_Delay(1);
 8003c70:	2001      	movs	r0, #1
 8003c72:	f000 fab7 	bl	80041e4 <RCC_Delay>
 8003c76:	e01b      	b.n	8003cb0 <HAL_RCC_OscConfig+0x27c>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003c78:	4b09      	ldr	r3, [pc, #36]	; (8003ca0 <HAL_RCC_OscConfig+0x26c>)
 8003c7a:	2200      	movs	r2, #0
 8003c7c:	601a      	str	r2, [r3, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003c7e:	f7fe fa35 	bl	80020ec <HAL_GetTick>
 8003c82:	6138      	str	r0, [r7, #16]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003c84:	e00e      	b.n	8003ca4 <HAL_RCC_OscConfig+0x270>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003c86:	f7fe fa31 	bl	80020ec <HAL_GetTick>
 8003c8a:	4602      	mov	r2, r0
 8003c8c:	693b      	ldr	r3, [r7, #16]
 8003c8e:	1ad3      	subs	r3, r2, r3
 8003c90:	2b02      	cmp	r3, #2
 8003c92:	d907      	bls.n	8003ca4 <HAL_RCC_OscConfig+0x270>
        {
          return HAL_TIMEOUT;
 8003c94:	2303      	movs	r3, #3
 8003c96:	e127      	b.n	8003ee8 <HAL_RCC_OscConfig+0x4b4>
 8003c98:	40021000 	.word	0x40021000
 8003c9c:	42420000 	.word	0x42420000
 8003ca0:	42420480 	.word	0x42420480
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003ca4:	4b92      	ldr	r3, [pc, #584]	; (8003ef0 <HAL_RCC_OscConfig+0x4bc>)
 8003ca6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ca8:	f003 0302 	and.w	r3, r3, #2
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d1ea      	bne.n	8003c86 <HAL_RCC_OscConfig+0x252>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	f003 0304 	and.w	r3, r3, #4
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	f000 80a6 	beq.w	8003e0a <HAL_RCC_OscConfig+0x3d6>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003cbe:	2300      	movs	r3, #0
 8003cc0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003cc2:	4b8b      	ldr	r3, [pc, #556]	; (8003ef0 <HAL_RCC_OscConfig+0x4bc>)
 8003cc4:	69db      	ldr	r3, [r3, #28]
 8003cc6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d10d      	bne.n	8003cea <HAL_RCC_OscConfig+0x2b6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003cce:	4b88      	ldr	r3, [pc, #544]	; (8003ef0 <HAL_RCC_OscConfig+0x4bc>)
 8003cd0:	69db      	ldr	r3, [r3, #28]
 8003cd2:	4a87      	ldr	r2, [pc, #540]	; (8003ef0 <HAL_RCC_OscConfig+0x4bc>)
 8003cd4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003cd8:	61d3      	str	r3, [r2, #28]
 8003cda:	4b85      	ldr	r3, [pc, #532]	; (8003ef0 <HAL_RCC_OscConfig+0x4bc>)
 8003cdc:	69db      	ldr	r3, [r3, #28]
 8003cde:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ce2:	60fb      	str	r3, [r7, #12]
 8003ce4:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8003ce6:	2301      	movs	r3, #1
 8003ce8:	75fb      	strb	r3, [r7, #23]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003cea:	4b82      	ldr	r3, [pc, #520]	; (8003ef4 <HAL_RCC_OscConfig+0x4c0>)
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d118      	bne.n	8003d28 <HAL_RCC_OscConfig+0x2f4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003cf6:	4b7f      	ldr	r3, [pc, #508]	; (8003ef4 <HAL_RCC_OscConfig+0x4c0>)
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	4a7e      	ldr	r2, [pc, #504]	; (8003ef4 <HAL_RCC_OscConfig+0x4c0>)
 8003cfc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003d00:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003d02:	f7fe f9f3 	bl	80020ec <HAL_GetTick>
 8003d06:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d08:	e008      	b.n	8003d1c <HAL_RCC_OscConfig+0x2e8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003d0a:	f7fe f9ef 	bl	80020ec <HAL_GetTick>
 8003d0e:	4602      	mov	r2, r0
 8003d10:	693b      	ldr	r3, [r7, #16]
 8003d12:	1ad3      	subs	r3, r2, r3
 8003d14:	2b64      	cmp	r3, #100	; 0x64
 8003d16:	d901      	bls.n	8003d1c <HAL_RCC_OscConfig+0x2e8>
        {
          return HAL_TIMEOUT;
 8003d18:	2303      	movs	r3, #3
 8003d1a:	e0e5      	b.n	8003ee8 <HAL_RCC_OscConfig+0x4b4>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d1c:	4b75      	ldr	r3, [pc, #468]	; (8003ef4 <HAL_RCC_OscConfig+0x4c0>)
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d0f0      	beq.n	8003d0a <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	68db      	ldr	r3, [r3, #12]
 8003d2c:	2b01      	cmp	r3, #1
 8003d2e:	d106      	bne.n	8003d3e <HAL_RCC_OscConfig+0x30a>
 8003d30:	4b6f      	ldr	r3, [pc, #444]	; (8003ef0 <HAL_RCC_OscConfig+0x4bc>)
 8003d32:	6a1b      	ldr	r3, [r3, #32]
 8003d34:	4a6e      	ldr	r2, [pc, #440]	; (8003ef0 <HAL_RCC_OscConfig+0x4bc>)
 8003d36:	f043 0301 	orr.w	r3, r3, #1
 8003d3a:	6213      	str	r3, [r2, #32]
 8003d3c:	e02d      	b.n	8003d9a <HAL_RCC_OscConfig+0x366>
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	68db      	ldr	r3, [r3, #12]
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d10c      	bne.n	8003d60 <HAL_RCC_OscConfig+0x32c>
 8003d46:	4b6a      	ldr	r3, [pc, #424]	; (8003ef0 <HAL_RCC_OscConfig+0x4bc>)
 8003d48:	6a1b      	ldr	r3, [r3, #32]
 8003d4a:	4a69      	ldr	r2, [pc, #420]	; (8003ef0 <HAL_RCC_OscConfig+0x4bc>)
 8003d4c:	f023 0301 	bic.w	r3, r3, #1
 8003d50:	6213      	str	r3, [r2, #32]
 8003d52:	4b67      	ldr	r3, [pc, #412]	; (8003ef0 <HAL_RCC_OscConfig+0x4bc>)
 8003d54:	6a1b      	ldr	r3, [r3, #32]
 8003d56:	4a66      	ldr	r2, [pc, #408]	; (8003ef0 <HAL_RCC_OscConfig+0x4bc>)
 8003d58:	f023 0304 	bic.w	r3, r3, #4
 8003d5c:	6213      	str	r3, [r2, #32]
 8003d5e:	e01c      	b.n	8003d9a <HAL_RCC_OscConfig+0x366>
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	68db      	ldr	r3, [r3, #12]
 8003d64:	2b05      	cmp	r3, #5
 8003d66:	d10c      	bne.n	8003d82 <HAL_RCC_OscConfig+0x34e>
 8003d68:	4b61      	ldr	r3, [pc, #388]	; (8003ef0 <HAL_RCC_OscConfig+0x4bc>)
 8003d6a:	6a1b      	ldr	r3, [r3, #32]
 8003d6c:	4a60      	ldr	r2, [pc, #384]	; (8003ef0 <HAL_RCC_OscConfig+0x4bc>)
 8003d6e:	f043 0304 	orr.w	r3, r3, #4
 8003d72:	6213      	str	r3, [r2, #32]
 8003d74:	4b5e      	ldr	r3, [pc, #376]	; (8003ef0 <HAL_RCC_OscConfig+0x4bc>)
 8003d76:	6a1b      	ldr	r3, [r3, #32]
 8003d78:	4a5d      	ldr	r2, [pc, #372]	; (8003ef0 <HAL_RCC_OscConfig+0x4bc>)
 8003d7a:	f043 0301 	orr.w	r3, r3, #1
 8003d7e:	6213      	str	r3, [r2, #32]
 8003d80:	e00b      	b.n	8003d9a <HAL_RCC_OscConfig+0x366>
 8003d82:	4b5b      	ldr	r3, [pc, #364]	; (8003ef0 <HAL_RCC_OscConfig+0x4bc>)
 8003d84:	6a1b      	ldr	r3, [r3, #32]
 8003d86:	4a5a      	ldr	r2, [pc, #360]	; (8003ef0 <HAL_RCC_OscConfig+0x4bc>)
 8003d88:	f023 0301 	bic.w	r3, r3, #1
 8003d8c:	6213      	str	r3, [r2, #32]
 8003d8e:	4b58      	ldr	r3, [pc, #352]	; (8003ef0 <HAL_RCC_OscConfig+0x4bc>)
 8003d90:	6a1b      	ldr	r3, [r3, #32]
 8003d92:	4a57      	ldr	r2, [pc, #348]	; (8003ef0 <HAL_RCC_OscConfig+0x4bc>)
 8003d94:	f023 0304 	bic.w	r3, r3, #4
 8003d98:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	68db      	ldr	r3, [r3, #12]
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d015      	beq.n	8003dce <HAL_RCC_OscConfig+0x39a>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003da2:	f7fe f9a3 	bl	80020ec <HAL_GetTick>
 8003da6:	6138      	str	r0, [r7, #16]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003da8:	e00a      	b.n	8003dc0 <HAL_RCC_OscConfig+0x38c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003daa:	f7fe f99f 	bl	80020ec <HAL_GetTick>
 8003dae:	4602      	mov	r2, r0
 8003db0:	693b      	ldr	r3, [r7, #16]
 8003db2:	1ad3      	subs	r3, r2, r3
 8003db4:	f241 3288 	movw	r2, #5000	; 0x1388
 8003db8:	4293      	cmp	r3, r2
 8003dba:	d901      	bls.n	8003dc0 <HAL_RCC_OscConfig+0x38c>
        {
          return HAL_TIMEOUT;
 8003dbc:	2303      	movs	r3, #3
 8003dbe:	e093      	b.n	8003ee8 <HAL_RCC_OscConfig+0x4b4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003dc0:	4b4b      	ldr	r3, [pc, #300]	; (8003ef0 <HAL_RCC_OscConfig+0x4bc>)
 8003dc2:	6a1b      	ldr	r3, [r3, #32]
 8003dc4:	f003 0302 	and.w	r3, r3, #2
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d0ee      	beq.n	8003daa <HAL_RCC_OscConfig+0x376>
 8003dcc:	e014      	b.n	8003df8 <HAL_RCC_OscConfig+0x3c4>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003dce:	f7fe f98d 	bl	80020ec <HAL_GetTick>
 8003dd2:	6138      	str	r0, [r7, #16]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003dd4:	e00a      	b.n	8003dec <HAL_RCC_OscConfig+0x3b8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003dd6:	f7fe f989 	bl	80020ec <HAL_GetTick>
 8003dda:	4602      	mov	r2, r0
 8003ddc:	693b      	ldr	r3, [r7, #16]
 8003dde:	1ad3      	subs	r3, r2, r3
 8003de0:	f241 3288 	movw	r2, #5000	; 0x1388
 8003de4:	4293      	cmp	r3, r2
 8003de6:	d901      	bls.n	8003dec <HAL_RCC_OscConfig+0x3b8>
        {
          return HAL_TIMEOUT;
 8003de8:	2303      	movs	r3, #3
 8003dea:	e07d      	b.n	8003ee8 <HAL_RCC_OscConfig+0x4b4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003dec:	4b40      	ldr	r3, [pc, #256]	; (8003ef0 <HAL_RCC_OscConfig+0x4bc>)
 8003dee:	6a1b      	ldr	r3, [r3, #32]
 8003df0:	f003 0302 	and.w	r3, r3, #2
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d1ee      	bne.n	8003dd6 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003df8:	7dfb      	ldrb	r3, [r7, #23]
 8003dfa:	2b01      	cmp	r3, #1
 8003dfc:	d105      	bne.n	8003e0a <HAL_RCC_OscConfig+0x3d6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003dfe:	4b3c      	ldr	r3, [pc, #240]	; (8003ef0 <HAL_RCC_OscConfig+0x4bc>)
 8003e00:	69db      	ldr	r3, [r3, #28]
 8003e02:	4a3b      	ldr	r2, [pc, #236]	; (8003ef0 <HAL_RCC_OscConfig+0x4bc>)
 8003e04:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003e08:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	69db      	ldr	r3, [r3, #28]
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d069      	beq.n	8003ee6 <HAL_RCC_OscConfig+0x4b2>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003e12:	4b37      	ldr	r3, [pc, #220]	; (8003ef0 <HAL_RCC_OscConfig+0x4bc>)
 8003e14:	685b      	ldr	r3, [r3, #4]
 8003e16:	f003 030c 	and.w	r3, r3, #12
 8003e1a:	2b08      	cmp	r3, #8
 8003e1c:	d061      	beq.n	8003ee2 <HAL_RCC_OscConfig+0x4ae>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	69db      	ldr	r3, [r3, #28]
 8003e22:	2b02      	cmp	r3, #2
 8003e24:	d146      	bne.n	8003eb4 <HAL_RCC_OscConfig+0x480>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003e26:	4b34      	ldr	r3, [pc, #208]	; (8003ef8 <HAL_RCC_OscConfig+0x4c4>)
 8003e28:	2200      	movs	r2, #0
 8003e2a:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e2c:	f7fe f95e 	bl	80020ec <HAL_GetTick>
 8003e30:	6138      	str	r0, [r7, #16]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003e32:	e008      	b.n	8003e46 <HAL_RCC_OscConfig+0x412>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003e34:	f7fe f95a 	bl	80020ec <HAL_GetTick>
 8003e38:	4602      	mov	r2, r0
 8003e3a:	693b      	ldr	r3, [r7, #16]
 8003e3c:	1ad3      	subs	r3, r2, r3
 8003e3e:	2b02      	cmp	r3, #2
 8003e40:	d901      	bls.n	8003e46 <HAL_RCC_OscConfig+0x412>
          {
            return HAL_TIMEOUT;
 8003e42:	2303      	movs	r3, #3
 8003e44:	e050      	b.n	8003ee8 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003e46:	4b2a      	ldr	r3, [pc, #168]	; (8003ef0 <HAL_RCC_OscConfig+0x4bc>)
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d1f0      	bne.n	8003e34 <HAL_RCC_OscConfig+0x400>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if(RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	6a1b      	ldr	r3, [r3, #32]
 8003e56:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003e5a:	d108      	bne.n	8003e6e <HAL_RCC_OscConfig+0x43a>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003e5c:	4b24      	ldr	r3, [pc, #144]	; (8003ef0 <HAL_RCC_OscConfig+0x4bc>)
 8003e5e:	685b      	ldr	r3, [r3, #4]
 8003e60:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	689b      	ldr	r3, [r3, #8]
 8003e68:	4921      	ldr	r1, [pc, #132]	; (8003ef0 <HAL_RCC_OscConfig+0x4bc>)
 8003e6a:	4313      	orrs	r3, r2
 8003e6c:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003e6e:	4b20      	ldr	r3, [pc, #128]	; (8003ef0 <HAL_RCC_OscConfig+0x4bc>)
 8003e70:	685b      	ldr	r3, [r3, #4]
 8003e72:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	6a19      	ldr	r1, [r3, #32]
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e7e:	430b      	orrs	r3, r1
 8003e80:	491b      	ldr	r1, [pc, #108]	; (8003ef0 <HAL_RCC_OscConfig+0x4bc>)
 8003e82:	4313      	orrs	r3, r2
 8003e84:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003e86:	4b1c      	ldr	r3, [pc, #112]	; (8003ef8 <HAL_RCC_OscConfig+0x4c4>)
 8003e88:	2201      	movs	r2, #1
 8003e8a:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e8c:	f7fe f92e 	bl	80020ec <HAL_GetTick>
 8003e90:	6138      	str	r0, [r7, #16]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003e92:	e008      	b.n	8003ea6 <HAL_RCC_OscConfig+0x472>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003e94:	f7fe f92a 	bl	80020ec <HAL_GetTick>
 8003e98:	4602      	mov	r2, r0
 8003e9a:	693b      	ldr	r3, [r7, #16]
 8003e9c:	1ad3      	subs	r3, r2, r3
 8003e9e:	2b02      	cmp	r3, #2
 8003ea0:	d901      	bls.n	8003ea6 <HAL_RCC_OscConfig+0x472>
          {
            return HAL_TIMEOUT;
 8003ea2:	2303      	movs	r3, #3
 8003ea4:	e020      	b.n	8003ee8 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003ea6:	4b12      	ldr	r3, [pc, #72]	; (8003ef0 <HAL_RCC_OscConfig+0x4bc>)
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d0f0      	beq.n	8003e94 <HAL_RCC_OscConfig+0x460>
 8003eb2:	e018      	b.n	8003ee6 <HAL_RCC_OscConfig+0x4b2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003eb4:	4b10      	ldr	r3, [pc, #64]	; (8003ef8 <HAL_RCC_OscConfig+0x4c4>)
 8003eb6:	2200      	movs	r2, #0
 8003eb8:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003eba:	f7fe f917 	bl	80020ec <HAL_GetTick>
 8003ebe:	6138      	str	r0, [r7, #16]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003ec0:	e008      	b.n	8003ed4 <HAL_RCC_OscConfig+0x4a0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003ec2:	f7fe f913 	bl	80020ec <HAL_GetTick>
 8003ec6:	4602      	mov	r2, r0
 8003ec8:	693b      	ldr	r3, [r7, #16]
 8003eca:	1ad3      	subs	r3, r2, r3
 8003ecc:	2b02      	cmp	r3, #2
 8003ece:	d901      	bls.n	8003ed4 <HAL_RCC_OscConfig+0x4a0>
          {
            return HAL_TIMEOUT;
 8003ed0:	2303      	movs	r3, #3
 8003ed2:	e009      	b.n	8003ee8 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003ed4:	4b06      	ldr	r3, [pc, #24]	; (8003ef0 <HAL_RCC_OscConfig+0x4bc>)
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d1f0      	bne.n	8003ec2 <HAL_RCC_OscConfig+0x48e>
 8003ee0:	e001      	b.n	8003ee6 <HAL_RCC_OscConfig+0x4b2>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8003ee2:	2301      	movs	r3, #1
 8003ee4:	e000      	b.n	8003ee8 <HAL_RCC_OscConfig+0x4b4>
    }
  }
  
  return HAL_OK;
 8003ee6:	2300      	movs	r3, #0
}
 8003ee8:	4618      	mov	r0, r3
 8003eea:	3718      	adds	r7, #24
 8003eec:	46bd      	mov	sp, r7
 8003eee:	bd80      	pop	{r7, pc}
 8003ef0:	40021000 	.word	0x40021000
 8003ef4:	40007000 	.word	0x40007000
 8003ef8:	42420060 	.word	0x42420060

08003efc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003efc:	b580      	push	{r7, lr}
 8003efe:	b084      	sub	sp, #16
 8003f00:	af00      	add	r7, sp, #0
 8003f02:	6078      	str	r0, [r7, #4]
 8003f04:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8003f06:	2300      	movs	r3, #0
 8003f08:	60fb      	str	r3, [r7, #12]
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8003f0a:	4b72      	ldr	r3, [pc, #456]	; (80040d4 <HAL_RCC_ClockConfig+0x1d8>)
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	f003 0307 	and.w	r3, r3, #7
 8003f12:	683a      	ldr	r2, [r7, #0]
 8003f14:	429a      	cmp	r2, r3
 8003f16:	d910      	bls.n	8003f3a <HAL_RCC_ClockConfig+0x3e>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f18:	4b6e      	ldr	r3, [pc, #440]	; (80040d4 <HAL_RCC_ClockConfig+0x1d8>)
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	f023 0207 	bic.w	r2, r3, #7
 8003f20:	496c      	ldr	r1, [pc, #432]	; (80040d4 <HAL_RCC_ClockConfig+0x1d8>)
 8003f22:	683b      	ldr	r3, [r7, #0]
 8003f24:	4313      	orrs	r3, r2
 8003f26:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003f28:	4b6a      	ldr	r3, [pc, #424]	; (80040d4 <HAL_RCC_ClockConfig+0x1d8>)
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	f003 0307 	and.w	r3, r3, #7
 8003f30:	683a      	ldr	r2, [r7, #0]
 8003f32:	429a      	cmp	r2, r3
 8003f34:	d001      	beq.n	8003f3a <HAL_RCC_ClockConfig+0x3e>
    {
      return HAL_ERROR;
 8003f36:	2301      	movs	r3, #1
 8003f38:	e0c8      	b.n	80040cc <HAL_RCC_ClockConfig+0x1d0>
    }
  }

#endif /* FLASH_ACR_LATENCY */
  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	f003 0302 	and.w	r3, r3, #2
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d008      	beq.n	8003f58 <HAL_RCC_ClockConfig+0x5c>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003f46:	4b64      	ldr	r3, [pc, #400]	; (80040d8 <HAL_RCC_ClockConfig+0x1dc>)
 8003f48:	685b      	ldr	r3, [r3, #4]
 8003f4a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	689b      	ldr	r3, [r3, #8]
 8003f52:	4961      	ldr	r1, [pc, #388]	; (80040d8 <HAL_RCC_ClockConfig+0x1dc>)
 8003f54:	4313      	orrs	r3, r2
 8003f56:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	f003 0301 	and.w	r3, r3, #1
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d06a      	beq.n	800403a <HAL_RCC_ClockConfig+0x13e>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	685b      	ldr	r3, [r3, #4]
 8003f68:	2b01      	cmp	r3, #1
 8003f6a:	d107      	bne.n	8003f7c <HAL_RCC_ClockConfig+0x80>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003f6c:	4b5a      	ldr	r3, [pc, #360]	; (80040d8 <HAL_RCC_ClockConfig+0x1dc>)
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d115      	bne.n	8003fa4 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8003f78:	2301      	movs	r3, #1
 8003f7a:	e0a7      	b.n	80040cc <HAL_RCC_ClockConfig+0x1d0>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	685b      	ldr	r3, [r3, #4]
 8003f80:	2b02      	cmp	r3, #2
 8003f82:	d107      	bne.n	8003f94 <HAL_RCC_ClockConfig+0x98>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003f84:	4b54      	ldr	r3, [pc, #336]	; (80040d8 <HAL_RCC_ClockConfig+0x1dc>)
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d109      	bne.n	8003fa4 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8003f90:	2301      	movs	r3, #1
 8003f92:	e09b      	b.n	80040cc <HAL_RCC_ClockConfig+0x1d0>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f94:	4b50      	ldr	r3, [pc, #320]	; (80040d8 <HAL_RCC_ClockConfig+0x1dc>)
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	f003 0302 	and.w	r3, r3, #2
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d101      	bne.n	8003fa4 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8003fa0:	2301      	movs	r3, #1
 8003fa2:	e093      	b.n	80040cc <HAL_RCC_ClockConfig+0x1d0>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003fa4:	4b4c      	ldr	r3, [pc, #304]	; (80040d8 <HAL_RCC_ClockConfig+0x1dc>)
 8003fa6:	685b      	ldr	r3, [r3, #4]
 8003fa8:	f023 0203 	bic.w	r2, r3, #3
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	685b      	ldr	r3, [r3, #4]
 8003fb0:	4949      	ldr	r1, [pc, #292]	; (80040d8 <HAL_RCC_ClockConfig+0x1dc>)
 8003fb2:	4313      	orrs	r3, r2
 8003fb4:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003fb6:	f7fe f899 	bl	80020ec <HAL_GetTick>
 8003fba:	60f8      	str	r0, [r7, #12]
    
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	685b      	ldr	r3, [r3, #4]
 8003fc0:	2b01      	cmp	r3, #1
 8003fc2:	d112      	bne.n	8003fea <HAL_RCC_ClockConfig+0xee>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8003fc4:	e00a      	b.n	8003fdc <HAL_RCC_ClockConfig+0xe0>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003fc6:	f7fe f891 	bl	80020ec <HAL_GetTick>
 8003fca:	4602      	mov	r2, r0
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	1ad3      	subs	r3, r2, r3
 8003fd0:	f241 3288 	movw	r2, #5000	; 0x1388
 8003fd4:	4293      	cmp	r3, r2
 8003fd6:	d901      	bls.n	8003fdc <HAL_RCC_ClockConfig+0xe0>
        {
          return HAL_TIMEOUT;
 8003fd8:	2303      	movs	r3, #3
 8003fda:	e077      	b.n	80040cc <HAL_RCC_ClockConfig+0x1d0>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8003fdc:	4b3e      	ldr	r3, [pc, #248]	; (80040d8 <HAL_RCC_ClockConfig+0x1dc>)
 8003fde:	685b      	ldr	r3, [r3, #4]
 8003fe0:	f003 030c 	and.w	r3, r3, #12
 8003fe4:	2b04      	cmp	r3, #4
 8003fe6:	d1ee      	bne.n	8003fc6 <HAL_RCC_ClockConfig+0xca>
 8003fe8:	e027      	b.n	800403a <HAL_RCC_ClockConfig+0x13e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	685b      	ldr	r3, [r3, #4]
 8003fee:	2b02      	cmp	r3, #2
 8003ff0:	d11d      	bne.n	800402e <HAL_RCC_ClockConfig+0x132>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003ff2:	e00a      	b.n	800400a <HAL_RCC_ClockConfig+0x10e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003ff4:	f7fe f87a 	bl	80020ec <HAL_GetTick>
 8003ff8:	4602      	mov	r2, r0
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	1ad3      	subs	r3, r2, r3
 8003ffe:	f241 3288 	movw	r2, #5000	; 0x1388
 8004002:	4293      	cmp	r3, r2
 8004004:	d901      	bls.n	800400a <HAL_RCC_ClockConfig+0x10e>
        {
          return HAL_TIMEOUT;
 8004006:	2303      	movs	r3, #3
 8004008:	e060      	b.n	80040cc <HAL_RCC_ClockConfig+0x1d0>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800400a:	4b33      	ldr	r3, [pc, #204]	; (80040d8 <HAL_RCC_ClockConfig+0x1dc>)
 800400c:	685b      	ldr	r3, [r3, #4]
 800400e:	f003 030c 	and.w	r3, r3, #12
 8004012:	2b08      	cmp	r3, #8
 8004014:	d1ee      	bne.n	8003ff4 <HAL_RCC_ClockConfig+0xf8>
 8004016:	e010      	b.n	800403a <HAL_RCC_ClockConfig+0x13e>
    }
    else
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004018:	f7fe f868 	bl	80020ec <HAL_GetTick>
 800401c:	4602      	mov	r2, r0
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	1ad3      	subs	r3, r2, r3
 8004022:	f241 3288 	movw	r2, #5000	; 0x1388
 8004026:	4293      	cmp	r3, r2
 8004028:	d901      	bls.n	800402e <HAL_RCC_ClockConfig+0x132>
        {
          return HAL_TIMEOUT;
 800402a:	2303      	movs	r3, #3
 800402c:	e04e      	b.n	80040cc <HAL_RCC_ClockConfig+0x1d0>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800402e:	4b2a      	ldr	r3, [pc, #168]	; (80040d8 <HAL_RCC_ClockConfig+0x1dc>)
 8004030:	685b      	ldr	r3, [r3, #4]
 8004032:	f003 030c 	and.w	r3, r3, #12
 8004036:	2b00      	cmp	r3, #0
 8004038:	d1ee      	bne.n	8004018 <HAL_RCC_ClockConfig+0x11c>
      }
    }      
  }    
#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 800403a:	4b26      	ldr	r3, [pc, #152]	; (80040d4 <HAL_RCC_ClockConfig+0x1d8>)
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	f003 0307 	and.w	r3, r3, #7
 8004042:	683a      	ldr	r2, [r7, #0]
 8004044:	429a      	cmp	r2, r3
 8004046:	d210      	bcs.n	800406a <HAL_RCC_ClockConfig+0x16e>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004048:	4b22      	ldr	r3, [pc, #136]	; (80040d4 <HAL_RCC_ClockConfig+0x1d8>)
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	f023 0207 	bic.w	r2, r3, #7
 8004050:	4920      	ldr	r1, [pc, #128]	; (80040d4 <HAL_RCC_ClockConfig+0x1d8>)
 8004052:	683b      	ldr	r3, [r7, #0]
 8004054:	4313      	orrs	r3, r2
 8004056:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8004058:	4b1e      	ldr	r3, [pc, #120]	; (80040d4 <HAL_RCC_ClockConfig+0x1d8>)
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	f003 0307 	and.w	r3, r3, #7
 8004060:	683a      	ldr	r2, [r7, #0]
 8004062:	429a      	cmp	r2, r3
 8004064:	d001      	beq.n	800406a <HAL_RCC_ClockConfig+0x16e>
    {
      return HAL_ERROR;
 8004066:	2301      	movs	r3, #1
 8004068:	e030      	b.n	80040cc <HAL_RCC_ClockConfig+0x1d0>
    }
  }    
#endif /* FLASH_ACR_LATENCY */

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	f003 0304 	and.w	r3, r3, #4
 8004072:	2b00      	cmp	r3, #0
 8004074:	d008      	beq.n	8004088 <HAL_RCC_ClockConfig+0x18c>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004076:	4b18      	ldr	r3, [pc, #96]	; (80040d8 <HAL_RCC_ClockConfig+0x1dc>)
 8004078:	685b      	ldr	r3, [r3, #4]
 800407a:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	68db      	ldr	r3, [r3, #12]
 8004082:	4915      	ldr	r1, [pc, #84]	; (80040d8 <HAL_RCC_ClockConfig+0x1dc>)
 8004084:	4313      	orrs	r3, r2
 8004086:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	f003 0308 	and.w	r3, r3, #8
 8004090:	2b00      	cmp	r3, #0
 8004092:	d009      	beq.n	80040a8 <HAL_RCC_ClockConfig+0x1ac>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004094:	4b10      	ldr	r3, [pc, #64]	; (80040d8 <HAL_RCC_ClockConfig+0x1dc>)
 8004096:	685b      	ldr	r3, [r3, #4]
 8004098:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	691b      	ldr	r3, [r3, #16]
 80040a0:	00db      	lsls	r3, r3, #3
 80040a2:	490d      	ldr	r1, [pc, #52]	; (80040d8 <HAL_RCC_ClockConfig+0x1dc>)
 80040a4:	4313      	orrs	r3, r2
 80040a6:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80040a8:	f000 f81c 	bl	80040e4 <HAL_RCC_GetSysClockFreq>
 80040ac:	4601      	mov	r1, r0
 80040ae:	4b0a      	ldr	r3, [pc, #40]	; (80040d8 <HAL_RCC_ClockConfig+0x1dc>)
 80040b0:	685b      	ldr	r3, [r3, #4]
 80040b2:	091b      	lsrs	r3, r3, #4
 80040b4:	f003 030f 	and.w	r3, r3, #15
 80040b8:	4a08      	ldr	r2, [pc, #32]	; (80040dc <HAL_RCC_ClockConfig+0x1e0>)
 80040ba:	5cd3      	ldrb	r3, [r2, r3]
 80040bc:	fa21 f303 	lsr.w	r3, r1, r3
 80040c0:	4a07      	ldr	r2, [pc, #28]	; (80040e0 <HAL_RCC_ClockConfig+0x1e4>)
 80040c2:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 80040c4:	2000      	movs	r0, #0
 80040c6:	f7fd ffe7 	bl	8002098 <HAL_InitTick>
  
  return HAL_OK;
 80040ca:	2300      	movs	r3, #0
}
 80040cc:	4618      	mov	r0, r3
 80040ce:	3710      	adds	r7, #16
 80040d0:	46bd      	mov	sp, r7
 80040d2:	bd80      	pop	{r7, pc}
 80040d4:	40022000 	.word	0x40022000
 80040d8:	40021000 	.word	0x40021000
 80040dc:	080086e0 	.word	0x080086e0
 80040e0:	2000000c 	.word	0x2000000c

080040e4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80040e4:	b490      	push	{r4, r7}
 80040e6:	b08a      	sub	sp, #40	; 0x28
 80040e8:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80040ea:	4b2a      	ldr	r3, [pc, #168]	; (8004194 <HAL_RCC_GetSysClockFreq+0xb0>)
 80040ec:	1d3c      	adds	r4, r7, #4
 80040ee:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80040f0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80040f4:	4b28      	ldr	r3, [pc, #160]	; (8004198 <HAL_RCC_GetSysClockFreq+0xb4>)
 80040f6:	881b      	ldrh	r3, [r3, #0]
 80040f8:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80040fa:	2300      	movs	r3, #0
 80040fc:	61fb      	str	r3, [r7, #28]
 80040fe:	2300      	movs	r3, #0
 8004100:	61bb      	str	r3, [r7, #24]
 8004102:	2300      	movs	r3, #0
 8004104:	627b      	str	r3, [r7, #36]	; 0x24
 8004106:	2300      	movs	r3, #0
 8004108:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800410a:	2300      	movs	r3, #0
 800410c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/
  
  tmpreg = RCC->CFGR;
 800410e:	4b23      	ldr	r3, [pc, #140]	; (800419c <HAL_RCC_GetSysClockFreq+0xb8>)
 8004110:	685b      	ldr	r3, [r3, #4]
 8004112:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004114:	69fb      	ldr	r3, [r7, #28]
 8004116:	f003 030c 	and.w	r3, r3, #12
 800411a:	2b04      	cmp	r3, #4
 800411c:	d002      	beq.n	8004124 <HAL_RCC_GetSysClockFreq+0x40>
 800411e:	2b08      	cmp	r3, #8
 8004120:	d003      	beq.n	800412a <HAL_RCC_GetSysClockFreq+0x46>
 8004122:	e02d      	b.n	8004180 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004124:	4b1e      	ldr	r3, [pc, #120]	; (80041a0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004126:	623b      	str	r3, [r7, #32]
      break;
 8004128:	e02d      	b.n	8004186 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800412a:	69fb      	ldr	r3, [r7, #28]
 800412c:	0c9b      	lsrs	r3, r3, #18
 800412e:	f003 030f 	and.w	r3, r3, #15
 8004132:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8004136:	4413      	add	r3, r2
 8004138:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800413c:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800413e:	69fb      	ldr	r3, [r7, #28]
 8004140:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004144:	2b00      	cmp	r3, #0
 8004146:	d013      	beq.n	8004170 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004148:	4b14      	ldr	r3, [pc, #80]	; (800419c <HAL_RCC_GetSysClockFreq+0xb8>)
 800414a:	685b      	ldr	r3, [r3, #4]
 800414c:	0c5b      	lsrs	r3, r3, #17
 800414e:	f003 0301 	and.w	r3, r3, #1
 8004152:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8004156:	4413      	add	r3, r2
 8004158:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800415c:	61bb      	str	r3, [r7, #24]
        {
            pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE / prediv) * pllmul);
 800415e:	4a10      	ldr	r2, [pc, #64]	; (80041a0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004160:	69bb      	ldr	r3, [r7, #24]
 8004162:	fbb2 f2f3 	udiv	r2, r2, r3
 8004166:	697b      	ldr	r3, [r7, #20]
 8004168:	fb02 f303 	mul.w	r3, r2, r3
 800416c:	627b      	str	r3, [r7, #36]	; 0x24
 800416e:	e004      	b.n	800417a <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004170:	697b      	ldr	r3, [r7, #20]
 8004172:	4a0c      	ldr	r2, [pc, #48]	; (80041a4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004174:	fb02 f303 	mul.w	r3, r2, r3
 8004178:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800417a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800417c:	623b      	str	r3, [r7, #32]
      break;
 800417e:	e002      	b.n	8004186 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004180:	4b07      	ldr	r3, [pc, #28]	; (80041a0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004182:	623b      	str	r3, [r7, #32]
      break;
 8004184:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004186:	6a3b      	ldr	r3, [r7, #32]
}
 8004188:	4618      	mov	r0, r3
 800418a:	3728      	adds	r7, #40	; 0x28
 800418c:	46bd      	mov	sp, r7
 800418e:	bc90      	pop	{r4, r7}
 8004190:	4770      	bx	lr
 8004192:	bf00      	nop
 8004194:	080086cc 	.word	0x080086cc
 8004198:	080086dc 	.word	0x080086dc
 800419c:	40021000 	.word	0x40021000
 80041a0:	007a1200 	.word	0x007a1200
 80041a4:	003d0900 	.word	0x003d0900

080041a8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80041a8:	b480      	push	{r7}
 80041aa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80041ac:	4b02      	ldr	r3, [pc, #8]	; (80041b8 <HAL_RCC_GetHCLKFreq+0x10>)
 80041ae:	681b      	ldr	r3, [r3, #0]
}
 80041b0:	4618      	mov	r0, r3
 80041b2:	46bd      	mov	sp, r7
 80041b4:	bc80      	pop	{r7}
 80041b6:	4770      	bx	lr
 80041b8:	2000000c 	.word	0x2000000c

080041bc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80041bc:	b580      	push	{r7, lr}
 80041be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80041c0:	f7ff fff2 	bl	80041a8 <HAL_RCC_GetHCLKFreq>
 80041c4:	4601      	mov	r1, r0
 80041c6:	4b05      	ldr	r3, [pc, #20]	; (80041dc <HAL_RCC_GetPCLK1Freq+0x20>)
 80041c8:	685b      	ldr	r3, [r3, #4]
 80041ca:	0a1b      	lsrs	r3, r3, #8
 80041cc:	f003 0307 	and.w	r3, r3, #7
 80041d0:	4a03      	ldr	r2, [pc, #12]	; (80041e0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80041d2:	5cd3      	ldrb	r3, [r2, r3]
 80041d4:	fa21 f303 	lsr.w	r3, r1, r3
}    
 80041d8:	4618      	mov	r0, r3
 80041da:	bd80      	pop	{r7, pc}
 80041dc:	40021000 	.word	0x40021000
 80041e0:	080086f0 	.word	0x080086f0

080041e4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80041e4:	b480      	push	{r7}
 80041e6:	b085      	sub	sp, #20
 80041e8:	af00      	add	r7, sp, #0
 80041ea:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80041ec:	4b0a      	ldr	r3, [pc, #40]	; (8004218 <RCC_Delay+0x34>)
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	4a0a      	ldr	r2, [pc, #40]	; (800421c <RCC_Delay+0x38>)
 80041f2:	fba2 2303 	umull	r2, r3, r2, r3
 80041f6:	0a5b      	lsrs	r3, r3, #9
 80041f8:	687a      	ldr	r2, [r7, #4]
 80041fa:	fb02 f303 	mul.w	r3, r2, r3
 80041fe:	60fb      	str	r3, [r7, #12]
  \brief   No Operation
  \details No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__((always_inline)) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
 8004200:	bf00      	nop
  do 
  {
    __NOP();
  } 
  while (Delay --);
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	1e5a      	subs	r2, r3, #1
 8004206:	60fa      	str	r2, [r7, #12]
 8004208:	2b00      	cmp	r3, #0
 800420a:	d1f9      	bne.n	8004200 <RCC_Delay+0x1c>
}
 800420c:	bf00      	nop
 800420e:	3714      	adds	r7, #20
 8004210:	46bd      	mov	sp, r7
 8004212:	bc80      	pop	{r7}
 8004214:	4770      	bx	lr
 8004216:	bf00      	nop
 8004218:	2000000c 	.word	0x2000000c
 800421c:	10624dd3 	.word	0x10624dd3

08004220 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004220:	b580      	push	{r7, lr}
 8004222:	b086      	sub	sp, #24
 8004224:	af00      	add	r7, sp, #0
 8004226:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8004228:	2300      	movs	r3, #0
 800422a:	613b      	str	r3, [r7, #16]
 800422c:	2300      	movs	r3, #0
 800422e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*------------------------------- RTC/LCD Configuration ------------------------*/ 
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	f003 0301 	and.w	r3, r3, #1
 8004238:	2b00      	cmp	r3, #0
 800423a:	d07d      	beq.n	8004338 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 800423c:	2300      	movs	r3, #0
 800423e:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004240:	4b4f      	ldr	r3, [pc, #316]	; (8004380 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004242:	69db      	ldr	r3, [r3, #28]
 8004244:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004248:	2b00      	cmp	r3, #0
 800424a:	d10d      	bne.n	8004268 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 800424c:	4b4c      	ldr	r3, [pc, #304]	; (8004380 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800424e:	69db      	ldr	r3, [r3, #28]
 8004250:	4a4b      	ldr	r2, [pc, #300]	; (8004380 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004252:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004256:	61d3      	str	r3, [r2, #28]
 8004258:	4b49      	ldr	r3, [pc, #292]	; (8004380 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800425a:	69db      	ldr	r3, [r3, #28]
 800425c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004260:	60bb      	str	r3, [r7, #8]
 8004262:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004264:	2301      	movs	r3, #1
 8004266:	75fb      	strb	r3, [r7, #23]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004268:	4b46      	ldr	r3, [pc, #280]	; (8004384 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004270:	2b00      	cmp	r3, #0
 8004272:	d118      	bne.n	80042a6 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004274:	4b43      	ldr	r3, [pc, #268]	; (8004384 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	4a42      	ldr	r2, [pc, #264]	; (8004384 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800427a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800427e:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004280:	f7fd ff34 	bl	80020ec <HAL_GetTick>
 8004284:	6138      	str	r0, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004286:	e008      	b.n	800429a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004288:	f7fd ff30 	bl	80020ec <HAL_GetTick>
 800428c:	4602      	mov	r2, r0
 800428e:	693b      	ldr	r3, [r7, #16]
 8004290:	1ad3      	subs	r3, r2, r3
 8004292:	2b64      	cmp	r3, #100	; 0x64
 8004294:	d901      	bls.n	800429a <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8004296:	2303      	movs	r3, #3
 8004298:	e06d      	b.n	8004376 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800429a:	4b3a      	ldr	r3, [pc, #232]	; (8004384 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d0f0      	beq.n	8004288 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }
      
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80042a6:	4b36      	ldr	r3, [pc, #216]	; (8004380 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80042a8:	6a1b      	ldr	r3, [r3, #32]
 80042aa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80042ae:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d02e      	beq.n	8004314 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	685b      	ldr	r3, [r3, #4]
 80042ba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80042be:	68fa      	ldr	r2, [r7, #12]
 80042c0:	429a      	cmp	r2, r3
 80042c2:	d027      	beq.n	8004314 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80042c4:	4b2e      	ldr	r3, [pc, #184]	; (8004380 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80042c6:	6a1b      	ldr	r3, [r3, #32]
 80042c8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80042cc:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80042ce:	4b2e      	ldr	r3, [pc, #184]	; (8004388 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80042d0:	2201      	movs	r2, #1
 80042d2:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80042d4:	4b2c      	ldr	r3, [pc, #176]	; (8004388 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80042d6:	2200      	movs	r2, #0
 80042d8:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80042da:	4a29      	ldr	r2, [pc, #164]	; (8004380 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	f003 0301 	and.w	r3, r3, #1
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d014      	beq.n	8004314 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80042ea:	f7fd feff 	bl	80020ec <HAL_GetTick>
 80042ee:	6138      	str	r0, [r7, #16]
      
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80042f0:	e00a      	b.n	8004308 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80042f2:	f7fd fefb 	bl	80020ec <HAL_GetTick>
 80042f6:	4602      	mov	r2, r0
 80042f8:	693b      	ldr	r3, [r7, #16]
 80042fa:	1ad3      	subs	r3, r2, r3
 80042fc:	f241 3288 	movw	r2, #5000	; 0x1388
 8004300:	4293      	cmp	r3, r2
 8004302:	d901      	bls.n	8004308 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8004304:	2303      	movs	r3, #3
 8004306:	e036      	b.n	8004376 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004308:	4b1d      	ldr	r3, [pc, #116]	; (8004380 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800430a:	6a1b      	ldr	r3, [r3, #32]
 800430c:	f003 0302 	and.w	r3, r3, #2
 8004310:	2b00      	cmp	r3, #0
 8004312:	d0ee      	beq.n	80042f2 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8004314:	4b1a      	ldr	r3, [pc, #104]	; (8004380 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004316:	6a1b      	ldr	r3, [r3, #32]
 8004318:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	685b      	ldr	r3, [r3, #4]
 8004320:	4917      	ldr	r1, [pc, #92]	; (8004380 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004322:	4313      	orrs	r3, r2
 8004324:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004326:	7dfb      	ldrb	r3, [r7, #23]
 8004328:	2b01      	cmp	r3, #1
 800432a:	d105      	bne.n	8004338 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800432c:	4b14      	ldr	r3, [pc, #80]	; (8004380 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800432e:	69db      	ldr	r3, [r3, #28]
 8004330:	4a13      	ldr	r2, [pc, #76]	; (8004380 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004332:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004336:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	f003 0302 	and.w	r3, r3, #2
 8004340:	2b00      	cmp	r3, #0
 8004342:	d008      	beq.n	8004356 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));
    
    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004344:	4b0e      	ldr	r3, [pc, #56]	; (8004380 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004346:	685b      	ldr	r3, [r3, #4]
 8004348:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	689b      	ldr	r3, [r3, #8]
 8004350:	490b      	ldr	r1, [pc, #44]	; (8004380 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004352:	4313      	orrs	r3, r2
 8004354:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	f003 0310 	and.w	r3, r3, #16
 800435e:	2b00      	cmp	r3, #0
 8004360:	d008      	beq.n	8004374 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004362:	4b07      	ldr	r3, [pc, #28]	; (8004380 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004364:	685b      	ldr	r3, [r3, #4]
 8004366:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	68db      	ldr	r3, [r3, #12]
 800436e:	4904      	ldr	r1, [pc, #16]	; (8004380 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004370:	4313      	orrs	r3, r2
 8004372:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8004374:	2300      	movs	r3, #0
}
 8004376:	4618      	mov	r0, r3
 8004378:	3718      	adds	r7, #24
 800437a:	46bd      	mov	sp, r7
 800437c:	bd80      	pop	{r7, pc}
 800437e:	bf00      	nop
 8004380:	40021000 	.word	0x40021000
 8004384:	40007000 	.word	0x40007000
 8004388:	42420440 	.word	0x42420440

0800438c <HAL_TIM_PWM_Init>:
  *         parameters in the TIM_HandleTypeDef and create the associated handle.
  * @param  htim : TIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800438c:	b580      	push	{r7, lr}
 800438e:	b082      	sub	sp, #8
 8004390:	af00      	add	r7, sp, #0
 8004392:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if(htim == NULL)
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	2b00      	cmp	r3, #0
 8004398:	d101      	bne.n	800439e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800439a:	2301      	movs	r3, #1
 800439c:	e01d      	b.n	80043da <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if(htim->State == HAL_TIM_STATE_RESET)
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80043a4:	b2db      	uxtb	r3, r3
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d106      	bne.n	80043b8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	2200      	movs	r2, #0
 80043ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80043b2:	6878      	ldr	r0, [r7, #4]
 80043b4:	f7fd fb70 	bl	8001a98 <HAL_TIM_PWM_MspInit>
  }

  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	2202      	movs	r2, #2
 80043bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681a      	ldr	r2, [r3, #0]
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	3304      	adds	r3, #4
 80043c8:	4619      	mov	r1, r3
 80043ca:	4610      	mov	r0, r2
 80043cc:	f000 f8f8 	bl	80045c0 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	2201      	movs	r2, #1
 80043d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80043d8:	2300      	movs	r3, #0
}
 80043da:	4618      	mov	r0, r3
 80043dc:	3708      	adds	r7, #8
 80043de:	46bd      	mov	sp, r7
 80043e0:	bd80      	pop	{r7, pc}
	...

080043e4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80043e4:	b580      	push	{r7, lr}
 80043e6:	b082      	sub	sp, #8
 80043e8:	af00      	add	r7, sp, #0
 80043ea:	6078      	str	r0, [r7, #4]
 80043ec:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	2201      	movs	r2, #1
 80043f4:	6839      	ldr	r1, [r7, #0]
 80043f6:	4618      	mov	r0, r3
 80043f8:	f000 fae8 	bl	80049cc <TIM_CCxChannelCmd>

  if(IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	4a0b      	ldr	r2, [pc, #44]	; (8004430 <HAL_TIM_PWM_Start+0x4c>)
 8004402:	4293      	cmp	r3, r2
 8004404:	d107      	bne.n	8004416 <HAL_TIM_PWM_Start+0x32>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004414:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	681a      	ldr	r2, [r3, #0]
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	f042 0201 	orr.w	r2, r2, #1
 8004424:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8004426:	2300      	movs	r3, #0
}
 8004428:	4618      	mov	r0, r3
 800442a:	3708      	adds	r7, #8
 800442c:	46bd      	mov	sp, r7
 800442e:	bd80      	pop	{r7, pc}
 8004430:	40012c00 	.word	0x40012c00

08004434 <HAL_TIM_PWM_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim, TIM_OC_InitTypeDef* sConfig, uint32_t Channel)
{
 8004434:	b580      	push	{r7, lr}
 8004436:	b084      	sub	sp, #16
 8004438:	af00      	add	r7, sp, #0
 800443a:	60f8      	str	r0, [r7, #12]
 800443c:	60b9      	str	r1, [r7, #8]
 800443e:	607a      	str	r2, [r7, #4]
  __HAL_LOCK(htim);
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004446:	2b01      	cmp	r3, #1
 8004448:	d101      	bne.n	800444e <HAL_TIM_PWM_ConfigChannel+0x1a>
 800444a:	2302      	movs	r3, #2
 800444c:	e0b4      	b.n	80045b8 <HAL_TIM_PWM_ConfigChannel+0x184>
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	2201      	movs	r2, #1
 8004452:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  htim->State = HAL_TIM_STATE_BUSY;
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	2202      	movs	r2, #2
 800445a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	2b0c      	cmp	r3, #12
 8004462:	f200 809f 	bhi.w	80045a4 <HAL_TIM_PWM_ConfigChannel+0x170>
 8004466:	a201      	add	r2, pc, #4	; (adr r2, 800446c <HAL_TIM_PWM_ConfigChannel+0x38>)
 8004468:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800446c:	080044a1 	.word	0x080044a1
 8004470:	080045a5 	.word	0x080045a5
 8004474:	080045a5 	.word	0x080045a5
 8004478:	080045a5 	.word	0x080045a5
 800447c:	080044e1 	.word	0x080044e1
 8004480:	080045a5 	.word	0x080045a5
 8004484:	080045a5 	.word	0x080045a5
 8004488:	080045a5 	.word	0x080045a5
 800448c:	08004523 	.word	0x08004523
 8004490:	080045a5 	.word	0x080045a5
 8004494:	080045a5 	.word	0x080045a5
 8004498:	080045a5 	.word	0x080045a5
 800449c:	08004563 	.word	0x08004563
  {
    case TIM_CHANNEL_1:
    {
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	68b9      	ldr	r1, [r7, #8]
 80044a6:	4618      	mov	r0, r3
 80044a8:	f000 f8f0 	bl	800468c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	699a      	ldr	r2, [r3, #24]
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	f042 0208 	orr.w	r2, r2, #8
 80044ba:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	699a      	ldr	r2, [r3, #24]
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	f022 0204 	bic.w	r2, r2, #4
 80044ca:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	6999      	ldr	r1, [r3, #24]
 80044d2:	68bb      	ldr	r3, [r7, #8]
 80044d4:	691a      	ldr	r2, [r3, #16]
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	430a      	orrs	r2, r1
 80044dc:	619a      	str	r2, [r3, #24]
    }
    break;
 80044de:	e062      	b.n	80045a6 <HAL_TIM_PWM_ConfigChannel+0x172>

    case TIM_CHANNEL_2:
    {
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	68b9      	ldr	r1, [r7, #8]
 80044e6:	4618      	mov	r0, r3
 80044e8:	f000 f93c 	bl	8004764 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	699a      	ldr	r2, [r3, #24]
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80044fa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	699a      	ldr	r2, [r3, #24]
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800450a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8;
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	6999      	ldr	r1, [r3, #24]
 8004512:	68bb      	ldr	r3, [r7, #8]
 8004514:	691b      	ldr	r3, [r3, #16]
 8004516:	021a      	lsls	r2, r3, #8
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	430a      	orrs	r2, r1
 800451e:	619a      	str	r2, [r3, #24]
    }
    break;
 8004520:	e041      	b.n	80045a6 <HAL_TIM_PWM_ConfigChannel+0x172>

    case TIM_CHANNEL_3:
    {
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));
      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	68b9      	ldr	r1, [r7, #8]
 8004528:	4618      	mov	r0, r3
 800452a:	f000 f98b 	bl	8004844 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	69da      	ldr	r2, [r3, #28]
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	f042 0208 	orr.w	r2, r2, #8
 800453c:	61da      	str	r2, [r3, #28]

     /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	69da      	ldr	r2, [r3, #28]
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	f022 0204 	bic.w	r2, r2, #4
 800454c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	69d9      	ldr	r1, [r3, #28]
 8004554:	68bb      	ldr	r3, [r7, #8]
 8004556:	691a      	ldr	r2, [r3, #16]
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	430a      	orrs	r2, r1
 800455e:	61da      	str	r2, [r3, #28]
    }
    break;
 8004560:	e021      	b.n	80045a6 <HAL_TIM_PWM_ConfigChannel+0x172>

    case TIM_CHANNEL_4:
    {
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));
      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	68b9      	ldr	r1, [r7, #8]
 8004568:	4618      	mov	r0, r3
 800456a:	f000 f9db 	bl	8004924 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	69da      	ldr	r2, [r3, #28]
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800457c:	61da      	str	r2, [r3, #28]

     /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	69da      	ldr	r2, [r3, #28]
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800458c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8;
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	69d9      	ldr	r1, [r3, #28]
 8004594:	68bb      	ldr	r3, [r7, #8]
 8004596:	691b      	ldr	r3, [r3, #16]
 8004598:	021a      	lsls	r2, r3, #8
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	430a      	orrs	r2, r1
 80045a0:	61da      	str	r2, [r3, #28]
    }
    break;
 80045a2:	e000      	b.n	80045a6 <HAL_TIM_PWM_ConfigChannel+0x172>

    default:
    break;
 80045a4:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	2201      	movs	r2, #1
 80045aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	2200      	movs	r2, #0
 80045b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80045b6:	2300      	movs	r3, #0
}
 80045b8:	4618      	mov	r0, r3
 80045ba:	3710      	adds	r7, #16
 80045bc:	46bd      	mov	sp, r7
 80045be:	bd80      	pop	{r7, pc}

080045c0 <TIM_Base_SetConfig>:
  * @param  TIMx : TIM periheral
  * @param  Structure : TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80045c0:	b480      	push	{r7}
 80045c2:	b085      	sub	sp, #20
 80045c4:	af00      	add	r7, sp, #0
 80045c6:	6078      	str	r0, [r7, #4]
 80045c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1 = 0U;
 80045ca:	2300      	movs	r3, #0
 80045cc:	60fb      	str	r3, [r7, #12]
  tmpcr1 = TIMx->CR1;
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	4a2a      	ldr	r2, [pc, #168]	; (8004680 <TIM_Base_SetConfig+0xc0>)
 80045d8:	4293      	cmp	r3, r2
 80045da:	d00b      	beq.n	80045f4 <TIM_Base_SetConfig+0x34>
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80045e2:	d007      	beq.n	80045f4 <TIM_Base_SetConfig+0x34>
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	4a27      	ldr	r2, [pc, #156]	; (8004684 <TIM_Base_SetConfig+0xc4>)
 80045e8:	4293      	cmp	r3, r2
 80045ea:	d003      	beq.n	80045f4 <TIM_Base_SetConfig+0x34>
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	4a26      	ldr	r2, [pc, #152]	; (8004688 <TIM_Base_SetConfig+0xc8>)
 80045f0:	4293      	cmp	r3, r2
 80045f2:	d108      	bne.n	8004606 <TIM_Base_SetConfig+0x46>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80045fa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80045fc:	683b      	ldr	r3, [r7, #0]
 80045fe:	685b      	ldr	r3, [r3, #4]
 8004600:	68fa      	ldr	r2, [r7, #12]
 8004602:	4313      	orrs	r3, r2
 8004604:	60fb      	str	r3, [r7, #12]
  }

  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	4a1d      	ldr	r2, [pc, #116]	; (8004680 <TIM_Base_SetConfig+0xc0>)
 800460a:	4293      	cmp	r3, r2
 800460c:	d00b      	beq.n	8004626 <TIM_Base_SetConfig+0x66>
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004614:	d007      	beq.n	8004626 <TIM_Base_SetConfig+0x66>
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	4a1a      	ldr	r2, [pc, #104]	; (8004684 <TIM_Base_SetConfig+0xc4>)
 800461a:	4293      	cmp	r3, r2
 800461c:	d003      	beq.n	8004626 <TIM_Base_SetConfig+0x66>
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	4a19      	ldr	r2, [pc, #100]	; (8004688 <TIM_Base_SetConfig+0xc8>)
 8004622:	4293      	cmp	r3, r2
 8004624:	d108      	bne.n	8004638 <TIM_Base_SetConfig+0x78>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800462c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800462e:	683b      	ldr	r3, [r7, #0]
 8004630:	68db      	ldr	r3, [r3, #12]
 8004632:	68fa      	ldr	r2, [r7, #12]
 8004634:	4313      	orrs	r3, r2
 8004636:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  tmpcr1 &= ~TIM_CR1_ARPE;
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800463e:	60fb      	str	r3, [r7, #12]
  tmpcr1 |= (uint32_t)Structure->AutoReloadPreload;
 8004640:	683b      	ldr	r3, [r7, #0]
 8004642:	695b      	ldr	r3, [r3, #20]
 8004644:	68fa      	ldr	r2, [r7, #12]
 8004646:	4313      	orrs	r3, r2
 8004648:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	68fa      	ldr	r2, [r7, #12]
 800464e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004650:	683b      	ldr	r3, [r7, #0]
 8004652:	689a      	ldr	r2, [r3, #8]
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8004658:	683b      	ldr	r3, [r7, #0]
 800465a:	681a      	ldr	r2, [r3, #0]
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	4a07      	ldr	r2, [pc, #28]	; (8004680 <TIM_Base_SetConfig+0xc0>)
 8004664:	4293      	cmp	r3, r2
 8004666:	d103      	bne.n	8004670 <TIM_Base_SetConfig+0xb0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004668:	683b      	ldr	r3, [r7, #0]
 800466a:	691a      	ldr	r2, [r3, #16]
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediatly */
  TIMx->EGR = TIM_EGR_UG;
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	2201      	movs	r2, #1
 8004674:	615a      	str	r2, [r3, #20]
}
 8004676:	bf00      	nop
 8004678:	3714      	adds	r7, #20
 800467a:	46bd      	mov	sp, r7
 800467c:	bc80      	pop	{r7}
 800467e:	4770      	bx	lr
 8004680:	40012c00 	.word	0x40012c00
 8004684:	40000400 	.word	0x40000400
 8004688:	40000800 	.word	0x40000800

0800468c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config : The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800468c:	b480      	push	{r7}
 800468e:	b087      	sub	sp, #28
 8004690:	af00      	add	r7, sp, #0
 8004692:	6078      	str	r0, [r7, #4]
 8004694:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0U;
 8004696:	2300      	movs	r3, #0
 8004698:	60fb      	str	r3, [r7, #12]
  uint32_t tmpccer = 0U;
 800469a:	2300      	movs	r3, #0
 800469c:	617b      	str	r3, [r7, #20]
  uint32_t tmpcr2 = 0U;
 800469e:	2300      	movs	r3, #0
 80046a0:	613b      	str	r3, [r7, #16]

   /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	6a1b      	ldr	r3, [r3, #32]
 80046a6:	f023 0201 	bic.w	r2, r3, #1
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	6a1b      	ldr	r3, [r3, #32]
 80046b2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	685b      	ldr	r3, [r3, #4]
 80046b8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	699b      	ldr	r3, [r3, #24]
 80046be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80046c6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	f023 0303 	bic.w	r3, r3, #3
 80046ce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80046d0:	683b      	ldr	r3, [r7, #0]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	68fa      	ldr	r2, [r7, #12]
 80046d6:	4313      	orrs	r3, r2
 80046d8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80046da:	697b      	ldr	r3, [r7, #20]
 80046dc:	f023 0302 	bic.w	r3, r3, #2
 80046e0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80046e2:	683b      	ldr	r3, [r7, #0]
 80046e4:	689b      	ldr	r3, [r3, #8]
 80046e6:	697a      	ldr	r2, [r7, #20]
 80046e8:	4313      	orrs	r3, r2
 80046ea:	617b      	str	r3, [r7, #20]

  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	4a1c      	ldr	r2, [pc, #112]	; (8004760 <TIM_OC1_SetConfig+0xd4>)
 80046f0:	4293      	cmp	r3, r2
 80046f2:	d10c      	bne.n	800470e <TIM_OC1_SetConfig+0x82>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80046f4:	697b      	ldr	r3, [r7, #20]
 80046f6:	f023 0308 	bic.w	r3, r3, #8
 80046fa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80046fc:	683b      	ldr	r3, [r7, #0]
 80046fe:	68db      	ldr	r3, [r3, #12]
 8004700:	697a      	ldr	r2, [r7, #20]
 8004702:	4313      	orrs	r3, r2
 8004704:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004706:	697b      	ldr	r3, [r7, #20]
 8004708:	f023 0304 	bic.w	r3, r3, #4
 800470c:	617b      	str	r3, [r7, #20]
  }

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	4a13      	ldr	r2, [pc, #76]	; (8004760 <TIM_OC1_SetConfig+0xd4>)
 8004712:	4293      	cmp	r3, r2
 8004714:	d111      	bne.n	800473a <TIM_OC1_SetConfig+0xae>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004716:	693b      	ldr	r3, [r7, #16]
 8004718:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800471c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800471e:	693b      	ldr	r3, [r7, #16]
 8004720:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004724:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004726:	683b      	ldr	r3, [r7, #0]
 8004728:	695b      	ldr	r3, [r3, #20]
 800472a:	693a      	ldr	r2, [r7, #16]
 800472c:	4313      	orrs	r3, r2
 800472e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004730:	683b      	ldr	r3, [r7, #0]
 8004732:	699b      	ldr	r3, [r3, #24]
 8004734:	693a      	ldr	r2, [r7, #16]
 8004736:	4313      	orrs	r3, r2
 8004738:	613b      	str	r3, [r7, #16]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	693a      	ldr	r2, [r7, #16]
 800473e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	68fa      	ldr	r2, [r7, #12]
 8004744:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004746:	683b      	ldr	r3, [r7, #0]
 8004748:	685a      	ldr	r2, [r3, #4]
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	697a      	ldr	r2, [r7, #20]
 8004752:	621a      	str	r2, [r3, #32]
}
 8004754:	bf00      	nop
 8004756:	371c      	adds	r7, #28
 8004758:	46bd      	mov	sp, r7
 800475a:	bc80      	pop	{r7}
 800475c:	4770      	bx	lr
 800475e:	bf00      	nop
 8004760:	40012c00 	.word	0x40012c00

08004764 <TIM_OC2_SetConfig>:
  * @param  TIMx  to select the TIM peripheral
  * @param  OC_Config : The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004764:	b480      	push	{r7}
 8004766:	b087      	sub	sp, #28
 8004768:	af00      	add	r7, sp, #0
 800476a:	6078      	str	r0, [r7, #4]
 800476c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0U;
 800476e:	2300      	movs	r3, #0
 8004770:	60fb      	str	r3, [r7, #12]
  uint32_t tmpccer = 0U;
 8004772:	2300      	movs	r3, #0
 8004774:	617b      	str	r3, [r7, #20]
  uint32_t tmpcr2 = 0U;
 8004776:	2300      	movs	r3, #0
 8004778:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	6a1b      	ldr	r3, [r3, #32]
 800477e:	f023 0210 	bic.w	r2, r3, #16
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	6a1b      	ldr	r3, [r3, #32]
 800478a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	685b      	ldr	r3, [r3, #4]
 8004790:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	699b      	ldr	r3, [r3, #24]
 8004796:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800479e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80047a6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80047a8:	683b      	ldr	r3, [r7, #0]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	021b      	lsls	r3, r3, #8
 80047ae:	68fa      	ldr	r2, [r7, #12]
 80047b0:	4313      	orrs	r3, r2
 80047b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80047b4:	697b      	ldr	r3, [r7, #20]
 80047b6:	f023 0320 	bic.w	r3, r3, #32
 80047ba:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80047bc:	683b      	ldr	r3, [r7, #0]
 80047be:	689b      	ldr	r3, [r3, #8]
 80047c0:	011b      	lsls	r3, r3, #4
 80047c2:	697a      	ldr	r2, [r7, #20]
 80047c4:	4313      	orrs	r3, r2
 80047c6:	617b      	str	r3, [r7, #20]

  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	4a1d      	ldr	r2, [pc, #116]	; (8004840 <TIM_OC2_SetConfig+0xdc>)
 80047cc:	4293      	cmp	r3, r2
 80047ce:	d10d      	bne.n	80047ec <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80047d0:	697b      	ldr	r3, [r7, #20]
 80047d2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80047d6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80047d8:	683b      	ldr	r3, [r7, #0]
 80047da:	68db      	ldr	r3, [r3, #12]
 80047dc:	011b      	lsls	r3, r3, #4
 80047de:	697a      	ldr	r2, [r7, #20]
 80047e0:	4313      	orrs	r3, r2
 80047e2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80047e4:	697b      	ldr	r3, [r7, #20]
 80047e6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80047ea:	617b      	str	r3, [r7, #20]

  }

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	4a14      	ldr	r2, [pc, #80]	; (8004840 <TIM_OC2_SetConfig+0xdc>)
 80047f0:	4293      	cmp	r3, r2
 80047f2:	d113      	bne.n	800481c <TIM_OC2_SetConfig+0xb8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80047f4:	693b      	ldr	r3, [r7, #16]
 80047f6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80047fa:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80047fc:	693b      	ldr	r3, [r7, #16]
 80047fe:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004802:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2);
 8004804:	683b      	ldr	r3, [r7, #0]
 8004806:	695b      	ldr	r3, [r3, #20]
 8004808:	009b      	lsls	r3, r3, #2
 800480a:	693a      	ldr	r2, [r7, #16]
 800480c:	4313      	orrs	r3, r2
 800480e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2);
 8004810:	683b      	ldr	r3, [r7, #0]
 8004812:	699b      	ldr	r3, [r3, #24]
 8004814:	009b      	lsls	r3, r3, #2
 8004816:	693a      	ldr	r2, [r7, #16]
 8004818:	4313      	orrs	r3, r2
 800481a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	693a      	ldr	r2, [r7, #16]
 8004820:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	68fa      	ldr	r2, [r7, #12]
 8004826:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004828:	683b      	ldr	r3, [r7, #0]
 800482a:	685a      	ldr	r2, [r3, #4]
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	697a      	ldr	r2, [r7, #20]
 8004834:	621a      	str	r2, [r3, #32]
}
 8004836:	bf00      	nop
 8004838:	371c      	adds	r7, #28
 800483a:	46bd      	mov	sp, r7
 800483c:	bc80      	pop	{r7}
 800483e:	4770      	bx	lr
 8004840:	40012c00 	.word	0x40012c00

08004844 <TIM_OC3_SetConfig>:
  * @param  TIMx  to select the TIM peripheral
  * @param  OC_Config : The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004844:	b480      	push	{r7}
 8004846:	b087      	sub	sp, #28
 8004848:	af00      	add	r7, sp, #0
 800484a:	6078      	str	r0, [r7, #4]
 800484c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0U;
 800484e:	2300      	movs	r3, #0
 8004850:	60fb      	str	r3, [r7, #12]
  uint32_t tmpccer = 0U;
 8004852:	2300      	movs	r3, #0
 8004854:	617b      	str	r3, [r7, #20]
  uint32_t tmpcr2 = 0U;
 8004856:	2300      	movs	r3, #0
 8004858:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	6a1b      	ldr	r3, [r3, #32]
 800485e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	6a1b      	ldr	r3, [r3, #32]
 800486a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	685b      	ldr	r3, [r3, #4]
 8004870:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	69db      	ldr	r3, [r3, #28]
 8004876:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800487e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	f023 0303 	bic.w	r3, r3, #3
 8004886:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004888:	683b      	ldr	r3, [r7, #0]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	68fa      	ldr	r2, [r7, #12]
 800488e:	4313      	orrs	r3, r2
 8004890:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004892:	697b      	ldr	r3, [r7, #20]
 8004894:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004898:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800489a:	683b      	ldr	r3, [r7, #0]
 800489c:	689b      	ldr	r3, [r3, #8]
 800489e:	021b      	lsls	r3, r3, #8
 80048a0:	697a      	ldr	r2, [r7, #20]
 80048a2:	4313      	orrs	r3, r2
 80048a4:	617b      	str	r3, [r7, #20]

  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	4a1d      	ldr	r2, [pc, #116]	; (8004920 <TIM_OC3_SetConfig+0xdc>)
 80048aa:	4293      	cmp	r3, r2
 80048ac:	d10d      	bne.n	80048ca <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80048ae:	697b      	ldr	r3, [r7, #20]
 80048b0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80048b4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80048b6:	683b      	ldr	r3, [r7, #0]
 80048b8:	68db      	ldr	r3, [r3, #12]
 80048ba:	021b      	lsls	r3, r3, #8
 80048bc:	697a      	ldr	r2, [r7, #20]
 80048be:	4313      	orrs	r3, r2
 80048c0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80048c2:	697b      	ldr	r3, [r7, #20]
 80048c4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80048c8:	617b      	str	r3, [r7, #20]
  }

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	4a14      	ldr	r2, [pc, #80]	; (8004920 <TIM_OC3_SetConfig+0xdc>)
 80048ce:	4293      	cmp	r3, r2
 80048d0:	d113      	bne.n	80048fa <TIM_OC3_SetConfig+0xb6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80048d2:	693b      	ldr	r3, [r7, #16]
 80048d4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80048d8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80048da:	693b      	ldr	r3, [r7, #16]
 80048dc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80048e0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80048e2:	683b      	ldr	r3, [r7, #0]
 80048e4:	695b      	ldr	r3, [r3, #20]
 80048e6:	011b      	lsls	r3, r3, #4
 80048e8:	693a      	ldr	r2, [r7, #16]
 80048ea:	4313      	orrs	r3, r2
 80048ec:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80048ee:	683b      	ldr	r3, [r7, #0]
 80048f0:	699b      	ldr	r3, [r3, #24]
 80048f2:	011b      	lsls	r3, r3, #4
 80048f4:	693a      	ldr	r2, [r7, #16]
 80048f6:	4313      	orrs	r3, r2
 80048f8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	693a      	ldr	r2, [r7, #16]
 80048fe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	68fa      	ldr	r2, [r7, #12]
 8004904:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004906:	683b      	ldr	r3, [r7, #0]
 8004908:	685a      	ldr	r2, [r3, #4]
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	697a      	ldr	r2, [r7, #20]
 8004912:	621a      	str	r2, [r3, #32]
}
 8004914:	bf00      	nop
 8004916:	371c      	adds	r7, #28
 8004918:	46bd      	mov	sp, r7
 800491a:	bc80      	pop	{r7}
 800491c:	4770      	bx	lr
 800491e:	bf00      	nop
 8004920:	40012c00 	.word	0x40012c00

08004924 <TIM_OC4_SetConfig>:
  * @param  TIMx  to select the TIM peripheral
  * @param  OC_Config : The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004924:	b480      	push	{r7}
 8004926:	b087      	sub	sp, #28
 8004928:	af00      	add	r7, sp, #0
 800492a:	6078      	str	r0, [r7, #4]
 800492c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0U;
 800492e:	2300      	movs	r3, #0
 8004930:	613b      	str	r3, [r7, #16]
  uint32_t tmpccer = 0U;
 8004932:	2300      	movs	r3, #0
 8004934:	60fb      	str	r3, [r7, #12]
  uint32_t tmpcr2 = 0U;
 8004936:	2300      	movs	r3, #0
 8004938:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	6a1b      	ldr	r3, [r3, #32]
 800493e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	6a1b      	ldr	r3, [r3, #32]
 800494a:	60fb      	str	r3, [r7, #12]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	685b      	ldr	r3, [r3, #4]
 8004950:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	69db      	ldr	r3, [r3, #28]
 8004956:	613b      	str	r3, [r7, #16]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004958:	693b      	ldr	r3, [r7, #16]
 800495a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800495e:	613b      	str	r3, [r7, #16]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004960:	693b      	ldr	r3, [r7, #16]
 8004962:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004966:	613b      	str	r3, [r7, #16]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004968:	683b      	ldr	r3, [r7, #0]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	021b      	lsls	r3, r3, #8
 800496e:	693a      	ldr	r2, [r7, #16]
 8004970:	4313      	orrs	r3, r2
 8004972:	613b      	str	r3, [r7, #16]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800497a:	60fb      	str	r3, [r7, #12]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800497c:	683b      	ldr	r3, [r7, #0]
 800497e:	689b      	ldr	r3, [r3, #8]
 8004980:	031b      	lsls	r3, r3, #12
 8004982:	68fa      	ldr	r2, [r7, #12]
 8004984:	4313      	orrs	r3, r2
 8004986:	60fb      	str	r3, [r7, #12]

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	4a0f      	ldr	r2, [pc, #60]	; (80049c8 <TIM_OC4_SetConfig+0xa4>)
 800498c:	4293      	cmp	r3, r2
 800498e:	d109      	bne.n	80049a4 <TIM_OC4_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

   /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004990:	697b      	ldr	r3, [r7, #20]
 8004992:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004996:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6);
 8004998:	683b      	ldr	r3, [r7, #0]
 800499a:	695b      	ldr	r3, [r3, #20]
 800499c:	019b      	lsls	r3, r3, #6
 800499e:	697a      	ldr	r2, [r7, #20]
 80049a0:	4313      	orrs	r3, r2
 80049a2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	697a      	ldr	r2, [r7, #20]
 80049a8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	693a      	ldr	r2, [r7, #16]
 80049ae:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80049b0:	683b      	ldr	r3, [r7, #0]
 80049b2:	685a      	ldr	r2, [r3, #4]
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	68fa      	ldr	r2, [r7, #12]
 80049bc:	621a      	str	r2, [r3, #32]
}
 80049be:	bf00      	nop
 80049c0:	371c      	adds	r7, #28
 80049c2:	46bd      	mov	sp, r7
 80049c4:	bc80      	pop	{r7}
 80049c6:	4770      	bx	lr
 80049c8:	40012c00 	.word	0x40012c00

080049cc <TIM_CCxChannelCmd>:
  * @param  ChannelState : specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_Disable.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef* TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80049cc:	b480      	push	{r7}
 80049ce:	b087      	sub	sp, #28
 80049d0:	af00      	add	r7, sp, #0
 80049d2:	60f8      	str	r0, [r7, #12]
 80049d4:	60b9      	str	r1, [r7, #8]
 80049d6:	607a      	str	r2, [r7, #4]
  uint32_t tmp = 0U;
 80049d8:	2300      	movs	r3, #0
 80049da:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << Channel;
 80049dc:	2201      	movs	r2, #1
 80049de:	68bb      	ldr	r3, [r7, #8]
 80049e0:	fa02 f303 	lsl.w	r3, r2, r3
 80049e4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	6a1a      	ldr	r2, [r3, #32]
 80049ea:	697b      	ldr	r3, [r7, #20]
 80049ec:	43db      	mvns	r3, r3
 80049ee:	401a      	ands	r2, r3
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |=  (uint32_t)(ChannelState << Channel);
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	6a1a      	ldr	r2, [r3, #32]
 80049f8:	6879      	ldr	r1, [r7, #4]
 80049fa:	68bb      	ldr	r3, [r7, #8]
 80049fc:	fa01 f303 	lsl.w	r3, r1, r3
 8004a00:	431a      	orrs	r2, r3
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	621a      	str	r2, [r3, #32]
}
 8004a06:	bf00      	nop
 8004a08:	371c      	adds	r7, #28
 8004a0a:	46bd      	mov	sp, r7
 8004a0c:	bc80      	pop	{r7}
 8004a0e:	4770      	bx	lr

08004a10 <HAL_TIMEx_MasterConfigSynchronization>:
  *         contains the selected trigger output (TRGO) and the Master/Slave
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim, TIM_MasterConfigTypeDef * sMasterConfig)
{
 8004a10:	b480      	push	{r7}
 8004a12:	b083      	sub	sp, #12
 8004a14:	af00      	add	r7, sp, #0
 8004a16:	6078      	str	r0, [r7, #4]
 8004a18:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  __HAL_LOCK(htim);
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004a20:	2b01      	cmp	r3, #1
 8004a22:	d101      	bne.n	8004a28 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004a24:	2302      	movs	r3, #2
 8004a26:	e032      	b.n	8004a8e <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	2201      	movs	r2, #1
 8004a2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	2202      	movs	r2, #2
 8004a34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the MMS Bits */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	685a      	ldr	r2, [r3, #4]
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8004a46:	605a      	str	r2, [r3, #4]
  /* Select the TRGO source */
  htim->Instance->CR2 |=  sMasterConfig->MasterOutputTrigger;
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	6859      	ldr	r1, [r3, #4]
 8004a4e:	683b      	ldr	r3, [r7, #0]
 8004a50:	681a      	ldr	r2, [r3, #0]
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	430a      	orrs	r2, r1
 8004a58:	605a      	str	r2, [r3, #4]

  /* Reset the MSM Bit */
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	689a      	ldr	r2, [r3, #8]
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004a68:	609a      	str	r2, [r3, #8]
  /* Set or Reset the MSM Bit */
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	6899      	ldr	r1, [r3, #8]
 8004a70:	683b      	ldr	r3, [r7, #0]
 8004a72:	685a      	ldr	r2, [r3, #4]
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	430a      	orrs	r2, r1
 8004a7a:	609a      	str	r2, [r3, #8]

  htim->State = HAL_TIM_STATE_READY;
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	2201      	movs	r2, #1
 8004a80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	2200      	movs	r2, #0
 8004a88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004a8c:	2300      	movs	r3, #0
}
 8004a8e:	4618      	mov	r0, r3
 8004a90:	370c      	adds	r7, #12
 8004a92:	46bd      	mov	sp, r7
 8004a94:	bc80      	pop	{r7}
 8004a96:	4770      	bx	lr

08004a98 <__errno>:
 8004a98:	4b01      	ldr	r3, [pc, #4]	; (8004aa0 <__errno+0x8>)
 8004a9a:	6818      	ldr	r0, [r3, #0]
 8004a9c:	4770      	bx	lr
 8004a9e:	bf00      	nop
 8004aa0:	20000018 	.word	0x20000018

08004aa4 <__libc_init_array>:
 8004aa4:	b570      	push	{r4, r5, r6, lr}
 8004aa6:	2500      	movs	r5, #0
 8004aa8:	4e0c      	ldr	r6, [pc, #48]	; (8004adc <__libc_init_array+0x38>)
 8004aaa:	4c0d      	ldr	r4, [pc, #52]	; (8004ae0 <__libc_init_array+0x3c>)
 8004aac:	1ba4      	subs	r4, r4, r6
 8004aae:	10a4      	asrs	r4, r4, #2
 8004ab0:	42a5      	cmp	r5, r4
 8004ab2:	d109      	bne.n	8004ac8 <__libc_init_array+0x24>
 8004ab4:	f003 fd92 	bl	80085dc <_init>
 8004ab8:	2500      	movs	r5, #0
 8004aba:	4e0a      	ldr	r6, [pc, #40]	; (8004ae4 <__libc_init_array+0x40>)
 8004abc:	4c0a      	ldr	r4, [pc, #40]	; (8004ae8 <__libc_init_array+0x44>)
 8004abe:	1ba4      	subs	r4, r4, r6
 8004ac0:	10a4      	asrs	r4, r4, #2
 8004ac2:	42a5      	cmp	r5, r4
 8004ac4:	d105      	bne.n	8004ad2 <__libc_init_array+0x2e>
 8004ac6:	bd70      	pop	{r4, r5, r6, pc}
 8004ac8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004acc:	4798      	blx	r3
 8004ace:	3501      	adds	r5, #1
 8004ad0:	e7ee      	b.n	8004ab0 <__libc_init_array+0xc>
 8004ad2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004ad6:	4798      	blx	r3
 8004ad8:	3501      	adds	r5, #1
 8004ada:	e7f2      	b.n	8004ac2 <__libc_init_array+0x1e>
 8004adc:	08008fa0 	.word	0x08008fa0
 8004ae0:	08008fa0 	.word	0x08008fa0
 8004ae4:	08008fa0 	.word	0x08008fa0
 8004ae8:	08008fa4 	.word	0x08008fa4

08004aec <memcpy>:
 8004aec:	b510      	push	{r4, lr}
 8004aee:	1e43      	subs	r3, r0, #1
 8004af0:	440a      	add	r2, r1
 8004af2:	4291      	cmp	r1, r2
 8004af4:	d100      	bne.n	8004af8 <memcpy+0xc>
 8004af6:	bd10      	pop	{r4, pc}
 8004af8:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004afc:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004b00:	e7f7      	b.n	8004af2 <memcpy+0x6>

08004b02 <memmove>:
 8004b02:	4288      	cmp	r0, r1
 8004b04:	b510      	push	{r4, lr}
 8004b06:	eb01 0302 	add.w	r3, r1, r2
 8004b0a:	d807      	bhi.n	8004b1c <memmove+0x1a>
 8004b0c:	1e42      	subs	r2, r0, #1
 8004b0e:	4299      	cmp	r1, r3
 8004b10:	d00a      	beq.n	8004b28 <memmove+0x26>
 8004b12:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004b16:	f802 4f01 	strb.w	r4, [r2, #1]!
 8004b1a:	e7f8      	b.n	8004b0e <memmove+0xc>
 8004b1c:	4283      	cmp	r3, r0
 8004b1e:	d9f5      	bls.n	8004b0c <memmove+0xa>
 8004b20:	1881      	adds	r1, r0, r2
 8004b22:	1ad2      	subs	r2, r2, r3
 8004b24:	42d3      	cmn	r3, r2
 8004b26:	d100      	bne.n	8004b2a <memmove+0x28>
 8004b28:	bd10      	pop	{r4, pc}
 8004b2a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004b2e:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8004b32:	e7f7      	b.n	8004b24 <memmove+0x22>

08004b34 <memset>:
 8004b34:	4603      	mov	r3, r0
 8004b36:	4402      	add	r2, r0
 8004b38:	4293      	cmp	r3, r2
 8004b3a:	d100      	bne.n	8004b3e <memset+0xa>
 8004b3c:	4770      	bx	lr
 8004b3e:	f803 1b01 	strb.w	r1, [r3], #1
 8004b42:	e7f9      	b.n	8004b38 <memset+0x4>

08004b44 <__cvt>:
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004b4a:	461e      	mov	r6, r3
 8004b4c:	bfbb      	ittet	lt
 8004b4e:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8004b52:	461e      	movlt	r6, r3
 8004b54:	2300      	movge	r3, #0
 8004b56:	232d      	movlt	r3, #45	; 0x2d
 8004b58:	b088      	sub	sp, #32
 8004b5a:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8004b5c:	e9dd 1a12 	ldrd	r1, sl, [sp, #72]	; 0x48
 8004b60:	f027 0720 	bic.w	r7, r7, #32
 8004b64:	2f46      	cmp	r7, #70	; 0x46
 8004b66:	4614      	mov	r4, r2
 8004b68:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8004b6a:	700b      	strb	r3, [r1, #0]
 8004b6c:	d004      	beq.n	8004b78 <__cvt+0x34>
 8004b6e:	2f45      	cmp	r7, #69	; 0x45
 8004b70:	d100      	bne.n	8004b74 <__cvt+0x30>
 8004b72:	3501      	adds	r5, #1
 8004b74:	2302      	movs	r3, #2
 8004b76:	e000      	b.n	8004b7a <__cvt+0x36>
 8004b78:	2303      	movs	r3, #3
 8004b7a:	aa07      	add	r2, sp, #28
 8004b7c:	9204      	str	r2, [sp, #16]
 8004b7e:	aa06      	add	r2, sp, #24
 8004b80:	e9cd a202 	strd	sl, r2, [sp, #8]
 8004b84:	e9cd 3500 	strd	r3, r5, [sp]
 8004b88:	4622      	mov	r2, r4
 8004b8a:	4633      	mov	r3, r6
 8004b8c:	f001 fdb0 	bl	80066f0 <_dtoa_r>
 8004b90:	2f47      	cmp	r7, #71	; 0x47
 8004b92:	4680      	mov	r8, r0
 8004b94:	d102      	bne.n	8004b9c <__cvt+0x58>
 8004b96:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8004b98:	07db      	lsls	r3, r3, #31
 8004b9a:	d526      	bpl.n	8004bea <__cvt+0xa6>
 8004b9c:	2f46      	cmp	r7, #70	; 0x46
 8004b9e:	eb08 0905 	add.w	r9, r8, r5
 8004ba2:	d111      	bne.n	8004bc8 <__cvt+0x84>
 8004ba4:	f898 3000 	ldrb.w	r3, [r8]
 8004ba8:	2b30      	cmp	r3, #48	; 0x30
 8004baa:	d10a      	bne.n	8004bc2 <__cvt+0x7e>
 8004bac:	2200      	movs	r2, #0
 8004bae:	2300      	movs	r3, #0
 8004bb0:	4620      	mov	r0, r4
 8004bb2:	4631      	mov	r1, r6
 8004bb4:	f7fb fef8 	bl	80009a8 <__aeabi_dcmpeq>
 8004bb8:	b918      	cbnz	r0, 8004bc2 <__cvt+0x7e>
 8004bba:	f1c5 0501 	rsb	r5, r5, #1
 8004bbe:	f8ca 5000 	str.w	r5, [sl]
 8004bc2:	f8da 3000 	ldr.w	r3, [sl]
 8004bc6:	4499      	add	r9, r3
 8004bc8:	2200      	movs	r2, #0
 8004bca:	2300      	movs	r3, #0
 8004bcc:	4620      	mov	r0, r4
 8004bce:	4631      	mov	r1, r6
 8004bd0:	f7fb feea 	bl	80009a8 <__aeabi_dcmpeq>
 8004bd4:	b938      	cbnz	r0, 8004be6 <__cvt+0xa2>
 8004bd6:	2230      	movs	r2, #48	; 0x30
 8004bd8:	9b07      	ldr	r3, [sp, #28]
 8004bda:	454b      	cmp	r3, r9
 8004bdc:	d205      	bcs.n	8004bea <__cvt+0xa6>
 8004bde:	1c59      	adds	r1, r3, #1
 8004be0:	9107      	str	r1, [sp, #28]
 8004be2:	701a      	strb	r2, [r3, #0]
 8004be4:	e7f8      	b.n	8004bd8 <__cvt+0x94>
 8004be6:	f8cd 901c 	str.w	r9, [sp, #28]
 8004bea:	4640      	mov	r0, r8
 8004bec:	9b07      	ldr	r3, [sp, #28]
 8004bee:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8004bf0:	eba3 0308 	sub.w	r3, r3, r8
 8004bf4:	6013      	str	r3, [r2, #0]
 8004bf6:	b008      	add	sp, #32
 8004bf8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08004bfc <__exponent>:
 8004bfc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004bfe:	2900      	cmp	r1, #0
 8004c00:	bfb4      	ite	lt
 8004c02:	232d      	movlt	r3, #45	; 0x2d
 8004c04:	232b      	movge	r3, #43	; 0x2b
 8004c06:	4604      	mov	r4, r0
 8004c08:	bfb8      	it	lt
 8004c0a:	4249      	neglt	r1, r1
 8004c0c:	2909      	cmp	r1, #9
 8004c0e:	f804 2b02 	strb.w	r2, [r4], #2
 8004c12:	7043      	strb	r3, [r0, #1]
 8004c14:	dd21      	ble.n	8004c5a <__exponent+0x5e>
 8004c16:	f10d 0307 	add.w	r3, sp, #7
 8004c1a:	461f      	mov	r7, r3
 8004c1c:	260a      	movs	r6, #10
 8004c1e:	fb91 f5f6 	sdiv	r5, r1, r6
 8004c22:	fb06 1115 	mls	r1, r6, r5, r1
 8004c26:	2d09      	cmp	r5, #9
 8004c28:	f101 0130 	add.w	r1, r1, #48	; 0x30
 8004c2c:	f803 1c01 	strb.w	r1, [r3, #-1]
 8004c30:	f103 32ff 	add.w	r2, r3, #4294967295	; 0xffffffff
 8004c34:	4629      	mov	r1, r5
 8004c36:	dc09      	bgt.n	8004c4c <__exponent+0x50>
 8004c38:	3130      	adds	r1, #48	; 0x30
 8004c3a:	3b02      	subs	r3, #2
 8004c3c:	f802 1c01 	strb.w	r1, [r2, #-1]
 8004c40:	42bb      	cmp	r3, r7
 8004c42:	4622      	mov	r2, r4
 8004c44:	d304      	bcc.n	8004c50 <__exponent+0x54>
 8004c46:	1a10      	subs	r0, r2, r0
 8004c48:	b003      	add	sp, #12
 8004c4a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004c4c:	4613      	mov	r3, r2
 8004c4e:	e7e6      	b.n	8004c1e <__exponent+0x22>
 8004c50:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004c54:	f804 2b01 	strb.w	r2, [r4], #1
 8004c58:	e7f2      	b.n	8004c40 <__exponent+0x44>
 8004c5a:	2330      	movs	r3, #48	; 0x30
 8004c5c:	4419      	add	r1, r3
 8004c5e:	7083      	strb	r3, [r0, #2]
 8004c60:	1d02      	adds	r2, r0, #4
 8004c62:	70c1      	strb	r1, [r0, #3]
 8004c64:	e7ef      	b.n	8004c46 <__exponent+0x4a>
	...

08004c68 <_printf_float>:
 8004c68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004c6c:	b091      	sub	sp, #68	; 0x44
 8004c6e:	460c      	mov	r4, r1
 8004c70:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 8004c72:	4693      	mov	fp, r2
 8004c74:	461e      	mov	r6, r3
 8004c76:	4605      	mov	r5, r0
 8004c78:	f002 fe1c 	bl	80078b4 <_localeconv_r>
 8004c7c:	6803      	ldr	r3, [r0, #0]
 8004c7e:	4618      	mov	r0, r3
 8004c80:	9309      	str	r3, [sp, #36]	; 0x24
 8004c82:	f7fb fa65 	bl	8000150 <strlen>
 8004c86:	2300      	movs	r3, #0
 8004c88:	930e      	str	r3, [sp, #56]	; 0x38
 8004c8a:	683b      	ldr	r3, [r7, #0]
 8004c8c:	900a      	str	r0, [sp, #40]	; 0x28
 8004c8e:	3307      	adds	r3, #7
 8004c90:	f023 0307 	bic.w	r3, r3, #7
 8004c94:	f103 0208 	add.w	r2, r3, #8
 8004c98:	f894 8018 	ldrb.w	r8, [r4, #24]
 8004c9c:	f8d4 a000 	ldr.w	sl, [r4]
 8004ca0:	603a      	str	r2, [r7, #0]
 8004ca2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ca6:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8004caa:	e9d4 7912 	ldrd	r7, r9, [r4, #72]	; 0x48
 8004cae:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8004cb2:	930b      	str	r3, [sp, #44]	; 0x2c
 8004cb4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004cb8:	4ba6      	ldr	r3, [pc, #664]	; (8004f54 <_printf_float+0x2ec>)
 8004cba:	4638      	mov	r0, r7
 8004cbc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004cbe:	f7fb fea5 	bl	8000a0c <__aeabi_dcmpun>
 8004cc2:	bb68      	cbnz	r0, 8004d20 <_printf_float+0xb8>
 8004cc4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004cc8:	4ba2      	ldr	r3, [pc, #648]	; (8004f54 <_printf_float+0x2ec>)
 8004cca:	4638      	mov	r0, r7
 8004ccc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004cce:	f7fb fe7f 	bl	80009d0 <__aeabi_dcmple>
 8004cd2:	bb28      	cbnz	r0, 8004d20 <_printf_float+0xb8>
 8004cd4:	2200      	movs	r2, #0
 8004cd6:	2300      	movs	r3, #0
 8004cd8:	4638      	mov	r0, r7
 8004cda:	4649      	mov	r1, r9
 8004cdc:	f7fb fe6e 	bl	80009bc <__aeabi_dcmplt>
 8004ce0:	b110      	cbz	r0, 8004ce8 <_printf_float+0x80>
 8004ce2:	232d      	movs	r3, #45	; 0x2d
 8004ce4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004ce8:	4f9b      	ldr	r7, [pc, #620]	; (8004f58 <_printf_float+0x2f0>)
 8004cea:	4b9c      	ldr	r3, [pc, #624]	; (8004f5c <_printf_float+0x2f4>)
 8004cec:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8004cf0:	bf98      	it	ls
 8004cf2:	461f      	movls	r7, r3
 8004cf4:	2303      	movs	r3, #3
 8004cf6:	f04f 0900 	mov.w	r9, #0
 8004cfa:	6123      	str	r3, [r4, #16]
 8004cfc:	f02a 0304 	bic.w	r3, sl, #4
 8004d00:	6023      	str	r3, [r4, #0]
 8004d02:	9600      	str	r6, [sp, #0]
 8004d04:	465b      	mov	r3, fp
 8004d06:	aa0f      	add	r2, sp, #60	; 0x3c
 8004d08:	4621      	mov	r1, r4
 8004d0a:	4628      	mov	r0, r5
 8004d0c:	f000 f9e2 	bl	80050d4 <_printf_common>
 8004d10:	3001      	adds	r0, #1
 8004d12:	f040 8090 	bne.w	8004e36 <_printf_float+0x1ce>
 8004d16:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004d1a:	b011      	add	sp, #68	; 0x44
 8004d1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004d20:	463a      	mov	r2, r7
 8004d22:	464b      	mov	r3, r9
 8004d24:	4638      	mov	r0, r7
 8004d26:	4649      	mov	r1, r9
 8004d28:	f7fb fe70 	bl	8000a0c <__aeabi_dcmpun>
 8004d2c:	b110      	cbz	r0, 8004d34 <_printf_float+0xcc>
 8004d2e:	4f8c      	ldr	r7, [pc, #560]	; (8004f60 <_printf_float+0x2f8>)
 8004d30:	4b8c      	ldr	r3, [pc, #560]	; (8004f64 <_printf_float+0x2fc>)
 8004d32:	e7db      	b.n	8004cec <_printf_float+0x84>
 8004d34:	6863      	ldr	r3, [r4, #4]
 8004d36:	f44a 6280 	orr.w	r2, sl, #1024	; 0x400
 8004d3a:	1c59      	adds	r1, r3, #1
 8004d3c:	a80d      	add	r0, sp, #52	; 0x34
 8004d3e:	a90e      	add	r1, sp, #56	; 0x38
 8004d40:	d140      	bne.n	8004dc4 <_printf_float+0x15c>
 8004d42:	2306      	movs	r3, #6
 8004d44:	6063      	str	r3, [r4, #4]
 8004d46:	f04f 0c00 	mov.w	ip, #0
 8004d4a:	f10d 0333 	add.w	r3, sp, #51	; 0x33
 8004d4e:	e9cd 2301 	strd	r2, r3, [sp, #4]
 8004d52:	6863      	ldr	r3, [r4, #4]
 8004d54:	6022      	str	r2, [r4, #0]
 8004d56:	e9cd 0803 	strd	r0, r8, [sp, #12]
 8004d5a:	9300      	str	r3, [sp, #0]
 8004d5c:	463a      	mov	r2, r7
 8004d5e:	464b      	mov	r3, r9
 8004d60:	e9cd 1c05 	strd	r1, ip, [sp, #20]
 8004d64:	4628      	mov	r0, r5
 8004d66:	f7ff feed 	bl	8004b44 <__cvt>
 8004d6a:	f008 03df 	and.w	r3, r8, #223	; 0xdf
 8004d6e:	2b47      	cmp	r3, #71	; 0x47
 8004d70:	4607      	mov	r7, r0
 8004d72:	d109      	bne.n	8004d88 <_printf_float+0x120>
 8004d74:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004d76:	1cd8      	adds	r0, r3, #3
 8004d78:	db02      	blt.n	8004d80 <_printf_float+0x118>
 8004d7a:	6862      	ldr	r2, [r4, #4]
 8004d7c:	4293      	cmp	r3, r2
 8004d7e:	dd47      	ble.n	8004e10 <_printf_float+0x1a8>
 8004d80:	f1a8 0802 	sub.w	r8, r8, #2
 8004d84:	fa5f f888 	uxtb.w	r8, r8
 8004d88:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 8004d8c:	990d      	ldr	r1, [sp, #52]	; 0x34
 8004d8e:	d824      	bhi.n	8004dda <_printf_float+0x172>
 8004d90:	3901      	subs	r1, #1
 8004d92:	4642      	mov	r2, r8
 8004d94:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8004d98:	910d      	str	r1, [sp, #52]	; 0x34
 8004d9a:	f7ff ff2f 	bl	8004bfc <__exponent>
 8004d9e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004da0:	4681      	mov	r9, r0
 8004da2:	1813      	adds	r3, r2, r0
 8004da4:	2a01      	cmp	r2, #1
 8004da6:	6123      	str	r3, [r4, #16]
 8004da8:	dc02      	bgt.n	8004db0 <_printf_float+0x148>
 8004daa:	6822      	ldr	r2, [r4, #0]
 8004dac:	07d1      	lsls	r1, r2, #31
 8004dae:	d501      	bpl.n	8004db4 <_printf_float+0x14c>
 8004db0:	3301      	adds	r3, #1
 8004db2:	6123      	str	r3, [r4, #16]
 8004db4:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d0a2      	beq.n	8004d02 <_printf_float+0x9a>
 8004dbc:	232d      	movs	r3, #45	; 0x2d
 8004dbe:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004dc2:	e79e      	b.n	8004d02 <_printf_float+0x9a>
 8004dc4:	f1b8 0f67 	cmp.w	r8, #103	; 0x67
 8004dc8:	f000 816e 	beq.w	80050a8 <_printf_float+0x440>
 8004dcc:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8004dd0:	d1b9      	bne.n	8004d46 <_printf_float+0xde>
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d1b7      	bne.n	8004d46 <_printf_float+0xde>
 8004dd6:	2301      	movs	r3, #1
 8004dd8:	e7b4      	b.n	8004d44 <_printf_float+0xdc>
 8004dda:	f1b8 0f66 	cmp.w	r8, #102	; 0x66
 8004dde:	d119      	bne.n	8004e14 <_printf_float+0x1ac>
 8004de0:	2900      	cmp	r1, #0
 8004de2:	6863      	ldr	r3, [r4, #4]
 8004de4:	dd0c      	ble.n	8004e00 <_printf_float+0x198>
 8004de6:	6121      	str	r1, [r4, #16]
 8004de8:	b913      	cbnz	r3, 8004df0 <_printf_float+0x188>
 8004dea:	6822      	ldr	r2, [r4, #0]
 8004dec:	07d2      	lsls	r2, r2, #31
 8004dee:	d502      	bpl.n	8004df6 <_printf_float+0x18e>
 8004df0:	3301      	adds	r3, #1
 8004df2:	440b      	add	r3, r1
 8004df4:	6123      	str	r3, [r4, #16]
 8004df6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004df8:	f04f 0900 	mov.w	r9, #0
 8004dfc:	65a3      	str	r3, [r4, #88]	; 0x58
 8004dfe:	e7d9      	b.n	8004db4 <_printf_float+0x14c>
 8004e00:	b913      	cbnz	r3, 8004e08 <_printf_float+0x1a0>
 8004e02:	6822      	ldr	r2, [r4, #0]
 8004e04:	07d0      	lsls	r0, r2, #31
 8004e06:	d501      	bpl.n	8004e0c <_printf_float+0x1a4>
 8004e08:	3302      	adds	r3, #2
 8004e0a:	e7f3      	b.n	8004df4 <_printf_float+0x18c>
 8004e0c:	2301      	movs	r3, #1
 8004e0e:	e7f1      	b.n	8004df4 <_printf_float+0x18c>
 8004e10:	f04f 0867 	mov.w	r8, #103	; 0x67
 8004e14:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 8004e18:	4293      	cmp	r3, r2
 8004e1a:	db05      	blt.n	8004e28 <_printf_float+0x1c0>
 8004e1c:	6822      	ldr	r2, [r4, #0]
 8004e1e:	6123      	str	r3, [r4, #16]
 8004e20:	07d1      	lsls	r1, r2, #31
 8004e22:	d5e8      	bpl.n	8004df6 <_printf_float+0x18e>
 8004e24:	3301      	adds	r3, #1
 8004e26:	e7e5      	b.n	8004df4 <_printf_float+0x18c>
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	bfcc      	ite	gt
 8004e2c:	2301      	movgt	r3, #1
 8004e2e:	f1c3 0302 	rsble	r3, r3, #2
 8004e32:	4413      	add	r3, r2
 8004e34:	e7de      	b.n	8004df4 <_printf_float+0x18c>
 8004e36:	6823      	ldr	r3, [r4, #0]
 8004e38:	055a      	lsls	r2, r3, #21
 8004e3a:	d407      	bmi.n	8004e4c <_printf_float+0x1e4>
 8004e3c:	6923      	ldr	r3, [r4, #16]
 8004e3e:	463a      	mov	r2, r7
 8004e40:	4659      	mov	r1, fp
 8004e42:	4628      	mov	r0, r5
 8004e44:	47b0      	blx	r6
 8004e46:	3001      	adds	r0, #1
 8004e48:	d129      	bne.n	8004e9e <_printf_float+0x236>
 8004e4a:	e764      	b.n	8004d16 <_printf_float+0xae>
 8004e4c:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 8004e50:	f240 80d7 	bls.w	8005002 <_printf_float+0x39a>
 8004e54:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004e58:	2200      	movs	r2, #0
 8004e5a:	2300      	movs	r3, #0
 8004e5c:	f7fb fda4 	bl	80009a8 <__aeabi_dcmpeq>
 8004e60:	b388      	cbz	r0, 8004ec6 <_printf_float+0x25e>
 8004e62:	2301      	movs	r3, #1
 8004e64:	4a40      	ldr	r2, [pc, #256]	; (8004f68 <_printf_float+0x300>)
 8004e66:	4659      	mov	r1, fp
 8004e68:	4628      	mov	r0, r5
 8004e6a:	47b0      	blx	r6
 8004e6c:	3001      	adds	r0, #1
 8004e6e:	f43f af52 	beq.w	8004d16 <_printf_float+0xae>
 8004e72:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8004e76:	429a      	cmp	r2, r3
 8004e78:	db02      	blt.n	8004e80 <_printf_float+0x218>
 8004e7a:	6823      	ldr	r3, [r4, #0]
 8004e7c:	07d8      	lsls	r0, r3, #31
 8004e7e:	d50e      	bpl.n	8004e9e <_printf_float+0x236>
 8004e80:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004e84:	4659      	mov	r1, fp
 8004e86:	4628      	mov	r0, r5
 8004e88:	47b0      	blx	r6
 8004e8a:	3001      	adds	r0, #1
 8004e8c:	f43f af43 	beq.w	8004d16 <_printf_float+0xae>
 8004e90:	2700      	movs	r7, #0
 8004e92:	f104 081a 	add.w	r8, r4, #26
 8004e96:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004e98:	3b01      	subs	r3, #1
 8004e9a:	42bb      	cmp	r3, r7
 8004e9c:	dc09      	bgt.n	8004eb2 <_printf_float+0x24a>
 8004e9e:	6823      	ldr	r3, [r4, #0]
 8004ea0:	079f      	lsls	r7, r3, #30
 8004ea2:	f100 80fd 	bmi.w	80050a0 <_printf_float+0x438>
 8004ea6:	68e0      	ldr	r0, [r4, #12]
 8004ea8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004eaa:	4298      	cmp	r0, r3
 8004eac:	bfb8      	it	lt
 8004eae:	4618      	movlt	r0, r3
 8004eb0:	e733      	b.n	8004d1a <_printf_float+0xb2>
 8004eb2:	2301      	movs	r3, #1
 8004eb4:	4642      	mov	r2, r8
 8004eb6:	4659      	mov	r1, fp
 8004eb8:	4628      	mov	r0, r5
 8004eba:	47b0      	blx	r6
 8004ebc:	3001      	adds	r0, #1
 8004ebe:	f43f af2a 	beq.w	8004d16 <_printf_float+0xae>
 8004ec2:	3701      	adds	r7, #1
 8004ec4:	e7e7      	b.n	8004e96 <_printf_float+0x22e>
 8004ec6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	dc2b      	bgt.n	8004f24 <_printf_float+0x2bc>
 8004ecc:	2301      	movs	r3, #1
 8004ece:	4a26      	ldr	r2, [pc, #152]	; (8004f68 <_printf_float+0x300>)
 8004ed0:	4659      	mov	r1, fp
 8004ed2:	4628      	mov	r0, r5
 8004ed4:	47b0      	blx	r6
 8004ed6:	3001      	adds	r0, #1
 8004ed8:	f43f af1d 	beq.w	8004d16 <_printf_float+0xae>
 8004edc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004ede:	b923      	cbnz	r3, 8004eea <_printf_float+0x282>
 8004ee0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004ee2:	b913      	cbnz	r3, 8004eea <_printf_float+0x282>
 8004ee4:	6823      	ldr	r3, [r4, #0]
 8004ee6:	07d9      	lsls	r1, r3, #31
 8004ee8:	d5d9      	bpl.n	8004e9e <_printf_float+0x236>
 8004eea:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004eee:	4659      	mov	r1, fp
 8004ef0:	4628      	mov	r0, r5
 8004ef2:	47b0      	blx	r6
 8004ef4:	3001      	adds	r0, #1
 8004ef6:	f43f af0e 	beq.w	8004d16 <_printf_float+0xae>
 8004efa:	f04f 0800 	mov.w	r8, #0
 8004efe:	f104 091a 	add.w	r9, r4, #26
 8004f02:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004f04:	425b      	negs	r3, r3
 8004f06:	4543      	cmp	r3, r8
 8004f08:	dc01      	bgt.n	8004f0e <_printf_float+0x2a6>
 8004f0a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004f0c:	e797      	b.n	8004e3e <_printf_float+0x1d6>
 8004f0e:	2301      	movs	r3, #1
 8004f10:	464a      	mov	r2, r9
 8004f12:	4659      	mov	r1, fp
 8004f14:	4628      	mov	r0, r5
 8004f16:	47b0      	blx	r6
 8004f18:	3001      	adds	r0, #1
 8004f1a:	f43f aefc 	beq.w	8004d16 <_printf_float+0xae>
 8004f1e:	f108 0801 	add.w	r8, r8, #1
 8004f22:	e7ee      	b.n	8004f02 <_printf_float+0x29a>
 8004f24:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004f26:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004f28:	429a      	cmp	r2, r3
 8004f2a:	bfa8      	it	ge
 8004f2c:	461a      	movge	r2, r3
 8004f2e:	2a00      	cmp	r2, #0
 8004f30:	4690      	mov	r8, r2
 8004f32:	dd07      	ble.n	8004f44 <_printf_float+0x2dc>
 8004f34:	4613      	mov	r3, r2
 8004f36:	4659      	mov	r1, fp
 8004f38:	463a      	mov	r2, r7
 8004f3a:	4628      	mov	r0, r5
 8004f3c:	47b0      	blx	r6
 8004f3e:	3001      	adds	r0, #1
 8004f40:	f43f aee9 	beq.w	8004d16 <_printf_float+0xae>
 8004f44:	f104 031a 	add.w	r3, r4, #26
 8004f48:	f04f 0a00 	mov.w	sl, #0
 8004f4c:	ea28 78e8 	bic.w	r8, r8, r8, asr #31
 8004f50:	930b      	str	r3, [sp, #44]	; 0x2c
 8004f52:	e015      	b.n	8004f80 <_printf_float+0x318>
 8004f54:	7fefffff 	.word	0x7fefffff
 8004f58:	08008cec 	.word	0x08008cec
 8004f5c:	08008ce8 	.word	0x08008ce8
 8004f60:	08008cf4 	.word	0x08008cf4
 8004f64:	08008cf0 	.word	0x08008cf0
 8004f68:	08008cf8 	.word	0x08008cf8
 8004f6c:	2301      	movs	r3, #1
 8004f6e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8004f70:	4659      	mov	r1, fp
 8004f72:	4628      	mov	r0, r5
 8004f74:	47b0      	blx	r6
 8004f76:	3001      	adds	r0, #1
 8004f78:	f43f aecd 	beq.w	8004d16 <_printf_float+0xae>
 8004f7c:	f10a 0a01 	add.w	sl, sl, #1
 8004f80:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
 8004f84:	eba9 0308 	sub.w	r3, r9, r8
 8004f88:	4553      	cmp	r3, sl
 8004f8a:	dcef      	bgt.n	8004f6c <_printf_float+0x304>
 8004f8c:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8004f90:	429a      	cmp	r2, r3
 8004f92:	444f      	add	r7, r9
 8004f94:	db14      	blt.n	8004fc0 <_printf_float+0x358>
 8004f96:	6823      	ldr	r3, [r4, #0]
 8004f98:	07da      	lsls	r2, r3, #31
 8004f9a:	d411      	bmi.n	8004fc0 <_printf_float+0x358>
 8004f9c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004f9e:	990d      	ldr	r1, [sp, #52]	; 0x34
 8004fa0:	eba3 0209 	sub.w	r2, r3, r9
 8004fa4:	eba3 0901 	sub.w	r9, r3, r1
 8004fa8:	4591      	cmp	r9, r2
 8004faa:	bfa8      	it	ge
 8004fac:	4691      	movge	r9, r2
 8004fae:	f1b9 0f00 	cmp.w	r9, #0
 8004fb2:	dc0d      	bgt.n	8004fd0 <_printf_float+0x368>
 8004fb4:	2700      	movs	r7, #0
 8004fb6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004fba:	f104 081a 	add.w	r8, r4, #26
 8004fbe:	e018      	b.n	8004ff2 <_printf_float+0x38a>
 8004fc0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004fc4:	4659      	mov	r1, fp
 8004fc6:	4628      	mov	r0, r5
 8004fc8:	47b0      	blx	r6
 8004fca:	3001      	adds	r0, #1
 8004fcc:	d1e6      	bne.n	8004f9c <_printf_float+0x334>
 8004fce:	e6a2      	b.n	8004d16 <_printf_float+0xae>
 8004fd0:	464b      	mov	r3, r9
 8004fd2:	463a      	mov	r2, r7
 8004fd4:	4659      	mov	r1, fp
 8004fd6:	4628      	mov	r0, r5
 8004fd8:	47b0      	blx	r6
 8004fda:	3001      	adds	r0, #1
 8004fdc:	d1ea      	bne.n	8004fb4 <_printf_float+0x34c>
 8004fde:	e69a      	b.n	8004d16 <_printf_float+0xae>
 8004fe0:	2301      	movs	r3, #1
 8004fe2:	4642      	mov	r2, r8
 8004fe4:	4659      	mov	r1, fp
 8004fe6:	4628      	mov	r0, r5
 8004fe8:	47b0      	blx	r6
 8004fea:	3001      	adds	r0, #1
 8004fec:	f43f ae93 	beq.w	8004d16 <_printf_float+0xae>
 8004ff0:	3701      	adds	r7, #1
 8004ff2:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8004ff6:	1a9b      	subs	r3, r3, r2
 8004ff8:	eba3 0309 	sub.w	r3, r3, r9
 8004ffc:	42bb      	cmp	r3, r7
 8004ffe:	dcef      	bgt.n	8004fe0 <_printf_float+0x378>
 8005000:	e74d      	b.n	8004e9e <_printf_float+0x236>
 8005002:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005004:	2a01      	cmp	r2, #1
 8005006:	dc01      	bgt.n	800500c <_printf_float+0x3a4>
 8005008:	07db      	lsls	r3, r3, #31
 800500a:	d538      	bpl.n	800507e <_printf_float+0x416>
 800500c:	2301      	movs	r3, #1
 800500e:	463a      	mov	r2, r7
 8005010:	4659      	mov	r1, fp
 8005012:	4628      	mov	r0, r5
 8005014:	47b0      	blx	r6
 8005016:	3001      	adds	r0, #1
 8005018:	f43f ae7d 	beq.w	8004d16 <_printf_float+0xae>
 800501c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005020:	4659      	mov	r1, fp
 8005022:	4628      	mov	r0, r5
 8005024:	47b0      	blx	r6
 8005026:	3001      	adds	r0, #1
 8005028:	f107 0701 	add.w	r7, r7, #1
 800502c:	f43f ae73 	beq.w	8004d16 <_printf_float+0xae>
 8005030:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005034:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005036:	2200      	movs	r2, #0
 8005038:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 800503c:	2300      	movs	r3, #0
 800503e:	f7fb fcb3 	bl	80009a8 <__aeabi_dcmpeq>
 8005042:	b9c0      	cbnz	r0, 8005076 <_printf_float+0x40e>
 8005044:	4643      	mov	r3, r8
 8005046:	463a      	mov	r2, r7
 8005048:	4659      	mov	r1, fp
 800504a:	4628      	mov	r0, r5
 800504c:	47b0      	blx	r6
 800504e:	3001      	adds	r0, #1
 8005050:	d10d      	bne.n	800506e <_printf_float+0x406>
 8005052:	e660      	b.n	8004d16 <_printf_float+0xae>
 8005054:	2301      	movs	r3, #1
 8005056:	4642      	mov	r2, r8
 8005058:	4659      	mov	r1, fp
 800505a:	4628      	mov	r0, r5
 800505c:	47b0      	blx	r6
 800505e:	3001      	adds	r0, #1
 8005060:	f43f ae59 	beq.w	8004d16 <_printf_float+0xae>
 8005064:	3701      	adds	r7, #1
 8005066:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005068:	3b01      	subs	r3, #1
 800506a:	42bb      	cmp	r3, r7
 800506c:	dcf2      	bgt.n	8005054 <_printf_float+0x3ec>
 800506e:	464b      	mov	r3, r9
 8005070:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8005074:	e6e4      	b.n	8004e40 <_printf_float+0x1d8>
 8005076:	2700      	movs	r7, #0
 8005078:	f104 081a 	add.w	r8, r4, #26
 800507c:	e7f3      	b.n	8005066 <_printf_float+0x3fe>
 800507e:	2301      	movs	r3, #1
 8005080:	e7e1      	b.n	8005046 <_printf_float+0x3de>
 8005082:	2301      	movs	r3, #1
 8005084:	4642      	mov	r2, r8
 8005086:	4659      	mov	r1, fp
 8005088:	4628      	mov	r0, r5
 800508a:	47b0      	blx	r6
 800508c:	3001      	adds	r0, #1
 800508e:	f43f ae42 	beq.w	8004d16 <_printf_float+0xae>
 8005092:	3701      	adds	r7, #1
 8005094:	68e3      	ldr	r3, [r4, #12]
 8005096:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8005098:	1a9b      	subs	r3, r3, r2
 800509a:	42bb      	cmp	r3, r7
 800509c:	dcf1      	bgt.n	8005082 <_printf_float+0x41a>
 800509e:	e702      	b.n	8004ea6 <_printf_float+0x23e>
 80050a0:	2700      	movs	r7, #0
 80050a2:	f104 0819 	add.w	r8, r4, #25
 80050a6:	e7f5      	b.n	8005094 <_printf_float+0x42c>
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	f43f ae94 	beq.w	8004dd6 <_printf_float+0x16e>
 80050ae:	f04f 0c00 	mov.w	ip, #0
 80050b2:	e9cd 1c05 	strd	r1, ip, [sp, #20]
 80050b6:	f10d 0133 	add.w	r1, sp, #51	; 0x33
 80050ba:	6022      	str	r2, [r4, #0]
 80050bc:	e9cd 0803 	strd	r0, r8, [sp, #12]
 80050c0:	e9cd 2101 	strd	r2, r1, [sp, #4]
 80050c4:	9300      	str	r3, [sp, #0]
 80050c6:	463a      	mov	r2, r7
 80050c8:	464b      	mov	r3, r9
 80050ca:	4628      	mov	r0, r5
 80050cc:	f7ff fd3a 	bl	8004b44 <__cvt>
 80050d0:	4607      	mov	r7, r0
 80050d2:	e64f      	b.n	8004d74 <_printf_float+0x10c>

080050d4 <_printf_common>:
 80050d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80050d8:	4691      	mov	r9, r2
 80050da:	461f      	mov	r7, r3
 80050dc:	688a      	ldr	r2, [r1, #8]
 80050de:	690b      	ldr	r3, [r1, #16]
 80050e0:	4606      	mov	r6, r0
 80050e2:	4293      	cmp	r3, r2
 80050e4:	bfb8      	it	lt
 80050e6:	4613      	movlt	r3, r2
 80050e8:	f8c9 3000 	str.w	r3, [r9]
 80050ec:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80050f0:	460c      	mov	r4, r1
 80050f2:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80050f6:	b112      	cbz	r2, 80050fe <_printf_common+0x2a>
 80050f8:	3301      	adds	r3, #1
 80050fa:	f8c9 3000 	str.w	r3, [r9]
 80050fe:	6823      	ldr	r3, [r4, #0]
 8005100:	0699      	lsls	r1, r3, #26
 8005102:	bf42      	ittt	mi
 8005104:	f8d9 3000 	ldrmi.w	r3, [r9]
 8005108:	3302      	addmi	r3, #2
 800510a:	f8c9 3000 	strmi.w	r3, [r9]
 800510e:	6825      	ldr	r5, [r4, #0]
 8005110:	f015 0506 	ands.w	r5, r5, #6
 8005114:	d107      	bne.n	8005126 <_printf_common+0x52>
 8005116:	f104 0a19 	add.w	sl, r4, #25
 800511a:	68e3      	ldr	r3, [r4, #12]
 800511c:	f8d9 2000 	ldr.w	r2, [r9]
 8005120:	1a9b      	subs	r3, r3, r2
 8005122:	42ab      	cmp	r3, r5
 8005124:	dc29      	bgt.n	800517a <_printf_common+0xa6>
 8005126:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800512a:	6822      	ldr	r2, [r4, #0]
 800512c:	3300      	adds	r3, #0
 800512e:	bf18      	it	ne
 8005130:	2301      	movne	r3, #1
 8005132:	0692      	lsls	r2, r2, #26
 8005134:	d42e      	bmi.n	8005194 <_printf_common+0xc0>
 8005136:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800513a:	4639      	mov	r1, r7
 800513c:	4630      	mov	r0, r6
 800513e:	47c0      	blx	r8
 8005140:	3001      	adds	r0, #1
 8005142:	d021      	beq.n	8005188 <_printf_common+0xb4>
 8005144:	6823      	ldr	r3, [r4, #0]
 8005146:	68e5      	ldr	r5, [r4, #12]
 8005148:	f003 0306 	and.w	r3, r3, #6
 800514c:	2b04      	cmp	r3, #4
 800514e:	bf18      	it	ne
 8005150:	2500      	movne	r5, #0
 8005152:	f8d9 2000 	ldr.w	r2, [r9]
 8005156:	f04f 0900 	mov.w	r9, #0
 800515a:	bf08      	it	eq
 800515c:	1aad      	subeq	r5, r5, r2
 800515e:	68a3      	ldr	r3, [r4, #8]
 8005160:	6922      	ldr	r2, [r4, #16]
 8005162:	bf08      	it	eq
 8005164:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005168:	4293      	cmp	r3, r2
 800516a:	bfc4      	itt	gt
 800516c:	1a9b      	subgt	r3, r3, r2
 800516e:	18ed      	addgt	r5, r5, r3
 8005170:	341a      	adds	r4, #26
 8005172:	454d      	cmp	r5, r9
 8005174:	d11a      	bne.n	80051ac <_printf_common+0xd8>
 8005176:	2000      	movs	r0, #0
 8005178:	e008      	b.n	800518c <_printf_common+0xb8>
 800517a:	2301      	movs	r3, #1
 800517c:	4652      	mov	r2, sl
 800517e:	4639      	mov	r1, r7
 8005180:	4630      	mov	r0, r6
 8005182:	47c0      	blx	r8
 8005184:	3001      	adds	r0, #1
 8005186:	d103      	bne.n	8005190 <_printf_common+0xbc>
 8005188:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800518c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005190:	3501      	adds	r5, #1
 8005192:	e7c2      	b.n	800511a <_printf_common+0x46>
 8005194:	2030      	movs	r0, #48	; 0x30
 8005196:	18e1      	adds	r1, r4, r3
 8005198:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800519c:	1c5a      	adds	r2, r3, #1
 800519e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80051a2:	4422      	add	r2, r4
 80051a4:	3302      	adds	r3, #2
 80051a6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80051aa:	e7c4      	b.n	8005136 <_printf_common+0x62>
 80051ac:	2301      	movs	r3, #1
 80051ae:	4622      	mov	r2, r4
 80051b0:	4639      	mov	r1, r7
 80051b2:	4630      	mov	r0, r6
 80051b4:	47c0      	blx	r8
 80051b6:	3001      	adds	r0, #1
 80051b8:	d0e6      	beq.n	8005188 <_printf_common+0xb4>
 80051ba:	f109 0901 	add.w	r9, r9, #1
 80051be:	e7d8      	b.n	8005172 <_printf_common+0x9e>

080051c0 <_printf_i>:
 80051c0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80051c4:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80051c8:	460c      	mov	r4, r1
 80051ca:	7e09      	ldrb	r1, [r1, #24]
 80051cc:	b085      	sub	sp, #20
 80051ce:	296e      	cmp	r1, #110	; 0x6e
 80051d0:	4617      	mov	r7, r2
 80051d2:	4606      	mov	r6, r0
 80051d4:	4698      	mov	r8, r3
 80051d6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80051d8:	f000 80b3 	beq.w	8005342 <_printf_i+0x182>
 80051dc:	d822      	bhi.n	8005224 <_printf_i+0x64>
 80051de:	2963      	cmp	r1, #99	; 0x63
 80051e0:	d036      	beq.n	8005250 <_printf_i+0x90>
 80051e2:	d80a      	bhi.n	80051fa <_printf_i+0x3a>
 80051e4:	2900      	cmp	r1, #0
 80051e6:	f000 80b9 	beq.w	800535c <_printf_i+0x19c>
 80051ea:	2958      	cmp	r1, #88	; 0x58
 80051ec:	f000 8083 	beq.w	80052f6 <_printf_i+0x136>
 80051f0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80051f4:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80051f8:	e032      	b.n	8005260 <_printf_i+0xa0>
 80051fa:	2964      	cmp	r1, #100	; 0x64
 80051fc:	d001      	beq.n	8005202 <_printf_i+0x42>
 80051fe:	2969      	cmp	r1, #105	; 0x69
 8005200:	d1f6      	bne.n	80051f0 <_printf_i+0x30>
 8005202:	6820      	ldr	r0, [r4, #0]
 8005204:	6813      	ldr	r3, [r2, #0]
 8005206:	0605      	lsls	r5, r0, #24
 8005208:	f103 0104 	add.w	r1, r3, #4
 800520c:	d52a      	bpl.n	8005264 <_printf_i+0xa4>
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	6011      	str	r1, [r2, #0]
 8005212:	2b00      	cmp	r3, #0
 8005214:	da03      	bge.n	800521e <_printf_i+0x5e>
 8005216:	222d      	movs	r2, #45	; 0x2d
 8005218:	425b      	negs	r3, r3
 800521a:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800521e:	486f      	ldr	r0, [pc, #444]	; (80053dc <_printf_i+0x21c>)
 8005220:	220a      	movs	r2, #10
 8005222:	e039      	b.n	8005298 <_printf_i+0xd8>
 8005224:	2973      	cmp	r1, #115	; 0x73
 8005226:	f000 809d 	beq.w	8005364 <_printf_i+0x1a4>
 800522a:	d808      	bhi.n	800523e <_printf_i+0x7e>
 800522c:	296f      	cmp	r1, #111	; 0x6f
 800522e:	d020      	beq.n	8005272 <_printf_i+0xb2>
 8005230:	2970      	cmp	r1, #112	; 0x70
 8005232:	d1dd      	bne.n	80051f0 <_printf_i+0x30>
 8005234:	6823      	ldr	r3, [r4, #0]
 8005236:	f043 0320 	orr.w	r3, r3, #32
 800523a:	6023      	str	r3, [r4, #0]
 800523c:	e003      	b.n	8005246 <_printf_i+0x86>
 800523e:	2975      	cmp	r1, #117	; 0x75
 8005240:	d017      	beq.n	8005272 <_printf_i+0xb2>
 8005242:	2978      	cmp	r1, #120	; 0x78
 8005244:	d1d4      	bne.n	80051f0 <_printf_i+0x30>
 8005246:	2378      	movs	r3, #120	; 0x78
 8005248:	4865      	ldr	r0, [pc, #404]	; (80053e0 <_printf_i+0x220>)
 800524a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800524e:	e055      	b.n	80052fc <_printf_i+0x13c>
 8005250:	6813      	ldr	r3, [r2, #0]
 8005252:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005256:	1d19      	adds	r1, r3, #4
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	6011      	str	r1, [r2, #0]
 800525c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005260:	2301      	movs	r3, #1
 8005262:	e08c      	b.n	800537e <_printf_i+0x1be>
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	f010 0f40 	tst.w	r0, #64	; 0x40
 800526a:	6011      	str	r1, [r2, #0]
 800526c:	bf18      	it	ne
 800526e:	b21b      	sxthne	r3, r3
 8005270:	e7cf      	b.n	8005212 <_printf_i+0x52>
 8005272:	6813      	ldr	r3, [r2, #0]
 8005274:	6825      	ldr	r5, [r4, #0]
 8005276:	1d18      	adds	r0, r3, #4
 8005278:	6010      	str	r0, [r2, #0]
 800527a:	0628      	lsls	r0, r5, #24
 800527c:	d501      	bpl.n	8005282 <_printf_i+0xc2>
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	e002      	b.n	8005288 <_printf_i+0xc8>
 8005282:	0668      	lsls	r0, r5, #25
 8005284:	d5fb      	bpl.n	800527e <_printf_i+0xbe>
 8005286:	881b      	ldrh	r3, [r3, #0]
 8005288:	296f      	cmp	r1, #111	; 0x6f
 800528a:	bf14      	ite	ne
 800528c:	220a      	movne	r2, #10
 800528e:	2208      	moveq	r2, #8
 8005290:	4852      	ldr	r0, [pc, #328]	; (80053dc <_printf_i+0x21c>)
 8005292:	2100      	movs	r1, #0
 8005294:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005298:	6865      	ldr	r5, [r4, #4]
 800529a:	2d00      	cmp	r5, #0
 800529c:	60a5      	str	r5, [r4, #8]
 800529e:	f2c0 8095 	blt.w	80053cc <_printf_i+0x20c>
 80052a2:	6821      	ldr	r1, [r4, #0]
 80052a4:	f021 0104 	bic.w	r1, r1, #4
 80052a8:	6021      	str	r1, [r4, #0]
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d13d      	bne.n	800532a <_printf_i+0x16a>
 80052ae:	2d00      	cmp	r5, #0
 80052b0:	f040 808e 	bne.w	80053d0 <_printf_i+0x210>
 80052b4:	4665      	mov	r5, ip
 80052b6:	2a08      	cmp	r2, #8
 80052b8:	d10b      	bne.n	80052d2 <_printf_i+0x112>
 80052ba:	6823      	ldr	r3, [r4, #0]
 80052bc:	07db      	lsls	r3, r3, #31
 80052be:	d508      	bpl.n	80052d2 <_printf_i+0x112>
 80052c0:	6923      	ldr	r3, [r4, #16]
 80052c2:	6862      	ldr	r2, [r4, #4]
 80052c4:	429a      	cmp	r2, r3
 80052c6:	bfde      	ittt	le
 80052c8:	2330      	movle	r3, #48	; 0x30
 80052ca:	f805 3c01 	strble.w	r3, [r5, #-1]
 80052ce:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 80052d2:	ebac 0305 	sub.w	r3, ip, r5
 80052d6:	6123      	str	r3, [r4, #16]
 80052d8:	f8cd 8000 	str.w	r8, [sp]
 80052dc:	463b      	mov	r3, r7
 80052de:	aa03      	add	r2, sp, #12
 80052e0:	4621      	mov	r1, r4
 80052e2:	4630      	mov	r0, r6
 80052e4:	f7ff fef6 	bl	80050d4 <_printf_common>
 80052e8:	3001      	adds	r0, #1
 80052ea:	d14d      	bne.n	8005388 <_printf_i+0x1c8>
 80052ec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80052f0:	b005      	add	sp, #20
 80052f2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80052f6:	4839      	ldr	r0, [pc, #228]	; (80053dc <_printf_i+0x21c>)
 80052f8:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80052fc:	6813      	ldr	r3, [r2, #0]
 80052fe:	6821      	ldr	r1, [r4, #0]
 8005300:	1d1d      	adds	r5, r3, #4
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	6015      	str	r5, [r2, #0]
 8005306:	060a      	lsls	r2, r1, #24
 8005308:	d50b      	bpl.n	8005322 <_printf_i+0x162>
 800530a:	07ca      	lsls	r2, r1, #31
 800530c:	bf44      	itt	mi
 800530e:	f041 0120 	orrmi.w	r1, r1, #32
 8005312:	6021      	strmi	r1, [r4, #0]
 8005314:	b91b      	cbnz	r3, 800531e <_printf_i+0x15e>
 8005316:	6822      	ldr	r2, [r4, #0]
 8005318:	f022 0220 	bic.w	r2, r2, #32
 800531c:	6022      	str	r2, [r4, #0]
 800531e:	2210      	movs	r2, #16
 8005320:	e7b7      	b.n	8005292 <_printf_i+0xd2>
 8005322:	064d      	lsls	r5, r1, #25
 8005324:	bf48      	it	mi
 8005326:	b29b      	uxthmi	r3, r3
 8005328:	e7ef      	b.n	800530a <_printf_i+0x14a>
 800532a:	4665      	mov	r5, ip
 800532c:	fbb3 f1f2 	udiv	r1, r3, r2
 8005330:	fb02 3311 	mls	r3, r2, r1, r3
 8005334:	5cc3      	ldrb	r3, [r0, r3]
 8005336:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800533a:	460b      	mov	r3, r1
 800533c:	2900      	cmp	r1, #0
 800533e:	d1f5      	bne.n	800532c <_printf_i+0x16c>
 8005340:	e7b9      	b.n	80052b6 <_printf_i+0xf6>
 8005342:	6813      	ldr	r3, [r2, #0]
 8005344:	6825      	ldr	r5, [r4, #0]
 8005346:	1d18      	adds	r0, r3, #4
 8005348:	6961      	ldr	r1, [r4, #20]
 800534a:	6010      	str	r0, [r2, #0]
 800534c:	0628      	lsls	r0, r5, #24
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	d501      	bpl.n	8005356 <_printf_i+0x196>
 8005352:	6019      	str	r1, [r3, #0]
 8005354:	e002      	b.n	800535c <_printf_i+0x19c>
 8005356:	066a      	lsls	r2, r5, #25
 8005358:	d5fb      	bpl.n	8005352 <_printf_i+0x192>
 800535a:	8019      	strh	r1, [r3, #0]
 800535c:	2300      	movs	r3, #0
 800535e:	4665      	mov	r5, ip
 8005360:	6123      	str	r3, [r4, #16]
 8005362:	e7b9      	b.n	80052d8 <_printf_i+0x118>
 8005364:	6813      	ldr	r3, [r2, #0]
 8005366:	1d19      	adds	r1, r3, #4
 8005368:	6011      	str	r1, [r2, #0]
 800536a:	681d      	ldr	r5, [r3, #0]
 800536c:	6862      	ldr	r2, [r4, #4]
 800536e:	2100      	movs	r1, #0
 8005370:	4628      	mov	r0, r5
 8005372:	f002 fac7 	bl	8007904 <memchr>
 8005376:	b108      	cbz	r0, 800537c <_printf_i+0x1bc>
 8005378:	1b40      	subs	r0, r0, r5
 800537a:	6060      	str	r0, [r4, #4]
 800537c:	6863      	ldr	r3, [r4, #4]
 800537e:	6123      	str	r3, [r4, #16]
 8005380:	2300      	movs	r3, #0
 8005382:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005386:	e7a7      	b.n	80052d8 <_printf_i+0x118>
 8005388:	6923      	ldr	r3, [r4, #16]
 800538a:	462a      	mov	r2, r5
 800538c:	4639      	mov	r1, r7
 800538e:	4630      	mov	r0, r6
 8005390:	47c0      	blx	r8
 8005392:	3001      	adds	r0, #1
 8005394:	d0aa      	beq.n	80052ec <_printf_i+0x12c>
 8005396:	6823      	ldr	r3, [r4, #0]
 8005398:	079b      	lsls	r3, r3, #30
 800539a:	d413      	bmi.n	80053c4 <_printf_i+0x204>
 800539c:	68e0      	ldr	r0, [r4, #12]
 800539e:	9b03      	ldr	r3, [sp, #12]
 80053a0:	4298      	cmp	r0, r3
 80053a2:	bfb8      	it	lt
 80053a4:	4618      	movlt	r0, r3
 80053a6:	e7a3      	b.n	80052f0 <_printf_i+0x130>
 80053a8:	2301      	movs	r3, #1
 80053aa:	464a      	mov	r2, r9
 80053ac:	4639      	mov	r1, r7
 80053ae:	4630      	mov	r0, r6
 80053b0:	47c0      	blx	r8
 80053b2:	3001      	adds	r0, #1
 80053b4:	d09a      	beq.n	80052ec <_printf_i+0x12c>
 80053b6:	3501      	adds	r5, #1
 80053b8:	68e3      	ldr	r3, [r4, #12]
 80053ba:	9a03      	ldr	r2, [sp, #12]
 80053bc:	1a9b      	subs	r3, r3, r2
 80053be:	42ab      	cmp	r3, r5
 80053c0:	dcf2      	bgt.n	80053a8 <_printf_i+0x1e8>
 80053c2:	e7eb      	b.n	800539c <_printf_i+0x1dc>
 80053c4:	2500      	movs	r5, #0
 80053c6:	f104 0919 	add.w	r9, r4, #25
 80053ca:	e7f5      	b.n	80053b8 <_printf_i+0x1f8>
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d1ac      	bne.n	800532a <_printf_i+0x16a>
 80053d0:	7803      	ldrb	r3, [r0, #0]
 80053d2:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80053d6:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80053da:	e76c      	b.n	80052b6 <_printf_i+0xf6>
 80053dc:	08008cfa 	.word	0x08008cfa
 80053e0:	08008d0b 	.word	0x08008d0b

080053e4 <_scanf_float>:
 80053e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80053e8:	469a      	mov	sl, r3
 80053ea:	688b      	ldr	r3, [r1, #8]
 80053ec:	4616      	mov	r6, r2
 80053ee:	1e5a      	subs	r2, r3, #1
 80053f0:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 80053f4:	bf88      	it	hi
 80053f6:	f46f 72ae 	mvnhi.w	r2, #348	; 0x15c
 80053fa:	b087      	sub	sp, #28
 80053fc:	bf85      	ittet	hi
 80053fe:	189b      	addhi	r3, r3, r2
 8005400:	9301      	strhi	r3, [sp, #4]
 8005402:	2300      	movls	r3, #0
 8005404:	f240 135d 	movwhi	r3, #349	; 0x15d
 8005408:	4688      	mov	r8, r1
 800540a:	f04f 0b00 	mov.w	fp, #0
 800540e:	bf8c      	ite	hi
 8005410:	608b      	strhi	r3, [r1, #8]
 8005412:	9301      	strls	r3, [sp, #4]
 8005414:	680b      	ldr	r3, [r1, #0]
 8005416:	4607      	mov	r7, r0
 8005418:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800541c:	f848 3b1c 	str.w	r3, [r8], #28
 8005420:	460c      	mov	r4, r1
 8005422:	4645      	mov	r5, r8
 8005424:	465a      	mov	r2, fp
 8005426:	46d9      	mov	r9, fp
 8005428:	e9cd bb03 	strd	fp, fp, [sp, #12]
 800542c:	f8cd b008 	str.w	fp, [sp, #8]
 8005430:	68a1      	ldr	r1, [r4, #8]
 8005432:	b181      	cbz	r1, 8005456 <_scanf_float+0x72>
 8005434:	6833      	ldr	r3, [r6, #0]
 8005436:	781b      	ldrb	r3, [r3, #0]
 8005438:	2b49      	cmp	r3, #73	; 0x49
 800543a:	d071      	beq.n	8005520 <_scanf_float+0x13c>
 800543c:	d84d      	bhi.n	80054da <_scanf_float+0xf6>
 800543e:	2b39      	cmp	r3, #57	; 0x39
 8005440:	d840      	bhi.n	80054c4 <_scanf_float+0xe0>
 8005442:	2b31      	cmp	r3, #49	; 0x31
 8005444:	f080 8088 	bcs.w	8005558 <_scanf_float+0x174>
 8005448:	2b2d      	cmp	r3, #45	; 0x2d
 800544a:	f000 8090 	beq.w	800556e <_scanf_float+0x18a>
 800544e:	d815      	bhi.n	800547c <_scanf_float+0x98>
 8005450:	2b2b      	cmp	r3, #43	; 0x2b
 8005452:	f000 808c 	beq.w	800556e <_scanf_float+0x18a>
 8005456:	f1b9 0f00 	cmp.w	r9, #0
 800545a:	d003      	beq.n	8005464 <_scanf_float+0x80>
 800545c:	6823      	ldr	r3, [r4, #0]
 800545e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005462:	6023      	str	r3, [r4, #0]
 8005464:	3a01      	subs	r2, #1
 8005466:	2a01      	cmp	r2, #1
 8005468:	f200 80ea 	bhi.w	8005640 <_scanf_float+0x25c>
 800546c:	4545      	cmp	r5, r8
 800546e:	f200 80dc 	bhi.w	800562a <_scanf_float+0x246>
 8005472:	2601      	movs	r6, #1
 8005474:	4630      	mov	r0, r6
 8005476:	b007      	add	sp, #28
 8005478:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800547c:	2b2e      	cmp	r3, #46	; 0x2e
 800547e:	f000 809f 	beq.w	80055c0 <_scanf_float+0x1dc>
 8005482:	2b30      	cmp	r3, #48	; 0x30
 8005484:	d1e7      	bne.n	8005456 <_scanf_float+0x72>
 8005486:	6820      	ldr	r0, [r4, #0]
 8005488:	f410 7f80 	tst.w	r0, #256	; 0x100
 800548c:	d064      	beq.n	8005558 <_scanf_float+0x174>
 800548e:	9b01      	ldr	r3, [sp, #4]
 8005490:	f020 0080 	bic.w	r0, r0, #128	; 0x80
 8005494:	6020      	str	r0, [r4, #0]
 8005496:	f109 0901 	add.w	r9, r9, #1
 800549a:	b11b      	cbz	r3, 80054a4 <_scanf_float+0xc0>
 800549c:	3b01      	subs	r3, #1
 800549e:	3101      	adds	r1, #1
 80054a0:	9301      	str	r3, [sp, #4]
 80054a2:	60a1      	str	r1, [r4, #8]
 80054a4:	68a3      	ldr	r3, [r4, #8]
 80054a6:	3b01      	subs	r3, #1
 80054a8:	60a3      	str	r3, [r4, #8]
 80054aa:	6923      	ldr	r3, [r4, #16]
 80054ac:	3301      	adds	r3, #1
 80054ae:	6123      	str	r3, [r4, #16]
 80054b0:	6873      	ldr	r3, [r6, #4]
 80054b2:	3b01      	subs	r3, #1
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	6073      	str	r3, [r6, #4]
 80054b8:	f340 80ac 	ble.w	8005614 <_scanf_float+0x230>
 80054bc:	6833      	ldr	r3, [r6, #0]
 80054be:	3301      	adds	r3, #1
 80054c0:	6033      	str	r3, [r6, #0]
 80054c2:	e7b5      	b.n	8005430 <_scanf_float+0x4c>
 80054c4:	2b45      	cmp	r3, #69	; 0x45
 80054c6:	f000 8085 	beq.w	80055d4 <_scanf_float+0x1f0>
 80054ca:	2b46      	cmp	r3, #70	; 0x46
 80054cc:	d06a      	beq.n	80055a4 <_scanf_float+0x1c0>
 80054ce:	2b41      	cmp	r3, #65	; 0x41
 80054d0:	d1c1      	bne.n	8005456 <_scanf_float+0x72>
 80054d2:	2a01      	cmp	r2, #1
 80054d4:	d1bf      	bne.n	8005456 <_scanf_float+0x72>
 80054d6:	2202      	movs	r2, #2
 80054d8:	e046      	b.n	8005568 <_scanf_float+0x184>
 80054da:	2b65      	cmp	r3, #101	; 0x65
 80054dc:	d07a      	beq.n	80055d4 <_scanf_float+0x1f0>
 80054de:	d818      	bhi.n	8005512 <_scanf_float+0x12e>
 80054e0:	2b54      	cmp	r3, #84	; 0x54
 80054e2:	d066      	beq.n	80055b2 <_scanf_float+0x1ce>
 80054e4:	d811      	bhi.n	800550a <_scanf_float+0x126>
 80054e6:	2b4e      	cmp	r3, #78	; 0x4e
 80054e8:	d1b5      	bne.n	8005456 <_scanf_float+0x72>
 80054ea:	2a00      	cmp	r2, #0
 80054ec:	d146      	bne.n	800557c <_scanf_float+0x198>
 80054ee:	f1b9 0f00 	cmp.w	r9, #0
 80054f2:	d145      	bne.n	8005580 <_scanf_float+0x19c>
 80054f4:	6821      	ldr	r1, [r4, #0]
 80054f6:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 80054fa:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 80054fe:	d13f      	bne.n	8005580 <_scanf_float+0x19c>
 8005500:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8005504:	6021      	str	r1, [r4, #0]
 8005506:	2201      	movs	r2, #1
 8005508:	e02e      	b.n	8005568 <_scanf_float+0x184>
 800550a:	2b59      	cmp	r3, #89	; 0x59
 800550c:	d01e      	beq.n	800554c <_scanf_float+0x168>
 800550e:	2b61      	cmp	r3, #97	; 0x61
 8005510:	e7de      	b.n	80054d0 <_scanf_float+0xec>
 8005512:	2b6e      	cmp	r3, #110	; 0x6e
 8005514:	d0e9      	beq.n	80054ea <_scanf_float+0x106>
 8005516:	d815      	bhi.n	8005544 <_scanf_float+0x160>
 8005518:	2b66      	cmp	r3, #102	; 0x66
 800551a:	d043      	beq.n	80055a4 <_scanf_float+0x1c0>
 800551c:	2b69      	cmp	r3, #105	; 0x69
 800551e:	d19a      	bne.n	8005456 <_scanf_float+0x72>
 8005520:	f1bb 0f00 	cmp.w	fp, #0
 8005524:	d138      	bne.n	8005598 <_scanf_float+0x1b4>
 8005526:	f1b9 0f00 	cmp.w	r9, #0
 800552a:	d197      	bne.n	800545c <_scanf_float+0x78>
 800552c:	6821      	ldr	r1, [r4, #0]
 800552e:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 8005532:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 8005536:	d195      	bne.n	8005464 <_scanf_float+0x80>
 8005538:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 800553c:	6021      	str	r1, [r4, #0]
 800553e:	f04f 0b01 	mov.w	fp, #1
 8005542:	e011      	b.n	8005568 <_scanf_float+0x184>
 8005544:	2b74      	cmp	r3, #116	; 0x74
 8005546:	d034      	beq.n	80055b2 <_scanf_float+0x1ce>
 8005548:	2b79      	cmp	r3, #121	; 0x79
 800554a:	d184      	bne.n	8005456 <_scanf_float+0x72>
 800554c:	f1bb 0f07 	cmp.w	fp, #7
 8005550:	d181      	bne.n	8005456 <_scanf_float+0x72>
 8005552:	f04f 0b08 	mov.w	fp, #8
 8005556:	e007      	b.n	8005568 <_scanf_float+0x184>
 8005558:	eb12 0f0b 	cmn.w	r2, fp
 800555c:	f47f af7b 	bne.w	8005456 <_scanf_float+0x72>
 8005560:	6821      	ldr	r1, [r4, #0]
 8005562:	f421 71c0 	bic.w	r1, r1, #384	; 0x180
 8005566:	6021      	str	r1, [r4, #0]
 8005568:	702b      	strb	r3, [r5, #0]
 800556a:	3501      	adds	r5, #1
 800556c:	e79a      	b.n	80054a4 <_scanf_float+0xc0>
 800556e:	6821      	ldr	r1, [r4, #0]
 8005570:	0608      	lsls	r0, r1, #24
 8005572:	f57f af70 	bpl.w	8005456 <_scanf_float+0x72>
 8005576:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800557a:	e7f4      	b.n	8005566 <_scanf_float+0x182>
 800557c:	2a02      	cmp	r2, #2
 800557e:	d047      	beq.n	8005610 <_scanf_float+0x22c>
 8005580:	f1bb 0f01 	cmp.w	fp, #1
 8005584:	d003      	beq.n	800558e <_scanf_float+0x1aa>
 8005586:	f1bb 0f04 	cmp.w	fp, #4
 800558a:	f47f af64 	bne.w	8005456 <_scanf_float+0x72>
 800558e:	f10b 0b01 	add.w	fp, fp, #1
 8005592:	fa5f fb8b 	uxtb.w	fp, fp
 8005596:	e7e7      	b.n	8005568 <_scanf_float+0x184>
 8005598:	f1bb 0f03 	cmp.w	fp, #3
 800559c:	d0f7      	beq.n	800558e <_scanf_float+0x1aa>
 800559e:	f1bb 0f05 	cmp.w	fp, #5
 80055a2:	e7f2      	b.n	800558a <_scanf_float+0x1a6>
 80055a4:	f1bb 0f02 	cmp.w	fp, #2
 80055a8:	f47f af55 	bne.w	8005456 <_scanf_float+0x72>
 80055ac:	f04f 0b03 	mov.w	fp, #3
 80055b0:	e7da      	b.n	8005568 <_scanf_float+0x184>
 80055b2:	f1bb 0f06 	cmp.w	fp, #6
 80055b6:	f47f af4e 	bne.w	8005456 <_scanf_float+0x72>
 80055ba:	f04f 0b07 	mov.w	fp, #7
 80055be:	e7d3      	b.n	8005568 <_scanf_float+0x184>
 80055c0:	6821      	ldr	r1, [r4, #0]
 80055c2:	0588      	lsls	r0, r1, #22
 80055c4:	f57f af47 	bpl.w	8005456 <_scanf_float+0x72>
 80055c8:	f421 7120 	bic.w	r1, r1, #640	; 0x280
 80055cc:	6021      	str	r1, [r4, #0]
 80055ce:	f8cd 9008 	str.w	r9, [sp, #8]
 80055d2:	e7c9      	b.n	8005568 <_scanf_float+0x184>
 80055d4:	6821      	ldr	r1, [r4, #0]
 80055d6:	f401 60a0 	and.w	r0, r1, #1280	; 0x500
 80055da:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 80055de:	d006      	beq.n	80055ee <_scanf_float+0x20a>
 80055e0:	0548      	lsls	r0, r1, #21
 80055e2:	f57f af38 	bpl.w	8005456 <_scanf_float+0x72>
 80055e6:	f1b9 0f00 	cmp.w	r9, #0
 80055ea:	f43f af3b 	beq.w	8005464 <_scanf_float+0x80>
 80055ee:	0588      	lsls	r0, r1, #22
 80055f0:	bf58      	it	pl
 80055f2:	9802      	ldrpl	r0, [sp, #8]
 80055f4:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 80055f8:	bf58      	it	pl
 80055fa:	eba9 0000 	subpl.w	r0, r9, r0
 80055fe:	f441 71c0 	orr.w	r1, r1, #384	; 0x180
 8005602:	bf58      	it	pl
 8005604:	e9cd 0503 	strdpl	r0, r5, [sp, #12]
 8005608:	6021      	str	r1, [r4, #0]
 800560a:	f04f 0900 	mov.w	r9, #0
 800560e:	e7ab      	b.n	8005568 <_scanf_float+0x184>
 8005610:	2203      	movs	r2, #3
 8005612:	e7a9      	b.n	8005568 <_scanf_float+0x184>
 8005614:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8005618:	4631      	mov	r1, r6
 800561a:	4638      	mov	r0, r7
 800561c:	9205      	str	r2, [sp, #20]
 800561e:	4798      	blx	r3
 8005620:	9a05      	ldr	r2, [sp, #20]
 8005622:	2800      	cmp	r0, #0
 8005624:	f43f af04 	beq.w	8005430 <_scanf_float+0x4c>
 8005628:	e715      	b.n	8005456 <_scanf_float+0x72>
 800562a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800562e:	4632      	mov	r2, r6
 8005630:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8005634:	4638      	mov	r0, r7
 8005636:	4798      	blx	r3
 8005638:	6923      	ldr	r3, [r4, #16]
 800563a:	3b01      	subs	r3, #1
 800563c:	6123      	str	r3, [r4, #16]
 800563e:	e715      	b.n	800546c <_scanf_float+0x88>
 8005640:	f10b 33ff 	add.w	r3, fp, #4294967295	; 0xffffffff
 8005644:	2b06      	cmp	r3, #6
 8005646:	d80a      	bhi.n	800565e <_scanf_float+0x27a>
 8005648:	f1bb 0f02 	cmp.w	fp, #2
 800564c:	d967      	bls.n	800571e <_scanf_float+0x33a>
 800564e:	f1ab 0b03 	sub.w	fp, fp, #3
 8005652:	fa5f fb8b 	uxtb.w	fp, fp
 8005656:	eba5 0b0b 	sub.w	fp, r5, fp
 800565a:	455d      	cmp	r5, fp
 800565c:	d14a      	bne.n	80056f4 <_scanf_float+0x310>
 800565e:	6823      	ldr	r3, [r4, #0]
 8005660:	05da      	lsls	r2, r3, #23
 8005662:	d51f      	bpl.n	80056a4 <_scanf_float+0x2c0>
 8005664:	055b      	lsls	r3, r3, #21
 8005666:	d467      	bmi.n	8005738 <_scanf_float+0x354>
 8005668:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800566c:	6923      	ldr	r3, [r4, #16]
 800566e:	2965      	cmp	r1, #101	; 0x65
 8005670:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 8005674:	f105 3bff 	add.w	fp, r5, #4294967295	; 0xffffffff
 8005678:	6123      	str	r3, [r4, #16]
 800567a:	d00d      	beq.n	8005698 <_scanf_float+0x2b4>
 800567c:	2945      	cmp	r1, #69	; 0x45
 800567e:	d00b      	beq.n	8005698 <_scanf_float+0x2b4>
 8005680:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005684:	4632      	mov	r2, r6
 8005686:	4638      	mov	r0, r7
 8005688:	4798      	blx	r3
 800568a:	6923      	ldr	r3, [r4, #16]
 800568c:	f815 1c02 	ldrb.w	r1, [r5, #-2]
 8005690:	3b01      	subs	r3, #1
 8005692:	f1a5 0b02 	sub.w	fp, r5, #2
 8005696:	6123      	str	r3, [r4, #16]
 8005698:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800569c:	4632      	mov	r2, r6
 800569e:	4638      	mov	r0, r7
 80056a0:	4798      	blx	r3
 80056a2:	465d      	mov	r5, fp
 80056a4:	6826      	ldr	r6, [r4, #0]
 80056a6:	f016 0610 	ands.w	r6, r6, #16
 80056aa:	d176      	bne.n	800579a <_scanf_float+0x3b6>
 80056ac:	702e      	strb	r6, [r5, #0]
 80056ae:	6823      	ldr	r3, [r4, #0]
 80056b0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80056b4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80056b8:	d141      	bne.n	800573e <_scanf_float+0x35a>
 80056ba:	9b02      	ldr	r3, [sp, #8]
 80056bc:	eba9 0303 	sub.w	r3, r9, r3
 80056c0:	425a      	negs	r2, r3
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d148      	bne.n	8005758 <_scanf_float+0x374>
 80056c6:	4641      	mov	r1, r8
 80056c8:	2200      	movs	r2, #0
 80056ca:	4638      	mov	r0, r7
 80056cc:	f000 fee4 	bl	8006498 <_strtod_r>
 80056d0:	6825      	ldr	r5, [r4, #0]
 80056d2:	4680      	mov	r8, r0
 80056d4:	f015 0f02 	tst.w	r5, #2
 80056d8:	4689      	mov	r9, r1
 80056da:	f8da 3000 	ldr.w	r3, [sl]
 80056de:	d046      	beq.n	800576e <_scanf_float+0x38a>
 80056e0:	1d1a      	adds	r2, r3, #4
 80056e2:	f8ca 2000 	str.w	r2, [sl]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	e9c3 8900 	strd	r8, r9, [r3]
 80056ec:	68e3      	ldr	r3, [r4, #12]
 80056ee:	3301      	adds	r3, #1
 80056f0:	60e3      	str	r3, [r4, #12]
 80056f2:	e6bf      	b.n	8005474 <_scanf_float+0x90>
 80056f4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80056f8:	4632      	mov	r2, r6
 80056fa:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 80056fe:	4638      	mov	r0, r7
 8005700:	4798      	blx	r3
 8005702:	6923      	ldr	r3, [r4, #16]
 8005704:	3b01      	subs	r3, #1
 8005706:	6123      	str	r3, [r4, #16]
 8005708:	e7a7      	b.n	800565a <_scanf_float+0x276>
 800570a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800570e:	4632      	mov	r2, r6
 8005710:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8005714:	4638      	mov	r0, r7
 8005716:	4798      	blx	r3
 8005718:	6923      	ldr	r3, [r4, #16]
 800571a:	3b01      	subs	r3, #1
 800571c:	6123      	str	r3, [r4, #16]
 800571e:	4545      	cmp	r5, r8
 8005720:	d8f3      	bhi.n	800570a <_scanf_float+0x326>
 8005722:	e6a6      	b.n	8005472 <_scanf_float+0x8e>
 8005724:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005728:	4632      	mov	r2, r6
 800572a:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 800572e:	4638      	mov	r0, r7
 8005730:	4798      	blx	r3
 8005732:	6923      	ldr	r3, [r4, #16]
 8005734:	3b01      	subs	r3, #1
 8005736:	6123      	str	r3, [r4, #16]
 8005738:	4545      	cmp	r5, r8
 800573a:	d8f3      	bhi.n	8005724 <_scanf_float+0x340>
 800573c:	e699      	b.n	8005472 <_scanf_float+0x8e>
 800573e:	9b03      	ldr	r3, [sp, #12]
 8005740:	2b00      	cmp	r3, #0
 8005742:	d0c0      	beq.n	80056c6 <_scanf_float+0x2e2>
 8005744:	9904      	ldr	r1, [sp, #16]
 8005746:	230a      	movs	r3, #10
 8005748:	4632      	mov	r2, r6
 800574a:	3101      	adds	r1, #1
 800574c:	4638      	mov	r0, r7
 800574e:	f000 ff2f 	bl	80065b0 <_strtol_r>
 8005752:	9b03      	ldr	r3, [sp, #12]
 8005754:	9d04      	ldr	r5, [sp, #16]
 8005756:	1ac2      	subs	r2, r0, r3
 8005758:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800575c:	429d      	cmp	r5, r3
 800575e:	bf28      	it	cs
 8005760:	f504 75b7 	addcs.w	r5, r4, #366	; 0x16e
 8005764:	490e      	ldr	r1, [pc, #56]	; (80057a0 <_scanf_float+0x3bc>)
 8005766:	4628      	mov	r0, r5
 8005768:	f000 f854 	bl	8005814 <siprintf>
 800576c:	e7ab      	b.n	80056c6 <_scanf_float+0x2e2>
 800576e:	1d1f      	adds	r7, r3, #4
 8005770:	f015 0504 	ands.w	r5, r5, #4
 8005774:	f8ca 7000 	str.w	r7, [sl]
 8005778:	d1b5      	bne.n	80056e6 <_scanf_float+0x302>
 800577a:	681f      	ldr	r7, [r3, #0]
 800577c:	4602      	mov	r2, r0
 800577e:	460b      	mov	r3, r1
 8005780:	f7fb f944 	bl	8000a0c <__aeabi_dcmpun>
 8005784:	b120      	cbz	r0, 8005790 <_scanf_float+0x3ac>
 8005786:	4628      	mov	r0, r5
 8005788:	f000 f80c 	bl	80057a4 <nanf>
 800578c:	6038      	str	r0, [r7, #0]
 800578e:	e7ad      	b.n	80056ec <_scanf_float+0x308>
 8005790:	4640      	mov	r0, r8
 8005792:	4649      	mov	r1, r9
 8005794:	f7fb f998 	bl	8000ac8 <__aeabi_d2f>
 8005798:	e7f8      	b.n	800578c <_scanf_float+0x3a8>
 800579a:	2600      	movs	r6, #0
 800579c:	e66a      	b.n	8005474 <_scanf_float+0x90>
 800579e:	bf00      	nop
 80057a0:	08008d1c 	.word	0x08008d1c

080057a4 <nanf>:
 80057a4:	4800      	ldr	r0, [pc, #0]	; (80057a8 <nanf+0x4>)
 80057a6:	4770      	bx	lr
 80057a8:	7fc00000 	.word	0x7fc00000

080057ac <sniprintf>:
 80057ac:	b40c      	push	{r2, r3}
 80057ae:	b530      	push	{r4, r5, lr}
 80057b0:	4b17      	ldr	r3, [pc, #92]	; (8005810 <sniprintf+0x64>)
 80057b2:	1e0c      	subs	r4, r1, #0
 80057b4:	b09d      	sub	sp, #116	; 0x74
 80057b6:	681d      	ldr	r5, [r3, #0]
 80057b8:	da08      	bge.n	80057cc <sniprintf+0x20>
 80057ba:	238b      	movs	r3, #139	; 0x8b
 80057bc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80057c0:	602b      	str	r3, [r5, #0]
 80057c2:	b01d      	add	sp, #116	; 0x74
 80057c4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80057c8:	b002      	add	sp, #8
 80057ca:	4770      	bx	lr
 80057cc:	f44f 7302 	mov.w	r3, #520	; 0x208
 80057d0:	f8ad 3014 	strh.w	r3, [sp, #20]
 80057d4:	bf0c      	ite	eq
 80057d6:	4623      	moveq	r3, r4
 80057d8:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 80057dc:	9304      	str	r3, [sp, #16]
 80057de:	9307      	str	r3, [sp, #28]
 80057e0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80057e4:	9002      	str	r0, [sp, #8]
 80057e6:	9006      	str	r0, [sp, #24]
 80057e8:	f8ad 3016 	strh.w	r3, [sp, #22]
 80057ec:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80057ee:	ab21      	add	r3, sp, #132	; 0x84
 80057f0:	a902      	add	r1, sp, #8
 80057f2:	4628      	mov	r0, r5
 80057f4:	9301      	str	r3, [sp, #4]
 80057f6:	f002 fd99 	bl	800832c <_svfiprintf_r>
 80057fa:	1c43      	adds	r3, r0, #1
 80057fc:	bfbc      	itt	lt
 80057fe:	238b      	movlt	r3, #139	; 0x8b
 8005800:	602b      	strlt	r3, [r5, #0]
 8005802:	2c00      	cmp	r4, #0
 8005804:	d0dd      	beq.n	80057c2 <sniprintf+0x16>
 8005806:	2200      	movs	r2, #0
 8005808:	9b02      	ldr	r3, [sp, #8]
 800580a:	701a      	strb	r2, [r3, #0]
 800580c:	e7d9      	b.n	80057c2 <sniprintf+0x16>
 800580e:	bf00      	nop
 8005810:	20000018 	.word	0x20000018

08005814 <siprintf>:
 8005814:	b40e      	push	{r1, r2, r3}
 8005816:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800581a:	b500      	push	{lr}
 800581c:	b09c      	sub	sp, #112	; 0x70
 800581e:	ab1d      	add	r3, sp, #116	; 0x74
 8005820:	9002      	str	r0, [sp, #8]
 8005822:	9006      	str	r0, [sp, #24]
 8005824:	9107      	str	r1, [sp, #28]
 8005826:	9104      	str	r1, [sp, #16]
 8005828:	4808      	ldr	r0, [pc, #32]	; (800584c <siprintf+0x38>)
 800582a:	4909      	ldr	r1, [pc, #36]	; (8005850 <siprintf+0x3c>)
 800582c:	f853 2b04 	ldr.w	r2, [r3], #4
 8005830:	9105      	str	r1, [sp, #20]
 8005832:	6800      	ldr	r0, [r0, #0]
 8005834:	a902      	add	r1, sp, #8
 8005836:	9301      	str	r3, [sp, #4]
 8005838:	f002 fd78 	bl	800832c <_svfiprintf_r>
 800583c:	2200      	movs	r2, #0
 800583e:	9b02      	ldr	r3, [sp, #8]
 8005840:	701a      	strb	r2, [r3, #0]
 8005842:	b01c      	add	sp, #112	; 0x70
 8005844:	f85d eb04 	ldr.w	lr, [sp], #4
 8005848:	b003      	add	sp, #12
 800584a:	4770      	bx	lr
 800584c:	20000018 	.word	0x20000018
 8005850:	ffff0208 	.word	0xffff0208

08005854 <sulp>:
 8005854:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005858:	460f      	mov	r7, r1
 800585a:	4690      	mov	r8, r2
 800585c:	f002 fb2a 	bl	8007eb4 <__ulp>
 8005860:	4604      	mov	r4, r0
 8005862:	460d      	mov	r5, r1
 8005864:	f1b8 0f00 	cmp.w	r8, #0
 8005868:	d011      	beq.n	800588e <sulp+0x3a>
 800586a:	f3c7 530a 	ubfx	r3, r7, #20, #11
 800586e:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8005872:	2b00      	cmp	r3, #0
 8005874:	dd0b      	ble.n	800588e <sulp+0x3a>
 8005876:	2400      	movs	r4, #0
 8005878:	051b      	lsls	r3, r3, #20
 800587a:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800587e:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8005882:	4622      	mov	r2, r4
 8005884:	462b      	mov	r3, r5
 8005886:	f7fa fe27 	bl	80004d8 <__aeabi_dmul>
 800588a:	4604      	mov	r4, r0
 800588c:	460d      	mov	r5, r1
 800588e:	4620      	mov	r0, r4
 8005890:	4629      	mov	r1, r5
 8005892:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

08005898 <_strtod_l>:
 8005898:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800589c:	461f      	mov	r7, r3
 800589e:	2300      	movs	r3, #0
 80058a0:	b0a1      	sub	sp, #132	; 0x84
 80058a2:	4683      	mov	fp, r0
 80058a4:	4638      	mov	r0, r7
 80058a6:	460e      	mov	r6, r1
 80058a8:	9217      	str	r2, [sp, #92]	; 0x5c
 80058aa:	931c      	str	r3, [sp, #112]	; 0x70
 80058ac:	f001 ffff 	bl	80078ae <__localeconv_l>
 80058b0:	4680      	mov	r8, r0
 80058b2:	6800      	ldr	r0, [r0, #0]
 80058b4:	f7fa fc4c 	bl	8000150 <strlen>
 80058b8:	f04f 0900 	mov.w	r9, #0
 80058bc:	4604      	mov	r4, r0
 80058be:	f04f 0a00 	mov.w	sl, #0
 80058c2:	961b      	str	r6, [sp, #108]	; 0x6c
 80058c4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80058c6:	781a      	ldrb	r2, [r3, #0]
 80058c8:	2a0d      	cmp	r2, #13
 80058ca:	d832      	bhi.n	8005932 <_strtod_l+0x9a>
 80058cc:	2a09      	cmp	r2, #9
 80058ce:	d236      	bcs.n	800593e <_strtod_l+0xa6>
 80058d0:	2a00      	cmp	r2, #0
 80058d2:	d03e      	beq.n	8005952 <_strtod_l+0xba>
 80058d4:	2300      	movs	r3, #0
 80058d6:	930d      	str	r3, [sp, #52]	; 0x34
 80058d8:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 80058da:	782b      	ldrb	r3, [r5, #0]
 80058dc:	2b30      	cmp	r3, #48	; 0x30
 80058de:	f040 80ac 	bne.w	8005a3a <_strtod_l+0x1a2>
 80058e2:	786b      	ldrb	r3, [r5, #1]
 80058e4:	2b58      	cmp	r3, #88	; 0x58
 80058e6:	d001      	beq.n	80058ec <_strtod_l+0x54>
 80058e8:	2b78      	cmp	r3, #120	; 0x78
 80058ea:	d167      	bne.n	80059bc <_strtod_l+0x124>
 80058ec:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80058ee:	9702      	str	r7, [sp, #8]
 80058f0:	9301      	str	r3, [sp, #4]
 80058f2:	ab1c      	add	r3, sp, #112	; 0x70
 80058f4:	9300      	str	r3, [sp, #0]
 80058f6:	4a89      	ldr	r2, [pc, #548]	; (8005b1c <_strtod_l+0x284>)
 80058f8:	ab1d      	add	r3, sp, #116	; 0x74
 80058fa:	a91b      	add	r1, sp, #108	; 0x6c
 80058fc:	4658      	mov	r0, fp
 80058fe:	f001 fcfb 	bl	80072f8 <__gethex>
 8005902:	f010 0407 	ands.w	r4, r0, #7
 8005906:	4606      	mov	r6, r0
 8005908:	d005      	beq.n	8005916 <_strtod_l+0x7e>
 800590a:	2c06      	cmp	r4, #6
 800590c:	d12b      	bne.n	8005966 <_strtod_l+0xce>
 800590e:	2300      	movs	r3, #0
 8005910:	3501      	adds	r5, #1
 8005912:	951b      	str	r5, [sp, #108]	; 0x6c
 8005914:	930d      	str	r3, [sp, #52]	; 0x34
 8005916:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8005918:	2b00      	cmp	r3, #0
 800591a:	f040 85a6 	bne.w	800646a <_strtod_l+0xbd2>
 800591e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005920:	b1e3      	cbz	r3, 800595c <_strtod_l+0xc4>
 8005922:	464a      	mov	r2, r9
 8005924:	f10a 4300 	add.w	r3, sl, #2147483648	; 0x80000000
 8005928:	4610      	mov	r0, r2
 800592a:	4619      	mov	r1, r3
 800592c:	b021      	add	sp, #132	; 0x84
 800592e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005932:	2a2b      	cmp	r2, #43	; 0x2b
 8005934:	d015      	beq.n	8005962 <_strtod_l+0xca>
 8005936:	2a2d      	cmp	r2, #45	; 0x2d
 8005938:	d004      	beq.n	8005944 <_strtod_l+0xac>
 800593a:	2a20      	cmp	r2, #32
 800593c:	d1ca      	bne.n	80058d4 <_strtod_l+0x3c>
 800593e:	3301      	adds	r3, #1
 8005940:	931b      	str	r3, [sp, #108]	; 0x6c
 8005942:	e7bf      	b.n	80058c4 <_strtod_l+0x2c>
 8005944:	2201      	movs	r2, #1
 8005946:	920d      	str	r2, [sp, #52]	; 0x34
 8005948:	1c5a      	adds	r2, r3, #1
 800594a:	921b      	str	r2, [sp, #108]	; 0x6c
 800594c:	785b      	ldrb	r3, [r3, #1]
 800594e:	2b00      	cmp	r3, #0
 8005950:	d1c2      	bne.n	80058d8 <_strtod_l+0x40>
 8005952:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8005954:	961b      	str	r6, [sp, #108]	; 0x6c
 8005956:	2b00      	cmp	r3, #0
 8005958:	f040 8585 	bne.w	8006466 <_strtod_l+0xbce>
 800595c:	464a      	mov	r2, r9
 800595e:	4653      	mov	r3, sl
 8005960:	e7e2      	b.n	8005928 <_strtod_l+0x90>
 8005962:	2200      	movs	r2, #0
 8005964:	e7ef      	b.n	8005946 <_strtod_l+0xae>
 8005966:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8005968:	b13a      	cbz	r2, 800597a <_strtod_l+0xe2>
 800596a:	2135      	movs	r1, #53	; 0x35
 800596c:	a81e      	add	r0, sp, #120	; 0x78
 800596e:	f002 fb94 	bl	800809a <__copybits>
 8005972:	991c      	ldr	r1, [sp, #112]	; 0x70
 8005974:	4658      	mov	r0, fp
 8005976:	f002 f807 	bl	8007988 <_Bfree>
 800597a:	3c01      	subs	r4, #1
 800597c:	2c04      	cmp	r4, #4
 800597e:	d806      	bhi.n	800598e <_strtod_l+0xf6>
 8005980:	e8df f004 	tbb	[pc, r4]
 8005984:	1714030a 	.word	0x1714030a
 8005988:	0a          	.byte	0x0a
 8005989:	00          	.byte	0x00
 800598a:	e9dd 9a1e 	ldrd	r9, sl, [sp, #120]	; 0x78
 800598e:	0731      	lsls	r1, r6, #28
 8005990:	d5c1      	bpl.n	8005916 <_strtod_l+0x7e>
 8005992:	f04a 4a00 	orr.w	sl, sl, #2147483648	; 0x80000000
 8005996:	e7be      	b.n	8005916 <_strtod_l+0x7e>
 8005998:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800599a:	e9dd 931e 	ldrd	r9, r3, [sp, #120]	; 0x78
 800599e:	f202 4233 	addw	r2, r2, #1075	; 0x433
 80059a2:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80059a6:	ea43 5a02 	orr.w	sl, r3, r2, lsl #20
 80059aa:	e7f0      	b.n	800598e <_strtod_l+0xf6>
 80059ac:	f8df a170 	ldr.w	sl, [pc, #368]	; 8005b20 <_strtod_l+0x288>
 80059b0:	e7ed      	b.n	800598e <_strtod_l+0xf6>
 80059b2:	f06f 4a00 	mvn.w	sl, #2147483648	; 0x80000000
 80059b6:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
 80059ba:	e7e8      	b.n	800598e <_strtod_l+0xf6>
 80059bc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80059be:	1c5a      	adds	r2, r3, #1
 80059c0:	921b      	str	r2, [sp, #108]	; 0x6c
 80059c2:	785b      	ldrb	r3, [r3, #1]
 80059c4:	2b30      	cmp	r3, #48	; 0x30
 80059c6:	d0f9      	beq.n	80059bc <_strtod_l+0x124>
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d0a4      	beq.n	8005916 <_strtod_l+0x7e>
 80059cc:	2301      	movs	r3, #1
 80059ce:	2500      	movs	r5, #0
 80059d0:	220a      	movs	r2, #10
 80059d2:	9307      	str	r3, [sp, #28]
 80059d4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80059d6:	9506      	str	r5, [sp, #24]
 80059d8:	9308      	str	r3, [sp, #32]
 80059da:	9504      	str	r5, [sp, #16]
 80059dc:	981b      	ldr	r0, [sp, #108]	; 0x6c
 80059de:	7807      	ldrb	r7, [r0, #0]
 80059e0:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 80059e4:	b2d9      	uxtb	r1, r3
 80059e6:	2909      	cmp	r1, #9
 80059e8:	d929      	bls.n	8005a3e <_strtod_l+0x1a6>
 80059ea:	4622      	mov	r2, r4
 80059ec:	f8d8 1000 	ldr.w	r1, [r8]
 80059f0:	f002 fda4 	bl	800853c <strncmp>
 80059f4:	2800      	cmp	r0, #0
 80059f6:	d031      	beq.n	8005a5c <_strtod_l+0x1c4>
 80059f8:	2000      	movs	r0, #0
 80059fa:	463b      	mov	r3, r7
 80059fc:	4602      	mov	r2, r0
 80059fe:	9c04      	ldr	r4, [sp, #16]
 8005a00:	9005      	str	r0, [sp, #20]
 8005a02:	2b65      	cmp	r3, #101	; 0x65
 8005a04:	d001      	beq.n	8005a0a <_strtod_l+0x172>
 8005a06:	2b45      	cmp	r3, #69	; 0x45
 8005a08:	d114      	bne.n	8005a34 <_strtod_l+0x19c>
 8005a0a:	b924      	cbnz	r4, 8005a16 <_strtod_l+0x17e>
 8005a0c:	b910      	cbnz	r0, 8005a14 <_strtod_l+0x17c>
 8005a0e:	9b07      	ldr	r3, [sp, #28]
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	d09e      	beq.n	8005952 <_strtod_l+0xba>
 8005a14:	2400      	movs	r4, #0
 8005a16:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 8005a18:	1c73      	adds	r3, r6, #1
 8005a1a:	931b      	str	r3, [sp, #108]	; 0x6c
 8005a1c:	7873      	ldrb	r3, [r6, #1]
 8005a1e:	2b2b      	cmp	r3, #43	; 0x2b
 8005a20:	d078      	beq.n	8005b14 <_strtod_l+0x27c>
 8005a22:	2b2d      	cmp	r3, #45	; 0x2d
 8005a24:	d070      	beq.n	8005b08 <_strtod_l+0x270>
 8005a26:	f04f 0c00 	mov.w	ip, #0
 8005a2a:	f1a3 0730 	sub.w	r7, r3, #48	; 0x30
 8005a2e:	2f09      	cmp	r7, #9
 8005a30:	d97c      	bls.n	8005b2c <_strtod_l+0x294>
 8005a32:	961b      	str	r6, [sp, #108]	; 0x6c
 8005a34:	f04f 0e00 	mov.w	lr, #0
 8005a38:	e09a      	b.n	8005b70 <_strtod_l+0x2d8>
 8005a3a:	2300      	movs	r3, #0
 8005a3c:	e7c7      	b.n	80059ce <_strtod_l+0x136>
 8005a3e:	9904      	ldr	r1, [sp, #16]
 8005a40:	3001      	adds	r0, #1
 8005a42:	2908      	cmp	r1, #8
 8005a44:	bfd7      	itett	le
 8005a46:	9906      	ldrle	r1, [sp, #24]
 8005a48:	fb02 3505 	mlagt	r5, r2, r5, r3
 8005a4c:	fb02 3301 	mlale	r3, r2, r1, r3
 8005a50:	9306      	strle	r3, [sp, #24]
 8005a52:	9b04      	ldr	r3, [sp, #16]
 8005a54:	901b      	str	r0, [sp, #108]	; 0x6c
 8005a56:	3301      	adds	r3, #1
 8005a58:	9304      	str	r3, [sp, #16]
 8005a5a:	e7bf      	b.n	80059dc <_strtod_l+0x144>
 8005a5c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005a5e:	191a      	adds	r2, r3, r4
 8005a60:	921b      	str	r2, [sp, #108]	; 0x6c
 8005a62:	9a04      	ldr	r2, [sp, #16]
 8005a64:	5d1b      	ldrb	r3, [r3, r4]
 8005a66:	2a00      	cmp	r2, #0
 8005a68:	d037      	beq.n	8005ada <_strtod_l+0x242>
 8005a6a:	4602      	mov	r2, r0
 8005a6c:	9c04      	ldr	r4, [sp, #16]
 8005a6e:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8005a72:	2909      	cmp	r1, #9
 8005a74:	d913      	bls.n	8005a9e <_strtod_l+0x206>
 8005a76:	2101      	movs	r1, #1
 8005a78:	9105      	str	r1, [sp, #20]
 8005a7a:	e7c2      	b.n	8005a02 <_strtod_l+0x16a>
 8005a7c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005a7e:	3001      	adds	r0, #1
 8005a80:	1c5a      	adds	r2, r3, #1
 8005a82:	921b      	str	r2, [sp, #108]	; 0x6c
 8005a84:	785b      	ldrb	r3, [r3, #1]
 8005a86:	2b30      	cmp	r3, #48	; 0x30
 8005a88:	d0f8      	beq.n	8005a7c <_strtod_l+0x1e4>
 8005a8a:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 8005a8e:	2a08      	cmp	r2, #8
 8005a90:	f200 84f0 	bhi.w	8006474 <_strtod_l+0xbdc>
 8005a94:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8005a96:	9208      	str	r2, [sp, #32]
 8005a98:	4602      	mov	r2, r0
 8005a9a:	2000      	movs	r0, #0
 8005a9c:	4604      	mov	r4, r0
 8005a9e:	f1b3 0e30 	subs.w	lr, r3, #48	; 0x30
 8005aa2:	f100 0101 	add.w	r1, r0, #1
 8005aa6:	d012      	beq.n	8005ace <_strtod_l+0x236>
 8005aa8:	440a      	add	r2, r1
 8005aaa:	270a      	movs	r7, #10
 8005aac:	4621      	mov	r1, r4
 8005aae:	eb00 0c04 	add.w	ip, r0, r4
 8005ab2:	458c      	cmp	ip, r1
 8005ab4:	d113      	bne.n	8005ade <_strtod_l+0x246>
 8005ab6:	1821      	adds	r1, r4, r0
 8005ab8:	2908      	cmp	r1, #8
 8005aba:	f104 0401 	add.w	r4, r4, #1
 8005abe:	4404      	add	r4, r0
 8005ac0:	dc19      	bgt.n	8005af6 <_strtod_l+0x25e>
 8005ac2:	210a      	movs	r1, #10
 8005ac4:	9b06      	ldr	r3, [sp, #24]
 8005ac6:	fb01 e303 	mla	r3, r1, r3, lr
 8005aca:	9306      	str	r3, [sp, #24]
 8005acc:	2100      	movs	r1, #0
 8005ace:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005ad0:	1c58      	adds	r0, r3, #1
 8005ad2:	901b      	str	r0, [sp, #108]	; 0x6c
 8005ad4:	785b      	ldrb	r3, [r3, #1]
 8005ad6:	4608      	mov	r0, r1
 8005ad8:	e7c9      	b.n	8005a6e <_strtod_l+0x1d6>
 8005ada:	9804      	ldr	r0, [sp, #16]
 8005adc:	e7d3      	b.n	8005a86 <_strtod_l+0x1ee>
 8005ade:	2908      	cmp	r1, #8
 8005ae0:	f101 0101 	add.w	r1, r1, #1
 8005ae4:	dc03      	bgt.n	8005aee <_strtod_l+0x256>
 8005ae6:	9b06      	ldr	r3, [sp, #24]
 8005ae8:	437b      	muls	r3, r7
 8005aea:	9306      	str	r3, [sp, #24]
 8005aec:	e7e1      	b.n	8005ab2 <_strtod_l+0x21a>
 8005aee:	2910      	cmp	r1, #16
 8005af0:	bfd8      	it	le
 8005af2:	437d      	mulle	r5, r7
 8005af4:	e7dd      	b.n	8005ab2 <_strtod_l+0x21a>
 8005af6:	2c10      	cmp	r4, #16
 8005af8:	bfdc      	itt	le
 8005afa:	210a      	movle	r1, #10
 8005afc:	fb01 e505 	mlale	r5, r1, r5, lr
 8005b00:	e7e4      	b.n	8005acc <_strtod_l+0x234>
 8005b02:	2301      	movs	r3, #1
 8005b04:	9305      	str	r3, [sp, #20]
 8005b06:	e781      	b.n	8005a0c <_strtod_l+0x174>
 8005b08:	f04f 0c01 	mov.w	ip, #1
 8005b0c:	1cb3      	adds	r3, r6, #2
 8005b0e:	931b      	str	r3, [sp, #108]	; 0x6c
 8005b10:	78b3      	ldrb	r3, [r6, #2]
 8005b12:	e78a      	b.n	8005a2a <_strtod_l+0x192>
 8005b14:	f04f 0c00 	mov.w	ip, #0
 8005b18:	e7f8      	b.n	8005b0c <_strtod_l+0x274>
 8005b1a:	bf00      	nop
 8005b1c:	08008d24 	.word	0x08008d24
 8005b20:	7ff00000 	.word	0x7ff00000
 8005b24:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005b26:	1c5f      	adds	r7, r3, #1
 8005b28:	971b      	str	r7, [sp, #108]	; 0x6c
 8005b2a:	785b      	ldrb	r3, [r3, #1]
 8005b2c:	2b30      	cmp	r3, #48	; 0x30
 8005b2e:	d0f9      	beq.n	8005b24 <_strtod_l+0x28c>
 8005b30:	f1a3 0731 	sub.w	r7, r3, #49	; 0x31
 8005b34:	2f08      	cmp	r7, #8
 8005b36:	f63f af7d 	bhi.w	8005a34 <_strtod_l+0x19c>
 8005b3a:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 8005b3e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005b40:	9309      	str	r3, [sp, #36]	; 0x24
 8005b42:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005b44:	1c5f      	adds	r7, r3, #1
 8005b46:	971b      	str	r7, [sp, #108]	; 0x6c
 8005b48:	785b      	ldrb	r3, [r3, #1]
 8005b4a:	f1a3 0830 	sub.w	r8, r3, #48	; 0x30
 8005b4e:	f1b8 0f09 	cmp.w	r8, #9
 8005b52:	d937      	bls.n	8005bc4 <_strtod_l+0x32c>
 8005b54:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005b56:	1a7f      	subs	r7, r7, r1
 8005b58:	2f08      	cmp	r7, #8
 8005b5a:	f644 671f 	movw	r7, #19999	; 0x4e1f
 8005b5e:	dc37      	bgt.n	8005bd0 <_strtod_l+0x338>
 8005b60:	45be      	cmp	lr, r7
 8005b62:	bfa8      	it	ge
 8005b64:	46be      	movge	lr, r7
 8005b66:	f1bc 0f00 	cmp.w	ip, #0
 8005b6a:	d001      	beq.n	8005b70 <_strtod_l+0x2d8>
 8005b6c:	f1ce 0e00 	rsb	lr, lr, #0
 8005b70:	2c00      	cmp	r4, #0
 8005b72:	d151      	bne.n	8005c18 <_strtod_l+0x380>
 8005b74:	2800      	cmp	r0, #0
 8005b76:	f47f aece 	bne.w	8005916 <_strtod_l+0x7e>
 8005b7a:	9a07      	ldr	r2, [sp, #28]
 8005b7c:	2a00      	cmp	r2, #0
 8005b7e:	f47f aeca 	bne.w	8005916 <_strtod_l+0x7e>
 8005b82:	9a05      	ldr	r2, [sp, #20]
 8005b84:	2a00      	cmp	r2, #0
 8005b86:	f47f aee4 	bne.w	8005952 <_strtod_l+0xba>
 8005b8a:	2b4e      	cmp	r3, #78	; 0x4e
 8005b8c:	d027      	beq.n	8005bde <_strtod_l+0x346>
 8005b8e:	dc21      	bgt.n	8005bd4 <_strtod_l+0x33c>
 8005b90:	2b49      	cmp	r3, #73	; 0x49
 8005b92:	f47f aede 	bne.w	8005952 <_strtod_l+0xba>
 8005b96:	49a4      	ldr	r1, [pc, #656]	; (8005e28 <_strtod_l+0x590>)
 8005b98:	a81b      	add	r0, sp, #108	; 0x6c
 8005b9a:	f001 fde1 	bl	8007760 <__match>
 8005b9e:	2800      	cmp	r0, #0
 8005ba0:	f43f aed7 	beq.w	8005952 <_strtod_l+0xba>
 8005ba4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005ba6:	49a1      	ldr	r1, [pc, #644]	; (8005e2c <_strtod_l+0x594>)
 8005ba8:	3b01      	subs	r3, #1
 8005baa:	a81b      	add	r0, sp, #108	; 0x6c
 8005bac:	931b      	str	r3, [sp, #108]	; 0x6c
 8005bae:	f001 fdd7 	bl	8007760 <__match>
 8005bb2:	b910      	cbnz	r0, 8005bba <_strtod_l+0x322>
 8005bb4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005bb6:	3301      	adds	r3, #1
 8005bb8:	931b      	str	r3, [sp, #108]	; 0x6c
 8005bba:	f8df a284 	ldr.w	sl, [pc, #644]	; 8005e40 <_strtod_l+0x5a8>
 8005bbe:	f04f 0900 	mov.w	r9, #0
 8005bc2:	e6a8      	b.n	8005916 <_strtod_l+0x7e>
 8005bc4:	210a      	movs	r1, #10
 8005bc6:	fb01 3e0e 	mla	lr, r1, lr, r3
 8005bca:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8005bce:	e7b8      	b.n	8005b42 <_strtod_l+0x2aa>
 8005bd0:	46be      	mov	lr, r7
 8005bd2:	e7c8      	b.n	8005b66 <_strtod_l+0x2ce>
 8005bd4:	2b69      	cmp	r3, #105	; 0x69
 8005bd6:	d0de      	beq.n	8005b96 <_strtod_l+0x2fe>
 8005bd8:	2b6e      	cmp	r3, #110	; 0x6e
 8005bda:	f47f aeba 	bne.w	8005952 <_strtod_l+0xba>
 8005bde:	4994      	ldr	r1, [pc, #592]	; (8005e30 <_strtod_l+0x598>)
 8005be0:	a81b      	add	r0, sp, #108	; 0x6c
 8005be2:	f001 fdbd 	bl	8007760 <__match>
 8005be6:	2800      	cmp	r0, #0
 8005be8:	f43f aeb3 	beq.w	8005952 <_strtod_l+0xba>
 8005bec:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005bee:	781b      	ldrb	r3, [r3, #0]
 8005bf0:	2b28      	cmp	r3, #40	; 0x28
 8005bf2:	d10e      	bne.n	8005c12 <_strtod_l+0x37a>
 8005bf4:	aa1e      	add	r2, sp, #120	; 0x78
 8005bf6:	498f      	ldr	r1, [pc, #572]	; (8005e34 <_strtod_l+0x59c>)
 8005bf8:	a81b      	add	r0, sp, #108	; 0x6c
 8005bfa:	f001 fdc5 	bl	8007788 <__hexnan>
 8005bfe:	2805      	cmp	r0, #5
 8005c00:	d107      	bne.n	8005c12 <_strtod_l+0x37a>
 8005c02:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8005c04:	f8dd 9078 	ldr.w	r9, [sp, #120]	; 0x78
 8005c08:	f043 4aff 	orr.w	sl, r3, #2139095040	; 0x7f800000
 8005c0c:	f44a 0ae0 	orr.w	sl, sl, #7340032	; 0x700000
 8005c10:	e681      	b.n	8005916 <_strtod_l+0x7e>
 8005c12:	f8df a234 	ldr.w	sl, [pc, #564]	; 8005e48 <_strtod_l+0x5b0>
 8005c16:	e7d2      	b.n	8005bbe <_strtod_l+0x326>
 8005c18:	ebae 0302 	sub.w	r3, lr, r2
 8005c1c:	9307      	str	r3, [sp, #28]
 8005c1e:	9b04      	ldr	r3, [sp, #16]
 8005c20:	9806      	ldr	r0, [sp, #24]
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	bf08      	it	eq
 8005c26:	4623      	moveq	r3, r4
 8005c28:	2c10      	cmp	r4, #16
 8005c2a:	9304      	str	r3, [sp, #16]
 8005c2c:	46a0      	mov	r8, r4
 8005c2e:	bfa8      	it	ge
 8005c30:	f04f 0810 	movge.w	r8, #16
 8005c34:	f7fa fbd6 	bl	80003e4 <__aeabi_ui2d>
 8005c38:	2c09      	cmp	r4, #9
 8005c3a:	4681      	mov	r9, r0
 8005c3c:	468a      	mov	sl, r1
 8005c3e:	dc13      	bgt.n	8005c68 <_strtod_l+0x3d0>
 8005c40:	9b07      	ldr	r3, [sp, #28]
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	f43f ae67 	beq.w	8005916 <_strtod_l+0x7e>
 8005c48:	9b07      	ldr	r3, [sp, #28]
 8005c4a:	dd7e      	ble.n	8005d4a <_strtod_l+0x4b2>
 8005c4c:	2b16      	cmp	r3, #22
 8005c4e:	dc65      	bgt.n	8005d1c <_strtod_l+0x484>
 8005c50:	4a79      	ldr	r2, [pc, #484]	; (8005e38 <_strtod_l+0x5a0>)
 8005c52:	eb02 0ec3 	add.w	lr, r2, r3, lsl #3
 8005c56:	464a      	mov	r2, r9
 8005c58:	e9de 0100 	ldrd	r0, r1, [lr]
 8005c5c:	4653      	mov	r3, sl
 8005c5e:	f7fa fc3b 	bl	80004d8 <__aeabi_dmul>
 8005c62:	4681      	mov	r9, r0
 8005c64:	468a      	mov	sl, r1
 8005c66:	e656      	b.n	8005916 <_strtod_l+0x7e>
 8005c68:	4b73      	ldr	r3, [pc, #460]	; (8005e38 <_strtod_l+0x5a0>)
 8005c6a:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8005c6e:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8005c72:	f7fa fc31 	bl	80004d8 <__aeabi_dmul>
 8005c76:	4606      	mov	r6, r0
 8005c78:	4628      	mov	r0, r5
 8005c7a:	460f      	mov	r7, r1
 8005c7c:	f7fa fbb2 	bl	80003e4 <__aeabi_ui2d>
 8005c80:	4602      	mov	r2, r0
 8005c82:	460b      	mov	r3, r1
 8005c84:	4630      	mov	r0, r6
 8005c86:	4639      	mov	r1, r7
 8005c88:	f7fa fa70 	bl	800016c <__adddf3>
 8005c8c:	2c0f      	cmp	r4, #15
 8005c8e:	4681      	mov	r9, r0
 8005c90:	468a      	mov	sl, r1
 8005c92:	ddd5      	ble.n	8005c40 <_strtod_l+0x3a8>
 8005c94:	9b07      	ldr	r3, [sp, #28]
 8005c96:	eba4 0808 	sub.w	r8, r4, r8
 8005c9a:	4498      	add	r8, r3
 8005c9c:	f1b8 0f00 	cmp.w	r8, #0
 8005ca0:	f340 809a 	ble.w	8005dd8 <_strtod_l+0x540>
 8005ca4:	f018 030f 	ands.w	r3, r8, #15
 8005ca8:	d00a      	beq.n	8005cc0 <_strtod_l+0x428>
 8005caa:	4963      	ldr	r1, [pc, #396]	; (8005e38 <_strtod_l+0x5a0>)
 8005cac:	464a      	mov	r2, r9
 8005cae:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8005cb2:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005cb6:	4653      	mov	r3, sl
 8005cb8:	f7fa fc0e 	bl	80004d8 <__aeabi_dmul>
 8005cbc:	4681      	mov	r9, r0
 8005cbe:	468a      	mov	sl, r1
 8005cc0:	f038 080f 	bics.w	r8, r8, #15
 8005cc4:	d077      	beq.n	8005db6 <_strtod_l+0x51e>
 8005cc6:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8005cca:	dd4b      	ble.n	8005d64 <_strtod_l+0x4cc>
 8005ccc:	f04f 0800 	mov.w	r8, #0
 8005cd0:	f8cd 8010 	str.w	r8, [sp, #16]
 8005cd4:	f8cd 8020 	str.w	r8, [sp, #32]
 8005cd8:	f8cd 8018 	str.w	r8, [sp, #24]
 8005cdc:	2322      	movs	r3, #34	; 0x22
 8005cde:	f04f 0900 	mov.w	r9, #0
 8005ce2:	f8df a15c 	ldr.w	sl, [pc, #348]	; 8005e40 <_strtod_l+0x5a8>
 8005ce6:	f8cb 3000 	str.w	r3, [fp]
 8005cea:	9b08      	ldr	r3, [sp, #32]
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	f43f ae12 	beq.w	8005916 <_strtod_l+0x7e>
 8005cf2:	991c      	ldr	r1, [sp, #112]	; 0x70
 8005cf4:	4658      	mov	r0, fp
 8005cf6:	f001 fe47 	bl	8007988 <_Bfree>
 8005cfa:	9906      	ldr	r1, [sp, #24]
 8005cfc:	4658      	mov	r0, fp
 8005cfe:	f001 fe43 	bl	8007988 <_Bfree>
 8005d02:	9904      	ldr	r1, [sp, #16]
 8005d04:	4658      	mov	r0, fp
 8005d06:	f001 fe3f 	bl	8007988 <_Bfree>
 8005d0a:	9908      	ldr	r1, [sp, #32]
 8005d0c:	4658      	mov	r0, fp
 8005d0e:	f001 fe3b 	bl	8007988 <_Bfree>
 8005d12:	4641      	mov	r1, r8
 8005d14:	4658      	mov	r0, fp
 8005d16:	f001 fe37 	bl	8007988 <_Bfree>
 8005d1a:	e5fc      	b.n	8005916 <_strtod_l+0x7e>
 8005d1c:	9a07      	ldr	r2, [sp, #28]
 8005d1e:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 8005d22:	4293      	cmp	r3, r2
 8005d24:	dbb6      	blt.n	8005c94 <_strtod_l+0x3fc>
 8005d26:	4d44      	ldr	r5, [pc, #272]	; (8005e38 <_strtod_l+0x5a0>)
 8005d28:	f1c4 040f 	rsb	r4, r4, #15
 8005d2c:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 8005d30:	464a      	mov	r2, r9
 8005d32:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005d36:	4653      	mov	r3, sl
 8005d38:	f7fa fbce 	bl	80004d8 <__aeabi_dmul>
 8005d3c:	9b07      	ldr	r3, [sp, #28]
 8005d3e:	1b1c      	subs	r4, r3, r4
 8005d40:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 8005d44:	e9d5 2300 	ldrd	r2, r3, [r5]
 8005d48:	e789      	b.n	8005c5e <_strtod_l+0x3c6>
 8005d4a:	f113 0f16 	cmn.w	r3, #22
 8005d4e:	dba1      	blt.n	8005c94 <_strtod_l+0x3fc>
 8005d50:	4a39      	ldr	r2, [pc, #228]	; (8005e38 <_strtod_l+0x5a0>)
 8005d52:	4648      	mov	r0, r9
 8005d54:	eba2 02c3 	sub.w	r2, r2, r3, lsl #3
 8005d58:	e9d2 2300 	ldrd	r2, r3, [r2]
 8005d5c:	4651      	mov	r1, sl
 8005d5e:	f7fa fce5 	bl	800072c <__aeabi_ddiv>
 8005d62:	e77e      	b.n	8005c62 <_strtod_l+0x3ca>
 8005d64:	2300      	movs	r3, #0
 8005d66:	4648      	mov	r0, r9
 8005d68:	4651      	mov	r1, sl
 8005d6a:	461d      	mov	r5, r3
 8005d6c:	4e33      	ldr	r6, [pc, #204]	; (8005e3c <_strtod_l+0x5a4>)
 8005d6e:	ea4f 1828 	mov.w	r8, r8, asr #4
 8005d72:	f1b8 0f01 	cmp.w	r8, #1
 8005d76:	dc21      	bgt.n	8005dbc <_strtod_l+0x524>
 8005d78:	b10b      	cbz	r3, 8005d7e <_strtod_l+0x4e6>
 8005d7a:	4681      	mov	r9, r0
 8005d7c:	468a      	mov	sl, r1
 8005d7e:	4b2f      	ldr	r3, [pc, #188]	; (8005e3c <_strtod_l+0x5a4>)
 8005d80:	f1aa 7a54 	sub.w	sl, sl, #55574528	; 0x3500000
 8005d84:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8005d88:	464a      	mov	r2, r9
 8005d8a:	e9d5 0100 	ldrd	r0, r1, [r5]
 8005d8e:	4653      	mov	r3, sl
 8005d90:	f7fa fba2 	bl	80004d8 <__aeabi_dmul>
 8005d94:	4b2a      	ldr	r3, [pc, #168]	; (8005e40 <_strtod_l+0x5a8>)
 8005d96:	460a      	mov	r2, r1
 8005d98:	400b      	ands	r3, r1
 8005d9a:	492a      	ldr	r1, [pc, #168]	; (8005e44 <_strtod_l+0x5ac>)
 8005d9c:	4681      	mov	r9, r0
 8005d9e:	428b      	cmp	r3, r1
 8005da0:	d894      	bhi.n	8005ccc <_strtod_l+0x434>
 8005da2:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8005da6:	428b      	cmp	r3, r1
 8005da8:	bf86      	itte	hi
 8005daa:	f04f 39ff 	movhi.w	r9, #4294967295	; 0xffffffff
 8005dae:	f8df a09c 	ldrhi.w	sl, [pc, #156]	; 8005e4c <_strtod_l+0x5b4>
 8005db2:	f102 7a54 	addls.w	sl, r2, #55574528	; 0x3500000
 8005db6:	2300      	movs	r3, #0
 8005db8:	9305      	str	r3, [sp, #20]
 8005dba:	e07b      	b.n	8005eb4 <_strtod_l+0x61c>
 8005dbc:	f018 0f01 	tst.w	r8, #1
 8005dc0:	d006      	beq.n	8005dd0 <_strtod_l+0x538>
 8005dc2:	eb06 03c5 	add.w	r3, r6, r5, lsl #3
 8005dc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005dca:	f7fa fb85 	bl	80004d8 <__aeabi_dmul>
 8005dce:	2301      	movs	r3, #1
 8005dd0:	3501      	adds	r5, #1
 8005dd2:	ea4f 0868 	mov.w	r8, r8, asr #1
 8005dd6:	e7cc      	b.n	8005d72 <_strtod_l+0x4da>
 8005dd8:	d0ed      	beq.n	8005db6 <_strtod_l+0x51e>
 8005dda:	f1c8 0800 	rsb	r8, r8, #0
 8005dde:	f018 020f 	ands.w	r2, r8, #15
 8005de2:	d00a      	beq.n	8005dfa <_strtod_l+0x562>
 8005de4:	4b14      	ldr	r3, [pc, #80]	; (8005e38 <_strtod_l+0x5a0>)
 8005de6:	4648      	mov	r0, r9
 8005de8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005dec:	4651      	mov	r1, sl
 8005dee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005df2:	f7fa fc9b 	bl	800072c <__aeabi_ddiv>
 8005df6:	4681      	mov	r9, r0
 8005df8:	468a      	mov	sl, r1
 8005dfa:	ea5f 1828 	movs.w	r8, r8, asr #4
 8005dfe:	d0da      	beq.n	8005db6 <_strtod_l+0x51e>
 8005e00:	f1b8 0f1f 	cmp.w	r8, #31
 8005e04:	dd24      	ble.n	8005e50 <_strtod_l+0x5b8>
 8005e06:	f04f 0800 	mov.w	r8, #0
 8005e0a:	f8cd 8010 	str.w	r8, [sp, #16]
 8005e0e:	f8cd 8020 	str.w	r8, [sp, #32]
 8005e12:	f8cd 8018 	str.w	r8, [sp, #24]
 8005e16:	2322      	movs	r3, #34	; 0x22
 8005e18:	f04f 0900 	mov.w	r9, #0
 8005e1c:	f04f 0a00 	mov.w	sl, #0
 8005e20:	f8cb 3000 	str.w	r3, [fp]
 8005e24:	e761      	b.n	8005cea <_strtod_l+0x452>
 8005e26:	bf00      	nop
 8005e28:	08008ced 	.word	0x08008ced
 8005e2c:	08008d7b 	.word	0x08008d7b
 8005e30:	08008cf5 	.word	0x08008cf5
 8005e34:	08008d38 	.word	0x08008d38
 8005e38:	08008db8 	.word	0x08008db8
 8005e3c:	08008d90 	.word	0x08008d90
 8005e40:	7ff00000 	.word	0x7ff00000
 8005e44:	7ca00000 	.word	0x7ca00000
 8005e48:	fff80000 	.word	0xfff80000
 8005e4c:	7fefffff 	.word	0x7fefffff
 8005e50:	f018 0310 	ands.w	r3, r8, #16
 8005e54:	bf18      	it	ne
 8005e56:	236a      	movne	r3, #106	; 0x6a
 8005e58:	4648      	mov	r0, r9
 8005e5a:	9305      	str	r3, [sp, #20]
 8005e5c:	4651      	mov	r1, sl
 8005e5e:	2300      	movs	r3, #0
 8005e60:	4da1      	ldr	r5, [pc, #644]	; (80060e8 <_strtod_l+0x850>)
 8005e62:	f1b8 0f00 	cmp.w	r8, #0
 8005e66:	f300 8113 	bgt.w	8006090 <_strtod_l+0x7f8>
 8005e6a:	b10b      	cbz	r3, 8005e70 <_strtod_l+0x5d8>
 8005e6c:	4681      	mov	r9, r0
 8005e6e:	468a      	mov	sl, r1
 8005e70:	9b05      	ldr	r3, [sp, #20]
 8005e72:	b1bb      	cbz	r3, 8005ea4 <_strtod_l+0x60c>
 8005e74:	f3ca 530a 	ubfx	r3, sl, #20, #11
 8005e78:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	4651      	mov	r1, sl
 8005e80:	dd10      	ble.n	8005ea4 <_strtod_l+0x60c>
 8005e82:	2b1f      	cmp	r3, #31
 8005e84:	f340 8110 	ble.w	80060a8 <_strtod_l+0x810>
 8005e88:	2b34      	cmp	r3, #52	; 0x34
 8005e8a:	bfd8      	it	le
 8005e8c:	f04f 32ff 	movle.w	r2, #4294967295	; 0xffffffff
 8005e90:	f04f 0900 	mov.w	r9, #0
 8005e94:	bfcf      	iteee	gt
 8005e96:	f04f 7a5c 	movgt.w	sl, #57671680	; 0x3700000
 8005e9a:	3b20      	suble	r3, #32
 8005e9c:	fa02 f303 	lslle.w	r3, r2, r3
 8005ea0:	ea03 0a01 	andle.w	sl, r3, r1
 8005ea4:	2200      	movs	r2, #0
 8005ea6:	2300      	movs	r3, #0
 8005ea8:	4648      	mov	r0, r9
 8005eaa:	4651      	mov	r1, sl
 8005eac:	f7fa fd7c 	bl	80009a8 <__aeabi_dcmpeq>
 8005eb0:	2800      	cmp	r0, #0
 8005eb2:	d1a8      	bne.n	8005e06 <_strtod_l+0x56e>
 8005eb4:	9b06      	ldr	r3, [sp, #24]
 8005eb6:	9a04      	ldr	r2, [sp, #16]
 8005eb8:	9300      	str	r3, [sp, #0]
 8005eba:	9908      	ldr	r1, [sp, #32]
 8005ebc:	4623      	mov	r3, r4
 8005ebe:	4658      	mov	r0, fp
 8005ec0:	f001 fdb4 	bl	8007a2c <__s2b>
 8005ec4:	9008      	str	r0, [sp, #32]
 8005ec6:	2800      	cmp	r0, #0
 8005ec8:	f43f af00 	beq.w	8005ccc <_strtod_l+0x434>
 8005ecc:	9a07      	ldr	r2, [sp, #28]
 8005ece:	9b07      	ldr	r3, [sp, #28]
 8005ed0:	2a00      	cmp	r2, #0
 8005ed2:	f1c3 0300 	rsb	r3, r3, #0
 8005ed6:	bfa8      	it	ge
 8005ed8:	2300      	movge	r3, #0
 8005eda:	f04f 0800 	mov.w	r8, #0
 8005ede:	930e      	str	r3, [sp, #56]	; 0x38
 8005ee0:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8005ee4:	9316      	str	r3, [sp, #88]	; 0x58
 8005ee6:	f8cd 8010 	str.w	r8, [sp, #16]
 8005eea:	9b08      	ldr	r3, [sp, #32]
 8005eec:	4658      	mov	r0, fp
 8005eee:	6859      	ldr	r1, [r3, #4]
 8005ef0:	f001 fd16 	bl	8007920 <_Balloc>
 8005ef4:	9006      	str	r0, [sp, #24]
 8005ef6:	2800      	cmp	r0, #0
 8005ef8:	f43f aef0 	beq.w	8005cdc <_strtod_l+0x444>
 8005efc:	9b08      	ldr	r3, [sp, #32]
 8005efe:	300c      	adds	r0, #12
 8005f00:	691a      	ldr	r2, [r3, #16]
 8005f02:	f103 010c 	add.w	r1, r3, #12
 8005f06:	3202      	adds	r2, #2
 8005f08:	0092      	lsls	r2, r2, #2
 8005f0a:	f7fe fdef 	bl	8004aec <memcpy>
 8005f0e:	ab1e      	add	r3, sp, #120	; 0x78
 8005f10:	9301      	str	r3, [sp, #4]
 8005f12:	ab1d      	add	r3, sp, #116	; 0x74
 8005f14:	9300      	str	r3, [sp, #0]
 8005f16:	464a      	mov	r2, r9
 8005f18:	4653      	mov	r3, sl
 8005f1a:	4658      	mov	r0, fp
 8005f1c:	e9cd 9a0a 	strd	r9, sl, [sp, #40]	; 0x28
 8005f20:	f002 f83e 	bl	8007fa0 <__d2b>
 8005f24:	901c      	str	r0, [sp, #112]	; 0x70
 8005f26:	2800      	cmp	r0, #0
 8005f28:	f43f aed8 	beq.w	8005cdc <_strtod_l+0x444>
 8005f2c:	2101      	movs	r1, #1
 8005f2e:	4658      	mov	r0, fp
 8005f30:	f001 fe08 	bl	8007b44 <__i2b>
 8005f34:	9004      	str	r0, [sp, #16]
 8005f36:	4603      	mov	r3, r0
 8005f38:	2800      	cmp	r0, #0
 8005f3a:	f43f aecf 	beq.w	8005cdc <_strtod_l+0x444>
 8005f3e:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 8005f40:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8005f42:	2d00      	cmp	r5, #0
 8005f44:	bfab      	itete	ge
 8005f46:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 8005f48:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 8005f4a:	18ee      	addge	r6, r5, r3
 8005f4c:	1b5c      	sublt	r4, r3, r5
 8005f4e:	9b05      	ldr	r3, [sp, #20]
 8005f50:	bfa8      	it	ge
 8005f52:	9c16      	ldrge	r4, [sp, #88]	; 0x58
 8005f54:	eba5 0503 	sub.w	r5, r5, r3
 8005f58:	4415      	add	r5, r2
 8005f5a:	4b64      	ldr	r3, [pc, #400]	; (80060ec <_strtod_l+0x854>)
 8005f5c:	f105 35ff 	add.w	r5, r5, #4294967295	; 0xffffffff
 8005f60:	bfb8      	it	lt
 8005f62:	9e0e      	ldrlt	r6, [sp, #56]	; 0x38
 8005f64:	429d      	cmp	r5, r3
 8005f66:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8005f6a:	f280 80af 	bge.w	80060cc <_strtod_l+0x834>
 8005f6e:	1b5b      	subs	r3, r3, r5
 8005f70:	2b1f      	cmp	r3, #31
 8005f72:	eba2 0203 	sub.w	r2, r2, r3
 8005f76:	f04f 0701 	mov.w	r7, #1
 8005f7a:	f300 809c 	bgt.w	80060b6 <_strtod_l+0x81e>
 8005f7e:	2500      	movs	r5, #0
 8005f80:	fa07 f303 	lsl.w	r3, r7, r3
 8005f84:	930f      	str	r3, [sp, #60]	; 0x3c
 8005f86:	18b7      	adds	r7, r6, r2
 8005f88:	9b05      	ldr	r3, [sp, #20]
 8005f8a:	42be      	cmp	r6, r7
 8005f8c:	4414      	add	r4, r2
 8005f8e:	441c      	add	r4, r3
 8005f90:	4633      	mov	r3, r6
 8005f92:	bfa8      	it	ge
 8005f94:	463b      	movge	r3, r7
 8005f96:	42a3      	cmp	r3, r4
 8005f98:	bfa8      	it	ge
 8005f9a:	4623      	movge	r3, r4
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	bfc2      	ittt	gt
 8005fa0:	1aff      	subgt	r7, r7, r3
 8005fa2:	1ae4      	subgt	r4, r4, r3
 8005fa4:	1af6      	subgt	r6, r6, r3
 8005fa6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005fa8:	b1bb      	cbz	r3, 8005fda <_strtod_l+0x742>
 8005faa:	461a      	mov	r2, r3
 8005fac:	9904      	ldr	r1, [sp, #16]
 8005fae:	4658      	mov	r0, fp
 8005fb0:	f001 fe66 	bl	8007c80 <__pow5mult>
 8005fb4:	9004      	str	r0, [sp, #16]
 8005fb6:	2800      	cmp	r0, #0
 8005fb8:	f43f ae90 	beq.w	8005cdc <_strtod_l+0x444>
 8005fbc:	4601      	mov	r1, r0
 8005fbe:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8005fc0:	4658      	mov	r0, fp
 8005fc2:	f001 fdc8 	bl	8007b56 <__multiply>
 8005fc6:	9009      	str	r0, [sp, #36]	; 0x24
 8005fc8:	2800      	cmp	r0, #0
 8005fca:	f43f ae87 	beq.w	8005cdc <_strtod_l+0x444>
 8005fce:	991c      	ldr	r1, [sp, #112]	; 0x70
 8005fd0:	4658      	mov	r0, fp
 8005fd2:	f001 fcd9 	bl	8007988 <_Bfree>
 8005fd6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005fd8:	931c      	str	r3, [sp, #112]	; 0x70
 8005fda:	2f00      	cmp	r7, #0
 8005fdc:	dc7a      	bgt.n	80060d4 <_strtod_l+0x83c>
 8005fde:	9b07      	ldr	r3, [sp, #28]
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	dd08      	ble.n	8005ff6 <_strtod_l+0x75e>
 8005fe4:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8005fe6:	9906      	ldr	r1, [sp, #24]
 8005fe8:	4658      	mov	r0, fp
 8005fea:	f001 fe49 	bl	8007c80 <__pow5mult>
 8005fee:	9006      	str	r0, [sp, #24]
 8005ff0:	2800      	cmp	r0, #0
 8005ff2:	f43f ae73 	beq.w	8005cdc <_strtod_l+0x444>
 8005ff6:	2c00      	cmp	r4, #0
 8005ff8:	dd08      	ble.n	800600c <_strtod_l+0x774>
 8005ffa:	4622      	mov	r2, r4
 8005ffc:	9906      	ldr	r1, [sp, #24]
 8005ffe:	4658      	mov	r0, fp
 8006000:	f001 fe8c 	bl	8007d1c <__lshift>
 8006004:	9006      	str	r0, [sp, #24]
 8006006:	2800      	cmp	r0, #0
 8006008:	f43f ae68 	beq.w	8005cdc <_strtod_l+0x444>
 800600c:	2e00      	cmp	r6, #0
 800600e:	dd08      	ble.n	8006022 <_strtod_l+0x78a>
 8006010:	4632      	mov	r2, r6
 8006012:	9904      	ldr	r1, [sp, #16]
 8006014:	4658      	mov	r0, fp
 8006016:	f001 fe81 	bl	8007d1c <__lshift>
 800601a:	9004      	str	r0, [sp, #16]
 800601c:	2800      	cmp	r0, #0
 800601e:	f43f ae5d 	beq.w	8005cdc <_strtod_l+0x444>
 8006022:	9a06      	ldr	r2, [sp, #24]
 8006024:	991c      	ldr	r1, [sp, #112]	; 0x70
 8006026:	4658      	mov	r0, fp
 8006028:	f001 fee6 	bl	8007df8 <__mdiff>
 800602c:	4680      	mov	r8, r0
 800602e:	2800      	cmp	r0, #0
 8006030:	f43f ae54 	beq.w	8005cdc <_strtod_l+0x444>
 8006034:	2400      	movs	r4, #0
 8006036:	68c3      	ldr	r3, [r0, #12]
 8006038:	9904      	ldr	r1, [sp, #16]
 800603a:	60c4      	str	r4, [r0, #12]
 800603c:	930c      	str	r3, [sp, #48]	; 0x30
 800603e:	f001 fec1 	bl	8007dc4 <__mcmp>
 8006042:	42a0      	cmp	r0, r4
 8006044:	da54      	bge.n	80060f0 <_strtod_l+0x858>
 8006046:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006048:	b9f3      	cbnz	r3, 8006088 <_strtod_l+0x7f0>
 800604a:	f1b9 0f00 	cmp.w	r9, #0
 800604e:	d11b      	bne.n	8006088 <_strtod_l+0x7f0>
 8006050:	f3ca 0313 	ubfx	r3, sl, #0, #20
 8006054:	b9c3      	cbnz	r3, 8006088 <_strtod_l+0x7f0>
 8006056:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 800605a:	0d1b      	lsrs	r3, r3, #20
 800605c:	051b      	lsls	r3, r3, #20
 800605e:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8006062:	d911      	bls.n	8006088 <_strtod_l+0x7f0>
 8006064:	f8d8 3014 	ldr.w	r3, [r8, #20]
 8006068:	b91b      	cbnz	r3, 8006072 <_strtod_l+0x7da>
 800606a:	f8d8 3010 	ldr.w	r3, [r8, #16]
 800606e:	2b01      	cmp	r3, #1
 8006070:	dd0a      	ble.n	8006088 <_strtod_l+0x7f0>
 8006072:	4641      	mov	r1, r8
 8006074:	2201      	movs	r2, #1
 8006076:	4658      	mov	r0, fp
 8006078:	f001 fe50 	bl	8007d1c <__lshift>
 800607c:	9904      	ldr	r1, [sp, #16]
 800607e:	4680      	mov	r8, r0
 8006080:	f001 fea0 	bl	8007dc4 <__mcmp>
 8006084:	2800      	cmp	r0, #0
 8006086:	dc68      	bgt.n	800615a <_strtod_l+0x8c2>
 8006088:	9b05      	ldr	r3, [sp, #20]
 800608a:	2b00      	cmp	r3, #0
 800608c:	d172      	bne.n	8006174 <_strtod_l+0x8dc>
 800608e:	e630      	b.n	8005cf2 <_strtod_l+0x45a>
 8006090:	f018 0f01 	tst.w	r8, #1
 8006094:	d004      	beq.n	80060a0 <_strtod_l+0x808>
 8006096:	e9d5 2300 	ldrd	r2, r3, [r5]
 800609a:	f7fa fa1d 	bl	80004d8 <__aeabi_dmul>
 800609e:	2301      	movs	r3, #1
 80060a0:	ea4f 0868 	mov.w	r8, r8, asr #1
 80060a4:	3508      	adds	r5, #8
 80060a6:	e6dc      	b.n	8005e62 <_strtod_l+0x5ca>
 80060a8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80060ac:	fa02 f303 	lsl.w	r3, r2, r3
 80060b0:	ea03 0909 	and.w	r9, r3, r9
 80060b4:	e6f6      	b.n	8005ea4 <_strtod_l+0x60c>
 80060b6:	f1c5 457f 	rsb	r5, r5, #4278190080	; 0xff000000
 80060ba:	f505 057f 	add.w	r5, r5, #16711680	; 0xff0000
 80060be:	f505 457b 	add.w	r5, r5, #64256	; 0xfb00
 80060c2:	35e2      	adds	r5, #226	; 0xe2
 80060c4:	fa07 f505 	lsl.w	r5, r7, r5
 80060c8:	970f      	str	r7, [sp, #60]	; 0x3c
 80060ca:	e75c      	b.n	8005f86 <_strtod_l+0x6ee>
 80060cc:	2301      	movs	r3, #1
 80060ce:	2500      	movs	r5, #0
 80060d0:	930f      	str	r3, [sp, #60]	; 0x3c
 80060d2:	e758      	b.n	8005f86 <_strtod_l+0x6ee>
 80060d4:	463a      	mov	r2, r7
 80060d6:	991c      	ldr	r1, [sp, #112]	; 0x70
 80060d8:	4658      	mov	r0, fp
 80060da:	f001 fe1f 	bl	8007d1c <__lshift>
 80060de:	901c      	str	r0, [sp, #112]	; 0x70
 80060e0:	2800      	cmp	r0, #0
 80060e2:	f47f af7c 	bne.w	8005fde <_strtod_l+0x746>
 80060e6:	e5f9      	b.n	8005cdc <_strtod_l+0x444>
 80060e8:	08008d50 	.word	0x08008d50
 80060ec:	fffffc02 	.word	0xfffffc02
 80060f0:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 80060f4:	f040 8089 	bne.w	800620a <_strtod_l+0x972>
 80060f8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80060fa:	f3ca 0313 	ubfx	r3, sl, #0, #20
 80060fe:	b342      	cbz	r2, 8006152 <_strtod_l+0x8ba>
 8006100:	4aaf      	ldr	r2, [pc, #700]	; (80063c0 <_strtod_l+0xb28>)
 8006102:	4293      	cmp	r3, r2
 8006104:	d156      	bne.n	80061b4 <_strtod_l+0x91c>
 8006106:	9b05      	ldr	r3, [sp, #20]
 8006108:	4648      	mov	r0, r9
 800610a:	b1eb      	cbz	r3, 8006148 <_strtod_l+0x8b0>
 800610c:	4653      	mov	r3, sl
 800610e:	4aad      	ldr	r2, [pc, #692]	; (80063c4 <_strtod_l+0xb2c>)
 8006110:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8006114:	401a      	ands	r2, r3
 8006116:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 800611a:	d818      	bhi.n	800614e <_strtod_l+0x8b6>
 800611c:	0d12      	lsrs	r2, r2, #20
 800611e:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8006122:	fa01 f303 	lsl.w	r3, r1, r3
 8006126:	4298      	cmp	r0, r3
 8006128:	d144      	bne.n	80061b4 <_strtod_l+0x91c>
 800612a:	4ba7      	ldr	r3, [pc, #668]	; (80063c8 <_strtod_l+0xb30>)
 800612c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800612e:	429a      	cmp	r2, r3
 8006130:	d102      	bne.n	8006138 <_strtod_l+0x8a0>
 8006132:	3001      	adds	r0, #1
 8006134:	f43f add2 	beq.w	8005cdc <_strtod_l+0x444>
 8006138:	4ba2      	ldr	r3, [pc, #648]	; (80063c4 <_strtod_l+0xb2c>)
 800613a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800613c:	f04f 0900 	mov.w	r9, #0
 8006140:	401a      	ands	r2, r3
 8006142:	f502 1a80 	add.w	sl, r2, #1048576	; 0x100000
 8006146:	e79f      	b.n	8006088 <_strtod_l+0x7f0>
 8006148:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800614c:	e7eb      	b.n	8006126 <_strtod_l+0x88e>
 800614e:	460b      	mov	r3, r1
 8006150:	e7e9      	b.n	8006126 <_strtod_l+0x88e>
 8006152:	bb7b      	cbnz	r3, 80061b4 <_strtod_l+0x91c>
 8006154:	f1b9 0f00 	cmp.w	r9, #0
 8006158:	d12c      	bne.n	80061b4 <_strtod_l+0x91c>
 800615a:	9905      	ldr	r1, [sp, #20]
 800615c:	4653      	mov	r3, sl
 800615e:	4a99      	ldr	r2, [pc, #612]	; (80063c4 <_strtod_l+0xb2c>)
 8006160:	b1f1      	cbz	r1, 80061a0 <_strtod_l+0x908>
 8006162:	ea02 010a 	and.w	r1, r2, sl
 8006166:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800616a:	dc19      	bgt.n	80061a0 <_strtod_l+0x908>
 800616c:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8006170:	f77f ae51 	ble.w	8005e16 <_strtod_l+0x57e>
 8006174:	2300      	movs	r3, #0
 8006176:	4a95      	ldr	r2, [pc, #596]	; (80063cc <_strtod_l+0xb34>)
 8006178:	4648      	mov	r0, r9
 800617a:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 800617e:	4651      	mov	r1, sl
 8006180:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8006184:	f7fa f9a8 	bl	80004d8 <__aeabi_dmul>
 8006188:	4681      	mov	r9, r0
 800618a:	468a      	mov	sl, r1
 800618c:	2900      	cmp	r1, #0
 800618e:	f47f adb0 	bne.w	8005cf2 <_strtod_l+0x45a>
 8006192:	2800      	cmp	r0, #0
 8006194:	f47f adad 	bne.w	8005cf2 <_strtod_l+0x45a>
 8006198:	2322      	movs	r3, #34	; 0x22
 800619a:	f8cb 3000 	str.w	r3, [fp]
 800619e:	e5a8      	b.n	8005cf2 <_strtod_l+0x45a>
 80061a0:	4013      	ands	r3, r2
 80061a2:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 80061a6:	ea6f 5a13 	mvn.w	sl, r3, lsr #20
 80061aa:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
 80061ae:	ea6f 5a0a 	mvn.w	sl, sl, lsl #20
 80061b2:	e769      	b.n	8006088 <_strtod_l+0x7f0>
 80061b4:	b19d      	cbz	r5, 80061de <_strtod_l+0x946>
 80061b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80061b8:	421d      	tst	r5, r3
 80061ba:	f43f af65 	beq.w	8006088 <_strtod_l+0x7f0>
 80061be:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80061c0:	9a05      	ldr	r2, [sp, #20]
 80061c2:	4648      	mov	r0, r9
 80061c4:	4651      	mov	r1, sl
 80061c6:	b173      	cbz	r3, 80061e6 <_strtod_l+0x94e>
 80061c8:	f7ff fb44 	bl	8005854 <sulp>
 80061cc:	4602      	mov	r2, r0
 80061ce:	460b      	mov	r3, r1
 80061d0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80061d4:	f7f9 ffca 	bl	800016c <__adddf3>
 80061d8:	4681      	mov	r9, r0
 80061da:	468a      	mov	sl, r1
 80061dc:	e754      	b.n	8006088 <_strtod_l+0x7f0>
 80061de:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80061e0:	ea13 0f09 	tst.w	r3, r9
 80061e4:	e7e9      	b.n	80061ba <_strtod_l+0x922>
 80061e6:	f7ff fb35 	bl	8005854 <sulp>
 80061ea:	4602      	mov	r2, r0
 80061ec:	460b      	mov	r3, r1
 80061ee:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80061f2:	f7f9 ffb9 	bl	8000168 <__aeabi_dsub>
 80061f6:	2200      	movs	r2, #0
 80061f8:	2300      	movs	r3, #0
 80061fa:	4681      	mov	r9, r0
 80061fc:	468a      	mov	sl, r1
 80061fe:	f7fa fbd3 	bl	80009a8 <__aeabi_dcmpeq>
 8006202:	2800      	cmp	r0, #0
 8006204:	f47f ae07 	bne.w	8005e16 <_strtod_l+0x57e>
 8006208:	e73e      	b.n	8006088 <_strtod_l+0x7f0>
 800620a:	9904      	ldr	r1, [sp, #16]
 800620c:	4640      	mov	r0, r8
 800620e:	f001 ff16 	bl	800803e <__ratio>
 8006212:	2200      	movs	r2, #0
 8006214:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006218:	4606      	mov	r6, r0
 800621a:	460f      	mov	r7, r1
 800621c:	f7fa fbd8 	bl	80009d0 <__aeabi_dcmple>
 8006220:	2800      	cmp	r0, #0
 8006222:	d075      	beq.n	8006310 <_strtod_l+0xa78>
 8006224:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006226:	2b00      	cmp	r3, #0
 8006228:	d047      	beq.n	80062ba <_strtod_l+0xa22>
 800622a:	2600      	movs	r6, #0
 800622c:	4f68      	ldr	r7, [pc, #416]	; (80063d0 <_strtod_l+0xb38>)
 800622e:	4d68      	ldr	r5, [pc, #416]	; (80063d0 <_strtod_l+0xb38>)
 8006230:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006232:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006236:	0d1b      	lsrs	r3, r3, #20
 8006238:	051b      	lsls	r3, r3, #20
 800623a:	930f      	str	r3, [sp, #60]	; 0x3c
 800623c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800623e:	4b65      	ldr	r3, [pc, #404]	; (80063d4 <_strtod_l+0xb3c>)
 8006240:	429a      	cmp	r2, r3
 8006242:	f040 80cf 	bne.w	80063e4 <_strtod_l+0xb4c>
 8006246:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800624a:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 800624e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006250:	4648      	mov	r0, r9
 8006252:	f1a3 7a54 	sub.w	sl, r3, #55574528	; 0x3500000
 8006256:	4651      	mov	r1, sl
 8006258:	f001 fe2c 	bl	8007eb4 <__ulp>
 800625c:	4602      	mov	r2, r0
 800625e:	460b      	mov	r3, r1
 8006260:	4630      	mov	r0, r6
 8006262:	4639      	mov	r1, r7
 8006264:	f7fa f938 	bl	80004d8 <__aeabi_dmul>
 8006268:	464a      	mov	r2, r9
 800626a:	4653      	mov	r3, sl
 800626c:	f7f9 ff7e 	bl	800016c <__adddf3>
 8006270:	460b      	mov	r3, r1
 8006272:	4954      	ldr	r1, [pc, #336]	; (80063c4 <_strtod_l+0xb2c>)
 8006274:	4a58      	ldr	r2, [pc, #352]	; (80063d8 <_strtod_l+0xb40>)
 8006276:	4019      	ands	r1, r3
 8006278:	4291      	cmp	r1, r2
 800627a:	4681      	mov	r9, r0
 800627c:	d95e      	bls.n	800633c <_strtod_l+0xaa4>
 800627e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006280:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8006284:	4293      	cmp	r3, r2
 8006286:	d103      	bne.n	8006290 <_strtod_l+0x9f8>
 8006288:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800628a:	3301      	adds	r3, #1
 800628c:	f43f ad26 	beq.w	8005cdc <_strtod_l+0x444>
 8006290:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
 8006294:	f8df a130 	ldr.w	sl, [pc, #304]	; 80063c8 <_strtod_l+0xb30>
 8006298:	991c      	ldr	r1, [sp, #112]	; 0x70
 800629a:	4658      	mov	r0, fp
 800629c:	f001 fb74 	bl	8007988 <_Bfree>
 80062a0:	9906      	ldr	r1, [sp, #24]
 80062a2:	4658      	mov	r0, fp
 80062a4:	f001 fb70 	bl	8007988 <_Bfree>
 80062a8:	9904      	ldr	r1, [sp, #16]
 80062aa:	4658      	mov	r0, fp
 80062ac:	f001 fb6c 	bl	8007988 <_Bfree>
 80062b0:	4641      	mov	r1, r8
 80062b2:	4658      	mov	r0, fp
 80062b4:	f001 fb68 	bl	8007988 <_Bfree>
 80062b8:	e617      	b.n	8005eea <_strtod_l+0x652>
 80062ba:	f1b9 0f00 	cmp.w	r9, #0
 80062be:	d119      	bne.n	80062f4 <_strtod_l+0xa5c>
 80062c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80062c2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80062c6:	b9e3      	cbnz	r3, 8006302 <_strtod_l+0xa6a>
 80062c8:	2200      	movs	r2, #0
 80062ca:	4b41      	ldr	r3, [pc, #260]	; (80063d0 <_strtod_l+0xb38>)
 80062cc:	4630      	mov	r0, r6
 80062ce:	4639      	mov	r1, r7
 80062d0:	f7fa fb74 	bl	80009bc <__aeabi_dcmplt>
 80062d4:	b9c8      	cbnz	r0, 800630a <_strtod_l+0xa72>
 80062d6:	2200      	movs	r2, #0
 80062d8:	4b40      	ldr	r3, [pc, #256]	; (80063dc <_strtod_l+0xb44>)
 80062da:	4630      	mov	r0, r6
 80062dc:	4639      	mov	r1, r7
 80062de:	f7fa f8fb 	bl	80004d8 <__aeabi_dmul>
 80062e2:	4604      	mov	r4, r0
 80062e4:	460d      	mov	r5, r1
 80062e6:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 80062ea:	9418      	str	r4, [sp, #96]	; 0x60
 80062ec:	9319      	str	r3, [sp, #100]	; 0x64
 80062ee:	e9dd 6718 	ldrd	r6, r7, [sp, #96]	; 0x60
 80062f2:	e79d      	b.n	8006230 <_strtod_l+0x998>
 80062f4:	f1b9 0f01 	cmp.w	r9, #1
 80062f8:	d103      	bne.n	8006302 <_strtod_l+0xa6a>
 80062fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	f43f ad8a 	beq.w	8005e16 <_strtod_l+0x57e>
 8006302:	2600      	movs	r6, #0
 8006304:	4f36      	ldr	r7, [pc, #216]	; (80063e0 <_strtod_l+0xb48>)
 8006306:	2400      	movs	r4, #0
 8006308:	e791      	b.n	800622e <_strtod_l+0x996>
 800630a:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 800630c:	4d33      	ldr	r5, [pc, #204]	; (80063dc <_strtod_l+0xb44>)
 800630e:	e7ea      	b.n	80062e6 <_strtod_l+0xa4e>
 8006310:	4b32      	ldr	r3, [pc, #200]	; (80063dc <_strtod_l+0xb44>)
 8006312:	2200      	movs	r2, #0
 8006314:	4630      	mov	r0, r6
 8006316:	4639      	mov	r1, r7
 8006318:	f7fa f8de 	bl	80004d8 <__aeabi_dmul>
 800631c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800631e:	4604      	mov	r4, r0
 8006320:	460d      	mov	r5, r1
 8006322:	b933      	cbnz	r3, 8006332 <_strtod_l+0xa9a>
 8006324:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006328:	9010      	str	r0, [sp, #64]	; 0x40
 800632a:	9311      	str	r3, [sp, #68]	; 0x44
 800632c:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8006330:	e77e      	b.n	8006230 <_strtod_l+0x998>
 8006332:	4602      	mov	r2, r0
 8006334:	460b      	mov	r3, r1
 8006336:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 800633a:	e7f7      	b.n	800632c <_strtod_l+0xa94>
 800633c:	f103 7a54 	add.w	sl, r3, #55574528	; 0x3500000
 8006340:	9b05      	ldr	r3, [sp, #20]
 8006342:	2b00      	cmp	r3, #0
 8006344:	d1a8      	bne.n	8006298 <_strtod_l+0xa00>
 8006346:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 800634a:	0d1b      	lsrs	r3, r3, #20
 800634c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800634e:	051b      	lsls	r3, r3, #20
 8006350:	429a      	cmp	r2, r3
 8006352:	4656      	mov	r6, sl
 8006354:	d1a0      	bne.n	8006298 <_strtod_l+0xa00>
 8006356:	4629      	mov	r1, r5
 8006358:	4620      	mov	r0, r4
 800635a:	f7fa fb6d 	bl	8000a38 <__aeabi_d2iz>
 800635e:	f7fa f851 	bl	8000404 <__aeabi_i2d>
 8006362:	460b      	mov	r3, r1
 8006364:	4602      	mov	r2, r0
 8006366:	4629      	mov	r1, r5
 8006368:	4620      	mov	r0, r4
 800636a:	f7f9 fefd 	bl	8000168 <__aeabi_dsub>
 800636e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006370:	4604      	mov	r4, r0
 8006372:	460d      	mov	r5, r1
 8006374:	b933      	cbnz	r3, 8006384 <_strtod_l+0xaec>
 8006376:	f1b9 0f00 	cmp.w	r9, #0
 800637a:	d103      	bne.n	8006384 <_strtod_l+0xaec>
 800637c:	f3ca 0613 	ubfx	r6, sl, #0, #20
 8006380:	2e00      	cmp	r6, #0
 8006382:	d06a      	beq.n	800645a <_strtod_l+0xbc2>
 8006384:	a30a      	add	r3, pc, #40	; (adr r3, 80063b0 <_strtod_l+0xb18>)
 8006386:	e9d3 2300 	ldrd	r2, r3, [r3]
 800638a:	4620      	mov	r0, r4
 800638c:	4629      	mov	r1, r5
 800638e:	f7fa fb15 	bl	80009bc <__aeabi_dcmplt>
 8006392:	2800      	cmp	r0, #0
 8006394:	f47f acad 	bne.w	8005cf2 <_strtod_l+0x45a>
 8006398:	a307      	add	r3, pc, #28	; (adr r3, 80063b8 <_strtod_l+0xb20>)
 800639a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800639e:	4620      	mov	r0, r4
 80063a0:	4629      	mov	r1, r5
 80063a2:	f7fa fb29 	bl	80009f8 <__aeabi_dcmpgt>
 80063a6:	2800      	cmp	r0, #0
 80063a8:	f43f af76 	beq.w	8006298 <_strtod_l+0xa00>
 80063ac:	e4a1      	b.n	8005cf2 <_strtod_l+0x45a>
 80063ae:	bf00      	nop
 80063b0:	94a03595 	.word	0x94a03595
 80063b4:	3fdfffff 	.word	0x3fdfffff
 80063b8:	35afe535 	.word	0x35afe535
 80063bc:	3fe00000 	.word	0x3fe00000
 80063c0:	000fffff 	.word	0x000fffff
 80063c4:	7ff00000 	.word	0x7ff00000
 80063c8:	7fefffff 	.word	0x7fefffff
 80063cc:	39500000 	.word	0x39500000
 80063d0:	3ff00000 	.word	0x3ff00000
 80063d4:	7fe00000 	.word	0x7fe00000
 80063d8:	7c9fffff 	.word	0x7c9fffff
 80063dc:	3fe00000 	.word	0x3fe00000
 80063e0:	bff00000 	.word	0xbff00000
 80063e4:	9b05      	ldr	r3, [sp, #20]
 80063e6:	b313      	cbz	r3, 800642e <_strtod_l+0xb96>
 80063e8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80063ea:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80063ee:	d81e      	bhi.n	800642e <_strtod_l+0xb96>
 80063f0:	a325      	add	r3, pc, #148	; (adr r3, 8006488 <_strtod_l+0xbf0>)
 80063f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063f6:	4620      	mov	r0, r4
 80063f8:	4629      	mov	r1, r5
 80063fa:	f7fa fae9 	bl	80009d0 <__aeabi_dcmple>
 80063fe:	b190      	cbz	r0, 8006426 <_strtod_l+0xb8e>
 8006400:	4629      	mov	r1, r5
 8006402:	4620      	mov	r0, r4
 8006404:	f7fa fb40 	bl	8000a88 <__aeabi_d2uiz>
 8006408:	2800      	cmp	r0, #0
 800640a:	bf08      	it	eq
 800640c:	2001      	moveq	r0, #1
 800640e:	f7f9 ffe9 	bl	80003e4 <__aeabi_ui2d>
 8006412:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006414:	4604      	mov	r4, r0
 8006416:	460d      	mov	r5, r1
 8006418:	b9d3      	cbnz	r3, 8006450 <_strtod_l+0xbb8>
 800641a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800641e:	9012      	str	r0, [sp, #72]	; 0x48
 8006420:	9313      	str	r3, [sp, #76]	; 0x4c
 8006422:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
 8006426:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8006428:	f107 63d6 	add.w	r3, r7, #112197632	; 0x6b00000
 800642c:	1a9f      	subs	r7, r3, r2
 800642e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8006432:	f001 fd3f 	bl	8007eb4 <__ulp>
 8006436:	4602      	mov	r2, r0
 8006438:	460b      	mov	r3, r1
 800643a:	4630      	mov	r0, r6
 800643c:	4639      	mov	r1, r7
 800643e:	f7fa f84b 	bl	80004d8 <__aeabi_dmul>
 8006442:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8006446:	f7f9 fe91 	bl	800016c <__adddf3>
 800644a:	4681      	mov	r9, r0
 800644c:	468a      	mov	sl, r1
 800644e:	e777      	b.n	8006340 <_strtod_l+0xaa8>
 8006450:	4602      	mov	r2, r0
 8006452:	460b      	mov	r3, r1
 8006454:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
 8006458:	e7e3      	b.n	8006422 <_strtod_l+0xb8a>
 800645a:	a30d      	add	r3, pc, #52	; (adr r3, 8006490 <_strtod_l+0xbf8>)
 800645c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006460:	f7fa faac 	bl	80009bc <__aeabi_dcmplt>
 8006464:	e79f      	b.n	80063a6 <_strtod_l+0xb0e>
 8006466:	2300      	movs	r3, #0
 8006468:	930d      	str	r3, [sp, #52]	; 0x34
 800646a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800646c:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800646e:	6013      	str	r3, [r2, #0]
 8006470:	f7ff ba55 	b.w	800591e <_strtod_l+0x86>
 8006474:	2b65      	cmp	r3, #101	; 0x65
 8006476:	f04f 0200 	mov.w	r2, #0
 800647a:	f43f ab42 	beq.w	8005b02 <_strtod_l+0x26a>
 800647e:	2101      	movs	r1, #1
 8006480:	4614      	mov	r4, r2
 8006482:	9105      	str	r1, [sp, #20]
 8006484:	f7ff babf 	b.w	8005a06 <_strtod_l+0x16e>
 8006488:	ffc00000 	.word	0xffc00000
 800648c:	41dfffff 	.word	0x41dfffff
 8006490:	94a03595 	.word	0x94a03595
 8006494:	3fcfffff 	.word	0x3fcfffff

08006498 <_strtod_r>:
 8006498:	4b05      	ldr	r3, [pc, #20]	; (80064b0 <_strtod_r+0x18>)
 800649a:	b410      	push	{r4}
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	4c05      	ldr	r4, [pc, #20]	; (80064b4 <_strtod_r+0x1c>)
 80064a0:	6a1b      	ldr	r3, [r3, #32]
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	bf08      	it	eq
 80064a6:	4623      	moveq	r3, r4
 80064a8:	bc10      	pop	{r4}
 80064aa:	f7ff b9f5 	b.w	8005898 <_strtod_l>
 80064ae:	bf00      	nop
 80064b0:	20000018 	.word	0x20000018
 80064b4:	2000007c 	.word	0x2000007c

080064b8 <_strtol_l.isra.0>:
 80064b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80064bc:	4680      	mov	r8, r0
 80064be:	4689      	mov	r9, r1
 80064c0:	4692      	mov	sl, r2
 80064c2:	461e      	mov	r6, r3
 80064c4:	460f      	mov	r7, r1
 80064c6:	463d      	mov	r5, r7
 80064c8:	9808      	ldr	r0, [sp, #32]
 80064ca:	f815 4b01 	ldrb.w	r4, [r5], #1
 80064ce:	f001 f9eb 	bl	80078a8 <__locale_ctype_ptr_l>
 80064d2:	4420      	add	r0, r4
 80064d4:	7843      	ldrb	r3, [r0, #1]
 80064d6:	f013 0308 	ands.w	r3, r3, #8
 80064da:	d132      	bne.n	8006542 <_strtol_l.isra.0+0x8a>
 80064dc:	2c2d      	cmp	r4, #45	; 0x2d
 80064de:	d132      	bne.n	8006546 <_strtol_l.isra.0+0x8e>
 80064e0:	2201      	movs	r2, #1
 80064e2:	787c      	ldrb	r4, [r7, #1]
 80064e4:	1cbd      	adds	r5, r7, #2
 80064e6:	2e00      	cmp	r6, #0
 80064e8:	d05d      	beq.n	80065a6 <_strtol_l.isra.0+0xee>
 80064ea:	2e10      	cmp	r6, #16
 80064ec:	d109      	bne.n	8006502 <_strtol_l.isra.0+0x4a>
 80064ee:	2c30      	cmp	r4, #48	; 0x30
 80064f0:	d107      	bne.n	8006502 <_strtol_l.isra.0+0x4a>
 80064f2:	782b      	ldrb	r3, [r5, #0]
 80064f4:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80064f8:	2b58      	cmp	r3, #88	; 0x58
 80064fa:	d14f      	bne.n	800659c <_strtol_l.isra.0+0xe4>
 80064fc:	2610      	movs	r6, #16
 80064fe:	786c      	ldrb	r4, [r5, #1]
 8006500:	3502      	adds	r5, #2
 8006502:	2a00      	cmp	r2, #0
 8006504:	bf14      	ite	ne
 8006506:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 800650a:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 800650e:	2700      	movs	r7, #0
 8006510:	fbb1 fcf6 	udiv	ip, r1, r6
 8006514:	4638      	mov	r0, r7
 8006516:	fb06 1e1c 	mls	lr, r6, ip, r1
 800651a:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 800651e:	2b09      	cmp	r3, #9
 8006520:	d817      	bhi.n	8006552 <_strtol_l.isra.0+0x9a>
 8006522:	461c      	mov	r4, r3
 8006524:	42a6      	cmp	r6, r4
 8006526:	dd23      	ble.n	8006570 <_strtol_l.isra.0+0xb8>
 8006528:	1c7b      	adds	r3, r7, #1
 800652a:	d007      	beq.n	800653c <_strtol_l.isra.0+0x84>
 800652c:	4584      	cmp	ip, r0
 800652e:	d31c      	bcc.n	800656a <_strtol_l.isra.0+0xb2>
 8006530:	d101      	bne.n	8006536 <_strtol_l.isra.0+0x7e>
 8006532:	45a6      	cmp	lr, r4
 8006534:	db19      	blt.n	800656a <_strtol_l.isra.0+0xb2>
 8006536:	2701      	movs	r7, #1
 8006538:	fb00 4006 	mla	r0, r0, r6, r4
 800653c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006540:	e7eb      	b.n	800651a <_strtol_l.isra.0+0x62>
 8006542:	462f      	mov	r7, r5
 8006544:	e7bf      	b.n	80064c6 <_strtol_l.isra.0+0xe>
 8006546:	2c2b      	cmp	r4, #43	; 0x2b
 8006548:	bf04      	itt	eq
 800654a:	1cbd      	addeq	r5, r7, #2
 800654c:	787c      	ldrbeq	r4, [r7, #1]
 800654e:	461a      	mov	r2, r3
 8006550:	e7c9      	b.n	80064e6 <_strtol_l.isra.0+0x2e>
 8006552:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 8006556:	2b19      	cmp	r3, #25
 8006558:	d801      	bhi.n	800655e <_strtol_l.isra.0+0xa6>
 800655a:	3c37      	subs	r4, #55	; 0x37
 800655c:	e7e2      	b.n	8006524 <_strtol_l.isra.0+0x6c>
 800655e:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 8006562:	2b19      	cmp	r3, #25
 8006564:	d804      	bhi.n	8006570 <_strtol_l.isra.0+0xb8>
 8006566:	3c57      	subs	r4, #87	; 0x57
 8006568:	e7dc      	b.n	8006524 <_strtol_l.isra.0+0x6c>
 800656a:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800656e:	e7e5      	b.n	800653c <_strtol_l.isra.0+0x84>
 8006570:	1c7b      	adds	r3, r7, #1
 8006572:	d108      	bne.n	8006586 <_strtol_l.isra.0+0xce>
 8006574:	2322      	movs	r3, #34	; 0x22
 8006576:	4608      	mov	r0, r1
 8006578:	f8c8 3000 	str.w	r3, [r8]
 800657c:	f1ba 0f00 	cmp.w	sl, #0
 8006580:	d107      	bne.n	8006592 <_strtol_l.isra.0+0xda>
 8006582:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006586:	b102      	cbz	r2, 800658a <_strtol_l.isra.0+0xd2>
 8006588:	4240      	negs	r0, r0
 800658a:	f1ba 0f00 	cmp.w	sl, #0
 800658e:	d0f8      	beq.n	8006582 <_strtol_l.isra.0+0xca>
 8006590:	b10f      	cbz	r7, 8006596 <_strtol_l.isra.0+0xde>
 8006592:	f105 39ff 	add.w	r9, r5, #4294967295	; 0xffffffff
 8006596:	f8ca 9000 	str.w	r9, [sl]
 800659a:	e7f2      	b.n	8006582 <_strtol_l.isra.0+0xca>
 800659c:	2430      	movs	r4, #48	; 0x30
 800659e:	2e00      	cmp	r6, #0
 80065a0:	d1af      	bne.n	8006502 <_strtol_l.isra.0+0x4a>
 80065a2:	2608      	movs	r6, #8
 80065a4:	e7ad      	b.n	8006502 <_strtol_l.isra.0+0x4a>
 80065a6:	2c30      	cmp	r4, #48	; 0x30
 80065a8:	d0a3      	beq.n	80064f2 <_strtol_l.isra.0+0x3a>
 80065aa:	260a      	movs	r6, #10
 80065ac:	e7a9      	b.n	8006502 <_strtol_l.isra.0+0x4a>
	...

080065b0 <_strtol_r>:
 80065b0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80065b2:	4c06      	ldr	r4, [pc, #24]	; (80065cc <_strtol_r+0x1c>)
 80065b4:	4d06      	ldr	r5, [pc, #24]	; (80065d0 <_strtol_r+0x20>)
 80065b6:	6824      	ldr	r4, [r4, #0]
 80065b8:	6a24      	ldr	r4, [r4, #32]
 80065ba:	2c00      	cmp	r4, #0
 80065bc:	bf08      	it	eq
 80065be:	462c      	moveq	r4, r5
 80065c0:	9400      	str	r4, [sp, #0]
 80065c2:	f7ff ff79 	bl	80064b8 <_strtol_l.isra.0>
 80065c6:	b003      	add	sp, #12
 80065c8:	bd30      	pop	{r4, r5, pc}
 80065ca:	bf00      	nop
 80065cc:	20000018 	.word	0x20000018
 80065d0:	2000007c 	.word	0x2000007c

080065d4 <quorem>:
 80065d4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80065d8:	6903      	ldr	r3, [r0, #16]
 80065da:	690c      	ldr	r4, [r1, #16]
 80065dc:	4680      	mov	r8, r0
 80065de:	42a3      	cmp	r3, r4
 80065e0:	f2c0 8084 	blt.w	80066ec <quorem+0x118>
 80065e4:	3c01      	subs	r4, #1
 80065e6:	f101 0714 	add.w	r7, r1, #20
 80065ea:	f100 0614 	add.w	r6, r0, #20
 80065ee:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 80065f2:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 80065f6:	3501      	adds	r5, #1
 80065f8:	fbb0 f5f5 	udiv	r5, r0, r5
 80065fc:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8006600:	eb06 030c 	add.w	r3, r6, ip
 8006604:	eb07 090c 	add.w	r9, r7, ip
 8006608:	9301      	str	r3, [sp, #4]
 800660a:	b39d      	cbz	r5, 8006674 <quorem+0xa0>
 800660c:	f04f 0a00 	mov.w	sl, #0
 8006610:	4638      	mov	r0, r7
 8006612:	46b6      	mov	lr, r6
 8006614:	46d3      	mov	fp, sl
 8006616:	f850 2b04 	ldr.w	r2, [r0], #4
 800661a:	b293      	uxth	r3, r2
 800661c:	fb05 a303 	mla	r3, r5, r3, sl
 8006620:	0c12      	lsrs	r2, r2, #16
 8006622:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006626:	fb05 a202 	mla	r2, r5, r2, sl
 800662a:	b29b      	uxth	r3, r3
 800662c:	ebab 0303 	sub.w	r3, fp, r3
 8006630:	f8de b000 	ldr.w	fp, [lr]
 8006634:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8006638:	fa1f fb8b 	uxth.w	fp, fp
 800663c:	445b      	add	r3, fp
 800663e:	fa1f fb82 	uxth.w	fp, r2
 8006642:	f8de 2000 	ldr.w	r2, [lr]
 8006646:	4581      	cmp	r9, r0
 8006648:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 800664c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006650:	b29b      	uxth	r3, r3
 8006652:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006656:	ea4f 4b22 	mov.w	fp, r2, asr #16
 800665a:	f84e 3b04 	str.w	r3, [lr], #4
 800665e:	d2da      	bcs.n	8006616 <quorem+0x42>
 8006660:	f856 300c 	ldr.w	r3, [r6, ip]
 8006664:	b933      	cbnz	r3, 8006674 <quorem+0xa0>
 8006666:	9b01      	ldr	r3, [sp, #4]
 8006668:	3b04      	subs	r3, #4
 800666a:	429e      	cmp	r6, r3
 800666c:	461a      	mov	r2, r3
 800666e:	d331      	bcc.n	80066d4 <quorem+0x100>
 8006670:	f8c8 4010 	str.w	r4, [r8, #16]
 8006674:	4640      	mov	r0, r8
 8006676:	f001 fba5 	bl	8007dc4 <__mcmp>
 800667a:	2800      	cmp	r0, #0
 800667c:	db26      	blt.n	80066cc <quorem+0xf8>
 800667e:	4630      	mov	r0, r6
 8006680:	f04f 0c00 	mov.w	ip, #0
 8006684:	3501      	adds	r5, #1
 8006686:	f857 1b04 	ldr.w	r1, [r7], #4
 800668a:	f8d0 e000 	ldr.w	lr, [r0]
 800668e:	b28b      	uxth	r3, r1
 8006690:	ebac 0303 	sub.w	r3, ip, r3
 8006694:	fa1f f28e 	uxth.w	r2, lr
 8006698:	4413      	add	r3, r2
 800669a:	0c0a      	lsrs	r2, r1, #16
 800669c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80066a0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80066a4:	b29b      	uxth	r3, r3
 80066a6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80066aa:	45b9      	cmp	r9, r7
 80066ac:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80066b0:	f840 3b04 	str.w	r3, [r0], #4
 80066b4:	d2e7      	bcs.n	8006686 <quorem+0xb2>
 80066b6:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 80066ba:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 80066be:	b92a      	cbnz	r2, 80066cc <quorem+0xf8>
 80066c0:	3b04      	subs	r3, #4
 80066c2:	429e      	cmp	r6, r3
 80066c4:	461a      	mov	r2, r3
 80066c6:	d30b      	bcc.n	80066e0 <quorem+0x10c>
 80066c8:	f8c8 4010 	str.w	r4, [r8, #16]
 80066cc:	4628      	mov	r0, r5
 80066ce:	b003      	add	sp, #12
 80066d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80066d4:	6812      	ldr	r2, [r2, #0]
 80066d6:	3b04      	subs	r3, #4
 80066d8:	2a00      	cmp	r2, #0
 80066da:	d1c9      	bne.n	8006670 <quorem+0x9c>
 80066dc:	3c01      	subs	r4, #1
 80066de:	e7c4      	b.n	800666a <quorem+0x96>
 80066e0:	6812      	ldr	r2, [r2, #0]
 80066e2:	3b04      	subs	r3, #4
 80066e4:	2a00      	cmp	r2, #0
 80066e6:	d1ef      	bne.n	80066c8 <quorem+0xf4>
 80066e8:	3c01      	subs	r4, #1
 80066ea:	e7ea      	b.n	80066c2 <quorem+0xee>
 80066ec:	2000      	movs	r0, #0
 80066ee:	e7ee      	b.n	80066ce <quorem+0xfa>

080066f0 <_dtoa_r>:
 80066f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80066f4:	4616      	mov	r6, r2
 80066f6:	461f      	mov	r7, r3
 80066f8:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80066fa:	b095      	sub	sp, #84	; 0x54
 80066fc:	4604      	mov	r4, r0
 80066fe:	f8dd 8084 	ldr.w	r8, [sp, #132]	; 0x84
 8006702:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8006706:	b93d      	cbnz	r5, 8006718 <_dtoa_r+0x28>
 8006708:	2010      	movs	r0, #16
 800670a:	f001 f8e1 	bl	80078d0 <malloc>
 800670e:	6260      	str	r0, [r4, #36]	; 0x24
 8006710:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8006714:	6005      	str	r5, [r0, #0]
 8006716:	60c5      	str	r5, [r0, #12]
 8006718:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800671a:	6819      	ldr	r1, [r3, #0]
 800671c:	b151      	cbz	r1, 8006734 <_dtoa_r+0x44>
 800671e:	685a      	ldr	r2, [r3, #4]
 8006720:	2301      	movs	r3, #1
 8006722:	4093      	lsls	r3, r2
 8006724:	604a      	str	r2, [r1, #4]
 8006726:	608b      	str	r3, [r1, #8]
 8006728:	4620      	mov	r0, r4
 800672a:	f001 f92d 	bl	8007988 <_Bfree>
 800672e:	2200      	movs	r2, #0
 8006730:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006732:	601a      	str	r2, [r3, #0]
 8006734:	1e3b      	subs	r3, r7, #0
 8006736:	bfaf      	iteee	ge
 8006738:	2300      	movge	r3, #0
 800673a:	2201      	movlt	r2, #1
 800673c:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8006740:	9303      	strlt	r3, [sp, #12]
 8006742:	bfac      	ite	ge
 8006744:	f8c8 3000 	strge.w	r3, [r8]
 8006748:	f8c8 2000 	strlt.w	r2, [r8]
 800674c:	4bae      	ldr	r3, [pc, #696]	; (8006a08 <_dtoa_r+0x318>)
 800674e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8006752:	ea33 0308 	bics.w	r3, r3, r8
 8006756:	d11b      	bne.n	8006790 <_dtoa_r+0xa0>
 8006758:	f242 730f 	movw	r3, #9999	; 0x270f
 800675c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800675e:	6013      	str	r3, [r2, #0]
 8006760:	9b02      	ldr	r3, [sp, #8]
 8006762:	b923      	cbnz	r3, 800676e <_dtoa_r+0x7e>
 8006764:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8006768:	2800      	cmp	r0, #0
 800676a:	f000 8545 	beq.w	80071f8 <_dtoa_r+0xb08>
 800676e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006770:	b953      	cbnz	r3, 8006788 <_dtoa_r+0x98>
 8006772:	4ba6      	ldr	r3, [pc, #664]	; (8006a0c <_dtoa_r+0x31c>)
 8006774:	e021      	b.n	80067ba <_dtoa_r+0xca>
 8006776:	4ba6      	ldr	r3, [pc, #664]	; (8006a10 <_dtoa_r+0x320>)
 8006778:	9306      	str	r3, [sp, #24]
 800677a:	3308      	adds	r3, #8
 800677c:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800677e:	6013      	str	r3, [r2, #0]
 8006780:	9806      	ldr	r0, [sp, #24]
 8006782:	b015      	add	sp, #84	; 0x54
 8006784:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006788:	4ba0      	ldr	r3, [pc, #640]	; (8006a0c <_dtoa_r+0x31c>)
 800678a:	9306      	str	r3, [sp, #24]
 800678c:	3303      	adds	r3, #3
 800678e:	e7f5      	b.n	800677c <_dtoa_r+0x8c>
 8006790:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8006794:	2200      	movs	r2, #0
 8006796:	2300      	movs	r3, #0
 8006798:	4630      	mov	r0, r6
 800679a:	4639      	mov	r1, r7
 800679c:	f7fa f904 	bl	80009a8 <__aeabi_dcmpeq>
 80067a0:	4682      	mov	sl, r0
 80067a2:	b160      	cbz	r0, 80067be <_dtoa_r+0xce>
 80067a4:	2301      	movs	r3, #1
 80067a6:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80067a8:	6013      	str	r3, [r2, #0]
 80067aa:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	f000 8520 	beq.w	80071f2 <_dtoa_r+0xb02>
 80067b2:	4b98      	ldr	r3, [pc, #608]	; (8006a14 <_dtoa_r+0x324>)
 80067b4:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80067b6:	6013      	str	r3, [r2, #0]
 80067b8:	3b01      	subs	r3, #1
 80067ba:	9306      	str	r3, [sp, #24]
 80067bc:	e7e0      	b.n	8006780 <_dtoa_r+0x90>
 80067be:	ab12      	add	r3, sp, #72	; 0x48
 80067c0:	9301      	str	r3, [sp, #4]
 80067c2:	ab13      	add	r3, sp, #76	; 0x4c
 80067c4:	9300      	str	r3, [sp, #0]
 80067c6:	4632      	mov	r2, r6
 80067c8:	463b      	mov	r3, r7
 80067ca:	4620      	mov	r0, r4
 80067cc:	f001 fbe8 	bl	8007fa0 <__d2b>
 80067d0:	f3c8 550a 	ubfx	r5, r8, #20, #11
 80067d4:	4683      	mov	fp, r0
 80067d6:	2d00      	cmp	r5, #0
 80067d8:	d07d      	beq.n	80068d6 <_dtoa_r+0x1e6>
 80067da:	46b0      	mov	r8, r6
 80067dc:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80067e0:	f043 597f 	orr.w	r9, r3, #1069547520	; 0x3fc00000
 80067e4:	f449 1940 	orr.w	r9, r9, #3145728	; 0x300000
 80067e8:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80067ec:	f8cd a040 	str.w	sl, [sp, #64]	; 0x40
 80067f0:	2200      	movs	r2, #0
 80067f2:	4b89      	ldr	r3, [pc, #548]	; (8006a18 <_dtoa_r+0x328>)
 80067f4:	4640      	mov	r0, r8
 80067f6:	4649      	mov	r1, r9
 80067f8:	f7f9 fcb6 	bl	8000168 <__aeabi_dsub>
 80067fc:	a37c      	add	r3, pc, #496	; (adr r3, 80069f0 <_dtoa_r+0x300>)
 80067fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006802:	f7f9 fe69 	bl	80004d8 <__aeabi_dmul>
 8006806:	a37c      	add	r3, pc, #496	; (adr r3, 80069f8 <_dtoa_r+0x308>)
 8006808:	e9d3 2300 	ldrd	r2, r3, [r3]
 800680c:	f7f9 fcae 	bl	800016c <__adddf3>
 8006810:	4606      	mov	r6, r0
 8006812:	4628      	mov	r0, r5
 8006814:	460f      	mov	r7, r1
 8006816:	f7f9 fdf5 	bl	8000404 <__aeabi_i2d>
 800681a:	a379      	add	r3, pc, #484	; (adr r3, 8006a00 <_dtoa_r+0x310>)
 800681c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006820:	f7f9 fe5a 	bl	80004d8 <__aeabi_dmul>
 8006824:	4602      	mov	r2, r0
 8006826:	460b      	mov	r3, r1
 8006828:	4630      	mov	r0, r6
 800682a:	4639      	mov	r1, r7
 800682c:	f7f9 fc9e 	bl	800016c <__adddf3>
 8006830:	4606      	mov	r6, r0
 8006832:	460f      	mov	r7, r1
 8006834:	f7fa f900 	bl	8000a38 <__aeabi_d2iz>
 8006838:	2200      	movs	r2, #0
 800683a:	4682      	mov	sl, r0
 800683c:	2300      	movs	r3, #0
 800683e:	4630      	mov	r0, r6
 8006840:	4639      	mov	r1, r7
 8006842:	f7fa f8bb 	bl	80009bc <__aeabi_dcmplt>
 8006846:	b148      	cbz	r0, 800685c <_dtoa_r+0x16c>
 8006848:	4650      	mov	r0, sl
 800684a:	f7f9 fddb 	bl	8000404 <__aeabi_i2d>
 800684e:	4632      	mov	r2, r6
 8006850:	463b      	mov	r3, r7
 8006852:	f7fa f8a9 	bl	80009a8 <__aeabi_dcmpeq>
 8006856:	b908      	cbnz	r0, 800685c <_dtoa_r+0x16c>
 8006858:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800685c:	f1ba 0f16 	cmp.w	sl, #22
 8006860:	d85a      	bhi.n	8006918 <_dtoa_r+0x228>
 8006862:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006866:	496d      	ldr	r1, [pc, #436]	; (8006a1c <_dtoa_r+0x32c>)
 8006868:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800686c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006870:	f7fa f8c2 	bl	80009f8 <__aeabi_dcmpgt>
 8006874:	2800      	cmp	r0, #0
 8006876:	d051      	beq.n	800691c <_dtoa_r+0x22c>
 8006878:	2300      	movs	r3, #0
 800687a:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800687e:	930d      	str	r3, [sp, #52]	; 0x34
 8006880:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006882:	1b5d      	subs	r5, r3, r5
 8006884:	1e6b      	subs	r3, r5, #1
 8006886:	9307      	str	r3, [sp, #28]
 8006888:	bf43      	ittte	mi
 800688a:	2300      	movmi	r3, #0
 800688c:	f1c5 0901 	rsbmi	r9, r5, #1
 8006890:	9307      	strmi	r3, [sp, #28]
 8006892:	f04f 0900 	movpl.w	r9, #0
 8006896:	f1ba 0f00 	cmp.w	sl, #0
 800689a:	db41      	blt.n	8006920 <_dtoa_r+0x230>
 800689c:	9b07      	ldr	r3, [sp, #28]
 800689e:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
 80068a2:	4453      	add	r3, sl
 80068a4:	9307      	str	r3, [sp, #28]
 80068a6:	2300      	movs	r3, #0
 80068a8:	9308      	str	r3, [sp, #32]
 80068aa:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80068ac:	2b09      	cmp	r3, #9
 80068ae:	f200 808f 	bhi.w	80069d0 <_dtoa_r+0x2e0>
 80068b2:	2b05      	cmp	r3, #5
 80068b4:	bfc4      	itt	gt
 80068b6:	3b04      	subgt	r3, #4
 80068b8:	931e      	strgt	r3, [sp, #120]	; 0x78
 80068ba:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80068bc:	bfc8      	it	gt
 80068be:	2500      	movgt	r5, #0
 80068c0:	f1a3 0302 	sub.w	r3, r3, #2
 80068c4:	bfd8      	it	le
 80068c6:	2501      	movle	r5, #1
 80068c8:	2b03      	cmp	r3, #3
 80068ca:	f200 808d 	bhi.w	80069e8 <_dtoa_r+0x2f8>
 80068ce:	e8df f003 	tbb	[pc, r3]
 80068d2:	7d7b      	.short	0x7d7b
 80068d4:	6f2f      	.short	0x6f2f
 80068d6:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 80068da:	441d      	add	r5, r3
 80068dc:	f205 4032 	addw	r0, r5, #1074	; 0x432
 80068e0:	2820      	cmp	r0, #32
 80068e2:	dd13      	ble.n	800690c <_dtoa_r+0x21c>
 80068e4:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 80068e8:	9b02      	ldr	r3, [sp, #8]
 80068ea:	fa08 f800 	lsl.w	r8, r8, r0
 80068ee:	f205 4012 	addw	r0, r5, #1042	; 0x412
 80068f2:	fa23 f000 	lsr.w	r0, r3, r0
 80068f6:	ea48 0000 	orr.w	r0, r8, r0
 80068fa:	f7f9 fd73 	bl	80003e4 <__aeabi_ui2d>
 80068fe:	2301      	movs	r3, #1
 8006900:	4680      	mov	r8, r0
 8006902:	f1a1 79f8 	sub.w	r9, r1, #32505856	; 0x1f00000
 8006906:	3d01      	subs	r5, #1
 8006908:	9310      	str	r3, [sp, #64]	; 0x40
 800690a:	e771      	b.n	80067f0 <_dtoa_r+0x100>
 800690c:	9b02      	ldr	r3, [sp, #8]
 800690e:	f1c0 0020 	rsb	r0, r0, #32
 8006912:	fa03 f000 	lsl.w	r0, r3, r0
 8006916:	e7f0      	b.n	80068fa <_dtoa_r+0x20a>
 8006918:	2301      	movs	r3, #1
 800691a:	e7b0      	b.n	800687e <_dtoa_r+0x18e>
 800691c:	900d      	str	r0, [sp, #52]	; 0x34
 800691e:	e7af      	b.n	8006880 <_dtoa_r+0x190>
 8006920:	f1ca 0300 	rsb	r3, sl, #0
 8006924:	9308      	str	r3, [sp, #32]
 8006926:	2300      	movs	r3, #0
 8006928:	eba9 090a 	sub.w	r9, r9, sl
 800692c:	930c      	str	r3, [sp, #48]	; 0x30
 800692e:	e7bc      	b.n	80068aa <_dtoa_r+0x1ba>
 8006930:	2301      	movs	r3, #1
 8006932:	9309      	str	r3, [sp, #36]	; 0x24
 8006934:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8006936:	2b00      	cmp	r3, #0
 8006938:	dd74      	ble.n	8006a24 <_dtoa_r+0x334>
 800693a:	4698      	mov	r8, r3
 800693c:	9304      	str	r3, [sp, #16]
 800693e:	2200      	movs	r2, #0
 8006940:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8006942:	6072      	str	r2, [r6, #4]
 8006944:	2204      	movs	r2, #4
 8006946:	f102 0014 	add.w	r0, r2, #20
 800694a:	4298      	cmp	r0, r3
 800694c:	6871      	ldr	r1, [r6, #4]
 800694e:	d96e      	bls.n	8006a2e <_dtoa_r+0x33e>
 8006950:	4620      	mov	r0, r4
 8006952:	f000 ffe5 	bl	8007920 <_Balloc>
 8006956:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006958:	6030      	str	r0, [r6, #0]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	f1b8 0f0e 	cmp.w	r8, #14
 8006960:	9306      	str	r3, [sp, #24]
 8006962:	f200 80ed 	bhi.w	8006b40 <_dtoa_r+0x450>
 8006966:	2d00      	cmp	r5, #0
 8006968:	f000 80ea 	beq.w	8006b40 <_dtoa_r+0x450>
 800696c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006970:	f1ba 0f00 	cmp.w	sl, #0
 8006974:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8006978:	dd77      	ble.n	8006a6a <_dtoa_r+0x37a>
 800697a:	4a28      	ldr	r2, [pc, #160]	; (8006a1c <_dtoa_r+0x32c>)
 800697c:	f00a 030f 	and.w	r3, sl, #15
 8006980:	ea4f 162a 	mov.w	r6, sl, asr #4
 8006984:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8006988:	06f0      	lsls	r0, r6, #27
 800698a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800698e:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8006992:	d568      	bpl.n	8006a66 <_dtoa_r+0x376>
 8006994:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8006998:	4b21      	ldr	r3, [pc, #132]	; (8006a20 <_dtoa_r+0x330>)
 800699a:	2503      	movs	r5, #3
 800699c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80069a0:	f7f9 fec4 	bl	800072c <__aeabi_ddiv>
 80069a4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80069a8:	f006 060f 	and.w	r6, r6, #15
 80069ac:	4f1c      	ldr	r7, [pc, #112]	; (8006a20 <_dtoa_r+0x330>)
 80069ae:	e04f      	b.n	8006a50 <_dtoa_r+0x360>
 80069b0:	2301      	movs	r3, #1
 80069b2:	9309      	str	r3, [sp, #36]	; 0x24
 80069b4:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80069b6:	4453      	add	r3, sl
 80069b8:	f103 0801 	add.w	r8, r3, #1
 80069bc:	9304      	str	r3, [sp, #16]
 80069be:	4643      	mov	r3, r8
 80069c0:	2b01      	cmp	r3, #1
 80069c2:	bfb8      	it	lt
 80069c4:	2301      	movlt	r3, #1
 80069c6:	e7ba      	b.n	800693e <_dtoa_r+0x24e>
 80069c8:	2300      	movs	r3, #0
 80069ca:	e7b2      	b.n	8006932 <_dtoa_r+0x242>
 80069cc:	2300      	movs	r3, #0
 80069ce:	e7f0      	b.n	80069b2 <_dtoa_r+0x2c2>
 80069d0:	2501      	movs	r5, #1
 80069d2:	2300      	movs	r3, #0
 80069d4:	9509      	str	r5, [sp, #36]	; 0x24
 80069d6:	931e      	str	r3, [sp, #120]	; 0x78
 80069d8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80069dc:	2200      	movs	r2, #0
 80069de:	9304      	str	r3, [sp, #16]
 80069e0:	4698      	mov	r8, r3
 80069e2:	2312      	movs	r3, #18
 80069e4:	921f      	str	r2, [sp, #124]	; 0x7c
 80069e6:	e7aa      	b.n	800693e <_dtoa_r+0x24e>
 80069e8:	2301      	movs	r3, #1
 80069ea:	9309      	str	r3, [sp, #36]	; 0x24
 80069ec:	e7f4      	b.n	80069d8 <_dtoa_r+0x2e8>
 80069ee:	bf00      	nop
 80069f0:	636f4361 	.word	0x636f4361
 80069f4:	3fd287a7 	.word	0x3fd287a7
 80069f8:	8b60c8b3 	.word	0x8b60c8b3
 80069fc:	3fc68a28 	.word	0x3fc68a28
 8006a00:	509f79fb 	.word	0x509f79fb
 8006a04:	3fd34413 	.word	0x3fd34413
 8006a08:	7ff00000 	.word	0x7ff00000
 8006a0c:	08008d81 	.word	0x08008d81
 8006a10:	08008d78 	.word	0x08008d78
 8006a14:	08008cf9 	.word	0x08008cf9
 8006a18:	3ff80000 	.word	0x3ff80000
 8006a1c:	08008db8 	.word	0x08008db8
 8006a20:	08008d90 	.word	0x08008d90
 8006a24:	2301      	movs	r3, #1
 8006a26:	9304      	str	r3, [sp, #16]
 8006a28:	4698      	mov	r8, r3
 8006a2a:	461a      	mov	r2, r3
 8006a2c:	e7da      	b.n	80069e4 <_dtoa_r+0x2f4>
 8006a2e:	3101      	adds	r1, #1
 8006a30:	6071      	str	r1, [r6, #4]
 8006a32:	0052      	lsls	r2, r2, #1
 8006a34:	e787      	b.n	8006946 <_dtoa_r+0x256>
 8006a36:	07f1      	lsls	r1, r6, #31
 8006a38:	d508      	bpl.n	8006a4c <_dtoa_r+0x35c>
 8006a3a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8006a3e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006a42:	f7f9 fd49 	bl	80004d8 <__aeabi_dmul>
 8006a46:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8006a4a:	3501      	adds	r5, #1
 8006a4c:	1076      	asrs	r6, r6, #1
 8006a4e:	3708      	adds	r7, #8
 8006a50:	2e00      	cmp	r6, #0
 8006a52:	d1f0      	bne.n	8006a36 <_dtoa_r+0x346>
 8006a54:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8006a58:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006a5c:	f7f9 fe66 	bl	800072c <__aeabi_ddiv>
 8006a60:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006a64:	e01b      	b.n	8006a9e <_dtoa_r+0x3ae>
 8006a66:	2502      	movs	r5, #2
 8006a68:	e7a0      	b.n	80069ac <_dtoa_r+0x2bc>
 8006a6a:	f000 80a4 	beq.w	8006bb6 <_dtoa_r+0x4c6>
 8006a6e:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8006a72:	f1ca 0600 	rsb	r6, sl, #0
 8006a76:	4ba0      	ldr	r3, [pc, #640]	; (8006cf8 <_dtoa_r+0x608>)
 8006a78:	f006 020f 	and.w	r2, r6, #15
 8006a7c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006a80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a84:	f7f9 fd28 	bl	80004d8 <__aeabi_dmul>
 8006a88:	2502      	movs	r5, #2
 8006a8a:	2300      	movs	r3, #0
 8006a8c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006a90:	4f9a      	ldr	r7, [pc, #616]	; (8006cfc <_dtoa_r+0x60c>)
 8006a92:	1136      	asrs	r6, r6, #4
 8006a94:	2e00      	cmp	r6, #0
 8006a96:	f040 8083 	bne.w	8006ba0 <_dtoa_r+0x4b0>
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	d1e0      	bne.n	8006a60 <_dtoa_r+0x370>
 8006a9e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006aa0:	2b00      	cmp	r3, #0
 8006aa2:	f000 808a 	beq.w	8006bba <_dtoa_r+0x4ca>
 8006aa6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006aaa:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8006aae:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8006ab2:	2200      	movs	r2, #0
 8006ab4:	4b92      	ldr	r3, [pc, #584]	; (8006d00 <_dtoa_r+0x610>)
 8006ab6:	f7f9 ff81 	bl	80009bc <__aeabi_dcmplt>
 8006aba:	2800      	cmp	r0, #0
 8006abc:	d07d      	beq.n	8006bba <_dtoa_r+0x4ca>
 8006abe:	f1b8 0f00 	cmp.w	r8, #0
 8006ac2:	d07a      	beq.n	8006bba <_dtoa_r+0x4ca>
 8006ac4:	9b04      	ldr	r3, [sp, #16]
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	dd36      	ble.n	8006b38 <_dtoa_r+0x448>
 8006aca:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8006ace:	2200      	movs	r2, #0
 8006ad0:	4b8c      	ldr	r3, [pc, #560]	; (8006d04 <_dtoa_r+0x614>)
 8006ad2:	f7f9 fd01 	bl	80004d8 <__aeabi_dmul>
 8006ad6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006ada:	9e04      	ldr	r6, [sp, #16]
 8006adc:	f10a 37ff 	add.w	r7, sl, #4294967295	; 0xffffffff
 8006ae0:	3501      	adds	r5, #1
 8006ae2:	4628      	mov	r0, r5
 8006ae4:	f7f9 fc8e 	bl	8000404 <__aeabi_i2d>
 8006ae8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006aec:	f7f9 fcf4 	bl	80004d8 <__aeabi_dmul>
 8006af0:	2200      	movs	r2, #0
 8006af2:	4b85      	ldr	r3, [pc, #532]	; (8006d08 <_dtoa_r+0x618>)
 8006af4:	f7f9 fb3a 	bl	800016c <__adddf3>
 8006af8:	f1a1 7550 	sub.w	r5, r1, #54525952	; 0x3400000
 8006afc:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8006b00:	950b      	str	r5, [sp, #44]	; 0x2c
 8006b02:	2e00      	cmp	r6, #0
 8006b04:	d15c      	bne.n	8006bc0 <_dtoa_r+0x4d0>
 8006b06:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006b0a:	2200      	movs	r2, #0
 8006b0c:	4b7f      	ldr	r3, [pc, #508]	; (8006d0c <_dtoa_r+0x61c>)
 8006b0e:	f7f9 fb2b 	bl	8000168 <__aeabi_dsub>
 8006b12:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006b14:	462b      	mov	r3, r5
 8006b16:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006b1a:	f7f9 ff6d 	bl	80009f8 <__aeabi_dcmpgt>
 8006b1e:	2800      	cmp	r0, #0
 8006b20:	f040 8281 	bne.w	8007026 <_dtoa_r+0x936>
 8006b24:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006b28:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006b2a:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 8006b2e:	f7f9 ff45 	bl	80009bc <__aeabi_dcmplt>
 8006b32:	2800      	cmp	r0, #0
 8006b34:	f040 8275 	bne.w	8007022 <_dtoa_r+0x932>
 8006b38:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8006b3c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006b40:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	f2c0 814b 	blt.w	8006dde <_dtoa_r+0x6ee>
 8006b48:	f1ba 0f0e 	cmp.w	sl, #14
 8006b4c:	f300 8147 	bgt.w	8006dde <_dtoa_r+0x6ee>
 8006b50:	4b69      	ldr	r3, [pc, #420]	; (8006cf8 <_dtoa_r+0x608>)
 8006b52:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8006b56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b5a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8006b5e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8006b60:	2b00      	cmp	r3, #0
 8006b62:	f280 80d7 	bge.w	8006d14 <_dtoa_r+0x624>
 8006b66:	f1b8 0f00 	cmp.w	r8, #0
 8006b6a:	f300 80d3 	bgt.w	8006d14 <_dtoa_r+0x624>
 8006b6e:	f040 8257 	bne.w	8007020 <_dtoa_r+0x930>
 8006b72:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006b76:	2200      	movs	r2, #0
 8006b78:	4b64      	ldr	r3, [pc, #400]	; (8006d0c <_dtoa_r+0x61c>)
 8006b7a:	f7f9 fcad 	bl	80004d8 <__aeabi_dmul>
 8006b7e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006b82:	f7f9 ff2f 	bl	80009e4 <__aeabi_dcmpge>
 8006b86:	4646      	mov	r6, r8
 8006b88:	4647      	mov	r7, r8
 8006b8a:	2800      	cmp	r0, #0
 8006b8c:	f040 822d 	bne.w	8006fea <_dtoa_r+0x8fa>
 8006b90:	9b06      	ldr	r3, [sp, #24]
 8006b92:	9a06      	ldr	r2, [sp, #24]
 8006b94:	1c5d      	adds	r5, r3, #1
 8006b96:	2331      	movs	r3, #49	; 0x31
 8006b98:	f10a 0a01 	add.w	sl, sl, #1
 8006b9c:	7013      	strb	r3, [r2, #0]
 8006b9e:	e228      	b.n	8006ff2 <_dtoa_r+0x902>
 8006ba0:	07f2      	lsls	r2, r6, #31
 8006ba2:	d505      	bpl.n	8006bb0 <_dtoa_r+0x4c0>
 8006ba4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006ba8:	f7f9 fc96 	bl	80004d8 <__aeabi_dmul>
 8006bac:	2301      	movs	r3, #1
 8006bae:	3501      	adds	r5, #1
 8006bb0:	1076      	asrs	r6, r6, #1
 8006bb2:	3708      	adds	r7, #8
 8006bb4:	e76e      	b.n	8006a94 <_dtoa_r+0x3a4>
 8006bb6:	2502      	movs	r5, #2
 8006bb8:	e771      	b.n	8006a9e <_dtoa_r+0x3ae>
 8006bba:	4657      	mov	r7, sl
 8006bbc:	4646      	mov	r6, r8
 8006bbe:	e790      	b.n	8006ae2 <_dtoa_r+0x3f2>
 8006bc0:	4b4d      	ldr	r3, [pc, #308]	; (8006cf8 <_dtoa_r+0x608>)
 8006bc2:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8006bc6:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8006bca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	d048      	beq.n	8006c62 <_dtoa_r+0x572>
 8006bd0:	4602      	mov	r2, r0
 8006bd2:	460b      	mov	r3, r1
 8006bd4:	2000      	movs	r0, #0
 8006bd6:	494e      	ldr	r1, [pc, #312]	; (8006d10 <_dtoa_r+0x620>)
 8006bd8:	f7f9 fda8 	bl	800072c <__aeabi_ddiv>
 8006bdc:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8006be0:	f7f9 fac2 	bl	8000168 <__aeabi_dsub>
 8006be4:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8006be8:	9d06      	ldr	r5, [sp, #24]
 8006bea:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006bee:	f7f9 ff23 	bl	8000a38 <__aeabi_d2iz>
 8006bf2:	9011      	str	r0, [sp, #68]	; 0x44
 8006bf4:	f7f9 fc06 	bl	8000404 <__aeabi_i2d>
 8006bf8:	4602      	mov	r2, r0
 8006bfa:	460b      	mov	r3, r1
 8006bfc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006c00:	f7f9 fab2 	bl	8000168 <__aeabi_dsub>
 8006c04:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006c06:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006c0a:	3330      	adds	r3, #48	; 0x30
 8006c0c:	f805 3b01 	strb.w	r3, [r5], #1
 8006c10:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8006c14:	f7f9 fed2 	bl	80009bc <__aeabi_dcmplt>
 8006c18:	2800      	cmp	r0, #0
 8006c1a:	d163      	bne.n	8006ce4 <_dtoa_r+0x5f4>
 8006c1c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006c20:	2000      	movs	r0, #0
 8006c22:	4937      	ldr	r1, [pc, #220]	; (8006d00 <_dtoa_r+0x610>)
 8006c24:	f7f9 faa0 	bl	8000168 <__aeabi_dsub>
 8006c28:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8006c2c:	f7f9 fec6 	bl	80009bc <__aeabi_dcmplt>
 8006c30:	2800      	cmp	r0, #0
 8006c32:	f040 80b5 	bne.w	8006da0 <_dtoa_r+0x6b0>
 8006c36:	9b06      	ldr	r3, [sp, #24]
 8006c38:	1aeb      	subs	r3, r5, r3
 8006c3a:	429e      	cmp	r6, r3
 8006c3c:	f77f af7c 	ble.w	8006b38 <_dtoa_r+0x448>
 8006c40:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8006c44:	2200      	movs	r2, #0
 8006c46:	4b2f      	ldr	r3, [pc, #188]	; (8006d04 <_dtoa_r+0x614>)
 8006c48:	f7f9 fc46 	bl	80004d8 <__aeabi_dmul>
 8006c4c:	2200      	movs	r2, #0
 8006c4e:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8006c52:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006c56:	4b2b      	ldr	r3, [pc, #172]	; (8006d04 <_dtoa_r+0x614>)
 8006c58:	f7f9 fc3e 	bl	80004d8 <__aeabi_dmul>
 8006c5c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006c60:	e7c3      	b.n	8006bea <_dtoa_r+0x4fa>
 8006c62:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8006c66:	f7f9 fc37 	bl	80004d8 <__aeabi_dmul>
 8006c6a:	9b06      	ldr	r3, [sp, #24]
 8006c6c:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8006c70:	199d      	adds	r5, r3, r6
 8006c72:	461e      	mov	r6, r3
 8006c74:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006c78:	f7f9 fede 	bl	8000a38 <__aeabi_d2iz>
 8006c7c:	9011      	str	r0, [sp, #68]	; 0x44
 8006c7e:	f7f9 fbc1 	bl	8000404 <__aeabi_i2d>
 8006c82:	4602      	mov	r2, r0
 8006c84:	460b      	mov	r3, r1
 8006c86:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006c8a:	f7f9 fa6d 	bl	8000168 <__aeabi_dsub>
 8006c8e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006c90:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006c94:	3330      	adds	r3, #48	; 0x30
 8006c96:	f806 3b01 	strb.w	r3, [r6], #1
 8006c9a:	42ae      	cmp	r6, r5
 8006c9c:	f04f 0200 	mov.w	r2, #0
 8006ca0:	d124      	bne.n	8006cec <_dtoa_r+0x5fc>
 8006ca2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8006ca6:	4b1a      	ldr	r3, [pc, #104]	; (8006d10 <_dtoa_r+0x620>)
 8006ca8:	f7f9 fa60 	bl	800016c <__adddf3>
 8006cac:	4602      	mov	r2, r0
 8006cae:	460b      	mov	r3, r1
 8006cb0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006cb4:	f7f9 fea0 	bl	80009f8 <__aeabi_dcmpgt>
 8006cb8:	2800      	cmp	r0, #0
 8006cba:	d171      	bne.n	8006da0 <_dtoa_r+0x6b0>
 8006cbc:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8006cc0:	2000      	movs	r0, #0
 8006cc2:	4913      	ldr	r1, [pc, #76]	; (8006d10 <_dtoa_r+0x620>)
 8006cc4:	f7f9 fa50 	bl	8000168 <__aeabi_dsub>
 8006cc8:	4602      	mov	r2, r0
 8006cca:	460b      	mov	r3, r1
 8006ccc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006cd0:	f7f9 fe74 	bl	80009bc <__aeabi_dcmplt>
 8006cd4:	2800      	cmp	r0, #0
 8006cd6:	f43f af2f 	beq.w	8006b38 <_dtoa_r+0x448>
 8006cda:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8006cde:	1e6a      	subs	r2, r5, #1
 8006ce0:	2b30      	cmp	r3, #48	; 0x30
 8006ce2:	d001      	beq.n	8006ce8 <_dtoa_r+0x5f8>
 8006ce4:	46ba      	mov	sl, r7
 8006ce6:	e04a      	b.n	8006d7e <_dtoa_r+0x68e>
 8006ce8:	4615      	mov	r5, r2
 8006cea:	e7f6      	b.n	8006cda <_dtoa_r+0x5ea>
 8006cec:	4b05      	ldr	r3, [pc, #20]	; (8006d04 <_dtoa_r+0x614>)
 8006cee:	f7f9 fbf3 	bl	80004d8 <__aeabi_dmul>
 8006cf2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006cf6:	e7bd      	b.n	8006c74 <_dtoa_r+0x584>
 8006cf8:	08008db8 	.word	0x08008db8
 8006cfc:	08008d90 	.word	0x08008d90
 8006d00:	3ff00000 	.word	0x3ff00000
 8006d04:	40240000 	.word	0x40240000
 8006d08:	401c0000 	.word	0x401c0000
 8006d0c:	40140000 	.word	0x40140000
 8006d10:	3fe00000 	.word	0x3fe00000
 8006d14:	9d06      	ldr	r5, [sp, #24]
 8006d16:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8006d1a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006d1e:	4630      	mov	r0, r6
 8006d20:	4639      	mov	r1, r7
 8006d22:	f7f9 fd03 	bl	800072c <__aeabi_ddiv>
 8006d26:	f7f9 fe87 	bl	8000a38 <__aeabi_d2iz>
 8006d2a:	4681      	mov	r9, r0
 8006d2c:	f7f9 fb6a 	bl	8000404 <__aeabi_i2d>
 8006d30:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006d34:	f7f9 fbd0 	bl	80004d8 <__aeabi_dmul>
 8006d38:	4602      	mov	r2, r0
 8006d3a:	460b      	mov	r3, r1
 8006d3c:	4630      	mov	r0, r6
 8006d3e:	4639      	mov	r1, r7
 8006d40:	f7f9 fa12 	bl	8000168 <__aeabi_dsub>
 8006d44:	f109 0630 	add.w	r6, r9, #48	; 0x30
 8006d48:	f805 6b01 	strb.w	r6, [r5], #1
 8006d4c:	9e06      	ldr	r6, [sp, #24]
 8006d4e:	4602      	mov	r2, r0
 8006d50:	1bae      	subs	r6, r5, r6
 8006d52:	45b0      	cmp	r8, r6
 8006d54:	460b      	mov	r3, r1
 8006d56:	d135      	bne.n	8006dc4 <_dtoa_r+0x6d4>
 8006d58:	f7f9 fa08 	bl	800016c <__adddf3>
 8006d5c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006d60:	4606      	mov	r6, r0
 8006d62:	460f      	mov	r7, r1
 8006d64:	f7f9 fe48 	bl	80009f8 <__aeabi_dcmpgt>
 8006d68:	b9c8      	cbnz	r0, 8006d9e <_dtoa_r+0x6ae>
 8006d6a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006d6e:	4630      	mov	r0, r6
 8006d70:	4639      	mov	r1, r7
 8006d72:	f7f9 fe19 	bl	80009a8 <__aeabi_dcmpeq>
 8006d76:	b110      	cbz	r0, 8006d7e <_dtoa_r+0x68e>
 8006d78:	f019 0f01 	tst.w	r9, #1
 8006d7c:	d10f      	bne.n	8006d9e <_dtoa_r+0x6ae>
 8006d7e:	4659      	mov	r1, fp
 8006d80:	4620      	mov	r0, r4
 8006d82:	f000 fe01 	bl	8007988 <_Bfree>
 8006d86:	2300      	movs	r3, #0
 8006d88:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8006d8a:	702b      	strb	r3, [r5, #0]
 8006d8c:	f10a 0301 	add.w	r3, sl, #1
 8006d90:	6013      	str	r3, [r2, #0]
 8006d92:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006d94:	2b00      	cmp	r3, #0
 8006d96:	f43f acf3 	beq.w	8006780 <_dtoa_r+0x90>
 8006d9a:	601d      	str	r5, [r3, #0]
 8006d9c:	e4f0      	b.n	8006780 <_dtoa_r+0x90>
 8006d9e:	4657      	mov	r7, sl
 8006da0:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8006da4:	1e6b      	subs	r3, r5, #1
 8006da6:	2a39      	cmp	r2, #57	; 0x39
 8006da8:	d106      	bne.n	8006db8 <_dtoa_r+0x6c8>
 8006daa:	9a06      	ldr	r2, [sp, #24]
 8006dac:	429a      	cmp	r2, r3
 8006dae:	d107      	bne.n	8006dc0 <_dtoa_r+0x6d0>
 8006db0:	2330      	movs	r3, #48	; 0x30
 8006db2:	7013      	strb	r3, [r2, #0]
 8006db4:	4613      	mov	r3, r2
 8006db6:	3701      	adds	r7, #1
 8006db8:	781a      	ldrb	r2, [r3, #0]
 8006dba:	3201      	adds	r2, #1
 8006dbc:	701a      	strb	r2, [r3, #0]
 8006dbe:	e791      	b.n	8006ce4 <_dtoa_r+0x5f4>
 8006dc0:	461d      	mov	r5, r3
 8006dc2:	e7ed      	b.n	8006da0 <_dtoa_r+0x6b0>
 8006dc4:	2200      	movs	r2, #0
 8006dc6:	4b99      	ldr	r3, [pc, #612]	; (800702c <_dtoa_r+0x93c>)
 8006dc8:	f7f9 fb86 	bl	80004d8 <__aeabi_dmul>
 8006dcc:	2200      	movs	r2, #0
 8006dce:	2300      	movs	r3, #0
 8006dd0:	4606      	mov	r6, r0
 8006dd2:	460f      	mov	r7, r1
 8006dd4:	f7f9 fde8 	bl	80009a8 <__aeabi_dcmpeq>
 8006dd8:	2800      	cmp	r0, #0
 8006dda:	d09e      	beq.n	8006d1a <_dtoa_r+0x62a>
 8006ddc:	e7cf      	b.n	8006d7e <_dtoa_r+0x68e>
 8006dde:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006de0:	2a00      	cmp	r2, #0
 8006de2:	f000 8088 	beq.w	8006ef6 <_dtoa_r+0x806>
 8006de6:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8006de8:	2a01      	cmp	r2, #1
 8006dea:	dc6d      	bgt.n	8006ec8 <_dtoa_r+0x7d8>
 8006dec:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8006dee:	2a00      	cmp	r2, #0
 8006df0:	d066      	beq.n	8006ec0 <_dtoa_r+0x7d0>
 8006df2:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8006df6:	464d      	mov	r5, r9
 8006df8:	9e08      	ldr	r6, [sp, #32]
 8006dfa:	9a07      	ldr	r2, [sp, #28]
 8006dfc:	2101      	movs	r1, #1
 8006dfe:	441a      	add	r2, r3
 8006e00:	4620      	mov	r0, r4
 8006e02:	4499      	add	r9, r3
 8006e04:	9207      	str	r2, [sp, #28]
 8006e06:	f000 fe9d 	bl	8007b44 <__i2b>
 8006e0a:	4607      	mov	r7, r0
 8006e0c:	2d00      	cmp	r5, #0
 8006e0e:	dd0b      	ble.n	8006e28 <_dtoa_r+0x738>
 8006e10:	9b07      	ldr	r3, [sp, #28]
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	dd08      	ble.n	8006e28 <_dtoa_r+0x738>
 8006e16:	42ab      	cmp	r3, r5
 8006e18:	bfa8      	it	ge
 8006e1a:	462b      	movge	r3, r5
 8006e1c:	9a07      	ldr	r2, [sp, #28]
 8006e1e:	eba9 0903 	sub.w	r9, r9, r3
 8006e22:	1aed      	subs	r5, r5, r3
 8006e24:	1ad3      	subs	r3, r2, r3
 8006e26:	9307      	str	r3, [sp, #28]
 8006e28:	9b08      	ldr	r3, [sp, #32]
 8006e2a:	b1eb      	cbz	r3, 8006e68 <_dtoa_r+0x778>
 8006e2c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	d065      	beq.n	8006efe <_dtoa_r+0x80e>
 8006e32:	b18e      	cbz	r6, 8006e58 <_dtoa_r+0x768>
 8006e34:	4639      	mov	r1, r7
 8006e36:	4632      	mov	r2, r6
 8006e38:	4620      	mov	r0, r4
 8006e3a:	f000 ff21 	bl	8007c80 <__pow5mult>
 8006e3e:	465a      	mov	r2, fp
 8006e40:	4601      	mov	r1, r0
 8006e42:	4607      	mov	r7, r0
 8006e44:	4620      	mov	r0, r4
 8006e46:	f000 fe86 	bl	8007b56 <__multiply>
 8006e4a:	4659      	mov	r1, fp
 8006e4c:	900a      	str	r0, [sp, #40]	; 0x28
 8006e4e:	4620      	mov	r0, r4
 8006e50:	f000 fd9a 	bl	8007988 <_Bfree>
 8006e54:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006e56:	469b      	mov	fp, r3
 8006e58:	9b08      	ldr	r3, [sp, #32]
 8006e5a:	1b9a      	subs	r2, r3, r6
 8006e5c:	d004      	beq.n	8006e68 <_dtoa_r+0x778>
 8006e5e:	4659      	mov	r1, fp
 8006e60:	4620      	mov	r0, r4
 8006e62:	f000 ff0d 	bl	8007c80 <__pow5mult>
 8006e66:	4683      	mov	fp, r0
 8006e68:	2101      	movs	r1, #1
 8006e6a:	4620      	mov	r0, r4
 8006e6c:	f000 fe6a 	bl	8007b44 <__i2b>
 8006e70:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006e72:	4606      	mov	r6, r0
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	f000 81c6 	beq.w	8007206 <_dtoa_r+0xb16>
 8006e7a:	461a      	mov	r2, r3
 8006e7c:	4601      	mov	r1, r0
 8006e7e:	4620      	mov	r0, r4
 8006e80:	f000 fefe 	bl	8007c80 <__pow5mult>
 8006e84:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8006e86:	4606      	mov	r6, r0
 8006e88:	2b01      	cmp	r3, #1
 8006e8a:	dc3e      	bgt.n	8006f0a <_dtoa_r+0x81a>
 8006e8c:	9b02      	ldr	r3, [sp, #8]
 8006e8e:	2b00      	cmp	r3, #0
 8006e90:	d137      	bne.n	8006f02 <_dtoa_r+0x812>
 8006e92:	9b03      	ldr	r3, [sp, #12]
 8006e94:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	d134      	bne.n	8006f06 <_dtoa_r+0x816>
 8006e9c:	9b03      	ldr	r3, [sp, #12]
 8006e9e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006ea2:	0d1b      	lsrs	r3, r3, #20
 8006ea4:	051b      	lsls	r3, r3, #20
 8006ea6:	b12b      	cbz	r3, 8006eb4 <_dtoa_r+0x7c4>
 8006ea8:	9b07      	ldr	r3, [sp, #28]
 8006eaa:	f109 0901 	add.w	r9, r9, #1
 8006eae:	3301      	adds	r3, #1
 8006eb0:	9307      	str	r3, [sp, #28]
 8006eb2:	2301      	movs	r3, #1
 8006eb4:	9308      	str	r3, [sp, #32]
 8006eb6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	d128      	bne.n	8006f0e <_dtoa_r+0x81e>
 8006ebc:	2001      	movs	r0, #1
 8006ebe:	e02e      	b.n	8006f1e <_dtoa_r+0x82e>
 8006ec0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006ec2:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8006ec6:	e796      	b.n	8006df6 <_dtoa_r+0x706>
 8006ec8:	9b08      	ldr	r3, [sp, #32]
 8006eca:	f108 36ff 	add.w	r6, r8, #4294967295	; 0xffffffff
 8006ece:	42b3      	cmp	r3, r6
 8006ed0:	bfb7      	itett	lt
 8006ed2:	9b08      	ldrlt	r3, [sp, #32]
 8006ed4:	1b9e      	subge	r6, r3, r6
 8006ed6:	1af2      	sublt	r2, r6, r3
 8006ed8:	9b0c      	ldrlt	r3, [sp, #48]	; 0x30
 8006eda:	bfbf      	itttt	lt
 8006edc:	9608      	strlt	r6, [sp, #32]
 8006ede:	189b      	addlt	r3, r3, r2
 8006ee0:	930c      	strlt	r3, [sp, #48]	; 0x30
 8006ee2:	2600      	movlt	r6, #0
 8006ee4:	f1b8 0f00 	cmp.w	r8, #0
 8006ee8:	bfb9      	ittee	lt
 8006eea:	eba9 0508 	sublt.w	r5, r9, r8
 8006eee:	2300      	movlt	r3, #0
 8006ef0:	464d      	movge	r5, r9
 8006ef2:	4643      	movge	r3, r8
 8006ef4:	e781      	b.n	8006dfa <_dtoa_r+0x70a>
 8006ef6:	9e08      	ldr	r6, [sp, #32]
 8006ef8:	464d      	mov	r5, r9
 8006efa:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8006efc:	e786      	b.n	8006e0c <_dtoa_r+0x71c>
 8006efe:	9a08      	ldr	r2, [sp, #32]
 8006f00:	e7ad      	b.n	8006e5e <_dtoa_r+0x76e>
 8006f02:	2300      	movs	r3, #0
 8006f04:	e7d6      	b.n	8006eb4 <_dtoa_r+0x7c4>
 8006f06:	9b02      	ldr	r3, [sp, #8]
 8006f08:	e7d4      	b.n	8006eb4 <_dtoa_r+0x7c4>
 8006f0a:	2300      	movs	r3, #0
 8006f0c:	9308      	str	r3, [sp, #32]
 8006f0e:	6933      	ldr	r3, [r6, #16]
 8006f10:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8006f14:	6918      	ldr	r0, [r3, #16]
 8006f16:	f000 fdc7 	bl	8007aa8 <__hi0bits>
 8006f1a:	f1c0 0020 	rsb	r0, r0, #32
 8006f1e:	9b07      	ldr	r3, [sp, #28]
 8006f20:	4418      	add	r0, r3
 8006f22:	f010 001f 	ands.w	r0, r0, #31
 8006f26:	d047      	beq.n	8006fb8 <_dtoa_r+0x8c8>
 8006f28:	f1c0 0320 	rsb	r3, r0, #32
 8006f2c:	2b04      	cmp	r3, #4
 8006f2e:	dd3b      	ble.n	8006fa8 <_dtoa_r+0x8b8>
 8006f30:	9b07      	ldr	r3, [sp, #28]
 8006f32:	f1c0 001c 	rsb	r0, r0, #28
 8006f36:	4481      	add	r9, r0
 8006f38:	4405      	add	r5, r0
 8006f3a:	4403      	add	r3, r0
 8006f3c:	9307      	str	r3, [sp, #28]
 8006f3e:	f1b9 0f00 	cmp.w	r9, #0
 8006f42:	dd05      	ble.n	8006f50 <_dtoa_r+0x860>
 8006f44:	4659      	mov	r1, fp
 8006f46:	464a      	mov	r2, r9
 8006f48:	4620      	mov	r0, r4
 8006f4a:	f000 fee7 	bl	8007d1c <__lshift>
 8006f4e:	4683      	mov	fp, r0
 8006f50:	9b07      	ldr	r3, [sp, #28]
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	dd05      	ble.n	8006f62 <_dtoa_r+0x872>
 8006f56:	4631      	mov	r1, r6
 8006f58:	461a      	mov	r2, r3
 8006f5a:	4620      	mov	r0, r4
 8006f5c:	f000 fede 	bl	8007d1c <__lshift>
 8006f60:	4606      	mov	r6, r0
 8006f62:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006f64:	b353      	cbz	r3, 8006fbc <_dtoa_r+0x8cc>
 8006f66:	4631      	mov	r1, r6
 8006f68:	4658      	mov	r0, fp
 8006f6a:	f000 ff2b 	bl	8007dc4 <__mcmp>
 8006f6e:	2800      	cmp	r0, #0
 8006f70:	da24      	bge.n	8006fbc <_dtoa_r+0x8cc>
 8006f72:	2300      	movs	r3, #0
 8006f74:	4659      	mov	r1, fp
 8006f76:	220a      	movs	r2, #10
 8006f78:	4620      	mov	r0, r4
 8006f7a:	f000 fd1c 	bl	80079b6 <__multadd>
 8006f7e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006f80:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8006f84:	4683      	mov	fp, r0
 8006f86:	2b00      	cmp	r3, #0
 8006f88:	f000 8144 	beq.w	8007214 <_dtoa_r+0xb24>
 8006f8c:	2300      	movs	r3, #0
 8006f8e:	4639      	mov	r1, r7
 8006f90:	220a      	movs	r2, #10
 8006f92:	4620      	mov	r0, r4
 8006f94:	f000 fd0f 	bl	80079b6 <__multadd>
 8006f98:	9b04      	ldr	r3, [sp, #16]
 8006f9a:	4607      	mov	r7, r0
 8006f9c:	2b00      	cmp	r3, #0
 8006f9e:	dc4d      	bgt.n	800703c <_dtoa_r+0x94c>
 8006fa0:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8006fa2:	2b02      	cmp	r3, #2
 8006fa4:	dd4a      	ble.n	800703c <_dtoa_r+0x94c>
 8006fa6:	e011      	b.n	8006fcc <_dtoa_r+0x8dc>
 8006fa8:	d0c9      	beq.n	8006f3e <_dtoa_r+0x84e>
 8006faa:	9a07      	ldr	r2, [sp, #28]
 8006fac:	331c      	adds	r3, #28
 8006fae:	441a      	add	r2, r3
 8006fb0:	4499      	add	r9, r3
 8006fb2:	441d      	add	r5, r3
 8006fb4:	4613      	mov	r3, r2
 8006fb6:	e7c1      	b.n	8006f3c <_dtoa_r+0x84c>
 8006fb8:	4603      	mov	r3, r0
 8006fba:	e7f6      	b.n	8006faa <_dtoa_r+0x8ba>
 8006fbc:	f1b8 0f00 	cmp.w	r8, #0
 8006fc0:	dc36      	bgt.n	8007030 <_dtoa_r+0x940>
 8006fc2:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8006fc4:	2b02      	cmp	r3, #2
 8006fc6:	dd33      	ble.n	8007030 <_dtoa_r+0x940>
 8006fc8:	f8cd 8010 	str.w	r8, [sp, #16]
 8006fcc:	9b04      	ldr	r3, [sp, #16]
 8006fce:	b963      	cbnz	r3, 8006fea <_dtoa_r+0x8fa>
 8006fd0:	4631      	mov	r1, r6
 8006fd2:	2205      	movs	r2, #5
 8006fd4:	4620      	mov	r0, r4
 8006fd6:	f000 fcee 	bl	80079b6 <__multadd>
 8006fda:	4601      	mov	r1, r0
 8006fdc:	4606      	mov	r6, r0
 8006fde:	4658      	mov	r0, fp
 8006fe0:	f000 fef0 	bl	8007dc4 <__mcmp>
 8006fe4:	2800      	cmp	r0, #0
 8006fe6:	f73f add3 	bgt.w	8006b90 <_dtoa_r+0x4a0>
 8006fea:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8006fec:	9d06      	ldr	r5, [sp, #24]
 8006fee:	ea6f 0a03 	mvn.w	sl, r3
 8006ff2:	f04f 0900 	mov.w	r9, #0
 8006ff6:	4631      	mov	r1, r6
 8006ff8:	4620      	mov	r0, r4
 8006ffa:	f000 fcc5 	bl	8007988 <_Bfree>
 8006ffe:	2f00      	cmp	r7, #0
 8007000:	f43f aebd 	beq.w	8006d7e <_dtoa_r+0x68e>
 8007004:	f1b9 0f00 	cmp.w	r9, #0
 8007008:	d005      	beq.n	8007016 <_dtoa_r+0x926>
 800700a:	45b9      	cmp	r9, r7
 800700c:	d003      	beq.n	8007016 <_dtoa_r+0x926>
 800700e:	4649      	mov	r1, r9
 8007010:	4620      	mov	r0, r4
 8007012:	f000 fcb9 	bl	8007988 <_Bfree>
 8007016:	4639      	mov	r1, r7
 8007018:	4620      	mov	r0, r4
 800701a:	f000 fcb5 	bl	8007988 <_Bfree>
 800701e:	e6ae      	b.n	8006d7e <_dtoa_r+0x68e>
 8007020:	2600      	movs	r6, #0
 8007022:	4637      	mov	r7, r6
 8007024:	e7e1      	b.n	8006fea <_dtoa_r+0x8fa>
 8007026:	46ba      	mov	sl, r7
 8007028:	4637      	mov	r7, r6
 800702a:	e5b1      	b.n	8006b90 <_dtoa_r+0x4a0>
 800702c:	40240000 	.word	0x40240000
 8007030:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007032:	f8cd 8010 	str.w	r8, [sp, #16]
 8007036:	2b00      	cmp	r3, #0
 8007038:	f000 80f3 	beq.w	8007222 <_dtoa_r+0xb32>
 800703c:	2d00      	cmp	r5, #0
 800703e:	dd05      	ble.n	800704c <_dtoa_r+0x95c>
 8007040:	4639      	mov	r1, r7
 8007042:	462a      	mov	r2, r5
 8007044:	4620      	mov	r0, r4
 8007046:	f000 fe69 	bl	8007d1c <__lshift>
 800704a:	4607      	mov	r7, r0
 800704c:	9b08      	ldr	r3, [sp, #32]
 800704e:	2b00      	cmp	r3, #0
 8007050:	d04c      	beq.n	80070ec <_dtoa_r+0x9fc>
 8007052:	6879      	ldr	r1, [r7, #4]
 8007054:	4620      	mov	r0, r4
 8007056:	f000 fc63 	bl	8007920 <_Balloc>
 800705a:	4605      	mov	r5, r0
 800705c:	693a      	ldr	r2, [r7, #16]
 800705e:	f107 010c 	add.w	r1, r7, #12
 8007062:	3202      	adds	r2, #2
 8007064:	0092      	lsls	r2, r2, #2
 8007066:	300c      	adds	r0, #12
 8007068:	f7fd fd40 	bl	8004aec <memcpy>
 800706c:	2201      	movs	r2, #1
 800706e:	4629      	mov	r1, r5
 8007070:	4620      	mov	r0, r4
 8007072:	f000 fe53 	bl	8007d1c <__lshift>
 8007076:	46b9      	mov	r9, r7
 8007078:	4607      	mov	r7, r0
 800707a:	9b06      	ldr	r3, [sp, #24]
 800707c:	9307      	str	r3, [sp, #28]
 800707e:	9b02      	ldr	r3, [sp, #8]
 8007080:	f003 0301 	and.w	r3, r3, #1
 8007084:	9308      	str	r3, [sp, #32]
 8007086:	4631      	mov	r1, r6
 8007088:	4658      	mov	r0, fp
 800708a:	f7ff faa3 	bl	80065d4 <quorem>
 800708e:	4649      	mov	r1, r9
 8007090:	4605      	mov	r5, r0
 8007092:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8007096:	4658      	mov	r0, fp
 8007098:	f000 fe94 	bl	8007dc4 <__mcmp>
 800709c:	463a      	mov	r2, r7
 800709e:	9002      	str	r0, [sp, #8]
 80070a0:	4631      	mov	r1, r6
 80070a2:	4620      	mov	r0, r4
 80070a4:	f000 fea8 	bl	8007df8 <__mdiff>
 80070a8:	68c3      	ldr	r3, [r0, #12]
 80070aa:	4602      	mov	r2, r0
 80070ac:	bb03      	cbnz	r3, 80070f0 <_dtoa_r+0xa00>
 80070ae:	4601      	mov	r1, r0
 80070b0:	9009      	str	r0, [sp, #36]	; 0x24
 80070b2:	4658      	mov	r0, fp
 80070b4:	f000 fe86 	bl	8007dc4 <__mcmp>
 80070b8:	4603      	mov	r3, r0
 80070ba:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80070bc:	4611      	mov	r1, r2
 80070be:	4620      	mov	r0, r4
 80070c0:	9309      	str	r3, [sp, #36]	; 0x24
 80070c2:	f000 fc61 	bl	8007988 <_Bfree>
 80070c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80070c8:	b9a3      	cbnz	r3, 80070f4 <_dtoa_r+0xa04>
 80070ca:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80070cc:	b992      	cbnz	r2, 80070f4 <_dtoa_r+0xa04>
 80070ce:	9a08      	ldr	r2, [sp, #32]
 80070d0:	b982      	cbnz	r2, 80070f4 <_dtoa_r+0xa04>
 80070d2:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80070d6:	d029      	beq.n	800712c <_dtoa_r+0xa3c>
 80070d8:	9b02      	ldr	r3, [sp, #8]
 80070da:	2b00      	cmp	r3, #0
 80070dc:	dd01      	ble.n	80070e2 <_dtoa_r+0x9f2>
 80070de:	f105 0831 	add.w	r8, r5, #49	; 0x31
 80070e2:	9b07      	ldr	r3, [sp, #28]
 80070e4:	1c5d      	adds	r5, r3, #1
 80070e6:	f883 8000 	strb.w	r8, [r3]
 80070ea:	e784      	b.n	8006ff6 <_dtoa_r+0x906>
 80070ec:	4638      	mov	r0, r7
 80070ee:	e7c2      	b.n	8007076 <_dtoa_r+0x986>
 80070f0:	2301      	movs	r3, #1
 80070f2:	e7e3      	b.n	80070bc <_dtoa_r+0x9cc>
 80070f4:	9a02      	ldr	r2, [sp, #8]
 80070f6:	2a00      	cmp	r2, #0
 80070f8:	db04      	blt.n	8007104 <_dtoa_r+0xa14>
 80070fa:	d123      	bne.n	8007144 <_dtoa_r+0xa54>
 80070fc:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80070fe:	bb0a      	cbnz	r2, 8007144 <_dtoa_r+0xa54>
 8007100:	9a08      	ldr	r2, [sp, #32]
 8007102:	b9fa      	cbnz	r2, 8007144 <_dtoa_r+0xa54>
 8007104:	2b00      	cmp	r3, #0
 8007106:	ddec      	ble.n	80070e2 <_dtoa_r+0x9f2>
 8007108:	4659      	mov	r1, fp
 800710a:	2201      	movs	r2, #1
 800710c:	4620      	mov	r0, r4
 800710e:	f000 fe05 	bl	8007d1c <__lshift>
 8007112:	4631      	mov	r1, r6
 8007114:	4683      	mov	fp, r0
 8007116:	f000 fe55 	bl	8007dc4 <__mcmp>
 800711a:	2800      	cmp	r0, #0
 800711c:	dc03      	bgt.n	8007126 <_dtoa_r+0xa36>
 800711e:	d1e0      	bne.n	80070e2 <_dtoa_r+0x9f2>
 8007120:	f018 0f01 	tst.w	r8, #1
 8007124:	d0dd      	beq.n	80070e2 <_dtoa_r+0x9f2>
 8007126:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800712a:	d1d8      	bne.n	80070de <_dtoa_r+0x9ee>
 800712c:	9b07      	ldr	r3, [sp, #28]
 800712e:	9a07      	ldr	r2, [sp, #28]
 8007130:	1c5d      	adds	r5, r3, #1
 8007132:	2339      	movs	r3, #57	; 0x39
 8007134:	7013      	strb	r3, [r2, #0]
 8007136:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800713a:	1e6a      	subs	r2, r5, #1
 800713c:	2b39      	cmp	r3, #57	; 0x39
 800713e:	d04d      	beq.n	80071dc <_dtoa_r+0xaec>
 8007140:	3301      	adds	r3, #1
 8007142:	e052      	b.n	80071ea <_dtoa_r+0xafa>
 8007144:	9a07      	ldr	r2, [sp, #28]
 8007146:	2b00      	cmp	r3, #0
 8007148:	f102 0501 	add.w	r5, r2, #1
 800714c:	dd06      	ble.n	800715c <_dtoa_r+0xa6c>
 800714e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8007152:	d0eb      	beq.n	800712c <_dtoa_r+0xa3c>
 8007154:	f108 0801 	add.w	r8, r8, #1
 8007158:	9b07      	ldr	r3, [sp, #28]
 800715a:	e7c4      	b.n	80070e6 <_dtoa_r+0x9f6>
 800715c:	9b06      	ldr	r3, [sp, #24]
 800715e:	9a04      	ldr	r2, [sp, #16]
 8007160:	1aeb      	subs	r3, r5, r3
 8007162:	4293      	cmp	r3, r2
 8007164:	f805 8c01 	strb.w	r8, [r5, #-1]
 8007168:	d021      	beq.n	80071ae <_dtoa_r+0xabe>
 800716a:	4659      	mov	r1, fp
 800716c:	2300      	movs	r3, #0
 800716e:	220a      	movs	r2, #10
 8007170:	4620      	mov	r0, r4
 8007172:	f000 fc20 	bl	80079b6 <__multadd>
 8007176:	45b9      	cmp	r9, r7
 8007178:	4683      	mov	fp, r0
 800717a:	f04f 0300 	mov.w	r3, #0
 800717e:	f04f 020a 	mov.w	r2, #10
 8007182:	4649      	mov	r1, r9
 8007184:	4620      	mov	r0, r4
 8007186:	d105      	bne.n	8007194 <_dtoa_r+0xaa4>
 8007188:	f000 fc15 	bl	80079b6 <__multadd>
 800718c:	4681      	mov	r9, r0
 800718e:	4607      	mov	r7, r0
 8007190:	9507      	str	r5, [sp, #28]
 8007192:	e778      	b.n	8007086 <_dtoa_r+0x996>
 8007194:	f000 fc0f 	bl	80079b6 <__multadd>
 8007198:	4639      	mov	r1, r7
 800719a:	4681      	mov	r9, r0
 800719c:	2300      	movs	r3, #0
 800719e:	220a      	movs	r2, #10
 80071a0:	4620      	mov	r0, r4
 80071a2:	f000 fc08 	bl	80079b6 <__multadd>
 80071a6:	4607      	mov	r7, r0
 80071a8:	e7f2      	b.n	8007190 <_dtoa_r+0xaa0>
 80071aa:	f04f 0900 	mov.w	r9, #0
 80071ae:	4659      	mov	r1, fp
 80071b0:	2201      	movs	r2, #1
 80071b2:	4620      	mov	r0, r4
 80071b4:	f000 fdb2 	bl	8007d1c <__lshift>
 80071b8:	4631      	mov	r1, r6
 80071ba:	4683      	mov	fp, r0
 80071bc:	f000 fe02 	bl	8007dc4 <__mcmp>
 80071c0:	2800      	cmp	r0, #0
 80071c2:	dcb8      	bgt.n	8007136 <_dtoa_r+0xa46>
 80071c4:	d102      	bne.n	80071cc <_dtoa_r+0xadc>
 80071c6:	f018 0f01 	tst.w	r8, #1
 80071ca:	d1b4      	bne.n	8007136 <_dtoa_r+0xa46>
 80071cc:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80071d0:	1e6a      	subs	r2, r5, #1
 80071d2:	2b30      	cmp	r3, #48	; 0x30
 80071d4:	f47f af0f 	bne.w	8006ff6 <_dtoa_r+0x906>
 80071d8:	4615      	mov	r5, r2
 80071da:	e7f7      	b.n	80071cc <_dtoa_r+0xadc>
 80071dc:	9b06      	ldr	r3, [sp, #24]
 80071de:	4293      	cmp	r3, r2
 80071e0:	d105      	bne.n	80071ee <_dtoa_r+0xafe>
 80071e2:	2331      	movs	r3, #49	; 0x31
 80071e4:	9a06      	ldr	r2, [sp, #24]
 80071e6:	f10a 0a01 	add.w	sl, sl, #1
 80071ea:	7013      	strb	r3, [r2, #0]
 80071ec:	e703      	b.n	8006ff6 <_dtoa_r+0x906>
 80071ee:	4615      	mov	r5, r2
 80071f0:	e7a1      	b.n	8007136 <_dtoa_r+0xa46>
 80071f2:	4b17      	ldr	r3, [pc, #92]	; (8007250 <_dtoa_r+0xb60>)
 80071f4:	f7ff bae1 	b.w	80067ba <_dtoa_r+0xca>
 80071f8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80071fa:	2b00      	cmp	r3, #0
 80071fc:	f47f aabb 	bne.w	8006776 <_dtoa_r+0x86>
 8007200:	4b14      	ldr	r3, [pc, #80]	; (8007254 <_dtoa_r+0xb64>)
 8007202:	f7ff bada 	b.w	80067ba <_dtoa_r+0xca>
 8007206:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8007208:	2b01      	cmp	r3, #1
 800720a:	f77f ae3f 	ble.w	8006e8c <_dtoa_r+0x79c>
 800720e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007210:	9308      	str	r3, [sp, #32]
 8007212:	e653      	b.n	8006ebc <_dtoa_r+0x7cc>
 8007214:	9b04      	ldr	r3, [sp, #16]
 8007216:	2b00      	cmp	r3, #0
 8007218:	dc03      	bgt.n	8007222 <_dtoa_r+0xb32>
 800721a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800721c:	2b02      	cmp	r3, #2
 800721e:	f73f aed5 	bgt.w	8006fcc <_dtoa_r+0x8dc>
 8007222:	9d06      	ldr	r5, [sp, #24]
 8007224:	4631      	mov	r1, r6
 8007226:	4658      	mov	r0, fp
 8007228:	f7ff f9d4 	bl	80065d4 <quorem>
 800722c:	9b06      	ldr	r3, [sp, #24]
 800722e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8007232:	f805 8b01 	strb.w	r8, [r5], #1
 8007236:	9a04      	ldr	r2, [sp, #16]
 8007238:	1aeb      	subs	r3, r5, r3
 800723a:	429a      	cmp	r2, r3
 800723c:	ddb5      	ble.n	80071aa <_dtoa_r+0xaba>
 800723e:	4659      	mov	r1, fp
 8007240:	2300      	movs	r3, #0
 8007242:	220a      	movs	r2, #10
 8007244:	4620      	mov	r0, r4
 8007246:	f000 fbb6 	bl	80079b6 <__multadd>
 800724a:	4683      	mov	fp, r0
 800724c:	e7ea      	b.n	8007224 <_dtoa_r+0xb34>
 800724e:	bf00      	nop
 8007250:	08008cf8 	.word	0x08008cf8
 8007254:	08008d78 	.word	0x08008d78

08007258 <rshift>:
 8007258:	b5f0      	push	{r4, r5, r6, r7, lr}
 800725a:	6906      	ldr	r6, [r0, #16]
 800725c:	114b      	asrs	r3, r1, #5
 800725e:	429e      	cmp	r6, r3
 8007260:	f100 0414 	add.w	r4, r0, #20
 8007264:	dd31      	ble.n	80072ca <rshift+0x72>
 8007266:	f011 011f 	ands.w	r1, r1, #31
 800726a:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 800726e:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 8007272:	d108      	bne.n	8007286 <rshift+0x2e>
 8007274:	4621      	mov	r1, r4
 8007276:	42b2      	cmp	r2, r6
 8007278:	460b      	mov	r3, r1
 800727a:	d211      	bcs.n	80072a0 <rshift+0x48>
 800727c:	f852 3b04 	ldr.w	r3, [r2], #4
 8007280:	f841 3b04 	str.w	r3, [r1], #4
 8007284:	e7f7      	b.n	8007276 <rshift+0x1e>
 8007286:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 800728a:	4623      	mov	r3, r4
 800728c:	f1c1 0c20 	rsb	ip, r1, #32
 8007290:	40cd      	lsrs	r5, r1
 8007292:	3204      	adds	r2, #4
 8007294:	42b2      	cmp	r2, r6
 8007296:	4617      	mov	r7, r2
 8007298:	d30d      	bcc.n	80072b6 <rshift+0x5e>
 800729a:	601d      	str	r5, [r3, #0]
 800729c:	b105      	cbz	r5, 80072a0 <rshift+0x48>
 800729e:	3304      	adds	r3, #4
 80072a0:	42a3      	cmp	r3, r4
 80072a2:	eba3 0204 	sub.w	r2, r3, r4
 80072a6:	bf08      	it	eq
 80072a8:	2300      	moveq	r3, #0
 80072aa:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80072ae:	6102      	str	r2, [r0, #16]
 80072b0:	bf08      	it	eq
 80072b2:	6143      	streq	r3, [r0, #20]
 80072b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80072b6:	683f      	ldr	r7, [r7, #0]
 80072b8:	fa07 f70c 	lsl.w	r7, r7, ip
 80072bc:	433d      	orrs	r5, r7
 80072be:	f843 5b04 	str.w	r5, [r3], #4
 80072c2:	f852 5b04 	ldr.w	r5, [r2], #4
 80072c6:	40cd      	lsrs	r5, r1
 80072c8:	e7e4      	b.n	8007294 <rshift+0x3c>
 80072ca:	4623      	mov	r3, r4
 80072cc:	e7e8      	b.n	80072a0 <rshift+0x48>

080072ce <__hexdig_fun>:
 80072ce:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 80072d2:	2b09      	cmp	r3, #9
 80072d4:	d802      	bhi.n	80072dc <__hexdig_fun+0xe>
 80072d6:	3820      	subs	r0, #32
 80072d8:	b2c0      	uxtb	r0, r0
 80072da:	4770      	bx	lr
 80072dc:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 80072e0:	2b05      	cmp	r3, #5
 80072e2:	d801      	bhi.n	80072e8 <__hexdig_fun+0x1a>
 80072e4:	3847      	subs	r0, #71	; 0x47
 80072e6:	e7f7      	b.n	80072d8 <__hexdig_fun+0xa>
 80072e8:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 80072ec:	2b05      	cmp	r3, #5
 80072ee:	d801      	bhi.n	80072f4 <__hexdig_fun+0x26>
 80072f0:	3827      	subs	r0, #39	; 0x27
 80072f2:	e7f1      	b.n	80072d8 <__hexdig_fun+0xa>
 80072f4:	2000      	movs	r0, #0
 80072f6:	4770      	bx	lr

080072f8 <__gethex>:
 80072f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80072fc:	b08b      	sub	sp, #44	; 0x2c
 80072fe:	9002      	str	r0, [sp, #8]
 8007300:	9816      	ldr	r0, [sp, #88]	; 0x58
 8007302:	468a      	mov	sl, r1
 8007304:	4690      	mov	r8, r2
 8007306:	9306      	str	r3, [sp, #24]
 8007308:	f000 fad1 	bl	80078ae <__localeconv_l>
 800730c:	6803      	ldr	r3, [r0, #0]
 800730e:	f04f 0b00 	mov.w	fp, #0
 8007312:	4618      	mov	r0, r3
 8007314:	9303      	str	r3, [sp, #12]
 8007316:	f7f8 ff1b 	bl	8000150 <strlen>
 800731a:	9b03      	ldr	r3, [sp, #12]
 800731c:	9001      	str	r0, [sp, #4]
 800731e:	4403      	add	r3, r0
 8007320:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8007324:	9307      	str	r3, [sp, #28]
 8007326:	f8da 3000 	ldr.w	r3, [sl]
 800732a:	3302      	adds	r3, #2
 800732c:	461f      	mov	r7, r3
 800732e:	f813 0b01 	ldrb.w	r0, [r3], #1
 8007332:	2830      	cmp	r0, #48	; 0x30
 8007334:	d06c      	beq.n	8007410 <__gethex+0x118>
 8007336:	f7ff ffca 	bl	80072ce <__hexdig_fun>
 800733a:	4604      	mov	r4, r0
 800733c:	2800      	cmp	r0, #0
 800733e:	d16a      	bne.n	8007416 <__gethex+0x11e>
 8007340:	9a01      	ldr	r2, [sp, #4]
 8007342:	9903      	ldr	r1, [sp, #12]
 8007344:	4638      	mov	r0, r7
 8007346:	f001 f8f9 	bl	800853c <strncmp>
 800734a:	2800      	cmp	r0, #0
 800734c:	d166      	bne.n	800741c <__gethex+0x124>
 800734e:	9b01      	ldr	r3, [sp, #4]
 8007350:	5cf8      	ldrb	r0, [r7, r3]
 8007352:	18fe      	adds	r6, r7, r3
 8007354:	f7ff ffbb 	bl	80072ce <__hexdig_fun>
 8007358:	2800      	cmp	r0, #0
 800735a:	d062      	beq.n	8007422 <__gethex+0x12a>
 800735c:	4633      	mov	r3, r6
 800735e:	7818      	ldrb	r0, [r3, #0]
 8007360:	461f      	mov	r7, r3
 8007362:	2830      	cmp	r0, #48	; 0x30
 8007364:	f103 0301 	add.w	r3, r3, #1
 8007368:	d0f9      	beq.n	800735e <__gethex+0x66>
 800736a:	f7ff ffb0 	bl	80072ce <__hexdig_fun>
 800736e:	fab0 f580 	clz	r5, r0
 8007372:	4634      	mov	r4, r6
 8007374:	f04f 0b01 	mov.w	fp, #1
 8007378:	096d      	lsrs	r5, r5, #5
 800737a:	463a      	mov	r2, r7
 800737c:	4616      	mov	r6, r2
 800737e:	7830      	ldrb	r0, [r6, #0]
 8007380:	3201      	adds	r2, #1
 8007382:	f7ff ffa4 	bl	80072ce <__hexdig_fun>
 8007386:	2800      	cmp	r0, #0
 8007388:	d1f8      	bne.n	800737c <__gethex+0x84>
 800738a:	9a01      	ldr	r2, [sp, #4]
 800738c:	9903      	ldr	r1, [sp, #12]
 800738e:	4630      	mov	r0, r6
 8007390:	f001 f8d4 	bl	800853c <strncmp>
 8007394:	b950      	cbnz	r0, 80073ac <__gethex+0xb4>
 8007396:	b954      	cbnz	r4, 80073ae <__gethex+0xb6>
 8007398:	9b01      	ldr	r3, [sp, #4]
 800739a:	18f4      	adds	r4, r6, r3
 800739c:	4622      	mov	r2, r4
 800739e:	4616      	mov	r6, r2
 80073a0:	7830      	ldrb	r0, [r6, #0]
 80073a2:	3201      	adds	r2, #1
 80073a4:	f7ff ff93 	bl	80072ce <__hexdig_fun>
 80073a8:	2800      	cmp	r0, #0
 80073aa:	d1f8      	bne.n	800739e <__gethex+0xa6>
 80073ac:	b10c      	cbz	r4, 80073b2 <__gethex+0xba>
 80073ae:	1ba4      	subs	r4, r4, r6
 80073b0:	00a4      	lsls	r4, r4, #2
 80073b2:	7833      	ldrb	r3, [r6, #0]
 80073b4:	2b50      	cmp	r3, #80	; 0x50
 80073b6:	d001      	beq.n	80073bc <__gethex+0xc4>
 80073b8:	2b70      	cmp	r3, #112	; 0x70
 80073ba:	d140      	bne.n	800743e <__gethex+0x146>
 80073bc:	7873      	ldrb	r3, [r6, #1]
 80073be:	2b2b      	cmp	r3, #43	; 0x2b
 80073c0:	d031      	beq.n	8007426 <__gethex+0x12e>
 80073c2:	2b2d      	cmp	r3, #45	; 0x2d
 80073c4:	d033      	beq.n	800742e <__gethex+0x136>
 80073c6:	f04f 0900 	mov.w	r9, #0
 80073ca:	1c71      	adds	r1, r6, #1
 80073cc:	7808      	ldrb	r0, [r1, #0]
 80073ce:	f7ff ff7e 	bl	80072ce <__hexdig_fun>
 80073d2:	1e43      	subs	r3, r0, #1
 80073d4:	b2db      	uxtb	r3, r3
 80073d6:	2b18      	cmp	r3, #24
 80073d8:	d831      	bhi.n	800743e <__gethex+0x146>
 80073da:	f1a0 0210 	sub.w	r2, r0, #16
 80073de:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80073e2:	f7ff ff74 	bl	80072ce <__hexdig_fun>
 80073e6:	1e43      	subs	r3, r0, #1
 80073e8:	b2db      	uxtb	r3, r3
 80073ea:	2b18      	cmp	r3, #24
 80073ec:	d922      	bls.n	8007434 <__gethex+0x13c>
 80073ee:	f1b9 0f00 	cmp.w	r9, #0
 80073f2:	d000      	beq.n	80073f6 <__gethex+0xfe>
 80073f4:	4252      	negs	r2, r2
 80073f6:	4414      	add	r4, r2
 80073f8:	f8ca 1000 	str.w	r1, [sl]
 80073fc:	b30d      	cbz	r5, 8007442 <__gethex+0x14a>
 80073fe:	f1bb 0f00 	cmp.w	fp, #0
 8007402:	bf0c      	ite	eq
 8007404:	2706      	moveq	r7, #6
 8007406:	2700      	movne	r7, #0
 8007408:	4638      	mov	r0, r7
 800740a:	b00b      	add	sp, #44	; 0x2c
 800740c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007410:	f10b 0b01 	add.w	fp, fp, #1
 8007414:	e78a      	b.n	800732c <__gethex+0x34>
 8007416:	2500      	movs	r5, #0
 8007418:	462c      	mov	r4, r5
 800741a:	e7ae      	b.n	800737a <__gethex+0x82>
 800741c:	463e      	mov	r6, r7
 800741e:	2501      	movs	r5, #1
 8007420:	e7c7      	b.n	80073b2 <__gethex+0xba>
 8007422:	4604      	mov	r4, r0
 8007424:	e7fb      	b.n	800741e <__gethex+0x126>
 8007426:	f04f 0900 	mov.w	r9, #0
 800742a:	1cb1      	adds	r1, r6, #2
 800742c:	e7ce      	b.n	80073cc <__gethex+0xd4>
 800742e:	f04f 0901 	mov.w	r9, #1
 8007432:	e7fa      	b.n	800742a <__gethex+0x132>
 8007434:	230a      	movs	r3, #10
 8007436:	fb03 0202 	mla	r2, r3, r2, r0
 800743a:	3a10      	subs	r2, #16
 800743c:	e7cf      	b.n	80073de <__gethex+0xe6>
 800743e:	4631      	mov	r1, r6
 8007440:	e7da      	b.n	80073f8 <__gethex+0x100>
 8007442:	4629      	mov	r1, r5
 8007444:	1bf3      	subs	r3, r6, r7
 8007446:	3b01      	subs	r3, #1
 8007448:	2b07      	cmp	r3, #7
 800744a:	dc49      	bgt.n	80074e0 <__gethex+0x1e8>
 800744c:	9802      	ldr	r0, [sp, #8]
 800744e:	f000 fa67 	bl	8007920 <_Balloc>
 8007452:	f04f 0b00 	mov.w	fp, #0
 8007456:	4605      	mov	r5, r0
 8007458:	46da      	mov	sl, fp
 800745a:	9b01      	ldr	r3, [sp, #4]
 800745c:	f100 0914 	add.w	r9, r0, #20
 8007460:	f1c3 0301 	rsb	r3, r3, #1
 8007464:	f8cd 9010 	str.w	r9, [sp, #16]
 8007468:	9308      	str	r3, [sp, #32]
 800746a:	42b7      	cmp	r7, r6
 800746c:	d33b      	bcc.n	80074e6 <__gethex+0x1ee>
 800746e:	9804      	ldr	r0, [sp, #16]
 8007470:	f840 ab04 	str.w	sl, [r0], #4
 8007474:	eba0 0009 	sub.w	r0, r0, r9
 8007478:	1080      	asrs	r0, r0, #2
 800747a:	6128      	str	r0, [r5, #16]
 800747c:	0147      	lsls	r7, r0, #5
 800747e:	4650      	mov	r0, sl
 8007480:	f000 fb12 	bl	8007aa8 <__hi0bits>
 8007484:	f8d8 6000 	ldr.w	r6, [r8]
 8007488:	1a3f      	subs	r7, r7, r0
 800748a:	42b7      	cmp	r7, r6
 800748c:	dd64      	ble.n	8007558 <__gethex+0x260>
 800748e:	1bbf      	subs	r7, r7, r6
 8007490:	4639      	mov	r1, r7
 8007492:	4628      	mov	r0, r5
 8007494:	f000 fe1b 	bl	80080ce <__any_on>
 8007498:	4682      	mov	sl, r0
 800749a:	b178      	cbz	r0, 80074bc <__gethex+0x1c4>
 800749c:	f04f 0a01 	mov.w	sl, #1
 80074a0:	1e7b      	subs	r3, r7, #1
 80074a2:	1159      	asrs	r1, r3, #5
 80074a4:	f003 021f 	and.w	r2, r3, #31
 80074a8:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 80074ac:	fa0a f202 	lsl.w	r2, sl, r2
 80074b0:	420a      	tst	r2, r1
 80074b2:	d003      	beq.n	80074bc <__gethex+0x1c4>
 80074b4:	4553      	cmp	r3, sl
 80074b6:	dc46      	bgt.n	8007546 <__gethex+0x24e>
 80074b8:	f04f 0a02 	mov.w	sl, #2
 80074bc:	4639      	mov	r1, r7
 80074be:	4628      	mov	r0, r5
 80074c0:	f7ff feca 	bl	8007258 <rshift>
 80074c4:	443c      	add	r4, r7
 80074c6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80074ca:	42a3      	cmp	r3, r4
 80074cc:	da52      	bge.n	8007574 <__gethex+0x27c>
 80074ce:	4629      	mov	r1, r5
 80074d0:	9802      	ldr	r0, [sp, #8]
 80074d2:	f000 fa59 	bl	8007988 <_Bfree>
 80074d6:	2300      	movs	r3, #0
 80074d8:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80074da:	27a3      	movs	r7, #163	; 0xa3
 80074dc:	6013      	str	r3, [r2, #0]
 80074de:	e793      	b.n	8007408 <__gethex+0x110>
 80074e0:	3101      	adds	r1, #1
 80074e2:	105b      	asrs	r3, r3, #1
 80074e4:	e7b0      	b.n	8007448 <__gethex+0x150>
 80074e6:	1e73      	subs	r3, r6, #1
 80074e8:	9305      	str	r3, [sp, #20]
 80074ea:	9a07      	ldr	r2, [sp, #28]
 80074ec:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80074f0:	4293      	cmp	r3, r2
 80074f2:	d018      	beq.n	8007526 <__gethex+0x22e>
 80074f4:	f1bb 0f20 	cmp.w	fp, #32
 80074f8:	d107      	bne.n	800750a <__gethex+0x212>
 80074fa:	9b04      	ldr	r3, [sp, #16]
 80074fc:	f8c3 a000 	str.w	sl, [r3]
 8007500:	f04f 0a00 	mov.w	sl, #0
 8007504:	46d3      	mov	fp, sl
 8007506:	3304      	adds	r3, #4
 8007508:	9304      	str	r3, [sp, #16]
 800750a:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800750e:	f7ff fede 	bl	80072ce <__hexdig_fun>
 8007512:	f000 000f 	and.w	r0, r0, #15
 8007516:	fa00 f00b 	lsl.w	r0, r0, fp
 800751a:	ea4a 0a00 	orr.w	sl, sl, r0
 800751e:	f10b 0b04 	add.w	fp, fp, #4
 8007522:	9b05      	ldr	r3, [sp, #20]
 8007524:	e00d      	b.n	8007542 <__gethex+0x24a>
 8007526:	9b05      	ldr	r3, [sp, #20]
 8007528:	9a08      	ldr	r2, [sp, #32]
 800752a:	4413      	add	r3, r2
 800752c:	42bb      	cmp	r3, r7
 800752e:	d3e1      	bcc.n	80074f4 <__gethex+0x1fc>
 8007530:	4618      	mov	r0, r3
 8007532:	9a01      	ldr	r2, [sp, #4]
 8007534:	9903      	ldr	r1, [sp, #12]
 8007536:	9309      	str	r3, [sp, #36]	; 0x24
 8007538:	f001 f800 	bl	800853c <strncmp>
 800753c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800753e:	2800      	cmp	r0, #0
 8007540:	d1d8      	bne.n	80074f4 <__gethex+0x1fc>
 8007542:	461e      	mov	r6, r3
 8007544:	e791      	b.n	800746a <__gethex+0x172>
 8007546:	1eb9      	subs	r1, r7, #2
 8007548:	4628      	mov	r0, r5
 800754a:	f000 fdc0 	bl	80080ce <__any_on>
 800754e:	2800      	cmp	r0, #0
 8007550:	d0b2      	beq.n	80074b8 <__gethex+0x1c0>
 8007552:	f04f 0a03 	mov.w	sl, #3
 8007556:	e7b1      	b.n	80074bc <__gethex+0x1c4>
 8007558:	da09      	bge.n	800756e <__gethex+0x276>
 800755a:	1bf7      	subs	r7, r6, r7
 800755c:	4629      	mov	r1, r5
 800755e:	463a      	mov	r2, r7
 8007560:	9802      	ldr	r0, [sp, #8]
 8007562:	f000 fbdb 	bl	8007d1c <__lshift>
 8007566:	4605      	mov	r5, r0
 8007568:	1be4      	subs	r4, r4, r7
 800756a:	f100 0914 	add.w	r9, r0, #20
 800756e:	f04f 0a00 	mov.w	sl, #0
 8007572:	e7a8      	b.n	80074c6 <__gethex+0x1ce>
 8007574:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8007578:	42a0      	cmp	r0, r4
 800757a:	dd6b      	ble.n	8007654 <__gethex+0x35c>
 800757c:	1b04      	subs	r4, r0, r4
 800757e:	42a6      	cmp	r6, r4
 8007580:	dc2e      	bgt.n	80075e0 <__gethex+0x2e8>
 8007582:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8007586:	2b02      	cmp	r3, #2
 8007588:	d022      	beq.n	80075d0 <__gethex+0x2d8>
 800758a:	2b03      	cmp	r3, #3
 800758c:	d024      	beq.n	80075d8 <__gethex+0x2e0>
 800758e:	2b01      	cmp	r3, #1
 8007590:	d115      	bne.n	80075be <__gethex+0x2c6>
 8007592:	42a6      	cmp	r6, r4
 8007594:	d113      	bne.n	80075be <__gethex+0x2c6>
 8007596:	2e01      	cmp	r6, #1
 8007598:	dc0b      	bgt.n	80075b2 <__gethex+0x2ba>
 800759a:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800759e:	9a06      	ldr	r2, [sp, #24]
 80075a0:	2762      	movs	r7, #98	; 0x62
 80075a2:	6013      	str	r3, [r2, #0]
 80075a4:	2301      	movs	r3, #1
 80075a6:	612b      	str	r3, [r5, #16]
 80075a8:	f8c9 3000 	str.w	r3, [r9]
 80075ac:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80075ae:	601d      	str	r5, [r3, #0]
 80075b0:	e72a      	b.n	8007408 <__gethex+0x110>
 80075b2:	1e71      	subs	r1, r6, #1
 80075b4:	4628      	mov	r0, r5
 80075b6:	f000 fd8a 	bl	80080ce <__any_on>
 80075ba:	2800      	cmp	r0, #0
 80075bc:	d1ed      	bne.n	800759a <__gethex+0x2a2>
 80075be:	4629      	mov	r1, r5
 80075c0:	9802      	ldr	r0, [sp, #8]
 80075c2:	f000 f9e1 	bl	8007988 <_Bfree>
 80075c6:	2300      	movs	r3, #0
 80075c8:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80075ca:	2750      	movs	r7, #80	; 0x50
 80075cc:	6013      	str	r3, [r2, #0]
 80075ce:	e71b      	b.n	8007408 <__gethex+0x110>
 80075d0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80075d2:	2b00      	cmp	r3, #0
 80075d4:	d0e1      	beq.n	800759a <__gethex+0x2a2>
 80075d6:	e7f2      	b.n	80075be <__gethex+0x2c6>
 80075d8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80075da:	2b00      	cmp	r3, #0
 80075dc:	d1dd      	bne.n	800759a <__gethex+0x2a2>
 80075de:	e7ee      	b.n	80075be <__gethex+0x2c6>
 80075e0:	1e67      	subs	r7, r4, #1
 80075e2:	f1ba 0f00 	cmp.w	sl, #0
 80075e6:	d132      	bne.n	800764e <__gethex+0x356>
 80075e8:	b127      	cbz	r7, 80075f4 <__gethex+0x2fc>
 80075ea:	4639      	mov	r1, r7
 80075ec:	4628      	mov	r0, r5
 80075ee:	f000 fd6e 	bl	80080ce <__any_on>
 80075f2:	4682      	mov	sl, r0
 80075f4:	2301      	movs	r3, #1
 80075f6:	117a      	asrs	r2, r7, #5
 80075f8:	f007 071f 	and.w	r7, r7, #31
 80075fc:	fa03 f707 	lsl.w	r7, r3, r7
 8007600:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 8007604:	4621      	mov	r1, r4
 8007606:	421f      	tst	r7, r3
 8007608:	f04f 0702 	mov.w	r7, #2
 800760c:	4628      	mov	r0, r5
 800760e:	bf18      	it	ne
 8007610:	f04a 0a02 	orrne.w	sl, sl, #2
 8007614:	1b36      	subs	r6, r6, r4
 8007616:	f7ff fe1f 	bl	8007258 <rshift>
 800761a:	f8d8 4004 	ldr.w	r4, [r8, #4]
 800761e:	f1ba 0f00 	cmp.w	sl, #0
 8007622:	d048      	beq.n	80076b6 <__gethex+0x3be>
 8007624:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8007628:	2b02      	cmp	r3, #2
 800762a:	d015      	beq.n	8007658 <__gethex+0x360>
 800762c:	2b03      	cmp	r3, #3
 800762e:	d017      	beq.n	8007660 <__gethex+0x368>
 8007630:	2b01      	cmp	r3, #1
 8007632:	d109      	bne.n	8007648 <__gethex+0x350>
 8007634:	f01a 0f02 	tst.w	sl, #2
 8007638:	d006      	beq.n	8007648 <__gethex+0x350>
 800763a:	f8d9 3000 	ldr.w	r3, [r9]
 800763e:	ea4a 0a03 	orr.w	sl, sl, r3
 8007642:	f01a 0f01 	tst.w	sl, #1
 8007646:	d10e      	bne.n	8007666 <__gethex+0x36e>
 8007648:	f047 0710 	orr.w	r7, r7, #16
 800764c:	e033      	b.n	80076b6 <__gethex+0x3be>
 800764e:	f04f 0a01 	mov.w	sl, #1
 8007652:	e7cf      	b.n	80075f4 <__gethex+0x2fc>
 8007654:	2701      	movs	r7, #1
 8007656:	e7e2      	b.n	800761e <__gethex+0x326>
 8007658:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800765a:	f1c3 0301 	rsb	r3, r3, #1
 800765e:	9315      	str	r3, [sp, #84]	; 0x54
 8007660:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007662:	2b00      	cmp	r3, #0
 8007664:	d0f0      	beq.n	8007648 <__gethex+0x350>
 8007666:	f04f 0c00 	mov.w	ip, #0
 800766a:	f8d5 9010 	ldr.w	r9, [r5, #16]
 800766e:	f105 0314 	add.w	r3, r5, #20
 8007672:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 8007676:	eb03 010a 	add.w	r1, r3, sl
 800767a:	4618      	mov	r0, r3
 800767c:	f853 2b04 	ldr.w	r2, [r3], #4
 8007680:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
 8007684:	d01c      	beq.n	80076c0 <__gethex+0x3c8>
 8007686:	3201      	adds	r2, #1
 8007688:	6002      	str	r2, [r0, #0]
 800768a:	2f02      	cmp	r7, #2
 800768c:	f105 0314 	add.w	r3, r5, #20
 8007690:	d138      	bne.n	8007704 <__gethex+0x40c>
 8007692:	f8d8 2000 	ldr.w	r2, [r8]
 8007696:	3a01      	subs	r2, #1
 8007698:	42b2      	cmp	r2, r6
 800769a:	d10a      	bne.n	80076b2 <__gethex+0x3ba>
 800769c:	2201      	movs	r2, #1
 800769e:	1171      	asrs	r1, r6, #5
 80076a0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80076a4:	f006 061f 	and.w	r6, r6, #31
 80076a8:	fa02 f606 	lsl.w	r6, r2, r6
 80076ac:	421e      	tst	r6, r3
 80076ae:	bf18      	it	ne
 80076b0:	4617      	movne	r7, r2
 80076b2:	f047 0720 	orr.w	r7, r7, #32
 80076b6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80076b8:	601d      	str	r5, [r3, #0]
 80076ba:	9b06      	ldr	r3, [sp, #24]
 80076bc:	601c      	str	r4, [r3, #0]
 80076be:	e6a3      	b.n	8007408 <__gethex+0x110>
 80076c0:	4299      	cmp	r1, r3
 80076c2:	f843 cc04 	str.w	ip, [r3, #-4]
 80076c6:	d8d8      	bhi.n	800767a <__gethex+0x382>
 80076c8:	68ab      	ldr	r3, [r5, #8]
 80076ca:	4599      	cmp	r9, r3
 80076cc:	db12      	blt.n	80076f4 <__gethex+0x3fc>
 80076ce:	6869      	ldr	r1, [r5, #4]
 80076d0:	9802      	ldr	r0, [sp, #8]
 80076d2:	3101      	adds	r1, #1
 80076d4:	f000 f924 	bl	8007920 <_Balloc>
 80076d8:	4683      	mov	fp, r0
 80076da:	692a      	ldr	r2, [r5, #16]
 80076dc:	f105 010c 	add.w	r1, r5, #12
 80076e0:	3202      	adds	r2, #2
 80076e2:	0092      	lsls	r2, r2, #2
 80076e4:	300c      	adds	r0, #12
 80076e6:	f7fd fa01 	bl	8004aec <memcpy>
 80076ea:	4629      	mov	r1, r5
 80076ec:	9802      	ldr	r0, [sp, #8]
 80076ee:	f000 f94b 	bl	8007988 <_Bfree>
 80076f2:	465d      	mov	r5, fp
 80076f4:	692b      	ldr	r3, [r5, #16]
 80076f6:	1c5a      	adds	r2, r3, #1
 80076f8:	612a      	str	r2, [r5, #16]
 80076fa:	2201      	movs	r2, #1
 80076fc:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8007700:	615a      	str	r2, [r3, #20]
 8007702:	e7c2      	b.n	800768a <__gethex+0x392>
 8007704:	692a      	ldr	r2, [r5, #16]
 8007706:	454a      	cmp	r2, r9
 8007708:	dd0b      	ble.n	8007722 <__gethex+0x42a>
 800770a:	2101      	movs	r1, #1
 800770c:	4628      	mov	r0, r5
 800770e:	f7ff fda3 	bl	8007258 <rshift>
 8007712:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8007716:	3401      	adds	r4, #1
 8007718:	42a3      	cmp	r3, r4
 800771a:	f6ff aed8 	blt.w	80074ce <__gethex+0x1d6>
 800771e:	2701      	movs	r7, #1
 8007720:	e7c7      	b.n	80076b2 <__gethex+0x3ba>
 8007722:	f016 061f 	ands.w	r6, r6, #31
 8007726:	d0fa      	beq.n	800771e <__gethex+0x426>
 8007728:	449a      	add	sl, r3
 800772a:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 800772e:	f000 f9bb 	bl	8007aa8 <__hi0bits>
 8007732:	f1c6 0620 	rsb	r6, r6, #32
 8007736:	42b0      	cmp	r0, r6
 8007738:	dbe7      	blt.n	800770a <__gethex+0x412>
 800773a:	e7f0      	b.n	800771e <__gethex+0x426>

0800773c <L_shift>:
 800773c:	f1c2 0208 	rsb	r2, r2, #8
 8007740:	0092      	lsls	r2, r2, #2
 8007742:	b570      	push	{r4, r5, r6, lr}
 8007744:	f1c2 0620 	rsb	r6, r2, #32
 8007748:	6843      	ldr	r3, [r0, #4]
 800774a:	6804      	ldr	r4, [r0, #0]
 800774c:	fa03 f506 	lsl.w	r5, r3, r6
 8007750:	432c      	orrs	r4, r5
 8007752:	40d3      	lsrs	r3, r2
 8007754:	6004      	str	r4, [r0, #0]
 8007756:	f840 3f04 	str.w	r3, [r0, #4]!
 800775a:	4288      	cmp	r0, r1
 800775c:	d3f4      	bcc.n	8007748 <L_shift+0xc>
 800775e:	bd70      	pop	{r4, r5, r6, pc}

08007760 <__match>:
 8007760:	b530      	push	{r4, r5, lr}
 8007762:	6803      	ldr	r3, [r0, #0]
 8007764:	3301      	adds	r3, #1
 8007766:	f811 4b01 	ldrb.w	r4, [r1], #1
 800776a:	b914      	cbnz	r4, 8007772 <__match+0x12>
 800776c:	6003      	str	r3, [r0, #0]
 800776e:	2001      	movs	r0, #1
 8007770:	bd30      	pop	{r4, r5, pc}
 8007772:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007776:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800777a:	2d19      	cmp	r5, #25
 800777c:	bf98      	it	ls
 800777e:	3220      	addls	r2, #32
 8007780:	42a2      	cmp	r2, r4
 8007782:	d0f0      	beq.n	8007766 <__match+0x6>
 8007784:	2000      	movs	r0, #0
 8007786:	e7f3      	b.n	8007770 <__match+0x10>

08007788 <__hexnan>:
 8007788:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800778c:	2500      	movs	r5, #0
 800778e:	680b      	ldr	r3, [r1, #0]
 8007790:	4682      	mov	sl, r0
 8007792:	115f      	asrs	r7, r3, #5
 8007794:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 8007798:	f013 031f 	ands.w	r3, r3, #31
 800779c:	bf18      	it	ne
 800779e:	3704      	addne	r7, #4
 80077a0:	1f3e      	subs	r6, r7, #4
 80077a2:	4690      	mov	r8, r2
 80077a4:	46b1      	mov	r9, r6
 80077a6:	4634      	mov	r4, r6
 80077a8:	46ab      	mov	fp, r5
 80077aa:	b087      	sub	sp, #28
 80077ac:	6801      	ldr	r1, [r0, #0]
 80077ae:	9301      	str	r3, [sp, #4]
 80077b0:	f847 5c04 	str.w	r5, [r7, #-4]
 80077b4:	9502      	str	r5, [sp, #8]
 80077b6:	784a      	ldrb	r2, [r1, #1]
 80077b8:	1c4b      	adds	r3, r1, #1
 80077ba:	9303      	str	r3, [sp, #12]
 80077bc:	b342      	cbz	r2, 8007810 <__hexnan+0x88>
 80077be:	4610      	mov	r0, r2
 80077c0:	9105      	str	r1, [sp, #20]
 80077c2:	9204      	str	r2, [sp, #16]
 80077c4:	f7ff fd83 	bl	80072ce <__hexdig_fun>
 80077c8:	2800      	cmp	r0, #0
 80077ca:	d143      	bne.n	8007854 <__hexnan+0xcc>
 80077cc:	9a04      	ldr	r2, [sp, #16]
 80077ce:	9905      	ldr	r1, [sp, #20]
 80077d0:	2a20      	cmp	r2, #32
 80077d2:	d818      	bhi.n	8007806 <__hexnan+0x7e>
 80077d4:	9b02      	ldr	r3, [sp, #8]
 80077d6:	459b      	cmp	fp, r3
 80077d8:	dd13      	ble.n	8007802 <__hexnan+0x7a>
 80077da:	454c      	cmp	r4, r9
 80077dc:	d206      	bcs.n	80077ec <__hexnan+0x64>
 80077de:	2d07      	cmp	r5, #7
 80077e0:	dc04      	bgt.n	80077ec <__hexnan+0x64>
 80077e2:	462a      	mov	r2, r5
 80077e4:	4649      	mov	r1, r9
 80077e6:	4620      	mov	r0, r4
 80077e8:	f7ff ffa8 	bl	800773c <L_shift>
 80077ec:	4544      	cmp	r4, r8
 80077ee:	d944      	bls.n	800787a <__hexnan+0xf2>
 80077f0:	2300      	movs	r3, #0
 80077f2:	f1a4 0904 	sub.w	r9, r4, #4
 80077f6:	f844 3c04 	str.w	r3, [r4, #-4]
 80077fa:	461d      	mov	r5, r3
 80077fc:	464c      	mov	r4, r9
 80077fe:	f8cd b008 	str.w	fp, [sp, #8]
 8007802:	9903      	ldr	r1, [sp, #12]
 8007804:	e7d7      	b.n	80077b6 <__hexnan+0x2e>
 8007806:	2a29      	cmp	r2, #41	; 0x29
 8007808:	d14a      	bne.n	80078a0 <__hexnan+0x118>
 800780a:	3102      	adds	r1, #2
 800780c:	f8ca 1000 	str.w	r1, [sl]
 8007810:	f1bb 0f00 	cmp.w	fp, #0
 8007814:	d044      	beq.n	80078a0 <__hexnan+0x118>
 8007816:	454c      	cmp	r4, r9
 8007818:	d206      	bcs.n	8007828 <__hexnan+0xa0>
 800781a:	2d07      	cmp	r5, #7
 800781c:	dc04      	bgt.n	8007828 <__hexnan+0xa0>
 800781e:	462a      	mov	r2, r5
 8007820:	4649      	mov	r1, r9
 8007822:	4620      	mov	r0, r4
 8007824:	f7ff ff8a 	bl	800773c <L_shift>
 8007828:	4544      	cmp	r4, r8
 800782a:	d928      	bls.n	800787e <__hexnan+0xf6>
 800782c:	4643      	mov	r3, r8
 800782e:	f854 2b04 	ldr.w	r2, [r4], #4
 8007832:	42a6      	cmp	r6, r4
 8007834:	f843 2b04 	str.w	r2, [r3], #4
 8007838:	d2f9      	bcs.n	800782e <__hexnan+0xa6>
 800783a:	2200      	movs	r2, #0
 800783c:	f843 2b04 	str.w	r2, [r3], #4
 8007840:	429e      	cmp	r6, r3
 8007842:	d2fb      	bcs.n	800783c <__hexnan+0xb4>
 8007844:	6833      	ldr	r3, [r6, #0]
 8007846:	b91b      	cbnz	r3, 8007850 <__hexnan+0xc8>
 8007848:	4546      	cmp	r6, r8
 800784a:	d127      	bne.n	800789c <__hexnan+0x114>
 800784c:	2301      	movs	r3, #1
 800784e:	6033      	str	r3, [r6, #0]
 8007850:	2005      	movs	r0, #5
 8007852:	e026      	b.n	80078a2 <__hexnan+0x11a>
 8007854:	3501      	adds	r5, #1
 8007856:	2d08      	cmp	r5, #8
 8007858:	f10b 0b01 	add.w	fp, fp, #1
 800785c:	dd06      	ble.n	800786c <__hexnan+0xe4>
 800785e:	4544      	cmp	r4, r8
 8007860:	d9cf      	bls.n	8007802 <__hexnan+0x7a>
 8007862:	2300      	movs	r3, #0
 8007864:	2501      	movs	r5, #1
 8007866:	f844 3c04 	str.w	r3, [r4, #-4]
 800786a:	3c04      	subs	r4, #4
 800786c:	6822      	ldr	r2, [r4, #0]
 800786e:	f000 000f 	and.w	r0, r0, #15
 8007872:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8007876:	6020      	str	r0, [r4, #0]
 8007878:	e7c3      	b.n	8007802 <__hexnan+0x7a>
 800787a:	2508      	movs	r5, #8
 800787c:	e7c1      	b.n	8007802 <__hexnan+0x7a>
 800787e:	9b01      	ldr	r3, [sp, #4]
 8007880:	2b00      	cmp	r3, #0
 8007882:	d0df      	beq.n	8007844 <__hexnan+0xbc>
 8007884:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007888:	f1c3 0320 	rsb	r3, r3, #32
 800788c:	fa22 f303 	lsr.w	r3, r2, r3
 8007890:	f857 2c04 	ldr.w	r2, [r7, #-4]
 8007894:	401a      	ands	r2, r3
 8007896:	f847 2c04 	str.w	r2, [r7, #-4]
 800789a:	e7d3      	b.n	8007844 <__hexnan+0xbc>
 800789c:	3e04      	subs	r6, #4
 800789e:	e7d1      	b.n	8007844 <__hexnan+0xbc>
 80078a0:	2004      	movs	r0, #4
 80078a2:	b007      	add	sp, #28
 80078a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080078a8 <__locale_ctype_ptr_l>:
 80078a8:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 80078ac:	4770      	bx	lr

080078ae <__localeconv_l>:
 80078ae:	30f0      	adds	r0, #240	; 0xf0
 80078b0:	4770      	bx	lr
	...

080078b4 <_localeconv_r>:
 80078b4:	4b04      	ldr	r3, [pc, #16]	; (80078c8 <_localeconv_r+0x14>)
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	6a18      	ldr	r0, [r3, #32]
 80078ba:	4b04      	ldr	r3, [pc, #16]	; (80078cc <_localeconv_r+0x18>)
 80078bc:	2800      	cmp	r0, #0
 80078be:	bf08      	it	eq
 80078c0:	4618      	moveq	r0, r3
 80078c2:	30f0      	adds	r0, #240	; 0xf0
 80078c4:	4770      	bx	lr
 80078c6:	bf00      	nop
 80078c8:	20000018 	.word	0x20000018
 80078cc:	2000007c 	.word	0x2000007c

080078d0 <malloc>:
 80078d0:	4b02      	ldr	r3, [pc, #8]	; (80078dc <malloc+0xc>)
 80078d2:	4601      	mov	r1, r0
 80078d4:	6818      	ldr	r0, [r3, #0]
 80078d6:	f000 bc75 	b.w	80081c4 <_malloc_r>
 80078da:	bf00      	nop
 80078dc:	20000018 	.word	0x20000018

080078e0 <__ascii_mbtowc>:
 80078e0:	b082      	sub	sp, #8
 80078e2:	b901      	cbnz	r1, 80078e6 <__ascii_mbtowc+0x6>
 80078e4:	a901      	add	r1, sp, #4
 80078e6:	b142      	cbz	r2, 80078fa <__ascii_mbtowc+0x1a>
 80078e8:	b14b      	cbz	r3, 80078fe <__ascii_mbtowc+0x1e>
 80078ea:	7813      	ldrb	r3, [r2, #0]
 80078ec:	600b      	str	r3, [r1, #0]
 80078ee:	7812      	ldrb	r2, [r2, #0]
 80078f0:	1c10      	adds	r0, r2, #0
 80078f2:	bf18      	it	ne
 80078f4:	2001      	movne	r0, #1
 80078f6:	b002      	add	sp, #8
 80078f8:	4770      	bx	lr
 80078fa:	4610      	mov	r0, r2
 80078fc:	e7fb      	b.n	80078f6 <__ascii_mbtowc+0x16>
 80078fe:	f06f 0001 	mvn.w	r0, #1
 8007902:	e7f8      	b.n	80078f6 <__ascii_mbtowc+0x16>

08007904 <memchr>:
 8007904:	b510      	push	{r4, lr}
 8007906:	b2c9      	uxtb	r1, r1
 8007908:	4402      	add	r2, r0
 800790a:	4290      	cmp	r0, r2
 800790c:	4603      	mov	r3, r0
 800790e:	d101      	bne.n	8007914 <memchr+0x10>
 8007910:	2300      	movs	r3, #0
 8007912:	e003      	b.n	800791c <memchr+0x18>
 8007914:	781c      	ldrb	r4, [r3, #0]
 8007916:	3001      	adds	r0, #1
 8007918:	428c      	cmp	r4, r1
 800791a:	d1f6      	bne.n	800790a <memchr+0x6>
 800791c:	4618      	mov	r0, r3
 800791e:	bd10      	pop	{r4, pc}

08007920 <_Balloc>:
 8007920:	b570      	push	{r4, r5, r6, lr}
 8007922:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8007924:	4604      	mov	r4, r0
 8007926:	460e      	mov	r6, r1
 8007928:	b93d      	cbnz	r5, 800793a <_Balloc+0x1a>
 800792a:	2010      	movs	r0, #16
 800792c:	f7ff ffd0 	bl	80078d0 <malloc>
 8007930:	6260      	str	r0, [r4, #36]	; 0x24
 8007932:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8007936:	6005      	str	r5, [r0, #0]
 8007938:	60c5      	str	r5, [r0, #12]
 800793a:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800793c:	68eb      	ldr	r3, [r5, #12]
 800793e:	b183      	cbz	r3, 8007962 <_Balloc+0x42>
 8007940:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007942:	68db      	ldr	r3, [r3, #12]
 8007944:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8007948:	b9b8      	cbnz	r0, 800797a <_Balloc+0x5a>
 800794a:	2101      	movs	r1, #1
 800794c:	fa01 f506 	lsl.w	r5, r1, r6
 8007950:	1d6a      	adds	r2, r5, #5
 8007952:	0092      	lsls	r2, r2, #2
 8007954:	4620      	mov	r0, r4
 8007956:	f000 fbdb 	bl	8008110 <_calloc_r>
 800795a:	b160      	cbz	r0, 8007976 <_Balloc+0x56>
 800795c:	e9c0 6501 	strd	r6, r5, [r0, #4]
 8007960:	e00e      	b.n	8007980 <_Balloc+0x60>
 8007962:	2221      	movs	r2, #33	; 0x21
 8007964:	2104      	movs	r1, #4
 8007966:	4620      	mov	r0, r4
 8007968:	f000 fbd2 	bl	8008110 <_calloc_r>
 800796c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800796e:	60e8      	str	r0, [r5, #12]
 8007970:	68db      	ldr	r3, [r3, #12]
 8007972:	2b00      	cmp	r3, #0
 8007974:	d1e4      	bne.n	8007940 <_Balloc+0x20>
 8007976:	2000      	movs	r0, #0
 8007978:	bd70      	pop	{r4, r5, r6, pc}
 800797a:	6802      	ldr	r2, [r0, #0]
 800797c:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8007980:	2300      	movs	r3, #0
 8007982:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007986:	e7f7      	b.n	8007978 <_Balloc+0x58>

08007988 <_Bfree>:
 8007988:	b570      	push	{r4, r5, r6, lr}
 800798a:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800798c:	4606      	mov	r6, r0
 800798e:	460d      	mov	r5, r1
 8007990:	b93c      	cbnz	r4, 80079a2 <_Bfree+0x1a>
 8007992:	2010      	movs	r0, #16
 8007994:	f7ff ff9c 	bl	80078d0 <malloc>
 8007998:	6270      	str	r0, [r6, #36]	; 0x24
 800799a:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800799e:	6004      	str	r4, [r0, #0]
 80079a0:	60c4      	str	r4, [r0, #12]
 80079a2:	b13d      	cbz	r5, 80079b4 <_Bfree+0x2c>
 80079a4:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80079a6:	686a      	ldr	r2, [r5, #4]
 80079a8:	68db      	ldr	r3, [r3, #12]
 80079aa:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80079ae:	6029      	str	r1, [r5, #0]
 80079b0:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 80079b4:	bd70      	pop	{r4, r5, r6, pc}

080079b6 <__multadd>:
 80079b6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80079ba:	461f      	mov	r7, r3
 80079bc:	4606      	mov	r6, r0
 80079be:	460c      	mov	r4, r1
 80079c0:	2300      	movs	r3, #0
 80079c2:	690d      	ldr	r5, [r1, #16]
 80079c4:	f101 0c14 	add.w	ip, r1, #20
 80079c8:	f8dc 0000 	ldr.w	r0, [ip]
 80079cc:	3301      	adds	r3, #1
 80079ce:	b281      	uxth	r1, r0
 80079d0:	fb02 7101 	mla	r1, r2, r1, r7
 80079d4:	0c00      	lsrs	r0, r0, #16
 80079d6:	0c0f      	lsrs	r7, r1, #16
 80079d8:	fb02 7000 	mla	r0, r2, r0, r7
 80079dc:	b289      	uxth	r1, r1
 80079de:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 80079e2:	429d      	cmp	r5, r3
 80079e4:	ea4f 4710 	mov.w	r7, r0, lsr #16
 80079e8:	f84c 1b04 	str.w	r1, [ip], #4
 80079ec:	dcec      	bgt.n	80079c8 <__multadd+0x12>
 80079ee:	b1d7      	cbz	r7, 8007a26 <__multadd+0x70>
 80079f0:	68a3      	ldr	r3, [r4, #8]
 80079f2:	42ab      	cmp	r3, r5
 80079f4:	dc12      	bgt.n	8007a1c <__multadd+0x66>
 80079f6:	6861      	ldr	r1, [r4, #4]
 80079f8:	4630      	mov	r0, r6
 80079fa:	3101      	adds	r1, #1
 80079fc:	f7ff ff90 	bl	8007920 <_Balloc>
 8007a00:	4680      	mov	r8, r0
 8007a02:	6922      	ldr	r2, [r4, #16]
 8007a04:	f104 010c 	add.w	r1, r4, #12
 8007a08:	3202      	adds	r2, #2
 8007a0a:	0092      	lsls	r2, r2, #2
 8007a0c:	300c      	adds	r0, #12
 8007a0e:	f7fd f86d 	bl	8004aec <memcpy>
 8007a12:	4621      	mov	r1, r4
 8007a14:	4630      	mov	r0, r6
 8007a16:	f7ff ffb7 	bl	8007988 <_Bfree>
 8007a1a:	4644      	mov	r4, r8
 8007a1c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007a20:	3501      	adds	r5, #1
 8007a22:	615f      	str	r7, [r3, #20]
 8007a24:	6125      	str	r5, [r4, #16]
 8007a26:	4620      	mov	r0, r4
 8007a28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08007a2c <__s2b>:
 8007a2c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007a30:	4615      	mov	r5, r2
 8007a32:	2209      	movs	r2, #9
 8007a34:	461f      	mov	r7, r3
 8007a36:	3308      	adds	r3, #8
 8007a38:	460c      	mov	r4, r1
 8007a3a:	fb93 f3f2 	sdiv	r3, r3, r2
 8007a3e:	4606      	mov	r6, r0
 8007a40:	2201      	movs	r2, #1
 8007a42:	2100      	movs	r1, #0
 8007a44:	429a      	cmp	r2, r3
 8007a46:	db20      	blt.n	8007a8a <__s2b+0x5e>
 8007a48:	4630      	mov	r0, r6
 8007a4a:	f7ff ff69 	bl	8007920 <_Balloc>
 8007a4e:	9b08      	ldr	r3, [sp, #32]
 8007a50:	2d09      	cmp	r5, #9
 8007a52:	6143      	str	r3, [r0, #20]
 8007a54:	f04f 0301 	mov.w	r3, #1
 8007a58:	6103      	str	r3, [r0, #16]
 8007a5a:	dd19      	ble.n	8007a90 <__s2b+0x64>
 8007a5c:	f104 0809 	add.w	r8, r4, #9
 8007a60:	46c1      	mov	r9, r8
 8007a62:	442c      	add	r4, r5
 8007a64:	f819 3b01 	ldrb.w	r3, [r9], #1
 8007a68:	4601      	mov	r1, r0
 8007a6a:	3b30      	subs	r3, #48	; 0x30
 8007a6c:	220a      	movs	r2, #10
 8007a6e:	4630      	mov	r0, r6
 8007a70:	f7ff ffa1 	bl	80079b6 <__multadd>
 8007a74:	45a1      	cmp	r9, r4
 8007a76:	d1f5      	bne.n	8007a64 <__s2b+0x38>
 8007a78:	eb08 0405 	add.w	r4, r8, r5
 8007a7c:	3c08      	subs	r4, #8
 8007a7e:	1b2d      	subs	r5, r5, r4
 8007a80:	1963      	adds	r3, r4, r5
 8007a82:	42bb      	cmp	r3, r7
 8007a84:	db07      	blt.n	8007a96 <__s2b+0x6a>
 8007a86:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007a8a:	0052      	lsls	r2, r2, #1
 8007a8c:	3101      	adds	r1, #1
 8007a8e:	e7d9      	b.n	8007a44 <__s2b+0x18>
 8007a90:	340a      	adds	r4, #10
 8007a92:	2509      	movs	r5, #9
 8007a94:	e7f3      	b.n	8007a7e <__s2b+0x52>
 8007a96:	f814 3b01 	ldrb.w	r3, [r4], #1
 8007a9a:	4601      	mov	r1, r0
 8007a9c:	3b30      	subs	r3, #48	; 0x30
 8007a9e:	220a      	movs	r2, #10
 8007aa0:	4630      	mov	r0, r6
 8007aa2:	f7ff ff88 	bl	80079b6 <__multadd>
 8007aa6:	e7eb      	b.n	8007a80 <__s2b+0x54>

08007aa8 <__hi0bits>:
 8007aa8:	0c02      	lsrs	r2, r0, #16
 8007aaa:	0412      	lsls	r2, r2, #16
 8007aac:	4603      	mov	r3, r0
 8007aae:	b9b2      	cbnz	r2, 8007ade <__hi0bits+0x36>
 8007ab0:	0403      	lsls	r3, r0, #16
 8007ab2:	2010      	movs	r0, #16
 8007ab4:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8007ab8:	bf04      	itt	eq
 8007aba:	021b      	lsleq	r3, r3, #8
 8007abc:	3008      	addeq	r0, #8
 8007abe:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8007ac2:	bf04      	itt	eq
 8007ac4:	011b      	lsleq	r3, r3, #4
 8007ac6:	3004      	addeq	r0, #4
 8007ac8:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8007acc:	bf04      	itt	eq
 8007ace:	009b      	lsleq	r3, r3, #2
 8007ad0:	3002      	addeq	r0, #2
 8007ad2:	2b00      	cmp	r3, #0
 8007ad4:	db06      	blt.n	8007ae4 <__hi0bits+0x3c>
 8007ad6:	005b      	lsls	r3, r3, #1
 8007ad8:	d503      	bpl.n	8007ae2 <__hi0bits+0x3a>
 8007ada:	3001      	adds	r0, #1
 8007adc:	4770      	bx	lr
 8007ade:	2000      	movs	r0, #0
 8007ae0:	e7e8      	b.n	8007ab4 <__hi0bits+0xc>
 8007ae2:	2020      	movs	r0, #32
 8007ae4:	4770      	bx	lr

08007ae6 <__lo0bits>:
 8007ae6:	6803      	ldr	r3, [r0, #0]
 8007ae8:	4601      	mov	r1, r0
 8007aea:	f013 0207 	ands.w	r2, r3, #7
 8007aee:	d00b      	beq.n	8007b08 <__lo0bits+0x22>
 8007af0:	07da      	lsls	r2, r3, #31
 8007af2:	d423      	bmi.n	8007b3c <__lo0bits+0x56>
 8007af4:	0798      	lsls	r0, r3, #30
 8007af6:	bf49      	itett	mi
 8007af8:	085b      	lsrmi	r3, r3, #1
 8007afa:	089b      	lsrpl	r3, r3, #2
 8007afc:	2001      	movmi	r0, #1
 8007afe:	600b      	strmi	r3, [r1, #0]
 8007b00:	bf5c      	itt	pl
 8007b02:	600b      	strpl	r3, [r1, #0]
 8007b04:	2002      	movpl	r0, #2
 8007b06:	4770      	bx	lr
 8007b08:	b298      	uxth	r0, r3
 8007b0a:	b9a8      	cbnz	r0, 8007b38 <__lo0bits+0x52>
 8007b0c:	2010      	movs	r0, #16
 8007b0e:	0c1b      	lsrs	r3, r3, #16
 8007b10:	f013 0fff 	tst.w	r3, #255	; 0xff
 8007b14:	bf04      	itt	eq
 8007b16:	0a1b      	lsreq	r3, r3, #8
 8007b18:	3008      	addeq	r0, #8
 8007b1a:	071a      	lsls	r2, r3, #28
 8007b1c:	bf04      	itt	eq
 8007b1e:	091b      	lsreq	r3, r3, #4
 8007b20:	3004      	addeq	r0, #4
 8007b22:	079a      	lsls	r2, r3, #30
 8007b24:	bf04      	itt	eq
 8007b26:	089b      	lsreq	r3, r3, #2
 8007b28:	3002      	addeq	r0, #2
 8007b2a:	07da      	lsls	r2, r3, #31
 8007b2c:	d402      	bmi.n	8007b34 <__lo0bits+0x4e>
 8007b2e:	085b      	lsrs	r3, r3, #1
 8007b30:	d006      	beq.n	8007b40 <__lo0bits+0x5a>
 8007b32:	3001      	adds	r0, #1
 8007b34:	600b      	str	r3, [r1, #0]
 8007b36:	4770      	bx	lr
 8007b38:	4610      	mov	r0, r2
 8007b3a:	e7e9      	b.n	8007b10 <__lo0bits+0x2a>
 8007b3c:	2000      	movs	r0, #0
 8007b3e:	4770      	bx	lr
 8007b40:	2020      	movs	r0, #32
 8007b42:	4770      	bx	lr

08007b44 <__i2b>:
 8007b44:	b510      	push	{r4, lr}
 8007b46:	460c      	mov	r4, r1
 8007b48:	2101      	movs	r1, #1
 8007b4a:	f7ff fee9 	bl	8007920 <_Balloc>
 8007b4e:	2201      	movs	r2, #1
 8007b50:	6144      	str	r4, [r0, #20]
 8007b52:	6102      	str	r2, [r0, #16]
 8007b54:	bd10      	pop	{r4, pc}

08007b56 <__multiply>:
 8007b56:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b5a:	4614      	mov	r4, r2
 8007b5c:	690a      	ldr	r2, [r1, #16]
 8007b5e:	6923      	ldr	r3, [r4, #16]
 8007b60:	4688      	mov	r8, r1
 8007b62:	429a      	cmp	r2, r3
 8007b64:	bfbe      	ittt	lt
 8007b66:	460b      	movlt	r3, r1
 8007b68:	46a0      	movlt	r8, r4
 8007b6a:	461c      	movlt	r4, r3
 8007b6c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8007b70:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8007b74:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8007b78:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8007b7c:	eb07 0609 	add.w	r6, r7, r9
 8007b80:	42b3      	cmp	r3, r6
 8007b82:	bfb8      	it	lt
 8007b84:	3101      	addlt	r1, #1
 8007b86:	f7ff fecb 	bl	8007920 <_Balloc>
 8007b8a:	f100 0514 	add.w	r5, r0, #20
 8007b8e:	462b      	mov	r3, r5
 8007b90:	2200      	movs	r2, #0
 8007b92:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8007b96:	4573      	cmp	r3, lr
 8007b98:	d316      	bcc.n	8007bc8 <__multiply+0x72>
 8007b9a:	f104 0214 	add.w	r2, r4, #20
 8007b9e:	f108 0114 	add.w	r1, r8, #20
 8007ba2:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8007ba6:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8007baa:	9300      	str	r3, [sp, #0]
 8007bac:	9b00      	ldr	r3, [sp, #0]
 8007bae:	9201      	str	r2, [sp, #4]
 8007bb0:	4293      	cmp	r3, r2
 8007bb2:	d80c      	bhi.n	8007bce <__multiply+0x78>
 8007bb4:	2e00      	cmp	r6, #0
 8007bb6:	dd03      	ble.n	8007bc0 <__multiply+0x6a>
 8007bb8:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8007bbc:	2b00      	cmp	r3, #0
 8007bbe:	d05d      	beq.n	8007c7c <__multiply+0x126>
 8007bc0:	6106      	str	r6, [r0, #16]
 8007bc2:	b003      	add	sp, #12
 8007bc4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007bc8:	f843 2b04 	str.w	r2, [r3], #4
 8007bcc:	e7e3      	b.n	8007b96 <__multiply+0x40>
 8007bce:	f8b2 b000 	ldrh.w	fp, [r2]
 8007bd2:	f1bb 0f00 	cmp.w	fp, #0
 8007bd6:	d023      	beq.n	8007c20 <__multiply+0xca>
 8007bd8:	4689      	mov	r9, r1
 8007bda:	46ac      	mov	ip, r5
 8007bdc:	f04f 0800 	mov.w	r8, #0
 8007be0:	f859 4b04 	ldr.w	r4, [r9], #4
 8007be4:	f8dc a000 	ldr.w	sl, [ip]
 8007be8:	b2a3      	uxth	r3, r4
 8007bea:	fa1f fa8a 	uxth.w	sl, sl
 8007bee:	fb0b a303 	mla	r3, fp, r3, sl
 8007bf2:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8007bf6:	f8dc 4000 	ldr.w	r4, [ip]
 8007bfa:	4443      	add	r3, r8
 8007bfc:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8007c00:	fb0b 840a 	mla	r4, fp, sl, r8
 8007c04:	46e2      	mov	sl, ip
 8007c06:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8007c0a:	b29b      	uxth	r3, r3
 8007c0c:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8007c10:	454f      	cmp	r7, r9
 8007c12:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8007c16:	f84a 3b04 	str.w	r3, [sl], #4
 8007c1a:	d82b      	bhi.n	8007c74 <__multiply+0x11e>
 8007c1c:	f8cc 8004 	str.w	r8, [ip, #4]
 8007c20:	9b01      	ldr	r3, [sp, #4]
 8007c22:	3204      	adds	r2, #4
 8007c24:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8007c28:	f1ba 0f00 	cmp.w	sl, #0
 8007c2c:	d020      	beq.n	8007c70 <__multiply+0x11a>
 8007c2e:	4689      	mov	r9, r1
 8007c30:	46a8      	mov	r8, r5
 8007c32:	f04f 0b00 	mov.w	fp, #0
 8007c36:	682b      	ldr	r3, [r5, #0]
 8007c38:	f8b9 c000 	ldrh.w	ip, [r9]
 8007c3c:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8007c40:	b29b      	uxth	r3, r3
 8007c42:	fb0a 440c 	mla	r4, sl, ip, r4
 8007c46:	46c4      	mov	ip, r8
 8007c48:	445c      	add	r4, fp
 8007c4a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8007c4e:	f84c 3b04 	str.w	r3, [ip], #4
 8007c52:	f859 3b04 	ldr.w	r3, [r9], #4
 8007c56:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8007c5a:	0c1b      	lsrs	r3, r3, #16
 8007c5c:	fb0a b303 	mla	r3, sl, r3, fp
 8007c60:	454f      	cmp	r7, r9
 8007c62:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8007c66:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8007c6a:	d805      	bhi.n	8007c78 <__multiply+0x122>
 8007c6c:	f8c8 3004 	str.w	r3, [r8, #4]
 8007c70:	3504      	adds	r5, #4
 8007c72:	e79b      	b.n	8007bac <__multiply+0x56>
 8007c74:	46d4      	mov	ip, sl
 8007c76:	e7b3      	b.n	8007be0 <__multiply+0x8a>
 8007c78:	46e0      	mov	r8, ip
 8007c7a:	e7dd      	b.n	8007c38 <__multiply+0xe2>
 8007c7c:	3e01      	subs	r6, #1
 8007c7e:	e799      	b.n	8007bb4 <__multiply+0x5e>

08007c80 <__pow5mult>:
 8007c80:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007c84:	4615      	mov	r5, r2
 8007c86:	f012 0203 	ands.w	r2, r2, #3
 8007c8a:	4606      	mov	r6, r0
 8007c8c:	460f      	mov	r7, r1
 8007c8e:	d007      	beq.n	8007ca0 <__pow5mult+0x20>
 8007c90:	4c21      	ldr	r4, [pc, #132]	; (8007d18 <__pow5mult+0x98>)
 8007c92:	3a01      	subs	r2, #1
 8007c94:	2300      	movs	r3, #0
 8007c96:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007c9a:	f7ff fe8c 	bl	80079b6 <__multadd>
 8007c9e:	4607      	mov	r7, r0
 8007ca0:	10ad      	asrs	r5, r5, #2
 8007ca2:	d035      	beq.n	8007d10 <__pow5mult+0x90>
 8007ca4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8007ca6:	b93c      	cbnz	r4, 8007cb8 <__pow5mult+0x38>
 8007ca8:	2010      	movs	r0, #16
 8007caa:	f7ff fe11 	bl	80078d0 <malloc>
 8007cae:	6270      	str	r0, [r6, #36]	; 0x24
 8007cb0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007cb4:	6004      	str	r4, [r0, #0]
 8007cb6:	60c4      	str	r4, [r0, #12]
 8007cb8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8007cbc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007cc0:	b94c      	cbnz	r4, 8007cd6 <__pow5mult+0x56>
 8007cc2:	f240 2171 	movw	r1, #625	; 0x271
 8007cc6:	4630      	mov	r0, r6
 8007cc8:	f7ff ff3c 	bl	8007b44 <__i2b>
 8007ccc:	2300      	movs	r3, #0
 8007cce:	4604      	mov	r4, r0
 8007cd0:	f8c8 0008 	str.w	r0, [r8, #8]
 8007cd4:	6003      	str	r3, [r0, #0]
 8007cd6:	f04f 0800 	mov.w	r8, #0
 8007cda:	07eb      	lsls	r3, r5, #31
 8007cdc:	d50a      	bpl.n	8007cf4 <__pow5mult+0x74>
 8007cde:	4639      	mov	r1, r7
 8007ce0:	4622      	mov	r2, r4
 8007ce2:	4630      	mov	r0, r6
 8007ce4:	f7ff ff37 	bl	8007b56 <__multiply>
 8007ce8:	4681      	mov	r9, r0
 8007cea:	4639      	mov	r1, r7
 8007cec:	4630      	mov	r0, r6
 8007cee:	f7ff fe4b 	bl	8007988 <_Bfree>
 8007cf2:	464f      	mov	r7, r9
 8007cf4:	106d      	asrs	r5, r5, #1
 8007cf6:	d00b      	beq.n	8007d10 <__pow5mult+0x90>
 8007cf8:	6820      	ldr	r0, [r4, #0]
 8007cfa:	b938      	cbnz	r0, 8007d0c <__pow5mult+0x8c>
 8007cfc:	4622      	mov	r2, r4
 8007cfe:	4621      	mov	r1, r4
 8007d00:	4630      	mov	r0, r6
 8007d02:	f7ff ff28 	bl	8007b56 <__multiply>
 8007d06:	6020      	str	r0, [r4, #0]
 8007d08:	f8c0 8000 	str.w	r8, [r0]
 8007d0c:	4604      	mov	r4, r0
 8007d0e:	e7e4      	b.n	8007cda <__pow5mult+0x5a>
 8007d10:	4638      	mov	r0, r7
 8007d12:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007d16:	bf00      	nop
 8007d18:	08008e80 	.word	0x08008e80

08007d1c <__lshift>:
 8007d1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007d20:	460c      	mov	r4, r1
 8007d22:	4607      	mov	r7, r0
 8007d24:	4616      	mov	r6, r2
 8007d26:	6923      	ldr	r3, [r4, #16]
 8007d28:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007d2c:	eb0a 0903 	add.w	r9, sl, r3
 8007d30:	6849      	ldr	r1, [r1, #4]
 8007d32:	68a3      	ldr	r3, [r4, #8]
 8007d34:	f109 0501 	add.w	r5, r9, #1
 8007d38:	42ab      	cmp	r3, r5
 8007d3a:	db32      	blt.n	8007da2 <__lshift+0x86>
 8007d3c:	4638      	mov	r0, r7
 8007d3e:	f7ff fdef 	bl	8007920 <_Balloc>
 8007d42:	2300      	movs	r3, #0
 8007d44:	4680      	mov	r8, r0
 8007d46:	461a      	mov	r2, r3
 8007d48:	f100 0114 	add.w	r1, r0, #20
 8007d4c:	4553      	cmp	r3, sl
 8007d4e:	db2b      	blt.n	8007da8 <__lshift+0x8c>
 8007d50:	6920      	ldr	r0, [r4, #16]
 8007d52:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007d56:	f104 0314 	add.w	r3, r4, #20
 8007d5a:	f016 021f 	ands.w	r2, r6, #31
 8007d5e:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007d62:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8007d66:	d025      	beq.n	8007db4 <__lshift+0x98>
 8007d68:	2000      	movs	r0, #0
 8007d6a:	f1c2 0e20 	rsb	lr, r2, #32
 8007d6e:	468a      	mov	sl, r1
 8007d70:	681e      	ldr	r6, [r3, #0]
 8007d72:	4096      	lsls	r6, r2
 8007d74:	4330      	orrs	r0, r6
 8007d76:	f84a 0b04 	str.w	r0, [sl], #4
 8007d7a:	f853 0b04 	ldr.w	r0, [r3], #4
 8007d7e:	459c      	cmp	ip, r3
 8007d80:	fa20 f00e 	lsr.w	r0, r0, lr
 8007d84:	d814      	bhi.n	8007db0 <__lshift+0x94>
 8007d86:	6048      	str	r0, [r1, #4]
 8007d88:	b108      	cbz	r0, 8007d8e <__lshift+0x72>
 8007d8a:	f109 0502 	add.w	r5, r9, #2
 8007d8e:	3d01      	subs	r5, #1
 8007d90:	4638      	mov	r0, r7
 8007d92:	f8c8 5010 	str.w	r5, [r8, #16]
 8007d96:	4621      	mov	r1, r4
 8007d98:	f7ff fdf6 	bl	8007988 <_Bfree>
 8007d9c:	4640      	mov	r0, r8
 8007d9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007da2:	3101      	adds	r1, #1
 8007da4:	005b      	lsls	r3, r3, #1
 8007da6:	e7c7      	b.n	8007d38 <__lshift+0x1c>
 8007da8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8007dac:	3301      	adds	r3, #1
 8007dae:	e7cd      	b.n	8007d4c <__lshift+0x30>
 8007db0:	4651      	mov	r1, sl
 8007db2:	e7dc      	b.n	8007d6e <__lshift+0x52>
 8007db4:	3904      	subs	r1, #4
 8007db6:	f853 2b04 	ldr.w	r2, [r3], #4
 8007dba:	459c      	cmp	ip, r3
 8007dbc:	f841 2f04 	str.w	r2, [r1, #4]!
 8007dc0:	d8f9      	bhi.n	8007db6 <__lshift+0x9a>
 8007dc2:	e7e4      	b.n	8007d8e <__lshift+0x72>

08007dc4 <__mcmp>:
 8007dc4:	6903      	ldr	r3, [r0, #16]
 8007dc6:	690a      	ldr	r2, [r1, #16]
 8007dc8:	b530      	push	{r4, r5, lr}
 8007dca:	1a9b      	subs	r3, r3, r2
 8007dcc:	d10c      	bne.n	8007de8 <__mcmp+0x24>
 8007dce:	0092      	lsls	r2, r2, #2
 8007dd0:	3014      	adds	r0, #20
 8007dd2:	3114      	adds	r1, #20
 8007dd4:	1884      	adds	r4, r0, r2
 8007dd6:	4411      	add	r1, r2
 8007dd8:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8007ddc:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8007de0:	4295      	cmp	r5, r2
 8007de2:	d003      	beq.n	8007dec <__mcmp+0x28>
 8007de4:	d305      	bcc.n	8007df2 <__mcmp+0x2e>
 8007de6:	2301      	movs	r3, #1
 8007de8:	4618      	mov	r0, r3
 8007dea:	bd30      	pop	{r4, r5, pc}
 8007dec:	42a0      	cmp	r0, r4
 8007dee:	d3f3      	bcc.n	8007dd8 <__mcmp+0x14>
 8007df0:	e7fa      	b.n	8007de8 <__mcmp+0x24>
 8007df2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007df6:	e7f7      	b.n	8007de8 <__mcmp+0x24>

08007df8 <__mdiff>:
 8007df8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007dfc:	460d      	mov	r5, r1
 8007dfe:	4607      	mov	r7, r0
 8007e00:	4611      	mov	r1, r2
 8007e02:	4628      	mov	r0, r5
 8007e04:	4614      	mov	r4, r2
 8007e06:	f7ff ffdd 	bl	8007dc4 <__mcmp>
 8007e0a:	1e06      	subs	r6, r0, #0
 8007e0c:	d108      	bne.n	8007e20 <__mdiff+0x28>
 8007e0e:	4631      	mov	r1, r6
 8007e10:	4638      	mov	r0, r7
 8007e12:	f7ff fd85 	bl	8007920 <_Balloc>
 8007e16:	2301      	movs	r3, #1
 8007e18:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8007e1c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007e20:	bfa4      	itt	ge
 8007e22:	4623      	movge	r3, r4
 8007e24:	462c      	movge	r4, r5
 8007e26:	4638      	mov	r0, r7
 8007e28:	6861      	ldr	r1, [r4, #4]
 8007e2a:	bfa6      	itte	ge
 8007e2c:	461d      	movge	r5, r3
 8007e2e:	2600      	movge	r6, #0
 8007e30:	2601      	movlt	r6, #1
 8007e32:	f7ff fd75 	bl	8007920 <_Balloc>
 8007e36:	f04f 0e00 	mov.w	lr, #0
 8007e3a:	60c6      	str	r6, [r0, #12]
 8007e3c:	692b      	ldr	r3, [r5, #16]
 8007e3e:	6926      	ldr	r6, [r4, #16]
 8007e40:	f104 0214 	add.w	r2, r4, #20
 8007e44:	f105 0914 	add.w	r9, r5, #20
 8007e48:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8007e4c:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8007e50:	f100 0114 	add.w	r1, r0, #20
 8007e54:	f852 ab04 	ldr.w	sl, [r2], #4
 8007e58:	f859 5b04 	ldr.w	r5, [r9], #4
 8007e5c:	fa1f f38a 	uxth.w	r3, sl
 8007e60:	4473      	add	r3, lr
 8007e62:	b2ac      	uxth	r4, r5
 8007e64:	1b1b      	subs	r3, r3, r4
 8007e66:	0c2c      	lsrs	r4, r5, #16
 8007e68:	ebc4 441a 	rsb	r4, r4, sl, lsr #16
 8007e6c:	eb04 4423 	add.w	r4, r4, r3, asr #16
 8007e70:	b29b      	uxth	r3, r3
 8007e72:	ea4f 4e24 	mov.w	lr, r4, asr #16
 8007e76:	45c8      	cmp	r8, r9
 8007e78:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8007e7c:	4694      	mov	ip, r2
 8007e7e:	f841 4b04 	str.w	r4, [r1], #4
 8007e82:	d8e7      	bhi.n	8007e54 <__mdiff+0x5c>
 8007e84:	45bc      	cmp	ip, r7
 8007e86:	d304      	bcc.n	8007e92 <__mdiff+0x9a>
 8007e88:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8007e8c:	b183      	cbz	r3, 8007eb0 <__mdiff+0xb8>
 8007e8e:	6106      	str	r6, [r0, #16]
 8007e90:	e7c4      	b.n	8007e1c <__mdiff+0x24>
 8007e92:	f85c 4b04 	ldr.w	r4, [ip], #4
 8007e96:	b2a2      	uxth	r2, r4
 8007e98:	4472      	add	r2, lr
 8007e9a:	1413      	asrs	r3, r2, #16
 8007e9c:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8007ea0:	b292      	uxth	r2, r2
 8007ea2:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8007ea6:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8007eaa:	f841 2b04 	str.w	r2, [r1], #4
 8007eae:	e7e9      	b.n	8007e84 <__mdiff+0x8c>
 8007eb0:	3e01      	subs	r6, #1
 8007eb2:	e7e9      	b.n	8007e88 <__mdiff+0x90>

08007eb4 <__ulp>:
 8007eb4:	4b10      	ldr	r3, [pc, #64]	; (8007ef8 <__ulp+0x44>)
 8007eb6:	400b      	ands	r3, r1
 8007eb8:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 8007ebc:	2b00      	cmp	r3, #0
 8007ebe:	dd02      	ble.n	8007ec6 <__ulp+0x12>
 8007ec0:	2000      	movs	r0, #0
 8007ec2:	4619      	mov	r1, r3
 8007ec4:	4770      	bx	lr
 8007ec6:	425b      	negs	r3, r3
 8007ec8:	151b      	asrs	r3, r3, #20
 8007eca:	2b13      	cmp	r3, #19
 8007ecc:	f04f 0000 	mov.w	r0, #0
 8007ed0:	f04f 0100 	mov.w	r1, #0
 8007ed4:	dc04      	bgt.n	8007ee0 <__ulp+0x2c>
 8007ed6:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8007eda:	fa42 f103 	asr.w	r1, r2, r3
 8007ede:	4770      	bx	lr
 8007ee0:	2201      	movs	r2, #1
 8007ee2:	3b14      	subs	r3, #20
 8007ee4:	2b1e      	cmp	r3, #30
 8007ee6:	bfce      	itee	gt
 8007ee8:	4613      	movgt	r3, r2
 8007eea:	f1c3 031f 	rsble	r3, r3, #31
 8007eee:	fa02 f303 	lslle.w	r3, r2, r3
 8007ef2:	4618      	mov	r0, r3
 8007ef4:	4770      	bx	lr
 8007ef6:	bf00      	nop
 8007ef8:	7ff00000 	.word	0x7ff00000

08007efc <__b2d>:
 8007efc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007f00:	6907      	ldr	r7, [r0, #16]
 8007f02:	f100 0914 	add.w	r9, r0, #20
 8007f06:	eb09 0787 	add.w	r7, r9, r7, lsl #2
 8007f0a:	f857 6c04 	ldr.w	r6, [r7, #-4]
 8007f0e:	f1a7 0804 	sub.w	r8, r7, #4
 8007f12:	4630      	mov	r0, r6
 8007f14:	f7ff fdc8 	bl	8007aa8 <__hi0bits>
 8007f18:	f1c0 0320 	rsb	r3, r0, #32
 8007f1c:	280a      	cmp	r0, #10
 8007f1e:	600b      	str	r3, [r1, #0]
 8007f20:	491e      	ldr	r1, [pc, #120]	; (8007f9c <__b2d+0xa0>)
 8007f22:	dc17      	bgt.n	8007f54 <__b2d+0x58>
 8007f24:	45c1      	cmp	r9, r8
 8007f26:	bf28      	it	cs
 8007f28:	2200      	movcs	r2, #0
 8007f2a:	f1c0 0c0b 	rsb	ip, r0, #11
 8007f2e:	fa26 f30c 	lsr.w	r3, r6, ip
 8007f32:	bf38      	it	cc
 8007f34:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 8007f38:	ea43 0501 	orr.w	r5, r3, r1
 8007f3c:	f100 0315 	add.w	r3, r0, #21
 8007f40:	fa06 f303 	lsl.w	r3, r6, r3
 8007f44:	fa22 f20c 	lsr.w	r2, r2, ip
 8007f48:	ea43 0402 	orr.w	r4, r3, r2
 8007f4c:	4620      	mov	r0, r4
 8007f4e:	4629      	mov	r1, r5
 8007f50:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007f54:	45c1      	cmp	r9, r8
 8007f56:	bf3a      	itte	cc
 8007f58:	f1a7 0808 	subcc.w	r8, r7, #8
 8007f5c:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 8007f60:	2200      	movcs	r2, #0
 8007f62:	f1b0 030b 	subs.w	r3, r0, #11
 8007f66:	d015      	beq.n	8007f94 <__b2d+0x98>
 8007f68:	409e      	lsls	r6, r3
 8007f6a:	f1c3 0720 	rsb	r7, r3, #32
 8007f6e:	f046 567f 	orr.w	r6, r6, #1069547520	; 0x3fc00000
 8007f72:	fa22 f107 	lsr.w	r1, r2, r7
 8007f76:	45c8      	cmp	r8, r9
 8007f78:	f446 1640 	orr.w	r6, r6, #3145728	; 0x300000
 8007f7c:	ea46 0501 	orr.w	r5, r6, r1
 8007f80:	bf94      	ite	ls
 8007f82:	2100      	movls	r1, #0
 8007f84:	f858 1c04 	ldrhi.w	r1, [r8, #-4]
 8007f88:	fa02 f003 	lsl.w	r0, r2, r3
 8007f8c:	40f9      	lsrs	r1, r7
 8007f8e:	ea40 0401 	orr.w	r4, r0, r1
 8007f92:	e7db      	b.n	8007f4c <__b2d+0x50>
 8007f94:	ea46 0501 	orr.w	r5, r6, r1
 8007f98:	4614      	mov	r4, r2
 8007f9a:	e7d7      	b.n	8007f4c <__b2d+0x50>
 8007f9c:	3ff00000 	.word	0x3ff00000

08007fa0 <__d2b>:
 8007fa0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8007fa4:	461c      	mov	r4, r3
 8007fa6:	e9dd 6508 	ldrd	r6, r5, [sp, #32]
 8007faa:	2101      	movs	r1, #1
 8007fac:	4690      	mov	r8, r2
 8007fae:	f7ff fcb7 	bl	8007920 <_Balloc>
 8007fb2:	f3c4 0213 	ubfx	r2, r4, #0, #20
 8007fb6:	f3c4 540a 	ubfx	r4, r4, #20, #11
 8007fba:	4607      	mov	r7, r0
 8007fbc:	bb34      	cbnz	r4, 800800c <__d2b+0x6c>
 8007fbe:	9201      	str	r2, [sp, #4]
 8007fc0:	f1b8 0200 	subs.w	r2, r8, #0
 8007fc4:	d027      	beq.n	8008016 <__d2b+0x76>
 8007fc6:	a802      	add	r0, sp, #8
 8007fc8:	f840 2d08 	str.w	r2, [r0, #-8]!
 8007fcc:	f7ff fd8b 	bl	8007ae6 <__lo0bits>
 8007fd0:	9900      	ldr	r1, [sp, #0]
 8007fd2:	b1f0      	cbz	r0, 8008012 <__d2b+0x72>
 8007fd4:	9a01      	ldr	r2, [sp, #4]
 8007fd6:	f1c0 0320 	rsb	r3, r0, #32
 8007fda:	fa02 f303 	lsl.w	r3, r2, r3
 8007fde:	430b      	orrs	r3, r1
 8007fe0:	40c2      	lsrs	r2, r0
 8007fe2:	617b      	str	r3, [r7, #20]
 8007fe4:	9201      	str	r2, [sp, #4]
 8007fe6:	9b01      	ldr	r3, [sp, #4]
 8007fe8:	2b00      	cmp	r3, #0
 8007fea:	bf14      	ite	ne
 8007fec:	2102      	movne	r1, #2
 8007fee:	2101      	moveq	r1, #1
 8007ff0:	61bb      	str	r3, [r7, #24]
 8007ff2:	6139      	str	r1, [r7, #16]
 8007ff4:	b1c4      	cbz	r4, 8008028 <__d2b+0x88>
 8007ff6:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8007ffa:	4404      	add	r4, r0
 8007ffc:	6034      	str	r4, [r6, #0]
 8007ffe:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8008002:	6028      	str	r0, [r5, #0]
 8008004:	4638      	mov	r0, r7
 8008006:	b002      	add	sp, #8
 8008008:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800800c:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8008010:	e7d5      	b.n	8007fbe <__d2b+0x1e>
 8008012:	6179      	str	r1, [r7, #20]
 8008014:	e7e7      	b.n	8007fe6 <__d2b+0x46>
 8008016:	a801      	add	r0, sp, #4
 8008018:	f7ff fd65 	bl	8007ae6 <__lo0bits>
 800801c:	2101      	movs	r1, #1
 800801e:	9b01      	ldr	r3, [sp, #4]
 8008020:	6139      	str	r1, [r7, #16]
 8008022:	617b      	str	r3, [r7, #20]
 8008024:	3020      	adds	r0, #32
 8008026:	e7e5      	b.n	8007ff4 <__d2b+0x54>
 8008028:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800802c:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8008030:	6030      	str	r0, [r6, #0]
 8008032:	6918      	ldr	r0, [r3, #16]
 8008034:	f7ff fd38 	bl	8007aa8 <__hi0bits>
 8008038:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800803c:	e7e1      	b.n	8008002 <__d2b+0x62>

0800803e <__ratio>:
 800803e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008042:	4688      	mov	r8, r1
 8008044:	4669      	mov	r1, sp
 8008046:	4681      	mov	r9, r0
 8008048:	f7ff ff58 	bl	8007efc <__b2d>
 800804c:	468b      	mov	fp, r1
 800804e:	4606      	mov	r6, r0
 8008050:	460f      	mov	r7, r1
 8008052:	4640      	mov	r0, r8
 8008054:	a901      	add	r1, sp, #4
 8008056:	f7ff ff51 	bl	8007efc <__b2d>
 800805a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800805e:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8008062:	460d      	mov	r5, r1
 8008064:	eba3 0c02 	sub.w	ip, r3, r2
 8008068:	e9dd 3200 	ldrd	r3, r2, [sp]
 800806c:	1a9b      	subs	r3, r3, r2
 800806e:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8008072:	2b00      	cmp	r3, #0
 8008074:	bfd5      	itete	le
 8008076:	460a      	movle	r2, r1
 8008078:	463a      	movgt	r2, r7
 800807a:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800807e:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 8008082:	bfd8      	it	le
 8008084:	eb02 5503 	addle.w	r5, r2, r3, lsl #20
 8008088:	462b      	mov	r3, r5
 800808a:	4602      	mov	r2, r0
 800808c:	4659      	mov	r1, fp
 800808e:	4630      	mov	r0, r6
 8008090:	f7f8 fb4c 	bl	800072c <__aeabi_ddiv>
 8008094:	b003      	add	sp, #12
 8008096:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800809a <__copybits>:
 800809a:	3901      	subs	r1, #1
 800809c:	b510      	push	{r4, lr}
 800809e:	1149      	asrs	r1, r1, #5
 80080a0:	6914      	ldr	r4, [r2, #16]
 80080a2:	3101      	adds	r1, #1
 80080a4:	f102 0314 	add.w	r3, r2, #20
 80080a8:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80080ac:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80080b0:	42a3      	cmp	r3, r4
 80080b2:	4602      	mov	r2, r0
 80080b4:	d303      	bcc.n	80080be <__copybits+0x24>
 80080b6:	2300      	movs	r3, #0
 80080b8:	428a      	cmp	r2, r1
 80080ba:	d305      	bcc.n	80080c8 <__copybits+0x2e>
 80080bc:	bd10      	pop	{r4, pc}
 80080be:	f853 2b04 	ldr.w	r2, [r3], #4
 80080c2:	f840 2b04 	str.w	r2, [r0], #4
 80080c6:	e7f3      	b.n	80080b0 <__copybits+0x16>
 80080c8:	f842 3b04 	str.w	r3, [r2], #4
 80080cc:	e7f4      	b.n	80080b8 <__copybits+0x1e>

080080ce <__any_on>:
 80080ce:	f100 0214 	add.w	r2, r0, #20
 80080d2:	6900      	ldr	r0, [r0, #16]
 80080d4:	114b      	asrs	r3, r1, #5
 80080d6:	4298      	cmp	r0, r3
 80080d8:	b510      	push	{r4, lr}
 80080da:	db11      	blt.n	8008100 <__any_on+0x32>
 80080dc:	dd0a      	ble.n	80080f4 <__any_on+0x26>
 80080de:	f011 011f 	ands.w	r1, r1, #31
 80080e2:	d007      	beq.n	80080f4 <__any_on+0x26>
 80080e4:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80080e8:	fa24 f001 	lsr.w	r0, r4, r1
 80080ec:	fa00 f101 	lsl.w	r1, r0, r1
 80080f0:	428c      	cmp	r4, r1
 80080f2:	d10b      	bne.n	800810c <__any_on+0x3e>
 80080f4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80080f8:	4293      	cmp	r3, r2
 80080fa:	d803      	bhi.n	8008104 <__any_on+0x36>
 80080fc:	2000      	movs	r0, #0
 80080fe:	bd10      	pop	{r4, pc}
 8008100:	4603      	mov	r3, r0
 8008102:	e7f7      	b.n	80080f4 <__any_on+0x26>
 8008104:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8008108:	2900      	cmp	r1, #0
 800810a:	d0f5      	beq.n	80080f8 <__any_on+0x2a>
 800810c:	2001      	movs	r0, #1
 800810e:	e7f6      	b.n	80080fe <__any_on+0x30>

08008110 <_calloc_r>:
 8008110:	b538      	push	{r3, r4, r5, lr}
 8008112:	fb02 f401 	mul.w	r4, r2, r1
 8008116:	4621      	mov	r1, r4
 8008118:	f000 f854 	bl	80081c4 <_malloc_r>
 800811c:	4605      	mov	r5, r0
 800811e:	b118      	cbz	r0, 8008128 <_calloc_r+0x18>
 8008120:	4622      	mov	r2, r4
 8008122:	2100      	movs	r1, #0
 8008124:	f7fc fd06 	bl	8004b34 <memset>
 8008128:	4628      	mov	r0, r5
 800812a:	bd38      	pop	{r3, r4, r5, pc}

0800812c <_free_r>:
 800812c:	b538      	push	{r3, r4, r5, lr}
 800812e:	4605      	mov	r5, r0
 8008130:	2900      	cmp	r1, #0
 8008132:	d043      	beq.n	80081bc <_free_r+0x90>
 8008134:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008138:	1f0c      	subs	r4, r1, #4
 800813a:	2b00      	cmp	r3, #0
 800813c:	bfb8      	it	lt
 800813e:	18e4      	addlt	r4, r4, r3
 8008140:	f000 fa1b 	bl	800857a <__malloc_lock>
 8008144:	4a1e      	ldr	r2, [pc, #120]	; (80081c0 <_free_r+0x94>)
 8008146:	6813      	ldr	r3, [r2, #0]
 8008148:	4610      	mov	r0, r2
 800814a:	b933      	cbnz	r3, 800815a <_free_r+0x2e>
 800814c:	6063      	str	r3, [r4, #4]
 800814e:	6014      	str	r4, [r2, #0]
 8008150:	4628      	mov	r0, r5
 8008152:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008156:	f000 ba11 	b.w	800857c <__malloc_unlock>
 800815a:	42a3      	cmp	r3, r4
 800815c:	d90b      	bls.n	8008176 <_free_r+0x4a>
 800815e:	6821      	ldr	r1, [r4, #0]
 8008160:	1862      	adds	r2, r4, r1
 8008162:	4293      	cmp	r3, r2
 8008164:	bf01      	itttt	eq
 8008166:	681a      	ldreq	r2, [r3, #0]
 8008168:	685b      	ldreq	r3, [r3, #4]
 800816a:	1852      	addeq	r2, r2, r1
 800816c:	6022      	streq	r2, [r4, #0]
 800816e:	6063      	str	r3, [r4, #4]
 8008170:	6004      	str	r4, [r0, #0]
 8008172:	e7ed      	b.n	8008150 <_free_r+0x24>
 8008174:	4613      	mov	r3, r2
 8008176:	685a      	ldr	r2, [r3, #4]
 8008178:	b10a      	cbz	r2, 800817e <_free_r+0x52>
 800817a:	42a2      	cmp	r2, r4
 800817c:	d9fa      	bls.n	8008174 <_free_r+0x48>
 800817e:	6819      	ldr	r1, [r3, #0]
 8008180:	1858      	adds	r0, r3, r1
 8008182:	42a0      	cmp	r0, r4
 8008184:	d10b      	bne.n	800819e <_free_r+0x72>
 8008186:	6820      	ldr	r0, [r4, #0]
 8008188:	4401      	add	r1, r0
 800818a:	1858      	adds	r0, r3, r1
 800818c:	4282      	cmp	r2, r0
 800818e:	6019      	str	r1, [r3, #0]
 8008190:	d1de      	bne.n	8008150 <_free_r+0x24>
 8008192:	6810      	ldr	r0, [r2, #0]
 8008194:	6852      	ldr	r2, [r2, #4]
 8008196:	4401      	add	r1, r0
 8008198:	6019      	str	r1, [r3, #0]
 800819a:	605a      	str	r2, [r3, #4]
 800819c:	e7d8      	b.n	8008150 <_free_r+0x24>
 800819e:	d902      	bls.n	80081a6 <_free_r+0x7a>
 80081a0:	230c      	movs	r3, #12
 80081a2:	602b      	str	r3, [r5, #0]
 80081a4:	e7d4      	b.n	8008150 <_free_r+0x24>
 80081a6:	6820      	ldr	r0, [r4, #0]
 80081a8:	1821      	adds	r1, r4, r0
 80081aa:	428a      	cmp	r2, r1
 80081ac:	bf01      	itttt	eq
 80081ae:	6811      	ldreq	r1, [r2, #0]
 80081b0:	6852      	ldreq	r2, [r2, #4]
 80081b2:	1809      	addeq	r1, r1, r0
 80081b4:	6021      	streq	r1, [r4, #0]
 80081b6:	6062      	str	r2, [r4, #4]
 80081b8:	605c      	str	r4, [r3, #4]
 80081ba:	e7c9      	b.n	8008150 <_free_r+0x24>
 80081bc:	bd38      	pop	{r3, r4, r5, pc}
 80081be:	bf00      	nop
 80081c0:	20000650 	.word	0x20000650

080081c4 <_malloc_r>:
 80081c4:	b570      	push	{r4, r5, r6, lr}
 80081c6:	1ccd      	adds	r5, r1, #3
 80081c8:	f025 0503 	bic.w	r5, r5, #3
 80081cc:	3508      	adds	r5, #8
 80081ce:	2d0c      	cmp	r5, #12
 80081d0:	bf38      	it	cc
 80081d2:	250c      	movcc	r5, #12
 80081d4:	2d00      	cmp	r5, #0
 80081d6:	4606      	mov	r6, r0
 80081d8:	db01      	blt.n	80081de <_malloc_r+0x1a>
 80081da:	42a9      	cmp	r1, r5
 80081dc:	d903      	bls.n	80081e6 <_malloc_r+0x22>
 80081de:	230c      	movs	r3, #12
 80081e0:	6033      	str	r3, [r6, #0]
 80081e2:	2000      	movs	r0, #0
 80081e4:	bd70      	pop	{r4, r5, r6, pc}
 80081e6:	f000 f9c8 	bl	800857a <__malloc_lock>
 80081ea:	4a21      	ldr	r2, [pc, #132]	; (8008270 <_malloc_r+0xac>)
 80081ec:	6814      	ldr	r4, [r2, #0]
 80081ee:	4621      	mov	r1, r4
 80081f0:	b991      	cbnz	r1, 8008218 <_malloc_r+0x54>
 80081f2:	4c20      	ldr	r4, [pc, #128]	; (8008274 <_malloc_r+0xb0>)
 80081f4:	6823      	ldr	r3, [r4, #0]
 80081f6:	b91b      	cbnz	r3, 8008200 <_malloc_r+0x3c>
 80081f8:	4630      	mov	r0, r6
 80081fa:	f000 f98f 	bl	800851c <_sbrk_r>
 80081fe:	6020      	str	r0, [r4, #0]
 8008200:	4629      	mov	r1, r5
 8008202:	4630      	mov	r0, r6
 8008204:	f000 f98a 	bl	800851c <_sbrk_r>
 8008208:	1c43      	adds	r3, r0, #1
 800820a:	d124      	bne.n	8008256 <_malloc_r+0x92>
 800820c:	230c      	movs	r3, #12
 800820e:	4630      	mov	r0, r6
 8008210:	6033      	str	r3, [r6, #0]
 8008212:	f000 f9b3 	bl	800857c <__malloc_unlock>
 8008216:	e7e4      	b.n	80081e2 <_malloc_r+0x1e>
 8008218:	680b      	ldr	r3, [r1, #0]
 800821a:	1b5b      	subs	r3, r3, r5
 800821c:	d418      	bmi.n	8008250 <_malloc_r+0x8c>
 800821e:	2b0b      	cmp	r3, #11
 8008220:	d90f      	bls.n	8008242 <_malloc_r+0x7e>
 8008222:	600b      	str	r3, [r1, #0]
 8008224:	18cc      	adds	r4, r1, r3
 8008226:	50cd      	str	r5, [r1, r3]
 8008228:	4630      	mov	r0, r6
 800822a:	f000 f9a7 	bl	800857c <__malloc_unlock>
 800822e:	f104 000b 	add.w	r0, r4, #11
 8008232:	1d23      	adds	r3, r4, #4
 8008234:	f020 0007 	bic.w	r0, r0, #7
 8008238:	1ac3      	subs	r3, r0, r3
 800823a:	d0d3      	beq.n	80081e4 <_malloc_r+0x20>
 800823c:	425a      	negs	r2, r3
 800823e:	50e2      	str	r2, [r4, r3]
 8008240:	e7d0      	b.n	80081e4 <_malloc_r+0x20>
 8008242:	684b      	ldr	r3, [r1, #4]
 8008244:	428c      	cmp	r4, r1
 8008246:	bf16      	itet	ne
 8008248:	6063      	strne	r3, [r4, #4]
 800824a:	6013      	streq	r3, [r2, #0]
 800824c:	460c      	movne	r4, r1
 800824e:	e7eb      	b.n	8008228 <_malloc_r+0x64>
 8008250:	460c      	mov	r4, r1
 8008252:	6849      	ldr	r1, [r1, #4]
 8008254:	e7cc      	b.n	80081f0 <_malloc_r+0x2c>
 8008256:	1cc4      	adds	r4, r0, #3
 8008258:	f024 0403 	bic.w	r4, r4, #3
 800825c:	42a0      	cmp	r0, r4
 800825e:	d005      	beq.n	800826c <_malloc_r+0xa8>
 8008260:	1a21      	subs	r1, r4, r0
 8008262:	4630      	mov	r0, r6
 8008264:	f000 f95a 	bl	800851c <_sbrk_r>
 8008268:	3001      	adds	r0, #1
 800826a:	d0cf      	beq.n	800820c <_malloc_r+0x48>
 800826c:	6025      	str	r5, [r4, #0]
 800826e:	e7db      	b.n	8008228 <_malloc_r+0x64>
 8008270:	20000650 	.word	0x20000650
 8008274:	20000654 	.word	0x20000654

08008278 <__ssputs_r>:
 8008278:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800827c:	688e      	ldr	r6, [r1, #8]
 800827e:	4682      	mov	sl, r0
 8008280:	429e      	cmp	r6, r3
 8008282:	460c      	mov	r4, r1
 8008284:	4690      	mov	r8, r2
 8008286:	4699      	mov	r9, r3
 8008288:	d837      	bhi.n	80082fa <__ssputs_r+0x82>
 800828a:	898a      	ldrh	r2, [r1, #12]
 800828c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008290:	d031      	beq.n	80082f6 <__ssputs_r+0x7e>
 8008292:	2302      	movs	r3, #2
 8008294:	6825      	ldr	r5, [r4, #0]
 8008296:	6909      	ldr	r1, [r1, #16]
 8008298:	1a6f      	subs	r7, r5, r1
 800829a:	6965      	ldr	r5, [r4, #20]
 800829c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80082a0:	fb95 f5f3 	sdiv	r5, r5, r3
 80082a4:	f109 0301 	add.w	r3, r9, #1
 80082a8:	443b      	add	r3, r7
 80082aa:	429d      	cmp	r5, r3
 80082ac:	bf38      	it	cc
 80082ae:	461d      	movcc	r5, r3
 80082b0:	0553      	lsls	r3, r2, #21
 80082b2:	d530      	bpl.n	8008316 <__ssputs_r+0x9e>
 80082b4:	4629      	mov	r1, r5
 80082b6:	f7ff ff85 	bl	80081c4 <_malloc_r>
 80082ba:	4606      	mov	r6, r0
 80082bc:	b950      	cbnz	r0, 80082d4 <__ssputs_r+0x5c>
 80082be:	230c      	movs	r3, #12
 80082c0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80082c4:	f8ca 3000 	str.w	r3, [sl]
 80082c8:	89a3      	ldrh	r3, [r4, #12]
 80082ca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80082ce:	81a3      	strh	r3, [r4, #12]
 80082d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80082d4:	463a      	mov	r2, r7
 80082d6:	6921      	ldr	r1, [r4, #16]
 80082d8:	f7fc fc08 	bl	8004aec <memcpy>
 80082dc:	89a3      	ldrh	r3, [r4, #12]
 80082de:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80082e2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80082e6:	81a3      	strh	r3, [r4, #12]
 80082e8:	6126      	str	r6, [r4, #16]
 80082ea:	443e      	add	r6, r7
 80082ec:	6026      	str	r6, [r4, #0]
 80082ee:	464e      	mov	r6, r9
 80082f0:	6165      	str	r5, [r4, #20]
 80082f2:	1bed      	subs	r5, r5, r7
 80082f4:	60a5      	str	r5, [r4, #8]
 80082f6:	454e      	cmp	r6, r9
 80082f8:	d900      	bls.n	80082fc <__ssputs_r+0x84>
 80082fa:	464e      	mov	r6, r9
 80082fc:	4632      	mov	r2, r6
 80082fe:	4641      	mov	r1, r8
 8008300:	6820      	ldr	r0, [r4, #0]
 8008302:	f7fc fbfe 	bl	8004b02 <memmove>
 8008306:	68a3      	ldr	r3, [r4, #8]
 8008308:	2000      	movs	r0, #0
 800830a:	1b9b      	subs	r3, r3, r6
 800830c:	60a3      	str	r3, [r4, #8]
 800830e:	6823      	ldr	r3, [r4, #0]
 8008310:	441e      	add	r6, r3
 8008312:	6026      	str	r6, [r4, #0]
 8008314:	e7dc      	b.n	80082d0 <__ssputs_r+0x58>
 8008316:	462a      	mov	r2, r5
 8008318:	f000 f931 	bl	800857e <_realloc_r>
 800831c:	4606      	mov	r6, r0
 800831e:	2800      	cmp	r0, #0
 8008320:	d1e2      	bne.n	80082e8 <__ssputs_r+0x70>
 8008322:	6921      	ldr	r1, [r4, #16]
 8008324:	4650      	mov	r0, sl
 8008326:	f7ff ff01 	bl	800812c <_free_r>
 800832a:	e7c8      	b.n	80082be <__ssputs_r+0x46>

0800832c <_svfiprintf_r>:
 800832c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008330:	461d      	mov	r5, r3
 8008332:	898b      	ldrh	r3, [r1, #12]
 8008334:	b09d      	sub	sp, #116	; 0x74
 8008336:	061f      	lsls	r7, r3, #24
 8008338:	4680      	mov	r8, r0
 800833a:	460c      	mov	r4, r1
 800833c:	4616      	mov	r6, r2
 800833e:	d50f      	bpl.n	8008360 <_svfiprintf_r+0x34>
 8008340:	690b      	ldr	r3, [r1, #16]
 8008342:	b96b      	cbnz	r3, 8008360 <_svfiprintf_r+0x34>
 8008344:	2140      	movs	r1, #64	; 0x40
 8008346:	f7ff ff3d 	bl	80081c4 <_malloc_r>
 800834a:	6020      	str	r0, [r4, #0]
 800834c:	6120      	str	r0, [r4, #16]
 800834e:	b928      	cbnz	r0, 800835c <_svfiprintf_r+0x30>
 8008350:	230c      	movs	r3, #12
 8008352:	f8c8 3000 	str.w	r3, [r8]
 8008356:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800835a:	e0c8      	b.n	80084ee <_svfiprintf_r+0x1c2>
 800835c:	2340      	movs	r3, #64	; 0x40
 800835e:	6163      	str	r3, [r4, #20]
 8008360:	2300      	movs	r3, #0
 8008362:	9309      	str	r3, [sp, #36]	; 0x24
 8008364:	2320      	movs	r3, #32
 8008366:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800836a:	2330      	movs	r3, #48	; 0x30
 800836c:	f04f 0b01 	mov.w	fp, #1
 8008370:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008374:	9503      	str	r5, [sp, #12]
 8008376:	4637      	mov	r7, r6
 8008378:	463d      	mov	r5, r7
 800837a:	f815 3b01 	ldrb.w	r3, [r5], #1
 800837e:	b10b      	cbz	r3, 8008384 <_svfiprintf_r+0x58>
 8008380:	2b25      	cmp	r3, #37	; 0x25
 8008382:	d13e      	bne.n	8008402 <_svfiprintf_r+0xd6>
 8008384:	ebb7 0a06 	subs.w	sl, r7, r6
 8008388:	d00b      	beq.n	80083a2 <_svfiprintf_r+0x76>
 800838a:	4653      	mov	r3, sl
 800838c:	4632      	mov	r2, r6
 800838e:	4621      	mov	r1, r4
 8008390:	4640      	mov	r0, r8
 8008392:	f7ff ff71 	bl	8008278 <__ssputs_r>
 8008396:	3001      	adds	r0, #1
 8008398:	f000 80a4 	beq.w	80084e4 <_svfiprintf_r+0x1b8>
 800839c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800839e:	4453      	add	r3, sl
 80083a0:	9309      	str	r3, [sp, #36]	; 0x24
 80083a2:	783b      	ldrb	r3, [r7, #0]
 80083a4:	2b00      	cmp	r3, #0
 80083a6:	f000 809d 	beq.w	80084e4 <_svfiprintf_r+0x1b8>
 80083aa:	2300      	movs	r3, #0
 80083ac:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80083b0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80083b4:	9304      	str	r3, [sp, #16]
 80083b6:	9307      	str	r3, [sp, #28]
 80083b8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80083bc:	931a      	str	r3, [sp, #104]	; 0x68
 80083be:	462f      	mov	r7, r5
 80083c0:	2205      	movs	r2, #5
 80083c2:	f817 1b01 	ldrb.w	r1, [r7], #1
 80083c6:	4850      	ldr	r0, [pc, #320]	; (8008508 <_svfiprintf_r+0x1dc>)
 80083c8:	f7ff fa9c 	bl	8007904 <memchr>
 80083cc:	9b04      	ldr	r3, [sp, #16]
 80083ce:	b9d0      	cbnz	r0, 8008406 <_svfiprintf_r+0xda>
 80083d0:	06d9      	lsls	r1, r3, #27
 80083d2:	bf44      	itt	mi
 80083d4:	2220      	movmi	r2, #32
 80083d6:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80083da:	071a      	lsls	r2, r3, #28
 80083dc:	bf44      	itt	mi
 80083de:	222b      	movmi	r2, #43	; 0x2b
 80083e0:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80083e4:	782a      	ldrb	r2, [r5, #0]
 80083e6:	2a2a      	cmp	r2, #42	; 0x2a
 80083e8:	d015      	beq.n	8008416 <_svfiprintf_r+0xea>
 80083ea:	462f      	mov	r7, r5
 80083ec:	2000      	movs	r0, #0
 80083ee:	250a      	movs	r5, #10
 80083f0:	9a07      	ldr	r2, [sp, #28]
 80083f2:	4639      	mov	r1, r7
 80083f4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80083f8:	3b30      	subs	r3, #48	; 0x30
 80083fa:	2b09      	cmp	r3, #9
 80083fc:	d94d      	bls.n	800849a <_svfiprintf_r+0x16e>
 80083fe:	b1b8      	cbz	r0, 8008430 <_svfiprintf_r+0x104>
 8008400:	e00f      	b.n	8008422 <_svfiprintf_r+0xf6>
 8008402:	462f      	mov	r7, r5
 8008404:	e7b8      	b.n	8008378 <_svfiprintf_r+0x4c>
 8008406:	4a40      	ldr	r2, [pc, #256]	; (8008508 <_svfiprintf_r+0x1dc>)
 8008408:	463d      	mov	r5, r7
 800840a:	1a80      	subs	r0, r0, r2
 800840c:	fa0b f000 	lsl.w	r0, fp, r0
 8008410:	4318      	orrs	r0, r3
 8008412:	9004      	str	r0, [sp, #16]
 8008414:	e7d3      	b.n	80083be <_svfiprintf_r+0x92>
 8008416:	9a03      	ldr	r2, [sp, #12]
 8008418:	1d11      	adds	r1, r2, #4
 800841a:	6812      	ldr	r2, [r2, #0]
 800841c:	9103      	str	r1, [sp, #12]
 800841e:	2a00      	cmp	r2, #0
 8008420:	db01      	blt.n	8008426 <_svfiprintf_r+0xfa>
 8008422:	9207      	str	r2, [sp, #28]
 8008424:	e004      	b.n	8008430 <_svfiprintf_r+0x104>
 8008426:	4252      	negs	r2, r2
 8008428:	f043 0302 	orr.w	r3, r3, #2
 800842c:	9207      	str	r2, [sp, #28]
 800842e:	9304      	str	r3, [sp, #16]
 8008430:	783b      	ldrb	r3, [r7, #0]
 8008432:	2b2e      	cmp	r3, #46	; 0x2e
 8008434:	d10c      	bne.n	8008450 <_svfiprintf_r+0x124>
 8008436:	787b      	ldrb	r3, [r7, #1]
 8008438:	2b2a      	cmp	r3, #42	; 0x2a
 800843a:	d133      	bne.n	80084a4 <_svfiprintf_r+0x178>
 800843c:	9b03      	ldr	r3, [sp, #12]
 800843e:	3702      	adds	r7, #2
 8008440:	1d1a      	adds	r2, r3, #4
 8008442:	681b      	ldr	r3, [r3, #0]
 8008444:	9203      	str	r2, [sp, #12]
 8008446:	2b00      	cmp	r3, #0
 8008448:	bfb8      	it	lt
 800844a:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800844e:	9305      	str	r3, [sp, #20]
 8008450:	4d2e      	ldr	r5, [pc, #184]	; (800850c <_svfiprintf_r+0x1e0>)
 8008452:	2203      	movs	r2, #3
 8008454:	7839      	ldrb	r1, [r7, #0]
 8008456:	4628      	mov	r0, r5
 8008458:	f7ff fa54 	bl	8007904 <memchr>
 800845c:	b138      	cbz	r0, 800846e <_svfiprintf_r+0x142>
 800845e:	2340      	movs	r3, #64	; 0x40
 8008460:	1b40      	subs	r0, r0, r5
 8008462:	fa03 f000 	lsl.w	r0, r3, r0
 8008466:	9b04      	ldr	r3, [sp, #16]
 8008468:	3701      	adds	r7, #1
 800846a:	4303      	orrs	r3, r0
 800846c:	9304      	str	r3, [sp, #16]
 800846e:	7839      	ldrb	r1, [r7, #0]
 8008470:	2206      	movs	r2, #6
 8008472:	4827      	ldr	r0, [pc, #156]	; (8008510 <_svfiprintf_r+0x1e4>)
 8008474:	1c7e      	adds	r6, r7, #1
 8008476:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800847a:	f7ff fa43 	bl	8007904 <memchr>
 800847e:	2800      	cmp	r0, #0
 8008480:	d038      	beq.n	80084f4 <_svfiprintf_r+0x1c8>
 8008482:	4b24      	ldr	r3, [pc, #144]	; (8008514 <_svfiprintf_r+0x1e8>)
 8008484:	bb13      	cbnz	r3, 80084cc <_svfiprintf_r+0x1a0>
 8008486:	9b03      	ldr	r3, [sp, #12]
 8008488:	3307      	adds	r3, #7
 800848a:	f023 0307 	bic.w	r3, r3, #7
 800848e:	3308      	adds	r3, #8
 8008490:	9303      	str	r3, [sp, #12]
 8008492:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008494:	444b      	add	r3, r9
 8008496:	9309      	str	r3, [sp, #36]	; 0x24
 8008498:	e76d      	b.n	8008376 <_svfiprintf_r+0x4a>
 800849a:	fb05 3202 	mla	r2, r5, r2, r3
 800849e:	2001      	movs	r0, #1
 80084a0:	460f      	mov	r7, r1
 80084a2:	e7a6      	b.n	80083f2 <_svfiprintf_r+0xc6>
 80084a4:	2300      	movs	r3, #0
 80084a6:	250a      	movs	r5, #10
 80084a8:	4619      	mov	r1, r3
 80084aa:	3701      	adds	r7, #1
 80084ac:	9305      	str	r3, [sp, #20]
 80084ae:	4638      	mov	r0, r7
 80084b0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80084b4:	3a30      	subs	r2, #48	; 0x30
 80084b6:	2a09      	cmp	r2, #9
 80084b8:	d903      	bls.n	80084c2 <_svfiprintf_r+0x196>
 80084ba:	2b00      	cmp	r3, #0
 80084bc:	d0c8      	beq.n	8008450 <_svfiprintf_r+0x124>
 80084be:	9105      	str	r1, [sp, #20]
 80084c0:	e7c6      	b.n	8008450 <_svfiprintf_r+0x124>
 80084c2:	fb05 2101 	mla	r1, r5, r1, r2
 80084c6:	2301      	movs	r3, #1
 80084c8:	4607      	mov	r7, r0
 80084ca:	e7f0      	b.n	80084ae <_svfiprintf_r+0x182>
 80084cc:	ab03      	add	r3, sp, #12
 80084ce:	9300      	str	r3, [sp, #0]
 80084d0:	4622      	mov	r2, r4
 80084d2:	4b11      	ldr	r3, [pc, #68]	; (8008518 <_svfiprintf_r+0x1ec>)
 80084d4:	a904      	add	r1, sp, #16
 80084d6:	4640      	mov	r0, r8
 80084d8:	f7fc fbc6 	bl	8004c68 <_printf_float>
 80084dc:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 80084e0:	4681      	mov	r9, r0
 80084e2:	d1d6      	bne.n	8008492 <_svfiprintf_r+0x166>
 80084e4:	89a3      	ldrh	r3, [r4, #12]
 80084e6:	065b      	lsls	r3, r3, #25
 80084e8:	f53f af35 	bmi.w	8008356 <_svfiprintf_r+0x2a>
 80084ec:	9809      	ldr	r0, [sp, #36]	; 0x24
 80084ee:	b01d      	add	sp, #116	; 0x74
 80084f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80084f4:	ab03      	add	r3, sp, #12
 80084f6:	9300      	str	r3, [sp, #0]
 80084f8:	4622      	mov	r2, r4
 80084fa:	4b07      	ldr	r3, [pc, #28]	; (8008518 <_svfiprintf_r+0x1ec>)
 80084fc:	a904      	add	r1, sp, #16
 80084fe:	4640      	mov	r0, r8
 8008500:	f7fc fe5e 	bl	80051c0 <_printf_i>
 8008504:	e7ea      	b.n	80084dc <_svfiprintf_r+0x1b0>
 8008506:	bf00      	nop
 8008508:	08008e8c 	.word	0x08008e8c
 800850c:	08008e92 	.word	0x08008e92
 8008510:	08008e96 	.word	0x08008e96
 8008514:	08004c69 	.word	0x08004c69
 8008518:	08008279 	.word	0x08008279

0800851c <_sbrk_r>:
 800851c:	b538      	push	{r3, r4, r5, lr}
 800851e:	2300      	movs	r3, #0
 8008520:	4c05      	ldr	r4, [pc, #20]	; (8008538 <_sbrk_r+0x1c>)
 8008522:	4605      	mov	r5, r0
 8008524:	4608      	mov	r0, r1
 8008526:	6023      	str	r3, [r4, #0]
 8008528:	f7f9 f9ec 	bl	8001904 <_sbrk>
 800852c:	1c43      	adds	r3, r0, #1
 800852e:	d102      	bne.n	8008536 <_sbrk_r+0x1a>
 8008530:	6823      	ldr	r3, [r4, #0]
 8008532:	b103      	cbz	r3, 8008536 <_sbrk_r+0x1a>
 8008534:	602b      	str	r3, [r5, #0]
 8008536:	bd38      	pop	{r3, r4, r5, pc}
 8008538:	20000950 	.word	0x20000950

0800853c <strncmp>:
 800853c:	b510      	push	{r4, lr}
 800853e:	b16a      	cbz	r2, 800855c <strncmp+0x20>
 8008540:	3901      	subs	r1, #1
 8008542:	1884      	adds	r4, r0, r2
 8008544:	f810 3b01 	ldrb.w	r3, [r0], #1
 8008548:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800854c:	4293      	cmp	r3, r2
 800854e:	d103      	bne.n	8008558 <strncmp+0x1c>
 8008550:	42a0      	cmp	r0, r4
 8008552:	d001      	beq.n	8008558 <strncmp+0x1c>
 8008554:	2b00      	cmp	r3, #0
 8008556:	d1f5      	bne.n	8008544 <strncmp+0x8>
 8008558:	1a98      	subs	r0, r3, r2
 800855a:	bd10      	pop	{r4, pc}
 800855c:	4610      	mov	r0, r2
 800855e:	e7fc      	b.n	800855a <strncmp+0x1e>

08008560 <__ascii_wctomb>:
 8008560:	b149      	cbz	r1, 8008576 <__ascii_wctomb+0x16>
 8008562:	2aff      	cmp	r2, #255	; 0xff
 8008564:	bf8b      	itete	hi
 8008566:	238a      	movhi	r3, #138	; 0x8a
 8008568:	700a      	strbls	r2, [r1, #0]
 800856a:	6003      	strhi	r3, [r0, #0]
 800856c:	2001      	movls	r0, #1
 800856e:	bf88      	it	hi
 8008570:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 8008574:	4770      	bx	lr
 8008576:	4608      	mov	r0, r1
 8008578:	4770      	bx	lr

0800857a <__malloc_lock>:
 800857a:	4770      	bx	lr

0800857c <__malloc_unlock>:
 800857c:	4770      	bx	lr

0800857e <_realloc_r>:
 800857e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008580:	4607      	mov	r7, r0
 8008582:	4614      	mov	r4, r2
 8008584:	460e      	mov	r6, r1
 8008586:	b921      	cbnz	r1, 8008592 <_realloc_r+0x14>
 8008588:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800858c:	4611      	mov	r1, r2
 800858e:	f7ff be19 	b.w	80081c4 <_malloc_r>
 8008592:	b922      	cbnz	r2, 800859e <_realloc_r+0x20>
 8008594:	f7ff fdca 	bl	800812c <_free_r>
 8008598:	4625      	mov	r5, r4
 800859a:	4628      	mov	r0, r5
 800859c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800859e:	f000 f814 	bl	80085ca <_malloc_usable_size_r>
 80085a2:	42a0      	cmp	r0, r4
 80085a4:	d20f      	bcs.n	80085c6 <_realloc_r+0x48>
 80085a6:	4621      	mov	r1, r4
 80085a8:	4638      	mov	r0, r7
 80085aa:	f7ff fe0b 	bl	80081c4 <_malloc_r>
 80085ae:	4605      	mov	r5, r0
 80085b0:	2800      	cmp	r0, #0
 80085b2:	d0f2      	beq.n	800859a <_realloc_r+0x1c>
 80085b4:	4631      	mov	r1, r6
 80085b6:	4622      	mov	r2, r4
 80085b8:	f7fc fa98 	bl	8004aec <memcpy>
 80085bc:	4631      	mov	r1, r6
 80085be:	4638      	mov	r0, r7
 80085c0:	f7ff fdb4 	bl	800812c <_free_r>
 80085c4:	e7e9      	b.n	800859a <_realloc_r+0x1c>
 80085c6:	4635      	mov	r5, r6
 80085c8:	e7e7      	b.n	800859a <_realloc_r+0x1c>

080085ca <_malloc_usable_size_r>:
 80085ca:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80085ce:	1f18      	subs	r0, r3, #4
 80085d0:	2b00      	cmp	r3, #0
 80085d2:	bfbc      	itt	lt
 80085d4:	580b      	ldrlt	r3, [r1, r0]
 80085d6:	18c0      	addlt	r0, r0, r3
 80085d8:	4770      	bx	lr
	...

080085dc <_init>:
 80085dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80085de:	bf00      	nop
 80085e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80085e2:	bc08      	pop	{r3}
 80085e4:	469e      	mov	lr, r3
 80085e6:	4770      	bx	lr

080085e8 <_fini>:
 80085e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80085ea:	bf00      	nop
 80085ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80085ee:	bc08      	pop	{r3}
 80085f0:	469e      	mov	lr, r3
 80085f2:	4770      	bx	lr
