
main.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a8e4  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000a80  0800a9f8  0800a9f8  0001a9f8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b478  0800b478  000201f4  2**0
                  CONTENTS
  4 .ARM          00000000  0800b478  0800b478  000201f4  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800b478  0800b478  000201f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b478  0800b478  0001b478  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b47c  0800b47c  0001b47c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f4  20000000  0800b480  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000085c  200001f8  0800b674  000201f8  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20000a54  0800b674  00020a54  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201f4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00022048  00000000  00000000  0002021d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000487d  00000000  00000000  00042265  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001478  00000000  00000000  00046ae8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000012a8  00000000  00000000  00047f60  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001a1c6  00000000  00000000  00049208  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00015e15  00000000  00000000  000633ce  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0007d534  00000000  00000000  000791e3  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000f6717  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000060e4  00000000  00000000  000f6794  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001f8 	.word	0x200001f8
 800012c:	00000000 	.word	0x00000000
 8000130:	0800a9dc 	.word	0x0800a9dc

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001fc 	.word	0x200001fc
 800014c:	0800a9dc 	.word	0x0800a9dc

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800029e:	f1a4 0401 	sub.w	r4, r4, #1
 80002a2:	d1e9      	bne.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2uiz>:
 8000a88:	004a      	lsls	r2, r1, #1
 8000a8a:	d211      	bcs.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a90:	d211      	bcs.n	8000ab6 <__aeabi_d2uiz+0x2e>
 8000a92:	d50d      	bpl.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a9c:	d40e      	bmi.n	8000abc <__aeabi_d2uiz+0x34>
 8000a9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aa6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_d2uiz+0x3a>
 8000abc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0000 	mov.w	r0, #0
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_d2f>:
 8000ac8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000acc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ad0:	bf24      	itt	cs
 8000ad2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ad6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ada:	d90d      	bls.n	8000af8 <__aeabi_d2f+0x30>
 8000adc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ae0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000af0:	bf08      	it	eq
 8000af2:	f020 0001 	biceq.w	r0, r0, #1
 8000af6:	4770      	bx	lr
 8000af8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000afc:	d121      	bne.n	8000b42 <__aeabi_d2f+0x7a>
 8000afe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b02:	bfbc      	itt	lt
 8000b04:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b08:	4770      	bxlt	lr
 8000b0a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b12:	f1c2 0218 	rsb	r2, r2, #24
 8000b16:	f1c2 0c20 	rsb	ip, r2, #32
 8000b1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b22:	bf18      	it	ne
 8000b24:	f040 0001 	orrne.w	r0, r0, #1
 8000b28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b34:	ea40 000c 	orr.w	r0, r0, ip
 8000b38:	fa23 f302 	lsr.w	r3, r3, r2
 8000b3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b40:	e7cc      	b.n	8000adc <__aeabi_d2f+0x14>
 8000b42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b46:	d107      	bne.n	8000b58 <__aeabi_d2f+0x90>
 8000b48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b4c:	bf1e      	ittt	ne
 8000b4e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b52:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b56:	4770      	bxne	lr
 8000b58:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b5c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b60:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop

08000b68 <GetPage>:
#include "FLASH_PAGE.h"
#include "string.h"
#include "stdio.h"

static uint32_t GetPage(uint32_t Address)
{
 8000b68:	b480      	push	{r7}
 8000b6a:	b085      	sub	sp, #20
 8000b6c:	af00      	add	r7, sp, #0
 8000b6e:	6078      	str	r0, [r7, #4]
  for (int indx=0; indx<128; indx++)
 8000b70:	2300      	movs	r3, #0
 8000b72:	60fb      	str	r3, [r7, #12]
 8000b74:	e018      	b.n	8000ba8 <GetPage+0x40>
  {
	  if((Address < (0x08000000 + (1024 *(indx+1))) ) && (Address >= (0x08000000 + 1024*indx)))
 8000b76:	68fb      	ldr	r3, [r7, #12]
 8000b78:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 8000b7c:	3301      	adds	r3, #1
 8000b7e:	029b      	lsls	r3, r3, #10
 8000b80:	461a      	mov	r2, r3
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	4293      	cmp	r3, r2
 8000b86:	d20c      	bcs.n	8000ba2 <GetPage+0x3a>
 8000b88:	68fb      	ldr	r3, [r7, #12]
 8000b8a:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 8000b8e:	029b      	lsls	r3, r3, #10
 8000b90:	461a      	mov	r2, r3
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	4293      	cmp	r3, r2
 8000b96:	d304      	bcc.n	8000ba2 <GetPage+0x3a>
	  {
		  return (0x08000000 + 1024*indx);
 8000b98:	68fb      	ldr	r3, [r7, #12]
 8000b9a:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 8000b9e:	029b      	lsls	r3, r3, #10
 8000ba0:	e007      	b.n	8000bb2 <GetPage+0x4a>
  for (int indx=0; indx<128; indx++)
 8000ba2:	68fb      	ldr	r3, [r7, #12]
 8000ba4:	3301      	adds	r3, #1
 8000ba6:	60fb      	str	r3, [r7, #12]
 8000ba8:	68fb      	ldr	r3, [r7, #12]
 8000baa:	2b7f      	cmp	r3, #127	; 0x7f
 8000bac:	dde3      	ble.n	8000b76 <GetPage+0xe>
	  }
  }

  return -1;
 8000bae:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000bb2:	4618      	mov	r0, r3
 8000bb4:	3714      	adds	r7, #20
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	bc80      	pop	{r7}
 8000bba:	4770      	bx	lr

08000bbc <Flash_Write_Data>:

uint32_t Flash_Write_Data (uint32_t StartPageAddress, uint32_t * DATA_32)
{
 8000bbc:	b590      	push	{r4, r7, lr}
 8000bbe:	b089      	sub	sp, #36	; 0x24
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	6078      	str	r0, [r7, #4]
 8000bc4:	6039      	str	r1, [r7, #0]

	static FLASH_EraseInitTypeDef EraseInitStruct;
	uint32_t PAGEError;
	int sofar=0;
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	61fb      	str	r3, [r7, #28]

	int numberofwords = (strlen((char *)DATA_32)/4) + ((strlen((char *)DATA_32) % 4) != 0);
 8000bca:	6838      	ldr	r0, [r7, #0]
 8000bcc:	f7ff fac0 	bl	8000150 <strlen>
 8000bd0:	4603      	mov	r3, r0
 8000bd2:	089c      	lsrs	r4, r3, #2
 8000bd4:	6838      	ldr	r0, [r7, #0]
 8000bd6:	f7ff fabb 	bl	8000150 <strlen>
 8000bda:	4603      	mov	r3, r0
 8000bdc:	f003 0303 	and.w	r3, r3, #3
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	bf14      	ite	ne
 8000be4:	2301      	movne	r3, #1
 8000be6:	2300      	moveq	r3, #0
 8000be8:	b2db      	uxtb	r3, r3
 8000bea:	4423      	add	r3, r4
 8000bec:	61bb      	str	r3, [r7, #24]

	  /* Unlock the Flash to enable the flash control register access *************/
	   HAL_FLASH_Unlock();
 8000bee:	f003 f9af 	bl	8003f50 <HAL_FLASH_Unlock>

	   /* Erase the user Flash area*/

	  uint32_t StartPage = GetPage(StartPageAddress);
 8000bf2:	6878      	ldr	r0, [r7, #4]
 8000bf4:	f7ff ffb8 	bl	8000b68 <GetPage>
 8000bf8:	6178      	str	r0, [r7, #20]
	  uint32_t EndPageAdress = StartPageAddress + numberofwords*4;
 8000bfa:	69bb      	ldr	r3, [r7, #24]
 8000bfc:	009b      	lsls	r3, r3, #2
 8000bfe:	461a      	mov	r2, r3
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	4413      	add	r3, r2
 8000c04:	613b      	str	r3, [r7, #16]
	  uint32_t EndPage = GetPage(EndPageAdress);
 8000c06:	6938      	ldr	r0, [r7, #16]
 8000c08:	f7ff ffae 	bl	8000b68 <GetPage>
 8000c0c:	60f8      	str	r0, [r7, #12]

	   /* Fill EraseInit structure*/
	   EraseInitStruct.TypeErase   = FLASH_TYPEERASE_PAGES;
 8000c0e:	4b20      	ldr	r3, [pc, #128]	; (8000c90 <Flash_Write_Data+0xd4>)
 8000c10:	2200      	movs	r2, #0
 8000c12:	601a      	str	r2, [r3, #0]
	   EraseInitStruct.PageAddress = StartPage;
 8000c14:	4a1e      	ldr	r2, [pc, #120]	; (8000c90 <Flash_Write_Data+0xd4>)
 8000c16:	697b      	ldr	r3, [r7, #20]
 8000c18:	6093      	str	r3, [r2, #8]
	   EraseInitStruct.NbPages     = ((EndPage - StartPage)/FLASH_PAGE_SIZE) +1;
 8000c1a:	68fa      	ldr	r2, [r7, #12]
 8000c1c:	697b      	ldr	r3, [r7, #20]
 8000c1e:	1ad3      	subs	r3, r2, r3
 8000c20:	0a9b      	lsrs	r3, r3, #10
 8000c22:	3301      	adds	r3, #1
 8000c24:	4a1a      	ldr	r2, [pc, #104]	; (8000c90 <Flash_Write_Data+0xd4>)
 8000c26:	60d3      	str	r3, [r2, #12]

	   if (HAL_FLASHEx_Erase(&EraseInitStruct, &PAGEError) != HAL_OK)
 8000c28:	f107 0308 	add.w	r3, r7, #8
 8000c2c:	4619      	mov	r1, r3
 8000c2e:	4818      	ldr	r0, [pc, #96]	; (8000c90 <Flash_Write_Data+0xd4>)
 8000c30:	f003 fa76 	bl	8004120 <HAL_FLASHEx_Erase>
 8000c34:	4603      	mov	r3, r0
 8000c36:	2b00      	cmp	r3, #0
 8000c38:	d01e      	beq.n	8000c78 <Flash_Write_Data+0xbc>
	   {
	     /*Error occurred while page erase.*/
		  return HAL_FLASH_GetError ();
 8000c3a:	f003 f9b5 	bl	8003fa8 <HAL_FLASH_GetError>
 8000c3e:	4603      	mov	r3, r0
 8000c40:	e021      	b.n	8000c86 <Flash_Write_Data+0xca>

	   /* Program the user Flash area word by word*/

	   while (sofar<numberofwords)
	   {
	     if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, StartPageAddress, DATA_32[sofar]) == HAL_OK)
 8000c42:	69fb      	ldr	r3, [r7, #28]
 8000c44:	009b      	lsls	r3, r3, #2
 8000c46:	683a      	ldr	r2, [r7, #0]
 8000c48:	4413      	add	r3, r2
 8000c4a:	681b      	ldr	r3, [r3, #0]
 8000c4c:	f04f 0400 	mov.w	r4, #0
 8000c50:	461a      	mov	r2, r3
 8000c52:	4623      	mov	r3, r4
 8000c54:	6879      	ldr	r1, [r7, #4]
 8000c56:	2002      	movs	r0, #2
 8000c58:	f003 f90a 	bl	8003e70 <HAL_FLASH_Program>
 8000c5c:	4603      	mov	r3, r0
 8000c5e:	2b00      	cmp	r3, #0
 8000c60:	d106      	bne.n	8000c70 <Flash_Write_Data+0xb4>
	     {
	    	 StartPageAddress += 4;  // use StartPageAddress += 2 for half word and 8 for double word
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	3304      	adds	r3, #4
 8000c66:	607b      	str	r3, [r7, #4]
	    	 sofar++;
 8000c68:	69fb      	ldr	r3, [r7, #28]
 8000c6a:	3301      	adds	r3, #1
 8000c6c:	61fb      	str	r3, [r7, #28]
 8000c6e:	e003      	b.n	8000c78 <Flash_Write_Data+0xbc>
	     }
	     else
	     {
	       /* Error occurred while writing data in Flash memory*/
	    	 return HAL_FLASH_GetError ();
 8000c70:	f003 f99a 	bl	8003fa8 <HAL_FLASH_GetError>
 8000c74:	4603      	mov	r3, r0
 8000c76:	e006      	b.n	8000c86 <Flash_Write_Data+0xca>
	   while (sofar<numberofwords)
 8000c78:	69fa      	ldr	r2, [r7, #28]
 8000c7a:	69bb      	ldr	r3, [r7, #24]
 8000c7c:	429a      	cmp	r2, r3
 8000c7e:	dbe0      	blt.n	8000c42 <Flash_Write_Data+0x86>
	     }
	   }

	   /* Lock the Flash to disable the flash control register access (recommended
	      to protect the FLASH memory against possible unwanted operation) *********/
	   HAL_FLASH_Lock();
 8000c80:	f003 f982 	bl	8003f88 <HAL_FLASH_Lock>

	   return 0;
 8000c84:	2300      	movs	r3, #0
}
 8000c86:	4618      	mov	r0, r3
 8000c88:	3724      	adds	r7, #36	; 0x24
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	bd90      	pop	{r4, r7, pc}
 8000c8e:	bf00      	nop
 8000c90:	20000214 	.word	0x20000214

08000c94 <Flash_Read_Data>:


void Flash_Read_Data (uint32_t StartPageAddress, __IO uint32_t * DATA_32)
{
 8000c94:	b480      	push	{r7}
 8000c96:	b083      	sub	sp, #12
 8000c98:	af00      	add	r7, sp, #0
 8000c9a:	6078      	str	r0, [r7, #4]
 8000c9c:	6039      	str	r1, [r7, #0]
	while (1)
	{
		*DATA_32 = *(__IO uint32_t *)StartPageAddress;
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	681a      	ldr	r2, [r3, #0]
 8000ca2:	683b      	ldr	r3, [r7, #0]
 8000ca4:	601a      	str	r2, [r3, #0]
		if (*DATA_32 == 0xffffffff)
 8000ca6:	683b      	ldr	r3, [r7, #0]
 8000ca8:	681b      	ldr	r3, [r3, #0]
 8000caa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000cae:	d103      	bne.n	8000cb8 <Flash_Read_Data+0x24>
		{
			*DATA_32 = '\0';
 8000cb0:	683b      	ldr	r3, [r7, #0]
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	601a      	str	r2, [r3, #0]
			break;
 8000cb6:	e006      	b.n	8000cc6 <Flash_Read_Data+0x32>
		}
		StartPageAddress += 4;
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	3304      	adds	r3, #4
 8000cbc:	607b      	str	r3, [r7, #4]
		DATA_32++;
 8000cbe:	683b      	ldr	r3, [r7, #0]
 8000cc0:	3304      	adds	r3, #4
 8000cc2:	603b      	str	r3, [r7, #0]
		*DATA_32 = *(__IO uint32_t *)StartPageAddress;
 8000cc4:	e7eb      	b.n	8000c9e <Flash_Read_Data+0xa>
	}
}
 8000cc6:	bf00      	nop
 8000cc8:	370c      	adds	r7, #12
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	bc80      	pop	{r7}
 8000cce:	4770      	bx	lr

08000cd0 <Convert_To_Str>:

void Convert_To_Str (uint32_t *data, char *str)
{
 8000cd0:	b590      	push	{r4, r7, lr}
 8000cd2:	b085      	sub	sp, #20
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	6078      	str	r0, [r7, #4]
 8000cd8:	6039      	str	r1, [r7, #0]
	int numberofbytes = ((strlen((char *)data)/4) + ((strlen((char *)data) % 4) != 0)) *4;
 8000cda:	6878      	ldr	r0, [r7, #4]
 8000cdc:	f7ff fa38 	bl	8000150 <strlen>
 8000ce0:	4603      	mov	r3, r0
 8000ce2:	089c      	lsrs	r4, r3, #2
 8000ce4:	6878      	ldr	r0, [r7, #4]
 8000ce6:	f7ff fa33 	bl	8000150 <strlen>
 8000cea:	4603      	mov	r3, r0
 8000cec:	f003 0303 	and.w	r3, r3, #3
 8000cf0:	2b00      	cmp	r3, #0
 8000cf2:	bf14      	ite	ne
 8000cf4:	2301      	movne	r3, #1
 8000cf6:	2300      	moveq	r3, #0
 8000cf8:	b2db      	uxtb	r3, r3
 8000cfa:	4423      	add	r3, r4
 8000cfc:	009b      	lsls	r3, r3, #2
 8000cfe:	60bb      	str	r3, [r7, #8]

	for (int i=0; i<numberofbytes; i++)
 8000d00:	2300      	movs	r3, #0
 8000d02:	60fb      	str	r3, [r7, #12]
 8000d04:	e01b      	b.n	8000d3e <Convert_To_Str+0x6e>
	{
		str[i] = data[i/4]>>(8*(i%4));
 8000d06:	68fb      	ldr	r3, [r7, #12]
 8000d08:	2b00      	cmp	r3, #0
 8000d0a:	da00      	bge.n	8000d0e <Convert_To_Str+0x3e>
 8000d0c:	3303      	adds	r3, #3
 8000d0e:	109b      	asrs	r3, r3, #2
 8000d10:	009b      	lsls	r3, r3, #2
 8000d12:	687a      	ldr	r2, [r7, #4]
 8000d14:	4413      	add	r3, r2
 8000d16:	681a      	ldr	r2, [r3, #0]
 8000d18:	68fb      	ldr	r3, [r7, #12]
 8000d1a:	4259      	negs	r1, r3
 8000d1c:	f003 0303 	and.w	r3, r3, #3
 8000d20:	f001 0103 	and.w	r1, r1, #3
 8000d24:	bf58      	it	pl
 8000d26:	424b      	negpl	r3, r1
 8000d28:	00db      	lsls	r3, r3, #3
 8000d2a:	fa22 f103 	lsr.w	r1, r2, r3
 8000d2e:	68fb      	ldr	r3, [r7, #12]
 8000d30:	683a      	ldr	r2, [r7, #0]
 8000d32:	4413      	add	r3, r2
 8000d34:	b2ca      	uxtb	r2, r1
 8000d36:	701a      	strb	r2, [r3, #0]
	for (int i=0; i<numberofbytes; i++)
 8000d38:	68fb      	ldr	r3, [r7, #12]
 8000d3a:	3301      	adds	r3, #1
 8000d3c:	60fb      	str	r3, [r7, #12]
 8000d3e:	68fa      	ldr	r2, [r7, #12]
 8000d40:	68bb      	ldr	r3, [r7, #8]
 8000d42:	429a      	cmp	r2, r3
 8000d44:	dbdf      	blt.n	8000d06 <Convert_To_Str+0x36>
	}
}
 8000d46:	bf00      	nop
 8000d48:	3714      	adds	r7, #20
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	bd90      	pop	{r4, r7, pc}
	...

08000d50 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	b084      	sub	sp, #16
 8000d54:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig;

    /**Common config
    */
  hadc1.Instance = ADC1;
 8000d56:	4b23      	ldr	r3, [pc, #140]	; (8000de4 <MX_ADC1_Init+0x94>)
 8000d58:	4a23      	ldr	r2, [pc, #140]	; (8000de8 <MX_ADC1_Init+0x98>)
 8000d5a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000d5c:	4b21      	ldr	r3, [pc, #132]	; (8000de4 <MX_ADC1_Init+0x94>)
 8000d5e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000d62:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000d64:	4b1f      	ldr	r3, [pc, #124]	; (8000de4 <MX_ADC1_Init+0x94>)
 8000d66:	2201      	movs	r2, #1
 8000d68:	60da      	str	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000d6a:	4b1e      	ldr	r3, [pc, #120]	; (8000de4 <MX_ADC1_Init+0x94>)
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	615a      	str	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000d70:	4b1c      	ldr	r3, [pc, #112]	; (8000de4 <MX_ADC1_Init+0x94>)
 8000d72:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8000d76:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000d78:	4b1a      	ldr	r3, [pc, #104]	; (8000de4 <MX_ADC1_Init+0x94>)
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 2;
 8000d7e:	4b19      	ldr	r3, [pc, #100]	; (8000de4 <MX_ADC1_Init+0x94>)
 8000d80:	2202      	movs	r2, #2
 8000d82:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000d84:	4817      	ldr	r0, [pc, #92]	; (8000de4 <MX_ADC1_Init+0x94>)
 8000d86:	f002 f915 	bl	8002fb4 <HAL_ADC_Init>
 8000d8a:	4603      	mov	r3, r0
 8000d8c:	2b00      	cmp	r3, #0
 8000d8e:	d003      	beq.n	8000d98 <MX_ADC1_Init+0x48>
  {
    _Error_Handler(__FILE__, __LINE__);
 8000d90:	2145      	movs	r1, #69	; 0x45
 8000d92:	4816      	ldr	r0, [pc, #88]	; (8000dec <MX_ADC1_Init+0x9c>)
 8000d94:	f001 fb5e 	bl	8002454 <_Error_Handler>
  }

    /**Configure Regular Channel
    */
  sConfig.Channel = ADC_CHANNEL_8;
 8000d98:	2308      	movs	r3, #8
 8000d9a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = 1;
 8000d9c:	2301      	movs	r3, #1
 8000d9e:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000da0:	2300      	movs	r3, #0
 8000da2:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000da4:	1d3b      	adds	r3, r7, #4
 8000da6:	4619      	mov	r1, r3
 8000da8:	480e      	ldr	r0, [pc, #56]	; (8000de4 <MX_ADC1_Init+0x94>)
 8000daa:	f002 fad5 	bl	8003358 <HAL_ADC_ConfigChannel>
 8000dae:	4603      	mov	r3, r0
 8000db0:	2b00      	cmp	r3, #0
 8000db2:	d003      	beq.n	8000dbc <MX_ADC1_Init+0x6c>
  {
    _Error_Handler(__FILE__, __LINE__);
 8000db4:	214f      	movs	r1, #79	; 0x4f
 8000db6:	480d      	ldr	r0, [pc, #52]	; (8000dec <MX_ADC1_Init+0x9c>)
 8000db8:	f001 fb4c 	bl	8002454 <_Error_Handler>
  }

    /**Configure Regular Channel
    */
  sConfig.Channel = ADC_CHANNEL_7;
 8000dbc:	2307      	movs	r3, #7
 8000dbe:	607b      	str	r3, [r7, #4]
  sConfig.Rank = 2;
 8000dc0:	2302      	movs	r3, #2
 8000dc2:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000dc4:	1d3b      	adds	r3, r7, #4
 8000dc6:	4619      	mov	r1, r3
 8000dc8:	4806      	ldr	r0, [pc, #24]	; (8000de4 <MX_ADC1_Init+0x94>)
 8000dca:	f002 fac5 	bl	8003358 <HAL_ADC_ConfigChannel>
 8000dce:	4603      	mov	r3, r0
 8000dd0:	2b00      	cmp	r3, #0
 8000dd2:	d003      	beq.n	8000ddc <MX_ADC1_Init+0x8c>
  {
    _Error_Handler(__FILE__, __LINE__);
 8000dd4:	2158      	movs	r1, #88	; 0x58
 8000dd6:	4805      	ldr	r0, [pc, #20]	; (8000dec <MX_ADC1_Init+0x9c>)
 8000dd8:	f001 fb3c 	bl	8002454 <_Error_Handler>
  }

}
 8000ddc:	bf00      	nop
 8000dde:	3710      	adds	r7, #16
 8000de0:	46bd      	mov	sp, r7
 8000de2:	bd80      	pop	{r7, pc}
 8000de4:	20000690 	.word	0x20000690
 8000de8:	40012400 	.word	0x40012400
 8000dec:	0800a9f8 	.word	0x0800a9f8

08000df0 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000df0:	b580      	push	{r7, lr}
 8000df2:	b088      	sub	sp, #32
 8000df4:	af00      	add	r7, sp, #0
 8000df6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  if(adcHandle->Instance==ADC1)
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	4a28      	ldr	r2, [pc, #160]	; (8000ea0 <HAL_ADC_MspInit+0xb0>)
 8000dfe:	4293      	cmp	r3, r2
 8000e00:	d149      	bne.n	8000e96 <HAL_ADC_MspInit+0xa6>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000e02:	4b28      	ldr	r3, [pc, #160]	; (8000ea4 <HAL_ADC_MspInit+0xb4>)
 8000e04:	699b      	ldr	r3, [r3, #24]
 8000e06:	4a27      	ldr	r2, [pc, #156]	; (8000ea4 <HAL_ADC_MspInit+0xb4>)
 8000e08:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000e0c:	6193      	str	r3, [r2, #24]
 8000e0e:	4b25      	ldr	r3, [pc, #148]	; (8000ea4 <HAL_ADC_MspInit+0xb4>)
 8000e10:	699b      	ldr	r3, [r3, #24]
 8000e12:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000e16:	60fb      	str	r3, [r7, #12]
 8000e18:	68fb      	ldr	r3, [r7, #12]

    /**ADC1 GPIO Configuration
    PA7     ------> ADC1_IN7
    PB0     ------> ADC1_IN8
    */
    GPIO_InitStruct.Pin = ADC1_Pin;
 8000e1a:	2380      	movs	r3, #128	; 0x80
 8000e1c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000e1e:	2303      	movs	r3, #3
 8000e20:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(ADC1_GPIO_Port, &GPIO_InitStruct);
 8000e22:	f107 0310 	add.w	r3, r7, #16
 8000e26:	4619      	mov	r1, r3
 8000e28:	481f      	ldr	r0, [pc, #124]	; (8000ea8 <HAL_ADC_MspInit+0xb8>)
 8000e2a:	f003 fa21 	bl	8004270 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ADC2_Pin;
 8000e2e:	2301      	movs	r3, #1
 8000e30:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000e32:	2303      	movs	r3, #3
 8000e34:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(ADC2_GPIO_Port, &GPIO_InitStruct);
 8000e36:	f107 0310 	add.w	r3, r7, #16
 8000e3a:	4619      	mov	r1, r3
 8000e3c:	481b      	ldr	r0, [pc, #108]	; (8000eac <HAL_ADC_MspInit+0xbc>)
 8000e3e:	f003 fa17 	bl	8004270 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8000e42:	4b1b      	ldr	r3, [pc, #108]	; (8000eb0 <HAL_ADC_MspInit+0xc0>)
 8000e44:	4a1b      	ldr	r2, [pc, #108]	; (8000eb4 <HAL_ADC_MspInit+0xc4>)
 8000e46:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000e48:	4b19      	ldr	r3, [pc, #100]	; (8000eb0 <HAL_ADC_MspInit+0xc0>)
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000e4e:	4b18      	ldr	r3, [pc, #96]	; (8000eb0 <HAL_ADC_MspInit+0xc0>)
 8000e50:	2200      	movs	r2, #0
 8000e52:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000e54:	4b16      	ldr	r3, [pc, #88]	; (8000eb0 <HAL_ADC_MspInit+0xc0>)
 8000e56:	2280      	movs	r2, #128	; 0x80
 8000e58:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000e5a:	4b15      	ldr	r3, [pc, #84]	; (8000eb0 <HAL_ADC_MspInit+0xc0>)
 8000e5c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000e60:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000e62:	4b13      	ldr	r3, [pc, #76]	; (8000eb0 <HAL_ADC_MspInit+0xc0>)
 8000e64:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000e68:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000e6a:	4b11      	ldr	r3, [pc, #68]	; (8000eb0 <HAL_ADC_MspInit+0xc0>)
 8000e6c:	2220      	movs	r2, #32
 8000e6e:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000e70:	4b0f      	ldr	r3, [pc, #60]	; (8000eb0 <HAL_ADC_MspInit+0xc0>)
 8000e72:	2200      	movs	r2, #0
 8000e74:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000e76:	480e      	ldr	r0, [pc, #56]	; (8000eb0 <HAL_ADC_MspInit+0xc0>)
 8000e78:	f002 fd8a 	bl	8003990 <HAL_DMA_Init>
 8000e7c:	4603      	mov	r3, r0
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	d003      	beq.n	8000e8a <HAL_ADC_MspInit+0x9a>
    {
      _Error_Handler(__FILE__, __LINE__);
 8000e82:	2181      	movs	r1, #129	; 0x81
 8000e84:	480c      	ldr	r0, [pc, #48]	; (8000eb8 <HAL_ADC_MspInit+0xc8>)
 8000e86:	f001 fae5 	bl	8002454 <_Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	4a08      	ldr	r2, [pc, #32]	; (8000eb0 <HAL_ADC_MspInit+0xc0>)
 8000e8e:	621a      	str	r2, [r3, #32]
 8000e90:	4a07      	ldr	r2, [pc, #28]	; (8000eb0 <HAL_ADC_MspInit+0xc0>)
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	6253      	str	r3, [r2, #36]	; 0x24

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000e96:	bf00      	nop
 8000e98:	3720      	adds	r7, #32
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	bd80      	pop	{r7, pc}
 8000e9e:	bf00      	nop
 8000ea0:	40012400 	.word	0x40012400
 8000ea4:	40021000 	.word	0x40021000
 8000ea8:	40010800 	.word	0x40010800
 8000eac:	40010c00 	.word	0x40010c00
 8000eb0:	200006c0 	.word	0x200006c0
 8000eb4:	40020008 	.word	0x40020008
 8000eb8:	0800a9f8 	.word	0x0800a9f8

08000ebc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	b082      	sub	sp, #8
 8000ec0:	af00      	add	r7, sp, #0
  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000ec2:	4b0c      	ldr	r3, [pc, #48]	; (8000ef4 <MX_DMA_Init+0x38>)
 8000ec4:	695b      	ldr	r3, [r3, #20]
 8000ec6:	4a0b      	ldr	r2, [pc, #44]	; (8000ef4 <MX_DMA_Init+0x38>)
 8000ec8:	f043 0301 	orr.w	r3, r3, #1
 8000ecc:	6153      	str	r3, [r2, #20]
 8000ece:	4b09      	ldr	r3, [pc, #36]	; (8000ef4 <MX_DMA_Init+0x38>)
 8000ed0:	695b      	ldr	r3, [r3, #20]
 8000ed2:	f003 0301 	and.w	r3, r3, #1
 8000ed6:	607b      	str	r3, [r7, #4]
 8000ed8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000eda:	2200      	movs	r2, #0
 8000edc:	2100      	movs	r1, #0
 8000ede:	200b      	movs	r0, #11
 8000ee0:	f002 fcf7 	bl	80038d2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000ee4:	200b      	movs	r0, #11
 8000ee6:	f002 fd10 	bl	800390a <HAL_NVIC_EnableIRQ>

}
 8000eea:	bf00      	nop
 8000eec:	3708      	adds	r7, #8
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	bd80      	pop	{r7, pc}
 8000ef2:	bf00      	nop
 8000ef4:	40021000 	.word	0x40021000

08000ef8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	b088      	sub	sp, #32
 8000efc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000efe:	4b31      	ldr	r3, [pc, #196]	; (8000fc4 <MX_GPIO_Init+0xcc>)
 8000f00:	699b      	ldr	r3, [r3, #24]
 8000f02:	4a30      	ldr	r2, [pc, #192]	; (8000fc4 <MX_GPIO_Init+0xcc>)
 8000f04:	f043 0310 	orr.w	r3, r3, #16
 8000f08:	6193      	str	r3, [r2, #24]
 8000f0a:	4b2e      	ldr	r3, [pc, #184]	; (8000fc4 <MX_GPIO_Init+0xcc>)
 8000f0c:	699b      	ldr	r3, [r3, #24]
 8000f0e:	f003 0310 	and.w	r3, r3, #16
 8000f12:	60fb      	str	r3, [r7, #12]
 8000f14:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f16:	4b2b      	ldr	r3, [pc, #172]	; (8000fc4 <MX_GPIO_Init+0xcc>)
 8000f18:	699b      	ldr	r3, [r3, #24]
 8000f1a:	4a2a      	ldr	r2, [pc, #168]	; (8000fc4 <MX_GPIO_Init+0xcc>)
 8000f1c:	f043 0304 	orr.w	r3, r3, #4
 8000f20:	6193      	str	r3, [r2, #24]
 8000f22:	4b28      	ldr	r3, [pc, #160]	; (8000fc4 <MX_GPIO_Init+0xcc>)
 8000f24:	699b      	ldr	r3, [r3, #24]
 8000f26:	f003 0304 	and.w	r3, r3, #4
 8000f2a:	60bb      	str	r3, [r7, #8]
 8000f2c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f2e:	4b25      	ldr	r3, [pc, #148]	; (8000fc4 <MX_GPIO_Init+0xcc>)
 8000f30:	699b      	ldr	r3, [r3, #24]
 8000f32:	4a24      	ldr	r2, [pc, #144]	; (8000fc4 <MX_GPIO_Init+0xcc>)
 8000f34:	f043 0308 	orr.w	r3, r3, #8
 8000f38:	6193      	str	r3, [r2, #24]
 8000f3a:	4b22      	ldr	r3, [pc, #136]	; (8000fc4 <MX_GPIO_Init+0xcc>)
 8000f3c:	699b      	ldr	r3, [r3, #24]
 8000f3e:	f003 0308 	and.w	r3, r3, #8
 8000f42:	607b      	str	r3, [r7, #4]
 8000f44:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000f46:	2200      	movs	r2, #0
 8000f48:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000f4c:	481e      	ldr	r0, [pc, #120]	; (8000fc8 <MX_GPIO_Init+0xd0>)
 8000f4e:	f003 fb04 	bl	800455a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, OUTPUT_M1_Pin|OUTPUT_M2_Pin|OUTPUT_BUZZER_Pin|OUTPUT_REMOTE_Pin, GPIO_PIN_RESET);
 8000f52:	2200      	movs	r2, #0
 8000f54:	f44f 6170 	mov.w	r1, #3840	; 0xf00
 8000f58:	481c      	ldr	r0, [pc, #112]	; (8000fcc <MX_GPIO_Init+0xd4>)
 8000f5a:	f003 fafe 	bl	800455a <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000f5e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000f62:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f64:	2301      	movs	r3, #1
 8000f66:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f68:	2302      	movs	r3, #2
 8000f6a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f6c:	f107 0310 	add.w	r3, r7, #16
 8000f70:	4619      	mov	r1, r3
 8000f72:	4815      	ldr	r0, [pc, #84]	; (8000fc8 <MX_GPIO_Init+0xd0>)
 8000f74:	f003 f97c 	bl	8004270 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = INPUT_B1_Pin|INPUT_B2_Pin|INPUT_B3_Pin|INPUT_B4_Pin;
 8000f78:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8000f7c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000f7e:	4b14      	ldr	r3, [pc, #80]	; (8000fd0 <MX_GPIO_Init+0xd8>)
 8000f80:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000f82:	2302      	movs	r3, #2
 8000f84:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f86:	f107 0310 	add.w	r3, r7, #16
 8000f8a:	4619      	mov	r1, r3
 8000f8c:	4811      	ldr	r0, [pc, #68]	; (8000fd4 <MX_GPIO_Init+0xdc>)
 8000f8e:	f003 f96f 	bl	8004270 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = OUTPUT_M1_Pin|OUTPUT_M2_Pin|OUTPUT_BUZZER_Pin|OUTPUT_REMOTE_Pin;
 8000f92:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8000f96:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f98:	2301      	movs	r3, #1
 8000f9a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f9c:	2302      	movs	r3, #2
 8000f9e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fa0:	f107 0310 	add.w	r3, r7, #16
 8000fa4:	4619      	mov	r1, r3
 8000fa6:	4809      	ldr	r0, [pc, #36]	; (8000fcc <MX_GPIO_Init+0xd4>)
 8000fa8:	f003 f962 	bl	8004270 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000fac:	2200      	movs	r2, #0
 8000fae:	2100      	movs	r1, #0
 8000fb0:	2028      	movs	r0, #40	; 0x28
 8000fb2:	f002 fc8e 	bl	80038d2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000fb6:	2028      	movs	r0, #40	; 0x28
 8000fb8:	f002 fca7 	bl	800390a <HAL_NVIC_EnableIRQ>

}
 8000fbc:	bf00      	nop
 8000fbe:	3720      	adds	r7, #32
 8000fc0:	46bd      	mov	sp, r7
 8000fc2:	bd80      	pop	{r7, pc}
 8000fc4:	40021000 	.word	0x40021000
 8000fc8:	40011000 	.word	0x40011000
 8000fcc:	40010800 	.word	0x40010800
 8000fd0:	10110000 	.word	0x10110000
 8000fd4:	40010c00 	.word	0x40010c00

08000fd8 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 8000fdc:	4b13      	ldr	r3, [pc, #76]	; (800102c <MX_I2C1_Init+0x54>)
 8000fde:	4a14      	ldr	r2, [pc, #80]	; (8001030 <MX_I2C1_Init+0x58>)
 8000fe0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000fe2:	4b12      	ldr	r3, [pc, #72]	; (800102c <MX_I2C1_Init+0x54>)
 8000fe4:	4a13      	ldr	r2, [pc, #76]	; (8001034 <MX_I2C1_Init+0x5c>)
 8000fe6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000fe8:	4b10      	ldr	r3, [pc, #64]	; (800102c <MX_I2C1_Init+0x54>)
 8000fea:	2200      	movs	r2, #0
 8000fec:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000fee:	4b0f      	ldr	r3, [pc, #60]	; (800102c <MX_I2C1_Init+0x54>)
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000ff4:	4b0d      	ldr	r3, [pc, #52]	; (800102c <MX_I2C1_Init+0x54>)
 8000ff6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000ffa:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000ffc:	4b0b      	ldr	r3, [pc, #44]	; (800102c <MX_I2C1_Init+0x54>)
 8000ffe:	2200      	movs	r2, #0
 8001000:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001002:	4b0a      	ldr	r3, [pc, #40]	; (800102c <MX_I2C1_Init+0x54>)
 8001004:	2200      	movs	r2, #0
 8001006:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001008:	4b08      	ldr	r3, [pc, #32]	; (800102c <MX_I2C1_Init+0x54>)
 800100a:	2200      	movs	r2, #0
 800100c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800100e:	4b07      	ldr	r3, [pc, #28]	; (800102c <MX_I2C1_Init+0x54>)
 8001010:	2200      	movs	r2, #0
 8001012:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001014:	4805      	ldr	r0, [pc, #20]	; (800102c <MX_I2C1_Init+0x54>)
 8001016:	f003 fad1 	bl	80045bc <HAL_I2C_Init>
 800101a:	4603      	mov	r3, r0
 800101c:	2b00      	cmp	r3, #0
 800101e:	d003      	beq.n	8001028 <MX_I2C1_Init+0x50>
  {
    _Error_Handler(__FILE__, __LINE__);
 8001020:	2142      	movs	r1, #66	; 0x42
 8001022:	4805      	ldr	r0, [pc, #20]	; (8001038 <MX_I2C1_Init+0x60>)
 8001024:	f001 fa16 	bl	8002454 <_Error_Handler>
  }

}
 8001028:	bf00      	nop
 800102a:	bd80      	pop	{r7, pc}
 800102c:	20000704 	.word	0x20000704
 8001030:	40005400 	.word	0x40005400
 8001034:	000186a0 	.word	0x000186a0
 8001038:	0800aa0c 	.word	0x0800aa0c

0800103c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	b088      	sub	sp, #32
 8001040:	af00      	add	r7, sp, #0
 8001042:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  if(i2cHandle->Instance==I2C1)
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	4a0f      	ldr	r2, [pc, #60]	; (8001088 <HAL_I2C_MspInit+0x4c>)
 800104a:	4293      	cmp	r3, r2
 800104c:	d117      	bne.n	800107e <HAL_I2C_MspInit+0x42>

    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800104e:	23c0      	movs	r3, #192	; 0xc0
 8001050:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001052:	2312      	movs	r3, #18
 8001054:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001056:	2303      	movs	r3, #3
 8001058:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800105a:	f107 0310 	add.w	r3, r7, #16
 800105e:	4619      	mov	r1, r3
 8001060:	480a      	ldr	r0, [pc, #40]	; (800108c <HAL_I2C_MspInit+0x50>)
 8001062:	f003 f905 	bl	8004270 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001066:	4b0a      	ldr	r3, [pc, #40]	; (8001090 <HAL_I2C_MspInit+0x54>)
 8001068:	69db      	ldr	r3, [r3, #28]
 800106a:	4a09      	ldr	r2, [pc, #36]	; (8001090 <HAL_I2C_MspInit+0x54>)
 800106c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001070:	61d3      	str	r3, [r2, #28]
 8001072:	4b07      	ldr	r3, [pc, #28]	; (8001090 <HAL_I2C_MspInit+0x54>)
 8001074:	69db      	ldr	r3, [r3, #28]
 8001076:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800107a:	60fb      	str	r3, [r7, #12]
 800107c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 800107e:	bf00      	nop
 8001080:	3720      	adds	r7, #32
 8001082:	46bd      	mov	sp, r7
 8001084:	bd80      	pop	{r7, pc}
 8001086:	bf00      	nop
 8001088:	40005400 	.word	0x40005400
 800108c:	40010c00 	.word	0x40010c00
 8001090:	40021000 	.word	0x40021000

08001094 <motor_stop>:
/* Private function prototypes -----------------------------------------------*/

/* USER CODE END PFP */

/* USER CODE BEGIN 0 */
void motor_stop(int dir) {
 8001094:	b580      	push	{r7, lr}
 8001096:	b082      	sub	sp, #8
 8001098:	af00      	add	r7, sp, #0
 800109a:	6078      	str	r0, [r7, #4]
	if (dir >= 1) {
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	2b00      	cmp	r3, #0
 80010a0:	dd1e      	ble.n	80010e0 <motor_stop+0x4c>
		OUTPUT_1_State = 1;
 80010a2:	4b27      	ldr	r3, [pc, #156]	; (8001140 <motor_stop+0xac>)
 80010a4:	2201      	movs	r2, #1
 80010a6:	601a      	str	r2, [r3, #0]
		OUTPUT_2_State = 1;
 80010a8:	4b26      	ldr	r3, [pc, #152]	; (8001144 <motor_stop+0xb0>)
 80010aa:	2201      	movs	r2, #1
 80010ac:	601a      	str	r2, [r3, #0]
		PWM1 = 0;
 80010ae:	4b26      	ldr	r3, [pc, #152]	; (8001148 <motor_stop+0xb4>)
 80010b0:	2200      	movs	r2, #0
 80010b2:	601a      	str	r2, [r3, #0]
		PWM2 = 0;
 80010b4:	4b25      	ldr	r3, [pc, #148]	; (800114c <motor_stop+0xb8>)
 80010b6:	2200      	movs	r2, #0
 80010b8:	601a      	str	r2, [r3, #0]
		HAL_GPIO_WritePin(OUTPUT_M1_GPIO_Port, OUTPUT_M1_Pin, 1);
 80010ba:	2201      	movs	r2, #1
 80010bc:	f44f 7180 	mov.w	r1, #256	; 0x100
 80010c0:	4823      	ldr	r0, [pc, #140]	; (8001150 <motor_stop+0xbc>)
 80010c2:	f003 fa4a 	bl	800455a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(OUTPUT_M2_GPIO_Port, OUTPUT_M2_Pin, 1);
 80010c6:	2201      	movs	r2, #1
 80010c8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80010cc:	4820      	ldr	r0, [pc, #128]	; (8001150 <motor_stop+0xbc>)
 80010ce:	f003 fa44 	bl	800455a <HAL_GPIO_WritePin>
		user_pwm_setvalue_1(0);
 80010d2:	2000      	movs	r0, #0
 80010d4:	f001 fbf4 	bl	80028c0 <user_pwm_setvalue_1>
		user_pwm_setvalue_2(0);
 80010d8:	2000      	movs	r0, #0
 80010da:	f001 fc0f 	bl	80028fc <user_pwm_setvalue_2>
 80010de:	e024      	b.n	800112a <motor_stop+0x96>

	} else if (dir <= -1) {
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	da21      	bge.n	800112a <motor_stop+0x96>
		OUTPUT_1_State = 0;
 80010e6:	4b16      	ldr	r3, [pc, #88]	; (8001140 <motor_stop+0xac>)
 80010e8:	2200      	movs	r2, #0
 80010ea:	601a      	str	r2, [r3, #0]
		OUTPUT_2_State = 0;
 80010ec:	4b15      	ldr	r3, [pc, #84]	; (8001144 <motor_stop+0xb0>)
 80010ee:	2200      	movs	r2, #0
 80010f0:	601a      	str	r2, [r3, #0]
		PWM1 = 4000;
 80010f2:	4b15      	ldr	r3, [pc, #84]	; (8001148 <motor_stop+0xb4>)
 80010f4:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 80010f8:	601a      	str	r2, [r3, #0]
		PWM2 = 4000;
 80010fa:	4b14      	ldr	r3, [pc, #80]	; (800114c <motor_stop+0xb8>)
 80010fc:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 8001100:	601a      	str	r2, [r3, #0]
		HAL_GPIO_WritePin(OUTPUT_M1_GPIO_Port, OUTPUT_M1_Pin, 0);
 8001102:	2200      	movs	r2, #0
 8001104:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001108:	4811      	ldr	r0, [pc, #68]	; (8001150 <motor_stop+0xbc>)
 800110a:	f003 fa26 	bl	800455a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(OUTPUT_M2_GPIO_Port, OUTPUT_M2_Pin, 0);
 800110e:	2200      	movs	r2, #0
 8001110:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001114:	480e      	ldr	r0, [pc, #56]	; (8001150 <motor_stop+0xbc>)
 8001116:	f003 fa20 	bl	800455a <HAL_GPIO_WritePin>
		user_pwm_setvalue_1(4000);
 800111a:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 800111e:	f001 fbcf 	bl	80028c0 <user_pwm_setvalue_1>
		user_pwm_setvalue_2(4000);
 8001122:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 8001126:	f001 fbe9 	bl	80028fc <user_pwm_setvalue_2>
	}
	HAL_Delay(100);
 800112a:	2064      	movs	r0, #100	; 0x64
 800112c:	f001 ff24 	bl	8002f78 <HAL_Delay>
	motor_control(0, 0);
 8001130:	2100      	movs	r1, #0
 8001132:	2000      	movs	r0, #0
 8001134:	f000 f80e 	bl	8001154 <motor_control>
}
 8001138:	bf00      	nop
 800113a:	3708      	adds	r7, #8
 800113c:	46bd      	mov	sp, r7
 800113e:	bd80      	pop	{r7, pc}
 8001140:	20000250 	.word	0x20000250
 8001144:	20000254 	.word	0x20000254
 8001148:	20000248 	.word	0x20000248
 800114c:	2000024c 	.word	0x2000024c
 8001150:	40010800 	.word	0x40010800

08001154 <motor_control>:
void motor_control(int dir, int pwm) {
 8001154:	b580      	push	{r7, lr}
 8001156:	b082      	sub	sp, #8
 8001158:	af00      	add	r7, sp, #0
 800115a:	6078      	str	r0, [r7, #4]
 800115c:	6039      	str	r1, [r7, #0]
	if (setDir_flag >= 1) {
 800115e:	4b6a      	ldr	r3, [pc, #424]	; (8001308 <motor_control+0x1b4>)
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	2b00      	cmp	r3, #0
 8001164:	d066      	beq.n	8001234 <motor_control+0xe0>
		if (dir >= 1) {
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	2b00      	cmp	r3, #0
 800116a:	dd1e      	ble.n	80011aa <motor_control+0x56>
			OUTPUT_1_State = 1;
 800116c:	4b67      	ldr	r3, [pc, #412]	; (800130c <motor_control+0x1b8>)
 800116e:	2201      	movs	r2, #1
 8001170:	601a      	str	r2, [r3, #0]
			OUTPUT_2_State = 0;
 8001172:	4b67      	ldr	r3, [pc, #412]	; (8001310 <motor_control+0x1bc>)
 8001174:	2200      	movs	r2, #0
 8001176:	601a      	str	r2, [r3, #0]
			HAL_GPIO_WritePin(OUTPUT_M1_GPIO_Port, OUTPUT_M1_Pin, 1);
 8001178:	2201      	movs	r2, #1
 800117a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800117e:	4865      	ldr	r0, [pc, #404]	; (8001314 <motor_control+0x1c0>)
 8001180:	f003 f9eb 	bl	800455a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(OUTPUT_M2_GPIO_Port, OUTPUT_M2_Pin, 0);
 8001184:	2200      	movs	r2, #0
 8001186:	f44f 7100 	mov.w	r1, #512	; 0x200
 800118a:	4862      	ldr	r0, [pc, #392]	; (8001314 <motor_control+0x1c0>)
 800118c:	f003 f9e5 	bl	800455a <HAL_GPIO_WritePin>
			PWM1 = pwm;
 8001190:	683b      	ldr	r3, [r7, #0]
 8001192:	4a61      	ldr	r2, [pc, #388]	; (8001318 <motor_control+0x1c4>)
 8001194:	6013      	str	r3, [r2, #0]
			PWM2 = 0;
 8001196:	4b61      	ldr	r3, [pc, #388]	; (800131c <motor_control+0x1c8>)
 8001198:	2200      	movs	r2, #0
 800119a:	601a      	str	r2, [r3, #0]
			user_pwm_setvalue_1(pwm);
 800119c:	6838      	ldr	r0, [r7, #0]
 800119e:	f001 fb8f 	bl	80028c0 <user_pwm_setvalue_1>
			user_pwm_setvalue_2(0);
 80011a2:	2000      	movs	r0, #0
 80011a4:	f001 fbaa 	bl	80028fc <user_pwm_setvalue_2>
			HAL_GPIO_WritePin(OUTPUT_M2_GPIO_Port, OUTPUT_M2_Pin, 0);
			user_pwm_setvalue_1(0);
			user_pwm_setvalue_2(0);
		}
	}
}
 80011a8:	e0a9      	b.n	80012fe <motor_control+0x1aa>
		} else if (dir <= -1) {
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	da1e      	bge.n	80011ee <motor_control+0x9a>
			OUTPUT_1_State = 0;
 80011b0:	4b56      	ldr	r3, [pc, #344]	; (800130c <motor_control+0x1b8>)
 80011b2:	2200      	movs	r2, #0
 80011b4:	601a      	str	r2, [r3, #0]
			OUTPUT_2_State = 1;
 80011b6:	4b56      	ldr	r3, [pc, #344]	; (8001310 <motor_control+0x1bc>)
 80011b8:	2201      	movs	r2, #1
 80011ba:	601a      	str	r2, [r3, #0]
			HAL_GPIO_WritePin(OUTPUT_M1_GPIO_Port, OUTPUT_M1_Pin, 0);
 80011bc:	2200      	movs	r2, #0
 80011be:	f44f 7180 	mov.w	r1, #256	; 0x100
 80011c2:	4854      	ldr	r0, [pc, #336]	; (8001314 <motor_control+0x1c0>)
 80011c4:	f003 f9c9 	bl	800455a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(OUTPUT_M2_GPIO_Port, OUTPUT_M2_Pin, 1);
 80011c8:	2201      	movs	r2, #1
 80011ca:	f44f 7100 	mov.w	r1, #512	; 0x200
 80011ce:	4851      	ldr	r0, [pc, #324]	; (8001314 <motor_control+0x1c0>)
 80011d0:	f003 f9c3 	bl	800455a <HAL_GPIO_WritePin>
			PWM1 = 0;
 80011d4:	4b50      	ldr	r3, [pc, #320]	; (8001318 <motor_control+0x1c4>)
 80011d6:	2200      	movs	r2, #0
 80011d8:	601a      	str	r2, [r3, #0]
			PWM2 = pwm;
 80011da:	683b      	ldr	r3, [r7, #0]
 80011dc:	4a4f      	ldr	r2, [pc, #316]	; (800131c <motor_control+0x1c8>)
 80011de:	6013      	str	r3, [r2, #0]
			user_pwm_setvalue_1(0);
 80011e0:	2000      	movs	r0, #0
 80011e2:	f001 fb6d 	bl	80028c0 <user_pwm_setvalue_1>
			user_pwm_setvalue_2(pwm);
 80011e6:	6838      	ldr	r0, [r7, #0]
 80011e8:	f001 fb88 	bl	80028fc <user_pwm_setvalue_2>
}
 80011ec:	e087      	b.n	80012fe <motor_control+0x1aa>
		} else if (dir == 0) {
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	f040 8084 	bne.w	80012fe <motor_control+0x1aa>
			OUTPUT_1_State = 0;
 80011f6:	4b45      	ldr	r3, [pc, #276]	; (800130c <motor_control+0x1b8>)
 80011f8:	2200      	movs	r2, #0
 80011fa:	601a      	str	r2, [r3, #0]
			OUTPUT_2_State = 0;
 80011fc:	4b44      	ldr	r3, [pc, #272]	; (8001310 <motor_control+0x1bc>)
 80011fe:	2200      	movs	r2, #0
 8001200:	601a      	str	r2, [r3, #0]
			PWM1 = 0;
 8001202:	4b45      	ldr	r3, [pc, #276]	; (8001318 <motor_control+0x1c4>)
 8001204:	2200      	movs	r2, #0
 8001206:	601a      	str	r2, [r3, #0]
			PWM2 = 0;
 8001208:	4b44      	ldr	r3, [pc, #272]	; (800131c <motor_control+0x1c8>)
 800120a:	2200      	movs	r2, #0
 800120c:	601a      	str	r2, [r3, #0]
			HAL_GPIO_WritePin(OUTPUT_M1_GPIO_Port, OUTPUT_M1_Pin, 0);
 800120e:	2200      	movs	r2, #0
 8001210:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001214:	483f      	ldr	r0, [pc, #252]	; (8001314 <motor_control+0x1c0>)
 8001216:	f003 f9a0 	bl	800455a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(OUTPUT_M2_GPIO_Port, OUTPUT_M2_Pin, 0);
 800121a:	2200      	movs	r2, #0
 800121c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001220:	483c      	ldr	r0, [pc, #240]	; (8001314 <motor_control+0x1c0>)
 8001222:	f003 f99a 	bl	800455a <HAL_GPIO_WritePin>
			user_pwm_setvalue_1(0);
 8001226:	2000      	movs	r0, #0
 8001228:	f001 fb4a 	bl	80028c0 <user_pwm_setvalue_1>
			user_pwm_setvalue_2(0);
 800122c:	2000      	movs	r0, #0
 800122e:	f001 fb65 	bl	80028fc <user_pwm_setvalue_2>
}
 8001232:	e064      	b.n	80012fe <motor_control+0x1aa>
		if (dir <= -1) {
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	2b00      	cmp	r3, #0
 8001238:	da1e      	bge.n	8001278 <motor_control+0x124>
			OUTPUT_1_State = 1;
 800123a:	4b34      	ldr	r3, [pc, #208]	; (800130c <motor_control+0x1b8>)
 800123c:	2201      	movs	r2, #1
 800123e:	601a      	str	r2, [r3, #0]
			OUTPUT_2_State = 0;
 8001240:	4b33      	ldr	r3, [pc, #204]	; (8001310 <motor_control+0x1bc>)
 8001242:	2200      	movs	r2, #0
 8001244:	601a      	str	r2, [r3, #0]
			HAL_GPIO_WritePin(OUTPUT_M1_GPIO_Port, OUTPUT_M1_Pin, 1);
 8001246:	2201      	movs	r2, #1
 8001248:	f44f 7180 	mov.w	r1, #256	; 0x100
 800124c:	4831      	ldr	r0, [pc, #196]	; (8001314 <motor_control+0x1c0>)
 800124e:	f003 f984 	bl	800455a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(OUTPUT_M2_GPIO_Port, OUTPUT_M2_Pin, 0);
 8001252:	2200      	movs	r2, #0
 8001254:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001258:	482e      	ldr	r0, [pc, #184]	; (8001314 <motor_control+0x1c0>)
 800125a:	f003 f97e 	bl	800455a <HAL_GPIO_WritePin>
			PWM1 = pwm;
 800125e:	683b      	ldr	r3, [r7, #0]
 8001260:	4a2d      	ldr	r2, [pc, #180]	; (8001318 <motor_control+0x1c4>)
 8001262:	6013      	str	r3, [r2, #0]
			PWM2 = 0;
 8001264:	4b2d      	ldr	r3, [pc, #180]	; (800131c <motor_control+0x1c8>)
 8001266:	2200      	movs	r2, #0
 8001268:	601a      	str	r2, [r3, #0]
			user_pwm_setvalue_1(pwm);
 800126a:	6838      	ldr	r0, [r7, #0]
 800126c:	f001 fb28 	bl	80028c0 <user_pwm_setvalue_1>
			user_pwm_setvalue_2(0);
 8001270:	2000      	movs	r0, #0
 8001272:	f001 fb43 	bl	80028fc <user_pwm_setvalue_2>
}
 8001276:	e042      	b.n	80012fe <motor_control+0x1aa>
		} else if (dir >= 1) {
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	2b00      	cmp	r3, #0
 800127c:	dd1e      	ble.n	80012bc <motor_control+0x168>
			OUTPUT_1_State = 0;
 800127e:	4b23      	ldr	r3, [pc, #140]	; (800130c <motor_control+0x1b8>)
 8001280:	2200      	movs	r2, #0
 8001282:	601a      	str	r2, [r3, #0]
			OUTPUT_2_State = 1;
 8001284:	4b22      	ldr	r3, [pc, #136]	; (8001310 <motor_control+0x1bc>)
 8001286:	2201      	movs	r2, #1
 8001288:	601a      	str	r2, [r3, #0]
			HAL_GPIO_WritePin(OUTPUT_M1_GPIO_Port, OUTPUT_M1_Pin, 0);
 800128a:	2200      	movs	r2, #0
 800128c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001290:	4820      	ldr	r0, [pc, #128]	; (8001314 <motor_control+0x1c0>)
 8001292:	f003 f962 	bl	800455a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(OUTPUT_M2_GPIO_Port, OUTPUT_M2_Pin, 1);
 8001296:	2201      	movs	r2, #1
 8001298:	f44f 7100 	mov.w	r1, #512	; 0x200
 800129c:	481d      	ldr	r0, [pc, #116]	; (8001314 <motor_control+0x1c0>)
 800129e:	f003 f95c 	bl	800455a <HAL_GPIO_WritePin>
			PWM1 = 0;
 80012a2:	4b1d      	ldr	r3, [pc, #116]	; (8001318 <motor_control+0x1c4>)
 80012a4:	2200      	movs	r2, #0
 80012a6:	601a      	str	r2, [r3, #0]
			PWM2 = pwm;
 80012a8:	683b      	ldr	r3, [r7, #0]
 80012aa:	4a1c      	ldr	r2, [pc, #112]	; (800131c <motor_control+0x1c8>)
 80012ac:	6013      	str	r3, [r2, #0]
			user_pwm_setvalue_1(0);
 80012ae:	2000      	movs	r0, #0
 80012b0:	f001 fb06 	bl	80028c0 <user_pwm_setvalue_1>
			user_pwm_setvalue_2(pwm);
 80012b4:	6838      	ldr	r0, [r7, #0]
 80012b6:	f001 fb21 	bl	80028fc <user_pwm_setvalue_2>
}
 80012ba:	e020      	b.n	80012fe <motor_control+0x1aa>
		} else if (dir == 0) {
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d11d      	bne.n	80012fe <motor_control+0x1aa>
			OUTPUT_1_State = 0;
 80012c2:	4b12      	ldr	r3, [pc, #72]	; (800130c <motor_control+0x1b8>)
 80012c4:	2200      	movs	r2, #0
 80012c6:	601a      	str	r2, [r3, #0]
			OUTPUT_2_State = 0;
 80012c8:	4b11      	ldr	r3, [pc, #68]	; (8001310 <motor_control+0x1bc>)
 80012ca:	2200      	movs	r2, #0
 80012cc:	601a      	str	r2, [r3, #0]
			PWM1 = 0;
 80012ce:	4b12      	ldr	r3, [pc, #72]	; (8001318 <motor_control+0x1c4>)
 80012d0:	2200      	movs	r2, #0
 80012d2:	601a      	str	r2, [r3, #0]
			PWM2 = 0;
 80012d4:	4b11      	ldr	r3, [pc, #68]	; (800131c <motor_control+0x1c8>)
 80012d6:	2200      	movs	r2, #0
 80012d8:	601a      	str	r2, [r3, #0]
			HAL_GPIO_WritePin(OUTPUT_M1_GPIO_Port, OUTPUT_M1_Pin, 0);
 80012da:	2200      	movs	r2, #0
 80012dc:	f44f 7180 	mov.w	r1, #256	; 0x100
 80012e0:	480c      	ldr	r0, [pc, #48]	; (8001314 <motor_control+0x1c0>)
 80012e2:	f003 f93a 	bl	800455a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(OUTPUT_M2_GPIO_Port, OUTPUT_M2_Pin, 0);
 80012e6:	2200      	movs	r2, #0
 80012e8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80012ec:	4809      	ldr	r0, [pc, #36]	; (8001314 <motor_control+0x1c0>)
 80012ee:	f003 f934 	bl	800455a <HAL_GPIO_WritePin>
			user_pwm_setvalue_1(0);
 80012f2:	2000      	movs	r0, #0
 80012f4:	f001 fae4 	bl	80028c0 <user_pwm_setvalue_1>
			user_pwm_setvalue_2(0);
 80012f8:	2000      	movs	r0, #0
 80012fa:	f001 faff 	bl	80028fc <user_pwm_setvalue_2>
}
 80012fe:	bf00      	nop
 8001300:	3708      	adds	r7, #8
 8001302:	46bd      	mov	sp, r7
 8001304:	bd80      	pop	{r7, pc}
 8001306:	bf00      	nop
 8001308:	20000264 	.word	0x20000264
 800130c:	20000250 	.word	0x20000250
 8001310:	20000254 	.word	0x20000254
 8001314:	40010800 	.word	0x40010800
 8001318:	20000248 	.word	0x20000248
 800131c:	2000024c 	.word	0x2000024c

08001320 <WriteSet>:

void WriteSet(int dataInt1, int dataInt2, int dataInt3, int dataInt4,
		int dataInt5, int dataInt6) {
 8001320:	b580      	push	{r7, lr}
 8001322:	b088      	sub	sp, #32
 8001324:	af04      	add	r7, sp, #16
 8001326:	60f8      	str	r0, [r7, #12]
 8001328:	60b9      	str	r1, [r7, #8]
 800132a:	607a      	str	r2, [r7, #4]
 800132c:	603b      	str	r3, [r7, #0]
	//sprintf(*tempString,"%s%s%s%s%s",dataInt1,dataInt2,dataInt3,dataInt4,dataInt5);
	sprintf(tempString, "%4d%4d%4d%4d%4d%4d", dataInt1, dataInt2, dataInt3,
 800132e:	69fb      	ldr	r3, [r7, #28]
 8001330:	9303      	str	r3, [sp, #12]
 8001332:	69bb      	ldr	r3, [r7, #24]
 8001334:	9302      	str	r3, [sp, #8]
 8001336:	683b      	ldr	r3, [r7, #0]
 8001338:	9301      	str	r3, [sp, #4]
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	9300      	str	r3, [sp, #0]
 800133e:	68bb      	ldr	r3, [r7, #8]
 8001340:	68fa      	ldr	r2, [r7, #12]
 8001342:	4906      	ldr	r1, [pc, #24]	; (800135c <WriteSet+0x3c>)
 8001344:	4806      	ldr	r0, [pc, #24]	; (8001360 <WriteSet+0x40>)
 8001346:	f006 fc4b 	bl	8007be0 <siprintf>
			dataInt4, dataInt5, dataInt6);
	Flash_Write_Data(0x0801FBF8, tempString);
 800134a:	4905      	ldr	r1, [pc, #20]	; (8001360 <WriteSet+0x40>)
 800134c:	4805      	ldr	r0, [pc, #20]	; (8001364 <WriteSet+0x44>)
 800134e:	f7ff fc35 	bl	8000bbc <Flash_Write_Data>
}
 8001352:	bf00      	nop
 8001354:	3710      	adds	r7, #16
 8001356:	46bd      	mov	sp, r7
 8001358:	bd80      	pop	{r7, pc}
 800135a:	bf00      	nop
 800135c:	0800aa2c 	.word	0x0800aa2c
 8001360:	20000974 	.word	0x20000974
 8001364:	0801fbf8 	.word	0x0801fbf8

08001368 <KeepSet>:
void KeepSet() {
 8001368:	b5b0      	push	{r4, r5, r7, lr}
 800136a:	b082      	sub	sp, #8
 800136c:	af02      	add	r7, sp, #8
	WriteSet(nowPosition, stayPositionUp, stayPositionDown, sensitivity,
 800136e:	4b0b      	ldr	r3, [pc, #44]	; (800139c <KeepSet+0x34>)
 8001370:	6818      	ldr	r0, [r3, #0]
 8001372:	4b0b      	ldr	r3, [pc, #44]	; (80013a0 <KeepSet+0x38>)
 8001374:	6819      	ldr	r1, [r3, #0]
 8001376:	4b0b      	ldr	r3, [pc, #44]	; (80013a4 <KeepSet+0x3c>)
 8001378:	681c      	ldr	r4, [r3, #0]
 800137a:	4b0b      	ldr	r3, [pc, #44]	; (80013a8 <KeepSet+0x40>)
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	461d      	mov	r5, r3
 8001380:	4b0a      	ldr	r3, [pc, #40]	; (80013ac <KeepSet+0x44>)
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	4a0a      	ldr	r2, [pc, #40]	; (80013b0 <KeepSet+0x48>)
 8001386:	6812      	ldr	r2, [r2, #0]
 8001388:	9201      	str	r2, [sp, #4]
 800138a:	9300      	str	r3, [sp, #0]
 800138c:	462b      	mov	r3, r5
 800138e:	4622      	mov	r2, r4
 8001390:	f7ff ffc6 	bl	8001320 <WriteSet>
			slowValue, setDir_flag);
}
 8001394:	bf00      	nop
 8001396:	46bd      	mov	sp, r7
 8001398:	bdb0      	pop	{r4, r5, r7, pc}
 800139a:	bf00      	nop
 800139c:	20000238 	.word	0x20000238
 80013a0:	2000023c 	.word	0x2000023c
 80013a4:	20000008 	.word	0x20000008
 80013a8:	20000004 	.word	0x20000004
 80013ac:	2000000c 	.word	0x2000000c
 80013b0:	20000264 	.word	0x20000264

080013b4 <ReadSet>:
void ReadSet() {
 80013b4:	b590      	push	{r4, r7, lr}
 80013b6:	b08b      	sub	sp, #44	; 0x2c
 80013b8:	af00      	add	r7, sp, #0
	Flash_Read_Data(0x0801FBF8, Rx_Data);
 80013ba:	492d      	ldr	r1, [pc, #180]	; (8001470 <ReadSet+0xbc>)
 80013bc:	482d      	ldr	r0, [pc, #180]	; (8001474 <ReadSet+0xc0>)
 80013be:	f7ff fc69 	bl	8000c94 <Flash_Read_Data>
	Convert_To_Str(Rx_Data, string);
 80013c2:	492d      	ldr	r1, [pc, #180]	; (8001478 <ReadSet+0xc4>)
 80013c4:	482a      	ldr	r0, [pc, #168]	; (8001470 <ReadSet+0xbc>)
 80013c6:	f7ff fc83 	bl	8000cd0 <Convert_To_Str>
	int xx[6] = { 0 };
 80013ca:	f107 0308 	add.w	r3, r7, #8
 80013ce:	2200      	movs	r2, #0
 80013d0:	601a      	str	r2, [r3, #0]
 80013d2:	605a      	str	r2, [r3, #4]
 80013d4:	609a      	str	r2, [r3, #8]
 80013d6:	60da      	str	r2, [r3, #12]
 80013d8:	611a      	str	r2, [r3, #16]
 80013da:	615a      	str	r2, [r3, #20]
	int xflag = 0;
 80013dc:	2300      	movs	r3, #0
 80013de:	627b      	str	r3, [r7, #36]	; 0x24
	for (int x = 0; x < 23; x = x + 4) {
 80013e0:	2300      	movs	r3, #0
 80013e2:	623b      	str	r3, [r7, #32]
 80013e4:	e029      	b.n	800143a <ReadSet+0x86>
		char temp[5];
		temp[0] = string[x];
 80013e6:	4a24      	ldr	r2, [pc, #144]	; (8001478 <ReadSet+0xc4>)
 80013e8:	6a3b      	ldr	r3, [r7, #32]
 80013ea:	4413      	add	r3, r2
 80013ec:	781b      	ldrb	r3, [r3, #0]
 80013ee:	703b      	strb	r3, [r7, #0]
		temp[1] = string[x + 1];
 80013f0:	6a3b      	ldr	r3, [r7, #32]
 80013f2:	3301      	adds	r3, #1
 80013f4:	4a20      	ldr	r2, [pc, #128]	; (8001478 <ReadSet+0xc4>)
 80013f6:	5cd3      	ldrb	r3, [r2, r3]
 80013f8:	707b      	strb	r3, [r7, #1]
		temp[2] = string[x + 2];
 80013fa:	6a3b      	ldr	r3, [r7, #32]
 80013fc:	3302      	adds	r3, #2
 80013fe:	4a1e      	ldr	r2, [pc, #120]	; (8001478 <ReadSet+0xc4>)
 8001400:	5cd3      	ldrb	r3, [r2, r3]
 8001402:	70bb      	strb	r3, [r7, #2]
		temp[3] = string[x + 3];
 8001404:	6a3b      	ldr	r3, [r7, #32]
 8001406:	3303      	adds	r3, #3
 8001408:	4a1b      	ldr	r2, [pc, #108]	; (8001478 <ReadSet+0xc4>)
 800140a:	5cd3      	ldrb	r3, [r2, r3]
 800140c:	70fb      	strb	r3, [r7, #3]
		temp[4] = '\0';
 800140e:	2300      	movs	r3, #0
 8001410:	713b      	strb	r3, [r7, #4]

		xx[xflag++] = atoi(temp);
 8001412:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 8001414:	1c63      	adds	r3, r4, #1
 8001416:	627b      	str	r3, [r7, #36]	; 0x24
 8001418:	463b      	mov	r3, r7
 800141a:	4618      	mov	r0, r3
 800141c:	f005 fd1e 	bl	8006e5c <atoi>
 8001420:	4602      	mov	r2, r0
 8001422:	00a3      	lsls	r3, r4, #2
 8001424:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8001428:	440b      	add	r3, r1
 800142a:	f843 2c20 	str.w	r2, [r3, #-32]
		HAL_Delay(1);
 800142e:	2001      	movs	r0, #1
 8001430:	f001 fda2 	bl	8002f78 <HAL_Delay>
	for (int x = 0; x < 23; x = x + 4) {
 8001434:	6a3b      	ldr	r3, [r7, #32]
 8001436:	3304      	adds	r3, #4
 8001438:	623b      	str	r3, [r7, #32]
 800143a:	6a3b      	ldr	r3, [r7, #32]
 800143c:	2b16      	cmp	r3, #22
 800143e:	ddd2      	ble.n	80013e6 <ReadSet+0x32>
	}
	nowPosition = xx[0];
 8001440:	68bb      	ldr	r3, [r7, #8]
 8001442:	4a0e      	ldr	r2, [pc, #56]	; (800147c <ReadSet+0xc8>)
 8001444:	6013      	str	r3, [r2, #0]
	stayPositionUp = xx[1];
 8001446:	68fb      	ldr	r3, [r7, #12]
 8001448:	4a0d      	ldr	r2, [pc, #52]	; (8001480 <ReadSet+0xcc>)
 800144a:	6013      	str	r3, [r2, #0]
	stayPositionDown = xx[2];
 800144c:	693b      	ldr	r3, [r7, #16]
 800144e:	4a0d      	ldr	r2, [pc, #52]	; (8001484 <ReadSet+0xd0>)
 8001450:	6013      	str	r3, [r2, #0]
	sensitivity = xx[3];
 8001452:	697b      	ldr	r3, [r7, #20]
 8001454:	461a      	mov	r2, r3
 8001456:	4b0c      	ldr	r3, [pc, #48]	; (8001488 <ReadSet+0xd4>)
 8001458:	601a      	str	r2, [r3, #0]
	slowValue = xx[4];
 800145a:	69bb      	ldr	r3, [r7, #24]
 800145c:	4a0b      	ldr	r2, [pc, #44]	; (800148c <ReadSet+0xd8>)
 800145e:	6013      	str	r3, [r2, #0]
	setDir_flag = xx[5];
 8001460:	69fb      	ldr	r3, [r7, #28]
 8001462:	461a      	mov	r2, r3
 8001464:	4b0a      	ldr	r3, [pc, #40]	; (8001490 <ReadSet+0xdc>)
 8001466:	601a      	str	r2, [r3, #0]
	//Convert_To_Str(Rx_Data, string);
}
 8001468:	bf00      	nop
 800146a:	372c      	adds	r7, #44	; 0x2c
 800146c:	46bd      	mov	sp, r7
 800146e:	bd90      	pop	{r4, r7, pc}
 8001470:	20000960 	.word	0x20000960
 8001474:	0801fbf8 	.word	0x0801fbf8
 8001478:	2000079c 	.word	0x2000079c
 800147c:	20000238 	.word	0x20000238
 8001480:	2000023c 	.word	0x2000023c
 8001484:	20000008 	.word	0x20000008
 8001488:	20000004 	.word	0x20000004
 800148c:	2000000c 	.word	0x2000000c
 8001490:	20000264 	.word	0x20000264

08001494 <stepControl>:
		sysinfo_State = 0;
		detection_load(0, 50);
		motor_control(0, 0);
	}
}
void stepControl() {
 8001494:	b580      	push	{r7, lr}
 8001496:	b086      	sub	sp, #24
 8001498:	af00      	add	r7, sp, #0
	int stopFlag=0;
 800149a:	2300      	movs	r3, #0
 800149c:	617b      	str	r3, [r7, #20]
	switch (dir_flag) {
 800149e:	4b9d      	ldr	r3, [pc, #628]	; (8001714 <stepControl+0x280>)
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	2b01      	cmp	r3, #1
 80014a4:	d003      	beq.n	80014ae <stepControl+0x1a>
 80014a6:	2b04      	cmp	r3, #4
 80014a8:	f000 8096 	beq.w	80015d8 <stepControl+0x144>
		motor_stop(-1);
		dir_flag = 0;
		break;
	default:
		//motor_control(0, 0);
		break;
 80014ac:	e12d      	b.n	800170a <stepControl+0x276>
		if (nowPosition > stayPositionUp) {
 80014ae:	4b9a      	ldr	r3, [pc, #616]	; (8001718 <stepControl+0x284>)
 80014b0:	681a      	ldr	r2, [r3, #0]
 80014b2:	4b9a      	ldr	r3, [pc, #616]	; (800171c <stepControl+0x288>)
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	429a      	cmp	r2, r3
 80014b8:	dd7f      	ble.n	80015ba <stepControl+0x126>
			motor_control(1, 1500);
 80014ba:	f240 51dc 	movw	r1, #1500	; 0x5dc
 80014be:	2001      	movs	r0, #1
 80014c0:	f7ff fe48 	bl	8001154 <motor_control>
			for (int x = 0; x < slowValue; x++) {
 80014c4:	2300      	movs	r3, #0
 80014c6:	613b      	str	r3, [r7, #16]
 80014c8:	e01c      	b.n	8001504 <stepControl+0x70>
				HAL_Delay(100);
 80014ca:	2064      	movs	r0, #100	; 0x64
 80014cc:	f001 fd54 	bl	8002f78 <HAL_Delay>
				if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_13) == GPIO_PIN_SET
 80014d0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80014d4:	4892      	ldr	r0, [pc, #584]	; (8001720 <stepControl+0x28c>)
 80014d6:	f003 f829 	bl	800452c <HAL_GPIO_ReadPin>
 80014da:	4603      	mov	r3, r0
 80014dc:	2b01      	cmp	r3, #1
 80014de:	d008      	beq.n	80014f2 <stepControl+0x5e>
						|| detection_load(1, sensitivity)) {
 80014e0:	4b90      	ldr	r3, [pc, #576]	; (8001724 <stepControl+0x290>)
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	4619      	mov	r1, r3
 80014e6:	2001      	movs	r0, #1
 80014e8:	f000 f9c4 	bl	8001874 <detection_load>
 80014ec:	4603      	mov	r3, r0
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d005      	beq.n	80014fe <stepControl+0x6a>
					dir_flag = 0;
 80014f2:	4b88      	ldr	r3, [pc, #544]	; (8001714 <stepControl+0x280>)
 80014f4:	2200      	movs	r2, #0
 80014f6:	601a      	str	r2, [r3, #0]
					stopFlag=1;
 80014f8:	2301      	movs	r3, #1
 80014fa:	617b      	str	r3, [r7, #20]
					break;
 80014fc:	e007      	b.n	800150e <stepControl+0x7a>
			for (int x = 0; x < slowValue; x++) {
 80014fe:	693b      	ldr	r3, [r7, #16]
 8001500:	3301      	adds	r3, #1
 8001502:	613b      	str	r3, [r7, #16]
 8001504:	4b88      	ldr	r3, [pc, #544]	; (8001728 <stepControl+0x294>)
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	693a      	ldr	r2, [r7, #16]
 800150a:	429a      	cmp	r2, r3
 800150c:	dbdd      	blt.n	80014ca <stepControl+0x36>
		while (nowPosition > stayPositionUp) {
 800150e:	e054      	b.n	80015ba <stepControl+0x126>
			if(stopFlag==1)break;
 8001510:	697b      	ldr	r3, [r7, #20]
 8001512:	2b01      	cmp	r3, #1
 8001514:	d058      	beq.n	80015c8 <stepControl+0x134>
			motor_control(1, 4000);
 8001516:	f44f 617a 	mov.w	r1, #4000	; 0xfa0
 800151a:	2001      	movs	r0, #1
 800151c:	f7ff fe1a 	bl	8001154 <motor_control>
			HAL_Delay(20);
 8001520:	2014      	movs	r0, #20
 8001522:	f001 fd29 	bl	8002f78 <HAL_Delay>
			detection_load(0, sensitivity);
 8001526:	4b7f      	ldr	r3, [pc, #508]	; (8001724 <stepControl+0x290>)
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	4619      	mov	r1, r3
 800152c:	2000      	movs	r0, #0
 800152e:	f000 f9a1 	bl	8001874 <detection_load>
			nowPosition--;
 8001532:	4b79      	ldr	r3, [pc, #484]	; (8001718 <stepControl+0x284>)
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	3b01      	subs	r3, #1
 8001538:	4a77      	ldr	r2, [pc, #476]	; (8001718 <stepControl+0x284>)
 800153a:	6013      	str	r3, [r2, #0]
			for (int timer = 0; timer < 5; timer++) {
 800153c:	2300      	movs	r3, #0
 800153e:	60fb      	str	r3, [r7, #12]
 8001540:	e021      	b.n	8001586 <stepControl+0xf2>
				HAL_Delay(1);
 8001542:	2001      	movs	r0, #1
 8001544:	f001 fd18 	bl	8002f78 <HAL_Delay>
				Display(settingMode);
 8001548:	4b78      	ldr	r3, [pc, #480]	; (800172c <stepControl+0x298>)
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	4618      	mov	r0, r3
 800154e:	f000 f9cf 	bl	80018f0 <Display>
				if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_13) == GPIO_PIN_SET
 8001552:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001556:	4872      	ldr	r0, [pc, #456]	; (8001720 <stepControl+0x28c>)
 8001558:	f002 ffe8 	bl	800452c <HAL_GPIO_ReadPin>
 800155c:	4603      	mov	r3, r0
 800155e:	2b01      	cmp	r3, #1
 8001560:	d008      	beq.n	8001574 <stepControl+0xe0>
						|| detection_load(1, sensitivity)) {
 8001562:	4b70      	ldr	r3, [pc, #448]	; (8001724 <stepControl+0x290>)
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	4619      	mov	r1, r3
 8001568:	2001      	movs	r0, #1
 800156a:	f000 f983 	bl	8001874 <detection_load>
 800156e:	4603      	mov	r3, r0
 8001570:	2b00      	cmp	r3, #0
 8001572:	d005      	beq.n	8001580 <stepControl+0xec>
					dir_flag = 0;
 8001574:	4b67      	ldr	r3, [pc, #412]	; (8001714 <stepControl+0x280>)
 8001576:	2200      	movs	r2, #0
 8001578:	601a      	str	r2, [r3, #0]
					stopFlag=1;
 800157a:	2301      	movs	r3, #1
 800157c:	617b      	str	r3, [r7, #20]
					break;
 800157e:	e005      	b.n	800158c <stepControl+0xf8>
			for (int timer = 0; timer < 5; timer++) {
 8001580:	68fb      	ldr	r3, [r7, #12]
 8001582:	3301      	adds	r3, #1
 8001584:	60fb      	str	r3, [r7, #12]
 8001586:	68fb      	ldr	r3, [r7, #12]
 8001588:	2b04      	cmp	r3, #4
 800158a:	ddda      	ble.n	8001542 <stepControl+0xae>
			if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_13) == GPIO_PIN_SET
 800158c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001590:	4863      	ldr	r0, [pc, #396]	; (8001720 <stepControl+0x28c>)
 8001592:	f002 ffcb 	bl	800452c <HAL_GPIO_ReadPin>
 8001596:	4603      	mov	r3, r0
 8001598:	2b01      	cmp	r3, #1
 800159a:	d008      	beq.n	80015ae <stepControl+0x11a>
					|| detection_load(1, sensitivity)) {
 800159c:	4b61      	ldr	r3, [pc, #388]	; (8001724 <stepControl+0x290>)
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	4619      	mov	r1, r3
 80015a2:	2001      	movs	r0, #1
 80015a4:	f000 f966 	bl	8001874 <detection_load>
 80015a8:	4603      	mov	r3, r0
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d005      	beq.n	80015ba <stepControl+0x126>
				dir_flag = 0;
 80015ae:	4b59      	ldr	r3, [pc, #356]	; (8001714 <stepControl+0x280>)
 80015b0:	2200      	movs	r2, #0
 80015b2:	601a      	str	r2, [r3, #0]
				stopFlag=1;
 80015b4:	2301      	movs	r3, #1
 80015b6:	617b      	str	r3, [r7, #20]
				break;
 80015b8:	e007      	b.n	80015ca <stepControl+0x136>
		while (nowPosition > stayPositionUp) {
 80015ba:	4b57      	ldr	r3, [pc, #348]	; (8001718 <stepControl+0x284>)
 80015bc:	681a      	ldr	r2, [r3, #0]
 80015be:	4b57      	ldr	r3, [pc, #348]	; (800171c <stepControl+0x288>)
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	429a      	cmp	r2, r3
 80015c4:	dca4      	bgt.n	8001510 <stepControl+0x7c>
 80015c6:	e000      	b.n	80015ca <stepControl+0x136>
			if(stopFlag==1)break;
 80015c8:	bf00      	nop
		motor_stop(1);
 80015ca:	2001      	movs	r0, #1
 80015cc:	f7ff fd62 	bl	8001094 <motor_stop>
		dir_flag = 0;
 80015d0:	4b50      	ldr	r3, [pc, #320]	; (8001714 <stepControl+0x280>)
 80015d2:	2200      	movs	r2, #0
 80015d4:	601a      	str	r2, [r3, #0]
		break;
 80015d6:	e098      	b.n	800170a <stepControl+0x276>
		if (nowPosition < stayPositionDown) {
 80015d8:	4b4f      	ldr	r3, [pc, #316]	; (8001718 <stepControl+0x284>)
 80015da:	681a      	ldr	r2, [r3, #0]
 80015dc:	4b54      	ldr	r3, [pc, #336]	; (8001730 <stepControl+0x29c>)
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	429a      	cmp	r2, r3
 80015e2:	f280 8082 	bge.w	80016ea <stepControl+0x256>
			motor_control(-1, 1500);
 80015e6:	f240 51dc 	movw	r1, #1500	; 0x5dc
 80015ea:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80015ee:	f7ff fdb1 	bl	8001154 <motor_control>
			for (int x = 0; x < slowValue; x++) {
 80015f2:	2300      	movs	r3, #0
 80015f4:	60bb      	str	r3, [r7, #8]
 80015f6:	e01c      	b.n	8001632 <stepControl+0x19e>
				HAL_Delay(100);
 80015f8:	2064      	movs	r0, #100	; 0x64
 80015fa:	f001 fcbd 	bl	8002f78 <HAL_Delay>
				if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_13) == GPIO_PIN_SET
 80015fe:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001602:	4847      	ldr	r0, [pc, #284]	; (8001720 <stepControl+0x28c>)
 8001604:	f002 ff92 	bl	800452c <HAL_GPIO_ReadPin>
 8001608:	4603      	mov	r3, r0
 800160a:	2b01      	cmp	r3, #1
 800160c:	d008      	beq.n	8001620 <stepControl+0x18c>
						|| detection_load(1, sensitivity)) {
 800160e:	4b45      	ldr	r3, [pc, #276]	; (8001724 <stepControl+0x290>)
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	4619      	mov	r1, r3
 8001614:	2001      	movs	r0, #1
 8001616:	f000 f92d 	bl	8001874 <detection_load>
 800161a:	4603      	mov	r3, r0
 800161c:	2b00      	cmp	r3, #0
 800161e:	d005      	beq.n	800162c <stepControl+0x198>
					dir_flag = 0;
 8001620:	4b3c      	ldr	r3, [pc, #240]	; (8001714 <stepControl+0x280>)
 8001622:	2200      	movs	r2, #0
 8001624:	601a      	str	r2, [r3, #0]
					stopFlag=1;
 8001626:	2301      	movs	r3, #1
 8001628:	617b      	str	r3, [r7, #20]
					break;
 800162a:	e007      	b.n	800163c <stepControl+0x1a8>
			for (int x = 0; x < slowValue; x++) {
 800162c:	68bb      	ldr	r3, [r7, #8]
 800162e:	3301      	adds	r3, #1
 8001630:	60bb      	str	r3, [r7, #8]
 8001632:	4b3d      	ldr	r3, [pc, #244]	; (8001728 <stepControl+0x294>)
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	68ba      	ldr	r2, [r7, #8]
 8001638:	429a      	cmp	r2, r3
 800163a:	dbdd      	blt.n	80015f8 <stepControl+0x164>
		while (nowPosition < stayPositionDown) {
 800163c:	e055      	b.n	80016ea <stepControl+0x256>
			if(stopFlag==1)break;
 800163e:	697b      	ldr	r3, [r7, #20]
 8001640:	2b01      	cmp	r3, #1
 8001642:	d059      	beq.n	80016f8 <stepControl+0x264>
			motor_control(-1, 4000);
 8001644:	f44f 617a 	mov.w	r1, #4000	; 0xfa0
 8001648:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800164c:	f7ff fd82 	bl	8001154 <motor_control>
			HAL_Delay(20);
 8001650:	2014      	movs	r0, #20
 8001652:	f001 fc91 	bl	8002f78 <HAL_Delay>
			detection_load(0, sensitivity);
 8001656:	4b33      	ldr	r3, [pc, #204]	; (8001724 <stepControl+0x290>)
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	4619      	mov	r1, r3
 800165c:	2000      	movs	r0, #0
 800165e:	f000 f909 	bl	8001874 <detection_load>
			nowPosition++;
 8001662:	4b2d      	ldr	r3, [pc, #180]	; (8001718 <stepControl+0x284>)
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	3301      	adds	r3, #1
 8001668:	4a2b      	ldr	r2, [pc, #172]	; (8001718 <stepControl+0x284>)
 800166a:	6013      	str	r3, [r2, #0]
			for (int timer = 0; timer < 5; timer++) {
 800166c:	2300      	movs	r3, #0
 800166e:	607b      	str	r3, [r7, #4]
 8001670:	e021      	b.n	80016b6 <stepControl+0x222>
				HAL_Delay(1);
 8001672:	2001      	movs	r0, #1
 8001674:	f001 fc80 	bl	8002f78 <HAL_Delay>
				Display(settingMode);
 8001678:	4b2c      	ldr	r3, [pc, #176]	; (800172c <stepControl+0x298>)
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	4618      	mov	r0, r3
 800167e:	f000 f937 	bl	80018f0 <Display>
				if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_13) == GPIO_PIN_SET
 8001682:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001686:	4826      	ldr	r0, [pc, #152]	; (8001720 <stepControl+0x28c>)
 8001688:	f002 ff50 	bl	800452c <HAL_GPIO_ReadPin>
 800168c:	4603      	mov	r3, r0
 800168e:	2b01      	cmp	r3, #1
 8001690:	d008      	beq.n	80016a4 <stepControl+0x210>
						|| detection_load(1, sensitivity)) {
 8001692:	4b24      	ldr	r3, [pc, #144]	; (8001724 <stepControl+0x290>)
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	4619      	mov	r1, r3
 8001698:	2001      	movs	r0, #1
 800169a:	f000 f8eb 	bl	8001874 <detection_load>
 800169e:	4603      	mov	r3, r0
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d005      	beq.n	80016b0 <stepControl+0x21c>
					dir_flag = 0;
 80016a4:	4b1b      	ldr	r3, [pc, #108]	; (8001714 <stepControl+0x280>)
 80016a6:	2200      	movs	r2, #0
 80016a8:	601a      	str	r2, [r3, #0]
					stopFlag=1;
 80016aa:	2301      	movs	r3, #1
 80016ac:	617b      	str	r3, [r7, #20]
					break;
 80016ae:	e005      	b.n	80016bc <stepControl+0x228>
			for (int timer = 0; timer < 5; timer++) {
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	3301      	adds	r3, #1
 80016b4:	607b      	str	r3, [r7, #4]
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	2b04      	cmp	r3, #4
 80016ba:	ddda      	ble.n	8001672 <stepControl+0x1de>
			if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_13) == GPIO_PIN_SET
 80016bc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80016c0:	4817      	ldr	r0, [pc, #92]	; (8001720 <stepControl+0x28c>)
 80016c2:	f002 ff33 	bl	800452c <HAL_GPIO_ReadPin>
 80016c6:	4603      	mov	r3, r0
 80016c8:	2b01      	cmp	r3, #1
 80016ca:	d008      	beq.n	80016de <stepControl+0x24a>
					|| detection_load(1, sensitivity)) {
 80016cc:	4b15      	ldr	r3, [pc, #84]	; (8001724 <stepControl+0x290>)
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	4619      	mov	r1, r3
 80016d2:	2001      	movs	r0, #1
 80016d4:	f000 f8ce 	bl	8001874 <detection_load>
 80016d8:	4603      	mov	r3, r0
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d005      	beq.n	80016ea <stepControl+0x256>
				dir_flag = 0;
 80016de:	4b0d      	ldr	r3, [pc, #52]	; (8001714 <stepControl+0x280>)
 80016e0:	2200      	movs	r2, #0
 80016e2:	601a      	str	r2, [r3, #0]
				stopFlag=1;
 80016e4:	2301      	movs	r3, #1
 80016e6:	617b      	str	r3, [r7, #20]
				break;
 80016e8:	e007      	b.n	80016fa <stepControl+0x266>
		while (nowPosition < stayPositionDown) {
 80016ea:	4b0b      	ldr	r3, [pc, #44]	; (8001718 <stepControl+0x284>)
 80016ec:	681a      	ldr	r2, [r3, #0]
 80016ee:	4b10      	ldr	r3, [pc, #64]	; (8001730 <stepControl+0x29c>)
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	429a      	cmp	r2, r3
 80016f4:	dba3      	blt.n	800163e <stepControl+0x1aa>
 80016f6:	e000      	b.n	80016fa <stepControl+0x266>
			if(stopFlag==1)break;
 80016f8:	bf00      	nop
		motor_stop(-1);
 80016fa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80016fe:	f7ff fcc9 	bl	8001094 <motor_stop>
		dir_flag = 0;
 8001702:	4b04      	ldr	r3, [pc, #16]	; (8001714 <stepControl+0x280>)
 8001704:	2200      	movs	r2, #0
 8001706:	601a      	str	r2, [r3, #0]
		break;
 8001708:	bf00      	nop
	}
}
 800170a:	bf00      	nop
 800170c:	3718      	adds	r7, #24
 800170e:	46bd      	mov	sp, r7
 8001710:	bd80      	pop	{r7, pc}
 8001712:	bf00      	nop
 8001714:	20000260 	.word	0x20000260
 8001718:	20000238 	.word	0x20000238
 800171c:	2000023c 	.word	0x2000023c
 8001720:	40010c00 	.word	0x40010c00
 8001724:	20000004 	.word	0x20000004
 8001728:	2000000c 	.word	0x2000000c
 800172c:	20000230 	.word	0x20000230
 8001730:	20000008 	.word	0x20000008

08001734 <buzzerTimes>:
void buzzerTimes(int times) {
 8001734:	b580      	push	{r7, lr}
 8001736:	b084      	sub	sp, #16
 8001738:	af00      	add	r7, sp, #0
 800173a:	6078      	str	r0, [r7, #4]
	for (int x = 0; x < times; x++) {
 800173c:	2300      	movs	r3, #0
 800173e:	60fb      	str	r3, [r7, #12]
 8001740:	e014      	b.n	800176c <buzzerTimes+0x38>
		HAL_GPIO_WritePin(GPIOA, OUTPUT_BUZZER_Pin, 1);
 8001742:	2201      	movs	r2, #1
 8001744:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001748:	480c      	ldr	r0, [pc, #48]	; (800177c <buzzerTimes+0x48>)
 800174a:	f002 ff06 	bl	800455a <HAL_GPIO_WritePin>
		HAL_Delay(100);
 800174e:	2064      	movs	r0, #100	; 0x64
 8001750:	f001 fc12 	bl	8002f78 <HAL_Delay>
		HAL_GPIO_WritePin(GPIOA, OUTPUT_BUZZER_Pin, 0);
 8001754:	2200      	movs	r2, #0
 8001756:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800175a:	4808      	ldr	r0, [pc, #32]	; (800177c <buzzerTimes+0x48>)
 800175c:	f002 fefd 	bl	800455a <HAL_GPIO_WritePin>
		HAL_Delay(100);
 8001760:	2064      	movs	r0, #100	; 0x64
 8001762:	f001 fc09 	bl	8002f78 <HAL_Delay>
	for (int x = 0; x < times; x++) {
 8001766:	68fb      	ldr	r3, [r7, #12]
 8001768:	3301      	adds	r3, #1
 800176a:	60fb      	str	r3, [r7, #12]
 800176c:	68fa      	ldr	r2, [r7, #12]
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	429a      	cmp	r2, r3
 8001772:	dbe6      	blt.n	8001742 <buzzerTimes+0xe>
	}

}
 8001774:	bf00      	nop
 8001776:	3710      	adds	r7, #16
 8001778:	46bd      	mov	sp, r7
 800177a:	bd80      	pop	{r7, pc}
 800177c:	40010800 	.word	0x40010800

08001780 <clean_button_flag>:
void clean_button_flag(void) {
 8001780:	b480      	push	{r7}
 8001782:	af00      	add	r7, sp, #0
	//Usart2DmaPrintf("clena\n");
	for (i = 0; i <= 5; i++) { //clean flag
 8001784:	4b0b      	ldr	r3, [pc, #44]	; (80017b4 <clean_button_flag+0x34>)
 8001786:	2200      	movs	r2, #0
 8001788:	601a      	str	r2, [r3, #0]
 800178a:	e00a      	b.n	80017a2 <clean_button_flag+0x22>
		button_flag[i] = 0;
 800178c:	4b09      	ldr	r3, [pc, #36]	; (80017b4 <clean_button_flag+0x34>)
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	4a09      	ldr	r2, [pc, #36]	; (80017b8 <clean_button_flag+0x38>)
 8001792:	2100      	movs	r1, #0
 8001794:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (i = 0; i <= 5; i++) { //clean flag
 8001798:	4b06      	ldr	r3, [pc, #24]	; (80017b4 <clean_button_flag+0x34>)
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	3301      	adds	r3, #1
 800179e:	4a05      	ldr	r2, [pc, #20]	; (80017b4 <clean_button_flag+0x34>)
 80017a0:	6013      	str	r3, [r2, #0]
 80017a2:	4b04      	ldr	r3, [pc, #16]	; (80017b4 <clean_button_flag+0x34>)
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	2b05      	cmp	r3, #5
 80017a8:	ddf0      	ble.n	800178c <clean_button_flag+0xc>
		//HAL_Delay(1);
	}
}
 80017aa:	bf00      	nop
 80017ac:	46bd      	mov	sp, r7
 80017ae:	bc80      	pop	{r7}
 80017b0:	4770      	bx	lr
 80017b2:	bf00      	nop
 80017b4:	20000954 	.word	0x20000954
 80017b8:	20000268 	.word	0x20000268

080017bc <read_ADC>:
int read_ADC() {
 80017bc:	b480      	push	{r7}
 80017be:	b083      	sub	sp, #12
 80017c0:	af00      	add	r7, sp, #0
	int times = 50; //採樣次數
 80017c2:	2332      	movs	r3, #50	; 0x32
 80017c4:	607b      	str	r3, [r7, #4]
	for (i = 0, ad1 = 0, ad2 = 0; i < times;) {
 80017c6:	4b25      	ldr	r3, [pc, #148]	; (800185c <read_ADC+0xa0>)
 80017c8:	2200      	movs	r2, #0
 80017ca:	601a      	str	r2, [r3, #0]
 80017cc:	4b24      	ldr	r3, [pc, #144]	; (8001860 <read_ADC+0xa4>)
 80017ce:	2200      	movs	r2, #0
 80017d0:	601a      	str	r2, [r3, #0]
 80017d2:	4b24      	ldr	r3, [pc, #144]	; (8001864 <read_ADC+0xa8>)
 80017d4:	2200      	movs	r2, #0
 80017d6:	601a      	str	r2, [r3, #0]
 80017d8:	e019      	b.n	800180e <read_ADC+0x52>
		ad1 += ADC_Value[i++];
 80017da:	4b20      	ldr	r3, [pc, #128]	; (800185c <read_ADC+0xa0>)
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	1c5a      	adds	r2, r3, #1
 80017e0:	491e      	ldr	r1, [pc, #120]	; (800185c <read_ADC+0xa0>)
 80017e2:	600a      	str	r2, [r1, #0]
 80017e4:	4a20      	ldr	r2, [pc, #128]	; (8001868 <read_ADC+0xac>)
 80017e6:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80017ea:	4b1d      	ldr	r3, [pc, #116]	; (8001860 <read_ADC+0xa4>)
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	4413      	add	r3, r2
 80017f0:	4a1b      	ldr	r2, [pc, #108]	; (8001860 <read_ADC+0xa4>)
 80017f2:	6013      	str	r3, [r2, #0]
		ad2 += ADC_Value[i++];
 80017f4:	4b19      	ldr	r3, [pc, #100]	; (800185c <read_ADC+0xa0>)
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	1c5a      	adds	r2, r3, #1
 80017fa:	4918      	ldr	r1, [pc, #96]	; (800185c <read_ADC+0xa0>)
 80017fc:	600a      	str	r2, [r1, #0]
 80017fe:	4a1a      	ldr	r2, [pc, #104]	; (8001868 <read_ADC+0xac>)
 8001800:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001804:	4b17      	ldr	r3, [pc, #92]	; (8001864 <read_ADC+0xa8>)
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	4413      	add	r3, r2
 800180a:	4a16      	ldr	r2, [pc, #88]	; (8001864 <read_ADC+0xa8>)
 800180c:	6013      	str	r3, [r2, #0]
	for (i = 0, ad1 = 0, ad2 = 0; i < times;) {
 800180e:	4b13      	ldr	r3, [pc, #76]	; (800185c <read_ADC+0xa0>)
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	687a      	ldr	r2, [r7, #4]
 8001814:	429a      	cmp	r2, r3
 8001816:	dce0      	bgt.n	80017da <read_ADC+0x1e>
		//HAL_Delay(1);
	}

	real_adc1 = ad1 / (times / 2);
 8001818:	4b11      	ldr	r3, [pc, #68]	; (8001860 <read_ADC+0xa4>)
 800181a:	681a      	ldr	r2, [r3, #0]
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	0fd9      	lsrs	r1, r3, #31
 8001820:	440b      	add	r3, r1
 8001822:	105b      	asrs	r3, r3, #1
 8001824:	fbb2 f3f3 	udiv	r3, r2, r3
 8001828:	4a10      	ldr	r2, [pc, #64]	; (800186c <read_ADC+0xb0>)
 800182a:	6013      	str	r3, [r2, #0]
	real_adc2 = ad2 / (times / 2);
 800182c:	4b0d      	ldr	r3, [pc, #52]	; (8001864 <read_ADC+0xa8>)
 800182e:	681a      	ldr	r2, [r3, #0]
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	0fd9      	lsrs	r1, r3, #31
 8001834:	440b      	add	r3, r1
 8001836:	105b      	asrs	r3, r3, #1
 8001838:	fbb2 f3f3 	udiv	r3, r2, r3
 800183c:	4a0c      	ldr	r2, [pc, #48]	; (8001870 <read_ADC+0xb4>)
 800183e:	6013      	str	r3, [r2, #0]
	//sensitivity = real_adc2;
	if (real_adc1 <= real_adc2) {
 8001840:	4b0a      	ldr	r3, [pc, #40]	; (800186c <read_ADC+0xb0>)
 8001842:	681a      	ldr	r2, [r3, #0]
 8001844:	4b0a      	ldr	r3, [pc, #40]	; (8001870 <read_ADC+0xb4>)
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	429a      	cmp	r2, r3
 800184a:	d801      	bhi.n	8001850 <read_ADC+0x94>
		return 1;
 800184c:	2301      	movs	r3, #1
 800184e:	e000      	b.n	8001852 <read_ADC+0x96>
	} else {
		return 0;
 8001850:	2300      	movs	r3, #0
	}
}
 8001852:	4618      	mov	r0, r3
 8001854:	370c      	adds	r7, #12
 8001856:	46bd      	mov	sp, r7
 8001858:	bc80      	pop	{r7}
 800185a:	4770      	bx	lr
 800185c:	20000954 	.word	0x20000954
 8001860:	20000950 	.word	0x20000950
 8001864:	20000958 	.word	0x20000958
 8001868:	200007c0 	.word	0x200007c0
 800186c:	2000095c 	.word	0x2000095c
 8001870:	200007bc 	.word	0x200007bc

08001874 <detection_load>:
//檢知附載
//int time =0 ;為第一次設置
int detection_load(int times, uint32_t th) {
 8001874:	b580      	push	{r7, lr}
 8001876:	b084      	sub	sp, #16
 8001878:	af00      	add	r7, sp, #0
 800187a:	6078      	str	r0, [r7, #4]
 800187c:	6039      	str	r1, [r7, #0]
	read_ADC();
 800187e:	f7ff ff9d 	bl	80017bc <read_ADC>
	int setCount = 3;
 8001882:	2303      	movs	r3, #3
 8001884:	60fb      	str	r3, [r7, #12]
	if (times == 0) {
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	2b00      	cmp	r3, #0
 800188a:	d106      	bne.n	800189a <detection_load+0x26>
		//keep_adc1 = real_adc1;
		maxLoad = 0;
 800188c:	4b15      	ldr	r3, [pc, #84]	; (80018e4 <detection_load+0x70>)
 800188e:	2200      	movs	r2, #0
 8001890:	601a      	str	r2, [r3, #0]
		maxLoadCount = 0;
 8001892:	4b15      	ldr	r3, [pc, #84]	; (80018e8 <detection_load+0x74>)
 8001894:	2200      	movs	r2, #0
 8001896:	601a      	str	r2, [r3, #0]
 8001898:	e01e      	b.n	80018d8 <detection_load+0x64>
	} else {
		maxLoadCount++;
 800189a:	4b13      	ldr	r3, [pc, #76]	; (80018e8 <detection_load+0x74>)
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	3301      	adds	r3, #1
 80018a0:	4a11      	ldr	r2, [pc, #68]	; (80018e8 <detection_load+0x74>)
 80018a2:	6013      	str	r3, [r2, #0]
		if (maxLoadCount < setCount) {
 80018a4:	4b10      	ldr	r3, [pc, #64]	; (80018e8 <detection_load+0x74>)
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	68fa      	ldr	r2, [r7, #12]
 80018aa:	429a      	cmp	r2, r3
 80018ac:	dd0c      	ble.n	80018c8 <detection_load+0x54>
			if (real_adc1 > maxLoad) {
 80018ae:	4b0f      	ldr	r3, [pc, #60]	; (80018ec <detection_load+0x78>)
 80018b0:	681a      	ldr	r2, [r3, #0]
 80018b2:	4b0c      	ldr	r3, [pc, #48]	; (80018e4 <detection_load+0x70>)
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	429a      	cmp	r2, r3
 80018b8:	d90e      	bls.n	80018d8 <detection_load+0x64>
				maxLoad = real_adc1 + th;
 80018ba:	4b0c      	ldr	r3, [pc, #48]	; (80018ec <detection_load+0x78>)
 80018bc:	681a      	ldr	r2, [r3, #0]
 80018be:	683b      	ldr	r3, [r7, #0]
 80018c0:	4413      	add	r3, r2
 80018c2:	4a08      	ldr	r2, [pc, #32]	; (80018e4 <detection_load+0x70>)
 80018c4:	6013      	str	r3, [r2, #0]
 80018c6:	e007      	b.n	80018d8 <detection_load+0x64>
			}
		} else {
			if (real_adc1 > (maxLoad)) {
 80018c8:	4b08      	ldr	r3, [pc, #32]	; (80018ec <detection_load+0x78>)
 80018ca:	681a      	ldr	r2, [r3, #0]
 80018cc:	4b05      	ldr	r3, [pc, #20]	; (80018e4 <detection_load+0x70>)
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	429a      	cmp	r2, r3
 80018d2:	d901      	bls.n	80018d8 <detection_load+0x64>
				//maxLoad = real_adc1;
				return 1;
 80018d4:	2301      	movs	r3, #1
 80018d6:	e000      	b.n	80018da <detection_load+0x66>
			}
		}
	}
	return 0;
 80018d8:	2300      	movs	r3, #0
}
 80018da:	4618      	mov	r0, r3
 80018dc:	3710      	adds	r7, #16
 80018de:	46bd      	mov	sp, r7
 80018e0:	bd80      	pop	{r7, pc}
 80018e2:	bf00      	nop
 80018e4:	20000244 	.word	0x20000244
 80018e8:	20000240 	.word	0x20000240
 80018ec:	2000095c 	.word	0x2000095c

080018f0 <Display>:

void Display(int mode) {
 80018f0:	b590      	push	{r4, r7, lr}
 80018f2:	b089      	sub	sp, #36	; 0x24
 80018f4:	af04      	add	r7, sp, #16
 80018f6:	6078      	str	r0, [r7, #4]
	ssd1306_Fill(Black);
 80018f8:	2000      	movs	r0, #0
 80018fa:	f001 f92d 	bl	8002b58 <ssd1306_Fill>
	ssd1306_SetCursor(2, 0);
 80018fe:	2100      	movs	r1, #0
 8001900:	2002      	movs	r0, #2
 8001902:	f001 fa7f 	bl	8002e04 <ssd1306_SetCursor>
	int line_count = 1;
 8001906:	2301      	movs	r3, #1
 8001908:	60fb      	str	r3, [r7, #12]
	if (mode == 0) {
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	2b00      	cmp	r3, #0
 800190e:	f040 810f 	bne.w	8001b30 <Display+0x240>
		//snprintf(buff, sizeof(buff), "%s,", string);
		//ssd1306_WriteString(buff, Font_6x8, White);

		snprintf(buff, sizeof(buff), "%s,%s", __DATE__, __TIME__);
 8001912:	4b6c      	ldr	r3, [pc, #432]	; (8001ac4 <Display+0x1d4>)
 8001914:	9300      	str	r3, [sp, #0]
 8001916:	4b6c      	ldr	r3, [pc, #432]	; (8001ac8 <Display+0x1d8>)
 8001918:	4a6c      	ldr	r2, [pc, #432]	; (8001acc <Display+0x1dc>)
 800191a:	2140      	movs	r1, #64	; 0x40
 800191c:	486c      	ldr	r0, [pc, #432]	; (8001ad0 <Display+0x1e0>)
 800191e:	f006 f92b 	bl	8007b78 <sniprintf>
		ssd1306_WriteString(buff, Font_6x8, White);
 8001922:	4a6c      	ldr	r2, [pc, #432]	; (8001ad4 <Display+0x1e4>)
 8001924:	2301      	movs	r3, #1
 8001926:	ca06      	ldmia	r2, {r1, r2}
 8001928:	4869      	ldr	r0, [pc, #420]	; (8001ad0 <Display+0x1e0>)
 800192a:	f001 fa45 	bl	8002db8 <ssd1306_WriteString>

		ssd1306_SetCursor(2, 8 * line_count++);
 800192e:	68fb      	ldr	r3, [r7, #12]
 8001930:	1c5a      	adds	r2, r3, #1
 8001932:	60fa      	str	r2, [r7, #12]
 8001934:	b2db      	uxtb	r3, r3
 8001936:	00db      	lsls	r3, r3, #3
 8001938:	b2db      	uxtb	r3, r3
 800193a:	4619      	mov	r1, r3
 800193c:	2002      	movs	r0, #2
 800193e:	f001 fa61 	bl	8002e04 <ssd1306_SetCursor>
		snprintf(buff, sizeof(buff), "state:%d,%d nowP:%d", sysinfo_State,
 8001942:	4b65      	ldr	r3, [pc, #404]	; (8001ad8 <Display+0x1e8>)
 8001944:	6819      	ldr	r1, [r3, #0]
 8001946:	4b65      	ldr	r3, [pc, #404]	; (8001adc <Display+0x1ec>)
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	4a65      	ldr	r2, [pc, #404]	; (8001ae0 <Display+0x1f0>)
 800194c:	6812      	ldr	r2, [r2, #0]
 800194e:	9201      	str	r2, [sp, #4]
 8001950:	9300      	str	r3, [sp, #0]
 8001952:	460b      	mov	r3, r1
 8001954:	4a63      	ldr	r2, [pc, #396]	; (8001ae4 <Display+0x1f4>)
 8001956:	2140      	movs	r1, #64	; 0x40
 8001958:	485d      	ldr	r0, [pc, #372]	; (8001ad0 <Display+0x1e0>)
 800195a:	f006 f90d 	bl	8007b78 <sniprintf>
				stage, nowPosition);
		ssd1306_WriteString(buff, Font_6x8, White);
 800195e:	4a5d      	ldr	r2, [pc, #372]	; (8001ad4 <Display+0x1e4>)
 8001960:	2301      	movs	r3, #1
 8001962:	ca06      	ldmia	r2, {r1, r2}
 8001964:	485a      	ldr	r0, [pc, #360]	; (8001ad0 <Display+0x1e0>)
 8001966:	f001 fa27 	bl	8002db8 <ssd1306_WriteString>

		snprintf(buff, sizeof(buff), "[B0]:%d,Sent:%d", real_adc1, sensitivity);
 800196a:	4b5f      	ldr	r3, [pc, #380]	; (8001ae8 <Display+0x1f8>)
 800196c:	681a      	ldr	r2, [r3, #0]
 800196e:	4b5f      	ldr	r3, [pc, #380]	; (8001aec <Display+0x1fc>)
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	9300      	str	r3, [sp, #0]
 8001974:	4613      	mov	r3, r2
 8001976:	4a5e      	ldr	r2, [pc, #376]	; (8001af0 <Display+0x200>)
 8001978:	2140      	movs	r1, #64	; 0x40
 800197a:	4855      	ldr	r0, [pc, #340]	; (8001ad0 <Display+0x1e0>)
 800197c:	f006 f8fc 	bl	8007b78 <sniprintf>
		ssd1306_SetCursor(2, 8 * line_count++);
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	1c5a      	adds	r2, r3, #1
 8001984:	60fa      	str	r2, [r7, #12]
 8001986:	b2db      	uxtb	r3, r3
 8001988:	00db      	lsls	r3, r3, #3
 800198a:	b2db      	uxtb	r3, r3
 800198c:	4619      	mov	r1, r3
 800198e:	2002      	movs	r0, #2
 8001990:	f001 fa38 	bl	8002e04 <ssd1306_SetCursor>
		ssd1306_WriteString(buff, Font_6x8, White);
 8001994:	4a4f      	ldr	r2, [pc, #316]	; (8001ad4 <Display+0x1e4>)
 8001996:	2301      	movs	r3, #1
 8001998:	ca06      	ldmia	r2, {r1, r2}
 800199a:	484d      	ldr	r0, [pc, #308]	; (8001ad0 <Display+0x1e0>)
 800199c:	f001 fa0c 	bl	8002db8 <ssd1306_WriteString>

		snprintf(buff, sizeof(buff), "mLoad:%d count:%d", maxLoad,
 80019a0:	4b54      	ldr	r3, [pc, #336]	; (8001af4 <Display+0x204>)
 80019a2:	681a      	ldr	r2, [r3, #0]
 80019a4:	4b54      	ldr	r3, [pc, #336]	; (8001af8 <Display+0x208>)
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	9300      	str	r3, [sp, #0]
 80019aa:	4613      	mov	r3, r2
 80019ac:	4a53      	ldr	r2, [pc, #332]	; (8001afc <Display+0x20c>)
 80019ae:	2140      	movs	r1, #64	; 0x40
 80019b0:	4847      	ldr	r0, [pc, #284]	; (8001ad0 <Display+0x1e0>)
 80019b2:	f006 f8e1 	bl	8007b78 <sniprintf>
				maxLoadCount);
		ssd1306_SetCursor(2, 8 * line_count++);
 80019b6:	68fb      	ldr	r3, [r7, #12]
 80019b8:	1c5a      	adds	r2, r3, #1
 80019ba:	60fa      	str	r2, [r7, #12]
 80019bc:	b2db      	uxtb	r3, r3
 80019be:	00db      	lsls	r3, r3, #3
 80019c0:	b2db      	uxtb	r3, r3
 80019c2:	4619      	mov	r1, r3
 80019c4:	2002      	movs	r0, #2
 80019c6:	f001 fa1d 	bl	8002e04 <ssd1306_SetCursor>
		ssd1306_WriteString(buff, Font_6x8, White);
 80019ca:	4a42      	ldr	r2, [pc, #264]	; (8001ad4 <Display+0x1e4>)
 80019cc:	2301      	movs	r3, #1
 80019ce:	ca06      	ldmia	r2, {r1, r2}
 80019d0:	483f      	ldr	r0, [pc, #252]	; (8001ad0 <Display+0x1e0>)
 80019d2:	f001 f9f1 	bl	8002db8 <ssd1306_WriteString>

		snprintf(buff, sizeof(buff), "PWM1:%d, GPIO1:%d", PWM1, OUTPUT_1_State);
 80019d6:	4b4a      	ldr	r3, [pc, #296]	; (8001b00 <Display+0x210>)
 80019d8:	681a      	ldr	r2, [r3, #0]
 80019da:	4b4a      	ldr	r3, [pc, #296]	; (8001b04 <Display+0x214>)
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	9300      	str	r3, [sp, #0]
 80019e0:	4613      	mov	r3, r2
 80019e2:	4a49      	ldr	r2, [pc, #292]	; (8001b08 <Display+0x218>)
 80019e4:	2140      	movs	r1, #64	; 0x40
 80019e6:	483a      	ldr	r0, [pc, #232]	; (8001ad0 <Display+0x1e0>)
 80019e8:	f006 f8c6 	bl	8007b78 <sniprintf>
		ssd1306_SetCursor(2, 8 * line_count++);
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	1c5a      	adds	r2, r3, #1
 80019f0:	60fa      	str	r2, [r7, #12]
 80019f2:	b2db      	uxtb	r3, r3
 80019f4:	00db      	lsls	r3, r3, #3
 80019f6:	b2db      	uxtb	r3, r3
 80019f8:	4619      	mov	r1, r3
 80019fa:	2002      	movs	r0, #2
 80019fc:	f001 fa02 	bl	8002e04 <ssd1306_SetCursor>
		ssd1306_WriteString(buff, Font_6x8, White);
 8001a00:	4a34      	ldr	r2, [pc, #208]	; (8001ad4 <Display+0x1e4>)
 8001a02:	2301      	movs	r3, #1
 8001a04:	ca06      	ldmia	r2, {r1, r2}
 8001a06:	4832      	ldr	r0, [pc, #200]	; (8001ad0 <Display+0x1e0>)
 8001a08:	f001 f9d6 	bl	8002db8 <ssd1306_WriteString>

		snprintf(buff, sizeof(buff), "PWM2:%d, GPIO2:%d", PWM2, OUTPUT_2_State);
 8001a0c:	4b3f      	ldr	r3, [pc, #252]	; (8001b0c <Display+0x21c>)
 8001a0e:	681a      	ldr	r2, [r3, #0]
 8001a10:	4b3f      	ldr	r3, [pc, #252]	; (8001b10 <Display+0x220>)
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	9300      	str	r3, [sp, #0]
 8001a16:	4613      	mov	r3, r2
 8001a18:	4a3e      	ldr	r2, [pc, #248]	; (8001b14 <Display+0x224>)
 8001a1a:	2140      	movs	r1, #64	; 0x40
 8001a1c:	482c      	ldr	r0, [pc, #176]	; (8001ad0 <Display+0x1e0>)
 8001a1e:	f006 f8ab 	bl	8007b78 <sniprintf>
		ssd1306_SetCursor(2, 8 * line_count++);
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	1c5a      	adds	r2, r3, #1
 8001a26:	60fa      	str	r2, [r7, #12]
 8001a28:	b2db      	uxtb	r3, r3
 8001a2a:	00db      	lsls	r3, r3, #3
 8001a2c:	b2db      	uxtb	r3, r3
 8001a2e:	4619      	mov	r1, r3
 8001a30:	2002      	movs	r0, #2
 8001a32:	f001 f9e7 	bl	8002e04 <ssd1306_SetCursor>
		ssd1306_WriteString(buff, Font_6x8, White);
 8001a36:	4a27      	ldr	r2, [pc, #156]	; (8001ad4 <Display+0x1e4>)
 8001a38:	2301      	movs	r3, #1
 8001a3a:	ca06      	ldmia	r2, {r1, r2}
 8001a3c:	4824      	ldr	r0, [pc, #144]	; (8001ad0 <Display+0x1e0>)
 8001a3e:	f001 f9bb 	bl	8002db8 <ssd1306_WriteString>

		snprintf(buff, sizeof(buff), "button[%d]:%d,%d,%d,%d", button_State,
 8001a42:	4b35      	ldr	r3, [pc, #212]	; (8001b18 <Display+0x228>)
 8001a44:	681c      	ldr	r4, [r3, #0]
 8001a46:	4b35      	ldr	r3, [pc, #212]	; (8001b1c <Display+0x22c>)
 8001a48:	685b      	ldr	r3, [r3, #4]
 8001a4a:	4a34      	ldr	r2, [pc, #208]	; (8001b1c <Display+0x22c>)
 8001a4c:	6892      	ldr	r2, [r2, #8]
 8001a4e:	4933      	ldr	r1, [pc, #204]	; (8001b1c <Display+0x22c>)
 8001a50:	68c9      	ldr	r1, [r1, #12]
 8001a52:	4832      	ldr	r0, [pc, #200]	; (8001b1c <Display+0x22c>)
 8001a54:	6900      	ldr	r0, [r0, #16]
 8001a56:	9003      	str	r0, [sp, #12]
 8001a58:	9102      	str	r1, [sp, #8]
 8001a5a:	9201      	str	r2, [sp, #4]
 8001a5c:	9300      	str	r3, [sp, #0]
 8001a5e:	4623      	mov	r3, r4
 8001a60:	4a2f      	ldr	r2, [pc, #188]	; (8001b20 <Display+0x230>)
 8001a62:	2140      	movs	r1, #64	; 0x40
 8001a64:	481a      	ldr	r0, [pc, #104]	; (8001ad0 <Display+0x1e0>)
 8001a66:	f006 f887 	bl	8007b78 <sniprintf>
				button_flag[1], button_flag[2], button_flag[3], button_flag[4]);
		ssd1306_SetCursor(2, 8 * line_count++);
 8001a6a:	68fb      	ldr	r3, [r7, #12]
 8001a6c:	1c5a      	adds	r2, r3, #1
 8001a6e:	60fa      	str	r2, [r7, #12]
 8001a70:	b2db      	uxtb	r3, r3
 8001a72:	00db      	lsls	r3, r3, #3
 8001a74:	b2db      	uxtb	r3, r3
 8001a76:	4619      	mov	r1, r3
 8001a78:	2002      	movs	r0, #2
 8001a7a:	f001 f9c3 	bl	8002e04 <ssd1306_SetCursor>
		ssd1306_WriteString(buff, Font_6x8, White);
 8001a7e:	4a15      	ldr	r2, [pc, #84]	; (8001ad4 <Display+0x1e4>)
 8001a80:	2301      	movs	r3, #1
 8001a82:	ca06      	ldmia	r2, {r1, r2}
 8001a84:	4812      	ldr	r0, [pc, #72]	; (8001ad0 <Display+0x1e0>)
 8001a86:	f001 f997 	bl	8002db8 <ssd1306_WriteString>

		//snprintf(buff, sizeof(buff), "time:%d,%d", end, start);
		//ssd1306_SetCursor(2, 8*7);
		//ssd1306_WriteString(buff, Font_6x8, White);
		if (end > start) {
 8001a8a:	4b26      	ldr	r3, [pc, #152]	; (8001b24 <Display+0x234>)
 8001a8c:	681a      	ldr	r2, [r3, #0]
 8001a8e:	4b26      	ldr	r3, [pc, #152]	; (8001b28 <Display+0x238>)
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	429a      	cmp	r2, r3
 8001a94:	f240 815a 	bls.w	8001d4c <Display+0x45c>
			snprintf(buff, sizeof(buff), "time:%d", end - start);
 8001a98:	4b22      	ldr	r3, [pc, #136]	; (8001b24 <Display+0x234>)
 8001a9a:	681a      	ldr	r2, [r3, #0]
 8001a9c:	4b22      	ldr	r3, [pc, #136]	; (8001b28 <Display+0x238>)
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	1ad3      	subs	r3, r2, r3
 8001aa2:	4a22      	ldr	r2, [pc, #136]	; (8001b2c <Display+0x23c>)
 8001aa4:	2140      	movs	r1, #64	; 0x40
 8001aa6:	480a      	ldr	r0, [pc, #40]	; (8001ad0 <Display+0x1e0>)
 8001aa8:	f006 f866 	bl	8007b78 <sniprintf>
			ssd1306_SetCursor(2, 8 * 7);
 8001aac:	2138      	movs	r1, #56	; 0x38
 8001aae:	2002      	movs	r0, #2
 8001ab0:	f001 f9a8 	bl	8002e04 <ssd1306_SetCursor>
			ssd1306_WriteString(buff, Font_6x8, White);
 8001ab4:	4a07      	ldr	r2, [pc, #28]	; (8001ad4 <Display+0x1e4>)
 8001ab6:	2301      	movs	r3, #1
 8001ab8:	ca06      	ldmia	r2, {r1, r2}
 8001aba:	4805      	ldr	r0, [pc, #20]	; (8001ad0 <Display+0x1e0>)
 8001abc:	f001 f97c 	bl	8002db8 <ssd1306_WriteString>
 8001ac0:	e144      	b.n	8001d4c <Display+0x45c>
 8001ac2:	bf00      	nop
 8001ac4:	0800aa54 	.word	0x0800aa54
 8001ac8:	0800aa40 	.word	0x0800aa40
 8001acc:	0800aa4c 	.word	0x0800aa4c
 8001ad0:	2000075c 	.word	0x2000075c
 8001ad4:	2000001c 	.word	0x2000001c
 8001ad8:	20000258 	.word	0x20000258
 8001adc:	20000224 	.word	0x20000224
 8001ae0:	20000238 	.word	0x20000238
 8001ae4:	0800aa60 	.word	0x0800aa60
 8001ae8:	2000095c 	.word	0x2000095c
 8001aec:	20000004 	.word	0x20000004
 8001af0:	0800aa74 	.word	0x0800aa74
 8001af4:	20000244 	.word	0x20000244
 8001af8:	20000240 	.word	0x20000240
 8001afc:	0800aa84 	.word	0x0800aa84
 8001b00:	20000248 	.word	0x20000248
 8001b04:	20000250 	.word	0x20000250
 8001b08:	0800aa98 	.word	0x0800aa98
 8001b0c:	2000024c 	.word	0x2000024c
 8001b10:	20000254 	.word	0x20000254
 8001b14:	0800aaac 	.word	0x0800aaac
 8001b18:	2000025c 	.word	0x2000025c
 8001b1c:	20000268 	.word	0x20000268
 8001b20:	0800aac0 	.word	0x0800aac0
 8001b24:	2000022c 	.word	0x2000022c
 8001b28:	20000228 	.word	0x20000228
 8001b2c:	0800aad8 	.word	0x0800aad8
		}
	} else if (mode == 1) {		//setting mode
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	2b01      	cmp	r3, #1
 8001b34:	f040 80d2 	bne.w	8001cdc <Display+0x3ec>
		snprintf(buff, sizeof(buff), "Setting mode:%d", settingMode);
 8001b38:	4b87      	ldr	r3, [pc, #540]	; (8001d58 <Display+0x468>)
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	4a87      	ldr	r2, [pc, #540]	; (8001d5c <Display+0x46c>)
 8001b3e:	2140      	movs	r1, #64	; 0x40
 8001b40:	4887      	ldr	r0, [pc, #540]	; (8001d60 <Display+0x470>)
 8001b42:	f006 f819 	bl	8007b78 <sniprintf>
		ssd1306_WriteString(buff, Font_6x8, White);
 8001b46:	4a87      	ldr	r2, [pc, #540]	; (8001d64 <Display+0x474>)
 8001b48:	2301      	movs	r3, #1
 8001b4a:	ca06      	ldmia	r2, {r1, r2}
 8001b4c:	4884      	ldr	r0, [pc, #528]	; (8001d60 <Display+0x470>)
 8001b4e:	f001 f933 	bl	8002db8 <ssd1306_WriteString>

		ssd1306_SetCursor(2, 8 * line_count++);
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	1c5a      	adds	r2, r3, #1
 8001b56:	60fa      	str	r2, [r7, #12]
 8001b58:	b2db      	uxtb	r3, r3
 8001b5a:	00db      	lsls	r3, r3, #3
 8001b5c:	b2db      	uxtb	r3, r3
 8001b5e:	4619      	mov	r1, r3
 8001b60:	2002      	movs	r0, #2
 8001b62:	f001 f94f 	bl	8002e04 <ssd1306_SetCursor>
		snprintf(buff, sizeof(buff), "button[%d]:%d,%d,%d,%d", button_State,
 8001b66:	4b80      	ldr	r3, [pc, #512]	; (8001d68 <Display+0x478>)
 8001b68:	681c      	ldr	r4, [r3, #0]
 8001b6a:	4b80      	ldr	r3, [pc, #512]	; (8001d6c <Display+0x47c>)
 8001b6c:	685b      	ldr	r3, [r3, #4]
 8001b6e:	4a7f      	ldr	r2, [pc, #508]	; (8001d6c <Display+0x47c>)
 8001b70:	6892      	ldr	r2, [r2, #8]
 8001b72:	497e      	ldr	r1, [pc, #504]	; (8001d6c <Display+0x47c>)
 8001b74:	68c9      	ldr	r1, [r1, #12]
 8001b76:	487d      	ldr	r0, [pc, #500]	; (8001d6c <Display+0x47c>)
 8001b78:	6900      	ldr	r0, [r0, #16]
 8001b7a:	9003      	str	r0, [sp, #12]
 8001b7c:	9102      	str	r1, [sp, #8]
 8001b7e:	9201      	str	r2, [sp, #4]
 8001b80:	9300      	str	r3, [sp, #0]
 8001b82:	4623      	mov	r3, r4
 8001b84:	4a7a      	ldr	r2, [pc, #488]	; (8001d70 <Display+0x480>)
 8001b86:	2140      	movs	r1, #64	; 0x40
 8001b88:	4875      	ldr	r0, [pc, #468]	; (8001d60 <Display+0x470>)
 8001b8a:	f005 fff5 	bl	8007b78 <sniprintf>
				button_flag[1], button_flag[2], button_flag[3], button_flag[4]);
		ssd1306_WriteString(buff, Font_6x8, White);
 8001b8e:	4a75      	ldr	r2, [pc, #468]	; (8001d64 <Display+0x474>)
 8001b90:	2301      	movs	r3, #1
 8001b92:	ca06      	ldmia	r2, {r1, r2}
 8001b94:	4872      	ldr	r0, [pc, #456]	; (8001d60 <Display+0x470>)
 8001b96:	f001 f90f 	bl	8002db8 <ssd1306_WriteString>
		/*
		 snprintf(buff, sizeof(buff), "[B0]:%d,KA1:%d", real_adc1, keep_adc1);
		 ssd1306_SetCursor(2, 8 * line_count++);
		 ssd1306_WriteString(buff, Font_6x8, White);
		 */
		snprintf(buff, sizeof(buff), "now:%d,up:%d,down:%d", nowPosition,
 8001b9a:	4b76      	ldr	r3, [pc, #472]	; (8001d74 <Display+0x484>)
 8001b9c:	6819      	ldr	r1, [r3, #0]
 8001b9e:	4b76      	ldr	r3, [pc, #472]	; (8001d78 <Display+0x488>)
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	4a76      	ldr	r2, [pc, #472]	; (8001d7c <Display+0x48c>)
 8001ba4:	6812      	ldr	r2, [r2, #0]
 8001ba6:	9201      	str	r2, [sp, #4]
 8001ba8:	9300      	str	r3, [sp, #0]
 8001baa:	460b      	mov	r3, r1
 8001bac:	4a74      	ldr	r2, [pc, #464]	; (8001d80 <Display+0x490>)
 8001bae:	2140      	movs	r1, #64	; 0x40
 8001bb0:	486b      	ldr	r0, [pc, #428]	; (8001d60 <Display+0x470>)
 8001bb2:	f005 ffe1 	bl	8007b78 <sniprintf>
				stayPositionUp, stayPositionDown);
		ssd1306_SetCursor(2, 8 * line_count++);
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	1c5a      	adds	r2, r3, #1
 8001bba:	60fa      	str	r2, [r7, #12]
 8001bbc:	b2db      	uxtb	r3, r3
 8001bbe:	00db      	lsls	r3, r3, #3
 8001bc0:	b2db      	uxtb	r3, r3
 8001bc2:	4619      	mov	r1, r3
 8001bc4:	2002      	movs	r0, #2
 8001bc6:	f001 f91d 	bl	8002e04 <ssd1306_SetCursor>
		ssd1306_WriteString(buff, Font_6x8, White);
 8001bca:	4a66      	ldr	r2, [pc, #408]	; (8001d64 <Display+0x474>)
 8001bcc:	2301      	movs	r3, #1
 8001bce:	ca06      	ldmia	r2, {r1, r2}
 8001bd0:	4863      	ldr	r0, [pc, #396]	; (8001d60 <Display+0x470>)
 8001bd2:	f001 f8f1 	bl	8002db8 <ssd1306_WriteString>

		snprintf(buff, sizeof(buff), "LongPress:%d", pressTimer);
 8001bd6:	4b6b      	ldr	r3, [pc, #428]	; (8001d84 <Display+0x494>)
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	4a6b      	ldr	r2, [pc, #428]	; (8001d88 <Display+0x498>)
 8001bdc:	2140      	movs	r1, #64	; 0x40
 8001bde:	4860      	ldr	r0, [pc, #384]	; (8001d60 <Display+0x470>)
 8001be0:	f005 ffca 	bl	8007b78 <sniprintf>
		ssd1306_SetCursor(2, 8 * line_count++);
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	1c5a      	adds	r2, r3, #1
 8001be8:	60fa      	str	r2, [r7, #12]
 8001bea:	b2db      	uxtb	r3, r3
 8001bec:	00db      	lsls	r3, r3, #3
 8001bee:	b2db      	uxtb	r3, r3
 8001bf0:	4619      	mov	r1, r3
 8001bf2:	2002      	movs	r0, #2
 8001bf4:	f001 f906 	bl	8002e04 <ssd1306_SetCursor>
		ssd1306_WriteString(buff, Font_6x8, White);
 8001bf8:	4a5a      	ldr	r2, [pc, #360]	; (8001d64 <Display+0x474>)
 8001bfa:	2301      	movs	r3, #1
 8001bfc:	ca06      	ldmia	r2, {r1, r2}
 8001bfe:	4858      	ldr	r0, [pc, #352]	; (8001d60 <Display+0x470>)
 8001c00:	f001 f8da 	bl	8002db8 <ssd1306_WriteString>

		snprintf(buff, sizeof(buff), "DIR:%d,nowP:%d", setDir_flag,
 8001c04:	4b61      	ldr	r3, [pc, #388]	; (8001d8c <Display+0x49c>)
 8001c06:	681a      	ldr	r2, [r3, #0]
 8001c08:	4b5a      	ldr	r3, [pc, #360]	; (8001d74 <Display+0x484>)
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	9300      	str	r3, [sp, #0]
 8001c0e:	4613      	mov	r3, r2
 8001c10:	4a5f      	ldr	r2, [pc, #380]	; (8001d90 <Display+0x4a0>)
 8001c12:	2140      	movs	r1, #64	; 0x40
 8001c14:	4852      	ldr	r0, [pc, #328]	; (8001d60 <Display+0x470>)
 8001c16:	f005 ffaf 	bl	8007b78 <sniprintf>
				nowPosition);
		ssd1306_SetCursor(2, 8 * line_count++);
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	1c5a      	adds	r2, r3, #1
 8001c1e:	60fa      	str	r2, [r7, #12]
 8001c20:	b2db      	uxtb	r3, r3
 8001c22:	00db      	lsls	r3, r3, #3
 8001c24:	b2db      	uxtb	r3, r3
 8001c26:	4619      	mov	r1, r3
 8001c28:	2002      	movs	r0, #2
 8001c2a:	f001 f8eb 	bl	8002e04 <ssd1306_SetCursor>
		ssd1306_WriteString(buff, Font_6x8, White);
 8001c2e:	4a4d      	ldr	r2, [pc, #308]	; (8001d64 <Display+0x474>)
 8001c30:	2301      	movs	r3, #1
 8001c32:	ca06      	ldmia	r2, {r1, r2}
 8001c34:	484a      	ldr	r0, [pc, #296]	; (8001d60 <Display+0x470>)
 8001c36:	f001 f8bf 	bl	8002db8 <ssd1306_WriteString>

		snprintf(buff, sizeof(buff), "PWM1:%d, GPIO1:%d", PWM1, OUTPUT_1_State);
 8001c3a:	4b56      	ldr	r3, [pc, #344]	; (8001d94 <Display+0x4a4>)
 8001c3c:	681a      	ldr	r2, [r3, #0]
 8001c3e:	4b56      	ldr	r3, [pc, #344]	; (8001d98 <Display+0x4a8>)
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	9300      	str	r3, [sp, #0]
 8001c44:	4613      	mov	r3, r2
 8001c46:	4a55      	ldr	r2, [pc, #340]	; (8001d9c <Display+0x4ac>)
 8001c48:	2140      	movs	r1, #64	; 0x40
 8001c4a:	4845      	ldr	r0, [pc, #276]	; (8001d60 <Display+0x470>)
 8001c4c:	f005 ff94 	bl	8007b78 <sniprintf>
		ssd1306_SetCursor(2, 8 * line_count++);
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	1c5a      	adds	r2, r3, #1
 8001c54:	60fa      	str	r2, [r7, #12]
 8001c56:	b2db      	uxtb	r3, r3
 8001c58:	00db      	lsls	r3, r3, #3
 8001c5a:	b2db      	uxtb	r3, r3
 8001c5c:	4619      	mov	r1, r3
 8001c5e:	2002      	movs	r0, #2
 8001c60:	f001 f8d0 	bl	8002e04 <ssd1306_SetCursor>
		ssd1306_WriteString(buff, Font_6x8, White);
 8001c64:	4a3f      	ldr	r2, [pc, #252]	; (8001d64 <Display+0x474>)
 8001c66:	2301      	movs	r3, #1
 8001c68:	ca06      	ldmia	r2, {r1, r2}
 8001c6a:	483d      	ldr	r0, [pc, #244]	; (8001d60 <Display+0x470>)
 8001c6c:	f001 f8a4 	bl	8002db8 <ssd1306_WriteString>

		snprintf(buff, sizeof(buff), "PWM2:%d, GPIO2:%d", PWM2, OUTPUT_2_State);
 8001c70:	4b4b      	ldr	r3, [pc, #300]	; (8001da0 <Display+0x4b0>)
 8001c72:	681a      	ldr	r2, [r3, #0]
 8001c74:	4b4b      	ldr	r3, [pc, #300]	; (8001da4 <Display+0x4b4>)
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	9300      	str	r3, [sp, #0]
 8001c7a:	4613      	mov	r3, r2
 8001c7c:	4a4a      	ldr	r2, [pc, #296]	; (8001da8 <Display+0x4b8>)
 8001c7e:	2140      	movs	r1, #64	; 0x40
 8001c80:	4837      	ldr	r0, [pc, #220]	; (8001d60 <Display+0x470>)
 8001c82:	f005 ff79 	bl	8007b78 <sniprintf>
		ssd1306_SetCursor(2, 8 * line_count++);
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	1c5a      	adds	r2, r3, #1
 8001c8a:	60fa      	str	r2, [r7, #12]
 8001c8c:	b2db      	uxtb	r3, r3
 8001c8e:	00db      	lsls	r3, r3, #3
 8001c90:	b2db      	uxtb	r3, r3
 8001c92:	4619      	mov	r1, r3
 8001c94:	2002      	movs	r0, #2
 8001c96:	f001 f8b5 	bl	8002e04 <ssd1306_SetCursor>
		ssd1306_WriteString(buff, Font_6x8, White);
 8001c9a:	4a32      	ldr	r2, [pc, #200]	; (8001d64 <Display+0x474>)
 8001c9c:	2301      	movs	r3, #1
 8001c9e:	ca06      	ldmia	r2, {r1, r2}
 8001ca0:	482f      	ldr	r0, [pc, #188]	; (8001d60 <Display+0x470>)
 8001ca2:	f001 f889 	bl	8002db8 <ssd1306_WriteString>

		if (end > start) {
 8001ca6:	4b41      	ldr	r3, [pc, #260]	; (8001dac <Display+0x4bc>)
 8001ca8:	681a      	ldr	r2, [r3, #0]
 8001caa:	4b41      	ldr	r3, [pc, #260]	; (8001db0 <Display+0x4c0>)
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	429a      	cmp	r2, r3
 8001cb0:	d94c      	bls.n	8001d4c <Display+0x45c>
			snprintf(buff, sizeof(buff), "time:%d", end - start);
 8001cb2:	4b3e      	ldr	r3, [pc, #248]	; (8001dac <Display+0x4bc>)
 8001cb4:	681a      	ldr	r2, [r3, #0]
 8001cb6:	4b3e      	ldr	r3, [pc, #248]	; (8001db0 <Display+0x4c0>)
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	1ad3      	subs	r3, r2, r3
 8001cbc:	4a3d      	ldr	r2, [pc, #244]	; (8001db4 <Display+0x4c4>)
 8001cbe:	2140      	movs	r1, #64	; 0x40
 8001cc0:	4827      	ldr	r0, [pc, #156]	; (8001d60 <Display+0x470>)
 8001cc2:	f005 ff59 	bl	8007b78 <sniprintf>
			ssd1306_SetCursor(2, 8 * 7);
 8001cc6:	2138      	movs	r1, #56	; 0x38
 8001cc8:	2002      	movs	r0, #2
 8001cca:	f001 f89b 	bl	8002e04 <ssd1306_SetCursor>
			ssd1306_WriteString(buff, Font_6x8, White);
 8001cce:	4a25      	ldr	r2, [pc, #148]	; (8001d64 <Display+0x474>)
 8001cd0:	2301      	movs	r3, #1
 8001cd2:	ca06      	ldmia	r2, {r1, r2}
 8001cd4:	4822      	ldr	r0, [pc, #136]	; (8001d60 <Display+0x470>)
 8001cd6:	f001 f86f 	bl	8002db8 <ssd1306_WriteString>
 8001cda:	e037      	b.n	8001d4c <Display+0x45c>
		}

	} else if (mode == 2) {		//setting mode
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	2b02      	cmp	r3, #2
 8001ce0:	d117      	bne.n	8001d12 <Display+0x422>
		snprintf(buff, sizeof(buff), "s_Value:%d", sensitivityValue);
 8001ce2:	4b35      	ldr	r3, [pc, #212]	; (8001db8 <Display+0x4c8>)
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	4a35      	ldr	r2, [pc, #212]	; (8001dbc <Display+0x4cc>)
 8001ce8:	2140      	movs	r1, #64	; 0x40
 8001cea:	481d      	ldr	r0, [pc, #116]	; (8001d60 <Display+0x470>)
 8001cec:	f005 ff44 	bl	8007b78 <sniprintf>
		ssd1306_SetCursor(2, 8 * line_count++);
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	1c5a      	adds	r2, r3, #1
 8001cf4:	60fa      	str	r2, [r7, #12]
 8001cf6:	b2db      	uxtb	r3, r3
 8001cf8:	00db      	lsls	r3, r3, #3
 8001cfa:	b2db      	uxtb	r3, r3
 8001cfc:	4619      	mov	r1, r3
 8001cfe:	2002      	movs	r0, #2
 8001d00:	f001 f880 	bl	8002e04 <ssd1306_SetCursor>
		ssd1306_WriteString(buff, Font_6x8, White);
 8001d04:	4a17      	ldr	r2, [pc, #92]	; (8001d64 <Display+0x474>)
 8001d06:	2301      	movs	r3, #1
 8001d08:	ca06      	ldmia	r2, {r1, r2}
 8001d0a:	4815      	ldr	r0, [pc, #84]	; (8001d60 <Display+0x470>)
 8001d0c:	f001 f854 	bl	8002db8 <ssd1306_WriteString>
 8001d10:	e01c      	b.n	8001d4c <Display+0x45c>

	} else if (mode == 3) {		//setting mode
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	2b03      	cmp	r3, #3
 8001d16:	d119      	bne.n	8001d4c <Display+0x45c>
		snprintf(buff, sizeof(buff), "slowValue:%dms", slowValue * 100);
 8001d18:	4b29      	ldr	r3, [pc, #164]	; (8001dc0 <Display+0x4d0>)
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	2264      	movs	r2, #100	; 0x64
 8001d1e:	fb02 f303 	mul.w	r3, r2, r3
 8001d22:	4a28      	ldr	r2, [pc, #160]	; (8001dc4 <Display+0x4d4>)
 8001d24:	2140      	movs	r1, #64	; 0x40
 8001d26:	480e      	ldr	r0, [pc, #56]	; (8001d60 <Display+0x470>)
 8001d28:	f005 ff26 	bl	8007b78 <sniprintf>
		ssd1306_SetCursor(2, 8 * line_count++);
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	1c5a      	adds	r2, r3, #1
 8001d30:	60fa      	str	r2, [r7, #12]
 8001d32:	b2db      	uxtb	r3, r3
 8001d34:	00db      	lsls	r3, r3, #3
 8001d36:	b2db      	uxtb	r3, r3
 8001d38:	4619      	mov	r1, r3
 8001d3a:	2002      	movs	r0, #2
 8001d3c:	f001 f862 	bl	8002e04 <ssd1306_SetCursor>
		ssd1306_WriteString(buff, Font_6x8, White);
 8001d40:	4a08      	ldr	r2, [pc, #32]	; (8001d64 <Display+0x474>)
 8001d42:	2301      	movs	r3, #1
 8001d44:	ca06      	ldmia	r2, {r1, r2}
 8001d46:	4806      	ldr	r0, [pc, #24]	; (8001d60 <Display+0x470>)
 8001d48:	f001 f836 	bl	8002db8 <ssd1306_WriteString>

	}
	ssd1306_UpdateScreen();
 8001d4c:	f000 ff26 	bl	8002b9c <ssd1306_UpdateScreen>

}
 8001d50:	bf00      	nop
 8001d52:	3714      	adds	r7, #20
 8001d54:	46bd      	mov	sp, r7
 8001d56:	bd90      	pop	{r4, r7, pc}
 8001d58:	20000230 	.word	0x20000230
 8001d5c:	0800aae0 	.word	0x0800aae0
 8001d60:	2000075c 	.word	0x2000075c
 8001d64:	2000001c 	.word	0x2000001c
 8001d68:	2000025c 	.word	0x2000025c
 8001d6c:	20000268 	.word	0x20000268
 8001d70:	0800aac0 	.word	0x0800aac0
 8001d74:	20000238 	.word	0x20000238
 8001d78:	2000023c 	.word	0x2000023c
 8001d7c:	20000008 	.word	0x20000008
 8001d80:	0800aaf0 	.word	0x0800aaf0
 8001d84:	20000234 	.word	0x20000234
 8001d88:	0800ab08 	.word	0x0800ab08
 8001d8c:	20000264 	.word	0x20000264
 8001d90:	0800ab18 	.word	0x0800ab18
 8001d94:	20000248 	.word	0x20000248
 8001d98:	20000250 	.word	0x20000250
 8001d9c:	0800aa98 	.word	0x0800aa98
 8001da0:	2000024c 	.word	0x2000024c
 8001da4:	20000254 	.word	0x20000254
 8001da8:	0800aaac 	.word	0x0800aaac
 8001dac:	2000022c 	.word	0x2000022c
 8001db0:	20000228 	.word	0x20000228
 8001db4:	0800aad8 	.word	0x0800aad8
 8001db8:	20000010 	.word	0x20000010
 8001dbc:	0800ab28 	.word	0x0800ab28
 8001dc0:	2000000c 	.word	0x2000000c
 8001dc4:	0800ab34 	.word	0x0800ab34

08001dc8 <read_GPIO>:
	if (!i) {
		str[i++] = '0';
	}
	str[i] = 0;
}
int read_GPIO(int th) {
 8001dc8:	b580      	push	{r7, lr}
 8001dca:	b084      	sub	sp, #16
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	6078      	str	r0, [r7, #4]
	int state = 0;
 8001dd0:	2300      	movs	r3, #0
 8001dd2:	60fb      	str	r3, [r7, #12]
	if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_12) == GPIO_PIN_SET) {
 8001dd4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001dd8:	482d      	ldr	r0, [pc, #180]	; (8001e90 <read_GPIO+0xc8>)
 8001dda:	f002 fba7 	bl	800452c <HAL_GPIO_ReadPin>
 8001dde:	4603      	mov	r3, r0
 8001de0:	2b01      	cmp	r3, #1
 8001de2:	d104      	bne.n	8001dee <read_GPIO+0x26>
		button_flag[1]++;
 8001de4:	4b2b      	ldr	r3, [pc, #172]	; (8001e94 <read_GPIO+0xcc>)
 8001de6:	685b      	ldr	r3, [r3, #4]
 8001de8:	3301      	adds	r3, #1
 8001dea:	4a2a      	ldr	r2, [pc, #168]	; (8001e94 <read_GPIO+0xcc>)
 8001dec:	6053      	str	r3, [r2, #4]
		//Flash_Write_Data(0x0801FBF8 , "A");
	}
	if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_13) == GPIO_PIN_SET) {
 8001dee:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001df2:	4827      	ldr	r0, [pc, #156]	; (8001e90 <read_GPIO+0xc8>)
 8001df4:	f002 fb9a 	bl	800452c <HAL_GPIO_ReadPin>
 8001df8:	4603      	mov	r3, r0
 8001dfa:	2b01      	cmp	r3, #1
 8001dfc:	d104      	bne.n	8001e08 <read_GPIO+0x40>
		button_flag[2]++;
 8001dfe:	4b25      	ldr	r3, [pc, #148]	; (8001e94 <read_GPIO+0xcc>)
 8001e00:	689b      	ldr	r3, [r3, #8]
 8001e02:	3301      	adds	r3, #1
 8001e04:	4a23      	ldr	r2, [pc, #140]	; (8001e94 <read_GPIO+0xcc>)
 8001e06:	6093      	str	r3, [r2, #8]
	}
	if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_14) == GPIO_PIN_SET) {
 8001e08:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001e0c:	4820      	ldr	r0, [pc, #128]	; (8001e90 <read_GPIO+0xc8>)
 8001e0e:	f002 fb8d 	bl	800452c <HAL_GPIO_ReadPin>
 8001e12:	4603      	mov	r3, r0
 8001e14:	2b01      	cmp	r3, #1
 8001e16:	d104      	bne.n	8001e22 <read_GPIO+0x5a>
		button_flag[3]++;
 8001e18:	4b1e      	ldr	r3, [pc, #120]	; (8001e94 <read_GPIO+0xcc>)
 8001e1a:	68db      	ldr	r3, [r3, #12]
 8001e1c:	3301      	adds	r3, #1
 8001e1e:	4a1d      	ldr	r2, [pc, #116]	; (8001e94 <read_GPIO+0xcc>)
 8001e20:	60d3      	str	r3, [r2, #12]
	}
	if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_15) == GPIO_PIN_SET) {
 8001e22:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001e26:	481a      	ldr	r0, [pc, #104]	; (8001e90 <read_GPIO+0xc8>)
 8001e28:	f002 fb80 	bl	800452c <HAL_GPIO_ReadPin>
 8001e2c:	4603      	mov	r3, r0
 8001e2e:	2b01      	cmp	r3, #1
 8001e30:	d104      	bne.n	8001e3c <read_GPIO+0x74>
		button_flag[4]++;
 8001e32:	4b18      	ldr	r3, [pc, #96]	; (8001e94 <read_GPIO+0xcc>)
 8001e34:	691b      	ldr	r3, [r3, #16]
 8001e36:	3301      	adds	r3, #1
 8001e38:	4a16      	ldr	r2, [pc, #88]	; (8001e94 <read_GPIO+0xcc>)
 8001e3a:	6113      	str	r3, [r2, #16]
		//Flash_Write_Data(0x0801FBF8 , "D");
	}

	if (button_flag[1] >= th)
 8001e3c:	4b15      	ldr	r3, [pc, #84]	; (8001e94 <read_GPIO+0xcc>)
 8001e3e:	685b      	ldr	r3, [r3, #4]
 8001e40:	687a      	ldr	r2, [r7, #4]
 8001e42:	429a      	cmp	r2, r3
 8001e44:	dc01      	bgt.n	8001e4a <read_GPIO+0x82>
		state = 1;
 8001e46:	2301      	movs	r3, #1
 8001e48:	60fb      	str	r3, [r7, #12]
	if (button_flag[2] >= th)
 8001e4a:	4b12      	ldr	r3, [pc, #72]	; (8001e94 <read_GPIO+0xcc>)
 8001e4c:	689b      	ldr	r3, [r3, #8]
 8001e4e:	687a      	ldr	r2, [r7, #4]
 8001e50:	429a      	cmp	r2, r3
 8001e52:	dc02      	bgt.n	8001e5a <read_GPIO+0x92>
		state = state + 2;
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	3302      	adds	r3, #2
 8001e58:	60fb      	str	r3, [r7, #12]
	if (button_flag[3] >= th)
 8001e5a:	4b0e      	ldr	r3, [pc, #56]	; (8001e94 <read_GPIO+0xcc>)
 8001e5c:	68db      	ldr	r3, [r3, #12]
 8001e5e:	687a      	ldr	r2, [r7, #4]
 8001e60:	429a      	cmp	r2, r3
 8001e62:	dc02      	bgt.n	8001e6a <read_GPIO+0xa2>
		state = state + 4;
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	3304      	adds	r3, #4
 8001e68:	60fb      	str	r3, [r7, #12]
	if (button_flag[4] >= th)
 8001e6a:	4b0a      	ldr	r3, [pc, #40]	; (8001e94 <read_GPIO+0xcc>)
 8001e6c:	691b      	ldr	r3, [r3, #16]
 8001e6e:	687a      	ldr	r2, [r7, #4]
 8001e70:	429a      	cmp	r2, r3
 8001e72:	dc02      	bgt.n	8001e7a <read_GPIO+0xb2>
		state = state + 8;
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	3308      	adds	r3, #8
 8001e78:	60fb      	str	r3, [r7, #12]
	if (state == 0)
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d101      	bne.n	8001e84 <read_GPIO+0xbc>
		clean_button_flag();
 8001e80:	f7ff fc7e 	bl	8001780 <clean_button_flag>
	return state;
 8001e84:	68fb      	ldr	r3, [r7, #12]
}
 8001e86:	4618      	mov	r0, r3
 8001e88:	3710      	adds	r7, #16
 8001e8a:	46bd      	mov	sp, r7
 8001e8c:	bd80      	pop	{r7, pc}
 8001e8e:	bf00      	nop
 8001e90:	40010c00 	.word	0x40010c00
 8001e94:	20000268 	.word	0x20000268

08001e98 <check_buttom>:
int check_buttom() {
 8001e98:	b580      	push	{r7, lr}
 8001e9a:	b082      	sub	sp, #8
 8001e9c:	af00      	add	r7, sp, #0
	//讀取案就狀態

	button_State = read_GPIO(1);
 8001e9e:	2001      	movs	r0, #1
 8001ea0:	f7ff ff92 	bl	8001dc8 <read_GPIO>
 8001ea4:	4603      	mov	r3, r0
 8001ea6:	461a      	mov	r2, r3
 8001ea8:	4b99      	ldr	r3, [pc, #612]	; (8002110 <check_buttom+0x278>)
 8001eaa:	601a      	str	r2, [r3, #0]
	int exitSetTime = 8000;
 8001eac:	f44f 53fa 	mov.w	r3, #8000	; 0x1f40
 8001eb0:	607b      	str	r3, [r7, #4]

	if (settingMode == 0) {
 8001eb2:	4b98      	ldr	r3, [pc, #608]	; (8002114 <check_buttom+0x27c>)
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d14d      	bne.n	8001f56 <check_buttom+0xbe>
		if (button_State == 1) {
 8001eba:	4b95      	ldr	r3, [pc, #596]	; (8002110 <check_buttom+0x278>)
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	2b01      	cmp	r3, #1
 8001ec0:	d10a      	bne.n	8001ed8 <check_buttom+0x40>
			//正轉
			end = start + runtime;
 8001ec2:	4b95      	ldr	r3, [pc, #596]	; (8002118 <check_buttom+0x280>)
 8001ec4:	681a      	ldr	r2, [r3, #0]
 8001ec6:	4b95      	ldr	r3, [pc, #596]	; (800211c <check_buttom+0x284>)
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	4413      	add	r3, r2
 8001ecc:	4a94      	ldr	r2, [pc, #592]	; (8002120 <check_buttom+0x288>)
 8001ece:	6013      	str	r3, [r2, #0]
			dir_flag = 1;
 8001ed0:	4b94      	ldr	r3, [pc, #592]	; (8002124 <check_buttom+0x28c>)
 8001ed2:	2201      	movs	r2, #1
 8001ed4:	601a      	str	r2, [r3, #0]
 8001ed6:	e1dd      	b.n	8002294 <check_buttom+0x3fc>
		} else if (button_State == 4) {
 8001ed8:	4b8d      	ldr	r3, [pc, #564]	; (8002110 <check_buttom+0x278>)
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	2b04      	cmp	r3, #4
 8001ede:	d10a      	bne.n	8001ef6 <check_buttom+0x5e>
			//反轉
			end = start + runtime;
 8001ee0:	4b8d      	ldr	r3, [pc, #564]	; (8002118 <check_buttom+0x280>)
 8001ee2:	681a      	ldr	r2, [r3, #0]
 8001ee4:	4b8d      	ldr	r3, [pc, #564]	; (800211c <check_buttom+0x284>)
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	4413      	add	r3, r2
 8001eea:	4a8d      	ldr	r2, [pc, #564]	; (8002120 <check_buttom+0x288>)
 8001eec:	6013      	str	r3, [r2, #0]
			dir_flag = 4;
 8001eee:	4b8d      	ldr	r3, [pc, #564]	; (8002124 <check_buttom+0x28c>)
 8001ef0:	2204      	movs	r2, #4
 8001ef2:	601a      	str	r2, [r3, #0]
 8001ef4:	e1ce      	b.n	8002294 <check_buttom+0x3fc>
		} else if (button_State == 2) {
 8001ef6:	4b86      	ldr	r3, [pc, #536]	; (8002110 <check_buttom+0x278>)
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	2b02      	cmp	r3, #2
 8001efc:	d108      	bne.n	8001f10 <check_buttom+0x78>
			//停止
			end = start;
 8001efe:	4b86      	ldr	r3, [pc, #536]	; (8002118 <check_buttom+0x280>)
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	4a87      	ldr	r2, [pc, #540]	; (8002120 <check_buttom+0x288>)
 8001f04:	6013      	str	r3, [r2, #0]
			motor_control(0, 0);
 8001f06:	2100      	movs	r1, #0
 8001f08:	2000      	movs	r0, #0
 8001f0a:	f7ff f923 	bl	8001154 <motor_control>
 8001f0e:	e1c1      	b.n	8002294 <check_buttom+0x3fc>
		} else if (button_State == 5) {
 8001f10:	4b7f      	ldr	r3, [pc, #508]	; (8002110 <check_buttom+0x278>)
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	2b05      	cmp	r3, #5
 8001f16:	d108      	bne.n	8001f2a <check_buttom+0x92>
			//尚未定義 強制停止
			end = start;
 8001f18:	4b7f      	ldr	r3, [pc, #508]	; (8002118 <check_buttom+0x280>)
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	4a80      	ldr	r2, [pc, #512]	; (8002120 <check_buttom+0x288>)
 8001f1e:	6013      	str	r3, [r2, #0]
			motor_control(0, 0);
 8001f20:	2100      	movs	r1, #0
 8001f22:	2000      	movs	r0, #0
 8001f24:	f7ff f916 	bl	8001154 <motor_control>
 8001f28:	e1b4      	b.n	8002294 <check_buttom+0x3fc>
		} else if (button_State == 8) {
 8001f2a:	4b79      	ldr	r3, [pc, #484]	; (8002110 <check_buttom+0x278>)
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	2b08      	cmp	r3, #8
 8001f30:	f040 81b0 	bne.w	8002294 <check_buttom+0x3fc>
			//進入設定模式
			motor_control(0, 0);
 8001f34:	2100      	movs	r1, #0
 8001f36:	2000      	movs	r0, #0
 8001f38:	f7ff f90c 	bl	8001154 <motor_control>
			end = start + exitSetTime;
 8001f3c:	4b76      	ldr	r3, [pc, #472]	; (8002118 <check_buttom+0x280>)
 8001f3e:	681a      	ldr	r2, [r3, #0]
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	4413      	add	r3, r2
 8001f44:	4a76      	ldr	r2, [pc, #472]	; (8002120 <check_buttom+0x288>)
 8001f46:	6013      	str	r3, [r2, #0]
			//motor_point(100);
			settingMode = 1;
 8001f48:	4b72      	ldr	r3, [pc, #456]	; (8002114 <check_buttom+0x27c>)
 8001f4a:	2201      	movs	r2, #1
 8001f4c:	601a      	str	r2, [r3, #0]
			buzzerTimes(3);
 8001f4e:	2003      	movs	r0, #3
 8001f50:	f7ff fbf0 	bl	8001734 <buzzerTimes>
 8001f54:	e19e      	b.n	8002294 <check_buttom+0x3fc>
		}
	} else {

		if (button_State > 0) {
 8001f56:	4b6e      	ldr	r3, [pc, #440]	; (8002110 <check_buttom+0x278>)
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d005      	beq.n	8001f6a <check_buttom+0xd2>
			end = start + exitSetTime;
 8001f5e:	4b6e      	ldr	r3, [pc, #440]	; (8002118 <check_buttom+0x280>)
 8001f60:	681a      	ldr	r2, [r3, #0]
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	4413      	add	r3, r2
 8001f66:	4a6e      	ldr	r2, [pc, #440]	; (8002120 <check_buttom+0x288>)
 8001f68:	6013      	str	r3, [r2, #0]
		}
		if (button_State == 1) {//shrot press is move ,long press into set adc-power.
 8001f6a:	4b69      	ldr	r3, [pc, #420]	; (8002110 <check_buttom+0x278>)
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	2b01      	cmp	r3, #1
 8001f70:	f040 8094 	bne.w	800209c <check_buttom+0x204>
			while (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_12) == GPIO_PIN_SET) {
 8001f74:	e009      	b.n	8001f8a <check_buttom+0xf2>
				pressTimer++;
 8001f76:	4b6c      	ldr	r3, [pc, #432]	; (8002128 <check_buttom+0x290>)
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	3301      	adds	r3, #1
 8001f7c:	4a6a      	ldr	r2, [pc, #424]	; (8002128 <check_buttom+0x290>)
 8001f7e:	6013      	str	r3, [r2, #0]
				Display(settingMode);
 8001f80:	4b64      	ldr	r3, [pc, #400]	; (8002114 <check_buttom+0x27c>)
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	4618      	mov	r0, r3
 8001f86:	f7ff fcb3 	bl	80018f0 <Display>
			while (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_12) == GPIO_PIN_SET) {
 8001f8a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001f8e:	4867      	ldr	r0, [pc, #412]	; (800212c <check_buttom+0x294>)
 8001f90:	f002 facc 	bl	800452c <HAL_GPIO_ReadPin>
 8001f94:	4603      	mov	r3, r0
 8001f96:	2b01      	cmp	r3, #1
 8001f98:	d0ed      	beq.n	8001f76 <check_buttom+0xde>
			}
			//pressTimer++;
			if (pressTimer > 8) {
 8001f9a:	4b63      	ldr	r3, [pc, #396]	; (8002128 <check_buttom+0x290>)
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	2b08      	cmp	r3, #8
 8001fa0:	dd5f      	ble.n	8002062 <check_buttom+0x1ca>
				pressTimer = 0;
 8001fa2:	4b61      	ldr	r3, [pc, #388]	; (8002128 <check_buttom+0x290>)
 8001fa4:	2200      	movs	r2, #0
 8001fa6:	601a      	str	r2, [r3, #0]
				settingMode = 2;
 8001fa8:	4b5a      	ldr	r3, [pc, #360]	; (8002114 <check_buttom+0x27c>)
 8001faa:	2202      	movs	r2, #2
 8001fac:	601a      	str	r2, [r3, #0]
				while (settingMode == 2) {
 8001fae:	e053      	b.n	8002058 <check_buttom+0x1c0>
					Display(settingMode);
 8001fb0:	4b58      	ldr	r3, [pc, #352]	; (8002114 <check_buttom+0x27c>)
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	4618      	mov	r0, r3
 8001fb6:	f7ff fc9b 	bl	80018f0 <Display>
					if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_12) == GPIO_PIN_SET) {
 8001fba:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001fbe:	485b      	ldr	r0, [pc, #364]	; (800212c <check_buttom+0x294>)
 8001fc0:	f002 fab4 	bl	800452c <HAL_GPIO_ReadPin>
 8001fc4:	4603      	mov	r3, r0
 8001fc6:	2b01      	cmp	r3, #1
 8001fc8:	d10e      	bne.n	8001fe8 <check_buttom+0x150>
						if (sensitivityValue <= 1000) {
 8001fca:	4b59      	ldr	r3, [pc, #356]	; (8002130 <check_buttom+0x298>)
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001fd2:	dc05      	bgt.n	8001fe0 <check_buttom+0x148>
							sensitivityValue += 20;
 8001fd4:	4b56      	ldr	r3, [pc, #344]	; (8002130 <check_buttom+0x298>)
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	3314      	adds	r3, #20
 8001fda:	4a55      	ldr	r2, [pc, #340]	; (8002130 <check_buttom+0x298>)
 8001fdc:	6013      	str	r3, [r2, #0]
 8001fde:	e003      	b.n	8001fe8 <check_buttom+0x150>
						} else {
							sensitivityValue = 1000;
 8001fe0:	4b53      	ldr	r3, [pc, #332]	; (8002130 <check_buttom+0x298>)
 8001fe2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001fe6:	601a      	str	r2, [r3, #0]
						}
					}
					if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_13) == GPIO_PIN_SET) {
 8001fe8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001fec:	484f      	ldr	r0, [pc, #316]	; (800212c <check_buttom+0x294>)
 8001fee:	f002 fa9d 	bl	800452c <HAL_GPIO_ReadPin>
 8001ff2:	4603      	mov	r3, r0
 8001ff4:	2b01      	cmp	r3, #1
 8001ff6:	d10c      	bne.n	8002012 <check_buttom+0x17a>
						settingMode = 1;
 8001ff8:	4b46      	ldr	r3, [pc, #280]	; (8002114 <check_buttom+0x27c>)
 8001ffa:	2201      	movs	r2, #1
 8001ffc:	601a      	str	r2, [r3, #0]
						sensitivity = sensitivityValue;
 8001ffe:	4b4c      	ldr	r3, [pc, #304]	; (8002130 <check_buttom+0x298>)
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	461a      	mov	r2, r3
 8002004:	4b4b      	ldr	r3, [pc, #300]	; (8002134 <check_buttom+0x29c>)
 8002006:	601a      	str	r2, [r3, #0]
						buzzerTimes(3);
 8002008:	2003      	movs	r0, #3
 800200a:	f7ff fb93 	bl	8001734 <buzzerTimes>
						KeepSet();
 800200e:	f7ff f9ab 	bl	8001368 <KeepSet>
					}
					if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_14) == GPIO_PIN_SET) {
 8002012:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002016:	4845      	ldr	r0, [pc, #276]	; (800212c <check_buttom+0x294>)
 8002018:	f002 fa88 	bl	800452c <HAL_GPIO_ReadPin>
 800201c:	4603      	mov	r3, r0
 800201e:	2b01      	cmp	r3, #1
 8002020:	d10c      	bne.n	800203c <check_buttom+0x1a4>
						if (sensitivityValue >= 20) {
 8002022:	4b43      	ldr	r3, [pc, #268]	; (8002130 <check_buttom+0x298>)
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	2b13      	cmp	r3, #19
 8002028:	dd05      	ble.n	8002036 <check_buttom+0x19e>
							sensitivityValue -= 20;
 800202a:	4b41      	ldr	r3, [pc, #260]	; (8002130 <check_buttom+0x298>)
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	3b14      	subs	r3, #20
 8002030:	4a3f      	ldr	r2, [pc, #252]	; (8002130 <check_buttom+0x298>)
 8002032:	6013      	str	r3, [r2, #0]
 8002034:	e002      	b.n	800203c <check_buttom+0x1a4>
						} else {
							sensitivityValue = 0;
 8002036:	4b3e      	ldr	r3, [pc, #248]	; (8002130 <check_buttom+0x298>)
 8002038:	2200      	movs	r2, #0
 800203a:	601a      	str	r2, [r3, #0]
						}
					}
					if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_15) == GPIO_PIN_SET) {
 800203c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002040:	483a      	ldr	r0, [pc, #232]	; (800212c <check_buttom+0x294>)
 8002042:	f002 fa73 	bl	800452c <HAL_GPIO_ReadPin>
 8002046:	4603      	mov	r3, r0
 8002048:	2b01      	cmp	r3, #1
 800204a:	d102      	bne.n	8002052 <check_buttom+0x1ba>
						settingMode = 1;
 800204c:	4b31      	ldr	r3, [pc, #196]	; (8002114 <check_buttom+0x27c>)
 800204e:	2201      	movs	r2, #1
 8002050:	601a      	str	r2, [r3, #0]
					}
					HAL_Delay(250);
 8002052:	20fa      	movs	r0, #250	; 0xfa
 8002054:	f000 ff90 	bl	8002f78 <HAL_Delay>
				while (settingMode == 2) {
 8002058:	4b2e      	ldr	r3, [pc, #184]	; (8002114 <check_buttom+0x27c>)
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	2b02      	cmp	r3, #2
 800205e:	d0a7      	beq.n	8001fb0 <check_buttom+0x118>
 8002060:	e118      	b.n	8002294 <check_buttom+0x3fc>
				}
			} else {
				motor_control(1, 4000);
 8002062:	f44f 617a 	mov.w	r1, #4000	; 0xfa0
 8002066:	2001      	movs	r0, #1
 8002068:	f7ff f874 	bl	8001154 <motor_control>
				HAL_Delay(500);
 800206c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002070:	f000 ff82 	bl	8002f78 <HAL_Delay>
				motor_control(0, 0);
 8002074:	2100      	movs	r1, #0
 8002076:	2000      	movs	r0, #0
 8002078:	f7ff f86c 	bl	8001154 <motor_control>
				if (nowPosition >= 1000) {
 800207c:	4b2e      	ldr	r3, [pc, #184]	; (8002138 <check_buttom+0x2a0>)
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002084:	db04      	blt.n	8002090 <check_buttom+0x1f8>
					nowPosition = 1000;
 8002086:	4b2c      	ldr	r3, [pc, #176]	; (8002138 <check_buttom+0x2a0>)
 8002088:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800208c:	601a      	str	r2, [r3, #0]
 800208e:	e101      	b.n	8002294 <check_buttom+0x3fc>
				} else {
					nowPosition++;
 8002090:	4b29      	ldr	r3, [pc, #164]	; (8002138 <check_buttom+0x2a0>)
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	3301      	adds	r3, #1
 8002096:	4a28      	ldr	r2, [pc, #160]	; (8002138 <check_buttom+0x2a0>)
 8002098:	6013      	str	r3, [r2, #0]
 800209a:	e0fb      	b.n	8002294 <check_buttom+0x3fc>
				}

			}

		} else if (button_State == 4) {	//shrot press is move ,long press into set slow-val.
 800209c:	4b1c      	ldr	r3, [pc, #112]	; (8002110 <check_buttom+0x278>)
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	2b04      	cmp	r3, #4
 80020a2:	f040 80a4 	bne.w	80021ee <check_buttom+0x356>
			while (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_14) == GPIO_PIN_SET) {
 80020a6:	e009      	b.n	80020bc <check_buttom+0x224>
				pressTimer++;
 80020a8:	4b1f      	ldr	r3, [pc, #124]	; (8002128 <check_buttom+0x290>)
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	3301      	adds	r3, #1
 80020ae:	4a1e      	ldr	r2, [pc, #120]	; (8002128 <check_buttom+0x290>)
 80020b0:	6013      	str	r3, [r2, #0]
				Display(settingMode);
 80020b2:	4b18      	ldr	r3, [pc, #96]	; (8002114 <check_buttom+0x27c>)
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	4618      	mov	r0, r3
 80020b8:	f7ff fc1a 	bl	80018f0 <Display>
			while (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_14) == GPIO_PIN_SET) {
 80020bc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80020c0:	481a      	ldr	r0, [pc, #104]	; (800212c <check_buttom+0x294>)
 80020c2:	f002 fa33 	bl	800452c <HAL_GPIO_ReadPin>
 80020c6:	4603      	mov	r3, r0
 80020c8:	2b01      	cmp	r3, #1
 80020ca:	d0ed      	beq.n	80020a8 <check_buttom+0x210>
			}
			//pressTimer++;
			if (pressTimer > 8) {
 80020cc:	4b16      	ldr	r3, [pc, #88]	; (8002128 <check_buttom+0x290>)
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	2b08      	cmp	r3, #8
 80020d2:	dd70      	ble.n	80021b6 <check_buttom+0x31e>
				pressTimer = 0;
 80020d4:	4b14      	ldr	r3, [pc, #80]	; (8002128 <check_buttom+0x290>)
 80020d6:	2200      	movs	r2, #0
 80020d8:	601a      	str	r2, [r3, #0]
				settingMode = 3;
 80020da:	4b0e      	ldr	r3, [pc, #56]	; (8002114 <check_buttom+0x27c>)
 80020dc:	2203      	movs	r2, #3
 80020de:	601a      	str	r2, [r3, #0]
				while (settingMode == 3) {
 80020e0:	e064      	b.n	80021ac <check_buttom+0x314>
					Display(settingMode);
 80020e2:	4b0c      	ldr	r3, [pc, #48]	; (8002114 <check_buttom+0x27c>)
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	4618      	mov	r0, r3
 80020e8:	f7ff fc02 	bl	80018f0 <Display>
					if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_12) == GPIO_PIN_SET) {
 80020ec:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80020f0:	480e      	ldr	r0, [pc, #56]	; (800212c <check_buttom+0x294>)
 80020f2:	f002 fa1b 	bl	800452c <HAL_GPIO_ReadPin>
 80020f6:	4603      	mov	r3, r0
 80020f8:	2b01      	cmp	r3, #1
 80020fa:	d124      	bne.n	8002146 <check_buttom+0x2ae>
						if (slowValue <= 100) {
 80020fc:	4b0f      	ldr	r3, [pc, #60]	; (800213c <check_buttom+0x2a4>)
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	2b64      	cmp	r3, #100	; 0x64
 8002102:	dc1d      	bgt.n	8002140 <check_buttom+0x2a8>
							slowValue += 1;
 8002104:	4b0d      	ldr	r3, [pc, #52]	; (800213c <check_buttom+0x2a4>)
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	3301      	adds	r3, #1
 800210a:	4a0c      	ldr	r2, [pc, #48]	; (800213c <check_buttom+0x2a4>)
 800210c:	6013      	str	r3, [r2, #0]
 800210e:	e01a      	b.n	8002146 <check_buttom+0x2ae>
 8002110:	2000025c 	.word	0x2000025c
 8002114:	20000230 	.word	0x20000230
 8002118:	20000228 	.word	0x20000228
 800211c:	20000000 	.word	0x20000000
 8002120:	2000022c 	.word	0x2000022c
 8002124:	20000260 	.word	0x20000260
 8002128:	20000234 	.word	0x20000234
 800212c:	40010c00 	.word	0x40010c00
 8002130:	20000010 	.word	0x20000010
 8002134:	20000004 	.word	0x20000004
 8002138:	20000238 	.word	0x20000238
 800213c:	2000000c 	.word	0x2000000c
						} else {
							slowValue = 100;
 8002140:	4b57      	ldr	r3, [pc, #348]	; (80022a0 <check_buttom+0x408>)
 8002142:	2264      	movs	r2, #100	; 0x64
 8002144:	601a      	str	r2, [r3, #0]
						}
					}
					if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_13) == GPIO_PIN_SET) {
 8002146:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800214a:	4856      	ldr	r0, [pc, #344]	; (80022a4 <check_buttom+0x40c>)
 800214c:	f002 f9ee 	bl	800452c <HAL_GPIO_ReadPin>
 8002150:	4603      	mov	r3, r0
 8002152:	2b01      	cmp	r3, #1
 8002154:	d107      	bne.n	8002166 <check_buttom+0x2ce>
						settingMode = 1;
 8002156:	4b54      	ldr	r3, [pc, #336]	; (80022a8 <check_buttom+0x410>)
 8002158:	2201      	movs	r2, #1
 800215a:	601a      	str	r2, [r3, #0]
						buzzerTimes(3);
 800215c:	2003      	movs	r0, #3
 800215e:	f7ff fae9 	bl	8001734 <buzzerTimes>
						KeepSet();
 8002162:	f7ff f901 	bl	8001368 <KeepSet>
					}
					if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_14) == GPIO_PIN_SET) {
 8002166:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800216a:	484e      	ldr	r0, [pc, #312]	; (80022a4 <check_buttom+0x40c>)
 800216c:	f002 f9de 	bl	800452c <HAL_GPIO_ReadPin>
 8002170:	4603      	mov	r3, r0
 8002172:	2b01      	cmp	r3, #1
 8002174:	d10c      	bne.n	8002190 <check_buttom+0x2f8>
						if (slowValue >= 1) {
 8002176:	4b4a      	ldr	r3, [pc, #296]	; (80022a0 <check_buttom+0x408>)
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	2b00      	cmp	r3, #0
 800217c:	dd05      	ble.n	800218a <check_buttom+0x2f2>
							slowValue -= 1;
 800217e:	4b48      	ldr	r3, [pc, #288]	; (80022a0 <check_buttom+0x408>)
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	3b01      	subs	r3, #1
 8002184:	4a46      	ldr	r2, [pc, #280]	; (80022a0 <check_buttom+0x408>)
 8002186:	6013      	str	r3, [r2, #0]
 8002188:	e002      	b.n	8002190 <check_buttom+0x2f8>
						} else {
							slowValue = 0;
 800218a:	4b45      	ldr	r3, [pc, #276]	; (80022a0 <check_buttom+0x408>)
 800218c:	2200      	movs	r2, #0
 800218e:	601a      	str	r2, [r3, #0]
						}
					}
					if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_15) == GPIO_PIN_SET) {
 8002190:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002194:	4843      	ldr	r0, [pc, #268]	; (80022a4 <check_buttom+0x40c>)
 8002196:	f002 f9c9 	bl	800452c <HAL_GPIO_ReadPin>
 800219a:	4603      	mov	r3, r0
 800219c:	2b01      	cmp	r3, #1
 800219e:	d102      	bne.n	80021a6 <check_buttom+0x30e>
						settingMode = 1;
 80021a0:	4b41      	ldr	r3, [pc, #260]	; (80022a8 <check_buttom+0x410>)
 80021a2:	2201      	movs	r2, #1
 80021a4:	601a      	str	r2, [r3, #0]
					}
					HAL_Delay(250);
 80021a6:	20fa      	movs	r0, #250	; 0xfa
 80021a8:	f000 fee6 	bl	8002f78 <HAL_Delay>
				while (settingMode == 3) {
 80021ac:	4b3e      	ldr	r3, [pc, #248]	; (80022a8 <check_buttom+0x410>)
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	2b03      	cmp	r3, #3
 80021b2:	d096      	beq.n	80020e2 <check_buttom+0x24a>
 80021b4:	e06e      	b.n	8002294 <check_buttom+0x3fc>
				}
			} else {
				motor_control(-1, 4000);
 80021b6:	f44f 617a 	mov.w	r1, #4000	; 0xfa0
 80021ba:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80021be:	f7fe ffc9 	bl	8001154 <motor_control>
				HAL_Delay(500);
 80021c2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80021c6:	f000 fed7 	bl	8002f78 <HAL_Delay>
				motor_control(0, 0);
 80021ca:	2100      	movs	r1, #0
 80021cc:	2000      	movs	r0, #0
 80021ce:	f7fe ffc1 	bl	8001154 <motor_control>
				if (nowPosition < 1) {
 80021d2:	4b36      	ldr	r3, [pc, #216]	; (80022ac <check_buttom+0x414>)
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	dc03      	bgt.n	80021e2 <check_buttom+0x34a>
					nowPosition = 0;
 80021da:	4b34      	ldr	r3, [pc, #208]	; (80022ac <check_buttom+0x414>)
 80021dc:	2200      	movs	r2, #0
 80021de:	601a      	str	r2, [r3, #0]
 80021e0:	e058      	b.n	8002294 <check_buttom+0x3fc>
				} else {
					nowPosition--;
 80021e2:	4b32      	ldr	r3, [pc, #200]	; (80022ac <check_buttom+0x414>)
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	3b01      	subs	r3, #1
 80021e8:	4a30      	ldr	r2, [pc, #192]	; (80022ac <check_buttom+0x414>)
 80021ea:	6013      	str	r3, [r2, #0]
 80021ec:	e052      	b.n	8002294 <check_buttom+0x3fc>
				}
			}
		} else if (button_State == 2) {		//set favorite-point
 80021ee:	4b30      	ldr	r3, [pc, #192]	; (80022b0 <check_buttom+0x418>)
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	2b02      	cmp	r3, #2
 80021f4:	d04e      	beq.n	8002294 <check_buttom+0x3fc>

		} else if (button_State == 5) {		//change motor dir
 80021f6:	4b2e      	ldr	r3, [pc, #184]	; (80022b0 <check_buttom+0x418>)
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	2b05      	cmp	r3, #5
 80021fc:	d119      	bne.n	8002232 <check_buttom+0x39a>
			ReadSet();
 80021fe:	f7ff f8d9 	bl	80013b4 <ReadSet>
			buzzerTimes(3);
 8002202:	2003      	movs	r0, #3
 8002204:	f7ff fa96 	bl	8001734 <buzzerTimes>
			settingMode = 1;
 8002208:	4b27      	ldr	r3, [pc, #156]	; (80022a8 <check_buttom+0x410>)
 800220a:	2201      	movs	r2, #1
 800220c:	601a      	str	r2, [r3, #0]
			if (setDir_flag == 1) {
 800220e:	4b29      	ldr	r3, [pc, #164]	; (80022b4 <check_buttom+0x41c>)
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	2b01      	cmp	r3, #1
 8002214:	d103      	bne.n	800221e <check_buttom+0x386>
				setDir_flag = 0;
 8002216:	4b27      	ldr	r3, [pc, #156]	; (80022b4 <check_buttom+0x41c>)
 8002218:	2200      	movs	r2, #0
 800221a:	601a      	str	r2, [r3, #0]
 800221c:	e002      	b.n	8002224 <check_buttom+0x38c>
			} else {
				setDir_flag = 1;
 800221e:	4b25      	ldr	r3, [pc, #148]	; (80022b4 <check_buttom+0x41c>)
 8002220:	2201      	movs	r2, #1
 8002222:	601a      	str	r2, [r3, #0]
			}
			KeepSet();
 8002224:	f7ff f8a0 	bl	8001368 <KeepSet>
			HAL_Delay(500);
 8002228:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800222c:	f000 fea4 	bl	8002f78 <HAL_Delay>
 8002230:	e030      	b.n	8002294 <check_buttom+0x3fc>

		} else if (button_State == 3) {		//set up-point
 8002232:	4b1f      	ldr	r3, [pc, #124]	; (80022b0 <check_buttom+0x418>)
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	2b03      	cmp	r3, #3
 8002238:	d10c      	bne.n	8002254 <check_buttom+0x3bc>
			settingMode = 1;
 800223a:	4b1b      	ldr	r3, [pc, #108]	; (80022a8 <check_buttom+0x410>)
 800223c:	2201      	movs	r2, #1
 800223e:	601a      	str	r2, [r3, #0]
			stayPositionUp = nowPosition;
 8002240:	4b1a      	ldr	r3, [pc, #104]	; (80022ac <check_buttom+0x414>)
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	4a1c      	ldr	r2, [pc, #112]	; (80022b8 <check_buttom+0x420>)
 8002246:	6013      	str	r3, [r2, #0]
			buzzerTimes(3);
 8002248:	2003      	movs	r0, #3
 800224a:	f7ff fa73 	bl	8001734 <buzzerTimes>
			KeepSet();
 800224e:	f7ff f88b 	bl	8001368 <KeepSet>
 8002252:	e01f      	b.n	8002294 <check_buttom+0x3fc>
		} else if (button_State == 6) {		//set donw-point
 8002254:	4b16      	ldr	r3, [pc, #88]	; (80022b0 <check_buttom+0x418>)
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	2b06      	cmp	r3, #6
 800225a:	d10c      	bne.n	8002276 <check_buttom+0x3de>
			settingMode = 1;
 800225c:	4b12      	ldr	r3, [pc, #72]	; (80022a8 <check_buttom+0x410>)
 800225e:	2201      	movs	r2, #1
 8002260:	601a      	str	r2, [r3, #0]
			stayPositionDown = nowPosition;
 8002262:	4b12      	ldr	r3, [pc, #72]	; (80022ac <check_buttom+0x414>)
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	4a15      	ldr	r2, [pc, #84]	; (80022bc <check_buttom+0x424>)
 8002268:	6013      	str	r3, [r2, #0]
			buzzerTimes(3);
 800226a:	2003      	movs	r0, #3
 800226c:	f7ff fa62 	bl	8001734 <buzzerTimes>
			KeepSet();
 8002270:	f7ff f87a 	bl	8001368 <KeepSet>
 8002274:	e00e      	b.n	8002294 <check_buttom+0x3fc>

		} else if (button_State == 8) {
 8002276:	4b0e      	ldr	r3, [pc, #56]	; (80022b0 <check_buttom+0x418>)
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	2b08      	cmp	r3, #8
 800227c:	d103      	bne.n	8002286 <check_buttom+0x3ee>
			settingMode = 1;
 800227e:	4b0a      	ldr	r3, [pc, #40]	; (80022a8 <check_buttom+0x410>)
 8002280:	2201      	movs	r2, #1
 8002282:	601a      	str	r2, [r3, #0]
 8002284:	e006      	b.n	8002294 <check_buttom+0x3fc>
		} else if (button_State == 0) {
 8002286:	4b0a      	ldr	r3, [pc, #40]	; (80022b0 <check_buttom+0x418>)
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	2b00      	cmp	r3, #0
 800228c:	d102      	bne.n	8002294 <check_buttom+0x3fc>
			pressTimer = 0;
 800228e:	4b0c      	ldr	r3, [pc, #48]	; (80022c0 <check_buttom+0x428>)
 8002290:	2200      	movs	r2, #0
 8002292:	601a      	str	r2, [r3, #0]
		}
	}
}
 8002294:	bf00      	nop
 8002296:	4618      	mov	r0, r3
 8002298:	3708      	adds	r7, #8
 800229a:	46bd      	mov	sp, r7
 800229c:	bd80      	pop	{r7, pc}
 800229e:	bf00      	nop
 80022a0:	2000000c 	.word	0x2000000c
 80022a4:	40010c00 	.word	0x40010c00
 80022a8:	20000230 	.word	0x20000230
 80022ac:	20000238 	.word	0x20000238
 80022b0:	2000025c 	.word	0x2000025c
 80022b4:	20000264 	.word	0x20000264
 80022b8:	2000023c 	.word	0x2000023c
 80022bc:	20000008 	.word	0x20000008
 80022c0:	20000234 	.word	0x20000234

080022c4 <HAL_GPIO_EXTI_Callback>:
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 80022c4:	b480      	push	{r7}
 80022c6:	b083      	sub	sp, #12
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	4603      	mov	r3, r0
 80022cc:	80fb      	strh	r3, [r7, #6]
	 HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13); //PC13 Led
	 button_flag[4]++;
	 break;
	 }
	 */
}
 80022ce:	bf00      	nop
 80022d0:	370c      	adds	r7, #12
 80022d2:	46bd      	mov	sp, r7
 80022d4:	bc80      	pop	{r7}
 80022d6:	4770      	bx	lr

080022d8 <main>:
/* USER CODE END 0 */

int main(void) {
 80022d8:	b580      	push	{r7, lr}
 80022da:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration----------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80022dc:	f000 fe02 	bl	8002ee4 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80022e0:	f000 f850 	bl	8002384 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80022e4:	f7fe fe08 	bl	8000ef8 <MX_GPIO_Init>
	MX_DMA_Init();
 80022e8:	f7fe fde8 	bl	8000ebc <MX_DMA_Init>
	MX_I2C1_Init();
 80022ec:	f7fe fe74 	bl	8000fd8 <MX_I2C1_Init>
	MX_ADC1_Init();
 80022f0:	f7fe fd2e 	bl	8000d50 <MX_ADC1_Init>
	MX_TIM2_Init();
 80022f4:	f000 fa3e 	bl	8002774 <MX_TIM2_Init>
	MX_RTC_Init();
 80022f8:	f000 f8b2 	bl	8002460 <MX_RTC_Init>
	MX_USART2_UART_Init();
 80022fc:	f000 fb1c 	bl	8002938 <MX_USART2_UART_Init>

	/* USER CODE BEGIN 2 */
	//ssd1306_Reset();
	ssd1306_Init();
 8002300:	f000 fbc0 	bl	8002a84 <ssd1306_Init>
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*) &ADC_Value, 100);
 8002304:	2264      	movs	r2, #100	; 0x64
 8002306:	4919      	ldr	r1, [pc, #100]	; (800236c <main+0x94>)
 8002308:	4819      	ldr	r0, [pc, #100]	; (8002370 <main+0x98>)
 800230a:	f000 ff2b 	bl	8003164 <HAL_ADC_Start_DMA>
	//HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
	motor_control(0, 0);
 800230e:	2100      	movs	r1, #0
 8002310:	2000      	movs	r0, #0
 8002312:	f7fe ff1f 	bl	8001154 <motor_control>
	 5.slowValue
	 6.dir_flag

	 */
	//WriteSet(5,1,20,100,5,1);
	ReadSet();
 8002316:	f7ff f84d 	bl	80013b4 <ReadSet>
	buzzerTimes(1);
 800231a:	2001      	movs	r0, #1
 800231c:	f7ff fa0a 	bl	8001734 <buzzerTimes>
	while (1) {
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */
		//系統運行時間
		start = HAL_GetTick();
 8002320:	f000 fe20 	bl	8002f64 <HAL_GetTick>
 8002324:	4602      	mov	r2, r0
 8002326:	4b13      	ldr	r3, [pc, #76]	; (8002374 <main+0x9c>)
 8002328:	601a      	str	r2, [r3, #0]
		if (settingMode == 0) {	//運行模式
 800232a:	4b13      	ldr	r3, [pc, #76]	; (8002378 <main+0xa0>)
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	2b00      	cmp	r3, #0
 8002330:	d102      	bne.n	8002338 <main+0x60>
			//timerControl();
			stepControl();
 8002332:	f7ff f8af 	bl	8001494 <stepControl>
 8002336:	e008      	b.n	800234a <main+0x72>
		} else {	//設定模式
			if (start < end) {	//時間未結束
 8002338:	4b0e      	ldr	r3, [pc, #56]	; (8002374 <main+0x9c>)
 800233a:	681a      	ldr	r2, [r3, #0]
 800233c:	4b0f      	ldr	r3, [pc, #60]	; (800237c <main+0xa4>)
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	429a      	cmp	r2, r3
 8002342:	d302      	bcc.n	800234a <main+0x72>

			} else {
				settingMode = 0;
 8002344:	4b0c      	ldr	r3, [pc, #48]	; (8002378 <main+0xa0>)
 8002346:	2200      	movs	r2, #0
 8002348:	601a      	str	r2, [r3, #0]
			}
		}
		//壓力觸動時輸出1
		//sysinfo_State = read_ADC();
		read_ADC();
 800234a:	f7ff fa37 	bl	80017bc <read_ADC>

		check_buttom();
 800234e:	f7ff fda3 	bl	8001e98 <check_buttom>

		//LCD畫面
		if (i2c_working == 1)
 8002352:	4b0b      	ldr	r3, [pc, #44]	; (8002380 <main+0xa8>)
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	2b01      	cmp	r3, #1
 8002358:	d104      	bne.n	8002364 <main+0x8c>
			Display(settingMode);
 800235a:	4b07      	ldr	r3, [pc, #28]	; (8002378 <main+0xa0>)
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	4618      	mov	r0, r3
 8002360:	f7ff fac6 	bl	80018f0 <Display>

		//系統LED PC13
		//HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);

		//清除button flag
		clean_button_flag();
 8002364:	f7ff fa0c 	bl	8001780 <clean_button_flag>
		start = HAL_GetTick();
 8002368:	e7da      	b.n	8002320 <main+0x48>
 800236a:	bf00      	nop
 800236c:	200007c0 	.word	0x200007c0
 8002370:	20000690 	.word	0x20000690
 8002374:	20000228 	.word	0x20000228
 8002378:	20000230 	.word	0x20000230
 800237c:	2000022c 	.word	0x2000022c
 8002380:	20000014 	.word	0x20000014

08002384 <SystemClock_Config>:

}

/** System Clock Configuration
 */
void SystemClock_Config(void) {
 8002384:	b580      	push	{r7, lr}
 8002386:	b094      	sub	sp, #80	; 0x50
 8002388:	af00      	add	r7, sp, #0
	RCC_ClkInitTypeDef RCC_ClkInitStruct;
	RCC_PeriphCLKInitTypeDef PeriphClkInit;

	/**Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI
 800238a:	230a      	movs	r3, #10
 800238c:	62bb      	str	r3, [r7, #40]	; 0x28
			| RCC_OSCILLATORTYPE_LSI;
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800238e:	2301      	movs	r3, #1
 8002390:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.HSICalibrationValue = 16;
 8002392:	2310      	movs	r3, #16
 8002394:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8002396:	2301      	movs	r3, #1
 8002398:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800239a:	2302      	movs	r3, #2
 800239c:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 800239e:	2300      	movs	r3, #0
 80023a0:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 80023a2:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 80023a6:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80023a8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80023ac:	4618      	mov	r0, r3
 80023ae:	f002 fcef 	bl	8004d90 <HAL_RCC_OscConfig>
 80023b2:	4603      	mov	r3, r0
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d004      	beq.n	80023c2 <SystemClock_Config+0x3e>
		_Error_Handler(__FILE__, __LINE__);
 80023b8:	f240 31a6 	movw	r1, #934	; 0x3a6
 80023bc:	4823      	ldr	r0, [pc, #140]	; (800244c <SystemClock_Config+0xc8>)
 80023be:	f000 f849 	bl	8002454 <_Error_Handler>
	}

	/**Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80023c2:	230f      	movs	r3, #15
 80023c4:	617b      	str	r3, [r7, #20]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80023c6:	2302      	movs	r3, #2
 80023c8:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80023ca:	2300      	movs	r3, #0
 80023cc:	61fb      	str	r3, [r7, #28]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80023ce:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80023d2:	623b      	str	r3, [r7, #32]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV16;
 80023d4:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 80023d8:	627b      	str	r3, [r7, #36]	; 0x24

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 80023da:	f107 0314 	add.w	r3, r7, #20
 80023de:	2102      	movs	r1, #2
 80023e0:	4618      	mov	r0, r3
 80023e2:	f002 ff39 	bl	8005258 <HAL_RCC_ClockConfig>
 80023e6:	4603      	mov	r3, r0
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d004      	beq.n	80023f6 <SystemClock_Config+0x72>
		_Error_Handler(__FILE__, __LINE__);
 80023ec:	f240 31b3 	movw	r1, #947	; 0x3b3
 80023f0:	4816      	ldr	r0, [pc, #88]	; (800244c <SystemClock_Config+0xc8>)
 80023f2:	f000 f82f 	bl	8002454 <_Error_Handler>
	}

	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC | RCC_PERIPHCLK_ADC;
 80023f6:	2303      	movs	r3, #3
 80023f8:	607b      	str	r3, [r7, #4]
	PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80023fa:	f44f 7300 	mov.w	r3, #512	; 0x200
 80023fe:	60bb      	str	r3, [r7, #8]
	PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV8;
 8002400:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8002404:	60fb      	str	r3, [r7, #12]
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK) {
 8002406:	1d3b      	adds	r3, r7, #4
 8002408:	4618      	mov	r0, r3
 800240a:	f003 f8cb 	bl	80055a4 <HAL_RCCEx_PeriphCLKConfig>
 800240e:	4603      	mov	r3, r0
 8002410:	2b00      	cmp	r3, #0
 8002412:	d004      	beq.n	800241e <SystemClock_Config+0x9a>
		_Error_Handler(__FILE__, __LINE__);
 8002414:	f240 31ba 	movw	r1, #954	; 0x3ba
 8002418:	480c      	ldr	r0, [pc, #48]	; (800244c <SystemClock_Config+0xc8>)
 800241a:	f000 f81b 	bl	8002454 <_Error_Handler>
	}

	/**Configure the Systick interrupt time
	 */
	HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / 1000);
 800241e:	f003 f871 	bl	8005504 <HAL_RCC_GetHCLKFreq>
 8002422:	4602      	mov	r2, r0
 8002424:	4b0a      	ldr	r3, [pc, #40]	; (8002450 <SystemClock_Config+0xcc>)
 8002426:	fba3 2302 	umull	r2, r3, r3, r2
 800242a:	099b      	lsrs	r3, r3, #6
 800242c:	4618      	mov	r0, r3
 800242e:	f001 fa7a 	bl	8003926 <HAL_SYSTICK_Config>

	/**Configure the Systick
	 */
	HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8002432:	2004      	movs	r0, #4
 8002434:	f001 fa84 	bl	8003940 <HAL_SYSTICK_CLKSourceConfig>

	/* SysTick_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8002438:	2200      	movs	r2, #0
 800243a:	2100      	movs	r1, #0
 800243c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002440:	f001 fa47 	bl	80038d2 <HAL_NVIC_SetPriority>
}
 8002444:	bf00      	nop
 8002446:	3750      	adds	r7, #80	; 0x50
 8002448:	46bd      	mov	sp, r7
 800244a:	bd80      	pop	{r7, pc}
 800244c:	0800ab44 	.word	0x0800ab44
 8002450:	10624dd3 	.word	0x10624dd3

08002454 <_Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @param  None
 * @retval None
 */
void _Error_Handler(char *file, int line) {
 8002454:	b480      	push	{r7}
 8002456:	b083      	sub	sp, #12
 8002458:	af00      	add	r7, sp, #0
 800245a:	6078      	str	r0, [r7, #4]
 800245c:	6039      	str	r1, [r7, #0]
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	while (1) {
 800245e:	e7fe      	b.n	800245e <_Error_Handler+0xa>

08002460 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8002460:	b580      	push	{r7, lr}
 8002462:	b082      	sub	sp, #8
 8002464:	af00      	add	r7, sp, #0
  RTC_TimeTypeDef sTime;
  RTC_DateTypeDef DateToUpdate;

    /**Initialize RTC Only
    */
  hrtc.Instance = RTC;
 8002466:	4b27      	ldr	r3, [pc, #156]	; (8002504 <MX_RTC_Init+0xa4>)
 8002468:	4a27      	ldr	r2, [pc, #156]	; (8002508 <MX_RTC_Init+0xa8>)
 800246a:	601a      	str	r2, [r3, #0]
  hrtc.Init.AsynchPrediv = RTC_AUTO_1_SECOND;
 800246c:	4b25      	ldr	r3, [pc, #148]	; (8002504 <MX_RTC_Init+0xa4>)
 800246e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002472:	605a      	str	r2, [r3, #4]
  hrtc.Init.OutPut = RTC_OUTPUTSOURCE_CALIBCLOCK;
 8002474:	4b23      	ldr	r3, [pc, #140]	; (8002504 <MX_RTC_Init+0xa4>)
 8002476:	2280      	movs	r2, #128	; 0x80
 8002478:	609a      	str	r2, [r3, #8]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800247a:	4822      	ldr	r0, [pc, #136]	; (8002504 <MX_RTC_Init+0xa4>)
 800247c:	f003 fa08 	bl	8005890 <HAL_RTC_Init>
 8002480:	4603      	mov	r3, r0
 8002482:	2b00      	cmp	r3, #0
 8002484:	d003      	beq.n	800248e <MX_RTC_Init+0x2e>
  {
    _Error_Handler(__FILE__, __LINE__);
 8002486:	213e      	movs	r1, #62	; 0x3e
 8002488:	4820      	ldr	r0, [pc, #128]	; (800250c <MX_RTC_Init+0xac>)
 800248a:	f7ff ffe3 	bl	8002454 <_Error_Handler>
  }

    /**Initialize RTC and set the Time and Date
    */
  if(HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_DR1) != 0x32F2){
 800248e:	2101      	movs	r1, #1
 8002490:	481c      	ldr	r0, [pc, #112]	; (8002504 <MX_RTC_Init+0xa4>)
 8002492:	f003 fda5 	bl	8005fe0 <HAL_RTCEx_BKUPRead>
 8002496:	4602      	mov	r2, r0
 8002498:	f243 23f2 	movw	r3, #13042	; 0x32f2
 800249c:	429a      	cmp	r2, r3
 800249e:	d02d      	beq.n	80024fc <MX_RTC_Init+0x9c>
  sTime.Hours = 0x1;
 80024a0:	2301      	movs	r3, #1
 80024a2:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 80024a4:	2300      	movs	r3, #0
 80024a6:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 80024a8:	2300      	movs	r3, #0
 80024aa:	71bb      	strb	r3, [r7, #6]

  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 80024ac:	1d3b      	adds	r3, r7, #4
 80024ae:	2201      	movs	r2, #1
 80024b0:	4619      	mov	r1, r3
 80024b2:	4814      	ldr	r0, [pc, #80]	; (8002504 <MX_RTC_Init+0xa4>)
 80024b4:	f003 fa82 	bl	80059bc <HAL_RTC_SetTime>
 80024b8:	4603      	mov	r3, r0
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d003      	beq.n	80024c6 <MX_RTC_Init+0x66>
  {
    _Error_Handler(__FILE__, __LINE__);
 80024be:	214a      	movs	r1, #74	; 0x4a
 80024c0:	4812      	ldr	r0, [pc, #72]	; (800250c <MX_RTC_Init+0xac>)
 80024c2:	f7ff ffc7 	bl	8002454 <_Error_Handler>
  }

  DateToUpdate.WeekDay = RTC_WEEKDAY_MONDAY;
 80024c6:	2301      	movs	r3, #1
 80024c8:	703b      	strb	r3, [r7, #0]
  DateToUpdate.Month = RTC_MONTH_JANUARY;
 80024ca:	2301      	movs	r3, #1
 80024cc:	707b      	strb	r3, [r7, #1]
  DateToUpdate.Date = 0x1;
 80024ce:	2301      	movs	r3, #1
 80024d0:	70bb      	strb	r3, [r7, #2]
  DateToUpdate.Year = 0x0;
 80024d2:	2300      	movs	r3, #0
 80024d4:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &DateToUpdate, RTC_FORMAT_BCD) != HAL_OK)
 80024d6:	463b      	mov	r3, r7
 80024d8:	2201      	movs	r2, #1
 80024da:	4619      	mov	r1, r3
 80024dc:	4809      	ldr	r0, [pc, #36]	; (8002504 <MX_RTC_Init+0xa4>)
 80024de:	f003 fb05 	bl	8005aec <HAL_RTC_SetDate>
 80024e2:	4603      	mov	r3, r0
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d003      	beq.n	80024f0 <MX_RTC_Init+0x90>
  {
    _Error_Handler(__FILE__, __LINE__);
 80024e8:	2154      	movs	r1, #84	; 0x54
 80024ea:	4808      	ldr	r0, [pc, #32]	; (800250c <MX_RTC_Init+0xac>)
 80024ec:	f7ff ffb2 	bl	8002454 <_Error_Handler>
  }

    HAL_RTCEx_BKUPWrite(&hrtc,RTC_BKP_DR1,0x32F2);
 80024f0:	f243 22f2 	movw	r2, #13042	; 0x32f2
 80024f4:	2101      	movs	r1, #1
 80024f6:	4803      	ldr	r0, [pc, #12]	; (8002504 <MX_RTC_Init+0xa4>)
 80024f8:	f003 fd58 	bl	8005fac <HAL_RTCEx_BKUPWrite>
  }

}
 80024fc:	bf00      	nop
 80024fe:	3708      	adds	r7, #8
 8002500:	46bd      	mov	sp, r7
 8002502:	bd80      	pop	{r7, pc}
 8002504:	20000994 	.word	0x20000994
 8002508:	40002800 	.word	0x40002800
 800250c:	0800ab58 	.word	0x0800ab58

08002510 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8002510:	b580      	push	{r7, lr}
 8002512:	b084      	sub	sp, #16
 8002514:	af00      	add	r7, sp, #0
 8002516:	6078      	str	r0, [r7, #4]

  if(rtcHandle->Instance==RTC)
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	4a0b      	ldr	r2, [pc, #44]	; (800254c <HAL_RTC_MspInit+0x3c>)
 800251e:	4293      	cmp	r3, r2
 8002520:	d110      	bne.n	8002544 <HAL_RTC_MspInit+0x34>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    HAL_PWR_EnableBkUpAccess();
 8002522:	f002 fc29 	bl	8004d78 <HAL_PWR_EnableBkUpAccess>
    /* Enable BKP CLK enable for backup registers */
    __HAL_RCC_BKP_CLK_ENABLE();
 8002526:	4b0a      	ldr	r3, [pc, #40]	; (8002550 <HAL_RTC_MspInit+0x40>)
 8002528:	69db      	ldr	r3, [r3, #28]
 800252a:	4a09      	ldr	r2, [pc, #36]	; (8002550 <HAL_RTC_MspInit+0x40>)
 800252c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002530:	61d3      	str	r3, [r2, #28]
 8002532:	4b07      	ldr	r3, [pc, #28]	; (8002550 <HAL_RTC_MspInit+0x40>)
 8002534:	69db      	ldr	r3, [r3, #28]
 8002536:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800253a:	60fb      	str	r3, [r7, #12]
 800253c:	68fb      	ldr	r3, [r7, #12]
    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 800253e:	4b05      	ldr	r3, [pc, #20]	; (8002554 <HAL_RTC_MspInit+0x44>)
 8002540:	2201      	movs	r2, #1
 8002542:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8002544:	bf00      	nop
 8002546:	3710      	adds	r7, #16
 8002548:	46bd      	mov	sp, r7
 800254a:	bd80      	pop	{r7, pc}
 800254c:	40002800 	.word	0x40002800
 8002550:	40021000 	.word	0x40021000
 8002554:	4242043c 	.word	0x4242043c

08002558 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002558:	b580      	push	{r7, lr}
 800255a:	b082      	sub	sp, #8
 800255c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800255e:	4b24      	ldr	r3, [pc, #144]	; (80025f0 <HAL_MspInit+0x98>)
 8002560:	699b      	ldr	r3, [r3, #24]
 8002562:	4a23      	ldr	r2, [pc, #140]	; (80025f0 <HAL_MspInit+0x98>)
 8002564:	f043 0301 	orr.w	r3, r3, #1
 8002568:	6193      	str	r3, [r2, #24]
 800256a:	4b21      	ldr	r3, [pc, #132]	; (80025f0 <HAL_MspInit+0x98>)
 800256c:	699b      	ldr	r3, [r3, #24]
 800256e:	f003 0301 	and.w	r3, r3, #1
 8002572:	607b      	str	r3, [r7, #4]
 8002574:	687b      	ldr	r3, [r7, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002576:	2003      	movs	r0, #3
 8002578:	f001 f9a0 	bl	80038bc <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 800257c:	2200      	movs	r2, #0
 800257e:	2100      	movs	r1, #0
 8002580:	f06f 000b 	mvn.w	r0, #11
 8002584:	f001 f9a5 	bl	80038d2 <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 8002588:	2200      	movs	r2, #0
 800258a:	2100      	movs	r1, #0
 800258c:	f06f 000a 	mvn.w	r0, #10
 8002590:	f001 f99f 	bl	80038d2 <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 8002594:	2200      	movs	r2, #0
 8002596:	2100      	movs	r1, #0
 8002598:	f06f 0009 	mvn.w	r0, #9
 800259c:	f001 f999 	bl	80038d2 <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 80025a0:	2200      	movs	r2, #0
 80025a2:	2100      	movs	r1, #0
 80025a4:	f06f 0004 	mvn.w	r0, #4
 80025a8:	f001 f993 	bl	80038d2 <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 80025ac:	2200      	movs	r2, #0
 80025ae:	2100      	movs	r1, #0
 80025b0:	f06f 0003 	mvn.w	r0, #3
 80025b4:	f001 f98d 	bl	80038d2 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 80025b8:	2200      	movs	r2, #0
 80025ba:	2100      	movs	r1, #0
 80025bc:	f06f 0001 	mvn.w	r0, #1
 80025c0:	f001 f987 	bl	80038d2 <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 80025c4:	2200      	movs	r2, #0
 80025c6:	2100      	movs	r1, #0
 80025c8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80025cc:	f001 f981 	bl	80038d2 <HAL_NVIC_SetPriority>

    /**NOJTAG: JTAG-DP Disabled and SW-DP Enabled
    */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80025d0:	4b08      	ldr	r3, [pc, #32]	; (80025f4 <HAL_MspInit+0x9c>)
 80025d2:	685b      	ldr	r3, [r3, #4]
 80025d4:	4a07      	ldr	r2, [pc, #28]	; (80025f4 <HAL_MspInit+0x9c>)
 80025d6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80025da:	6053      	str	r3, [r2, #4]
 80025dc:	4b05      	ldr	r3, [pc, #20]	; (80025f4 <HAL_MspInit+0x9c>)
 80025de:	685b      	ldr	r3, [r3, #4]
 80025e0:	4a04      	ldr	r2, [pc, #16]	; (80025f4 <HAL_MspInit+0x9c>)
 80025e2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80025e6:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80025e8:	bf00      	nop
 80025ea:	3708      	adds	r7, #8
 80025ec:	46bd      	mov	sp, r7
 80025ee:	bd80      	pop	{r7, pc}
 80025f0:	40021000 	.word	0x40021000
 80025f4:	40010000 	.word	0x40010000

080025f8 <NMI_Handler>:

/**
* @brief This function handles Non maskable interrupt.
*/
void NMI_Handler(void)
{
 80025f8:	b480      	push	{r7}
 80025fa:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80025fc:	bf00      	nop
 80025fe:	46bd      	mov	sp, r7
 8002600:	bc80      	pop	{r7}
 8002602:	4770      	bx	lr

08002604 <HardFault_Handler>:

/**
* @brief This function handles Hard fault interrupt.
*/
void HardFault_Handler(void)
{
 8002604:	b480      	push	{r7}
 8002606:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002608:	e7fe      	b.n	8002608 <HardFault_Handler+0x4>

0800260a <MemManage_Handler>:

/**
* @brief This function handles Memory management fault.
*/
void MemManage_Handler(void)
{
 800260a:	b480      	push	{r7}
 800260c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800260e:	e7fe      	b.n	800260e <MemManage_Handler+0x4>

08002610 <BusFault_Handler>:

/**
* @brief This function handles Prefetch fault, memory access fault.
*/
void BusFault_Handler(void)
{
 8002610:	b480      	push	{r7}
 8002612:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002614:	e7fe      	b.n	8002614 <BusFault_Handler+0x4>

08002616 <UsageFault_Handler>:

/**
* @brief This function handles Undefined instruction or illegal state.
*/
void UsageFault_Handler(void)
{
 8002616:	b480      	push	{r7}
 8002618:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800261a:	e7fe      	b.n	800261a <UsageFault_Handler+0x4>

0800261c <SVC_Handler>:

/**
* @brief This function handles System service call via SWI instruction.
*/
void SVC_Handler(void)
{
 800261c:	b480      	push	{r7}
 800261e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002620:	bf00      	nop
 8002622:	46bd      	mov	sp, r7
 8002624:	bc80      	pop	{r7}
 8002626:	4770      	bx	lr

08002628 <DebugMon_Handler>:

/**
* @brief This function handles Debug monitor.
*/
void DebugMon_Handler(void)
{
 8002628:	b480      	push	{r7}
 800262a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800262c:	bf00      	nop
 800262e:	46bd      	mov	sp, r7
 8002630:	bc80      	pop	{r7}
 8002632:	4770      	bx	lr

08002634 <PendSV_Handler>:

/**
* @brief This function handles Pendable request for system service.
*/
void PendSV_Handler(void)
{
 8002634:	b480      	push	{r7}
 8002636:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002638:	bf00      	nop
 800263a:	46bd      	mov	sp, r7
 800263c:	bc80      	pop	{r7}
 800263e:	4770      	bx	lr

08002640 <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 8002640:	b580      	push	{r7, lr}
 8002642:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002644:	f000 fc80 	bl	8002f48 <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
 8002648:	f001 f996 	bl	8003978 <HAL_SYSTICK_IRQHandler>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800264c:	bf00      	nop
 800264e:	bd80      	pop	{r7, pc}

08002650 <DMA1_Channel1_IRQHandler>:

/**
* @brief This function handles DMA1 channel1 global interrupt.
*/
void DMA1_Channel1_IRQHandler(void)
{
 8002650:	b580      	push	{r7, lr}
 8002652:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002654:	4802      	ldr	r0, [pc, #8]	; (8002660 <DMA1_Channel1_IRQHandler+0x10>)
 8002656:	f001 fad7 	bl	8003c08 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800265a:	bf00      	nop
 800265c:	bd80      	pop	{r7, pc}
 800265e:	bf00      	nop
 8002660:	200006c0 	.word	0x200006c0

08002664 <USART2_IRQHandler>:

/**
* @brief This function handles USART2 global interrupt.
*/
void USART2_IRQHandler(void)
{
 8002664:	b580      	push	{r7, lr}
 8002666:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002668:	4802      	ldr	r0, [pc, #8]	; (8002674 <USART2_IRQHandler+0x10>)
 800266a:	f004 f8a9 	bl	80067c0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800266e:	bf00      	nop
 8002670:	bd80      	pop	{r7, pc}
 8002672:	bf00      	nop
 8002674:	200009e8 	.word	0x200009e8

08002678 <EXTI15_10_IRQHandler>:

/**
* @brief This function handles EXTI line[15:10] interrupts.
*/
void EXTI15_10_IRQHandler(void)
{
 8002678:	b580      	push	{r7, lr}
 800267a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 800267c:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8002680:	f001 ff84 	bl	800458c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8002684:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8002688:	f001 ff80 	bl	800458c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 800268c:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8002690:	f001 ff7c 	bl	800458c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 8002694:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8002698:	f001 ff78 	bl	800458c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800269c:	bf00      	nop
 800269e:	bd80      	pop	{r7, pc}

080026a0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80026a0:	b580      	push	{r7, lr}
 80026a2:	b086      	sub	sp, #24
 80026a4:	af00      	add	r7, sp, #0
 80026a6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80026a8:	4a14      	ldr	r2, [pc, #80]	; (80026fc <_sbrk+0x5c>)
 80026aa:	4b15      	ldr	r3, [pc, #84]	; (8002700 <_sbrk+0x60>)
 80026ac:	1ad3      	subs	r3, r2, r3
 80026ae:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80026b0:	697b      	ldr	r3, [r7, #20]
 80026b2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80026b4:	4b13      	ldr	r3, [pc, #76]	; (8002704 <_sbrk+0x64>)
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d102      	bne.n	80026c2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80026bc:	4b11      	ldr	r3, [pc, #68]	; (8002704 <_sbrk+0x64>)
 80026be:	4a12      	ldr	r2, [pc, #72]	; (8002708 <_sbrk+0x68>)
 80026c0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80026c2:	4b10      	ldr	r3, [pc, #64]	; (8002704 <_sbrk+0x64>)
 80026c4:	681a      	ldr	r2, [r3, #0]
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	4413      	add	r3, r2
 80026ca:	693a      	ldr	r2, [r7, #16]
 80026cc:	429a      	cmp	r2, r3
 80026ce:	d207      	bcs.n	80026e0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80026d0:	f004 fbc8 	bl	8006e64 <__errno>
 80026d4:	4602      	mov	r2, r0
 80026d6:	230c      	movs	r3, #12
 80026d8:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 80026da:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80026de:	e009      	b.n	80026f4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80026e0:	4b08      	ldr	r3, [pc, #32]	; (8002704 <_sbrk+0x64>)
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80026e6:	4b07      	ldr	r3, [pc, #28]	; (8002704 <_sbrk+0x64>)
 80026e8:	681a      	ldr	r2, [r3, #0]
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	4413      	add	r3, r2
 80026ee:	4a05      	ldr	r2, [pc, #20]	; (8002704 <_sbrk+0x64>)
 80026f0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80026f2:	68fb      	ldr	r3, [r7, #12]
}
 80026f4:	4618      	mov	r0, r3
 80026f6:	3718      	adds	r7, #24
 80026f8:	46bd      	mov	sp, r7
 80026fa:	bd80      	pop	{r7, pc}
 80026fc:	20005000 	.word	0x20005000
 8002700:	00000400 	.word	0x00000400
 8002704:	2000027c 	.word	0x2000027c
 8002708:	20000a58 	.word	0x20000a58

0800270c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800270c:	b480      	push	{r7}
 800270e:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8002710:	4b15      	ldr	r3, [pc, #84]	; (8002768 <SystemInit+0x5c>)
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	4a14      	ldr	r2, [pc, #80]	; (8002768 <SystemInit+0x5c>)
 8002716:	f043 0301 	orr.w	r3, r3, #1
 800271a:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 800271c:	4b12      	ldr	r3, [pc, #72]	; (8002768 <SystemInit+0x5c>)
 800271e:	685a      	ldr	r2, [r3, #4]
 8002720:	4911      	ldr	r1, [pc, #68]	; (8002768 <SystemInit+0x5c>)
 8002722:	4b12      	ldr	r3, [pc, #72]	; (800276c <SystemInit+0x60>)
 8002724:	4013      	ands	r3, r2
 8002726:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8002728:	4b0f      	ldr	r3, [pc, #60]	; (8002768 <SystemInit+0x5c>)
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	4a0e      	ldr	r2, [pc, #56]	; (8002768 <SystemInit+0x5c>)
 800272e:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8002732:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002736:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002738:	4b0b      	ldr	r3, [pc, #44]	; (8002768 <SystemInit+0x5c>)
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	4a0a      	ldr	r2, [pc, #40]	; (8002768 <SystemInit+0x5c>)
 800273e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002742:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8002744:	4b08      	ldr	r3, [pc, #32]	; (8002768 <SystemInit+0x5c>)
 8002746:	685b      	ldr	r3, [r3, #4]
 8002748:	4a07      	ldr	r2, [pc, #28]	; (8002768 <SystemInit+0x5c>)
 800274a:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 800274e:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8002750:	4b05      	ldr	r3, [pc, #20]	; (8002768 <SystemInit+0x5c>)
 8002752:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8002756:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8002758:	4b05      	ldr	r3, [pc, #20]	; (8002770 <SystemInit+0x64>)
 800275a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800275e:	609a      	str	r2, [r3, #8]
#endif 
}
 8002760:	bf00      	nop
 8002762:	46bd      	mov	sp, r7
 8002764:	bc80      	pop	{r7}
 8002766:	4770      	bx	lr
 8002768:	40021000 	.word	0x40021000
 800276c:	f8ff0000 	.word	0xf8ff0000
 8002770:	e000ed00 	.word	0xe000ed00

08002774 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8002774:	b580      	push	{r7, lr}
 8002776:	b08a      	sub	sp, #40	; 0x28
 8002778:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig;
  TIM_OC_InitTypeDef sConfigOC;

  htim2.Instance = TIM2;
 800277a:	4b2c      	ldr	r3, [pc, #176]	; (800282c <MX_TIM2_Init+0xb8>)
 800277c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002780:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8002782:	4b2a      	ldr	r3, [pc, #168]	; (800282c <MX_TIM2_Init+0xb8>)
 8002784:	2200      	movs	r2, #0
 8002786:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002788:	4b28      	ldr	r3, [pc, #160]	; (800282c <MX_TIM2_Init+0xb8>)
 800278a:	2200      	movs	r2, #0
 800278c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10000-1;
 800278e:	4b27      	ldr	r3, [pc, #156]	; (800282c <MX_TIM2_Init+0xb8>)
 8002790:	f242 720f 	movw	r2, #9999	; 0x270f
 8002794:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002796:	4b25      	ldr	r3, [pc, #148]	; (800282c <MX_TIM2_Init+0xb8>)
 8002798:	2200      	movs	r2, #0
 800279a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800279c:	4b23      	ldr	r3, [pc, #140]	; (800282c <MX_TIM2_Init+0xb8>)
 800279e:	2200      	movs	r2, #0
 80027a0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80027a2:	4822      	ldr	r0, [pc, #136]	; (800282c <MX_TIM2_Init+0xb8>)
 80027a4:	f003 fc38 	bl	8006018 <HAL_TIM_PWM_Init>
 80027a8:	4603      	mov	r3, r0
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d003      	beq.n	80027b6 <MX_TIM2_Init+0x42>
  {
    _Error_Handler(__FILE__, __LINE__);
 80027ae:	213f      	movs	r1, #63	; 0x3f
 80027b0:	481f      	ldr	r0, [pc, #124]	; (8002830 <MX_TIM2_Init+0xbc>)
 80027b2:	f7ff fe4f 	bl	8002454 <_Error_Handler>
  }

  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80027b6:	2300      	movs	r3, #0
 80027b8:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80027ba:	2300      	movs	r3, #0
 80027bc:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80027be:	f107 0320 	add.w	r3, r7, #32
 80027c2:	4619      	mov	r1, r3
 80027c4:	4819      	ldr	r0, [pc, #100]	; (800282c <MX_TIM2_Init+0xb8>)
 80027c6:	f003 ff69 	bl	800669c <HAL_TIMEx_MasterConfigSynchronization>
 80027ca:	4603      	mov	r3, r0
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d003      	beq.n	80027d8 <MX_TIM2_Init+0x64>
  {
    _Error_Handler(__FILE__, __LINE__);
 80027d0:	2146      	movs	r1, #70	; 0x46
 80027d2:	4817      	ldr	r0, [pc, #92]	; (8002830 <MX_TIM2_Init+0xbc>)
 80027d4:	f7ff fe3e 	bl	8002454 <_Error_Handler>
  }

  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80027d8:	2360      	movs	r3, #96	; 0x60
 80027da:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80027dc:	2300      	movs	r3, #0
 80027de:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80027e0:	2300      	movs	r3, #0
 80027e2:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80027e4:	2300      	movs	r3, #0
 80027e6:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80027e8:	1d3b      	adds	r3, r7, #4
 80027ea:	2208      	movs	r2, #8
 80027ec:	4619      	mov	r1, r3
 80027ee:	480f      	ldr	r0, [pc, #60]	; (800282c <MX_TIM2_Init+0xb8>)
 80027f0:	f003 fc66 	bl	80060c0 <HAL_TIM_PWM_ConfigChannel>
 80027f4:	4603      	mov	r3, r0
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d003      	beq.n	8002802 <MX_TIM2_Init+0x8e>
  {
    _Error_Handler(__FILE__, __LINE__);
 80027fa:	214f      	movs	r1, #79	; 0x4f
 80027fc:	480c      	ldr	r0, [pc, #48]	; (8002830 <MX_TIM2_Init+0xbc>)
 80027fe:	f7ff fe29 	bl	8002454 <_Error_Handler>
  }

  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002802:	1d3b      	adds	r3, r7, #4
 8002804:	220c      	movs	r2, #12
 8002806:	4619      	mov	r1, r3
 8002808:	4808      	ldr	r0, [pc, #32]	; (800282c <MX_TIM2_Init+0xb8>)
 800280a:	f003 fc59 	bl	80060c0 <HAL_TIM_PWM_ConfigChannel>
 800280e:	4603      	mov	r3, r0
 8002810:	2b00      	cmp	r3, #0
 8002812:	d003      	beq.n	800281c <MX_TIM2_Init+0xa8>
  {
    _Error_Handler(__FILE__, __LINE__);
 8002814:	2154      	movs	r1, #84	; 0x54
 8002816:	4806      	ldr	r0, [pc, #24]	; (8002830 <MX_TIM2_Init+0xbc>)
 8002818:	f7ff fe1c 	bl	8002454 <_Error_Handler>
  }

  HAL_TIM_MspPostInit(&htim2);
 800281c:	4803      	ldr	r0, [pc, #12]	; (800282c <MX_TIM2_Init+0xb8>)
 800281e:	f000 f825 	bl	800286c <HAL_TIM_MspPostInit>

}
 8002822:	bf00      	nop
 8002824:	3728      	adds	r7, #40	; 0x28
 8002826:	46bd      	mov	sp, r7
 8002828:	bd80      	pop	{r7, pc}
 800282a:	bf00      	nop
 800282c:	200009a8 	.word	0x200009a8
 8002830:	0800ab6c 	.word	0x0800ab6c

08002834 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8002834:	b480      	push	{r7}
 8002836:	b085      	sub	sp, #20
 8002838:	af00      	add	r7, sp, #0
 800283a:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM2)
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002844:	d10b      	bne.n	800285e <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002846:	4b08      	ldr	r3, [pc, #32]	; (8002868 <HAL_TIM_PWM_MspInit+0x34>)
 8002848:	69db      	ldr	r3, [r3, #28]
 800284a:	4a07      	ldr	r2, [pc, #28]	; (8002868 <HAL_TIM_PWM_MspInit+0x34>)
 800284c:	f043 0301 	orr.w	r3, r3, #1
 8002850:	61d3      	str	r3, [r2, #28]
 8002852:	4b05      	ldr	r3, [pc, #20]	; (8002868 <HAL_TIM_PWM_MspInit+0x34>)
 8002854:	69db      	ldr	r3, [r3, #28]
 8002856:	f003 0301 	and.w	r3, r3, #1
 800285a:	60fb      	str	r3, [r7, #12]
 800285c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 800285e:	bf00      	nop
 8002860:	3714      	adds	r7, #20
 8002862:	46bd      	mov	sp, r7
 8002864:	bc80      	pop	{r7}
 8002866:	4770      	bx	lr
 8002868:	40021000 	.word	0x40021000

0800286c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 800286c:	b580      	push	{r7, lr}
 800286e:	b086      	sub	sp, #24
 8002870:	af00      	add	r7, sp, #0
 8002872:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  if(timHandle->Instance==TIM2)
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800287c:	d118      	bne.n	80028b0 <HAL_TIM_MspPostInit+0x44>

    /**TIM2 GPIO Configuration
    PB10     ------> TIM2_CH3
    PB11     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = PWM_M1_Pin|PWM_M2_Pin;
 800287e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002882:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002884:	2302      	movs	r3, #2
 8002886:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002888:	2302      	movs	r3, #2
 800288a:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800288c:	f107 0308 	add.w	r3, r7, #8
 8002890:	4619      	mov	r1, r3
 8002892:	4809      	ldr	r0, [pc, #36]	; (80028b8 <HAL_TIM_MspPostInit+0x4c>)
 8002894:	f001 fcec 	bl	8004270 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM2_PARTIAL_2();
 8002898:	4b08      	ldr	r3, [pc, #32]	; (80028bc <HAL_TIM_MspPostInit+0x50>)
 800289a:	685b      	ldr	r3, [r3, #4]
 800289c:	4a07      	ldr	r2, [pc, #28]	; (80028bc <HAL_TIM_MspPostInit+0x50>)
 800289e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80028a2:	6053      	str	r3, [r2, #4]
 80028a4:	4b05      	ldr	r3, [pc, #20]	; (80028bc <HAL_TIM_MspPostInit+0x50>)
 80028a6:	685b      	ldr	r3, [r3, #4]
 80028a8:	4a04      	ldr	r2, [pc, #16]	; (80028bc <HAL_TIM_MspPostInit+0x50>)
 80028aa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80028ae:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80028b0:	bf00      	nop
 80028b2:	3718      	adds	r7, #24
 80028b4:	46bd      	mov	sp, r7
 80028b6:	bd80      	pop	{r7, pc}
 80028b8:	40010c00 	.word	0x40010c00
 80028bc:	40010000 	.word	0x40010000

080028c0 <user_pwm_setvalue_1>:

/* USER CODE BEGIN 1 */


void user_pwm_setvalue_1(uint16_t value)
{
 80028c0:	b580      	push	{r7, lr}
 80028c2:	b08a      	sub	sp, #40	; 0x28
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	4603      	mov	r3, r0
 80028c8:	80fb      	strh	r3, [r7, #6]
    TIM_OC_InitTypeDef sConfigOC;

    sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80028ca:	2360      	movs	r3, #96	; 0x60
 80028cc:	60fb      	str	r3, [r7, #12]
    sConfigOC.Pulse = value;
 80028ce:	88fb      	ldrh	r3, [r7, #6]
 80028d0:	613b      	str	r3, [r7, #16]
    sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80028d2:	2300      	movs	r3, #0
 80028d4:	617b      	str	r3, [r7, #20]
    sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80028d6:	2300      	movs	r3, #0
 80028d8:	61fb      	str	r3, [r7, #28]
    HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3);
 80028da:	f107 030c 	add.w	r3, r7, #12
 80028de:	2208      	movs	r2, #8
 80028e0:	4619      	mov	r1, r3
 80028e2:	4805      	ldr	r0, [pc, #20]	; (80028f8 <user_pwm_setvalue_1+0x38>)
 80028e4:	f003 fbec 	bl	80060c0 <HAL_TIM_PWM_ConfigChannel>
    HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 80028e8:	2108      	movs	r1, #8
 80028ea:	4803      	ldr	r0, [pc, #12]	; (80028f8 <user_pwm_setvalue_1+0x38>)
 80028ec:	f003 fbc0 	bl	8006070 <HAL_TIM_PWM_Start>
    //HAL_TIM_MspPostInit(&htim2);
}
 80028f0:	bf00      	nop
 80028f2:	3728      	adds	r7, #40	; 0x28
 80028f4:	46bd      	mov	sp, r7
 80028f6:	bd80      	pop	{r7, pc}
 80028f8:	200009a8 	.word	0x200009a8

080028fc <user_pwm_setvalue_2>:
void user_pwm_setvalue_2(uint16_t value)
{
 80028fc:	b580      	push	{r7, lr}
 80028fe:	b08a      	sub	sp, #40	; 0x28
 8002900:	af00      	add	r7, sp, #0
 8002902:	4603      	mov	r3, r0
 8002904:	80fb      	strh	r3, [r7, #6]
    TIM_OC_InitTypeDef sConfigOC;

    sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002906:	2360      	movs	r3, #96	; 0x60
 8002908:	60fb      	str	r3, [r7, #12]
    sConfigOC.Pulse = value;
 800290a:	88fb      	ldrh	r3, [r7, #6]
 800290c:	613b      	str	r3, [r7, #16]
    sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800290e:	2300      	movs	r3, #0
 8002910:	617b      	str	r3, [r7, #20]
    sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002912:	2300      	movs	r3, #0
 8002914:	61fb      	str	r3, [r7, #28]
    HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4);
 8002916:	f107 030c 	add.w	r3, r7, #12
 800291a:	220c      	movs	r2, #12
 800291c:	4619      	mov	r1, r3
 800291e:	4805      	ldr	r0, [pc, #20]	; (8002934 <user_pwm_setvalue_2+0x38>)
 8002920:	f003 fbce 	bl	80060c0 <HAL_TIM_PWM_ConfigChannel>
    HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 8002924:	210c      	movs	r1, #12
 8002926:	4803      	ldr	r0, [pc, #12]	; (8002934 <user_pwm_setvalue_2+0x38>)
 8002928:	f003 fba2 	bl	8006070 <HAL_TIM_PWM_Start>
   // HAL_TIM_MspPostInit(&htim2);
}
 800292c:	bf00      	nop
 800292e:	3728      	adds	r7, #40	; 0x28
 8002930:	46bd      	mov	sp, r7
 8002932:	bd80      	pop	{r7, pc}
 8002934:	200009a8 	.word	0x200009a8

08002938 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002938:	b580      	push	{r7, lr}
 800293a:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 800293c:	4b12      	ldr	r3, [pc, #72]	; (8002988 <MX_USART2_UART_Init+0x50>)
 800293e:	4a13      	ldr	r2, [pc, #76]	; (800298c <MX_USART2_UART_Init+0x54>)
 8002940:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002942:	4b11      	ldr	r3, [pc, #68]	; (8002988 <MX_USART2_UART_Init+0x50>)
 8002944:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002948:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800294a:	4b0f      	ldr	r3, [pc, #60]	; (8002988 <MX_USART2_UART_Init+0x50>)
 800294c:	2200      	movs	r2, #0
 800294e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002950:	4b0d      	ldr	r3, [pc, #52]	; (8002988 <MX_USART2_UART_Init+0x50>)
 8002952:	2200      	movs	r2, #0
 8002954:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002956:	4b0c      	ldr	r3, [pc, #48]	; (8002988 <MX_USART2_UART_Init+0x50>)
 8002958:	2200      	movs	r2, #0
 800295a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800295c:	4b0a      	ldr	r3, [pc, #40]	; (8002988 <MX_USART2_UART_Init+0x50>)
 800295e:	220c      	movs	r2, #12
 8002960:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002962:	4b09      	ldr	r3, [pc, #36]	; (8002988 <MX_USART2_UART_Init+0x50>)
 8002964:	2200      	movs	r2, #0
 8002966:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002968:	4b07      	ldr	r3, [pc, #28]	; (8002988 <MX_USART2_UART_Init+0x50>)
 800296a:	2200      	movs	r2, #0
 800296c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800296e:	4806      	ldr	r0, [pc, #24]	; (8002988 <MX_USART2_UART_Init+0x50>)
 8002970:	f003 fed8 	bl	8006724 <HAL_UART_Init>
 8002974:	4603      	mov	r3, r0
 8002976:	2b00      	cmp	r3, #0
 8002978:	d003      	beq.n	8002982 <MX_USART2_UART_Init+0x4a>
  {
    _Error_Handler(__FILE__, __LINE__);
 800297a:	2142      	movs	r1, #66	; 0x42
 800297c:	4804      	ldr	r0, [pc, #16]	; (8002990 <MX_USART2_UART_Init+0x58>)
 800297e:	f7ff fd69 	bl	8002454 <_Error_Handler>
  }

}
 8002982:	bf00      	nop
 8002984:	bd80      	pop	{r7, pc}
 8002986:	bf00      	nop
 8002988:	200009e8 	.word	0x200009e8
 800298c:	40004400 	.word	0x40004400
 8002990:	0800ab80 	.word	0x0800ab80

08002994 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002994:	b580      	push	{r7, lr}
 8002996:	b088      	sub	sp, #32
 8002998:	af00      	add	r7, sp, #0
 800299a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  if(uartHandle->Instance==USART2)
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	4a19      	ldr	r2, [pc, #100]	; (8002a08 <HAL_UART_MspInit+0x74>)
 80029a2:	4293      	cmp	r3, r2
 80029a4:	d12b      	bne.n	80029fe <HAL_UART_MspInit+0x6a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80029a6:	4b19      	ldr	r3, [pc, #100]	; (8002a0c <HAL_UART_MspInit+0x78>)
 80029a8:	69db      	ldr	r3, [r3, #28]
 80029aa:	4a18      	ldr	r2, [pc, #96]	; (8002a0c <HAL_UART_MspInit+0x78>)
 80029ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80029b0:	61d3      	str	r3, [r2, #28]
 80029b2:	4b16      	ldr	r3, [pc, #88]	; (8002a0c <HAL_UART_MspInit+0x78>)
 80029b4:	69db      	ldr	r3, [r3, #28]
 80029b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029ba:	60fb      	str	r3, [r7, #12]
 80029bc:	68fb      	ldr	r3, [r7, #12]

    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80029be:	2304      	movs	r3, #4
 80029c0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029c2:	2302      	movs	r3, #2
 80029c4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80029c6:	2303      	movs	r3, #3
 80029c8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80029ca:	f107 0310 	add.w	r3, r7, #16
 80029ce:	4619      	mov	r1, r3
 80029d0:	480f      	ldr	r0, [pc, #60]	; (8002a10 <HAL_UART_MspInit+0x7c>)
 80029d2:	f001 fc4d 	bl	8004270 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80029d6:	2308      	movs	r3, #8
 80029d8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80029da:	2300      	movs	r3, #0
 80029dc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029de:	2300      	movs	r3, #0
 80029e0:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80029e2:	f107 0310 	add.w	r3, r7, #16
 80029e6:	4619      	mov	r1, r3
 80029e8:	4809      	ldr	r0, [pc, #36]	; (8002a10 <HAL_UART_MspInit+0x7c>)
 80029ea:	f001 fc41 	bl	8004270 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80029ee:	2200      	movs	r2, #0
 80029f0:	2100      	movs	r1, #0
 80029f2:	2026      	movs	r0, #38	; 0x26
 80029f4:	f000 ff6d 	bl	80038d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80029f8:	2026      	movs	r0, #38	; 0x26
 80029fa:	f000 ff86 	bl	800390a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80029fe:	bf00      	nop
 8002a00:	3720      	adds	r7, #32
 8002a02:	46bd      	mov	sp, r7
 8002a04:	bd80      	pop	{r7, pc}
 8002a06:	bf00      	nop
 8002a08:	40004400 	.word	0x40004400
 8002a0c:	40021000 	.word	0x40021000
 8002a10:	40010800 	.word	0x40010800

08002a14 <ssd1306_Reset>:
#include <stdlib.h>
#include <string.h>  // For memcpy

#if defined(SSD1306_USE_I2C)

void ssd1306_Reset(void) {
 8002a14:	b480      	push	{r7}
 8002a16:	af00      	add	r7, sp, #0
    /* for I2C - do nothing */
}
 8002a18:	bf00      	nop
 8002a1a:	46bd      	mov	sp, r7
 8002a1c:	bc80      	pop	{r7}
 8002a1e:	4770      	bx	lr

08002a20 <ssd1306_WriteCommand>:


// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 8002a20:	b580      	push	{r7, lr}
 8002a22:	b086      	sub	sp, #24
 8002a24:	af04      	add	r7, sp, #16
 8002a26:	4603      	mov	r3, r0
 8002a28:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 8002a2a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002a2e:	9302      	str	r3, [sp, #8]
 8002a30:	2301      	movs	r3, #1
 8002a32:	9301      	str	r3, [sp, #4]
 8002a34:	1dfb      	adds	r3, r7, #7
 8002a36:	9300      	str	r3, [sp, #0]
 8002a38:	2301      	movs	r3, #1
 8002a3a:	2200      	movs	r2, #0
 8002a3c:	2178      	movs	r1, #120	; 0x78
 8002a3e:	4803      	ldr	r0, [pc, #12]	; (8002a4c <ssd1306_WriteCommand+0x2c>)
 8002a40:	f001 fe9c 	bl	800477c <HAL_I2C_Mem_Write>
}
 8002a44:	bf00      	nop
 8002a46:	3708      	adds	r7, #8
 8002a48:	46bd      	mov	sp, r7
 8002a4a:	bd80      	pop	{r7, pc}
 8002a4c:	20000704 	.word	0x20000704

08002a50 <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 8002a50:	b580      	push	{r7, lr}
 8002a52:	b086      	sub	sp, #24
 8002a54:	af04      	add	r7, sp, #16
 8002a56:	6078      	str	r0, [r7, #4]
 8002a58:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 8002a5a:	683b      	ldr	r3, [r7, #0]
 8002a5c:	b29b      	uxth	r3, r3
 8002a5e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002a62:	9202      	str	r2, [sp, #8]
 8002a64:	9301      	str	r3, [sp, #4]
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	9300      	str	r3, [sp, #0]
 8002a6a:	2301      	movs	r3, #1
 8002a6c:	2240      	movs	r2, #64	; 0x40
 8002a6e:	2178      	movs	r1, #120	; 0x78
 8002a70:	4803      	ldr	r0, [pc, #12]	; (8002a80 <ssd1306_WriteData+0x30>)
 8002a72:	f001 fe83 	bl	800477c <HAL_I2C_Mem_Write>
}
 8002a76:	bf00      	nop
 8002a78:	3708      	adds	r7, #8
 8002a7a:	46bd      	mov	sp, r7
 8002a7c:	bd80      	pop	{r7, pc}
 8002a7e:	bf00      	nop
 8002a80:	20000704 	.word	0x20000704

08002a84 <ssd1306_Init>:
    }
    return ret;
}

// Initialize the oled screen
void ssd1306_Init(void) {
 8002a84:	b580      	push	{r7, lr}
 8002a86:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 8002a88:	f7ff ffc4 	bl	8002a14 <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 8002a8c:	2064      	movs	r0, #100	; 0x64
 8002a8e:	f000 fa73 	bl	8002f78 <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 8002a92:	2000      	movs	r0, #0
 8002a94:	f000 f9e2 	bl	8002e5c <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 8002a98:	2020      	movs	r0, #32
 8002a9a:	f7ff ffc1 	bl	8002a20 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 8002a9e:	2000      	movs	r0, #0
 8002aa0:	f7ff ffbe 	bl	8002a20 <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8002aa4:	20b0      	movs	r0, #176	; 0xb0
 8002aa6:	f7ff ffbb 	bl	8002a20 <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 8002aaa:	20c8      	movs	r0, #200	; 0xc8
 8002aac:	f7ff ffb8 	bl	8002a20 <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 8002ab0:	2000      	movs	r0, #0
 8002ab2:	f7ff ffb5 	bl	8002a20 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 8002ab6:	2010      	movs	r0, #16
 8002ab8:	f7ff ffb2 	bl	8002a20 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 8002abc:	2040      	movs	r0, #64	; 0x40
 8002abe:	f7ff ffaf 	bl	8002a20 <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 8002ac2:	20ff      	movs	r0, #255	; 0xff
 8002ac4:	f000 f9b6 	bl	8002e34 <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 8002ac8:	20a1      	movs	r0, #161	; 0xa1
 8002aca:	f7ff ffa9 	bl	8002a20 <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 8002ace:	20a6      	movs	r0, #166	; 0xa6
 8002ad0:	f7ff ffa6 	bl	8002a20 <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 8002ad4:	20a8      	movs	r0, #168	; 0xa8
 8002ad6:	f7ff ffa3 	bl	8002a20 <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x3F); //
 8002ada:	203f      	movs	r0, #63	; 0x3f
 8002adc:	f7ff ffa0 	bl	8002a20 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8002ae0:	20a4      	movs	r0, #164	; 0xa4
 8002ae2:	f7ff ff9d 	bl	8002a20 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 8002ae6:	20d3      	movs	r0, #211	; 0xd3
 8002ae8:	f7ff ff9a 	bl	8002a20 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 8002aec:	2000      	movs	r0, #0
 8002aee:	f7ff ff97 	bl	8002a20 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 8002af2:	20d5      	movs	r0, #213	; 0xd5
 8002af4:	f7ff ff94 	bl	8002a20 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 8002af8:	20f0      	movs	r0, #240	; 0xf0
 8002afa:	f7ff ff91 	bl	8002a20 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 8002afe:	20d9      	movs	r0, #217	; 0xd9
 8002b00:	f7ff ff8e 	bl	8002a20 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 8002b04:	2022      	movs	r0, #34	; 0x22
 8002b06:	f7ff ff8b 	bl	8002a20 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 8002b0a:	20da      	movs	r0, #218	; 0xda
 8002b0c:	f7ff ff88 	bl	8002a20 <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x12);
 8002b10:	2012      	movs	r0, #18
 8002b12:	f7ff ff85 	bl	8002a20 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 8002b16:	20db      	movs	r0, #219	; 0xdb
 8002b18:	f7ff ff82 	bl	8002a20 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 8002b1c:	2020      	movs	r0, #32
 8002b1e:	f7ff ff7f 	bl	8002a20 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 8002b22:	208d      	movs	r0, #141	; 0x8d
 8002b24:	f7ff ff7c 	bl	8002a20 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 8002b28:	2014      	movs	r0, #20
 8002b2a:	f7ff ff79 	bl	8002a20 <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 8002b2e:	2001      	movs	r0, #1
 8002b30:	f000 f994 	bl	8002e5c <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 8002b34:	2000      	movs	r0, #0
 8002b36:	f000 f80f 	bl	8002b58 <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 8002b3a:	f000 f82f 	bl	8002b9c <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 8002b3e:	4b05      	ldr	r3, [pc, #20]	; (8002b54 <ssd1306_Init+0xd0>)
 8002b40:	2200      	movs	r2, #0
 8002b42:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 8002b44:	4b03      	ldr	r3, [pc, #12]	; (8002b54 <ssd1306_Init+0xd0>)
 8002b46:	2200      	movs	r2, #0
 8002b48:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 8002b4a:	4b02      	ldr	r3, [pc, #8]	; (8002b54 <ssd1306_Init+0xd0>)
 8002b4c:	2201      	movs	r2, #1
 8002b4e:	715a      	strb	r2, [r3, #5]
}
 8002b50:	bf00      	nop
 8002b52:	bd80      	pop	{r7, pc}
 8002b54:	20000680 	.word	0x20000680

08002b58 <ssd1306_Fill>:

// Fill the whole screen with the given color
void ssd1306_Fill(SSD1306_COLOR color) {
 8002b58:	b480      	push	{r7}
 8002b5a:	b085      	sub	sp, #20
 8002b5c:	af00      	add	r7, sp, #0
 8002b5e:	4603      	mov	r3, r0
 8002b60:	71fb      	strb	r3, [r7, #7]
    /* Set memory */
    uint32_t i;

    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 8002b62:	2300      	movs	r3, #0
 8002b64:	60fb      	str	r3, [r7, #12]
 8002b66:	e00d      	b.n	8002b84 <ssd1306_Fill+0x2c>
        SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 8002b68:	79fb      	ldrb	r3, [r7, #7]
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d101      	bne.n	8002b72 <ssd1306_Fill+0x1a>
 8002b6e:	2100      	movs	r1, #0
 8002b70:	e000      	b.n	8002b74 <ssd1306_Fill+0x1c>
 8002b72:	21ff      	movs	r1, #255	; 0xff
 8002b74:	4a08      	ldr	r2, [pc, #32]	; (8002b98 <ssd1306_Fill+0x40>)
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	4413      	add	r3, r2
 8002b7a:	460a      	mov	r2, r1
 8002b7c:	701a      	strb	r2, [r3, #0]
    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	3301      	adds	r3, #1
 8002b82:	60fb      	str	r3, [r7, #12]
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002b8a:	d3ed      	bcc.n	8002b68 <ssd1306_Fill+0x10>
    }
}
 8002b8c:	bf00      	nop
 8002b8e:	3714      	adds	r7, #20
 8002b90:	46bd      	mov	sp, r7
 8002b92:	bc80      	pop	{r7}
 8002b94:	4770      	bx	lr
 8002b96:	bf00      	nop
 8002b98:	20000280 	.word	0x20000280

08002b9c <ssd1306_UpdateScreen>:

// Write the screenbuffer with changed to the screen
void ssd1306_UpdateScreen(void) {
 8002b9c:	b580      	push	{r7, lr}
 8002b9e:	b082      	sub	sp, #8
 8002ba0:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8002ba2:	2300      	movs	r3, #0
 8002ba4:	71fb      	strb	r3, [r7, #7]
 8002ba6:	e016      	b.n	8002bd6 <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 8002ba8:	79fb      	ldrb	r3, [r7, #7]
 8002baa:	3b50      	subs	r3, #80	; 0x50
 8002bac:	b2db      	uxtb	r3, r3
 8002bae:	4618      	mov	r0, r3
 8002bb0:	f7ff ff36 	bl	8002a20 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00);
 8002bb4:	2000      	movs	r0, #0
 8002bb6:	f7ff ff33 	bl	8002a20 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10);
 8002bba:	2010      	movs	r0, #16
 8002bbc:	f7ff ff30 	bl	8002a20 <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 8002bc0:	79fb      	ldrb	r3, [r7, #7]
 8002bc2:	01db      	lsls	r3, r3, #7
 8002bc4:	4a07      	ldr	r2, [pc, #28]	; (8002be4 <ssd1306_UpdateScreen+0x48>)
 8002bc6:	4413      	add	r3, r2
 8002bc8:	2180      	movs	r1, #128	; 0x80
 8002bca:	4618      	mov	r0, r3
 8002bcc:	f7ff ff40 	bl	8002a50 <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8002bd0:	79fb      	ldrb	r3, [r7, #7]
 8002bd2:	3301      	adds	r3, #1
 8002bd4:	71fb      	strb	r3, [r7, #7]
 8002bd6:	79fb      	ldrb	r3, [r7, #7]
 8002bd8:	2b07      	cmp	r3, #7
 8002bda:	d9e5      	bls.n	8002ba8 <ssd1306_UpdateScreen+0xc>
    }
}
 8002bdc:	bf00      	nop
 8002bde:	3708      	adds	r7, #8
 8002be0:	46bd      	mov	sp, r7
 8002be2:	bd80      	pop	{r7, pc}
 8002be4:	20000280 	.word	0x20000280

08002be8 <ssd1306_DrawPixel>:

//    Draw one pixel in the screenbuffer
//    X => X Coordinate
//    Y => Y Coordinate
//    color => Pixel color
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 8002be8:	b480      	push	{r7}
 8002bea:	b083      	sub	sp, #12
 8002bec:	af00      	add	r7, sp, #0
 8002bee:	4603      	mov	r3, r0
 8002bf0:	71fb      	strb	r3, [r7, #7]
 8002bf2:	460b      	mov	r3, r1
 8002bf4:	71bb      	strb	r3, [r7, #6]
 8002bf6:	4613      	mov	r3, r2
 8002bf8:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 8002bfa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	db48      	blt.n	8002c94 <ssd1306_DrawPixel+0xac>
 8002c02:	79bb      	ldrb	r3, [r7, #6]
 8002c04:	2b3f      	cmp	r3, #63	; 0x3f
 8002c06:	d845      	bhi.n	8002c94 <ssd1306_DrawPixel+0xac>
        // Don't write outside the buffer
        return;
    }
    
    // Check if pixel should be inverted
    if(SSD1306.Inverted) {
 8002c08:	4b25      	ldr	r3, [pc, #148]	; (8002ca0 <ssd1306_DrawPixel+0xb8>)
 8002c0a:	791b      	ldrb	r3, [r3, #4]
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d006      	beq.n	8002c1e <ssd1306_DrawPixel+0x36>
        color = (SSD1306_COLOR)!color;
 8002c10:	797b      	ldrb	r3, [r7, #5]
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	bf0c      	ite	eq
 8002c16:	2301      	moveq	r3, #1
 8002c18:	2300      	movne	r3, #0
 8002c1a:	b2db      	uxtb	r3, r3
 8002c1c:	717b      	strb	r3, [r7, #5]
    }
    
    // Draw in the right color
    if(color == White) {
 8002c1e:	797b      	ldrb	r3, [r7, #5]
 8002c20:	2b01      	cmp	r3, #1
 8002c22:	d11a      	bne.n	8002c5a <ssd1306_DrawPixel+0x72>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8002c24:	79fa      	ldrb	r2, [r7, #7]
 8002c26:	79bb      	ldrb	r3, [r7, #6]
 8002c28:	08db      	lsrs	r3, r3, #3
 8002c2a:	b2d8      	uxtb	r0, r3
 8002c2c:	4603      	mov	r3, r0
 8002c2e:	01db      	lsls	r3, r3, #7
 8002c30:	4413      	add	r3, r2
 8002c32:	4a1c      	ldr	r2, [pc, #112]	; (8002ca4 <ssd1306_DrawPixel+0xbc>)
 8002c34:	5cd3      	ldrb	r3, [r2, r3]
 8002c36:	b25a      	sxtb	r2, r3
 8002c38:	79bb      	ldrb	r3, [r7, #6]
 8002c3a:	f003 0307 	and.w	r3, r3, #7
 8002c3e:	2101      	movs	r1, #1
 8002c40:	fa01 f303 	lsl.w	r3, r1, r3
 8002c44:	b25b      	sxtb	r3, r3
 8002c46:	4313      	orrs	r3, r2
 8002c48:	b259      	sxtb	r1, r3
 8002c4a:	79fa      	ldrb	r2, [r7, #7]
 8002c4c:	4603      	mov	r3, r0
 8002c4e:	01db      	lsls	r3, r3, #7
 8002c50:	4413      	add	r3, r2
 8002c52:	b2c9      	uxtb	r1, r1
 8002c54:	4a13      	ldr	r2, [pc, #76]	; (8002ca4 <ssd1306_DrawPixel+0xbc>)
 8002c56:	54d1      	strb	r1, [r2, r3]
 8002c58:	e01d      	b.n	8002c96 <ssd1306_DrawPixel+0xae>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8002c5a:	79fa      	ldrb	r2, [r7, #7]
 8002c5c:	79bb      	ldrb	r3, [r7, #6]
 8002c5e:	08db      	lsrs	r3, r3, #3
 8002c60:	b2d8      	uxtb	r0, r3
 8002c62:	4603      	mov	r3, r0
 8002c64:	01db      	lsls	r3, r3, #7
 8002c66:	4413      	add	r3, r2
 8002c68:	4a0e      	ldr	r2, [pc, #56]	; (8002ca4 <ssd1306_DrawPixel+0xbc>)
 8002c6a:	5cd3      	ldrb	r3, [r2, r3]
 8002c6c:	b25a      	sxtb	r2, r3
 8002c6e:	79bb      	ldrb	r3, [r7, #6]
 8002c70:	f003 0307 	and.w	r3, r3, #7
 8002c74:	2101      	movs	r1, #1
 8002c76:	fa01 f303 	lsl.w	r3, r1, r3
 8002c7a:	b25b      	sxtb	r3, r3
 8002c7c:	43db      	mvns	r3, r3
 8002c7e:	b25b      	sxtb	r3, r3
 8002c80:	4013      	ands	r3, r2
 8002c82:	b259      	sxtb	r1, r3
 8002c84:	79fa      	ldrb	r2, [r7, #7]
 8002c86:	4603      	mov	r3, r0
 8002c88:	01db      	lsls	r3, r3, #7
 8002c8a:	4413      	add	r3, r2
 8002c8c:	b2c9      	uxtb	r1, r1
 8002c8e:	4a05      	ldr	r2, [pc, #20]	; (8002ca4 <ssd1306_DrawPixel+0xbc>)
 8002c90:	54d1      	strb	r1, [r2, r3]
 8002c92:	e000      	b.n	8002c96 <ssd1306_DrawPixel+0xae>
        return;
 8002c94:	bf00      	nop
    }
}
 8002c96:	370c      	adds	r7, #12
 8002c98:	46bd      	mov	sp, r7
 8002c9a:	bc80      	pop	{r7}
 8002c9c:	4770      	bx	lr
 8002c9e:	bf00      	nop
 8002ca0:	20000680 	.word	0x20000680
 8002ca4:	20000280 	.word	0x20000280

08002ca8 <ssd1306_WriteChar>:

// Draw 1 char to the screen buffer
// ch       => char om weg te schrijven
// Font     => Font waarmee we gaan schrijven
// color    => Black or White
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color) {
 8002ca8:	b590      	push	{r4, r7, lr}
 8002caa:	b089      	sub	sp, #36	; 0x24
 8002cac:	af00      	add	r7, sp, #0
 8002cae:	4604      	mov	r4, r0
 8002cb0:	1d38      	adds	r0, r7, #4
 8002cb2:	e880 0006 	stmia.w	r0, {r1, r2}
 8002cb6:	461a      	mov	r2, r3
 8002cb8:	4623      	mov	r3, r4
 8002cba:	73fb      	strb	r3, [r7, #15]
 8002cbc:	4613      	mov	r3, r2
 8002cbe:	73bb      	strb	r3, [r7, #14]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 8002cc0:	7bfb      	ldrb	r3, [r7, #15]
 8002cc2:	2b1f      	cmp	r3, #31
 8002cc4:	d902      	bls.n	8002ccc <ssd1306_WriteChar+0x24>
 8002cc6:	7bfb      	ldrb	r3, [r7, #15]
 8002cc8:	2b7e      	cmp	r3, #126	; 0x7e
 8002cca:	d901      	bls.n	8002cd0 <ssd1306_WriteChar+0x28>
        return 0;
 8002ccc:	2300      	movs	r3, #0
 8002cce:	e06d      	b.n	8002dac <ssd1306_WriteChar+0x104>
    
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 8002cd0:	4b38      	ldr	r3, [pc, #224]	; (8002db4 <ssd1306_WriteChar+0x10c>)
 8002cd2:	881b      	ldrh	r3, [r3, #0]
 8002cd4:	461a      	mov	r2, r3
 8002cd6:	793b      	ldrb	r3, [r7, #4]
 8002cd8:	4413      	add	r3, r2
 8002cda:	2b80      	cmp	r3, #128	; 0x80
 8002cdc:	dc06      	bgt.n	8002cec <ssd1306_WriteChar+0x44>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.FontHeight))
 8002cde:	4b35      	ldr	r3, [pc, #212]	; (8002db4 <ssd1306_WriteChar+0x10c>)
 8002ce0:	885b      	ldrh	r3, [r3, #2]
 8002ce2:	461a      	mov	r2, r3
 8002ce4:	797b      	ldrb	r3, [r7, #5]
 8002ce6:	4413      	add	r3, r2
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 8002ce8:	2b40      	cmp	r3, #64	; 0x40
 8002cea:	dd01      	ble.n	8002cf0 <ssd1306_WriteChar+0x48>
    {
        // Not enough space on current line
        return 0;
 8002cec:	2300      	movs	r3, #0
 8002cee:	e05d      	b.n	8002dac <ssd1306_WriteChar+0x104>
    }
    
    // Use the font to write
    for(i = 0; i < Font.FontHeight; i++) {
 8002cf0:	2300      	movs	r3, #0
 8002cf2:	61fb      	str	r3, [r7, #28]
 8002cf4:	e04c      	b.n	8002d90 <ssd1306_WriteChar+0xe8>
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 8002cf6:	68ba      	ldr	r2, [r7, #8]
 8002cf8:	7bfb      	ldrb	r3, [r7, #15]
 8002cfa:	3b20      	subs	r3, #32
 8002cfc:	7979      	ldrb	r1, [r7, #5]
 8002cfe:	fb01 f303 	mul.w	r3, r1, r3
 8002d02:	4619      	mov	r1, r3
 8002d04:	69fb      	ldr	r3, [r7, #28]
 8002d06:	440b      	add	r3, r1
 8002d08:	005b      	lsls	r3, r3, #1
 8002d0a:	4413      	add	r3, r2
 8002d0c:	881b      	ldrh	r3, [r3, #0]
 8002d0e:	617b      	str	r3, [r7, #20]
        for(j = 0; j < Font.FontWidth; j++) {
 8002d10:	2300      	movs	r3, #0
 8002d12:	61bb      	str	r3, [r7, #24]
 8002d14:	e034      	b.n	8002d80 <ssd1306_WriteChar+0xd8>
            if((b << j) & 0x8000)  {
 8002d16:	697a      	ldr	r2, [r7, #20]
 8002d18:	69bb      	ldr	r3, [r7, #24]
 8002d1a:	fa02 f303 	lsl.w	r3, r2, r3
 8002d1e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d012      	beq.n	8002d4c <ssd1306_WriteChar+0xa4>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 8002d26:	4b23      	ldr	r3, [pc, #140]	; (8002db4 <ssd1306_WriteChar+0x10c>)
 8002d28:	881b      	ldrh	r3, [r3, #0]
 8002d2a:	b2da      	uxtb	r2, r3
 8002d2c:	69bb      	ldr	r3, [r7, #24]
 8002d2e:	b2db      	uxtb	r3, r3
 8002d30:	4413      	add	r3, r2
 8002d32:	b2d8      	uxtb	r0, r3
 8002d34:	4b1f      	ldr	r3, [pc, #124]	; (8002db4 <ssd1306_WriteChar+0x10c>)
 8002d36:	885b      	ldrh	r3, [r3, #2]
 8002d38:	b2da      	uxtb	r2, r3
 8002d3a:	69fb      	ldr	r3, [r7, #28]
 8002d3c:	b2db      	uxtb	r3, r3
 8002d3e:	4413      	add	r3, r2
 8002d40:	b2db      	uxtb	r3, r3
 8002d42:	7bba      	ldrb	r2, [r7, #14]
 8002d44:	4619      	mov	r1, r3
 8002d46:	f7ff ff4f 	bl	8002be8 <ssd1306_DrawPixel>
 8002d4a:	e016      	b.n	8002d7a <ssd1306_WriteChar+0xd2>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8002d4c:	4b19      	ldr	r3, [pc, #100]	; (8002db4 <ssd1306_WriteChar+0x10c>)
 8002d4e:	881b      	ldrh	r3, [r3, #0]
 8002d50:	b2da      	uxtb	r2, r3
 8002d52:	69bb      	ldr	r3, [r7, #24]
 8002d54:	b2db      	uxtb	r3, r3
 8002d56:	4413      	add	r3, r2
 8002d58:	b2d8      	uxtb	r0, r3
 8002d5a:	4b16      	ldr	r3, [pc, #88]	; (8002db4 <ssd1306_WriteChar+0x10c>)
 8002d5c:	885b      	ldrh	r3, [r3, #2]
 8002d5e:	b2da      	uxtb	r2, r3
 8002d60:	69fb      	ldr	r3, [r7, #28]
 8002d62:	b2db      	uxtb	r3, r3
 8002d64:	4413      	add	r3, r2
 8002d66:	b2d9      	uxtb	r1, r3
 8002d68:	7bbb      	ldrb	r3, [r7, #14]
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	bf0c      	ite	eq
 8002d6e:	2301      	moveq	r3, #1
 8002d70:	2300      	movne	r3, #0
 8002d72:	b2db      	uxtb	r3, r3
 8002d74:	461a      	mov	r2, r3
 8002d76:	f7ff ff37 	bl	8002be8 <ssd1306_DrawPixel>
        for(j = 0; j < Font.FontWidth; j++) {
 8002d7a:	69bb      	ldr	r3, [r7, #24]
 8002d7c:	3301      	adds	r3, #1
 8002d7e:	61bb      	str	r3, [r7, #24]
 8002d80:	793b      	ldrb	r3, [r7, #4]
 8002d82:	461a      	mov	r2, r3
 8002d84:	69bb      	ldr	r3, [r7, #24]
 8002d86:	4293      	cmp	r3, r2
 8002d88:	d3c5      	bcc.n	8002d16 <ssd1306_WriteChar+0x6e>
    for(i = 0; i < Font.FontHeight; i++) {
 8002d8a:	69fb      	ldr	r3, [r7, #28]
 8002d8c:	3301      	adds	r3, #1
 8002d8e:	61fb      	str	r3, [r7, #28]
 8002d90:	797b      	ldrb	r3, [r7, #5]
 8002d92:	461a      	mov	r2, r3
 8002d94:	69fb      	ldr	r3, [r7, #28]
 8002d96:	4293      	cmp	r3, r2
 8002d98:	d3ad      	bcc.n	8002cf6 <ssd1306_WriteChar+0x4e>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += Font.FontWidth;
 8002d9a:	4b06      	ldr	r3, [pc, #24]	; (8002db4 <ssd1306_WriteChar+0x10c>)
 8002d9c:	881a      	ldrh	r2, [r3, #0]
 8002d9e:	793b      	ldrb	r3, [r7, #4]
 8002da0:	b29b      	uxth	r3, r3
 8002da2:	4413      	add	r3, r2
 8002da4:	b29a      	uxth	r2, r3
 8002da6:	4b03      	ldr	r3, [pc, #12]	; (8002db4 <ssd1306_WriteChar+0x10c>)
 8002da8:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 8002daa:	7bfb      	ldrb	r3, [r7, #15]
}
 8002dac:	4618      	mov	r0, r3
 8002dae:	3724      	adds	r7, #36	; 0x24
 8002db0:	46bd      	mov	sp, r7
 8002db2:	bd90      	pop	{r4, r7, pc}
 8002db4:	20000680 	.word	0x20000680

08002db8 <ssd1306_WriteString>:

// Write full string to screenbuffer
char ssd1306_WriteString(char* str, FontDef Font, SSD1306_COLOR color) {
 8002db8:	b580      	push	{r7, lr}
 8002dba:	b084      	sub	sp, #16
 8002dbc:	af00      	add	r7, sp, #0
 8002dbe:	60f8      	str	r0, [r7, #12]
 8002dc0:	1d38      	adds	r0, r7, #4
 8002dc2:	e880 0006 	stmia.w	r0, {r1, r2}
 8002dc6:	70fb      	strb	r3, [r7, #3]
    // Write until null-byte
    while (*str) {
 8002dc8:	e012      	b.n	8002df0 <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	7818      	ldrb	r0, [r3, #0]
 8002dce:	78fb      	ldrb	r3, [r7, #3]
 8002dd0:	1d3a      	adds	r2, r7, #4
 8002dd2:	ca06      	ldmia	r2, {r1, r2}
 8002dd4:	f7ff ff68 	bl	8002ca8 <ssd1306_WriteChar>
 8002dd8:	4603      	mov	r3, r0
 8002dda:	461a      	mov	r2, r3
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	781b      	ldrb	r3, [r3, #0]
 8002de0:	429a      	cmp	r2, r3
 8002de2:	d002      	beq.n	8002dea <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	781b      	ldrb	r3, [r3, #0]
 8002de8:	e008      	b.n	8002dfc <ssd1306_WriteString+0x44>
        }
        
        // Next char
        str++;
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	3301      	adds	r3, #1
 8002dee:	60fb      	str	r3, [r7, #12]
    while (*str) {
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	781b      	ldrb	r3, [r3, #0]
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d1e8      	bne.n	8002dca <ssd1306_WriteString+0x12>
    }
    
    // Everything ok
    return *str;
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	781b      	ldrb	r3, [r3, #0]
}
 8002dfc:	4618      	mov	r0, r3
 8002dfe:	3710      	adds	r7, #16
 8002e00:	46bd      	mov	sp, r7
 8002e02:	bd80      	pop	{r7, pc}

08002e04 <ssd1306_SetCursor>:

// Position the cursor
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 8002e04:	b480      	push	{r7}
 8002e06:	b083      	sub	sp, #12
 8002e08:	af00      	add	r7, sp, #0
 8002e0a:	4603      	mov	r3, r0
 8002e0c:	460a      	mov	r2, r1
 8002e0e:	71fb      	strb	r3, [r7, #7]
 8002e10:	4613      	mov	r3, r2
 8002e12:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 8002e14:	79fb      	ldrb	r3, [r7, #7]
 8002e16:	b29a      	uxth	r2, r3
 8002e18:	4b05      	ldr	r3, [pc, #20]	; (8002e30 <ssd1306_SetCursor+0x2c>)
 8002e1a:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 8002e1c:	79bb      	ldrb	r3, [r7, #6]
 8002e1e:	b29a      	uxth	r2, r3
 8002e20:	4b03      	ldr	r3, [pc, #12]	; (8002e30 <ssd1306_SetCursor+0x2c>)
 8002e22:	805a      	strh	r2, [r3, #2]
}
 8002e24:	bf00      	nop
 8002e26:	370c      	adds	r7, #12
 8002e28:	46bd      	mov	sp, r7
 8002e2a:	bc80      	pop	{r7}
 8002e2c:	4770      	bx	lr
 8002e2e:	bf00      	nop
 8002e30:	20000680 	.word	0x20000680

08002e34 <ssd1306_SetContrast>:
  ssd1306_Line(x1,y2,x1,y1,color);

  return;
}

void ssd1306_SetContrast(const uint8_t value) {
 8002e34:	b580      	push	{r7, lr}
 8002e36:	b084      	sub	sp, #16
 8002e38:	af00      	add	r7, sp, #0
 8002e3a:	4603      	mov	r3, r0
 8002e3c:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 8002e3e:	2381      	movs	r3, #129	; 0x81
 8002e40:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 8002e42:	7bfb      	ldrb	r3, [r7, #15]
 8002e44:	4618      	mov	r0, r3
 8002e46:	f7ff fdeb 	bl	8002a20 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 8002e4a:	79fb      	ldrb	r3, [r7, #7]
 8002e4c:	4618      	mov	r0, r3
 8002e4e:	f7ff fde7 	bl	8002a20 <ssd1306_WriteCommand>
}
 8002e52:	bf00      	nop
 8002e54:	3710      	adds	r7, #16
 8002e56:	46bd      	mov	sp, r7
 8002e58:	bd80      	pop	{r7, pc}
	...

08002e5c <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 8002e5c:	b580      	push	{r7, lr}
 8002e5e:	b084      	sub	sp, #16
 8002e60:	af00      	add	r7, sp, #0
 8002e62:	4603      	mov	r3, r0
 8002e64:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on) {
 8002e66:	79fb      	ldrb	r3, [r7, #7]
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d005      	beq.n	8002e78 <ssd1306_SetDisplayOn+0x1c>
        value = 0xAF;   // Display on
 8002e6c:	23af      	movs	r3, #175	; 0xaf
 8002e6e:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 8002e70:	4b08      	ldr	r3, [pc, #32]	; (8002e94 <ssd1306_SetDisplayOn+0x38>)
 8002e72:	2201      	movs	r2, #1
 8002e74:	719a      	strb	r2, [r3, #6]
 8002e76:	e004      	b.n	8002e82 <ssd1306_SetDisplayOn+0x26>
    } else {
        value = 0xAE;   // Display off
 8002e78:	23ae      	movs	r3, #174	; 0xae
 8002e7a:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 8002e7c:	4b05      	ldr	r3, [pc, #20]	; (8002e94 <ssd1306_SetDisplayOn+0x38>)
 8002e7e:	2200      	movs	r2, #0
 8002e80:	719a      	strb	r2, [r3, #6]
    }
    ssd1306_WriteCommand(value);
 8002e82:	7bfb      	ldrb	r3, [r7, #15]
 8002e84:	4618      	mov	r0, r3
 8002e86:	f7ff fdcb 	bl	8002a20 <ssd1306_WriteCommand>
}
 8002e8a:	bf00      	nop
 8002e8c:	3710      	adds	r7, #16
 8002e8e:	46bd      	mov	sp, r7
 8002e90:	bd80      	pop	{r7, pc}
 8002e92:	bf00      	nop
 8002e94:	20000680 	.word	0x20000680

08002e98 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8002e98:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8002e9a:	e003      	b.n	8002ea4 <LoopCopyDataInit>

08002e9c <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8002e9c:	4b0b      	ldr	r3, [pc, #44]	; (8002ecc <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8002e9e:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8002ea0:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8002ea2:	3104      	adds	r1, #4

08002ea4 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8002ea4:	480a      	ldr	r0, [pc, #40]	; (8002ed0 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8002ea6:	4b0b      	ldr	r3, [pc, #44]	; (8002ed4 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8002ea8:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8002eaa:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8002eac:	d3f6      	bcc.n	8002e9c <CopyDataInit>
  ldr r2, =_sbss
 8002eae:	4a0a      	ldr	r2, [pc, #40]	; (8002ed8 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8002eb0:	e002      	b.n	8002eb8 <LoopFillZerobss>

08002eb2 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8002eb2:	2300      	movs	r3, #0
  str r3, [r2], #4
 8002eb4:	f842 3b04 	str.w	r3, [r2], #4

08002eb8 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8002eb8:	4b08      	ldr	r3, [pc, #32]	; (8002edc <LoopFillZerobss+0x24>)
  cmp r2, r3
 8002eba:	429a      	cmp	r2, r3
  bcc FillZerobss
 8002ebc:	d3f9      	bcc.n	8002eb2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002ebe:	f7ff fc25 	bl	800270c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002ec2:	f003 ffd5 	bl	8006e70 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002ec6:	f7ff fa07 	bl	80022d8 <main>
  bx lr
 8002eca:	4770      	bx	lr
  ldr r3, =_sidata
 8002ecc:	0800b480 	.word	0x0800b480
  ldr r0, =_sdata
 8002ed0:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8002ed4:	200001f4 	.word	0x200001f4
  ldr r2, =_sbss
 8002ed8:	200001f8 	.word	0x200001f8
  ldr r3, = _ebss
 8002edc:	20000a54 	.word	0x20000a54

08002ee0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002ee0:	e7fe      	b.n	8002ee0 <ADC1_2_IRQHandler>
	...

08002ee4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002ee4:	b580      	push	{r7, lr}
 8002ee6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002ee8:	4b08      	ldr	r3, [pc, #32]	; (8002f0c <HAL_Init+0x28>)
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	4a07      	ldr	r2, [pc, #28]	; (8002f0c <HAL_Init+0x28>)
 8002eee:	f043 0310 	orr.w	r3, r3, #16
 8002ef2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002ef4:	2003      	movs	r0, #3
 8002ef6:	f000 fce1 	bl	80038bc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002efa:	2000      	movs	r0, #0
 8002efc:	f000 f808 	bl	8002f10 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002f00:	f7ff fb2a 	bl	8002558 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002f04:	2300      	movs	r3, #0
}
 8002f06:	4618      	mov	r0, r3
 8002f08:	bd80      	pop	{r7, pc}
 8002f0a:	bf00      	nop
 8002f0c:	40022000 	.word	0x40022000

08002f10 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002f10:	b580      	push	{r7, lr}
 8002f12:	b082      	sub	sp, #8
 8002f14:	af00      	add	r7, sp, #0
 8002f16:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(SystemCoreClock/1000U);
 8002f18:	4b09      	ldr	r3, [pc, #36]	; (8002f40 <HAL_InitTick+0x30>)
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	4a09      	ldr	r2, [pc, #36]	; (8002f44 <HAL_InitTick+0x34>)
 8002f1e:	fba2 2303 	umull	r2, r3, r2, r3
 8002f22:	099b      	lsrs	r3, r3, #6
 8002f24:	4618      	mov	r0, r3
 8002f26:	f000 fcfe 	bl	8003926 <HAL_SYSTICK_Config>

  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0U);
 8002f2a:	2200      	movs	r2, #0
 8002f2c:	6879      	ldr	r1, [r7, #4]
 8002f2e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002f32:	f000 fcce 	bl	80038d2 <HAL_NVIC_SetPriority>

  /* Return function status */
  return HAL_OK;
 8002f36:	2300      	movs	r3, #0
}
 8002f38:	4618      	mov	r0, r3
 8002f3a:	3708      	adds	r7, #8
 8002f3c:	46bd      	mov	sp, r7
 8002f3e:	bd80      	pop	{r7, pc}
 8002f40:	20000018 	.word	0x20000018
 8002f44:	10624dd3 	.word	0x10624dd3

08002f48 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002f48:	b480      	push	{r7}
 8002f4a:	af00      	add	r7, sp, #0
  uwTick++;
 8002f4c:	4b04      	ldr	r3, [pc, #16]	; (8002f60 <HAL_IncTick+0x18>)
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	3301      	adds	r3, #1
 8002f52:	4a03      	ldr	r2, [pc, #12]	; (8002f60 <HAL_IncTick+0x18>)
 8002f54:	6013      	str	r3, [r2, #0]
}
 8002f56:	bf00      	nop
 8002f58:	46bd      	mov	sp, r7
 8002f5a:	bc80      	pop	{r7}
 8002f5c:	4770      	bx	lr
 8002f5e:	bf00      	nop
 8002f60:	20000a28 	.word	0x20000a28

08002f64 <HAL_GetTick>:
  * @note  This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002f64:	b480      	push	{r7}
 8002f66:	af00      	add	r7, sp, #0
  return uwTick;
 8002f68:	4b02      	ldr	r3, [pc, #8]	; (8002f74 <HAL_GetTick+0x10>)
 8002f6a:	681b      	ldr	r3, [r3, #0]
}
 8002f6c:	4618      	mov	r0, r3
 8002f6e:	46bd      	mov	sp, r7
 8002f70:	bc80      	pop	{r7}
 8002f72:	4770      	bx	lr
 8002f74:	20000a28 	.word	0x20000a28

08002f78 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay: specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(__IO uint32_t Delay)
{
 8002f78:	b580      	push	{r7, lr}
 8002f7a:	b084      	sub	sp, #16
 8002f7c:	af00      	add	r7, sp, #0
 8002f7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002f80:	f7ff fff0 	bl	8002f64 <HAL_GetTick>
 8002f84:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	60fb      	str	r3, [r7, #12]
  
  /* Add a period to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002f90:	d002      	beq.n	8002f98 <HAL_Delay+0x20>
  {
     wait++;
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	3301      	adds	r3, #1
 8002f96:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8002f98:	bf00      	nop
 8002f9a:	f7ff ffe3 	bl	8002f64 <HAL_GetTick>
 8002f9e:	4602      	mov	r2, r0
 8002fa0:	68bb      	ldr	r3, [r7, #8]
 8002fa2:	1ad3      	subs	r3, r2, r3
 8002fa4:	68fa      	ldr	r2, [r7, #12]
 8002fa6:	429a      	cmp	r2, r3
 8002fa8:	d8f7      	bhi.n	8002f9a <HAL_Delay+0x22>
  {
  }
}
 8002faa:	bf00      	nop
 8002fac:	3710      	adds	r7, #16
 8002fae:	46bd      	mov	sp, r7
 8002fb0:	bd80      	pop	{r7, pc}
	...

08002fb4 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002fb4:	b580      	push	{r7, lr}
 8002fb6:	b086      	sub	sp, #24
 8002fb8:	af00      	add	r7, sp, #0
 8002fba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002fbc:	2300      	movs	r3, #0
 8002fbe:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8002fc0:	2300      	movs	r3, #0
 8002fc2:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8002fc4:	2300      	movs	r3, #0
 8002fc6:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8002fc8:	2300      	movs	r3, #0
 8002fca:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d101      	bne.n	8002fd6 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8002fd2:	2301      	movs	r3, #1
 8002fd4:	e0be      	b.n	8003154 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	689b      	ldr	r3, [r3, #8]
 8002fda:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d109      	bne.n	8002ff8 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	2200      	movs	r2, #0
 8002fe8:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	2200      	movs	r2, #0
 8002fee:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002ff2:	6878      	ldr	r0, [r7, #4]
 8002ff4:	f7fd fefc 	bl	8000df0 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8002ff8:	6878      	ldr	r0, [r7, #4]
 8002ffa:	f000 faf7 	bl	80035ec <ADC_ConversionStop_Disable>
 8002ffe:	4603      	mov	r3, r0
 8003000:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003006:	f003 0310 	and.w	r3, r3, #16
 800300a:	2b00      	cmp	r3, #0
 800300c:	f040 8099 	bne.w	8003142 <HAL_ADC_Init+0x18e>
 8003010:	7dfb      	ldrb	r3, [r7, #23]
 8003012:	2b00      	cmp	r3, #0
 8003014:	f040 8095 	bne.w	8003142 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800301c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003020:	f023 0302 	bic.w	r3, r3, #2
 8003024:	f043 0202 	orr.w	r2, r3, #2
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                               |
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv) |
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                               |
 8003034:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS(hadc->Init.ContinuousConvMode)   );
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	68db      	ldr	r3, [r3, #12]
 800303a:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv) |
 800303c:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                               |
 800303e:	68ba      	ldr	r2, [r7, #8]
 8003040:	4313      	orrs	r3, r2
 8003042:	60bb      	str	r3, [r7, #8]
    
    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	689b      	ldr	r3, [r3, #8]
 8003048:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800304c:	d003      	beq.n	8003056 <HAL_ADC_Init+0xa2>
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	689b      	ldr	r3, [r3, #8]
 8003052:	2b01      	cmp	r3, #1
 8003054:	d102      	bne.n	800305c <HAL_ADC_Init+0xa8>
 8003056:	f44f 7380 	mov.w	r3, #256	; 0x100
 800305a:	e000      	b.n	800305e <HAL_ADC_Init+0xaa>
 800305c:	2300      	movs	r3, #0
 800305e:	693a      	ldr	r2, [r7, #16]
 8003060:	4313      	orrs	r3, r2
 8003062:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	695b      	ldr	r3, [r3, #20]
 8003068:	2b01      	cmp	r3, #1
 800306a:	d119      	bne.n	80030a0 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	68db      	ldr	r3, [r3, #12]
 8003070:	2b00      	cmp	r3, #0
 8003072:	d109      	bne.n	8003088 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	699b      	ldr	r3, [r3, #24]
 8003078:	3b01      	subs	r3, #1
 800307a:	035a      	lsls	r2, r3, #13
 800307c:	693b      	ldr	r3, [r7, #16]
 800307e:	4313      	orrs	r3, r2
 8003080:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003084:	613b      	str	r3, [r7, #16]
 8003086:	e00b      	b.n	80030a0 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800308c:	f043 0220 	orr.w	r2, r3, #32
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003098:	f043 0201 	orr.w	r2, r3, #1
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	685b      	ldr	r3, [r3, #4]
 80030a6:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	693a      	ldr	r2, [r7, #16]
 80030b0:	430a      	orrs	r2, r1
 80030b2:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	689a      	ldr	r2, [r3, #8]
 80030ba:	4b28      	ldr	r3, [pc, #160]	; (800315c <HAL_ADC_Init+0x1a8>)
 80030bc:	4013      	ands	r3, r2
 80030be:	687a      	ldr	r2, [r7, #4]
 80030c0:	6812      	ldr	r2, [r2, #0]
 80030c2:	68b9      	ldr	r1, [r7, #8]
 80030c4:	430b      	orrs	r3, r1
 80030c6:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	689b      	ldr	r3, [r3, #8]
 80030cc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80030d0:	d003      	beq.n	80030da <HAL_ADC_Init+0x126>
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	689b      	ldr	r3, [r3, #8]
 80030d6:	2b01      	cmp	r3, #1
 80030d8:	d104      	bne.n	80030e4 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	691b      	ldr	r3, [r3, #16]
 80030de:	3b01      	subs	r3, #1
 80030e0:	051b      	lsls	r3, r3, #20
 80030e2:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030ea:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	68fa      	ldr	r2, [r7, #12]
 80030f4:	430a      	orrs	r2, r1
 80030f6:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	689a      	ldr	r2, [r3, #8]
 80030fe:	4b18      	ldr	r3, [pc, #96]	; (8003160 <HAL_ADC_Init+0x1ac>)
 8003100:	4013      	ands	r3, r2
 8003102:	68ba      	ldr	r2, [r7, #8]
 8003104:	429a      	cmp	r2, r3
 8003106:	d10b      	bne.n	8003120 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	2200      	movs	r2, #0
 800310c:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003112:	f023 0303 	bic.w	r3, r3, #3
 8003116:	f043 0201 	orr.w	r2, r3, #1
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800311e:	e018      	b.n	8003152 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003124:	f023 0312 	bic.w	r3, r3, #18
 8003128:	f043 0210 	orr.w	r2, r3, #16
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003134:	f043 0201 	orr.w	r2, r3, #1
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 800313c:	2301      	movs	r3, #1
 800313e:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8003140:	e007      	b.n	8003152 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003146:	f043 0210 	orr.w	r2, r3, #16
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 800314e:	2301      	movs	r3, #1
 8003150:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8003152:	7dfb      	ldrb	r3, [r7, #23]
}
 8003154:	4618      	mov	r0, r3
 8003156:	3718      	adds	r7, #24
 8003158:	46bd      	mov	sp, r7
 800315a:	bd80      	pop	{r7, pc}
 800315c:	ffe1f7fd 	.word	0xffe1f7fd
 8003160:	ff1f0efe 	.word	0xff1f0efe

08003164 <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8003164:	b580      	push	{r7, lr}
 8003166:	b086      	sub	sp, #24
 8003168:	af00      	add	r7, sp, #0
 800316a:	60f8      	str	r0, [r7, #12]
 800316c:	60b9      	str	r1, [r7, #8]
 800316e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003170:	2300      	movs	r3, #0
 8003172:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	4a64      	ldr	r2, [pc, #400]	; (800330c <HAL_ADC_Start_DMA+0x1a8>)
 800317a:	4293      	cmp	r3, r2
 800317c:	d004      	beq.n	8003188 <HAL_ADC_Start_DMA+0x24>
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	4a63      	ldr	r2, [pc, #396]	; (8003310 <HAL_ADC_Start_DMA+0x1ac>)
 8003184:	4293      	cmp	r3, r2
 8003186:	d106      	bne.n	8003196 <HAL_ADC_Start_DMA+0x32>
 8003188:	4b60      	ldr	r3, [pc, #384]	; (800330c <HAL_ADC_Start_DMA+0x1a8>)
 800318a:	685b      	ldr	r3, [r3, #4]
 800318c:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8003190:	2b00      	cmp	r3, #0
 8003192:	f040 80b3 	bne.w	80032fc <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800319c:	2b01      	cmp	r3, #1
 800319e:	d101      	bne.n	80031a4 <HAL_ADC_Start_DMA+0x40>
 80031a0:	2302      	movs	r3, #2
 80031a2:	e0ae      	b.n	8003302 <HAL_ADC_Start_DMA+0x19e>
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	2201      	movs	r2, #1
 80031a8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80031ac:	68f8      	ldr	r0, [r7, #12]
 80031ae:	f000 f9cb 	bl	8003548 <ADC_Enable>
 80031b2:	4603      	mov	r3, r0
 80031b4:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80031b6:	7dfb      	ldrb	r3, [r7, #23]
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	f040 809a 	bne.w	80032f2 <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031c2:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80031c6:	f023 0301 	bic.w	r3, r3, #1
 80031ca:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	4a4e      	ldr	r2, [pc, #312]	; (8003310 <HAL_ADC_Start_DMA+0x1ac>)
 80031d8:	4293      	cmp	r3, r2
 80031da:	d105      	bne.n	80031e8 <HAL_ADC_Start_DMA+0x84>
 80031dc:	4b4b      	ldr	r3, [pc, #300]	; (800330c <HAL_ADC_Start_DMA+0x1a8>)
 80031de:	685b      	ldr	r3, [r3, #4]
 80031e0:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d115      	bne.n	8003214 <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031ec:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	685b      	ldr	r3, [r3, #4]
 80031fa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d026      	beq.n	8003250 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003206:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800320a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003212:	e01d      	b.n	8003250 <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003218:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	4a39      	ldr	r2, [pc, #228]	; (800330c <HAL_ADC_Start_DMA+0x1a8>)
 8003226:	4293      	cmp	r3, r2
 8003228:	d004      	beq.n	8003234 <HAL_ADC_Start_DMA+0xd0>
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	4a38      	ldr	r2, [pc, #224]	; (8003310 <HAL_ADC_Start_DMA+0x1ac>)
 8003230:	4293      	cmp	r3, r2
 8003232:	d10d      	bne.n	8003250 <HAL_ADC_Start_DMA+0xec>
 8003234:	4b35      	ldr	r3, [pc, #212]	; (800330c <HAL_ADC_Start_DMA+0x1a8>)
 8003236:	685b      	ldr	r3, [r3, #4]
 8003238:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800323c:	2b00      	cmp	r3, #0
 800323e:	d007      	beq.n	8003250 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003244:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003248:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003254:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003258:	2b00      	cmp	r3, #0
 800325a:	d006      	beq.n	800326a <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003260:	f023 0206 	bic.w	r2, r3, #6
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	62da      	str	r2, [r3, #44]	; 0x2c
 8003268:	e002      	b.n	8003270 <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	2200      	movs	r2, #0
 800326e:	62da      	str	r2, [r3, #44]	; 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	2200      	movs	r2, #0
 8003274:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	6a1b      	ldr	r3, [r3, #32]
 800327c:	4a25      	ldr	r2, [pc, #148]	; (8003314 <HAL_ADC_Start_DMA+0x1b0>)
 800327e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	6a1b      	ldr	r3, [r3, #32]
 8003284:	4a24      	ldr	r2, [pc, #144]	; (8003318 <HAL_ADC_Start_DMA+0x1b4>)
 8003286:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	6a1b      	ldr	r3, [r3, #32]
 800328c:	4a23      	ldr	r2, [pc, #140]	; (800331c <HAL_ADC_Start_DMA+0x1b8>)
 800328e:	631a      	str	r2, [r3, #48]	; 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	f06f 0202 	mvn.w	r2, #2
 8003298:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	689a      	ldr	r2, [r3, #8]
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80032a8:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	6a18      	ldr	r0, [r3, #32]
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	334c      	adds	r3, #76	; 0x4c
 80032b4:	4619      	mov	r1, r3
 80032b6:	68ba      	ldr	r2, [r7, #8]
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	f000 fbcf 	bl	8003a5c <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	689b      	ldr	r3, [r3, #8]
 80032c4:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80032c8:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80032cc:	d108      	bne.n	80032e0 <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	689a      	ldr	r2, [r3, #8]
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 80032dc:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 80032de:	e00f      	b.n	8003300 <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	689a      	ldr	r2, [r3, #8]
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80032ee:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 80032f0:	e006      	b.n	8003300 <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	2200      	movs	r2, #0
 80032f6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    if (tmp_hal_status == HAL_OK)
 80032fa:	e001      	b.n	8003300 <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80032fc:	2301      	movs	r3, #1
 80032fe:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8003300:	7dfb      	ldrb	r3, [r7, #23]
}
 8003302:	4618      	mov	r0, r3
 8003304:	3718      	adds	r7, #24
 8003306:	46bd      	mov	sp, r7
 8003308:	bd80      	pop	{r7, pc}
 800330a:	bf00      	nop
 800330c:	40012400 	.word	0x40012400
 8003310:	40012800 	.word	0x40012800
 8003314:	08003661 	.word	0x08003661
 8003318:	080036dd 	.word	0x080036dd
 800331c:	080036f9 	.word	0x080036f9

08003320 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003320:	b480      	push	{r7}
 8003322:	b083      	sub	sp, #12
 8003324:	af00      	add	r7, sp, #0
 8003326:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8003328:	bf00      	nop
 800332a:	370c      	adds	r7, #12
 800332c:	46bd      	mov	sp, r7
 800332e:	bc80      	pop	{r7}
 8003330:	4770      	bx	lr

08003332 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003332:	b480      	push	{r7}
 8003334:	b083      	sub	sp, #12
 8003336:	af00      	add	r7, sp, #0
 8003338:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 800333a:	bf00      	nop
 800333c:	370c      	adds	r7, #12
 800333e:	46bd      	mov	sp, r7
 8003340:	bc80      	pop	{r7}
 8003342:	4770      	bx	lr

08003344 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003344:	b480      	push	{r7}
 8003346:	b083      	sub	sp, #12
 8003348:	af00      	add	r7, sp, #0
 800334a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 800334c:	bf00      	nop
 800334e:	370c      	adds	r7, #12
 8003350:	46bd      	mov	sp, r7
 8003352:	bc80      	pop	{r7}
 8003354:	4770      	bx	lr
	...

08003358 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8003358:	b480      	push	{r7}
 800335a:	b085      	sub	sp, #20
 800335c:	af00      	add	r7, sp, #0
 800335e:	6078      	str	r0, [r7, #4]
 8003360:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003362:	2300      	movs	r3, #0
 8003364:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8003366:	2300      	movs	r3, #0
 8003368:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003370:	2b01      	cmp	r3, #1
 8003372:	d101      	bne.n	8003378 <HAL_ADC_ConfigChannel+0x20>
 8003374:	2302      	movs	r3, #2
 8003376:	e0dc      	b.n	8003532 <HAL_ADC_ConfigChannel+0x1da>
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	2201      	movs	r2, #1
 800337c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8003380:	683b      	ldr	r3, [r7, #0]
 8003382:	685b      	ldr	r3, [r3, #4]
 8003384:	2b06      	cmp	r3, #6
 8003386:	d81c      	bhi.n	80033c2 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800338e:	683b      	ldr	r3, [r7, #0]
 8003390:	685a      	ldr	r2, [r3, #4]
 8003392:	4613      	mov	r3, r2
 8003394:	009b      	lsls	r3, r3, #2
 8003396:	4413      	add	r3, r2
 8003398:	3b05      	subs	r3, #5
 800339a:	221f      	movs	r2, #31
 800339c:	fa02 f303 	lsl.w	r3, r2, r3
 80033a0:	43db      	mvns	r3, r3
 80033a2:	4019      	ands	r1, r3
 80033a4:	683b      	ldr	r3, [r7, #0]
 80033a6:	6818      	ldr	r0, [r3, #0]
 80033a8:	683b      	ldr	r3, [r7, #0]
 80033aa:	685a      	ldr	r2, [r3, #4]
 80033ac:	4613      	mov	r3, r2
 80033ae:	009b      	lsls	r3, r3, #2
 80033b0:	4413      	add	r3, r2
 80033b2:	3b05      	subs	r3, #5
 80033b4:	fa00 f203 	lsl.w	r2, r0, r3
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	430a      	orrs	r2, r1
 80033be:	635a      	str	r2, [r3, #52]	; 0x34
 80033c0:	e03c      	b.n	800343c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80033c2:	683b      	ldr	r3, [r7, #0]
 80033c4:	685b      	ldr	r3, [r3, #4]
 80033c6:	2b0c      	cmp	r3, #12
 80033c8:	d81c      	bhi.n	8003404 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80033d0:	683b      	ldr	r3, [r7, #0]
 80033d2:	685a      	ldr	r2, [r3, #4]
 80033d4:	4613      	mov	r3, r2
 80033d6:	009b      	lsls	r3, r3, #2
 80033d8:	4413      	add	r3, r2
 80033da:	3b23      	subs	r3, #35	; 0x23
 80033dc:	221f      	movs	r2, #31
 80033de:	fa02 f303 	lsl.w	r3, r2, r3
 80033e2:	43db      	mvns	r3, r3
 80033e4:	4019      	ands	r1, r3
 80033e6:	683b      	ldr	r3, [r7, #0]
 80033e8:	6818      	ldr	r0, [r3, #0]
 80033ea:	683b      	ldr	r3, [r7, #0]
 80033ec:	685a      	ldr	r2, [r3, #4]
 80033ee:	4613      	mov	r3, r2
 80033f0:	009b      	lsls	r3, r3, #2
 80033f2:	4413      	add	r3, r2
 80033f4:	3b23      	subs	r3, #35	; 0x23
 80033f6:	fa00 f203 	lsl.w	r2, r0, r3
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	430a      	orrs	r2, r1
 8003400:	631a      	str	r2, [r3, #48]	; 0x30
 8003402:	e01b      	b.n	800343c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800340a:	683b      	ldr	r3, [r7, #0]
 800340c:	685a      	ldr	r2, [r3, #4]
 800340e:	4613      	mov	r3, r2
 8003410:	009b      	lsls	r3, r3, #2
 8003412:	4413      	add	r3, r2
 8003414:	3b41      	subs	r3, #65	; 0x41
 8003416:	221f      	movs	r2, #31
 8003418:	fa02 f303 	lsl.w	r3, r2, r3
 800341c:	43db      	mvns	r3, r3
 800341e:	4019      	ands	r1, r3
 8003420:	683b      	ldr	r3, [r7, #0]
 8003422:	6818      	ldr	r0, [r3, #0]
 8003424:	683b      	ldr	r3, [r7, #0]
 8003426:	685a      	ldr	r2, [r3, #4]
 8003428:	4613      	mov	r3, r2
 800342a:	009b      	lsls	r3, r3, #2
 800342c:	4413      	add	r3, r2
 800342e:	3b41      	subs	r3, #65	; 0x41
 8003430:	fa00 f203 	lsl.w	r2, r0, r3
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	430a      	orrs	r2, r1
 800343a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 800343c:	683b      	ldr	r3, [r7, #0]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	2b09      	cmp	r3, #9
 8003442:	d91c      	bls.n	800347e <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	68d9      	ldr	r1, [r3, #12]
 800344a:	683b      	ldr	r3, [r7, #0]
 800344c:	681a      	ldr	r2, [r3, #0]
 800344e:	4613      	mov	r3, r2
 8003450:	005b      	lsls	r3, r3, #1
 8003452:	4413      	add	r3, r2
 8003454:	3b1e      	subs	r3, #30
 8003456:	2207      	movs	r2, #7
 8003458:	fa02 f303 	lsl.w	r3, r2, r3
 800345c:	43db      	mvns	r3, r3
 800345e:	4019      	ands	r1, r3
 8003460:	683b      	ldr	r3, [r7, #0]
 8003462:	6898      	ldr	r0, [r3, #8]
 8003464:	683b      	ldr	r3, [r7, #0]
 8003466:	681a      	ldr	r2, [r3, #0]
 8003468:	4613      	mov	r3, r2
 800346a:	005b      	lsls	r3, r3, #1
 800346c:	4413      	add	r3, r2
 800346e:	3b1e      	subs	r3, #30
 8003470:	fa00 f203 	lsl.w	r2, r0, r3
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	430a      	orrs	r2, r1
 800347a:	60da      	str	r2, [r3, #12]
 800347c:	e019      	b.n	80034b2 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	6919      	ldr	r1, [r3, #16]
 8003484:	683b      	ldr	r3, [r7, #0]
 8003486:	681a      	ldr	r2, [r3, #0]
 8003488:	4613      	mov	r3, r2
 800348a:	005b      	lsls	r3, r3, #1
 800348c:	4413      	add	r3, r2
 800348e:	2207      	movs	r2, #7
 8003490:	fa02 f303 	lsl.w	r3, r2, r3
 8003494:	43db      	mvns	r3, r3
 8003496:	4019      	ands	r1, r3
 8003498:	683b      	ldr	r3, [r7, #0]
 800349a:	6898      	ldr	r0, [r3, #8]
 800349c:	683b      	ldr	r3, [r7, #0]
 800349e:	681a      	ldr	r2, [r3, #0]
 80034a0:	4613      	mov	r3, r2
 80034a2:	005b      	lsls	r3, r3, #1
 80034a4:	4413      	add	r3, r2
 80034a6:	fa00 f203 	lsl.w	r2, r0, r3
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	430a      	orrs	r2, r1
 80034b0:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80034b2:	683b      	ldr	r3, [r7, #0]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	2b10      	cmp	r3, #16
 80034b8:	d003      	beq.n	80034c2 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 80034ba:	683b      	ldr	r3, [r7, #0]
 80034bc:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80034be:	2b11      	cmp	r3, #17
 80034c0:	d132      	bne.n	8003528 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	4a1d      	ldr	r2, [pc, #116]	; (800353c <HAL_ADC_ConfigChannel+0x1e4>)
 80034c8:	4293      	cmp	r3, r2
 80034ca:	d125      	bne.n	8003518 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	689b      	ldr	r3, [r3, #8]
 80034d2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d126      	bne.n	8003528 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	689a      	ldr	r2, [r3, #8]
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80034e8:	609a      	str	r2, [r3, #8]
        
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 80034ea:	683b      	ldr	r3, [r7, #0]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	2b10      	cmp	r3, #16
 80034f0:	d11a      	bne.n	8003528 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80034f2:	4b13      	ldr	r3, [pc, #76]	; (8003540 <HAL_ADC_ConfigChannel+0x1e8>)
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	4a13      	ldr	r2, [pc, #76]	; (8003544 <HAL_ADC_ConfigChannel+0x1ec>)
 80034f8:	fba2 2303 	umull	r2, r3, r2, r3
 80034fc:	0c9a      	lsrs	r2, r3, #18
 80034fe:	4613      	mov	r3, r2
 8003500:	009b      	lsls	r3, r3, #2
 8003502:	4413      	add	r3, r2
 8003504:	005b      	lsls	r3, r3, #1
 8003506:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003508:	e002      	b.n	8003510 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 800350a:	68bb      	ldr	r3, [r7, #8]
 800350c:	3b01      	subs	r3, #1
 800350e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003510:	68bb      	ldr	r3, [r7, #8]
 8003512:	2b00      	cmp	r3, #0
 8003514:	d1f9      	bne.n	800350a <HAL_ADC_ConfigChannel+0x1b2>
 8003516:	e007      	b.n	8003528 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800351c:	f043 0220 	orr.w	r2, r3, #32
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8003524:	2301      	movs	r3, #1
 8003526:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	2200      	movs	r2, #0
 800352c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8003530:	7bfb      	ldrb	r3, [r7, #15]
}
 8003532:	4618      	mov	r0, r3
 8003534:	3714      	adds	r7, #20
 8003536:	46bd      	mov	sp, r7
 8003538:	bc80      	pop	{r7}
 800353a:	4770      	bx	lr
 800353c:	40012400 	.word	0x40012400
 8003540:	20000018 	.word	0x20000018
 8003544:	431bde83 	.word	0x431bde83

08003548 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8003548:	b580      	push	{r7, lr}
 800354a:	b084      	sub	sp, #16
 800354c:	af00      	add	r7, sp, #0
 800354e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003550:	2300      	movs	r3, #0
 8003552:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8003554:	2300      	movs	r3, #0
 8003556:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	689b      	ldr	r3, [r3, #8]
 800355e:	f003 0301 	and.w	r3, r3, #1
 8003562:	2b01      	cmp	r3, #1
 8003564:	d039      	beq.n	80035da <ADC_Enable+0x92>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	689a      	ldr	r2, [r3, #8]
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	f042 0201 	orr.w	r2, r2, #1
 8003574:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8003576:	4b1b      	ldr	r3, [pc, #108]	; (80035e4 <ADC_Enable+0x9c>)
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	4a1b      	ldr	r2, [pc, #108]	; (80035e8 <ADC_Enable+0xa0>)
 800357c:	fba2 2303 	umull	r2, r3, r2, r3
 8003580:	0c9b      	lsrs	r3, r3, #18
 8003582:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8003584:	e002      	b.n	800358c <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8003586:	68bb      	ldr	r3, [r7, #8]
 8003588:	3b01      	subs	r3, #1
 800358a:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 800358c:	68bb      	ldr	r3, [r7, #8]
 800358e:	2b00      	cmp	r3, #0
 8003590:	d1f9      	bne.n	8003586 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003592:	f7ff fce7 	bl	8002f64 <HAL_GetTick>
 8003596:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8003598:	e018      	b.n	80035cc <ADC_Enable+0x84>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800359a:	f7ff fce3 	bl	8002f64 <HAL_GetTick>
 800359e:	4602      	mov	r2, r0
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	1ad3      	subs	r3, r2, r3
 80035a4:	2b02      	cmp	r3, #2
 80035a6:	d911      	bls.n	80035cc <ADC_Enable+0x84>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035ac:	f043 0210 	orr.w	r2, r3, #16
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	629a      	str	r2, [r3, #40]	; 0x28
      
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035b8:	f043 0201 	orr.w	r2, r3, #1
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	62da      	str	r2, [r3, #44]	; 0x2c
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	2200      	movs	r2, #0
 80035c4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
        return HAL_ERROR;
 80035c8:	2301      	movs	r3, #1
 80035ca:	e007      	b.n	80035dc <ADC_Enable+0x94>
    while(ADC_IS_ENABLE(hadc) == RESET)
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	689b      	ldr	r3, [r3, #8]
 80035d2:	f003 0301 	and.w	r3, r3, #1
 80035d6:	2b01      	cmp	r3, #1
 80035d8:	d1df      	bne.n	800359a <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80035da:	2300      	movs	r3, #0
}
 80035dc:	4618      	mov	r0, r3
 80035de:	3710      	adds	r7, #16
 80035e0:	46bd      	mov	sp, r7
 80035e2:	bd80      	pop	{r7, pc}
 80035e4:	20000018 	.word	0x20000018
 80035e8:	431bde83 	.word	0x431bde83

080035ec <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 80035ec:	b580      	push	{r7, lr}
 80035ee:	b084      	sub	sp, #16
 80035f0:	af00      	add	r7, sp, #0
 80035f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80035f4:	2300      	movs	r3, #0
 80035f6:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	689b      	ldr	r3, [r3, #8]
 80035fe:	f003 0301 	and.w	r3, r3, #1
 8003602:	2b01      	cmp	r3, #1
 8003604:	d127      	bne.n	8003656 <ADC_ConversionStop_Disable+0x6a>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	689a      	ldr	r2, [r3, #8]
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	f022 0201 	bic.w	r2, r2, #1
 8003614:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003616:	f7ff fca5 	bl	8002f64 <HAL_GetTick>
 800361a:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 800361c:	e014      	b.n	8003648 <ADC_ConversionStop_Disable+0x5c>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800361e:	f7ff fca1 	bl	8002f64 <HAL_GetTick>
 8003622:	4602      	mov	r2, r0
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	1ad3      	subs	r3, r2, r3
 8003628:	2b02      	cmp	r3, #2
 800362a:	d90d      	bls.n	8003648 <ADC_ConversionStop_Disable+0x5c>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003630:	f043 0210 	orr.w	r2, r3, #16
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800363c:	f043 0201 	orr.w	r2, r3, #1
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	62da      	str	r2, [r3, #44]	; 0x2c
        
        return HAL_ERROR;
 8003644:	2301      	movs	r3, #1
 8003646:	e007      	b.n	8003658 <ADC_ConversionStop_Disable+0x6c>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	689b      	ldr	r3, [r3, #8]
 800364e:	f003 0301 	and.w	r3, r3, #1
 8003652:	2b01      	cmp	r3, #1
 8003654:	d0e3      	beq.n	800361e <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8003656:	2300      	movs	r3, #0
}
 8003658:	4618      	mov	r0, r3
 800365a:	3710      	adds	r7, #16
 800365c:	46bd      	mov	sp, r7
 800365e:	bd80      	pop	{r7, pc}

08003660 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8003660:	b580      	push	{r7, lr}
 8003662:	b084      	sub	sp, #16
 8003664:	af00      	add	r7, sp, #0
 8003666:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800366c:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003672:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003676:	2b00      	cmp	r3, #0
 8003678:	d127      	bne.n	80036ca <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800367e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	629a      	str	r2, [r3, #40]	; 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	689b      	ldr	r3, [r3, #8]
 800368c:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8003690:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8003694:	d115      	bne.n	80036c2 <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	68db      	ldr	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800369a:	2b00      	cmp	r3, #0
 800369c:	d111      	bne.n	80036c2 <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036a2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	629a      	str	r2, [r3, #40]	; 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036ae:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d105      	bne.n	80036c2 <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036ba:	f043 0201 	orr.w	r2, r3, #1
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* Conversion complete callback */
    HAL_ADC_ConvCpltCallback(hadc); 
 80036c2:	68f8      	ldr	r0, [r7, #12]
 80036c4:	f7ff fe2c 	bl	8003320 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 80036c8:	e004      	b.n	80036d4 <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	6a1b      	ldr	r3, [r3, #32]
 80036ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036d0:	6878      	ldr	r0, [r7, #4]
 80036d2:	4798      	blx	r3
}
 80036d4:	bf00      	nop
 80036d6:	3710      	adds	r7, #16
 80036d8:	46bd      	mov	sp, r7
 80036da:	bd80      	pop	{r7, pc}

080036dc <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80036dc:	b580      	push	{r7, lr}
 80036de:	b084      	sub	sp, #16
 80036e0:	af00      	add	r7, sp, #0
 80036e2:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036e8:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
  HAL_ADC_ConvHalfCpltCallback(hadc); 
 80036ea:	68f8      	ldr	r0, [r7, #12]
 80036ec:	f7ff fe21 	bl	8003332 <HAL_ADC_ConvHalfCpltCallback>
}
 80036f0:	bf00      	nop
 80036f2:	3710      	adds	r7, #16
 80036f4:	46bd      	mov	sp, r7
 80036f6:	bd80      	pop	{r7, pc}

080036f8 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80036f8:	b580      	push	{r7, lr}
 80036fa:	b084      	sub	sp, #16
 80036fc:	af00      	add	r7, sp, #0
 80036fe:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003704:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800370a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003716:	f043 0204 	orr.w	r2, r3, #4
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Error callback */
  HAL_ADC_ErrorCallback(hadc); 
 800371e:	68f8      	ldr	r0, [r7, #12]
 8003720:	f7ff fe10 	bl	8003344 <HAL_ADC_ErrorCallback>
}
 8003724:	bf00      	nop
 8003726:	3710      	adds	r7, #16
 8003728:	46bd      	mov	sp, r7
 800372a:	bd80      	pop	{r7, pc}

0800372c <NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800372c:	b480      	push	{r7}
 800372e:	b085      	sub	sp, #20
 8003730:	af00      	add	r7, sp, #0
 8003732:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	f003 0307 	and.w	r3, r3, #7
 800373a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800373c:	4b0c      	ldr	r3, [pc, #48]	; (8003770 <NVIC_SetPriorityGrouping+0x44>)
 800373e:	68db      	ldr	r3, [r3, #12]
 8003740:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003742:	68ba      	ldr	r2, [r7, #8]
 8003744:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003748:	4013      	ands	r3, r2
 800374a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003750:	68bb      	ldr	r3, [r7, #8]
 8003752:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003754:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003758:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800375c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800375e:	4a04      	ldr	r2, [pc, #16]	; (8003770 <NVIC_SetPriorityGrouping+0x44>)
 8003760:	68bb      	ldr	r3, [r7, #8]
 8003762:	60d3      	str	r3, [r2, #12]
}
 8003764:	bf00      	nop
 8003766:	3714      	adds	r7, #20
 8003768:	46bd      	mov	sp, r7
 800376a:	bc80      	pop	{r7}
 800376c:	4770      	bx	lr
 800376e:	bf00      	nop
 8003770:	e000ed00 	.word	0xe000ed00

08003774 <NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
 8003774:	b480      	push	{r7}
 8003776:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003778:	4b04      	ldr	r3, [pc, #16]	; (800378c <NVIC_GetPriorityGrouping+0x18>)
 800377a:	68db      	ldr	r3, [r3, #12]
 800377c:	0a1b      	lsrs	r3, r3, #8
 800377e:	f003 0307 	and.w	r3, r3, #7
}
 8003782:	4618      	mov	r0, r3
 8003784:	46bd      	mov	sp, r7
 8003786:	bc80      	pop	{r7}
 8003788:	4770      	bx	lr
 800378a:	bf00      	nop
 800378c:	e000ed00 	.word	0xe000ed00

08003790 <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003790:	b480      	push	{r7}
 8003792:	b083      	sub	sp, #12
 8003794:	af00      	add	r7, sp, #0
 8003796:	4603      	mov	r3, r0
 8003798:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 800379a:	79fb      	ldrb	r3, [r7, #7]
 800379c:	f003 021f 	and.w	r2, r3, #31
 80037a0:	4906      	ldr	r1, [pc, #24]	; (80037bc <NVIC_EnableIRQ+0x2c>)
 80037a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037a6:	095b      	lsrs	r3, r3, #5
 80037a8:	2001      	movs	r0, #1
 80037aa:	fa00 f202 	lsl.w	r2, r0, r2
 80037ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80037b2:	bf00      	nop
 80037b4:	370c      	adds	r7, #12
 80037b6:	46bd      	mov	sp, r7
 80037b8:	bc80      	pop	{r7}
 80037ba:	4770      	bx	lr
 80037bc:	e000e100 	.word	0xe000e100

080037c0 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80037c0:	b480      	push	{r7}
 80037c2:	b083      	sub	sp, #12
 80037c4:	af00      	add	r7, sp, #0
 80037c6:	4603      	mov	r3, r0
 80037c8:	6039      	str	r1, [r7, #0]
 80037ca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 80037cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	da0b      	bge.n	80037ec <NVIC_SetPriority+0x2c>
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80037d4:	683b      	ldr	r3, [r7, #0]
 80037d6:	b2da      	uxtb	r2, r3
 80037d8:	490c      	ldr	r1, [pc, #48]	; (800380c <NVIC_SetPriority+0x4c>)
 80037da:	79fb      	ldrb	r3, [r7, #7]
 80037dc:	f003 030f 	and.w	r3, r3, #15
 80037e0:	3b04      	subs	r3, #4
 80037e2:	0112      	lsls	r2, r2, #4
 80037e4:	b2d2      	uxtb	r2, r2
 80037e6:	440b      	add	r3, r1
 80037e8:	761a      	strb	r2, [r3, #24]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80037ea:	e009      	b.n	8003800 <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80037ec:	683b      	ldr	r3, [r7, #0]
 80037ee:	b2da      	uxtb	r2, r3
 80037f0:	4907      	ldr	r1, [pc, #28]	; (8003810 <NVIC_SetPriority+0x50>)
 80037f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037f6:	0112      	lsls	r2, r2, #4
 80037f8:	b2d2      	uxtb	r2, r2
 80037fa:	440b      	add	r3, r1
 80037fc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8003800:	bf00      	nop
 8003802:	370c      	adds	r7, #12
 8003804:	46bd      	mov	sp, r7
 8003806:	bc80      	pop	{r7}
 8003808:	4770      	bx	lr
 800380a:	bf00      	nop
 800380c:	e000ed00 	.word	0xe000ed00
 8003810:	e000e100 	.word	0xe000e100

08003814 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003814:	b480      	push	{r7}
 8003816:	b089      	sub	sp, #36	; 0x24
 8003818:	af00      	add	r7, sp, #0
 800381a:	60f8      	str	r0, [r7, #12]
 800381c:	60b9      	str	r1, [r7, #8]
 800381e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	f003 0307 	and.w	r3, r3, #7
 8003826:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003828:	69fb      	ldr	r3, [r7, #28]
 800382a:	f1c3 0307 	rsb	r3, r3, #7
 800382e:	2b04      	cmp	r3, #4
 8003830:	bf28      	it	cs
 8003832:	2304      	movcs	r3, #4
 8003834:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003836:	69fb      	ldr	r3, [r7, #28]
 8003838:	3304      	adds	r3, #4
 800383a:	2b06      	cmp	r3, #6
 800383c:	d902      	bls.n	8003844 <NVIC_EncodePriority+0x30>
 800383e:	69fb      	ldr	r3, [r7, #28]
 8003840:	3b03      	subs	r3, #3
 8003842:	e000      	b.n	8003846 <NVIC_EncodePriority+0x32>
 8003844:	2300      	movs	r3, #0
 8003846:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003848:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800384c:	69bb      	ldr	r3, [r7, #24]
 800384e:	fa02 f303 	lsl.w	r3, r2, r3
 8003852:	43da      	mvns	r2, r3
 8003854:	68bb      	ldr	r3, [r7, #8]
 8003856:	401a      	ands	r2, r3
 8003858:	697b      	ldr	r3, [r7, #20]
 800385a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800385c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003860:	697b      	ldr	r3, [r7, #20]
 8003862:	fa01 f303 	lsl.w	r3, r1, r3
 8003866:	43d9      	mvns	r1, r3
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800386c:	4313      	orrs	r3, r2
         );
}
 800386e:	4618      	mov	r0, r3
 8003870:	3724      	adds	r7, #36	; 0x24
 8003872:	46bd      	mov	sp, r7
 8003874:	bc80      	pop	{r7}
 8003876:	4770      	bx	lr

08003878 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003878:	b580      	push	{r7, lr}
 800387a:	b082      	sub	sp, #8
 800387c:	af00      	add	r7, sp, #0
 800387e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	3b01      	subs	r3, #1
 8003884:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003888:	d301      	bcc.n	800388e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800388a:	2301      	movs	r3, #1
 800388c:	e00f      	b.n	80038ae <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800388e:	4a0a      	ldr	r2, [pc, #40]	; (80038b8 <SysTick_Config+0x40>)
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	3b01      	subs	r3, #1
 8003894:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003896:	210f      	movs	r1, #15
 8003898:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800389c:	f7ff ff90 	bl	80037c0 <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80038a0:	4b05      	ldr	r3, [pc, #20]	; (80038b8 <SysTick_Config+0x40>)
 80038a2:	2200      	movs	r2, #0
 80038a4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80038a6:	4b04      	ldr	r3, [pc, #16]	; (80038b8 <SysTick_Config+0x40>)
 80038a8:	2207      	movs	r2, #7
 80038aa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80038ac:	2300      	movs	r3, #0
}
 80038ae:	4618      	mov	r0, r3
 80038b0:	3708      	adds	r7, #8
 80038b2:	46bd      	mov	sp, r7
 80038b4:	bd80      	pop	{r7, pc}
 80038b6:	bf00      	nop
 80038b8:	e000e010 	.word	0xe000e010

080038bc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80038bc:	b580      	push	{r7, lr}
 80038be:	b082      	sub	sp, #8
 80038c0:	af00      	add	r7, sp, #0
 80038c2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80038c4:	6878      	ldr	r0, [r7, #4]
 80038c6:	f7ff ff31 	bl	800372c <NVIC_SetPriorityGrouping>
}
 80038ca:	bf00      	nop
 80038cc:	3708      	adds	r7, #8
 80038ce:	46bd      	mov	sp, r7
 80038d0:	bd80      	pop	{r7, pc}

080038d2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80038d2:	b580      	push	{r7, lr}
 80038d4:	b086      	sub	sp, #24
 80038d6:	af00      	add	r7, sp, #0
 80038d8:	4603      	mov	r3, r0
 80038da:	60b9      	str	r1, [r7, #8]
 80038dc:	607a      	str	r2, [r7, #4]
 80038de:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80038e0:	2300      	movs	r3, #0
 80038e2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80038e4:	f7ff ff46 	bl	8003774 <NVIC_GetPriorityGrouping>
 80038e8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80038ea:	687a      	ldr	r2, [r7, #4]
 80038ec:	68b9      	ldr	r1, [r7, #8]
 80038ee:	6978      	ldr	r0, [r7, #20]
 80038f0:	f7ff ff90 	bl	8003814 <NVIC_EncodePriority>
 80038f4:	4602      	mov	r2, r0
 80038f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80038fa:	4611      	mov	r1, r2
 80038fc:	4618      	mov	r0, r3
 80038fe:	f7ff ff5f 	bl	80037c0 <NVIC_SetPriority>
}
 8003902:	bf00      	nop
 8003904:	3718      	adds	r7, #24
 8003906:	46bd      	mov	sp, r7
 8003908:	bd80      	pop	{r7, pc}

0800390a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800390a:	b580      	push	{r7, lr}
 800390c:	b082      	sub	sp, #8
 800390e:	af00      	add	r7, sp, #0
 8003910:	4603      	mov	r3, r0
 8003912:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003914:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003918:	4618      	mov	r0, r3
 800391a:	f7ff ff39 	bl	8003790 <NVIC_EnableIRQ>
}
 800391e:	bf00      	nop
 8003920:	3708      	adds	r7, #8
 8003922:	46bd      	mov	sp, r7
 8003924:	bd80      	pop	{r7, pc}

08003926 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003926:	b580      	push	{r7, lr}
 8003928:	b082      	sub	sp, #8
 800392a:	af00      	add	r7, sp, #0
 800392c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800392e:	6878      	ldr	r0, [r7, #4]
 8003930:	f7ff ffa2 	bl	8003878 <SysTick_Config>
 8003934:	4603      	mov	r3, r0
}
 8003936:	4618      	mov	r0, r3
 8003938:	3708      	adds	r7, #8
 800393a:	46bd      	mov	sp, r7
 800393c:	bd80      	pop	{r7, pc}
	...

08003940 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8003940:	b480      	push	{r7}
 8003942:	b083      	sub	sp, #12
 8003944:	af00      	add	r7, sp, #0
 8003946:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	2b04      	cmp	r3, #4
 800394c:	d106      	bne.n	800395c <HAL_SYSTICK_CLKSourceConfig+0x1c>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 800394e:	4b09      	ldr	r3, [pc, #36]	; (8003974 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	4a08      	ldr	r2, [pc, #32]	; (8003974 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8003954:	f043 0304 	orr.w	r3, r3, #4
 8003958:	6013      	str	r3, [r2, #0]
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
  }
}
 800395a:	e005      	b.n	8003968 <HAL_SYSTICK_CLKSourceConfig+0x28>
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 800395c:	4b05      	ldr	r3, [pc, #20]	; (8003974 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	4a04      	ldr	r2, [pc, #16]	; (8003974 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8003962:	f023 0304 	bic.w	r3, r3, #4
 8003966:	6013      	str	r3, [r2, #0]
}
 8003968:	bf00      	nop
 800396a:	370c      	adds	r7, #12
 800396c:	46bd      	mov	sp, r7
 800396e:	bc80      	pop	{r7}
 8003970:	4770      	bx	lr
 8003972:	bf00      	nop
 8003974:	e000e010 	.word	0xe000e010

08003978 <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 8003978:	b580      	push	{r7, lr}
 800397a:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 800397c:	f000 f802 	bl	8003984 <HAL_SYSTICK_Callback>
}
 8003980:	bf00      	nop
 8003982:	bd80      	pop	{r7, pc}

08003984 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8003984:	b480      	push	{r7}
 8003986:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 8003988:	bf00      	nop
 800398a:	46bd      	mov	sp, r7
 800398c:	bc80      	pop	{r7}
 800398e:	4770      	bx	lr

08003990 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003990:	b480      	push	{r7}
 8003992:	b085      	sub	sp, #20
 8003994:	af00      	add	r7, sp, #0
 8003996:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003998:	2300      	movs	r3, #0
 800399a:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d101      	bne.n	80039a6 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80039a2:	2301      	movs	r3, #1
 80039a4:	e04f      	b.n	8003a46 <HAL_DMA_Init+0xb6>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	461a      	mov	r2, r3
 80039ac:	4b28      	ldr	r3, [pc, #160]	; (8003a50 <HAL_DMA_Init+0xc0>)
 80039ae:	4413      	add	r3, r2
 80039b0:	4a28      	ldr	r2, [pc, #160]	; (8003a54 <HAL_DMA_Init+0xc4>)
 80039b2:	fba2 2303 	umull	r2, r3, r2, r3
 80039b6:	091b      	lsrs	r3, r3, #4
 80039b8:	009a      	lsls	r2, r3, #2
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	4a25      	ldr	r2, [pc, #148]	; (8003a58 <HAL_DMA_Init+0xc8>)
 80039c2:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* STM32F101xE || STM32F101xG || STM32F103xE || STM32F103xG || STM32F100xE || STM32F105xC || STM32F107xC */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	2202      	movs	r2, #2
 80039c8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80039da:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80039de:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80039e8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	68db      	ldr	r3, [r3, #12]
 80039ee:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80039f4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	695b      	ldr	r3, [r3, #20]
 80039fa:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003a00:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	69db      	ldr	r3, [r3, #28]
 8003a06:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003a08:	68fa      	ldr	r2, [r7, #12]
 8003a0a:	4313      	orrs	r3, r2
 8003a0c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	68fa      	ldr	r2, [r7, #12]
 8003a14:	601a      	str	r2, [r3, #0]


  /* Clean callbacks */
  hdma->XferCpltCallback = NULL;
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	2200      	movs	r2, #0
 8003a1a:	629a      	str	r2, [r3, #40]	; 0x28
  hdma->XferHalfCpltCallback = NULL;
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	2200      	movs	r2, #0
 8003a20:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma->XferErrorCallback = NULL;
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	2200      	movs	r2, #0
 8003a26:	631a      	str	r2, [r3, #48]	; 0x30
  hdma->XferAbortCallback = NULL;
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	2200      	movs	r2, #0
 8003a2c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	2200      	movs	r2, #0
 8003a32:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	2201      	movs	r2, #1
 8003a38:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	2200      	movs	r2, #0
 8003a40:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8003a44:	2300      	movs	r3, #0
}
 8003a46:	4618      	mov	r0, r3
 8003a48:	3714      	adds	r7, #20
 8003a4a:	46bd      	mov	sp, r7
 8003a4c:	bc80      	pop	{r7}
 8003a4e:	4770      	bx	lr
 8003a50:	bffdfff8 	.word	0xbffdfff8
 8003a54:	cccccccd 	.word	0xcccccccd
 8003a58:	40020000 	.word	0x40020000

08003a5c <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003a5c:	b580      	push	{r7, lr}
 8003a5e:	b086      	sub	sp, #24
 8003a60:	af00      	add	r7, sp, #0
 8003a62:	60f8      	str	r0, [r7, #12]
 8003a64:	60b9      	str	r1, [r7, #8]
 8003a66:	607a      	str	r2, [r7, #4]
 8003a68:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003a6a:	2300      	movs	r3, #0
 8003a6c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003a74:	2b01      	cmp	r3, #1
 8003a76:	d101      	bne.n	8003a7c <HAL_DMA_Start_IT+0x20>
 8003a78:	2302      	movs	r3, #2
 8003a7a:	e04a      	b.n	8003b12 <HAL_DMA_Start_IT+0xb6>
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	2201      	movs	r2, #1
 8003a80:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003a8a:	2b01      	cmp	r3, #1
 8003a8c:	d13a      	bne.n	8003b04 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	2202      	movs	r2, #2
 8003a92:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	2200      	movs	r2, #0
 8003a9a:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	681a      	ldr	r2, [r3, #0]
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	f022 0201 	bic.w	r2, r2, #1
 8003aaa:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003aac:	683b      	ldr	r3, [r7, #0]
 8003aae:	687a      	ldr	r2, [r7, #4]
 8003ab0:	68b9      	ldr	r1, [r7, #8]
 8003ab2:	68f8      	ldr	r0, [r7, #12]
 8003ab4:	f000 f9ae 	bl	8003e14 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d008      	beq.n	8003ad2 <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	681a      	ldr	r2, [r3, #0]
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	f042 020e 	orr.w	r2, r2, #14
 8003ace:	601a      	str	r2, [r3, #0]
 8003ad0:	e00f      	b.n	8003af2 <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	681a      	ldr	r2, [r3, #0]
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	f022 0204 	bic.w	r2, r2, #4
 8003ae0:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	681a      	ldr	r2, [r3, #0]
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	f042 020a 	orr.w	r2, r2, #10
 8003af0:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	681a      	ldr	r2, [r3, #0]
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	f042 0201 	orr.w	r2, r2, #1
 8003b00:	601a      	str	r2, [r3, #0]
 8003b02:	e005      	b.n	8003b10 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	2200      	movs	r2, #0
 8003b08:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8003b0c:	2302      	movs	r3, #2
 8003b0e:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8003b10:	7dfb      	ldrb	r3, [r7, #23]
}
 8003b12:	4618      	mov	r0, r3
 8003b14:	3718      	adds	r7, #24
 8003b16:	46bd      	mov	sp, r7
 8003b18:	bd80      	pop	{r7, pc}
	...

08003b1c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8003b1c:	b580      	push	{r7, lr}
 8003b1e:	b084      	sub	sp, #16
 8003b20:	af00      	add	r7, sp, #0
 8003b22:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003b24:	2300      	movs	r3, #0
 8003b26:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003b2e:	2b02      	cmp	r3, #2
 8003b30:	d005      	beq.n	8003b3e <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	2204      	movs	r2, #4
 8003b36:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8003b38:	2301      	movs	r3, #1
 8003b3a:	73fb      	strb	r3, [r7, #15]
 8003b3c:	e051      	b.n	8003be2 <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	681a      	ldr	r2, [r3, #0]
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	f022 020e 	bic.w	r2, r2, #14
 8003b4c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	681a      	ldr	r2, [r3, #0]
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	f022 0201 	bic.w	r2, r2, #1
 8003b5c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	4a22      	ldr	r2, [pc, #136]	; (8003bec <HAL_DMA_Abort_IT+0xd0>)
 8003b64:	4293      	cmp	r3, r2
 8003b66:	d029      	beq.n	8003bbc <HAL_DMA_Abort_IT+0xa0>
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	4a20      	ldr	r2, [pc, #128]	; (8003bf0 <HAL_DMA_Abort_IT+0xd4>)
 8003b6e:	4293      	cmp	r3, r2
 8003b70:	d022      	beq.n	8003bb8 <HAL_DMA_Abort_IT+0x9c>
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	4a1f      	ldr	r2, [pc, #124]	; (8003bf4 <HAL_DMA_Abort_IT+0xd8>)
 8003b78:	4293      	cmp	r3, r2
 8003b7a:	d01a      	beq.n	8003bb2 <HAL_DMA_Abort_IT+0x96>
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	4a1d      	ldr	r2, [pc, #116]	; (8003bf8 <HAL_DMA_Abort_IT+0xdc>)
 8003b82:	4293      	cmp	r3, r2
 8003b84:	d012      	beq.n	8003bac <HAL_DMA_Abort_IT+0x90>
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	4a1c      	ldr	r2, [pc, #112]	; (8003bfc <HAL_DMA_Abort_IT+0xe0>)
 8003b8c:	4293      	cmp	r3, r2
 8003b8e:	d00a      	beq.n	8003ba6 <HAL_DMA_Abort_IT+0x8a>
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	4a1a      	ldr	r2, [pc, #104]	; (8003c00 <HAL_DMA_Abort_IT+0xe4>)
 8003b96:	4293      	cmp	r3, r2
 8003b98:	d102      	bne.n	8003ba0 <HAL_DMA_Abort_IT+0x84>
 8003b9a:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8003b9e:	e00e      	b.n	8003bbe <HAL_DMA_Abort_IT+0xa2>
 8003ba0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003ba4:	e00b      	b.n	8003bbe <HAL_DMA_Abort_IT+0xa2>
 8003ba6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003baa:	e008      	b.n	8003bbe <HAL_DMA_Abort_IT+0xa2>
 8003bac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003bb0:	e005      	b.n	8003bbe <HAL_DMA_Abort_IT+0xa2>
 8003bb2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003bb6:	e002      	b.n	8003bbe <HAL_DMA_Abort_IT+0xa2>
 8003bb8:	2310      	movs	r3, #16
 8003bba:	e000      	b.n	8003bbe <HAL_DMA_Abort_IT+0xa2>
 8003bbc:	2301      	movs	r3, #1
 8003bbe:	4a11      	ldr	r2, [pc, #68]	; (8003c04 <HAL_DMA_Abort_IT+0xe8>)
 8003bc0:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	2201      	movs	r2, #1
 8003bc6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	2200      	movs	r2, #0
 8003bce:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d003      	beq.n	8003be2 <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003bde:	6878      	ldr	r0, [r7, #4]
 8003be0:	4798      	blx	r3
    } 
  }
  return status;
 8003be2:	7bfb      	ldrb	r3, [r7, #15]
}
 8003be4:	4618      	mov	r0, r3
 8003be6:	3710      	adds	r7, #16
 8003be8:	46bd      	mov	sp, r7
 8003bea:	bd80      	pop	{r7, pc}
 8003bec:	40020008 	.word	0x40020008
 8003bf0:	4002001c 	.word	0x4002001c
 8003bf4:	40020030 	.word	0x40020030
 8003bf8:	40020044 	.word	0x40020044
 8003bfc:	40020058 	.word	0x40020058
 8003c00:	4002006c 	.word	0x4002006c
 8003c04:	40020000 	.word	0x40020000

08003c08 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003c08:	b580      	push	{r7, lr}
 8003c0a:	b084      	sub	sp, #16
 8003c0c:	af00      	add	r7, sp, #0
 8003c0e:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c24:	2204      	movs	r2, #4
 8003c26:	409a      	lsls	r2, r3
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	4013      	ands	r3, r2
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d04f      	beq.n	8003cd0 <HAL_DMA_IRQHandler+0xc8>
 8003c30:	68bb      	ldr	r3, [r7, #8]
 8003c32:	f003 0304 	and.w	r3, r3, #4
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d04a      	beq.n	8003cd0 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	f003 0320 	and.w	r3, r3, #32
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d107      	bne.n	8003c58 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	681a      	ldr	r2, [r3, #0]
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	f022 0204 	bic.w	r2, r2, #4
 8003c56:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	4a66      	ldr	r2, [pc, #408]	; (8003df8 <HAL_DMA_IRQHandler+0x1f0>)
 8003c5e:	4293      	cmp	r3, r2
 8003c60:	d029      	beq.n	8003cb6 <HAL_DMA_IRQHandler+0xae>
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	4a65      	ldr	r2, [pc, #404]	; (8003dfc <HAL_DMA_IRQHandler+0x1f4>)
 8003c68:	4293      	cmp	r3, r2
 8003c6a:	d022      	beq.n	8003cb2 <HAL_DMA_IRQHandler+0xaa>
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	4a63      	ldr	r2, [pc, #396]	; (8003e00 <HAL_DMA_IRQHandler+0x1f8>)
 8003c72:	4293      	cmp	r3, r2
 8003c74:	d01a      	beq.n	8003cac <HAL_DMA_IRQHandler+0xa4>
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	4a62      	ldr	r2, [pc, #392]	; (8003e04 <HAL_DMA_IRQHandler+0x1fc>)
 8003c7c:	4293      	cmp	r3, r2
 8003c7e:	d012      	beq.n	8003ca6 <HAL_DMA_IRQHandler+0x9e>
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	4a60      	ldr	r2, [pc, #384]	; (8003e08 <HAL_DMA_IRQHandler+0x200>)
 8003c86:	4293      	cmp	r3, r2
 8003c88:	d00a      	beq.n	8003ca0 <HAL_DMA_IRQHandler+0x98>
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	4a5f      	ldr	r2, [pc, #380]	; (8003e0c <HAL_DMA_IRQHandler+0x204>)
 8003c90:	4293      	cmp	r3, r2
 8003c92:	d102      	bne.n	8003c9a <HAL_DMA_IRQHandler+0x92>
 8003c94:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003c98:	e00e      	b.n	8003cb8 <HAL_DMA_IRQHandler+0xb0>
 8003c9a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8003c9e:	e00b      	b.n	8003cb8 <HAL_DMA_IRQHandler+0xb0>
 8003ca0:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8003ca4:	e008      	b.n	8003cb8 <HAL_DMA_IRQHandler+0xb0>
 8003ca6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003caa:	e005      	b.n	8003cb8 <HAL_DMA_IRQHandler+0xb0>
 8003cac:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003cb0:	e002      	b.n	8003cb8 <HAL_DMA_IRQHandler+0xb0>
 8003cb2:	2340      	movs	r3, #64	; 0x40
 8003cb4:	e000      	b.n	8003cb8 <HAL_DMA_IRQHandler+0xb0>
 8003cb6:	2304      	movs	r3, #4
 8003cb8:	4a55      	ldr	r2, [pc, #340]	; (8003e10 <HAL_DMA_IRQHandler+0x208>)
 8003cba:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	f000 8094 	beq.w	8003dee <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cca:	6878      	ldr	r0, [r7, #4]
 8003ccc:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8003cce:	e08e      	b.n	8003dee <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cd4:	2202      	movs	r2, #2
 8003cd6:	409a      	lsls	r2, r3
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	4013      	ands	r3, r2
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d056      	beq.n	8003d8e <HAL_DMA_IRQHandler+0x186>
 8003ce0:	68bb      	ldr	r3, [r7, #8]
 8003ce2:	f003 0302 	and.w	r3, r3, #2
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d051      	beq.n	8003d8e <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	f003 0320 	and.w	r3, r3, #32
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d10b      	bne.n	8003d10 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	681a      	ldr	r2, [r3, #0]
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	f022 020a 	bic.w	r2, r2, #10
 8003d06:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	2201      	movs	r2, #1
 8003d0c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	4a38      	ldr	r2, [pc, #224]	; (8003df8 <HAL_DMA_IRQHandler+0x1f0>)
 8003d16:	4293      	cmp	r3, r2
 8003d18:	d029      	beq.n	8003d6e <HAL_DMA_IRQHandler+0x166>
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	4a37      	ldr	r2, [pc, #220]	; (8003dfc <HAL_DMA_IRQHandler+0x1f4>)
 8003d20:	4293      	cmp	r3, r2
 8003d22:	d022      	beq.n	8003d6a <HAL_DMA_IRQHandler+0x162>
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	4a35      	ldr	r2, [pc, #212]	; (8003e00 <HAL_DMA_IRQHandler+0x1f8>)
 8003d2a:	4293      	cmp	r3, r2
 8003d2c:	d01a      	beq.n	8003d64 <HAL_DMA_IRQHandler+0x15c>
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	4a34      	ldr	r2, [pc, #208]	; (8003e04 <HAL_DMA_IRQHandler+0x1fc>)
 8003d34:	4293      	cmp	r3, r2
 8003d36:	d012      	beq.n	8003d5e <HAL_DMA_IRQHandler+0x156>
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	4a32      	ldr	r2, [pc, #200]	; (8003e08 <HAL_DMA_IRQHandler+0x200>)
 8003d3e:	4293      	cmp	r3, r2
 8003d40:	d00a      	beq.n	8003d58 <HAL_DMA_IRQHandler+0x150>
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	4a31      	ldr	r2, [pc, #196]	; (8003e0c <HAL_DMA_IRQHandler+0x204>)
 8003d48:	4293      	cmp	r3, r2
 8003d4a:	d102      	bne.n	8003d52 <HAL_DMA_IRQHandler+0x14a>
 8003d4c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8003d50:	e00e      	b.n	8003d70 <HAL_DMA_IRQHandler+0x168>
 8003d52:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003d56:	e00b      	b.n	8003d70 <HAL_DMA_IRQHandler+0x168>
 8003d58:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003d5c:	e008      	b.n	8003d70 <HAL_DMA_IRQHandler+0x168>
 8003d5e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003d62:	e005      	b.n	8003d70 <HAL_DMA_IRQHandler+0x168>
 8003d64:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003d68:	e002      	b.n	8003d70 <HAL_DMA_IRQHandler+0x168>
 8003d6a:	2320      	movs	r3, #32
 8003d6c:	e000      	b.n	8003d70 <HAL_DMA_IRQHandler+0x168>
 8003d6e:	2302      	movs	r3, #2
 8003d70:	4a27      	ldr	r2, [pc, #156]	; (8003e10 <HAL_DMA_IRQHandler+0x208>)
 8003d72:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	2200      	movs	r2, #0
 8003d78:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d034      	beq.n	8003dee <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d88:	6878      	ldr	r0, [r7, #4]
 8003d8a:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8003d8c:	e02f      	b.n	8003dee <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d92:	2208      	movs	r2, #8
 8003d94:	409a      	lsls	r2, r3
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	4013      	ands	r3, r2
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d028      	beq.n	8003df0 <HAL_DMA_IRQHandler+0x1e8>
 8003d9e:	68bb      	ldr	r3, [r7, #8]
 8003da0:	f003 0308 	and.w	r3, r3, #8
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d023      	beq.n	8003df0 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	681a      	ldr	r2, [r3, #0]
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	f022 020e 	bic.w	r2, r2, #14
 8003db6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003dc0:	2101      	movs	r1, #1
 8003dc2:	fa01 f202 	lsl.w	r2, r1, r2
 8003dc6:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	2201      	movs	r2, #1
 8003dcc:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	2201      	movs	r2, #1
 8003dd2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	2200      	movs	r2, #0
 8003dda:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d004      	beq.n	8003df0 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dea:	6878      	ldr	r0, [r7, #4]
 8003dec:	4798      	blx	r3
    }
  }
  return;
 8003dee:	bf00      	nop
 8003df0:	bf00      	nop
}
 8003df2:	3710      	adds	r7, #16
 8003df4:	46bd      	mov	sp, r7
 8003df6:	bd80      	pop	{r7, pc}
 8003df8:	40020008 	.word	0x40020008
 8003dfc:	4002001c 	.word	0x4002001c
 8003e00:	40020030 	.word	0x40020030
 8003e04:	40020044 	.word	0x40020044
 8003e08:	40020058 	.word	0x40020058
 8003e0c:	4002006c 	.word	0x4002006c
 8003e10:	40020000 	.word	0x40020000

08003e14 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003e14:	b480      	push	{r7}
 8003e16:	b085      	sub	sp, #20
 8003e18:	af00      	add	r7, sp, #0
 8003e1a:	60f8      	str	r0, [r7, #12]
 8003e1c:	60b9      	str	r1, [r7, #8]
 8003e1e:	607a      	str	r2, [r7, #4]
 8003e20:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e2a:	2101      	movs	r1, #1
 8003e2c:	fa01 f202 	lsl.w	r2, r1, r2
 8003e30:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	683a      	ldr	r2, [r7, #0]
 8003e38:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	685b      	ldr	r3, [r3, #4]
 8003e3e:	2b10      	cmp	r3, #16
 8003e40:	d108      	bne.n	8003e54 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	687a      	ldr	r2, [r7, #4]
 8003e48:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	68ba      	ldr	r2, [r7, #8]
 8003e50:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003e52:	e007      	b.n	8003e64 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	68ba      	ldr	r2, [r7, #8]
 8003e5a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	687a      	ldr	r2, [r7, #4]
 8003e62:	60da      	str	r2, [r3, #12]
}
 8003e64:	bf00      	nop
 8003e66:	3714      	adds	r7, #20
 8003e68:	46bd      	mov	sp, r7
 8003e6a:	bc80      	pop	{r7}
 8003e6c:	4770      	bx	lr
	...

08003e70 <HAL_FLASH_Program>:
  * @param  Data:         Specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8003e70:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003e72:	b087      	sub	sp, #28
 8003e74:	af00      	add	r7, sp, #0
 8003e76:	60f8      	str	r0, [r7, #12]
 8003e78:	60b9      	str	r1, [r7, #8]
 8003e7a:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8003e7e:	2301      	movs	r3, #1
 8003e80:	75fb      	strb	r3, [r7, #23]
  uint8_t index = 0;
 8003e82:	2300      	movs	r3, #0
 8003e84:	75bb      	strb	r3, [r7, #22]
  uint8_t nbiterations = 0;
 8003e86:	2300      	movs	r3, #0
 8003e88:	757b      	strb	r3, [r7, #21]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8003e8a:	4b2f      	ldr	r3, [pc, #188]	; (8003f48 <HAL_FLASH_Program+0xd8>)
 8003e8c:	7e1b      	ldrb	r3, [r3, #24]
 8003e8e:	2b01      	cmp	r3, #1
 8003e90:	d101      	bne.n	8003e96 <HAL_FLASH_Program+0x26>
 8003e92:	2302      	movs	r3, #2
 8003e94:	e054      	b.n	8003f40 <HAL_FLASH_Program+0xd0>
 8003e96:	4b2c      	ldr	r3, [pc, #176]	; (8003f48 <HAL_FLASH_Program+0xd8>)
 8003e98:	2201      	movs	r2, #1
 8003e9a:	761a      	strb	r2, [r3, #24]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8003e9c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003ea0:	f000 f8a8 	bl	8003ff4 <FLASH_WaitForLastOperation>
 8003ea4:	4603      	mov	r3, r0
 8003ea6:	75fb      	strb	r3, [r7, #23]
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperationBank2(FLASH_TIMEOUT_VALUE);
  }
#endif /* FLASH_BANK2_END */
  
  if(status == HAL_OK)
 8003ea8:	7dfb      	ldrb	r3, [r7, #23]
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d144      	bne.n	8003f38 <HAL_FLASH_Program+0xc8>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	2b01      	cmp	r3, #1
 8003eb2:	d102      	bne.n	8003eba <HAL_FLASH_Program+0x4a>
    {
      /* Program halfword (16-bit) at a specified address. */
      nbiterations = 1U;
 8003eb4:	2301      	movs	r3, #1
 8003eb6:	757b      	strb	r3, [r7, #21]
 8003eb8:	e007      	b.n	8003eca <HAL_FLASH_Program+0x5a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	2b02      	cmp	r3, #2
 8003ebe:	d102      	bne.n	8003ec6 <HAL_FLASH_Program+0x56>
    {
      /* Program word (32-bit = 2*16-bit) at a specified address. */
      nbiterations = 2U;
 8003ec0:	2302      	movs	r3, #2
 8003ec2:	757b      	strb	r3, [r7, #21]
 8003ec4:	e001      	b.n	8003eca <HAL_FLASH_Program+0x5a>
    }
    else
    {
      /* Program double word (64-bit = 4*16-bit) at a specified address. */
      nbiterations = 4U;
 8003ec6:	2304      	movs	r3, #4
 8003ec8:	757b      	strb	r3, [r7, #21]
    }

    for (index = 0U; index < nbiterations; index++)
 8003eca:	2300      	movs	r3, #0
 8003ecc:	75bb      	strb	r3, [r7, #22]
 8003ece:	e02d      	b.n	8003f2c <HAL_FLASH_Program+0xbc>
    {
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 8003ed0:	7dbb      	ldrb	r3, [r7, #22]
 8003ed2:	005a      	lsls	r2, r3, #1
 8003ed4:	68bb      	ldr	r3, [r7, #8]
 8003ed6:	eb02 0c03 	add.w	ip, r2, r3
 8003eda:	7dbb      	ldrb	r3, [r7, #22]
 8003edc:	0119      	lsls	r1, r3, #4
 8003ede:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003ee2:	f1c1 0620 	rsb	r6, r1, #32
 8003ee6:	f1a1 0020 	sub.w	r0, r1, #32
 8003eea:	fa22 f401 	lsr.w	r4, r2, r1
 8003eee:	fa03 f606 	lsl.w	r6, r3, r6
 8003ef2:	4334      	orrs	r4, r6
 8003ef4:	fa23 f000 	lsr.w	r0, r3, r0
 8003ef8:	4304      	orrs	r4, r0
 8003efa:	fa23 f501 	lsr.w	r5, r3, r1
 8003efe:	b2a3      	uxth	r3, r4
 8003f00:	4619      	mov	r1, r3
 8003f02:	4660      	mov	r0, ip
 8003f04:	f000 f85a 	bl	8003fbc <FLASH_Program_HalfWord>
#if defined(FLASH_BANK2_END)
      if(Address <= FLASH_BANK1_END)
      {
#endif /* FLASH_BANK2_END */
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8003f08:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003f0c:	f000 f872 	bl	8003ff4 <FLASH_WaitForLastOperation>
 8003f10:	4603      	mov	r3, r0
 8003f12:	75fb      	strb	r3, [r7, #23]
    
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8003f14:	4b0d      	ldr	r3, [pc, #52]	; (8003f4c <HAL_FLASH_Program+0xdc>)
 8003f16:	691b      	ldr	r3, [r3, #16]
 8003f18:	4a0c      	ldr	r2, [pc, #48]	; (8003f4c <HAL_FLASH_Program+0xdc>)
 8003f1a:	f023 0301 	bic.w	r3, r3, #1
 8003f1e:	6113      	str	r3, [r2, #16]
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR2, FLASH_CR2_PG);
      }
#endif /* FLASH_BANK2_END */
      /* In case of error, stop programation procedure */
      if (status != HAL_OK)
 8003f20:	7dfb      	ldrb	r3, [r7, #23]
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d107      	bne.n	8003f36 <HAL_FLASH_Program+0xc6>
    for (index = 0U; index < nbiterations; index++)
 8003f26:	7dbb      	ldrb	r3, [r7, #22]
 8003f28:	3301      	adds	r3, #1
 8003f2a:	75bb      	strb	r3, [r7, #22]
 8003f2c:	7dba      	ldrb	r2, [r7, #22]
 8003f2e:	7d7b      	ldrb	r3, [r7, #21]
 8003f30:	429a      	cmp	r2, r3
 8003f32:	d3cd      	bcc.n	8003ed0 <HAL_FLASH_Program+0x60>
 8003f34:	e000      	b.n	8003f38 <HAL_FLASH_Program+0xc8>
      {
        break;
 8003f36:	bf00      	nop
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8003f38:	4b03      	ldr	r3, [pc, #12]	; (8003f48 <HAL_FLASH_Program+0xd8>)
 8003f3a:	2200      	movs	r2, #0
 8003f3c:	761a      	strb	r2, [r3, #24]

  return status;
 8003f3e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003f40:	4618      	mov	r0, r3
 8003f42:	371c      	adds	r7, #28
 8003f44:	46bd      	mov	sp, r7
 8003f46:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003f48:	20000a30 	.word	0x20000a30
 8003f4c:	40022000 	.word	0x40022000

08003f50 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8003f50:	b480      	push	{r7}
 8003f52:	af00      	add	r7, sp, #0
  if (HAL_IS_BIT_SET(FLASH->CR, FLASH_CR_LOCK))
 8003f54:	4b09      	ldr	r3, [pc, #36]	; (8003f7c <HAL_FLASH_Unlock+0x2c>)
 8003f56:	691b      	ldr	r3, [r3, #16]
 8003f58:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d007      	beq.n	8003f70 <HAL_FLASH_Unlock+0x20>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8003f60:	4b06      	ldr	r3, [pc, #24]	; (8003f7c <HAL_FLASH_Unlock+0x2c>)
 8003f62:	4a07      	ldr	r2, [pc, #28]	; (8003f80 <HAL_FLASH_Unlock+0x30>)
 8003f64:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8003f66:	4b05      	ldr	r3, [pc, #20]	; (8003f7c <HAL_FLASH_Unlock+0x2c>)
 8003f68:	4a06      	ldr	r2, [pc, #24]	; (8003f84 <HAL_FLASH_Unlock+0x34>)
 8003f6a:	605a      	str	r2, [r3, #4]
  {
    return HAL_ERROR;
  }
  
#endif /* FLASH_BANK2_END */
  return HAL_OK; 
 8003f6c:	2300      	movs	r3, #0
 8003f6e:	e000      	b.n	8003f72 <HAL_FLASH_Unlock+0x22>
    return HAL_ERROR;
 8003f70:	2301      	movs	r3, #1
}
 8003f72:	4618      	mov	r0, r3
 8003f74:	46bd      	mov	sp, r7
 8003f76:	bc80      	pop	{r7}
 8003f78:	4770      	bx	lr
 8003f7a:	bf00      	nop
 8003f7c:	40022000 	.word	0x40022000
 8003f80:	45670123 	.word	0x45670123
 8003f84:	cdef89ab 	.word	0xcdef89ab

08003f88 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8003f88:	b480      	push	{r7}
 8003f8a:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8003f8c:	4b05      	ldr	r3, [pc, #20]	; (8003fa4 <HAL_FLASH_Lock+0x1c>)
 8003f8e:	691b      	ldr	r3, [r3, #16]
 8003f90:	4a04      	ldr	r2, [pc, #16]	; (8003fa4 <HAL_FLASH_Lock+0x1c>)
 8003f92:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003f96:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  /* Set the LOCK Bit to lock the FLASH BANK2 Registers access */
  SET_BIT(FLASH->CR2, FLASH_CR2_LOCK);

#endif /* FLASH_BANK2_END */
  return HAL_OK;  
 8003f98:	2300      	movs	r3, #0
}
 8003f9a:	4618      	mov	r0, r3
 8003f9c:	46bd      	mov	sp, r7
 8003f9e:	bc80      	pop	{r7}
 8003fa0:	4770      	bx	lr
 8003fa2:	bf00      	nop
 8003fa4:	40022000 	.word	0x40022000

08003fa8 <HAL_FLASH_GetError>:
  * @brief  Get the specific FLASH error flag.
  * @retval FLASH_ErrorCode The returned value can be:
  *            @ref FLASH_Error_Codes
  */
uint32_t HAL_FLASH_GetError(void)
{
 8003fa8:	b480      	push	{r7}
 8003faa:	af00      	add	r7, sp, #0
   return pFlash.ErrorCode;
 8003fac:	4b02      	ldr	r3, [pc, #8]	; (8003fb8 <HAL_FLASH_GetError+0x10>)
 8003fae:	69db      	ldr	r3, [r3, #28]
}
 8003fb0:	4618      	mov	r0, r3
 8003fb2:	46bd      	mov	sp, r7
 8003fb4:	bc80      	pop	{r7}
 8003fb6:	4770      	bx	lr
 8003fb8:	20000a30 	.word	0x20000a30

08003fbc <FLASH_Program_HalfWord>:
  * @param  Address specify the address to be programmed.
  * @param  Data    specify the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8003fbc:	b480      	push	{r7}
 8003fbe:	b083      	sub	sp, #12
 8003fc0:	af00      	add	r7, sp, #0
 8003fc2:	6078      	str	r0, [r7, #4]
 8003fc4:	460b      	mov	r3, r1
 8003fc6:	807b      	strh	r3, [r7, #2]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8003fc8:	4b08      	ldr	r3, [pc, #32]	; (8003fec <FLASH_Program_HalfWord+0x30>)
 8003fca:	2200      	movs	r2, #0
 8003fcc:	61da      	str	r2, [r3, #28]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to program the new data */
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 8003fce:	4b08      	ldr	r3, [pc, #32]	; (8003ff0 <FLASH_Program_HalfWord+0x34>)
 8003fd0:	691b      	ldr	r3, [r3, #16]
 8003fd2:	4a07      	ldr	r2, [pc, #28]	; (8003ff0 <FLASH_Program_HalfWord+0x34>)
 8003fd4:	f043 0301 	orr.w	r3, r3, #1
 8003fd8:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR2, FLASH_CR2_PG);
  }
#endif /* FLASH_BANK2_END */

  /* Write data in the address */
  *(__IO uint16_t*)Address = Data;
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	887a      	ldrh	r2, [r7, #2]
 8003fde:	801a      	strh	r2, [r3, #0]
}
 8003fe0:	bf00      	nop
 8003fe2:	370c      	adds	r7, #12
 8003fe4:	46bd      	mov	sp, r7
 8003fe6:	bc80      	pop	{r7}
 8003fe8:	4770      	bx	lr
 8003fea:	bf00      	nop
 8003fec:	20000a30 	.word	0x20000a30
 8003ff0:	40022000 	.word	0x40022000

08003ff4 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8003ff4:	b580      	push	{r7, lr}
 8003ff6:	b084      	sub	sp, #16
 8003ff8:	af00      	add	r7, sp, #0
 8003ffa:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 8003ffc:	f7fe ffb2 	bl	8002f64 <HAL_GetTick>
 8004000:	60f8      	str	r0, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8004002:	e010      	b.n	8004026 <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800400a:	d00c      	beq.n	8004026 <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	2b00      	cmp	r3, #0
 8004010:	d007      	beq.n	8004022 <FLASH_WaitForLastOperation+0x2e>
 8004012:	f7fe ffa7 	bl	8002f64 <HAL_GetTick>
 8004016:	4602      	mov	r2, r0
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	1ad3      	subs	r3, r2, r3
 800401c:	687a      	ldr	r2, [r7, #4]
 800401e:	429a      	cmp	r2, r3
 8004020:	d201      	bcs.n	8004026 <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 8004022:	2303      	movs	r3, #3
 8004024:	e025      	b.n	8004072 <FLASH_WaitForLastOperation+0x7e>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8004026:	4b15      	ldr	r3, [pc, #84]	; (800407c <FLASH_WaitForLastOperation+0x88>)
 8004028:	68db      	ldr	r3, [r3, #12]
 800402a:	f003 0301 	and.w	r3, r3, #1
 800402e:	2b00      	cmp	r3, #0
 8004030:	d1e8      	bne.n	8004004 <FLASH_WaitForLastOperation+0x10>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8004032:	4b12      	ldr	r3, [pc, #72]	; (800407c <FLASH_WaitForLastOperation+0x88>)
 8004034:	68db      	ldr	r3, [r3, #12]
 8004036:	f003 0320 	and.w	r3, r3, #32
 800403a:	2b00      	cmp	r3, #0
 800403c:	d002      	beq.n	8004044 <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 800403e:	4b0f      	ldr	r3, [pc, #60]	; (800407c <FLASH_WaitForLastOperation+0x88>)
 8004040:	2220      	movs	r2, #32
 8004042:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8004044:	4b0d      	ldr	r3, [pc, #52]	; (800407c <FLASH_WaitForLastOperation+0x88>)
 8004046:	68db      	ldr	r3, [r3, #12]
 8004048:	f003 0310 	and.w	r3, r3, #16
 800404c:	2b00      	cmp	r3, #0
 800404e:	d10b      	bne.n	8004068 <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8004050:	4b0a      	ldr	r3, [pc, #40]	; (800407c <FLASH_WaitForLastOperation+0x88>)
 8004052:	69db      	ldr	r3, [r3, #28]
 8004054:	f003 0301 	and.w	r3, r3, #1
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8004058:	2b00      	cmp	r3, #0
 800405a:	d105      	bne.n	8004068 <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 800405c:	4b07      	ldr	r3, [pc, #28]	; (800407c <FLASH_WaitForLastOperation+0x88>)
 800405e:	68db      	ldr	r3, [r3, #12]
 8004060:	f003 0304 	and.w	r3, r3, #4
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8004064:	2b00      	cmp	r3, #0
 8004066:	d003      	beq.n	8004070 <FLASH_WaitForLastOperation+0x7c>
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8004068:	f000 f80a 	bl	8004080 <FLASH_SetErrorCode>
    return HAL_ERROR;
 800406c:	2301      	movs	r3, #1
 800406e:	e000      	b.n	8004072 <FLASH_WaitForLastOperation+0x7e>
  }

  /* There is no error flag set */
  return HAL_OK;
 8004070:	2300      	movs	r3, #0
}
 8004072:	4618      	mov	r0, r3
 8004074:	3710      	adds	r7, #16
 8004076:	46bd      	mov	sp, r7
 8004078:	bd80      	pop	{r7, pc}
 800407a:	bf00      	nop
 800407c:	40022000 	.word	0x40022000

08004080 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 8004080:	b480      	push	{r7}
 8004082:	b083      	sub	sp, #12
 8004084:	af00      	add	r7, sp, #0
  uint32_t flags = 0U;
 8004086:	2300      	movs	r3, #0
 8004088:	607b      	str	r3, [r7, #4]
  
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 800408a:	4b23      	ldr	r3, [pc, #140]	; (8004118 <FLASH_SetErrorCode+0x98>)
 800408c:	68db      	ldr	r3, [r3, #12]
 800408e:	f003 0310 	and.w	r3, r3, #16
 8004092:	2b00      	cmp	r3, #0
 8004094:	d009      	beq.n	80040aa <FLASH_SetErrorCode+0x2a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8004096:	4b21      	ldr	r3, [pc, #132]	; (800411c <FLASH_SetErrorCode+0x9c>)
 8004098:	69db      	ldr	r3, [r3, #28]
 800409a:	f043 0302 	orr.w	r3, r3, #2
 800409e:	4a1f      	ldr	r2, [pc, #124]	; (800411c <FLASH_SetErrorCode+0x9c>)
 80040a0:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_WRPERR | FLASH_FLAG_WRPERR_BANK2;
#else
    flags |= FLASH_FLAG_WRPERR;
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	f043 0310 	orr.w	r3, r3, #16
 80040a8:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 80040aa:	4b1b      	ldr	r3, [pc, #108]	; (8004118 <FLASH_SetErrorCode+0x98>)
 80040ac:	68db      	ldr	r3, [r3, #12]
 80040ae:	f003 0304 	and.w	r3, r3, #4
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d009      	beq.n	80040ca <FLASH_SetErrorCode+0x4a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 80040b6:	4b19      	ldr	r3, [pc, #100]	; (800411c <FLASH_SetErrorCode+0x9c>)
 80040b8:	69db      	ldr	r3, [r3, #28]
 80040ba:	f043 0301 	orr.w	r3, r3, #1
 80040be:	4a17      	ldr	r2, [pc, #92]	; (800411c <FLASH_SetErrorCode+0x9c>)
 80040c0:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_PGERR | FLASH_FLAG_PGERR_BANK2;
#else
    flags |= FLASH_FLAG_PGERR;
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	f043 0304 	orr.w	r3, r3, #4
 80040c8:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 80040ca:	4b13      	ldr	r3, [pc, #76]	; (8004118 <FLASH_SetErrorCode+0x98>)
 80040cc:	69db      	ldr	r3, [r3, #28]
 80040ce:	f003 0301 	and.w	r3, r3, #1
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d00b      	beq.n	80040ee <FLASH_SetErrorCode+0x6e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 80040d6:	4b11      	ldr	r3, [pc, #68]	; (800411c <FLASH_SetErrorCode+0x9c>)
 80040d8:	69db      	ldr	r3, [r3, #28]
 80040da:	f043 0304 	orr.w	r3, r3, #4
 80040de:	4a0f      	ldr	r2, [pc, #60]	; (800411c <FLASH_SetErrorCode+0x9c>)
 80040e0:	61d3      	str	r3, [r2, #28]
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 80040e2:	4b0d      	ldr	r3, [pc, #52]	; (8004118 <FLASH_SetErrorCode+0x98>)
 80040e4:	69db      	ldr	r3, [r3, #28]
 80040e6:	4a0c      	ldr	r2, [pc, #48]	; (8004118 <FLASH_SetErrorCode+0x98>)
 80040e8:	f023 0301 	bic.w	r3, r3, #1
 80040ec:	61d3      	str	r3, [r2, #28]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	f240 1201 	movw	r2, #257	; 0x101
 80040f4:	4293      	cmp	r3, r2
 80040f6:	d106      	bne.n	8004106 <FLASH_SetErrorCode+0x86>
 80040f8:	4b07      	ldr	r3, [pc, #28]	; (8004118 <FLASH_SetErrorCode+0x98>)
 80040fa:	69db      	ldr	r3, [r3, #28]
 80040fc:	4a06      	ldr	r2, [pc, #24]	; (8004118 <FLASH_SetErrorCode+0x98>)
 80040fe:	f023 0301 	bic.w	r3, r3, #1
 8004102:	61d3      	str	r3, [r2, #28]
}  
 8004104:	e002      	b.n	800410c <FLASH_SetErrorCode+0x8c>
  __HAL_FLASH_CLEAR_FLAG(flags);
 8004106:	4a04      	ldr	r2, [pc, #16]	; (8004118 <FLASH_SetErrorCode+0x98>)
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	60d3      	str	r3, [r2, #12]
}  
 800410c:	bf00      	nop
 800410e:	370c      	adds	r7, #12
 8004110:	46bd      	mov	sp, r7
 8004112:	bc80      	pop	{r7}
 8004114:	4770      	bx	lr
 8004116:	bf00      	nop
 8004118:	40022000 	.word	0x40022000
 800411c:	20000a30 	.word	0x20000a30

08004120 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFF means that all the pages have been correctly erased)
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 8004120:	b580      	push	{r7, lr}
 8004122:	b084      	sub	sp, #16
 8004124:	af00      	add	r7, sp, #0
 8004126:	6078      	str	r0, [r7, #4]
 8004128:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 800412a:	2301      	movs	r3, #1
 800412c:	73fb      	strb	r3, [r7, #15]
  uint32_t address = 0U;
 800412e:	2300      	movs	r3, #0
 8004130:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8004132:	4b2f      	ldr	r3, [pc, #188]	; (80041f0 <HAL_FLASHEx_Erase+0xd0>)
 8004134:	7e1b      	ldrb	r3, [r3, #24]
 8004136:	2b01      	cmp	r3, #1
 8004138:	d101      	bne.n	800413e <HAL_FLASHEx_Erase+0x1e>
 800413a:	2302      	movs	r3, #2
 800413c:	e053      	b.n	80041e6 <HAL_FLASHEx_Erase+0xc6>
 800413e:	4b2c      	ldr	r3, [pc, #176]	; (80041f0 <HAL_FLASHEx_Erase+0xd0>)
 8004140:	2201      	movs	r2, #1
 8004142:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	2b02      	cmp	r3, #2
 800414a:	d116      	bne.n	800417a <HAL_FLASHEx_Erase+0x5a>
    else 
#endif /* FLASH_BANK2_END */
    {
      /* Mass Erase requested for Bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 800414c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8004150:	f7ff ff50 	bl	8003ff4 <FLASH_WaitForLastOperation>
 8004154:	4603      	mov	r3, r0
 8004156:	2b00      	cmp	r3, #0
 8004158:	d141      	bne.n	80041de <HAL_FLASHEx_Erase+0xbe>
      {
        /*Mass erase to be done*/
        FLASH_MassErase(FLASH_BANK_1);
 800415a:	2001      	movs	r0, #1
 800415c:	f000 f84c 	bl	80041f8 <FLASH_MassErase>
        
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8004160:	f24c 3050 	movw	r0, #50000	; 0xc350
 8004164:	f7ff ff46 	bl	8003ff4 <FLASH_WaitForLastOperation>
 8004168:	4603      	mov	r3, r0
 800416a:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the MER Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 800416c:	4b21      	ldr	r3, [pc, #132]	; (80041f4 <HAL_FLASHEx_Erase+0xd4>)
 800416e:	691b      	ldr	r3, [r3, #16]
 8004170:	4a20      	ldr	r2, [pc, #128]	; (80041f4 <HAL_FLASHEx_Erase+0xd4>)
 8004172:	f023 0304 	bic.w	r3, r3, #4
 8004176:	6113      	str	r3, [r2, #16]
 8004178:	e031      	b.n	80041de <HAL_FLASHEx_Erase+0xbe>
    else
#endif /* FLASH_BANK2_END */
   {
      /* Page Erase requested on address located on bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 800417a:	f24c 3050 	movw	r0, #50000	; 0xc350
 800417e:	f7ff ff39 	bl	8003ff4 <FLASH_WaitForLastOperation>
 8004182:	4603      	mov	r3, r0
 8004184:	2b00      	cmp	r3, #0
 8004186:	d12a      	bne.n	80041de <HAL_FLASHEx_Erase+0xbe>
      {
        /*Initialization of PageError variable*/
        *PageError = 0xFFFFFFFFU;
 8004188:	683b      	ldr	r3, [r7, #0]
 800418a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800418e:	601a      	str	r2, [r3, #0]
        
        /* Erase page by page to be done*/
        for(address = pEraseInit->PageAddress;
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	689b      	ldr	r3, [r3, #8]
 8004194:	60bb      	str	r3, [r7, #8]
 8004196:	e019      	b.n	80041cc <HAL_FLASHEx_Erase+0xac>
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
            address += FLASH_PAGE_SIZE)
        {
          FLASH_PageErase(address);
 8004198:	68b8      	ldr	r0, [r7, #8]
 800419a:	f000 f849 	bl	8004230 <FLASH_PageErase>
          
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800419e:	f24c 3050 	movw	r0, #50000	; 0xc350
 80041a2:	f7ff ff27 	bl	8003ff4 <FLASH_WaitForLastOperation>
 80041a6:	4603      	mov	r3, r0
 80041a8:	73fb      	strb	r3, [r7, #15]
          
          /* If the erase operation is completed, disable the PER Bit */
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 80041aa:	4b12      	ldr	r3, [pc, #72]	; (80041f4 <HAL_FLASHEx_Erase+0xd4>)
 80041ac:	691b      	ldr	r3, [r3, #16]
 80041ae:	4a11      	ldr	r2, [pc, #68]	; (80041f4 <HAL_FLASHEx_Erase+0xd4>)
 80041b0:	f023 0302 	bic.w	r3, r3, #2
 80041b4:	6113      	str	r3, [r2, #16]
          
          if (status != HAL_OK)
 80041b6:	7bfb      	ldrb	r3, [r7, #15]
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d003      	beq.n	80041c4 <HAL_FLASHEx_Erase+0xa4>
          {
            /* In case of error, stop erase procedure and return the faulty address */
            *PageError = address;
 80041bc:	683b      	ldr	r3, [r7, #0]
 80041be:	68ba      	ldr	r2, [r7, #8]
 80041c0:	601a      	str	r2, [r3, #0]
            break;
 80041c2:	e00c      	b.n	80041de <HAL_FLASHEx_Erase+0xbe>
            address += FLASH_PAGE_SIZE)
 80041c4:	68bb      	ldr	r3, [r7, #8]
 80041c6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80041ca:	60bb      	str	r3, [r7, #8]
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	68db      	ldr	r3, [r3, #12]
 80041d0:	029a      	lsls	r2, r3, #10
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	689b      	ldr	r3, [r3, #8]
 80041d6:	4413      	add	r3, r2
        for(address = pEraseInit->PageAddress;
 80041d8:	68ba      	ldr	r2, [r7, #8]
 80041da:	429a      	cmp	r2, r3
 80041dc:	d3dc      	bcc.n	8004198 <HAL_FLASHEx_Erase+0x78>
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80041de:	4b04      	ldr	r3, [pc, #16]	; (80041f0 <HAL_FLASHEx_Erase+0xd0>)
 80041e0:	2200      	movs	r2, #0
 80041e2:	761a      	strb	r2, [r3, #24]

  return status;
 80041e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80041e6:	4618      	mov	r0, r3
 80041e8:	3710      	adds	r7, #16
 80041ea:	46bd      	mov	sp, r7
 80041ec:	bd80      	pop	{r7, pc}
 80041ee:	bf00      	nop
 80041f0:	20000a30 	.word	0x20000a30
 80041f4:	40022000 	.word	0x40022000

080041f8 <FLASH_MassErase>:
  @endif
  *
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 80041f8:	b480      	push	{r7}
 80041fa:	b083      	sub	sp, #12
 80041fc:	af00      	add	r7, sp, #0
 80041fe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_FLASH_BANK(Banks));

  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8004200:	4b09      	ldr	r3, [pc, #36]	; (8004228 <FLASH_MassErase+0x30>)
 8004202:	2200      	movs	r2, #0
 8004204:	61da      	str	r2, [r3, #28]
#if !defined(FLASH_BANK2_END)
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif /* FLASH_BANK2_END */  
    /* Only bank1 will be erased*/
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 8004206:	4b09      	ldr	r3, [pc, #36]	; (800422c <FLASH_MassErase+0x34>)
 8004208:	691b      	ldr	r3, [r3, #16]
 800420a:	4a08      	ldr	r2, [pc, #32]	; (800422c <FLASH_MassErase+0x34>)
 800420c:	f043 0304 	orr.w	r3, r3, #4
 8004210:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8004212:	4b06      	ldr	r3, [pc, #24]	; (800422c <FLASH_MassErase+0x34>)
 8004214:	691b      	ldr	r3, [r3, #16]
 8004216:	4a05      	ldr	r2, [pc, #20]	; (800422c <FLASH_MassErase+0x34>)
 8004218:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800421c:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 800421e:	bf00      	nop
 8004220:	370c      	adds	r7, #12
 8004222:	46bd      	mov	sp, r7
 8004224:	bc80      	pop	{r7}
 8004226:	4770      	bx	lr
 8004228:	20000a30 	.word	0x20000a30
 800422c:	40022000 	.word	0x40022000

08004230 <FLASH_PageErase>:
  *         The value of this parameter depend on device used within the same series      
  * 
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
 8004230:	b480      	push	{r7}
 8004232:	b083      	sub	sp, #12
 8004234:	af00      	add	r7, sp, #0
 8004236:	6078      	str	r0, [r7, #4]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8004238:	4b0b      	ldr	r3, [pc, #44]	; (8004268 <FLASH_PageErase+0x38>)
 800423a:	2200      	movs	r2, #0
 800423c:	61da      	str	r2, [r3, #28]
  }
  else
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 800423e:	4b0b      	ldr	r3, [pc, #44]	; (800426c <FLASH_PageErase+0x3c>)
 8004240:	691b      	ldr	r3, [r3, #16]
 8004242:	4a0a      	ldr	r2, [pc, #40]	; (800426c <FLASH_PageErase+0x3c>)
 8004244:	f043 0302 	orr.w	r3, r3, #2
 8004248:	6113      	str	r3, [r2, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 800424a:	4a08      	ldr	r2, [pc, #32]	; (800426c <FLASH_PageErase+0x3c>)
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8004250:	4b06      	ldr	r3, [pc, #24]	; (800426c <FLASH_PageErase+0x3c>)
 8004252:	691b      	ldr	r3, [r3, #16]
 8004254:	4a05      	ldr	r2, [pc, #20]	; (800426c <FLASH_PageErase+0x3c>)
 8004256:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800425a:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 800425c:	bf00      	nop
 800425e:	370c      	adds	r7, #12
 8004260:	46bd      	mov	sp, r7
 8004262:	bc80      	pop	{r7}
 8004264:	4770      	bx	lr
 8004266:	bf00      	nop
 8004268:	20000a30 	.word	0x20000a30
 800426c:	40022000 	.word	0x40022000

08004270 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004270:	b480      	push	{r7}
 8004272:	b08b      	sub	sp, #44	; 0x2c
 8004274:	af00      	add	r7, sp, #0
 8004276:	6078      	str	r0, [r7, #4]
 8004278:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800427a:	2300      	movs	r3, #0
 800427c:	61fb      	str	r3, [r7, #28]
  uint32_t iocurrent = 0x00U;
 800427e:	2300      	movs	r3, #0
 8004280:	61bb      	str	r3, [r7, #24]
  uint32_t temp = 0x00U;
 8004282:	2300      	movs	r3, #0
 8004284:	617b      	str	r3, [r7, #20]
  uint32_t config = 0x00U;
 8004286:	2300      	movs	r3, #0
 8004288:	623b      	str	r3, [r7, #32]
  __IO uint32_t *configregister; /* Store the address of CRL or CRH register based on pin number */
  uint32_t registeroffset = 0U; /* offset used during computation of CNF and MODE bits placement inside CRL or CRH register */
 800428a:	2300      	movs	r3, #0
 800428c:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0U; position < GPIO_NUMBER; position++)
 800428e:	2300      	movs	r3, #0
 8004290:	627b      	str	r3, [r7, #36]	; 0x24
 8004292:	e127      	b.n	80044e4 <HAL_GPIO_Init+0x274>
  {
    /* Get the IO position */
    ioposition = (0x01U << position);
 8004294:	2201      	movs	r2, #1
 8004296:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004298:	fa02 f303 	lsl.w	r3, r2, r3
 800429c:	61fb      	str	r3, [r7, #28]
    
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800429e:	683b      	ldr	r3, [r7, #0]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	69fa      	ldr	r2, [r7, #28]
 80042a4:	4013      	ands	r3, r2
 80042a6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80042a8:	69ba      	ldr	r2, [r7, #24]
 80042aa:	69fb      	ldr	r3, [r7, #28]
 80042ac:	429a      	cmp	r2, r3
 80042ae:	f040 8116 	bne.w	80044de <HAL_GPIO_Init+0x26e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80042b2:	683b      	ldr	r3, [r7, #0]
 80042b4:	685b      	ldr	r3, [r3, #4]
 80042b6:	2b12      	cmp	r3, #18
 80042b8:	d034      	beq.n	8004324 <HAL_GPIO_Init+0xb4>
 80042ba:	2b12      	cmp	r3, #18
 80042bc:	d80d      	bhi.n	80042da <HAL_GPIO_Init+0x6a>
 80042be:	2b02      	cmp	r3, #2
 80042c0:	d02b      	beq.n	800431a <HAL_GPIO_Init+0xaa>
 80042c2:	2b02      	cmp	r3, #2
 80042c4:	d804      	bhi.n	80042d0 <HAL_GPIO_Init+0x60>
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d031      	beq.n	800432e <HAL_GPIO_Init+0xbe>
 80042ca:	2b01      	cmp	r3, #1
 80042cc:	d01c      	beq.n	8004308 <HAL_GPIO_Init+0x98>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;
        
        /* Parameters are checked with assert_param */
        default:
          break;
 80042ce:	e048      	b.n	8004362 <HAL_GPIO_Init+0xf2>
      switch (GPIO_Init->Mode)
 80042d0:	2b03      	cmp	r3, #3
 80042d2:	d043      	beq.n	800435c <HAL_GPIO_Init+0xec>
 80042d4:	2b11      	cmp	r3, #17
 80042d6:	d01b      	beq.n	8004310 <HAL_GPIO_Init+0xa0>
          break;
 80042d8:	e043      	b.n	8004362 <HAL_GPIO_Init+0xf2>
      switch (GPIO_Init->Mode)
 80042da:	4a87      	ldr	r2, [pc, #540]	; (80044f8 <HAL_GPIO_Init+0x288>)
 80042dc:	4293      	cmp	r3, r2
 80042de:	d026      	beq.n	800432e <HAL_GPIO_Init+0xbe>
 80042e0:	4a85      	ldr	r2, [pc, #532]	; (80044f8 <HAL_GPIO_Init+0x288>)
 80042e2:	4293      	cmp	r3, r2
 80042e4:	d806      	bhi.n	80042f4 <HAL_GPIO_Init+0x84>
 80042e6:	4a85      	ldr	r2, [pc, #532]	; (80044fc <HAL_GPIO_Init+0x28c>)
 80042e8:	4293      	cmp	r3, r2
 80042ea:	d020      	beq.n	800432e <HAL_GPIO_Init+0xbe>
 80042ec:	4a84      	ldr	r2, [pc, #528]	; (8004500 <HAL_GPIO_Init+0x290>)
 80042ee:	4293      	cmp	r3, r2
 80042f0:	d01d      	beq.n	800432e <HAL_GPIO_Init+0xbe>
          break;
 80042f2:	e036      	b.n	8004362 <HAL_GPIO_Init+0xf2>
      switch (GPIO_Init->Mode)
 80042f4:	4a83      	ldr	r2, [pc, #524]	; (8004504 <HAL_GPIO_Init+0x294>)
 80042f6:	4293      	cmp	r3, r2
 80042f8:	d019      	beq.n	800432e <HAL_GPIO_Init+0xbe>
 80042fa:	4a83      	ldr	r2, [pc, #524]	; (8004508 <HAL_GPIO_Init+0x298>)
 80042fc:	4293      	cmp	r3, r2
 80042fe:	d016      	beq.n	800432e <HAL_GPIO_Init+0xbe>
 8004300:	4a82      	ldr	r2, [pc, #520]	; (800450c <HAL_GPIO_Init+0x29c>)
 8004302:	4293      	cmp	r3, r2
 8004304:	d013      	beq.n	800432e <HAL_GPIO_Init+0xbe>
          break;
 8004306:	e02c      	b.n	8004362 <HAL_GPIO_Init+0xf2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8004308:	683b      	ldr	r3, [r7, #0]
 800430a:	68db      	ldr	r3, [r3, #12]
 800430c:	623b      	str	r3, [r7, #32]
          break;
 800430e:	e028      	b.n	8004362 <HAL_GPIO_Init+0xf2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8004310:	683b      	ldr	r3, [r7, #0]
 8004312:	68db      	ldr	r3, [r3, #12]
 8004314:	3304      	adds	r3, #4
 8004316:	623b      	str	r3, [r7, #32]
          break;
 8004318:	e023      	b.n	8004362 <HAL_GPIO_Init+0xf2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800431a:	683b      	ldr	r3, [r7, #0]
 800431c:	68db      	ldr	r3, [r3, #12]
 800431e:	3308      	adds	r3, #8
 8004320:	623b      	str	r3, [r7, #32]
          break;
 8004322:	e01e      	b.n	8004362 <HAL_GPIO_Init+0xf2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8004324:	683b      	ldr	r3, [r7, #0]
 8004326:	68db      	ldr	r3, [r3, #12]
 8004328:	330c      	adds	r3, #12
 800432a:	623b      	str	r3, [r7, #32]
          break;
 800432c:	e019      	b.n	8004362 <HAL_GPIO_Init+0xf2>
          if(GPIO_Init->Pull == GPIO_NOPULL)
 800432e:	683b      	ldr	r3, [r7, #0]
 8004330:	689b      	ldr	r3, [r3, #8]
 8004332:	2b00      	cmp	r3, #0
 8004334:	d102      	bne.n	800433c <HAL_GPIO_Init+0xcc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8004336:	2304      	movs	r3, #4
 8004338:	623b      	str	r3, [r7, #32]
          break; 
 800433a:	e012      	b.n	8004362 <HAL_GPIO_Init+0xf2>
          else if(GPIO_Init->Pull == GPIO_PULLUP)
 800433c:	683b      	ldr	r3, [r7, #0]
 800433e:	689b      	ldr	r3, [r3, #8]
 8004340:	2b01      	cmp	r3, #1
 8004342:	d105      	bne.n	8004350 <HAL_GPIO_Init+0xe0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8004344:	2308      	movs	r3, #8
 8004346:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	69fa      	ldr	r2, [r7, #28]
 800434c:	611a      	str	r2, [r3, #16]
          break; 
 800434e:	e008      	b.n	8004362 <HAL_GPIO_Init+0xf2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8004350:	2308      	movs	r3, #8
 8004352:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	69fa      	ldr	r2, [r7, #28]
 8004358:	615a      	str	r2, [r3, #20]
          break; 
 800435a:	e002      	b.n	8004362 <HAL_GPIO_Init+0xf2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800435c:	2300      	movs	r3, #0
 800435e:	623b      	str	r3, [r7, #32]
          break;
 8004360:	bf00      	nop
      }
      
      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8004362:	69bb      	ldr	r3, [r7, #24]
 8004364:	2bff      	cmp	r3, #255	; 0xff
 8004366:	d801      	bhi.n	800436c <HAL_GPIO_Init+0xfc>
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	e001      	b.n	8004370 <HAL_GPIO_Init+0x100>
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	3304      	adds	r3, #4
 8004370:	60fb      	str	r3, [r7, #12]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2U) : ((position - 8U) << 2U);
 8004372:	69bb      	ldr	r3, [r7, #24]
 8004374:	2bff      	cmp	r3, #255	; 0xff
 8004376:	d802      	bhi.n	800437e <HAL_GPIO_Init+0x10e>
 8004378:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800437a:	009b      	lsls	r3, r3, #2
 800437c:	e002      	b.n	8004384 <HAL_GPIO_Init+0x114>
 800437e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004380:	3b08      	subs	r3, #8
 8004382:	009b      	lsls	r3, r3, #2
 8004384:	613b      	str	r3, [r7, #16]
      
      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset ), (config << registeroffset));
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	681a      	ldr	r2, [r3, #0]
 800438a:	210f      	movs	r1, #15
 800438c:	693b      	ldr	r3, [r7, #16]
 800438e:	fa01 f303 	lsl.w	r3, r1, r3
 8004392:	43db      	mvns	r3, r3
 8004394:	401a      	ands	r2, r3
 8004396:	6a39      	ldr	r1, [r7, #32]
 8004398:	693b      	ldr	r3, [r7, #16]
 800439a:	fa01 f303 	lsl.w	r3, r1, r3
 800439e:	431a      	orrs	r2, r3
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	601a      	str	r2, [r3, #0]
      
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 80043a4:	683b      	ldr	r3, [r7, #0]
 80043a6:	685b      	ldr	r3, [r3, #4]
 80043a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	f000 8096 	beq.w	80044de <HAL_GPIO_Init+0x26e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80043b2:	4b57      	ldr	r3, [pc, #348]	; (8004510 <HAL_GPIO_Init+0x2a0>)
 80043b4:	699b      	ldr	r3, [r3, #24]
 80043b6:	4a56      	ldr	r2, [pc, #344]	; (8004510 <HAL_GPIO_Init+0x2a0>)
 80043b8:	f043 0301 	orr.w	r3, r3, #1
 80043bc:	6193      	str	r3, [r2, #24]
 80043be:	4b54      	ldr	r3, [pc, #336]	; (8004510 <HAL_GPIO_Init+0x2a0>)
 80043c0:	699b      	ldr	r3, [r3, #24]
 80043c2:	f003 0301 	and.w	r3, r3, #1
 80043c6:	60bb      	str	r3, [r7, #8]
 80043c8:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2U];
 80043ca:	4a52      	ldr	r2, [pc, #328]	; (8004514 <HAL_GPIO_Init+0x2a4>)
 80043cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043ce:	089b      	lsrs	r3, r3, #2
 80043d0:	3302      	adds	r3, #2
 80043d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80043d6:	617b      	str	r3, [r7, #20]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 80043d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043da:	f003 0303 	and.w	r3, r3, #3
 80043de:	009b      	lsls	r3, r3, #2
 80043e0:	220f      	movs	r2, #15
 80043e2:	fa02 f303 	lsl.w	r3, r2, r3
 80043e6:	43db      	mvns	r3, r3
 80043e8:	697a      	ldr	r2, [r7, #20]
 80043ea:	4013      	ands	r3, r2
 80043ec:	617b      	str	r3, [r7, #20]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	4a49      	ldr	r2, [pc, #292]	; (8004518 <HAL_GPIO_Init+0x2a8>)
 80043f2:	4293      	cmp	r3, r2
 80043f4:	d013      	beq.n	800441e <HAL_GPIO_Init+0x1ae>
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	4a48      	ldr	r2, [pc, #288]	; (800451c <HAL_GPIO_Init+0x2ac>)
 80043fa:	4293      	cmp	r3, r2
 80043fc:	d00d      	beq.n	800441a <HAL_GPIO_Init+0x1aa>
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	4a47      	ldr	r2, [pc, #284]	; (8004520 <HAL_GPIO_Init+0x2b0>)
 8004402:	4293      	cmp	r3, r2
 8004404:	d007      	beq.n	8004416 <HAL_GPIO_Init+0x1a6>
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	4a46      	ldr	r2, [pc, #280]	; (8004524 <HAL_GPIO_Init+0x2b4>)
 800440a:	4293      	cmp	r3, r2
 800440c:	d101      	bne.n	8004412 <HAL_GPIO_Init+0x1a2>
 800440e:	2303      	movs	r3, #3
 8004410:	e006      	b.n	8004420 <HAL_GPIO_Init+0x1b0>
 8004412:	2304      	movs	r3, #4
 8004414:	e004      	b.n	8004420 <HAL_GPIO_Init+0x1b0>
 8004416:	2302      	movs	r3, #2
 8004418:	e002      	b.n	8004420 <HAL_GPIO_Init+0x1b0>
 800441a:	2301      	movs	r3, #1
 800441c:	e000      	b.n	8004420 <HAL_GPIO_Init+0x1b0>
 800441e:	2300      	movs	r3, #0
 8004420:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004422:	f002 0203 	and.w	r2, r2, #3
 8004426:	0092      	lsls	r2, r2, #2
 8004428:	4093      	lsls	r3, r2
 800442a:	697a      	ldr	r2, [r7, #20]
 800442c:	4313      	orrs	r3, r2
 800442e:	617b      	str	r3, [r7, #20]
        AFIO->EXTICR[position >> 2U] = temp;
 8004430:	4938      	ldr	r1, [pc, #224]	; (8004514 <HAL_GPIO_Init+0x2a4>)
 8004432:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004434:	089b      	lsrs	r3, r3, #2
 8004436:	3302      	adds	r3, #2
 8004438:	697a      	ldr	r2, [r7, #20]
 800443a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        

        /* Configure the interrupt mask */
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800443e:	683b      	ldr	r3, [r7, #0]
 8004440:	685b      	ldr	r3, [r3, #4]
 8004442:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004446:	2b00      	cmp	r3, #0
 8004448:	d006      	beq.n	8004458 <HAL_GPIO_Init+0x1e8>
        {
          SET_BIT(EXTI->IMR, iocurrent); 
 800444a:	4b37      	ldr	r3, [pc, #220]	; (8004528 <HAL_GPIO_Init+0x2b8>)
 800444c:	681a      	ldr	r2, [r3, #0]
 800444e:	4936      	ldr	r1, [pc, #216]	; (8004528 <HAL_GPIO_Init+0x2b8>)
 8004450:	69bb      	ldr	r3, [r7, #24]
 8004452:	4313      	orrs	r3, r2
 8004454:	600b      	str	r3, [r1, #0]
 8004456:	e006      	b.n	8004466 <HAL_GPIO_Init+0x1f6>
        } 
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent); 
 8004458:	4b33      	ldr	r3, [pc, #204]	; (8004528 <HAL_GPIO_Init+0x2b8>)
 800445a:	681a      	ldr	r2, [r3, #0]
 800445c:	69bb      	ldr	r3, [r7, #24]
 800445e:	43db      	mvns	r3, r3
 8004460:	4931      	ldr	r1, [pc, #196]	; (8004528 <HAL_GPIO_Init+0x2b8>)
 8004462:	4013      	ands	r3, r2
 8004464:	600b      	str	r3, [r1, #0]
        } 
        
        /* Configure the event mask */
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004466:	683b      	ldr	r3, [r7, #0]
 8004468:	685b      	ldr	r3, [r3, #4]
 800446a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800446e:	2b00      	cmp	r3, #0
 8004470:	d006      	beq.n	8004480 <HAL_GPIO_Init+0x210>
        {
          SET_BIT(EXTI->EMR, iocurrent); 
 8004472:	4b2d      	ldr	r3, [pc, #180]	; (8004528 <HAL_GPIO_Init+0x2b8>)
 8004474:	685a      	ldr	r2, [r3, #4]
 8004476:	492c      	ldr	r1, [pc, #176]	; (8004528 <HAL_GPIO_Init+0x2b8>)
 8004478:	69bb      	ldr	r3, [r7, #24]
 800447a:	4313      	orrs	r3, r2
 800447c:	604b      	str	r3, [r1, #4]
 800447e:	e006      	b.n	800448e <HAL_GPIO_Init+0x21e>
        } 
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent); 
 8004480:	4b29      	ldr	r3, [pc, #164]	; (8004528 <HAL_GPIO_Init+0x2b8>)
 8004482:	685a      	ldr	r2, [r3, #4]
 8004484:	69bb      	ldr	r3, [r7, #24]
 8004486:	43db      	mvns	r3, r3
 8004488:	4927      	ldr	r1, [pc, #156]	; (8004528 <HAL_GPIO_Init+0x2b8>)
 800448a:	4013      	ands	r3, r2
 800448c:	604b      	str	r3, [r1, #4]
        }
        
        /* Enable or disable the rising trigger */
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800448e:	683b      	ldr	r3, [r7, #0]
 8004490:	685b      	ldr	r3, [r3, #4]
 8004492:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004496:	2b00      	cmp	r3, #0
 8004498:	d006      	beq.n	80044a8 <HAL_GPIO_Init+0x238>
        {
          SET_BIT(EXTI->RTSR, iocurrent); 
 800449a:	4b23      	ldr	r3, [pc, #140]	; (8004528 <HAL_GPIO_Init+0x2b8>)
 800449c:	689a      	ldr	r2, [r3, #8]
 800449e:	4922      	ldr	r1, [pc, #136]	; (8004528 <HAL_GPIO_Init+0x2b8>)
 80044a0:	69bb      	ldr	r3, [r7, #24]
 80044a2:	4313      	orrs	r3, r2
 80044a4:	608b      	str	r3, [r1, #8]
 80044a6:	e006      	b.n	80044b6 <HAL_GPIO_Init+0x246>
        } 
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent); 
 80044a8:	4b1f      	ldr	r3, [pc, #124]	; (8004528 <HAL_GPIO_Init+0x2b8>)
 80044aa:	689a      	ldr	r2, [r3, #8]
 80044ac:	69bb      	ldr	r3, [r7, #24]
 80044ae:	43db      	mvns	r3, r3
 80044b0:	491d      	ldr	r1, [pc, #116]	; (8004528 <HAL_GPIO_Init+0x2b8>)
 80044b2:	4013      	ands	r3, r2
 80044b4:	608b      	str	r3, [r1, #8]
        }
        
        /* Enable or disable the falling trigger */
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80044b6:	683b      	ldr	r3, [r7, #0]
 80044b8:	685b      	ldr	r3, [r3, #4]
 80044ba:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d006      	beq.n	80044d0 <HAL_GPIO_Init+0x260>
        {
          SET_BIT(EXTI->FTSR, iocurrent); 
 80044c2:	4b19      	ldr	r3, [pc, #100]	; (8004528 <HAL_GPIO_Init+0x2b8>)
 80044c4:	68da      	ldr	r2, [r3, #12]
 80044c6:	4918      	ldr	r1, [pc, #96]	; (8004528 <HAL_GPIO_Init+0x2b8>)
 80044c8:	69bb      	ldr	r3, [r7, #24]
 80044ca:	4313      	orrs	r3, r2
 80044cc:	60cb      	str	r3, [r1, #12]
 80044ce:	e006      	b.n	80044de <HAL_GPIO_Init+0x26e>
        } 
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent); 
 80044d0:	4b15      	ldr	r3, [pc, #84]	; (8004528 <HAL_GPIO_Init+0x2b8>)
 80044d2:	68da      	ldr	r2, [r3, #12]
 80044d4:	69bb      	ldr	r3, [r7, #24]
 80044d6:	43db      	mvns	r3, r3
 80044d8:	4913      	ldr	r1, [pc, #76]	; (8004528 <HAL_GPIO_Init+0x2b8>)
 80044da:	4013      	ands	r3, r2
 80044dc:	60cb      	str	r3, [r1, #12]
  for (position = 0U; position < GPIO_NUMBER; position++)
 80044de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044e0:	3301      	adds	r3, #1
 80044e2:	627b      	str	r3, [r7, #36]	; 0x24
 80044e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044e6:	2b0f      	cmp	r3, #15
 80044e8:	f67f aed4 	bls.w	8004294 <HAL_GPIO_Init+0x24>
        }
      }
    }
  }
}
 80044ec:	bf00      	nop
 80044ee:	372c      	adds	r7, #44	; 0x2c
 80044f0:	46bd      	mov	sp, r7
 80044f2:	bc80      	pop	{r7}
 80044f4:	4770      	bx	lr
 80044f6:	bf00      	nop
 80044f8:	10210000 	.word	0x10210000
 80044fc:	10110000 	.word	0x10110000
 8004500:	10120000 	.word	0x10120000
 8004504:	10310000 	.word	0x10310000
 8004508:	10320000 	.word	0x10320000
 800450c:	10220000 	.word	0x10220000
 8004510:	40021000 	.word	0x40021000
 8004514:	40010000 	.word	0x40010000
 8004518:	40010800 	.word	0x40010800
 800451c:	40010c00 	.word	0x40010c00
 8004520:	40011000 	.word	0x40011000
 8004524:	40011400 	.word	0x40011400
 8004528:	40010400 	.word	0x40010400

0800452c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800452c:	b480      	push	{r7}
 800452e:	b085      	sub	sp, #20
 8004530:	af00      	add	r7, sp, #0
 8004532:	6078      	str	r0, [r7, #4]
 8004534:	460b      	mov	r3, r1
 8004536:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	689a      	ldr	r2, [r3, #8]
 800453c:	887b      	ldrh	r3, [r7, #2]
 800453e:	4013      	ands	r3, r2
 8004540:	2b00      	cmp	r3, #0
 8004542:	d002      	beq.n	800454a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004544:	2301      	movs	r3, #1
 8004546:	73fb      	strb	r3, [r7, #15]
 8004548:	e001      	b.n	800454e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800454a:	2300      	movs	r3, #0
 800454c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800454e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004550:	4618      	mov	r0, r3
 8004552:	3714      	adds	r7, #20
 8004554:	46bd      	mov	sp, r7
 8004556:	bc80      	pop	{r7}
 8004558:	4770      	bx	lr

0800455a <HAL_GPIO_WritePin>:
  *            @arg GPIO_BIT_RESET: to clear the port pin
  *            @arg GPIO_BIT_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800455a:	b480      	push	{r7}
 800455c:	b083      	sub	sp, #12
 800455e:	af00      	add	r7, sp, #0
 8004560:	6078      	str	r0, [r7, #4]
 8004562:	460b      	mov	r3, r1
 8004564:	807b      	strh	r3, [r7, #2]
 8004566:	4613      	mov	r3, r2
 8004568:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800456a:	787b      	ldrb	r3, [r7, #1]
 800456c:	2b00      	cmp	r3, #0
 800456e:	d003      	beq.n	8004578 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004570:	887a      	ldrh	r2, [r7, #2]
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004576:	e003      	b.n	8004580 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004578:	887b      	ldrh	r3, [r7, #2]
 800457a:	041a      	lsls	r2, r3, #16
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	611a      	str	r2, [r3, #16]
}
 8004580:	bf00      	nop
 8004582:	370c      	adds	r7, #12
 8004584:	46bd      	mov	sp, r7
 8004586:	bc80      	pop	{r7}
 8004588:	4770      	bx	lr
	...

0800458c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800458c:	b580      	push	{r7, lr}
 800458e:	b082      	sub	sp, #8
 8004590:	af00      	add	r7, sp, #0
 8004592:	4603      	mov	r3, r0
 8004594:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8004596:	4b08      	ldr	r3, [pc, #32]	; (80045b8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004598:	695a      	ldr	r2, [r3, #20]
 800459a:	88fb      	ldrh	r3, [r7, #6]
 800459c:	4013      	ands	r3, r2
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d006      	beq.n	80045b0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80045a2:	4a05      	ldr	r2, [pc, #20]	; (80045b8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80045a4:	88fb      	ldrh	r3, [r7, #6]
 80045a6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80045a8:	88fb      	ldrh	r3, [r7, #6]
 80045aa:	4618      	mov	r0, r3
 80045ac:	f7fd fe8a 	bl	80022c4 <HAL_GPIO_EXTI_Callback>
  }
}
 80045b0:	bf00      	nop
 80045b2:	3708      	adds	r7, #8
 80045b4:	46bd      	mov	sp, r7
 80045b6:	bd80      	pop	{r7, pc}
 80045b8:	40010400 	.word	0x40010400

080045bc <HAL_I2C_Init>:
  * @param  hi2c: pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80045bc:	b580      	push	{r7, lr}
 80045be:	b084      	sub	sp, #16
 80045c0:	af00      	add	r7, sp, #0
 80045c2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange = 0U;
 80045c4:	2300      	movs	r3, #0
 80045c6:	60fb      	str	r3, [r7, #12]
  uint32_t pclk1 = 0U;
 80045c8:	2300      	movs	r3, #0
 80045ca:	60bb      	str	r3, [r7, #8]

  /* Check the I2C handle allocation */
  if(hi2c == NULL)
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d101      	bne.n	80045d6 <HAL_I2C_Init+0x1a>
  {
    return HAL_ERROR;
 80045d2:	2301      	movs	r3, #1
 80045d4:	e0c8      	b.n	8004768 <HAL_I2C_Init+0x1ac>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if(hi2c->State == HAL_I2C_STATE_RESET)
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80045dc:	b2db      	uxtb	r3, r3
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d106      	bne.n	80045f0 <HAL_I2C_Init+0x34>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	2200      	movs	r2, #0
 80045e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80045ea:	6878      	ldr	r0, [r7, #4]
 80045ec:	f7fc fd26 	bl	800103c <HAL_I2C_MspInit>
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	2224      	movs	r2, #36	; 0x24
 80045f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	681a      	ldr	r2, [r3, #0]
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	f022 0201 	bic.w	r2, r2, #1
 8004606:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004608:	f000 ff86 	bl	8005518 <HAL_RCC_GetPCLK1Freq>
 800460c:	60b8      	str	r0, [r7, #8]

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800460e:	68bb      	ldr	r3, [r7, #8]
 8004610:	4a57      	ldr	r2, [pc, #348]	; (8004770 <HAL_I2C_Init+0x1b4>)
 8004612:	fba2 2303 	umull	r2, r3, r2, r3
 8004616:	0c9b      	lsrs	r3, r3, #18
 8004618:	60fb      	str	r3, [r7, #12]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->CR2 = freqrange;
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	68fa      	ldr	r2, [r7, #12]
 8004620:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	685b      	ldr	r3, [r3, #4]
 8004626:	4a53      	ldr	r2, [pc, #332]	; (8004774 <HAL_I2C_Init+0x1b8>)
 8004628:	4293      	cmp	r3, r2
 800462a:	d802      	bhi.n	8004632 <HAL_I2C_Init+0x76>
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	3301      	adds	r3, #1
 8004630:	e009      	b.n	8004646 <HAL_I2C_Init+0x8a>
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004638:	fb02 f303 	mul.w	r3, r2, r3
 800463c:	4a4e      	ldr	r2, [pc, #312]	; (8004778 <HAL_I2C_Init+0x1bc>)
 800463e:	fba2 2303 	umull	r2, r3, r2, r3
 8004642:	099b      	lsrs	r3, r3, #6
 8004644:	3301      	adds	r3, #1
 8004646:	687a      	ldr	r2, [r7, #4]
 8004648:	6812      	ldr	r2, [r2, #0]
 800464a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  hi2c->Instance->CCR = I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle);
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	685b      	ldr	r3, [r3, #4]
 8004650:	4a48      	ldr	r2, [pc, #288]	; (8004774 <HAL_I2C_Init+0x1b8>)
 8004652:	4293      	cmp	r3, r2
 8004654:	d812      	bhi.n	800467c <HAL_I2C_Init+0xc0>
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	685b      	ldr	r3, [r3, #4]
 800465a:	005b      	lsls	r3, r3, #1
 800465c:	68ba      	ldr	r2, [r7, #8]
 800465e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004662:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004666:	2b03      	cmp	r3, #3
 8004668:	d906      	bls.n	8004678 <HAL_I2C_Init+0xbc>
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	685b      	ldr	r3, [r3, #4]
 800466e:	005b      	lsls	r3, r3, #1
 8004670:	68ba      	ldr	r2, [r7, #8]
 8004672:	fbb2 f3f3 	udiv	r3, r2, r3
 8004676:	e045      	b.n	8004704 <HAL_I2C_Init+0x148>
 8004678:	2304      	movs	r3, #4
 800467a:	e043      	b.n	8004704 <HAL_I2C_Init+0x148>
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	689b      	ldr	r3, [r3, #8]
 8004680:	2b00      	cmp	r3, #0
 8004682:	d10f      	bne.n	80046a4 <HAL_I2C_Init+0xe8>
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	685a      	ldr	r2, [r3, #4]
 8004688:	4613      	mov	r3, r2
 800468a:	005b      	lsls	r3, r3, #1
 800468c:	4413      	add	r3, r2
 800468e:	68ba      	ldr	r2, [r7, #8]
 8004690:	fbb2 f3f3 	udiv	r3, r2, r3
 8004694:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004698:	2b00      	cmp	r3, #0
 800469a:	bf0c      	ite	eq
 800469c:	2301      	moveq	r3, #1
 800469e:	2300      	movne	r3, #0
 80046a0:	b2db      	uxtb	r3, r3
 80046a2:	e010      	b.n	80046c6 <HAL_I2C_Init+0x10a>
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	685a      	ldr	r2, [r3, #4]
 80046a8:	4613      	mov	r3, r2
 80046aa:	009b      	lsls	r3, r3, #2
 80046ac:	4413      	add	r3, r2
 80046ae:	009a      	lsls	r2, r3, #2
 80046b0:	4413      	add	r3, r2
 80046b2:	68ba      	ldr	r2, [r7, #8]
 80046b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80046b8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80046bc:	2b00      	cmp	r3, #0
 80046be:	bf0c      	ite	eq
 80046c0:	2301      	moveq	r3, #1
 80046c2:	2300      	movne	r3, #0
 80046c4:	b2db      	uxtb	r3, r3
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d001      	beq.n	80046ce <HAL_I2C_Init+0x112>
 80046ca:	2301      	movs	r3, #1
 80046cc:	e01a      	b.n	8004704 <HAL_I2C_Init+0x148>
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	689b      	ldr	r3, [r3, #8]
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d10a      	bne.n	80046ec <HAL_I2C_Init+0x130>
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	685a      	ldr	r2, [r3, #4]
 80046da:	4613      	mov	r3, r2
 80046dc:	005b      	lsls	r3, r3, #1
 80046de:	4413      	add	r3, r2
 80046e0:	68ba      	ldr	r2, [r7, #8]
 80046e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80046e6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80046ea:	e00b      	b.n	8004704 <HAL_I2C_Init+0x148>
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	685a      	ldr	r2, [r3, #4]
 80046f0:	4613      	mov	r3, r2
 80046f2:	009b      	lsls	r3, r3, #2
 80046f4:	4413      	add	r3, r2
 80046f6:	009a      	lsls	r2, r3, #2
 80046f8:	4413      	add	r3, r2
 80046fa:	68ba      	ldr	r2, [r7, #8]
 80046fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8004700:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004704:	687a      	ldr	r2, [r7, #4]
 8004706:	6812      	ldr	r2, [r2, #0]
 8004708:	61d3      	str	r3, [r2, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	69d9      	ldr	r1, [r3, #28]
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	6a1a      	ldr	r2, [r3, #32]
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	430a      	orrs	r2, r1
 8004718:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  hi2c->Instance->OAR1 = (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1);
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	6919      	ldr	r1, [r3, #16]
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	68da      	ldr	r2, [r3, #12]
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	430a      	orrs	r2, r1
 8004728:	609a      	str	r2, [r3, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2);
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	6959      	ldr	r1, [r3, #20]
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	699a      	ldr	r2, [r3, #24]
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	430a      	orrs	r2, r1
 8004738:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	681a      	ldr	r2, [r3, #0]
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	f042 0201 	orr.w	r2, r2, #1
 8004748:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	2200      	movs	r2, #0
 800474e:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	2220      	movs	r2, #32
 8004754:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	2200      	movs	r2, #0
 800475c:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	2200      	movs	r2, #0
 8004762:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004766:	2300      	movs	r3, #0
}
 8004768:	4618      	mov	r0, r3
 800476a:	3710      	adds	r7, #16
 800476c:	46bd      	mov	sp, r7
 800476e:	bd80      	pop	{r7, pc}
 8004770:	431bde83 	.word	0x431bde83
 8004774:	000186a0 	.word	0x000186a0
 8004778:	10624dd3 	.word	0x10624dd3

0800477c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800477c:	b580      	push	{r7, lr}
 800477e:	b088      	sub	sp, #32
 8004780:	af02      	add	r7, sp, #8
 8004782:	60f8      	str	r0, [r7, #12]
 8004784:	4608      	mov	r0, r1
 8004786:	4611      	mov	r1, r2
 8004788:	461a      	mov	r2, r3
 800478a:	4603      	mov	r3, r0
 800478c:	817b      	strh	r3, [r7, #10]
 800478e:	460b      	mov	r3, r1
 8004790:	813b      	strh	r3, [r7, #8]
 8004792:	4613      	mov	r3, r2
 8004794:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart = 0x00U;
 8004796:	2300      	movs	r3, #0
 8004798:	617b      	str	r3, [r7, #20]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800479a:	f7fe fbe3 	bl	8002f64 <HAL_GetTick>
 800479e:	6178      	str	r0, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if(hi2c->State == HAL_I2C_STATE_READY)
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80047a6:	b2db      	uxtb	r3, r3
 80047a8:	2b20      	cmp	r3, #32
 80047aa:	f040 80e7 	bne.w	800497c <HAL_I2C_Mem_Write+0x200>
  {
    /* Wait until BUSY flag is reset */
    if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80047ae:	697b      	ldr	r3, [r7, #20]
 80047b0:	9300      	str	r3, [sp, #0]
 80047b2:	2319      	movs	r3, #25
 80047b4:	2201      	movs	r2, #1
 80047b6:	4974      	ldr	r1, [pc, #464]	; (8004988 <HAL_I2C_Mem_Write+0x20c>)
 80047b8:	68f8      	ldr	r0, [r7, #12]
 80047ba:	f000 f97d 	bl	8004ab8 <I2C_WaitOnFlagUntilTimeout>
 80047be:	4603      	mov	r3, r0
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d001      	beq.n	80047c8 <HAL_I2C_Mem_Write+0x4c>
    {
      return HAL_BUSY;
 80047c4:	2302      	movs	r3, #2
 80047c6:	e0da      	b.n	800497e <HAL_I2C_Mem_Write+0x202>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80047ce:	2b01      	cmp	r3, #1
 80047d0:	d101      	bne.n	80047d6 <HAL_I2C_Mem_Write+0x5a>
 80047d2:	2302      	movs	r3, #2
 80047d4:	e0d3      	b.n	800497e <HAL_I2C_Mem_Write+0x202>
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	2201      	movs	r2, #1
 80047da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Check if the I2C is already enabled */
    if((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	f003 0301 	and.w	r3, r3, #1
 80047e8:	2b01      	cmp	r3, #1
 80047ea:	d007      	beq.n	80047fc <HAL_I2C_Mem_Write+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	681a      	ldr	r2, [r3, #0]
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	f042 0201 	orr.w	r2, r2, #1
 80047fa:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	681a      	ldr	r2, [r3, #0]
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800480a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	2221      	movs	r2, #33	; 0x21
 8004810:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	2240      	movs	r2, #64	; 0x40
 8004818:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	2200      	movs	r2, #0
 8004820:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	6a3a      	ldr	r2, [r7, #32]
 8004826:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800482c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	4a56      	ldr	r2, [pc, #344]	; (800498c <HAL_I2C_Mem_Write+0x210>)
 8004832:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferSize    = hi2c->XferCount;
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004838:	b29a      	uxth	r2, r3
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	851a      	strh	r2, [r3, #40]	; 0x28
    
    /* Send Slave Address and Memory Address */
    if(I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800483e:	88f8      	ldrh	r0, [r7, #6]
 8004840:	893a      	ldrh	r2, [r7, #8]
 8004842:	8979      	ldrh	r1, [r7, #10]
 8004844:	697b      	ldr	r3, [r7, #20]
 8004846:	9301      	str	r3, [sp, #4]
 8004848:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800484a:	9300      	str	r3, [sp, #0]
 800484c:	4603      	mov	r3, r0
 800484e:	68f8      	ldr	r0, [r7, #12]
 8004850:	f000 f89e 	bl	8004990 <I2C_RequestMemoryWrite>
 8004854:	4603      	mov	r3, r0
 8004856:	2b00      	cmp	r3, #0
 8004858:	d05e      	beq.n	8004918 <HAL_I2C_Mem_Write+0x19c>
    {
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800485e:	2b04      	cmp	r3, #4
 8004860:	d105      	bne.n	800486e <HAL_I2C_Mem_Write+0xf2>
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	2200      	movs	r2, #0
 8004866:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        return HAL_ERROR;
 800486a:	2301      	movs	r3, #1
 800486c:	e087      	b.n	800497e <HAL_I2C_Mem_Write+0x202>
      }
      else
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	2200      	movs	r2, #0
 8004872:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        return HAL_TIMEOUT;
 8004876:	2303      	movs	r3, #3
 8004878:	e081      	b.n	800497e <HAL_I2C_Mem_Write+0x202>
    }

    while(hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800487a:	697a      	ldr	r2, [r7, #20]
 800487c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800487e:	68f8      	ldr	r0, [r7, #12]
 8004880:	f000 f9d9 	bl	8004c36 <I2C_WaitOnTXEFlagUntilTimeout>
 8004884:	4603      	mov	r3, r0
 8004886:	2b00      	cmp	r3, #0
 8004888:	d00f      	beq.n	80048aa <HAL_I2C_Mem_Write+0x12e>
      {
        if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800488e:	2b04      	cmp	r3, #4
 8004890:	d109      	bne.n	80048a6 <HAL_I2C_Mem_Write+0x12a>
        {
          /* Generate Stop */
          hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	681a      	ldr	r2, [r3, #0]
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80048a0:	601a      	str	r2, [r3, #0]
          return HAL_ERROR;
 80048a2:	2301      	movs	r3, #1
 80048a4:	e06b      	b.n	800497e <HAL_I2C_Mem_Write+0x202>
        }
        else
        {
          return HAL_TIMEOUT;
 80048a6:	2303      	movs	r3, #3
 80048a8:	e069      	b.n	800497e <HAL_I2C_Mem_Write+0x202>
        }
      }

      /* Write data to DR */
      hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048ae:	1c59      	adds	r1, r3, #1
 80048b0:	68fa      	ldr	r2, [r7, #12]
 80048b2:	6251      	str	r1, [r2, #36]	; 0x24
 80048b4:	781a      	ldrb	r2, [r3, #0]
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	611a      	str	r2, [r3, #16]
      hi2c->XferSize--;
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80048c0:	3b01      	subs	r3, #1
 80048c2:	b29a      	uxth	r2, r3
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80048cc:	b29b      	uxth	r3, r3
 80048ce:	3b01      	subs	r3, #1
 80048d0:	b29a      	uxth	r2, r3
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	855a      	strh	r2, [r3, #42]	; 0x2a

      if((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	695b      	ldr	r3, [r3, #20]
 80048dc:	f003 0304 	and.w	r3, r3, #4
 80048e0:	2b04      	cmp	r3, #4
 80048e2:	d119      	bne.n	8004918 <HAL_I2C_Mem_Write+0x19c>
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d015      	beq.n	8004918 <HAL_I2C_Mem_Write+0x19c>
      {
        /* Write data to DR */
        hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048f0:	1c59      	adds	r1, r3, #1
 80048f2:	68fa      	ldr	r2, [r7, #12]
 80048f4:	6251      	str	r1, [r2, #36]	; 0x24
 80048f6:	781a      	ldrb	r2, [r3, #0]
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	611a      	str	r2, [r3, #16]
        hi2c->XferSize--;
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004902:	3b01      	subs	r3, #1
 8004904:	b29a      	uxth	r2, r3
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800490e:	b29b      	uxth	r3, r3
 8004910:	3b01      	subs	r3, #1
 8004912:	b29a      	uxth	r2, r3
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	855a      	strh	r2, [r3, #42]	; 0x2a
    while(hi2c->XferSize > 0U)
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800491c:	2b00      	cmp	r3, #0
 800491e:	d1ac      	bne.n	800487a <HAL_I2C_Mem_Write+0xfe>
      }
    }
    
    /* Wait until BTF flag is set */
    if(I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004920:	697a      	ldr	r2, [r7, #20]
 8004922:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004924:	68f8      	ldr	r0, [r7, #12]
 8004926:	f000 f9c3 	bl	8004cb0 <I2C_WaitOnBTFFlagUntilTimeout>
 800492a:	4603      	mov	r3, r0
 800492c:	2b00      	cmp	r3, #0
 800492e:	d00f      	beq.n	8004950 <HAL_I2C_Mem_Write+0x1d4>
    {
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004934:	2b04      	cmp	r3, #4
 8004936:	d109      	bne.n	800494c <HAL_I2C_Mem_Write+0x1d0>
      {
        /* Generate Stop */
        hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	681a      	ldr	r2, [r3, #0]
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004946:	601a      	str	r2, [r3, #0]
        return HAL_ERROR;
 8004948:	2301      	movs	r3, #1
 800494a:	e018      	b.n	800497e <HAL_I2C_Mem_Write+0x202>
      }
      else
      {
        return HAL_TIMEOUT;
 800494c:	2303      	movs	r3, #3
 800494e:	e016      	b.n	800497e <HAL_I2C_Mem_Write+0x202>
      }
    }

    /* Generate Stop */
    hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	681a      	ldr	r2, [r3, #0]
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800495e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	2220      	movs	r2, #32
 8004964:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	2200      	movs	r2, #0
 800496c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    
    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	2200      	movs	r2, #0
 8004974:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004978:	2300      	movs	r3, #0
 800497a:	e000      	b.n	800497e <HAL_I2C_Mem_Write+0x202>
  }
  else
  {
    return HAL_BUSY;
 800497c:	2302      	movs	r3, #2
  }
}
 800497e:	4618      	mov	r0, r3
 8004980:	3718      	adds	r7, #24
 8004982:	46bd      	mov	sp, r7
 8004984:	bd80      	pop	{r7, pc}
 8004986:	bf00      	nop
 8004988:	00100002 	.word	0x00100002
 800498c:	ffff0000 	.word	0xffff0000

08004990 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004990:	b580      	push	{r7, lr}
 8004992:	b088      	sub	sp, #32
 8004994:	af02      	add	r7, sp, #8
 8004996:	60f8      	str	r0, [r7, #12]
 8004998:	4608      	mov	r0, r1
 800499a:	4611      	mov	r1, r2
 800499c:	461a      	mov	r2, r3
 800499e:	4603      	mov	r3, r0
 80049a0:	817b      	strh	r3, [r7, #10]
 80049a2:	460b      	mov	r3, r1
 80049a4:	813b      	strh	r3, [r7, #8]
 80049a6:	4613      	mov	r3, r2
 80049a8:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  hi2c->Instance->CR1 |= I2C_CR1_START;
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	681a      	ldr	r2, [r3, #0]
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80049b8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80049ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049bc:	9300      	str	r3, [sp, #0]
 80049be:	6a3b      	ldr	r3, [r7, #32]
 80049c0:	2200      	movs	r2, #0
 80049c2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80049c6:	68f8      	ldr	r0, [r7, #12]
 80049c8:	f000 f876 	bl	8004ab8 <I2C_WaitOnFlagUntilTimeout>
 80049cc:	4603      	mov	r3, r0
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d001      	beq.n	80049d6 <I2C_RequestMemoryWrite+0x46>
  {
    return HAL_TIMEOUT;
 80049d2:	2303      	movs	r3, #3
 80049d4:	e069      	b.n	8004aaa <I2C_RequestMemoryWrite+0x11a>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80049d6:	897b      	ldrh	r3, [r7, #10]
 80049d8:	b2db      	uxtb	r3, r3
 80049da:	461a      	mov	r2, r3
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80049e4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80049e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049e8:	6a3a      	ldr	r2, [r7, #32]
 80049ea:	4932      	ldr	r1, [pc, #200]	; (8004ab4 <I2C_RequestMemoryWrite+0x124>)
 80049ec:	68f8      	ldr	r0, [r7, #12]
 80049ee:	f000 f8b4 	bl	8004b5a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80049f2:	4603      	mov	r3, r0
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d007      	beq.n	8004a08 <I2C_RequestMemoryWrite+0x78>
  {
    if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049fc:	2b04      	cmp	r3, #4
 80049fe:	d101      	bne.n	8004a04 <I2C_RequestMemoryWrite+0x74>
    {
      return HAL_ERROR;
 8004a00:	2301      	movs	r3, #1
 8004a02:	e052      	b.n	8004aaa <I2C_RequestMemoryWrite+0x11a>
    }
    else
    {
      return HAL_TIMEOUT;
 8004a04:	2303      	movs	r3, #3
 8004a06:	e050      	b.n	8004aaa <I2C_RequestMemoryWrite+0x11a>
    }
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004a08:	2300      	movs	r3, #0
 8004a0a:	617b      	str	r3, [r7, #20]
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	695b      	ldr	r3, [r3, #20]
 8004a12:	617b      	str	r3, [r7, #20]
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	699b      	ldr	r3, [r3, #24]
 8004a1a:	617b      	str	r3, [r7, #20]
 8004a1c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004a1e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a20:	6a39      	ldr	r1, [r7, #32]
 8004a22:	68f8      	ldr	r0, [r7, #12]
 8004a24:	f000 f907 	bl	8004c36 <I2C_WaitOnTXEFlagUntilTimeout>
 8004a28:	4603      	mov	r3, r0
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d00f      	beq.n	8004a4e <I2C_RequestMemoryWrite+0xbe>
  {
    if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a32:	2b04      	cmp	r3, #4
 8004a34:	d109      	bne.n	8004a4a <I2C_RequestMemoryWrite+0xba>
    {
      /* Generate Stop */
      hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	681a      	ldr	r2, [r3, #0]
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004a44:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
 8004a46:	2301      	movs	r3, #1
 8004a48:	e02f      	b.n	8004aaa <I2C_RequestMemoryWrite+0x11a>
    }
    else
    {
      return HAL_TIMEOUT;
 8004a4a:	2303      	movs	r3, #3
 8004a4c:	e02d      	b.n	8004aaa <I2C_RequestMemoryWrite+0x11a>
    }
  }

  /* If Memory address size is 8Bit */
  if(MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004a4e:	88fb      	ldrh	r3, [r7, #6]
 8004a50:	2b01      	cmp	r3, #1
 8004a52:	d105      	bne.n	8004a60 <I2C_RequestMemoryWrite+0xd0>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004a54:	893b      	ldrh	r3, [r7, #8]
 8004a56:	b2da      	uxtb	r2, r3
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	611a      	str	r2, [r3, #16]
 8004a5e:	e023      	b.n	8004aa8 <I2C_RequestMemoryWrite+0x118>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004a60:	893b      	ldrh	r3, [r7, #8]
 8004a62:	0a1b      	lsrs	r3, r3, #8
 8004a64:	b29b      	uxth	r3, r3
 8004a66:	b2da      	uxtb	r2, r3
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004a6e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a70:	6a39      	ldr	r1, [r7, #32]
 8004a72:	68f8      	ldr	r0, [r7, #12]
 8004a74:	f000 f8df 	bl	8004c36 <I2C_WaitOnTXEFlagUntilTimeout>
 8004a78:	4603      	mov	r3, r0
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d00f      	beq.n	8004a9e <I2C_RequestMemoryWrite+0x10e>
    {
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a82:	2b04      	cmp	r3, #4
 8004a84:	d109      	bne.n	8004a9a <I2C_RequestMemoryWrite+0x10a>
      {
        /* Generate Stop */
        hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	681a      	ldr	r2, [r3, #0]
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004a94:	601a      	str	r2, [r3, #0]
        return HAL_ERROR;
 8004a96:	2301      	movs	r3, #1
 8004a98:	e007      	b.n	8004aaa <I2C_RequestMemoryWrite+0x11a>
      }
      else
      {
        return HAL_TIMEOUT;
 8004a9a:	2303      	movs	r3, #3
 8004a9c:	e005      	b.n	8004aaa <I2C_RequestMemoryWrite+0x11a>
      }
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004a9e:	893b      	ldrh	r3, [r7, #8]
 8004aa0:	b2da      	uxtb	r2, r3
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8004aa8:	2300      	movs	r3, #0
}
 8004aaa:	4618      	mov	r0, r3
 8004aac:	3718      	adds	r7, #24
 8004aae:	46bd      	mov	sp, r7
 8004ab0:	bd80      	pop	{r7, pc}
 8004ab2:	bf00      	nop
 8004ab4:	00010002 	.word	0x00010002

08004ab8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004ab8:	b580      	push	{r7, lr}
 8004aba:	b084      	sub	sp, #16
 8004abc:	af00      	add	r7, sp, #0
 8004abe:	60f8      	str	r0, [r7, #12]
 8004ac0:	60b9      	str	r1, [r7, #8]
 8004ac2:	603b      	str	r3, [r7, #0]
 8004ac4:	4613      	mov	r3, r2
 8004ac6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while((__HAL_I2C_GET_FLAG(hi2c, Flag) ? SET : RESET) == Status) 
 8004ac8:	e01f      	b.n	8004b0a <I2C_WaitOnFlagUntilTimeout+0x52>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 8004aca:	683b      	ldr	r3, [r7, #0]
 8004acc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004ad0:	d01b      	beq.n	8004b0a <I2C_WaitOnFlagUntilTimeout+0x52>
    {
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 8004ad2:	683b      	ldr	r3, [r7, #0]
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d007      	beq.n	8004ae8 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004ad8:	f7fe fa44 	bl	8002f64 <HAL_GetTick>
 8004adc:	4602      	mov	r2, r0
 8004ade:	69bb      	ldr	r3, [r7, #24]
 8004ae0:	1ad3      	subs	r3, r2, r3
 8004ae2:	683a      	ldr	r2, [r7, #0]
 8004ae4:	429a      	cmp	r2, r3
 8004ae6:	d210      	bcs.n	8004b0a <I2C_WaitOnFlagUntilTimeout+0x52>
      {
        hi2c->PreviousState = I2C_STATE_NONE;
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	2200      	movs	r2, #0
 8004aec:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State= HAL_I2C_STATE_READY;
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	2220      	movs	r2, #32
 8004af2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	2200      	movs	r2, #0
 8004afa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	2200      	movs	r2, #0
 8004b02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_TIMEOUT;
 8004b06:	2303      	movs	r3, #3
 8004b08:	e023      	b.n	8004b52 <I2C_WaitOnFlagUntilTimeout+0x9a>
  while((__HAL_I2C_GET_FLAG(hi2c, Flag) ? SET : RESET) == Status) 
 8004b0a:	68bb      	ldr	r3, [r7, #8]
 8004b0c:	0c1b      	lsrs	r3, r3, #16
 8004b0e:	b2db      	uxtb	r3, r3
 8004b10:	2b01      	cmp	r3, #1
 8004b12:	d10d      	bne.n	8004b30 <I2C_WaitOnFlagUntilTimeout+0x78>
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	695b      	ldr	r3, [r3, #20]
 8004b1a:	43da      	mvns	r2, r3
 8004b1c:	68bb      	ldr	r3, [r7, #8]
 8004b1e:	4013      	ands	r3, r2
 8004b20:	b29b      	uxth	r3, r3
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	bf0c      	ite	eq
 8004b26:	2301      	moveq	r3, #1
 8004b28:	2300      	movne	r3, #0
 8004b2a:	b2db      	uxtb	r3, r3
 8004b2c:	461a      	mov	r2, r3
 8004b2e:	e00c      	b.n	8004b4a <I2C_WaitOnFlagUntilTimeout+0x92>
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	699b      	ldr	r3, [r3, #24]
 8004b36:	43da      	mvns	r2, r3
 8004b38:	68bb      	ldr	r3, [r7, #8]
 8004b3a:	4013      	ands	r3, r2
 8004b3c:	b29b      	uxth	r3, r3
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	bf0c      	ite	eq
 8004b42:	2301      	moveq	r3, #1
 8004b44:	2300      	movne	r3, #0
 8004b46:	b2db      	uxtb	r3, r3
 8004b48:	461a      	mov	r2, r3
 8004b4a:	79fb      	ldrb	r3, [r7, #7]
 8004b4c:	429a      	cmp	r2, r3
 8004b4e:	d0bc      	beq.n	8004aca <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  
  return HAL_OK;
 8004b50:	2300      	movs	r3, #0
}
 8004b52:	4618      	mov	r0, r3
 8004b54:	3710      	adds	r7, #16
 8004b56:	46bd      	mov	sp, r7
 8004b58:	bd80      	pop	{r7, pc}

08004b5a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004b5a:	b580      	push	{r7, lr}
 8004b5c:	b084      	sub	sp, #16
 8004b5e:	af00      	add	r7, sp, #0
 8004b60:	60f8      	str	r0, [r7, #12]
 8004b62:	60b9      	str	r1, [r7, #8]
 8004b64:	607a      	str	r2, [r7, #4]
 8004b66:	603b      	str	r3, [r7, #0]
  while(__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004b68:	e040      	b.n	8004bec <I2C_WaitOnMasterAddressFlagUntilTimeout+0x92>
  {
    if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	695b      	ldr	r3, [r3, #20]
 8004b70:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004b74:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004b78:	d11c      	bne.n	8004bb4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x5a>
    {
      /* Generate Stop */
      hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	681a      	ldr	r2, [r3, #0]
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004b88:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004b92:	615a      	str	r2, [r3, #20]

      hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	2204      	movs	r2, #4
 8004b98:	641a      	str	r2, [r3, #64]	; 0x40
      hi2c->PreviousState = I2C_STATE_NONE;
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	2200      	movs	r2, #0
 8004b9e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State= HAL_I2C_STATE_READY;
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	2220      	movs	r2, #32
 8004ba4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	2200      	movs	r2, #0
 8004bac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004bb0:	2301      	movs	r3, #1
 8004bb2:	e03c      	b.n	8004c2e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd4>
    }

    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004bba:	d017      	beq.n	8004bec <I2C_WaitOnMasterAddressFlagUntilTimeout+0x92>
    {
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d007      	beq.n	8004bd2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x78>
 8004bc2:	f7fe f9cf 	bl	8002f64 <HAL_GetTick>
 8004bc6:	4602      	mov	r2, r0
 8004bc8:	683b      	ldr	r3, [r7, #0]
 8004bca:	1ad3      	subs	r3, r2, r3
 8004bcc:	687a      	ldr	r2, [r7, #4]
 8004bce:	429a      	cmp	r2, r3
 8004bd0:	d20c      	bcs.n	8004bec <I2C_WaitOnMasterAddressFlagUntilTimeout+0x92>
      {
        hi2c->PreviousState = I2C_STATE_NONE;
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	2200      	movs	r2, #0
 8004bd6:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State= HAL_I2C_STATE_READY;
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	2220      	movs	r2, #32
 8004bdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	2200      	movs	r2, #0
 8004be4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8004be8:	2303      	movs	r3, #3
 8004bea:	e020      	b.n	8004c2e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd4>
  while(__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004bec:	68bb      	ldr	r3, [r7, #8]
 8004bee:	0c1b      	lsrs	r3, r3, #16
 8004bf0:	b2db      	uxtb	r3, r3
 8004bf2:	2b01      	cmp	r3, #1
 8004bf4:	d10c      	bne.n	8004c10 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb6>
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	695b      	ldr	r3, [r3, #20]
 8004bfc:	43da      	mvns	r2, r3
 8004bfe:	68bb      	ldr	r3, [r7, #8]
 8004c00:	4013      	ands	r3, r2
 8004c02:	b29b      	uxth	r3, r3
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	bf14      	ite	ne
 8004c08:	2301      	movne	r3, #1
 8004c0a:	2300      	moveq	r3, #0
 8004c0c:	b2db      	uxtb	r3, r3
 8004c0e:	e00b      	b.n	8004c28 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xce>
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	699b      	ldr	r3, [r3, #24]
 8004c16:	43da      	mvns	r2, r3
 8004c18:	68bb      	ldr	r3, [r7, #8]
 8004c1a:	4013      	ands	r3, r2
 8004c1c:	b29b      	uxth	r3, r3
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	bf14      	ite	ne
 8004c22:	2301      	movne	r3, #1
 8004c24:	2300      	moveq	r3, #0
 8004c26:	b2db      	uxtb	r3, r3
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d19e      	bne.n	8004b6a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8004c2c:	2300      	movs	r3, #0
}
 8004c2e:	4618      	mov	r0, r3
 8004c30:	3710      	adds	r7, #16
 8004c32:	46bd      	mov	sp, r7
 8004c34:	bd80      	pop	{r7, pc}

08004c36 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{    
 8004c36:	b580      	push	{r7, lr}
 8004c38:	b084      	sub	sp, #16
 8004c3a:	af00      	add	r7, sp, #0
 8004c3c:	60f8      	str	r0, [r7, #12]
 8004c3e:	60b9      	str	r1, [r7, #8]
 8004c40:	607a      	str	r2, [r7, #4]
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004c42:	e029      	b.n	8004c98 <I2C_WaitOnTXEFlagUntilTimeout+0x62>
  {
    /* Check if a NACK is detected */
    if(I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004c44:	68f8      	ldr	r0, [r7, #12]
 8004c46:	f000 f870 	bl	8004d2a <I2C_IsAcknowledgeFailed>
 8004c4a:	4603      	mov	r3, r0
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d001      	beq.n	8004c54 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004c50:	2301      	movs	r3, #1
 8004c52:	e029      	b.n	8004ca8 <I2C_WaitOnTXEFlagUntilTimeout+0x72>
    }
		
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 8004c54:	68bb      	ldr	r3, [r7, #8]
 8004c56:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004c5a:	d01d      	beq.n	8004c98 <I2C_WaitOnTXEFlagUntilTimeout+0x62>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8004c5c:	68bb      	ldr	r3, [r7, #8]
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d007      	beq.n	8004c72 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004c62:	f7fe f97f 	bl	8002f64 <HAL_GetTick>
 8004c66:	4602      	mov	r2, r0
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	1ad3      	subs	r3, r2, r3
 8004c6c:	68ba      	ldr	r2, [r7, #8]
 8004c6e:	429a      	cmp	r2, r3
 8004c70:	d212      	bcs.n	8004c98 <I2C_WaitOnTXEFlagUntilTimeout+0x62>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c76:	f043 0220 	orr.w	r2, r3, #32
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	641a      	str	r2, [r3, #64]	; 0x40
        hi2c->PreviousState = I2C_STATE_NONE;
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	2200      	movs	r2, #0
 8004c82:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State= HAL_I2C_STATE_READY;
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	2220      	movs	r2, #32
 8004c88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	2200      	movs	r2, #0
 8004c90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8004c94:	2303      	movs	r3, #3
 8004c96:	e007      	b.n	8004ca8 <I2C_WaitOnTXEFlagUntilTimeout+0x72>
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	695b      	ldr	r3, [r3, #20]
 8004c9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ca2:	2b80      	cmp	r3, #128	; 0x80
 8004ca4:	d1ce      	bne.n	8004c44 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;      
 8004ca6:	2300      	movs	r3, #0
}
 8004ca8:	4618      	mov	r0, r3
 8004caa:	3710      	adds	r7, #16
 8004cac:	46bd      	mov	sp, r7
 8004cae:	bd80      	pop	{r7, pc}

08004cb0 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{  
 8004cb0:	b580      	push	{r7, lr}
 8004cb2:	b084      	sub	sp, #16
 8004cb4:	af00      	add	r7, sp, #0
 8004cb6:	60f8      	str	r0, [r7, #12]
 8004cb8:	60b9      	str	r1, [r7, #8]
 8004cba:	607a      	str	r2, [r7, #4]
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004cbc:	e029      	b.n	8004d12 <I2C_WaitOnBTFFlagUntilTimeout+0x62>
  {
    /* Check if a NACK is detected */
    if(I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004cbe:	68f8      	ldr	r0, [r7, #12]
 8004cc0:	f000 f833 	bl	8004d2a <I2C_IsAcknowledgeFailed>
 8004cc4:	4603      	mov	r3, r0
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d001      	beq.n	8004cce <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004cca:	2301      	movs	r3, #1
 8004ccc:	e029      	b.n	8004d22 <I2C_WaitOnBTFFlagUntilTimeout+0x72>
    }

    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 8004cce:	68bb      	ldr	r3, [r7, #8]
 8004cd0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004cd4:	d01d      	beq.n	8004d12 <I2C_WaitOnBTFFlagUntilTimeout+0x62>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8004cd6:	68bb      	ldr	r3, [r7, #8]
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d007      	beq.n	8004cec <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004cdc:	f7fe f942 	bl	8002f64 <HAL_GetTick>
 8004ce0:	4602      	mov	r2, r0
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	1ad3      	subs	r3, r2, r3
 8004ce6:	68ba      	ldr	r2, [r7, #8]
 8004ce8:	429a      	cmp	r2, r3
 8004cea:	d212      	bcs.n	8004d12 <I2C_WaitOnBTFFlagUntilTimeout+0x62>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cf0:	f043 0220 	orr.w	r2, r3, #32
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	641a      	str	r2, [r3, #64]	; 0x40
        hi2c->PreviousState = I2C_STATE_NONE;
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	2200      	movs	r2, #0
 8004cfc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State= HAL_I2C_STATE_READY;
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	2220      	movs	r2, #32
 8004d02:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	2200      	movs	r2, #0
 8004d0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8004d0e:	2303      	movs	r3, #3
 8004d10:	e007      	b.n	8004d22 <I2C_WaitOnBTFFlagUntilTimeout+0x72>
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	695b      	ldr	r3, [r3, #20]
 8004d18:	f003 0304 	and.w	r3, r3, #4
 8004d1c:	2b04      	cmp	r3, #4
 8004d1e:	d1ce      	bne.n	8004cbe <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004d20:	2300      	movs	r3, #0
}
 8004d22:	4618      	mov	r0, r3
 8004d24:	3710      	adds	r7, #16
 8004d26:	46bd      	mov	sp, r7
 8004d28:	bd80      	pop	{r7, pc}

08004d2a <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004d2a:	b480      	push	{r7}
 8004d2c:	b083      	sub	sp, #12
 8004d2e:	af00      	add	r7, sp, #0
 8004d30:	6078      	str	r0, [r7, #4]
  if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	695b      	ldr	r3, [r3, #20]
 8004d38:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004d3c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004d40:	d114      	bne.n	8004d6c <I2C_IsAcknowledgeFailed+0x42>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004d4a:	615a      	str	r2, [r3, #20]

    hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	2204      	movs	r2, #4
 8004d50:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->PreviousState = I2C_STATE_NONE;
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	2200      	movs	r2, #0
 8004d56:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State= HAL_I2C_STATE_READY;
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	2220      	movs	r2, #32
 8004d5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	2200      	movs	r2, #0
 8004d64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004d68:	2301      	movs	r3, #1
 8004d6a:	e000      	b.n	8004d6e <I2C_IsAcknowledgeFailed+0x44>
  }
  return HAL_OK;
 8004d6c:	2300      	movs	r3, #0
}
 8004d6e:	4618      	mov	r0, r3
 8004d70:	370c      	adds	r7, #12
 8004d72:	46bd      	mov	sp, r7
 8004d74:	bc80      	pop	{r7}
 8004d76:	4770      	bx	lr

08004d78 <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 128 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8004d78:	b480      	push	{r7}
 8004d7a:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 8004d7c:	4b03      	ldr	r3, [pc, #12]	; (8004d8c <HAL_PWR_EnableBkUpAccess+0x14>)
 8004d7e:	2201      	movs	r2, #1
 8004d80:	601a      	str	r2, [r3, #0]
}
 8004d82:	bf00      	nop
 8004d84:	46bd      	mov	sp, r7
 8004d86:	bc80      	pop	{r7}
 8004d88:	4770      	bx	lr
 8004d8a:	bf00      	nop
 8004d8c:	420e0020 	.word	0x420e0020

08004d90 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004d90:	b580      	push	{r7, lr}
 8004d92:	b086      	sub	sp, #24
 8004d94:	af00      	add	r7, sp, #0
 8004d96:	6078      	str	r0, [r7, #4]
   uint32_t tickstart = 0U;
 8004d98:	2300      	movs	r3, #0
 8004d9a:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  
  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	f003 0301 	and.w	r3, r3, #1
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	f000 8087 	beq.w	8004eb8 <HAL_RCC_OscConfig+0x128>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
        
    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8004daa:	4b92      	ldr	r3, [pc, #584]	; (8004ff4 <HAL_RCC_OscConfig+0x264>)
 8004dac:	685b      	ldr	r3, [r3, #4]
 8004dae:	f003 030c 	and.w	r3, r3, #12
 8004db2:	2b04      	cmp	r3, #4
 8004db4:	d00c      	beq.n	8004dd0 <HAL_RCC_OscConfig+0x40>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004db6:	4b8f      	ldr	r3, [pc, #572]	; (8004ff4 <HAL_RCC_OscConfig+0x264>)
 8004db8:	685b      	ldr	r3, [r3, #4]
 8004dba:	f003 030c 	and.w	r3, r3, #12
 8004dbe:	2b08      	cmp	r3, #8
 8004dc0:	d112      	bne.n	8004de8 <HAL_RCC_OscConfig+0x58>
 8004dc2:	4b8c      	ldr	r3, [pc, #560]	; (8004ff4 <HAL_RCC_OscConfig+0x264>)
 8004dc4:	685b      	ldr	r3, [r3, #4]
 8004dc6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004dca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004dce:	d10b      	bne.n	8004de8 <HAL_RCC_OscConfig+0x58>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004dd0:	4b88      	ldr	r3, [pc, #544]	; (8004ff4 <HAL_RCC_OscConfig+0x264>)
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d06c      	beq.n	8004eb6 <HAL_RCC_OscConfig+0x126>
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	685b      	ldr	r3, [r3, #4]
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d168      	bne.n	8004eb6 <HAL_RCC_OscConfig+0x126>
      {
        return HAL_ERROR;
 8004de4:	2301      	movs	r3, #1
 8004de6:	e22d      	b.n	8005244 <HAL_RCC_OscConfig+0x4b4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	685b      	ldr	r3, [r3, #4]
 8004dec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004df0:	d106      	bne.n	8004e00 <HAL_RCC_OscConfig+0x70>
 8004df2:	4b80      	ldr	r3, [pc, #512]	; (8004ff4 <HAL_RCC_OscConfig+0x264>)
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	4a7f      	ldr	r2, [pc, #508]	; (8004ff4 <HAL_RCC_OscConfig+0x264>)
 8004df8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004dfc:	6013      	str	r3, [r2, #0]
 8004dfe:	e02e      	b.n	8004e5e <HAL_RCC_OscConfig+0xce>
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	685b      	ldr	r3, [r3, #4]
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d10c      	bne.n	8004e22 <HAL_RCC_OscConfig+0x92>
 8004e08:	4b7a      	ldr	r3, [pc, #488]	; (8004ff4 <HAL_RCC_OscConfig+0x264>)
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	4a79      	ldr	r2, [pc, #484]	; (8004ff4 <HAL_RCC_OscConfig+0x264>)
 8004e0e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004e12:	6013      	str	r3, [r2, #0]
 8004e14:	4b77      	ldr	r3, [pc, #476]	; (8004ff4 <HAL_RCC_OscConfig+0x264>)
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	4a76      	ldr	r2, [pc, #472]	; (8004ff4 <HAL_RCC_OscConfig+0x264>)
 8004e1a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004e1e:	6013      	str	r3, [r2, #0]
 8004e20:	e01d      	b.n	8004e5e <HAL_RCC_OscConfig+0xce>
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	685b      	ldr	r3, [r3, #4]
 8004e26:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004e2a:	d10c      	bne.n	8004e46 <HAL_RCC_OscConfig+0xb6>
 8004e2c:	4b71      	ldr	r3, [pc, #452]	; (8004ff4 <HAL_RCC_OscConfig+0x264>)
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	4a70      	ldr	r2, [pc, #448]	; (8004ff4 <HAL_RCC_OscConfig+0x264>)
 8004e32:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004e36:	6013      	str	r3, [r2, #0]
 8004e38:	4b6e      	ldr	r3, [pc, #440]	; (8004ff4 <HAL_RCC_OscConfig+0x264>)
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	4a6d      	ldr	r2, [pc, #436]	; (8004ff4 <HAL_RCC_OscConfig+0x264>)
 8004e3e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004e42:	6013      	str	r3, [r2, #0]
 8004e44:	e00b      	b.n	8004e5e <HAL_RCC_OscConfig+0xce>
 8004e46:	4b6b      	ldr	r3, [pc, #428]	; (8004ff4 <HAL_RCC_OscConfig+0x264>)
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	4a6a      	ldr	r2, [pc, #424]	; (8004ff4 <HAL_RCC_OscConfig+0x264>)
 8004e4c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004e50:	6013      	str	r3, [r2, #0]
 8004e52:	4b68      	ldr	r3, [pc, #416]	; (8004ff4 <HAL_RCC_OscConfig+0x264>)
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	4a67      	ldr	r2, [pc, #412]	; (8004ff4 <HAL_RCC_OscConfig+0x264>)
 8004e58:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004e5c:	6013      	str	r3, [r2, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	685b      	ldr	r3, [r3, #4]
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d013      	beq.n	8004e8e <HAL_RCC_OscConfig+0xfe>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e66:	f7fe f87d 	bl	8002f64 <HAL_GetTick>
 8004e6a:	6138      	str	r0, [r7, #16]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004e6c:	e008      	b.n	8004e80 <HAL_RCC_OscConfig+0xf0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004e6e:	f7fe f879 	bl	8002f64 <HAL_GetTick>
 8004e72:	4602      	mov	r2, r0
 8004e74:	693b      	ldr	r3, [r7, #16]
 8004e76:	1ad3      	subs	r3, r2, r3
 8004e78:	2b64      	cmp	r3, #100	; 0x64
 8004e7a:	d901      	bls.n	8004e80 <HAL_RCC_OscConfig+0xf0>
          {
            return HAL_TIMEOUT;
 8004e7c:	2303      	movs	r3, #3
 8004e7e:	e1e1      	b.n	8005244 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004e80:	4b5c      	ldr	r3, [pc, #368]	; (8004ff4 <HAL_RCC_OscConfig+0x264>)
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d0f0      	beq.n	8004e6e <HAL_RCC_OscConfig+0xde>
 8004e8c:	e014      	b.n	8004eb8 <HAL_RCC_OscConfig+0x128>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e8e:	f7fe f869 	bl	8002f64 <HAL_GetTick>
 8004e92:	6138      	str	r0, [r7, #16]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004e94:	e008      	b.n	8004ea8 <HAL_RCC_OscConfig+0x118>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004e96:	f7fe f865 	bl	8002f64 <HAL_GetTick>
 8004e9a:	4602      	mov	r2, r0
 8004e9c:	693b      	ldr	r3, [r7, #16]
 8004e9e:	1ad3      	subs	r3, r2, r3
 8004ea0:	2b64      	cmp	r3, #100	; 0x64
 8004ea2:	d901      	bls.n	8004ea8 <HAL_RCC_OscConfig+0x118>
          {
            return HAL_TIMEOUT;
 8004ea4:	2303      	movs	r3, #3
 8004ea6:	e1cd      	b.n	8005244 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004ea8:	4b52      	ldr	r3, [pc, #328]	; (8004ff4 <HAL_RCC_OscConfig+0x264>)
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d1f0      	bne.n	8004e96 <HAL_RCC_OscConfig+0x106>
 8004eb4:	e000      	b.n	8004eb8 <HAL_RCC_OscConfig+0x128>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004eb6:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	f003 0302 	and.w	r3, r3, #2
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d063      	beq.n	8004f8c <HAL_RCC_OscConfig+0x1fc>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8004ec4:	4b4b      	ldr	r3, [pc, #300]	; (8004ff4 <HAL_RCC_OscConfig+0x264>)
 8004ec6:	685b      	ldr	r3, [r3, #4]
 8004ec8:	f003 030c 	and.w	r3, r3, #12
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d00b      	beq.n	8004ee8 <HAL_RCC_OscConfig+0x158>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8004ed0:	4b48      	ldr	r3, [pc, #288]	; (8004ff4 <HAL_RCC_OscConfig+0x264>)
 8004ed2:	685b      	ldr	r3, [r3, #4]
 8004ed4:	f003 030c 	and.w	r3, r3, #12
 8004ed8:	2b08      	cmp	r3, #8
 8004eda:	d11c      	bne.n	8004f16 <HAL_RCC_OscConfig+0x186>
 8004edc:	4b45      	ldr	r3, [pc, #276]	; (8004ff4 <HAL_RCC_OscConfig+0x264>)
 8004ede:	685b      	ldr	r3, [r3, #4]
 8004ee0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d116      	bne.n	8004f16 <HAL_RCC_OscConfig+0x186>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004ee8:	4b42      	ldr	r3, [pc, #264]	; (8004ff4 <HAL_RCC_OscConfig+0x264>)
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	f003 0302 	and.w	r3, r3, #2
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d005      	beq.n	8004f00 <HAL_RCC_OscConfig+0x170>
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	691b      	ldr	r3, [r3, #16]
 8004ef8:	2b01      	cmp	r3, #1
 8004efa:	d001      	beq.n	8004f00 <HAL_RCC_OscConfig+0x170>
      {
        return HAL_ERROR;
 8004efc:	2301      	movs	r3, #1
 8004efe:	e1a1      	b.n	8005244 <HAL_RCC_OscConfig+0x4b4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004f00:	4b3c      	ldr	r3, [pc, #240]	; (8004ff4 <HAL_RCC_OscConfig+0x264>)
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	695b      	ldr	r3, [r3, #20]
 8004f0c:	00db      	lsls	r3, r3, #3
 8004f0e:	4939      	ldr	r1, [pc, #228]	; (8004ff4 <HAL_RCC_OscConfig+0x264>)
 8004f10:	4313      	orrs	r3, r2
 8004f12:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004f14:	e03a      	b.n	8004f8c <HAL_RCC_OscConfig+0x1fc>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	691b      	ldr	r3, [r3, #16]
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d020      	beq.n	8004f60 <HAL_RCC_OscConfig+0x1d0>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004f1e:	4b36      	ldr	r3, [pc, #216]	; (8004ff8 <HAL_RCC_OscConfig+0x268>)
 8004f20:	2201      	movs	r2, #1
 8004f22:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f24:	f7fe f81e 	bl	8002f64 <HAL_GetTick>
 8004f28:	6138      	str	r0, [r7, #16]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004f2a:	e008      	b.n	8004f3e <HAL_RCC_OscConfig+0x1ae>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004f2c:	f7fe f81a 	bl	8002f64 <HAL_GetTick>
 8004f30:	4602      	mov	r2, r0
 8004f32:	693b      	ldr	r3, [r7, #16]
 8004f34:	1ad3      	subs	r3, r2, r3
 8004f36:	2b02      	cmp	r3, #2
 8004f38:	d901      	bls.n	8004f3e <HAL_RCC_OscConfig+0x1ae>
          {
            return HAL_TIMEOUT;
 8004f3a:	2303      	movs	r3, #3
 8004f3c:	e182      	b.n	8005244 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004f3e:	4b2d      	ldr	r3, [pc, #180]	; (8004ff4 <HAL_RCC_OscConfig+0x264>)
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	f003 0302 	and.w	r3, r3, #2
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d0f0      	beq.n	8004f2c <HAL_RCC_OscConfig+0x19c>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004f4a:	4b2a      	ldr	r3, [pc, #168]	; (8004ff4 <HAL_RCC_OscConfig+0x264>)
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	695b      	ldr	r3, [r3, #20]
 8004f56:	00db      	lsls	r3, r3, #3
 8004f58:	4926      	ldr	r1, [pc, #152]	; (8004ff4 <HAL_RCC_OscConfig+0x264>)
 8004f5a:	4313      	orrs	r3, r2
 8004f5c:	600b      	str	r3, [r1, #0]
 8004f5e:	e015      	b.n	8004f8c <HAL_RCC_OscConfig+0x1fc>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004f60:	4b25      	ldr	r3, [pc, #148]	; (8004ff8 <HAL_RCC_OscConfig+0x268>)
 8004f62:	2200      	movs	r2, #0
 8004f64:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f66:	f7fd fffd 	bl	8002f64 <HAL_GetTick>
 8004f6a:	6138      	str	r0, [r7, #16]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004f6c:	e008      	b.n	8004f80 <HAL_RCC_OscConfig+0x1f0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004f6e:	f7fd fff9 	bl	8002f64 <HAL_GetTick>
 8004f72:	4602      	mov	r2, r0
 8004f74:	693b      	ldr	r3, [r7, #16]
 8004f76:	1ad3      	subs	r3, r2, r3
 8004f78:	2b02      	cmp	r3, #2
 8004f7a:	d901      	bls.n	8004f80 <HAL_RCC_OscConfig+0x1f0>
          {
            return HAL_TIMEOUT;
 8004f7c:	2303      	movs	r3, #3
 8004f7e:	e161      	b.n	8005244 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004f80:	4b1c      	ldr	r3, [pc, #112]	; (8004ff4 <HAL_RCC_OscConfig+0x264>)
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	f003 0302 	and.w	r3, r3, #2
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d1f0      	bne.n	8004f6e <HAL_RCC_OscConfig+0x1de>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	f003 0308 	and.w	r3, r3, #8
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d039      	beq.n	800500c <HAL_RCC_OscConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	699b      	ldr	r3, [r3, #24]
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d019      	beq.n	8004fd4 <HAL_RCC_OscConfig+0x244>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004fa0:	4b16      	ldr	r3, [pc, #88]	; (8004ffc <HAL_RCC_OscConfig+0x26c>)
 8004fa2:	2201      	movs	r2, #1
 8004fa4:	601a      	str	r2, [r3, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004fa6:	f7fd ffdd 	bl	8002f64 <HAL_GetTick>
 8004faa:	6138      	str	r0, [r7, #16]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004fac:	e008      	b.n	8004fc0 <HAL_RCC_OscConfig+0x230>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004fae:	f7fd ffd9 	bl	8002f64 <HAL_GetTick>
 8004fb2:	4602      	mov	r2, r0
 8004fb4:	693b      	ldr	r3, [r7, #16]
 8004fb6:	1ad3      	subs	r3, r2, r3
 8004fb8:	2b02      	cmp	r3, #2
 8004fba:	d901      	bls.n	8004fc0 <HAL_RCC_OscConfig+0x230>
        {
          return HAL_TIMEOUT;
 8004fbc:	2303      	movs	r3, #3
 8004fbe:	e141      	b.n	8005244 <HAL_RCC_OscConfig+0x4b4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004fc0:	4b0c      	ldr	r3, [pc, #48]	; (8004ff4 <HAL_RCC_OscConfig+0x264>)
 8004fc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fc4:	f003 0302 	and.w	r3, r3, #2
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d0f0      	beq.n	8004fae <HAL_RCC_OscConfig+0x21e>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms 
          should be added.*/
      RCC_Delay(1);
 8004fcc:	2001      	movs	r0, #1
 8004fce:	f000 facb 	bl	8005568 <RCC_Delay>
 8004fd2:	e01b      	b.n	800500c <HAL_RCC_OscConfig+0x27c>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004fd4:	4b09      	ldr	r3, [pc, #36]	; (8004ffc <HAL_RCC_OscConfig+0x26c>)
 8004fd6:	2200      	movs	r2, #0
 8004fd8:	601a      	str	r2, [r3, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004fda:	f7fd ffc3 	bl	8002f64 <HAL_GetTick>
 8004fde:	6138      	str	r0, [r7, #16]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004fe0:	e00e      	b.n	8005000 <HAL_RCC_OscConfig+0x270>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004fe2:	f7fd ffbf 	bl	8002f64 <HAL_GetTick>
 8004fe6:	4602      	mov	r2, r0
 8004fe8:	693b      	ldr	r3, [r7, #16]
 8004fea:	1ad3      	subs	r3, r2, r3
 8004fec:	2b02      	cmp	r3, #2
 8004fee:	d907      	bls.n	8005000 <HAL_RCC_OscConfig+0x270>
        {
          return HAL_TIMEOUT;
 8004ff0:	2303      	movs	r3, #3
 8004ff2:	e127      	b.n	8005244 <HAL_RCC_OscConfig+0x4b4>
 8004ff4:	40021000 	.word	0x40021000
 8004ff8:	42420000 	.word	0x42420000
 8004ffc:	42420480 	.word	0x42420480
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005000:	4b92      	ldr	r3, [pc, #584]	; (800524c <HAL_RCC_OscConfig+0x4bc>)
 8005002:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005004:	f003 0302 	and.w	r3, r3, #2
 8005008:	2b00      	cmp	r3, #0
 800500a:	d1ea      	bne.n	8004fe2 <HAL_RCC_OscConfig+0x252>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	f003 0304 	and.w	r3, r3, #4
 8005014:	2b00      	cmp	r3, #0
 8005016:	f000 80a6 	beq.w	8005166 <HAL_RCC_OscConfig+0x3d6>
  {
    FlagStatus       pwrclkchanged = RESET;
 800501a:	2300      	movs	r3, #0
 800501c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800501e:	4b8b      	ldr	r3, [pc, #556]	; (800524c <HAL_RCC_OscConfig+0x4bc>)
 8005020:	69db      	ldr	r3, [r3, #28]
 8005022:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005026:	2b00      	cmp	r3, #0
 8005028:	d10d      	bne.n	8005046 <HAL_RCC_OscConfig+0x2b6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800502a:	4b88      	ldr	r3, [pc, #544]	; (800524c <HAL_RCC_OscConfig+0x4bc>)
 800502c:	69db      	ldr	r3, [r3, #28]
 800502e:	4a87      	ldr	r2, [pc, #540]	; (800524c <HAL_RCC_OscConfig+0x4bc>)
 8005030:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005034:	61d3      	str	r3, [r2, #28]
 8005036:	4b85      	ldr	r3, [pc, #532]	; (800524c <HAL_RCC_OscConfig+0x4bc>)
 8005038:	69db      	ldr	r3, [r3, #28]
 800503a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800503e:	60fb      	str	r3, [r7, #12]
 8005040:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8005042:	2301      	movs	r3, #1
 8005044:	75fb      	strb	r3, [r7, #23]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005046:	4b82      	ldr	r3, [pc, #520]	; (8005250 <HAL_RCC_OscConfig+0x4c0>)
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800504e:	2b00      	cmp	r3, #0
 8005050:	d118      	bne.n	8005084 <HAL_RCC_OscConfig+0x2f4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005052:	4b7f      	ldr	r3, [pc, #508]	; (8005250 <HAL_RCC_OscConfig+0x4c0>)
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	4a7e      	ldr	r2, [pc, #504]	; (8005250 <HAL_RCC_OscConfig+0x4c0>)
 8005058:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800505c:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800505e:	f7fd ff81 	bl	8002f64 <HAL_GetTick>
 8005062:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005064:	e008      	b.n	8005078 <HAL_RCC_OscConfig+0x2e8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005066:	f7fd ff7d 	bl	8002f64 <HAL_GetTick>
 800506a:	4602      	mov	r2, r0
 800506c:	693b      	ldr	r3, [r7, #16]
 800506e:	1ad3      	subs	r3, r2, r3
 8005070:	2b64      	cmp	r3, #100	; 0x64
 8005072:	d901      	bls.n	8005078 <HAL_RCC_OscConfig+0x2e8>
        {
          return HAL_TIMEOUT;
 8005074:	2303      	movs	r3, #3
 8005076:	e0e5      	b.n	8005244 <HAL_RCC_OscConfig+0x4b4>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005078:	4b75      	ldr	r3, [pc, #468]	; (8005250 <HAL_RCC_OscConfig+0x4c0>)
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005080:	2b00      	cmp	r3, #0
 8005082:	d0f0      	beq.n	8005066 <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	68db      	ldr	r3, [r3, #12]
 8005088:	2b01      	cmp	r3, #1
 800508a:	d106      	bne.n	800509a <HAL_RCC_OscConfig+0x30a>
 800508c:	4b6f      	ldr	r3, [pc, #444]	; (800524c <HAL_RCC_OscConfig+0x4bc>)
 800508e:	6a1b      	ldr	r3, [r3, #32]
 8005090:	4a6e      	ldr	r2, [pc, #440]	; (800524c <HAL_RCC_OscConfig+0x4bc>)
 8005092:	f043 0301 	orr.w	r3, r3, #1
 8005096:	6213      	str	r3, [r2, #32]
 8005098:	e02d      	b.n	80050f6 <HAL_RCC_OscConfig+0x366>
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	68db      	ldr	r3, [r3, #12]
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d10c      	bne.n	80050bc <HAL_RCC_OscConfig+0x32c>
 80050a2:	4b6a      	ldr	r3, [pc, #424]	; (800524c <HAL_RCC_OscConfig+0x4bc>)
 80050a4:	6a1b      	ldr	r3, [r3, #32]
 80050a6:	4a69      	ldr	r2, [pc, #420]	; (800524c <HAL_RCC_OscConfig+0x4bc>)
 80050a8:	f023 0301 	bic.w	r3, r3, #1
 80050ac:	6213      	str	r3, [r2, #32]
 80050ae:	4b67      	ldr	r3, [pc, #412]	; (800524c <HAL_RCC_OscConfig+0x4bc>)
 80050b0:	6a1b      	ldr	r3, [r3, #32]
 80050b2:	4a66      	ldr	r2, [pc, #408]	; (800524c <HAL_RCC_OscConfig+0x4bc>)
 80050b4:	f023 0304 	bic.w	r3, r3, #4
 80050b8:	6213      	str	r3, [r2, #32]
 80050ba:	e01c      	b.n	80050f6 <HAL_RCC_OscConfig+0x366>
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	68db      	ldr	r3, [r3, #12]
 80050c0:	2b05      	cmp	r3, #5
 80050c2:	d10c      	bne.n	80050de <HAL_RCC_OscConfig+0x34e>
 80050c4:	4b61      	ldr	r3, [pc, #388]	; (800524c <HAL_RCC_OscConfig+0x4bc>)
 80050c6:	6a1b      	ldr	r3, [r3, #32]
 80050c8:	4a60      	ldr	r2, [pc, #384]	; (800524c <HAL_RCC_OscConfig+0x4bc>)
 80050ca:	f043 0304 	orr.w	r3, r3, #4
 80050ce:	6213      	str	r3, [r2, #32]
 80050d0:	4b5e      	ldr	r3, [pc, #376]	; (800524c <HAL_RCC_OscConfig+0x4bc>)
 80050d2:	6a1b      	ldr	r3, [r3, #32]
 80050d4:	4a5d      	ldr	r2, [pc, #372]	; (800524c <HAL_RCC_OscConfig+0x4bc>)
 80050d6:	f043 0301 	orr.w	r3, r3, #1
 80050da:	6213      	str	r3, [r2, #32]
 80050dc:	e00b      	b.n	80050f6 <HAL_RCC_OscConfig+0x366>
 80050de:	4b5b      	ldr	r3, [pc, #364]	; (800524c <HAL_RCC_OscConfig+0x4bc>)
 80050e0:	6a1b      	ldr	r3, [r3, #32]
 80050e2:	4a5a      	ldr	r2, [pc, #360]	; (800524c <HAL_RCC_OscConfig+0x4bc>)
 80050e4:	f023 0301 	bic.w	r3, r3, #1
 80050e8:	6213      	str	r3, [r2, #32]
 80050ea:	4b58      	ldr	r3, [pc, #352]	; (800524c <HAL_RCC_OscConfig+0x4bc>)
 80050ec:	6a1b      	ldr	r3, [r3, #32]
 80050ee:	4a57      	ldr	r2, [pc, #348]	; (800524c <HAL_RCC_OscConfig+0x4bc>)
 80050f0:	f023 0304 	bic.w	r3, r3, #4
 80050f4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	68db      	ldr	r3, [r3, #12]
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d015      	beq.n	800512a <HAL_RCC_OscConfig+0x39a>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80050fe:	f7fd ff31 	bl	8002f64 <HAL_GetTick>
 8005102:	6138      	str	r0, [r7, #16]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005104:	e00a      	b.n	800511c <HAL_RCC_OscConfig+0x38c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005106:	f7fd ff2d 	bl	8002f64 <HAL_GetTick>
 800510a:	4602      	mov	r2, r0
 800510c:	693b      	ldr	r3, [r7, #16]
 800510e:	1ad3      	subs	r3, r2, r3
 8005110:	f241 3288 	movw	r2, #5000	; 0x1388
 8005114:	4293      	cmp	r3, r2
 8005116:	d901      	bls.n	800511c <HAL_RCC_OscConfig+0x38c>
        {
          return HAL_TIMEOUT;
 8005118:	2303      	movs	r3, #3
 800511a:	e093      	b.n	8005244 <HAL_RCC_OscConfig+0x4b4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800511c:	4b4b      	ldr	r3, [pc, #300]	; (800524c <HAL_RCC_OscConfig+0x4bc>)
 800511e:	6a1b      	ldr	r3, [r3, #32]
 8005120:	f003 0302 	and.w	r3, r3, #2
 8005124:	2b00      	cmp	r3, #0
 8005126:	d0ee      	beq.n	8005106 <HAL_RCC_OscConfig+0x376>
 8005128:	e014      	b.n	8005154 <HAL_RCC_OscConfig+0x3c4>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800512a:	f7fd ff1b 	bl	8002f64 <HAL_GetTick>
 800512e:	6138      	str	r0, [r7, #16]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005130:	e00a      	b.n	8005148 <HAL_RCC_OscConfig+0x3b8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005132:	f7fd ff17 	bl	8002f64 <HAL_GetTick>
 8005136:	4602      	mov	r2, r0
 8005138:	693b      	ldr	r3, [r7, #16]
 800513a:	1ad3      	subs	r3, r2, r3
 800513c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005140:	4293      	cmp	r3, r2
 8005142:	d901      	bls.n	8005148 <HAL_RCC_OscConfig+0x3b8>
        {
          return HAL_TIMEOUT;
 8005144:	2303      	movs	r3, #3
 8005146:	e07d      	b.n	8005244 <HAL_RCC_OscConfig+0x4b4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005148:	4b40      	ldr	r3, [pc, #256]	; (800524c <HAL_RCC_OscConfig+0x4bc>)
 800514a:	6a1b      	ldr	r3, [r3, #32]
 800514c:	f003 0302 	and.w	r3, r3, #2
 8005150:	2b00      	cmp	r3, #0
 8005152:	d1ee      	bne.n	8005132 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8005154:	7dfb      	ldrb	r3, [r7, #23]
 8005156:	2b01      	cmp	r3, #1
 8005158:	d105      	bne.n	8005166 <HAL_RCC_OscConfig+0x3d6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800515a:	4b3c      	ldr	r3, [pc, #240]	; (800524c <HAL_RCC_OscConfig+0x4bc>)
 800515c:	69db      	ldr	r3, [r3, #28]
 800515e:	4a3b      	ldr	r2, [pc, #236]	; (800524c <HAL_RCC_OscConfig+0x4bc>)
 8005160:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005164:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	69db      	ldr	r3, [r3, #28]
 800516a:	2b00      	cmp	r3, #0
 800516c:	d069      	beq.n	8005242 <HAL_RCC_OscConfig+0x4b2>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800516e:	4b37      	ldr	r3, [pc, #220]	; (800524c <HAL_RCC_OscConfig+0x4bc>)
 8005170:	685b      	ldr	r3, [r3, #4]
 8005172:	f003 030c 	and.w	r3, r3, #12
 8005176:	2b08      	cmp	r3, #8
 8005178:	d061      	beq.n	800523e <HAL_RCC_OscConfig+0x4ae>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	69db      	ldr	r3, [r3, #28]
 800517e:	2b02      	cmp	r3, #2
 8005180:	d146      	bne.n	8005210 <HAL_RCC_OscConfig+0x480>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005182:	4b34      	ldr	r3, [pc, #208]	; (8005254 <HAL_RCC_OscConfig+0x4c4>)
 8005184:	2200      	movs	r2, #0
 8005186:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005188:	f7fd feec 	bl	8002f64 <HAL_GetTick>
 800518c:	6138      	str	r0, [r7, #16]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800518e:	e008      	b.n	80051a2 <HAL_RCC_OscConfig+0x412>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005190:	f7fd fee8 	bl	8002f64 <HAL_GetTick>
 8005194:	4602      	mov	r2, r0
 8005196:	693b      	ldr	r3, [r7, #16]
 8005198:	1ad3      	subs	r3, r2, r3
 800519a:	2b02      	cmp	r3, #2
 800519c:	d901      	bls.n	80051a2 <HAL_RCC_OscConfig+0x412>
          {
            return HAL_TIMEOUT;
 800519e:	2303      	movs	r3, #3
 80051a0:	e050      	b.n	8005244 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80051a2:	4b2a      	ldr	r3, [pc, #168]	; (800524c <HAL_RCC_OscConfig+0x4bc>)
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d1f0      	bne.n	8005190 <HAL_RCC_OscConfig+0x400>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if(RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	6a1b      	ldr	r3, [r3, #32]
 80051b2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80051b6:	d108      	bne.n	80051ca <HAL_RCC_OscConfig+0x43a>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80051b8:	4b24      	ldr	r3, [pc, #144]	; (800524c <HAL_RCC_OscConfig+0x4bc>)
 80051ba:	685b      	ldr	r3, [r3, #4]
 80051bc:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	689b      	ldr	r3, [r3, #8]
 80051c4:	4921      	ldr	r1, [pc, #132]	; (800524c <HAL_RCC_OscConfig+0x4bc>)
 80051c6:	4313      	orrs	r3, r2
 80051c8:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80051ca:	4b20      	ldr	r3, [pc, #128]	; (800524c <HAL_RCC_OscConfig+0x4bc>)
 80051cc:	685b      	ldr	r3, [r3, #4]
 80051ce:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	6a19      	ldr	r1, [r3, #32]
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051da:	430b      	orrs	r3, r1
 80051dc:	491b      	ldr	r1, [pc, #108]	; (800524c <HAL_RCC_OscConfig+0x4bc>)
 80051de:	4313      	orrs	r3, r2
 80051e0:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80051e2:	4b1c      	ldr	r3, [pc, #112]	; (8005254 <HAL_RCC_OscConfig+0x4c4>)
 80051e4:	2201      	movs	r2, #1
 80051e6:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80051e8:	f7fd febc 	bl	8002f64 <HAL_GetTick>
 80051ec:	6138      	str	r0, [r7, #16]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80051ee:	e008      	b.n	8005202 <HAL_RCC_OscConfig+0x472>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80051f0:	f7fd feb8 	bl	8002f64 <HAL_GetTick>
 80051f4:	4602      	mov	r2, r0
 80051f6:	693b      	ldr	r3, [r7, #16]
 80051f8:	1ad3      	subs	r3, r2, r3
 80051fa:	2b02      	cmp	r3, #2
 80051fc:	d901      	bls.n	8005202 <HAL_RCC_OscConfig+0x472>
          {
            return HAL_TIMEOUT;
 80051fe:	2303      	movs	r3, #3
 8005200:	e020      	b.n	8005244 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005202:	4b12      	ldr	r3, [pc, #72]	; (800524c <HAL_RCC_OscConfig+0x4bc>)
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800520a:	2b00      	cmp	r3, #0
 800520c:	d0f0      	beq.n	80051f0 <HAL_RCC_OscConfig+0x460>
 800520e:	e018      	b.n	8005242 <HAL_RCC_OscConfig+0x4b2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005210:	4b10      	ldr	r3, [pc, #64]	; (8005254 <HAL_RCC_OscConfig+0x4c4>)
 8005212:	2200      	movs	r2, #0
 8005214:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005216:	f7fd fea5 	bl	8002f64 <HAL_GetTick>
 800521a:	6138      	str	r0, [r7, #16]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800521c:	e008      	b.n	8005230 <HAL_RCC_OscConfig+0x4a0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800521e:	f7fd fea1 	bl	8002f64 <HAL_GetTick>
 8005222:	4602      	mov	r2, r0
 8005224:	693b      	ldr	r3, [r7, #16]
 8005226:	1ad3      	subs	r3, r2, r3
 8005228:	2b02      	cmp	r3, #2
 800522a:	d901      	bls.n	8005230 <HAL_RCC_OscConfig+0x4a0>
          {
            return HAL_TIMEOUT;
 800522c:	2303      	movs	r3, #3
 800522e:	e009      	b.n	8005244 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005230:	4b06      	ldr	r3, [pc, #24]	; (800524c <HAL_RCC_OscConfig+0x4bc>)
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005238:	2b00      	cmp	r3, #0
 800523a:	d1f0      	bne.n	800521e <HAL_RCC_OscConfig+0x48e>
 800523c:	e001      	b.n	8005242 <HAL_RCC_OscConfig+0x4b2>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 800523e:	2301      	movs	r3, #1
 8005240:	e000      	b.n	8005244 <HAL_RCC_OscConfig+0x4b4>
    }
  }
  
  return HAL_OK;
 8005242:	2300      	movs	r3, #0
}
 8005244:	4618      	mov	r0, r3
 8005246:	3718      	adds	r7, #24
 8005248:	46bd      	mov	sp, r7
 800524a:	bd80      	pop	{r7, pc}
 800524c:	40021000 	.word	0x40021000
 8005250:	40007000 	.word	0x40007000
 8005254:	42420060 	.word	0x42420060

08005258 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005258:	b580      	push	{r7, lr}
 800525a:	b084      	sub	sp, #16
 800525c:	af00      	add	r7, sp, #0
 800525e:	6078      	str	r0, [r7, #4]
 8005260:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8005262:	2300      	movs	r3, #0
 8005264:	60fb      	str	r3, [r7, #12]
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8005266:	4b72      	ldr	r3, [pc, #456]	; (8005430 <HAL_RCC_ClockConfig+0x1d8>)
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	f003 0307 	and.w	r3, r3, #7
 800526e:	683a      	ldr	r2, [r7, #0]
 8005270:	429a      	cmp	r2, r3
 8005272:	d910      	bls.n	8005296 <HAL_RCC_ClockConfig+0x3e>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005274:	4b6e      	ldr	r3, [pc, #440]	; (8005430 <HAL_RCC_ClockConfig+0x1d8>)
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	f023 0207 	bic.w	r2, r3, #7
 800527c:	496c      	ldr	r1, [pc, #432]	; (8005430 <HAL_RCC_ClockConfig+0x1d8>)
 800527e:	683b      	ldr	r3, [r7, #0]
 8005280:	4313      	orrs	r3, r2
 8005282:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8005284:	4b6a      	ldr	r3, [pc, #424]	; (8005430 <HAL_RCC_ClockConfig+0x1d8>)
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	f003 0307 	and.w	r3, r3, #7
 800528c:	683a      	ldr	r2, [r7, #0]
 800528e:	429a      	cmp	r2, r3
 8005290:	d001      	beq.n	8005296 <HAL_RCC_ClockConfig+0x3e>
    {
      return HAL_ERROR;
 8005292:	2301      	movs	r3, #1
 8005294:	e0c8      	b.n	8005428 <HAL_RCC_ClockConfig+0x1d0>
    }
  }

#endif /* FLASH_ACR_LATENCY */
  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	f003 0302 	and.w	r3, r3, #2
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d008      	beq.n	80052b4 <HAL_RCC_ClockConfig+0x5c>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80052a2:	4b64      	ldr	r3, [pc, #400]	; (8005434 <HAL_RCC_ClockConfig+0x1dc>)
 80052a4:	685b      	ldr	r3, [r3, #4]
 80052a6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	689b      	ldr	r3, [r3, #8]
 80052ae:	4961      	ldr	r1, [pc, #388]	; (8005434 <HAL_RCC_ClockConfig+0x1dc>)
 80052b0:	4313      	orrs	r3, r2
 80052b2:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	f003 0301 	and.w	r3, r3, #1
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d06a      	beq.n	8005396 <HAL_RCC_ClockConfig+0x13e>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	685b      	ldr	r3, [r3, #4]
 80052c4:	2b01      	cmp	r3, #1
 80052c6:	d107      	bne.n	80052d8 <HAL_RCC_ClockConfig+0x80>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80052c8:	4b5a      	ldr	r3, [pc, #360]	; (8005434 <HAL_RCC_ClockConfig+0x1dc>)
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d115      	bne.n	8005300 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 80052d4:	2301      	movs	r3, #1
 80052d6:	e0a7      	b.n	8005428 <HAL_RCC_ClockConfig+0x1d0>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	685b      	ldr	r3, [r3, #4]
 80052dc:	2b02      	cmp	r3, #2
 80052de:	d107      	bne.n	80052f0 <HAL_RCC_ClockConfig+0x98>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80052e0:	4b54      	ldr	r3, [pc, #336]	; (8005434 <HAL_RCC_ClockConfig+0x1dc>)
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d109      	bne.n	8005300 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 80052ec:	2301      	movs	r3, #1
 80052ee:	e09b      	b.n	8005428 <HAL_RCC_ClockConfig+0x1d0>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80052f0:	4b50      	ldr	r3, [pc, #320]	; (8005434 <HAL_RCC_ClockConfig+0x1dc>)
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	f003 0302 	and.w	r3, r3, #2
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d101      	bne.n	8005300 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 80052fc:	2301      	movs	r3, #1
 80052fe:	e093      	b.n	8005428 <HAL_RCC_ClockConfig+0x1d0>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005300:	4b4c      	ldr	r3, [pc, #304]	; (8005434 <HAL_RCC_ClockConfig+0x1dc>)
 8005302:	685b      	ldr	r3, [r3, #4]
 8005304:	f023 0203 	bic.w	r2, r3, #3
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	685b      	ldr	r3, [r3, #4]
 800530c:	4949      	ldr	r1, [pc, #292]	; (8005434 <HAL_RCC_ClockConfig+0x1dc>)
 800530e:	4313      	orrs	r3, r2
 8005310:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005312:	f7fd fe27 	bl	8002f64 <HAL_GetTick>
 8005316:	60f8      	str	r0, [r7, #12]
    
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	685b      	ldr	r3, [r3, #4]
 800531c:	2b01      	cmp	r3, #1
 800531e:	d112      	bne.n	8005346 <HAL_RCC_ClockConfig+0xee>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8005320:	e00a      	b.n	8005338 <HAL_RCC_ClockConfig+0xe0>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005322:	f7fd fe1f 	bl	8002f64 <HAL_GetTick>
 8005326:	4602      	mov	r2, r0
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	1ad3      	subs	r3, r2, r3
 800532c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005330:	4293      	cmp	r3, r2
 8005332:	d901      	bls.n	8005338 <HAL_RCC_ClockConfig+0xe0>
        {
          return HAL_TIMEOUT;
 8005334:	2303      	movs	r3, #3
 8005336:	e077      	b.n	8005428 <HAL_RCC_ClockConfig+0x1d0>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8005338:	4b3e      	ldr	r3, [pc, #248]	; (8005434 <HAL_RCC_ClockConfig+0x1dc>)
 800533a:	685b      	ldr	r3, [r3, #4]
 800533c:	f003 030c 	and.w	r3, r3, #12
 8005340:	2b04      	cmp	r3, #4
 8005342:	d1ee      	bne.n	8005322 <HAL_RCC_ClockConfig+0xca>
 8005344:	e027      	b.n	8005396 <HAL_RCC_ClockConfig+0x13e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	685b      	ldr	r3, [r3, #4]
 800534a:	2b02      	cmp	r3, #2
 800534c:	d11d      	bne.n	800538a <HAL_RCC_ClockConfig+0x132>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800534e:	e00a      	b.n	8005366 <HAL_RCC_ClockConfig+0x10e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005350:	f7fd fe08 	bl	8002f64 <HAL_GetTick>
 8005354:	4602      	mov	r2, r0
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	1ad3      	subs	r3, r2, r3
 800535a:	f241 3288 	movw	r2, #5000	; 0x1388
 800535e:	4293      	cmp	r3, r2
 8005360:	d901      	bls.n	8005366 <HAL_RCC_ClockConfig+0x10e>
        {
          return HAL_TIMEOUT;
 8005362:	2303      	movs	r3, #3
 8005364:	e060      	b.n	8005428 <HAL_RCC_ClockConfig+0x1d0>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005366:	4b33      	ldr	r3, [pc, #204]	; (8005434 <HAL_RCC_ClockConfig+0x1dc>)
 8005368:	685b      	ldr	r3, [r3, #4]
 800536a:	f003 030c 	and.w	r3, r3, #12
 800536e:	2b08      	cmp	r3, #8
 8005370:	d1ee      	bne.n	8005350 <HAL_RCC_ClockConfig+0xf8>
 8005372:	e010      	b.n	8005396 <HAL_RCC_ClockConfig+0x13e>
    }
    else
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005374:	f7fd fdf6 	bl	8002f64 <HAL_GetTick>
 8005378:	4602      	mov	r2, r0
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	1ad3      	subs	r3, r2, r3
 800537e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005382:	4293      	cmp	r3, r2
 8005384:	d901      	bls.n	800538a <HAL_RCC_ClockConfig+0x132>
        {
          return HAL_TIMEOUT;
 8005386:	2303      	movs	r3, #3
 8005388:	e04e      	b.n	8005428 <HAL_RCC_ClockConfig+0x1d0>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800538a:	4b2a      	ldr	r3, [pc, #168]	; (8005434 <HAL_RCC_ClockConfig+0x1dc>)
 800538c:	685b      	ldr	r3, [r3, #4]
 800538e:	f003 030c 	and.w	r3, r3, #12
 8005392:	2b00      	cmp	r3, #0
 8005394:	d1ee      	bne.n	8005374 <HAL_RCC_ClockConfig+0x11c>
      }
    }      
  }    
#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 8005396:	4b26      	ldr	r3, [pc, #152]	; (8005430 <HAL_RCC_ClockConfig+0x1d8>)
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	f003 0307 	and.w	r3, r3, #7
 800539e:	683a      	ldr	r2, [r7, #0]
 80053a0:	429a      	cmp	r2, r3
 80053a2:	d210      	bcs.n	80053c6 <HAL_RCC_ClockConfig+0x16e>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80053a4:	4b22      	ldr	r3, [pc, #136]	; (8005430 <HAL_RCC_ClockConfig+0x1d8>)
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	f023 0207 	bic.w	r2, r3, #7
 80053ac:	4920      	ldr	r1, [pc, #128]	; (8005430 <HAL_RCC_ClockConfig+0x1d8>)
 80053ae:	683b      	ldr	r3, [r7, #0]
 80053b0:	4313      	orrs	r3, r2
 80053b2:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80053b4:	4b1e      	ldr	r3, [pc, #120]	; (8005430 <HAL_RCC_ClockConfig+0x1d8>)
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	f003 0307 	and.w	r3, r3, #7
 80053bc:	683a      	ldr	r2, [r7, #0]
 80053be:	429a      	cmp	r2, r3
 80053c0:	d001      	beq.n	80053c6 <HAL_RCC_ClockConfig+0x16e>
    {
      return HAL_ERROR;
 80053c2:	2301      	movs	r3, #1
 80053c4:	e030      	b.n	8005428 <HAL_RCC_ClockConfig+0x1d0>
    }
  }    
#endif /* FLASH_ACR_LATENCY */

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	f003 0304 	and.w	r3, r3, #4
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d008      	beq.n	80053e4 <HAL_RCC_ClockConfig+0x18c>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80053d2:	4b18      	ldr	r3, [pc, #96]	; (8005434 <HAL_RCC_ClockConfig+0x1dc>)
 80053d4:	685b      	ldr	r3, [r3, #4]
 80053d6:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	68db      	ldr	r3, [r3, #12]
 80053de:	4915      	ldr	r1, [pc, #84]	; (8005434 <HAL_RCC_ClockConfig+0x1dc>)
 80053e0:	4313      	orrs	r3, r2
 80053e2:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	f003 0308 	and.w	r3, r3, #8
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d009      	beq.n	8005404 <HAL_RCC_ClockConfig+0x1ac>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80053f0:	4b10      	ldr	r3, [pc, #64]	; (8005434 <HAL_RCC_ClockConfig+0x1dc>)
 80053f2:	685b      	ldr	r3, [r3, #4]
 80053f4:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	691b      	ldr	r3, [r3, #16]
 80053fc:	00db      	lsls	r3, r3, #3
 80053fe:	490d      	ldr	r1, [pc, #52]	; (8005434 <HAL_RCC_ClockConfig+0x1dc>)
 8005400:	4313      	orrs	r3, r2
 8005402:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005404:	f000 f81c 	bl	8005440 <HAL_RCC_GetSysClockFreq>
 8005408:	4601      	mov	r1, r0
 800540a:	4b0a      	ldr	r3, [pc, #40]	; (8005434 <HAL_RCC_ClockConfig+0x1dc>)
 800540c:	685b      	ldr	r3, [r3, #4]
 800540e:	091b      	lsrs	r3, r3, #4
 8005410:	f003 030f 	and.w	r3, r3, #15
 8005414:	4a08      	ldr	r2, [pc, #32]	; (8005438 <HAL_RCC_ClockConfig+0x1e0>)
 8005416:	5cd3      	ldrb	r3, [r2, r3]
 8005418:	fa21 f303 	lsr.w	r3, r1, r3
 800541c:	4a07      	ldr	r2, [pc, #28]	; (800543c <HAL_RCC_ClockConfig+0x1e4>)
 800541e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8005420:	2000      	movs	r0, #0
 8005422:	f7fd fd75 	bl	8002f10 <HAL_InitTick>
  
  return HAL_OK;
 8005426:	2300      	movs	r3, #0
}
 8005428:	4618      	mov	r0, r3
 800542a:	3710      	adds	r7, #16
 800542c:	46bd      	mov	sp, r7
 800542e:	bd80      	pop	{r7, pc}
 8005430:	40022000 	.word	0x40022000
 8005434:	40021000 	.word	0x40021000
 8005438:	0800abbc 	.word	0x0800abbc
 800543c:	20000018 	.word	0x20000018

08005440 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005440:	b490      	push	{r4, r7}
 8005442:	b08a      	sub	sp, #40	; 0x28
 8005444:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8005446:	4b2a      	ldr	r3, [pc, #168]	; (80054f0 <HAL_RCC_GetSysClockFreq+0xb0>)
 8005448:	1d3c      	adds	r4, r7, #4
 800544a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800544c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8005450:	4b28      	ldr	r3, [pc, #160]	; (80054f4 <HAL_RCC_GetSysClockFreq+0xb4>)
 8005452:	881b      	ldrh	r3, [r3, #0]
 8005454:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8005456:	2300      	movs	r3, #0
 8005458:	61fb      	str	r3, [r7, #28]
 800545a:	2300      	movs	r3, #0
 800545c:	61bb      	str	r3, [r7, #24]
 800545e:	2300      	movs	r3, #0
 8005460:	627b      	str	r3, [r7, #36]	; 0x24
 8005462:	2300      	movs	r3, #0
 8005464:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8005466:	2300      	movs	r3, #0
 8005468:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/
  
  tmpreg = RCC->CFGR;
 800546a:	4b23      	ldr	r3, [pc, #140]	; (80054f8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800546c:	685b      	ldr	r3, [r3, #4]
 800546e:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005470:	69fb      	ldr	r3, [r7, #28]
 8005472:	f003 030c 	and.w	r3, r3, #12
 8005476:	2b04      	cmp	r3, #4
 8005478:	d002      	beq.n	8005480 <HAL_RCC_GetSysClockFreq+0x40>
 800547a:	2b08      	cmp	r3, #8
 800547c:	d003      	beq.n	8005486 <HAL_RCC_GetSysClockFreq+0x46>
 800547e:	e02d      	b.n	80054dc <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005480:	4b1e      	ldr	r3, [pc, #120]	; (80054fc <HAL_RCC_GetSysClockFreq+0xbc>)
 8005482:	623b      	str	r3, [r7, #32]
      break;
 8005484:	e02d      	b.n	80054e2 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8005486:	69fb      	ldr	r3, [r7, #28]
 8005488:	0c9b      	lsrs	r3, r3, #18
 800548a:	f003 030f 	and.w	r3, r3, #15
 800548e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8005492:	4413      	add	r3, r2
 8005494:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8005498:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800549a:	69fb      	ldr	r3, [r7, #28]
 800549c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d013      	beq.n	80054cc <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80054a4:	4b14      	ldr	r3, [pc, #80]	; (80054f8 <HAL_RCC_GetSysClockFreq+0xb8>)
 80054a6:	685b      	ldr	r3, [r3, #4]
 80054a8:	0c5b      	lsrs	r3, r3, #17
 80054aa:	f003 0301 	and.w	r3, r3, #1
 80054ae:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80054b2:	4413      	add	r3, r2
 80054b4:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80054b8:	61bb      	str	r3, [r7, #24]
        {
            pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE / prediv) * pllmul);
 80054ba:	4a10      	ldr	r2, [pc, #64]	; (80054fc <HAL_RCC_GetSysClockFreq+0xbc>)
 80054bc:	69bb      	ldr	r3, [r7, #24]
 80054be:	fbb2 f2f3 	udiv	r2, r2, r3
 80054c2:	697b      	ldr	r3, [r7, #20]
 80054c4:	fb02 f303 	mul.w	r3, r2, r3
 80054c8:	627b      	str	r3, [r7, #36]	; 0x24
 80054ca:	e004      	b.n	80054d6 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80054cc:	697b      	ldr	r3, [r7, #20]
 80054ce:	4a0c      	ldr	r2, [pc, #48]	; (8005500 <HAL_RCC_GetSysClockFreq+0xc0>)
 80054d0:	fb02 f303 	mul.w	r3, r2, r3
 80054d4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80054d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054d8:	623b      	str	r3, [r7, #32]
      break;
 80054da:	e002      	b.n	80054e2 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80054dc:	4b07      	ldr	r3, [pc, #28]	; (80054fc <HAL_RCC_GetSysClockFreq+0xbc>)
 80054de:	623b      	str	r3, [r7, #32]
      break;
 80054e0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80054e2:	6a3b      	ldr	r3, [r7, #32]
}
 80054e4:	4618      	mov	r0, r3
 80054e6:	3728      	adds	r7, #40	; 0x28
 80054e8:	46bd      	mov	sp, r7
 80054ea:	bc90      	pop	{r4, r7}
 80054ec:	4770      	bx	lr
 80054ee:	bf00      	nop
 80054f0:	0800ab94 	.word	0x0800ab94
 80054f4:	0800aba4 	.word	0x0800aba4
 80054f8:	40021000 	.word	0x40021000
 80054fc:	007a1200 	.word	0x007a1200
 8005500:	003d0900 	.word	0x003d0900

08005504 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005504:	b480      	push	{r7}
 8005506:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005508:	4b02      	ldr	r3, [pc, #8]	; (8005514 <HAL_RCC_GetHCLKFreq+0x10>)
 800550a:	681b      	ldr	r3, [r3, #0]
}
 800550c:	4618      	mov	r0, r3
 800550e:	46bd      	mov	sp, r7
 8005510:	bc80      	pop	{r7}
 8005512:	4770      	bx	lr
 8005514:	20000018 	.word	0x20000018

08005518 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005518:	b580      	push	{r7, lr}
 800551a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800551c:	f7ff fff2 	bl	8005504 <HAL_RCC_GetHCLKFreq>
 8005520:	4601      	mov	r1, r0
 8005522:	4b05      	ldr	r3, [pc, #20]	; (8005538 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005524:	685b      	ldr	r3, [r3, #4]
 8005526:	0a1b      	lsrs	r3, r3, #8
 8005528:	f003 0307 	and.w	r3, r3, #7
 800552c:	4a03      	ldr	r2, [pc, #12]	; (800553c <HAL_RCC_GetPCLK1Freq+0x24>)
 800552e:	5cd3      	ldrb	r3, [r2, r3]
 8005530:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8005534:	4618      	mov	r0, r3
 8005536:	bd80      	pop	{r7, pc}
 8005538:	40021000 	.word	0x40021000
 800553c:	0800abcc 	.word	0x0800abcc

08005540 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005540:	b580      	push	{r7, lr}
 8005542:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005544:	f7ff ffde 	bl	8005504 <HAL_RCC_GetHCLKFreq>
 8005548:	4601      	mov	r1, r0
 800554a:	4b05      	ldr	r3, [pc, #20]	; (8005560 <HAL_RCC_GetPCLK2Freq+0x20>)
 800554c:	685b      	ldr	r3, [r3, #4]
 800554e:	0adb      	lsrs	r3, r3, #11
 8005550:	f003 0307 	and.w	r3, r3, #7
 8005554:	4a03      	ldr	r2, [pc, #12]	; (8005564 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005556:	5cd3      	ldrb	r3, [r2, r3]
 8005558:	fa21 f303 	lsr.w	r3, r1, r3
} 
 800555c:	4618      	mov	r0, r3
 800555e:	bd80      	pop	{r7, pc}
 8005560:	40021000 	.word	0x40021000
 8005564:	0800abcc 	.word	0x0800abcc

08005568 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8005568:	b480      	push	{r7}
 800556a:	b085      	sub	sp, #20
 800556c:	af00      	add	r7, sp, #0
 800556e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8005570:	4b0a      	ldr	r3, [pc, #40]	; (800559c <RCC_Delay+0x34>)
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	4a0a      	ldr	r2, [pc, #40]	; (80055a0 <RCC_Delay+0x38>)
 8005576:	fba2 2303 	umull	r2, r3, r2, r3
 800557a:	0a5b      	lsrs	r3, r3, #9
 800557c:	687a      	ldr	r2, [r7, #4]
 800557e:	fb02 f303 	mul.w	r3, r2, r3
 8005582:	60fb      	str	r3, [r7, #12]
  \brief   No Operation
  \details No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__((always_inline)) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
 8005584:	bf00      	nop
  do 
  {
    __NOP();
  } 
  while (Delay --);
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	1e5a      	subs	r2, r3, #1
 800558a:	60fa      	str	r2, [r7, #12]
 800558c:	2b00      	cmp	r3, #0
 800558e:	d1f9      	bne.n	8005584 <RCC_Delay+0x1c>
}
 8005590:	bf00      	nop
 8005592:	3714      	adds	r7, #20
 8005594:	46bd      	mov	sp, r7
 8005596:	bc80      	pop	{r7}
 8005598:	4770      	bx	lr
 800559a:	bf00      	nop
 800559c:	20000018 	.word	0x20000018
 80055a0:	10624dd3 	.word	0x10624dd3

080055a4 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80055a4:	b580      	push	{r7, lr}
 80055a6:	b086      	sub	sp, #24
 80055a8:	af00      	add	r7, sp, #0
 80055aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80055ac:	2300      	movs	r3, #0
 80055ae:	613b      	str	r3, [r7, #16]
 80055b0:	2300      	movs	r3, #0
 80055b2:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*------------------------------- RTC/LCD Configuration ------------------------*/ 
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	f003 0301 	and.w	r3, r3, #1
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d07d      	beq.n	80056bc <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 80055c0:	2300      	movs	r3, #0
 80055c2:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80055c4:	4b4f      	ldr	r3, [pc, #316]	; (8005704 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80055c6:	69db      	ldr	r3, [r3, #28]
 80055c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d10d      	bne.n	80055ec <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 80055d0:	4b4c      	ldr	r3, [pc, #304]	; (8005704 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80055d2:	69db      	ldr	r3, [r3, #28]
 80055d4:	4a4b      	ldr	r2, [pc, #300]	; (8005704 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80055d6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80055da:	61d3      	str	r3, [r2, #28]
 80055dc:	4b49      	ldr	r3, [pc, #292]	; (8005704 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80055de:	69db      	ldr	r3, [r3, #28]
 80055e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80055e4:	60bb      	str	r3, [r7, #8]
 80055e6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80055e8:	2301      	movs	r3, #1
 80055ea:	75fb      	strb	r3, [r7, #23]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80055ec:	4b46      	ldr	r3, [pc, #280]	; (8005708 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d118      	bne.n	800562a <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80055f8:	4b43      	ldr	r3, [pc, #268]	; (8005708 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	4a42      	ldr	r2, [pc, #264]	; (8005708 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80055fe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005602:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005604:	f7fd fcae 	bl	8002f64 <HAL_GetTick>
 8005608:	6138      	str	r0, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800560a:	e008      	b.n	800561e <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800560c:	f7fd fcaa 	bl	8002f64 <HAL_GetTick>
 8005610:	4602      	mov	r2, r0
 8005612:	693b      	ldr	r3, [r7, #16]
 8005614:	1ad3      	subs	r3, r2, r3
 8005616:	2b64      	cmp	r3, #100	; 0x64
 8005618:	d901      	bls.n	800561e <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 800561a:	2303      	movs	r3, #3
 800561c:	e06d      	b.n	80056fa <HAL_RCCEx_PeriphCLKConfig+0x156>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800561e:	4b3a      	ldr	r3, [pc, #232]	; (8005708 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005626:	2b00      	cmp	r3, #0
 8005628:	d0f0      	beq.n	800560c <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }
      
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800562a:	4b36      	ldr	r3, [pc, #216]	; (8005704 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800562c:	6a1b      	ldr	r3, [r3, #32]
 800562e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005632:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	2b00      	cmp	r3, #0
 8005638:	d02e      	beq.n	8005698 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	685b      	ldr	r3, [r3, #4]
 800563e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005642:	68fa      	ldr	r2, [r7, #12]
 8005644:	429a      	cmp	r2, r3
 8005646:	d027      	beq.n	8005698 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005648:	4b2e      	ldr	r3, [pc, #184]	; (8005704 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800564a:	6a1b      	ldr	r3, [r3, #32]
 800564c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005650:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005652:	4b2e      	ldr	r3, [pc, #184]	; (800570c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8005654:	2201      	movs	r2, #1
 8005656:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005658:	4b2c      	ldr	r3, [pc, #176]	; (800570c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800565a:	2200      	movs	r2, #0
 800565c:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800565e:	4a29      	ldr	r2, [pc, #164]	; (8005704 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	f003 0301 	and.w	r3, r3, #1
 800566a:	2b00      	cmp	r3, #0
 800566c:	d014      	beq.n	8005698 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800566e:	f7fd fc79 	bl	8002f64 <HAL_GetTick>
 8005672:	6138      	str	r0, [r7, #16]
      
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005674:	e00a      	b.n	800568c <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005676:	f7fd fc75 	bl	8002f64 <HAL_GetTick>
 800567a:	4602      	mov	r2, r0
 800567c:	693b      	ldr	r3, [r7, #16]
 800567e:	1ad3      	subs	r3, r2, r3
 8005680:	f241 3288 	movw	r2, #5000	; 0x1388
 8005684:	4293      	cmp	r3, r2
 8005686:	d901      	bls.n	800568c <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8005688:	2303      	movs	r3, #3
 800568a:	e036      	b.n	80056fa <HAL_RCCEx_PeriphCLKConfig+0x156>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800568c:	4b1d      	ldr	r3, [pc, #116]	; (8005704 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800568e:	6a1b      	ldr	r3, [r3, #32]
 8005690:	f003 0302 	and.w	r3, r3, #2
 8005694:	2b00      	cmp	r3, #0
 8005696:	d0ee      	beq.n	8005676 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8005698:	4b1a      	ldr	r3, [pc, #104]	; (8005704 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800569a:	6a1b      	ldr	r3, [r3, #32]
 800569c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	685b      	ldr	r3, [r3, #4]
 80056a4:	4917      	ldr	r1, [pc, #92]	; (8005704 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80056a6:	4313      	orrs	r3, r2
 80056a8:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80056aa:	7dfb      	ldrb	r3, [r7, #23]
 80056ac:	2b01      	cmp	r3, #1
 80056ae:	d105      	bne.n	80056bc <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80056b0:	4b14      	ldr	r3, [pc, #80]	; (8005704 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80056b2:	69db      	ldr	r3, [r3, #28]
 80056b4:	4a13      	ldr	r2, [pc, #76]	; (8005704 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80056b6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80056ba:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	f003 0302 	and.w	r3, r3, #2
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	d008      	beq.n	80056da <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));
    
    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80056c8:	4b0e      	ldr	r3, [pc, #56]	; (8005704 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80056ca:	685b      	ldr	r3, [r3, #4]
 80056cc:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	689b      	ldr	r3, [r3, #8]
 80056d4:	490b      	ldr	r1, [pc, #44]	; (8005704 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80056d6:	4313      	orrs	r3, r2
 80056d8:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	f003 0310 	and.w	r3, r3, #16
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d008      	beq.n	80056f8 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80056e6:	4b07      	ldr	r3, [pc, #28]	; (8005704 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80056e8:	685b      	ldr	r3, [r3, #4]
 80056ea:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	68db      	ldr	r3, [r3, #12]
 80056f2:	4904      	ldr	r1, [pc, #16]	; (8005704 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80056f4:	4313      	orrs	r3, r2
 80056f6:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80056f8:	2300      	movs	r3, #0
}
 80056fa:	4618      	mov	r0, r3
 80056fc:	3718      	adds	r7, #24
 80056fe:	46bd      	mov	sp, r7
 8005700:	bd80      	pop	{r7, pc}
 8005702:	bf00      	nop
 8005704:	40021000 	.word	0x40021000
 8005708:	40007000 	.word	0x40007000
 800570c:	42420440 	.word	0x42420440

08005710 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8005710:	b590      	push	{r4, r7, lr}
 8005712:	b08d      	sub	sp, #52	; 0x34
 8005714:	af00      	add	r7, sp, #0
 8005716:	6078      	str	r0, [r7, #4]
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8005718:	4b57      	ldr	r3, [pc, #348]	; (8005878 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 800571a:	f107 040c 	add.w	r4, r7, #12
 800571e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005720:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8005724:	4b55      	ldr	r3, [pc, #340]	; (800587c <HAL_RCCEx_GetPeriphCLKFreq+0x16c>)
 8005726:	881b      	ldrh	r3, [r3, #0]
 8005728:	813b      	strh	r3, [r7, #8]

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 800572a:	2300      	movs	r3, #0
 800572c:	627b      	str	r3, [r7, #36]	; 0x24
 800572e:	2300      	movs	r3, #0
 8005730:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005732:	2300      	movs	r3, #0
 8005734:	623b      	str	r3, [r7, #32]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8005736:	2300      	movs	r3, #0
 8005738:	61fb      	str	r3, [r7, #28]
 800573a:	2300      	movs	r3, #0
 800573c:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));
  
  switch (PeriphClk)
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	2b02      	cmp	r3, #2
 8005742:	f000 8084 	beq.w	800584e <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 8005746:	2b10      	cmp	r3, #16
 8005748:	d002      	beq.n	8005750 <HAL_RCCEx_GetPeriphCLKFreq+0x40>
 800574a:	2b01      	cmp	r3, #1
 800574c:	d049      	beq.n	80057e2 <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
  default: 
    {
      break;
 800574e:	e08d      	b.n	800586c <HAL_RCCEx_GetPeriphCLKFreq+0x15c>
      temp_reg = RCC->CFGR;
 8005750:	4b4b      	ldr	r3, [pc, #300]	; (8005880 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8005752:	685b      	ldr	r3, [r3, #4]
 8005754:	61fb      	str	r3, [r7, #28]
      if (HAL_IS_BIT_SET(RCC->CR,RCC_CR_PLLON))
 8005756:	4b4a      	ldr	r3, [pc, #296]	; (8005880 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800575e:	2b00      	cmp	r3, #0
 8005760:	f000 8083 	beq.w	800586a <HAL_RCCEx_GetPeriphCLKFreq+0x15a>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8005764:	69fb      	ldr	r3, [r7, #28]
 8005766:	0c9b      	lsrs	r3, r3, #18
 8005768:	f003 030f 	and.w	r3, r3, #15
 800576c:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8005770:	4413      	add	r3, r2
 8005772:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8005776:	623b      	str	r3, [r7, #32]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8005778:	69fb      	ldr	r3, [r7, #28]
 800577a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800577e:	2b00      	cmp	r3, #0
 8005780:	d018      	beq.n	80057b4 <HAL_RCCEx_GetPeriphCLKFreq+0xa4>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8005782:	4b3f      	ldr	r3, [pc, #252]	; (8005880 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8005784:	685b      	ldr	r3, [r3, #4]
 8005786:	0c5b      	lsrs	r3, r3, #17
 8005788:	f003 0301 	and.w	r3, r3, #1
 800578c:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8005790:	4413      	add	r3, r2
 8005792:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8005796:	627b      	str	r3, [r7, #36]	; 0x24
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8005798:	69fb      	ldr	r3, [r7, #28]
 800579a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d00d      	beq.n	80057be <HAL_RCCEx_GetPeriphCLKFreq+0xae>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 80057a2:	4a38      	ldr	r2, [pc, #224]	; (8005884 <HAL_RCCEx_GetPeriphCLKFreq+0x174>)
 80057a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057a6:	fbb2 f2f3 	udiv	r2, r2, r3
 80057aa:	6a3b      	ldr	r3, [r7, #32]
 80057ac:	fb02 f303 	mul.w	r3, r2, r3
 80057b0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80057b2:	e004      	b.n	80057be <HAL_RCCEx_GetPeriphCLKFreq+0xae>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80057b4:	6a3b      	ldr	r3, [r7, #32]
 80057b6:	4a34      	ldr	r2, [pc, #208]	; (8005888 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 80057b8:	fb02 f303 	mul.w	r3, r2, r3
 80057bc:	62fb      	str	r3, [r7, #44]	; 0x2c
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 80057be:	4b30      	ldr	r3, [pc, #192]	; (8005880 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 80057c0:	685b      	ldr	r3, [r3, #4]
 80057c2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80057c6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80057ca:	d102      	bne.n	80057d2 <HAL_RCCEx_GetPeriphCLKFreq+0xc2>
          frequency = pllclk;
 80057cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057ce:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 80057d0:	e04b      	b.n	800586a <HAL_RCCEx_GetPeriphCLKFreq+0x15a>
          frequency = (pllclk * 2) / 3;
 80057d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057d4:	005b      	lsls	r3, r3, #1
 80057d6:	4a2d      	ldr	r2, [pc, #180]	; (800588c <HAL_RCCEx_GetPeriphCLKFreq+0x17c>)
 80057d8:	fba2 2303 	umull	r2, r3, r2, r3
 80057dc:	085b      	lsrs	r3, r3, #1
 80057de:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 80057e0:	e043      	b.n	800586a <HAL_RCCEx_GetPeriphCLKFreq+0x15a>
      temp_reg = RCC->BDCR;
 80057e2:	4b27      	ldr	r3, [pc, #156]	; (8005880 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 80057e4:	6a1b      	ldr	r3, [r3, #32]
 80057e6:	61fb      	str	r3, [r7, #28]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 80057e8:	69fb      	ldr	r3, [r7, #28]
 80057ea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80057ee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80057f2:	d108      	bne.n	8005806 <HAL_RCCEx_GetPeriphCLKFreq+0xf6>
 80057f4:	69fb      	ldr	r3, [r7, #28]
 80057f6:	f003 0302 	and.w	r3, r3, #2
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d003      	beq.n	8005806 <HAL_RCCEx_GetPeriphCLKFreq+0xf6>
        frequency = LSE_VALUE;
 80057fe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005802:	62bb      	str	r3, [r7, #40]	; 0x28
 8005804:	e022      	b.n	800584c <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8005806:	69fb      	ldr	r3, [r7, #28]
 8005808:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800580c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005810:	d109      	bne.n	8005826 <HAL_RCCEx_GetPeriphCLKFreq+0x116>
 8005812:	4b1b      	ldr	r3, [pc, #108]	; (8005880 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8005814:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005816:	f003 0302 	and.w	r3, r3, #2
 800581a:	2b00      	cmp	r3, #0
 800581c:	d003      	beq.n	8005826 <HAL_RCCEx_GetPeriphCLKFreq+0x116>
        frequency = LSI_VALUE;
 800581e:	f649 4340 	movw	r3, #40000	; 0x9c40
 8005822:	62bb      	str	r3, [r7, #40]	; 0x28
 8005824:	e012      	b.n	800584c <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8005826:	69fb      	ldr	r3, [r7, #28]
 8005828:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800582c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005830:	d109      	bne.n	8005846 <HAL_RCCEx_GetPeriphCLKFreq+0x136>
 8005832:	4b13      	ldr	r3, [pc, #76]	; (8005880 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800583a:	2b00      	cmp	r3, #0
 800583c:	d003      	beq.n	8005846 <HAL_RCCEx_GetPeriphCLKFreq+0x136>
        frequency = HSE_VALUE / 128U;
 800583e:	f24f 4324 	movw	r3, #62500	; 0xf424
 8005842:	62bb      	str	r3, [r7, #40]	; 0x28
 8005844:	e002      	b.n	800584c <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
        frequency = 0U;
 8005846:	2300      	movs	r3, #0
 8005848:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 800584a:	e00f      	b.n	800586c <HAL_RCCEx_GetPeriphCLKFreq+0x15c>
 800584c:	e00e      	b.n	800586c <HAL_RCCEx_GetPeriphCLKFreq+0x15c>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 800584e:	f7ff fe77 	bl	8005540 <HAL_RCC_GetPCLK2Freq>
 8005852:	4602      	mov	r2, r0
 8005854:	4b0a      	ldr	r3, [pc, #40]	; (8005880 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8005856:	685b      	ldr	r3, [r3, #4]
 8005858:	0b9b      	lsrs	r3, r3, #14
 800585a:	f003 0303 	and.w	r3, r3, #3
 800585e:	3301      	adds	r3, #1
 8005860:	005b      	lsls	r3, r3, #1
 8005862:	fbb2 f3f3 	udiv	r3, r2, r3
 8005866:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8005868:	e000      	b.n	800586c <HAL_RCCEx_GetPeriphCLKFreq+0x15c>
      break;
 800586a:	bf00      	nop
    }
  }
  return(frequency);
 800586c:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 800586e:	4618      	mov	r0, r3
 8005870:	3734      	adds	r7, #52	; 0x34
 8005872:	46bd      	mov	sp, r7
 8005874:	bd90      	pop	{r4, r7, pc}
 8005876:	bf00      	nop
 8005878:	0800aba8 	.word	0x0800aba8
 800587c:	0800abb8 	.word	0x0800abb8
 8005880:	40021000 	.word	0x40021000
 8005884:	007a1200 	.word	0x007a1200
 8005888:	003d0900 	.word	0x003d0900
 800588c:	aaaaaaab 	.word	0xaaaaaaab

08005890 <HAL_RTC_Init>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8005890:	b580      	push	{r7, lr}
 8005892:	b084      	sub	sp, #16
 8005894:	af00      	add	r7, sp, #0
 8005896:	6078      	str	r0, [r7, #4]
  uint32_t prescaler = 0U;
 8005898:	2300      	movs	r3, #0
 800589a:	60fb      	str	r3, [r7, #12]
  /* Check input parameters */
  if(hrtc == NULL)
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d101      	bne.n	80058a6 <HAL_RTC_Init+0x16>
  {
     return HAL_ERROR;
 80058a2:	2301      	movs	r3, #1
 80058a4:	e084      	b.n	80059b0 <HAL_RTC_Init+0x120>
  /* Check the parameters */
  assert_param(IS_RTC_ALL_INSTANCE(hrtc->Instance));
  assert_param(IS_RTC_CALIB_OUTPUT(hrtc->Init.OutPut));
  assert_param(IS_RTC_ASYNCH_PREDIV(hrtc->Init.AsynchPrediv));
    
  if(hrtc->State == HAL_RTC_STATE_RESET)
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	7c5b      	ldrb	r3, [r3, #17]
 80058aa:	b2db      	uxtb	r3, r3
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d105      	bne.n	80058bc <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	2200      	movs	r2, #0
 80058b4:	741a      	strb	r2, [r3, #16]
    
    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80058b6:	6878      	ldr	r0, [r7, #4]
 80058b8:	f7fc fe2a 	bl	8002510 <HAL_RTC_MspInit>
  }
  
  /* Set RTC state */  
  hrtc->State = HAL_RTC_STATE_BUSY;  
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	2202      	movs	r2, #2
 80058c0:	745a      	strb	r2, [r3, #17]
       
  /* Waiting for synchro */
  if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80058c2:	6878      	ldr	r0, [r7, #4]
 80058c4:	f000 f9c8 	bl	8005c58 <HAL_RTC_WaitForSynchro>
 80058c8:	4603      	mov	r3, r0
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d004      	beq.n	80058d8 <HAL_RTC_Init+0x48>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	2204      	movs	r2, #4
 80058d2:	745a      	strb	r2, [r3, #17]
    
    return HAL_ERROR;
 80058d4:	2301      	movs	r3, #1
 80058d6:	e06b      	b.n	80059b0 <HAL_RTC_Init+0x120>
  } 

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 80058d8:	6878      	ldr	r0, [r7, #4]
 80058da:	f000 fa81 	bl	8005de0 <RTC_EnterInitMode>
 80058de:	4603      	mov	r3, r0
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d004      	beq.n	80058ee <HAL_RTC_Init+0x5e>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	2204      	movs	r2, #4
 80058e8:	745a      	strb	r2, [r3, #17]
    
    return HAL_ERROR;
 80058ea:	2301      	movs	r3, #1
 80058ec:	e060      	b.n	80059b0 <HAL_RTC_Init+0x120>
  } 
  else
  { 
    /* Clear Flags Bits */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_OW | RTC_FLAG_ALRAF | RTC_FLAG_SEC));
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	685a      	ldr	r2, [r3, #4]
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	f022 0207 	bic.w	r2, r2, #7
 80058fc:	605a      	str	r2, [r3, #4]
    
    if(hrtc->Init.OutPut != RTC_OUTPUTSOURCE_NONE)
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	689b      	ldr	r3, [r3, #8]
 8005902:	2b00      	cmp	r3, #0
 8005904:	d005      	beq.n	8005912 <HAL_RTC_Init+0x82>
    {
      /* Disable the selected Tamper pin */
      CLEAR_BIT(BKP->CR, BKP_CR_TPE);
 8005906:	4b2c      	ldr	r3, [pc, #176]	; (80059b8 <HAL_RTC_Init+0x128>)
 8005908:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800590a:	4a2b      	ldr	r2, [pc, #172]	; (80059b8 <HAL_RTC_Init+0x128>)
 800590c:	f023 0301 	bic.w	r3, r3, #1
 8005910:	6313      	str	r3, [r2, #48]	; 0x30
    }
    
    /* Set the signal which will be routed to RTC Tamper pin*/
    MODIFY_REG(BKP->RTCCR, (BKP_RTCCR_CCO | BKP_RTCCR_ASOE | BKP_RTCCR_ASOS), hrtc->Init.OutPut);
 8005912:	4b29      	ldr	r3, [pc, #164]	; (80059b8 <HAL_RTC_Init+0x128>)
 8005914:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005916:	f423 7260 	bic.w	r2, r3, #896	; 0x380
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	689b      	ldr	r3, [r3, #8]
 800591e:	4926      	ldr	r1, [pc, #152]	; (80059b8 <HAL_RTC_Init+0x128>)
 8005920:	4313      	orrs	r3, r2
 8005922:	62cb      	str	r3, [r1, #44]	; 0x2c

    if (hrtc->Init.AsynchPrediv != RTC_AUTO_1_SECOND)
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	685b      	ldr	r3, [r3, #4]
 8005928:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800592c:	d003      	beq.n	8005936 <HAL_RTC_Init+0xa6>
    {
      /* RTC Prescaler provided directly by end-user*/
      prescaler = hrtc->Init.AsynchPrediv;
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	685b      	ldr	r3, [r3, #4]
 8005932:	60fb      	str	r3, [r7, #12]
 8005934:	e00e      	b.n	8005954 <HAL_RTC_Init+0xc4>
    }
    else
    {
      /* RTC Prescaler will be automatically calculated to get 1 second timebase */
      /* Get the RTCCLK frequency */
      prescaler = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_RTC);
 8005936:	2001      	movs	r0, #1
 8005938:	f7ff feea 	bl	8005710 <HAL_RCCEx_GetPeriphCLKFreq>
 800593c:	60f8      	str	r0, [r7, #12]

      /* Check that RTC clock is enabled*/
      if (prescaler == 0U)
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	2b00      	cmp	r3, #0
 8005942:	d104      	bne.n	800594e <HAL_RTC_Init+0xbe>
      {
        /* Should not happen. Frequency is not available*/
        hrtc->State = HAL_RTC_STATE_ERROR;
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	2204      	movs	r2, #4
 8005948:	745a      	strb	r2, [r3, #17]
        return HAL_ERROR;
 800594a:	2301      	movs	r3, #1
 800594c:	e030      	b.n	80059b0 <HAL_RTC_Init+0x120>
      }
      else
      {
        /* RTC period = RTCCLK/(RTC_PR + 1) */
        prescaler = prescaler - 1U;
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	3b01      	subs	r3, #1
 8005952:	60fb      	str	r3, [r7, #12]
      }
    }
    
    /* Configure the RTC_PRLH / RTC_PRLL */
    MODIFY_REG(hrtc->Instance->PRLH, RTC_PRLH_PRL, (prescaler >> 16U));
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	689b      	ldr	r3, [r3, #8]
 800595a:	f023 010f 	bic.w	r1, r3, #15
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	0c1a      	lsrs	r2, r3, #16
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	430a      	orrs	r2, r1
 8005968:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hrtc->Instance->PRLL, RTC_PRLL_PRL, (prescaler & RTC_PRLL_PRL));
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	68db      	ldr	r3, [r3, #12]
 8005970:	0c1b      	lsrs	r3, r3, #16
 8005972:	041b      	lsls	r3, r3, #16
 8005974:	68fa      	ldr	r2, [r7, #12]
 8005976:	b291      	uxth	r1, r2
 8005978:	687a      	ldr	r2, [r7, #4]
 800597a:	6812      	ldr	r2, [r2, #0]
 800597c:	430b      	orrs	r3, r1
 800597e:	60d3      	str	r3, [r2, #12]
      
    /* Wait for synchro */
    if(RTC_ExitInitMode(hrtc) != HAL_OK)
 8005980:	6878      	ldr	r0, [r7, #4]
 8005982:	f000 fa55 	bl	8005e30 <RTC_ExitInitMode>
 8005986:	4603      	mov	r3, r0
 8005988:	2b00      	cmp	r3, #0
 800598a:	d004      	beq.n	8005996 <HAL_RTC_Init+0x106>
    {       
      hrtc->State = HAL_RTC_STATE_ERROR;
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	2204      	movs	r2, #4
 8005990:	745a      	strb	r2, [r3, #17]
      
      return HAL_ERROR;
 8005992:	2301      	movs	r3, #1
 8005994:	e00c      	b.n	80059b0 <HAL_RTC_Init+0x120>
    }
    
    /* Initialize date to 1st of January 2000 */
    hrtc->DateToUpdate.Year = 0x00U;
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	2200      	movs	r2, #0
 800599a:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_MONTH_JANUARY;
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	2201      	movs	r2, #1
 80059a0:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date = 0x01U;
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	2201      	movs	r2, #1
 80059a6:	739a      	strb	r2, [r3, #14]

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	2201      	movs	r2, #1
 80059ac:	745a      	strb	r2, [r3, #17]
    
    return HAL_OK;
 80059ae:	2300      	movs	r3, #0
  }
}
 80059b0:	4618      	mov	r0, r3
 80059b2:	3710      	adds	r7, #16
 80059b4:	46bd      	mov	sp, r7
 80059b6:	bd80      	pop	{r7, pc}
 80059b8:	40006c00 	.word	0x40006c00

080059bc <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format 
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80059bc:	b590      	push	{r4, r7, lr}
 80059be:	b087      	sub	sp, #28
 80059c0:	af00      	add	r7, sp, #0
 80059c2:	60f8      	str	r0, [r7, #12]
 80059c4:	60b9      	str	r1, [r7, #8]
 80059c6:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U;
 80059c8:	2300      	movs	r3, #0
 80059ca:	617b      	str	r3, [r7, #20]
 80059cc:	2300      	movs	r3, #0
 80059ce:	613b      	str	r3, [r7, #16]
  
  /* Check input parameters */
  if((hrtc == NULL) || (sTime == NULL))
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d002      	beq.n	80059dc <HAL_RTC_SetTime+0x20>
 80059d6:	68bb      	ldr	r3, [r7, #8]
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d101      	bne.n	80059e0 <HAL_RTC_SetTime+0x24>
  {
     return HAL_ERROR;
 80059dc:	2301      	movs	r3, #1
 80059de:	e080      	b.n	8005ae2 <HAL_RTC_SetTime+0x126>
  
 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));
  
  /* Process Locked */ 
  __HAL_LOCK(hrtc);
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	7c1b      	ldrb	r3, [r3, #16]
 80059e4:	2b01      	cmp	r3, #1
 80059e6:	d101      	bne.n	80059ec <HAL_RTC_SetTime+0x30>
 80059e8:	2302      	movs	r3, #2
 80059ea:	e07a      	b.n	8005ae2 <HAL_RTC_SetTime+0x126>
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	2201      	movs	r2, #1
 80059f0:	741a      	strb	r2, [r3, #16]
  
  hrtc->State = HAL_RTC_STATE_BUSY;
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	2202      	movs	r2, #2
 80059f6:	745a      	strb	r2, [r3, #17]
  
  if(Format == RTC_FORMAT_BIN)
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d113      	bne.n	8005a26 <HAL_RTC_SetTime+0x6a>
  {
    assert_param(IS_RTC_HOUR24(sTime->Hours));
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 80059fe:	68bb      	ldr	r3, [r7, #8]
 8005a00:	781b      	ldrb	r3, [r3, #0]
 8005a02:	461a      	mov	r2, r3
 8005a04:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8005a08:	fb03 f202 	mul.w	r2, r3, r2
                        ((uint32_t)sTime->Minutes * 60U) + \
 8005a0c:	68bb      	ldr	r3, [r7, #8]
 8005a0e:	785b      	ldrb	r3, [r3, #1]
 8005a10:	4619      	mov	r1, r3
 8005a12:	460b      	mov	r3, r1
 8005a14:	011b      	lsls	r3, r3, #4
 8005a16:	1a5b      	subs	r3, r3, r1
 8005a18:	009b      	lsls	r3, r3, #2
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 8005a1a:	4413      	add	r3, r2
                        ((uint32_t)sTime->Seconds));  
 8005a1c:	68ba      	ldr	r2, [r7, #8]
 8005a1e:	7892      	ldrb	r2, [r2, #2]
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 8005a20:	4413      	add	r3, r2
 8005a22:	617b      	str	r3, [r7, #20]
 8005a24:	e01e      	b.n	8005a64 <HAL_RTC_SetTime+0xa8>
  {
    assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));

    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8005a26:	68bb      	ldr	r3, [r7, #8]
 8005a28:	781b      	ldrb	r3, [r3, #0]
 8005a2a:	4618      	mov	r0, r3
 8005a2c:	f000 fa28 	bl	8005e80 <RTC_Bcd2ToByte>
 8005a30:	4603      	mov	r3, r0
 8005a32:	461a      	mov	r2, r3
 8005a34:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8005a38:	fb03 f402 	mul.w	r4, r3, r2
              ((uint32_t)(RTC_Bcd2ToByte(sTime->Minutes)) * 60U) + \
 8005a3c:	68bb      	ldr	r3, [r7, #8]
 8005a3e:	785b      	ldrb	r3, [r3, #1]
 8005a40:	4618      	mov	r0, r3
 8005a42:	f000 fa1d 	bl	8005e80 <RTC_Bcd2ToByte>
 8005a46:	4603      	mov	r3, r0
 8005a48:	461a      	mov	r2, r3
 8005a4a:	4613      	mov	r3, r2
 8005a4c:	011b      	lsls	r3, r3, #4
 8005a4e:	1a9b      	subs	r3, r3, r2
 8005a50:	009b      	lsls	r3, r3, #2
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8005a52:	441c      	add	r4, r3
              ((uint32_t)(RTC_Bcd2ToByte(sTime->Seconds))));   
 8005a54:	68bb      	ldr	r3, [r7, #8]
 8005a56:	789b      	ldrb	r3, [r3, #2]
 8005a58:	4618      	mov	r0, r3
 8005a5a:	f000 fa11 	bl	8005e80 <RTC_Bcd2ToByte>
 8005a5e:	4603      	mov	r3, r0
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8005a60:	4423      	add	r3, r4
 8005a62:	617b      	str	r3, [r7, #20]
  }

  /* Write time counter in RTC registers */
  if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 8005a64:	6979      	ldr	r1, [r7, #20]
 8005a66:	68f8      	ldr	r0, [r7, #12]
 8005a68:	f000 f953 	bl	8005d12 <RTC_WriteTimeCounter>
 8005a6c:	4603      	mov	r3, r0
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d007      	beq.n	8005a82 <HAL_RTC_SetTime+0xc6>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	2204      	movs	r2, #4
 8005a76:	745a      	strb	r2, [r3, #17]
    
    /* Process Unlocked */ 
    __HAL_UNLOCK(hrtc);
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	2200      	movs	r2, #0
 8005a7c:	741a      	strb	r2, [r3, #16]
    
    return HAL_ERROR;
 8005a7e:	2301      	movs	r3, #1
 8005a80:	e02f      	b.n	8005ae2 <HAL_RTC_SetTime+0x126>
  }
  else
  {
    /* Clear Second and overflow flags */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_SEC | RTC_FLAG_OW));
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	685a      	ldr	r2, [r3, #4]
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	f022 0205 	bic.w	r2, r2, #5
 8005a90:	605a      	str	r2, [r3, #4]
    
    /* Read current Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8005a92:	68f8      	ldr	r0, [r7, #12]
 8005a94:	f000 f964 	bl	8005d60 <RTC_ReadAlarmCounter>
 8005a98:	6138      	str	r0, [r7, #16]

    /* Set again alarm to match with new time if enabled */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 8005a9a:	693b      	ldr	r3, [r7, #16]
 8005a9c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005aa0:	d018      	beq.n	8005ad4 <HAL_RTC_SetTime+0x118>
    {
      if(counter_alarm < counter_time)
 8005aa2:	693a      	ldr	r2, [r7, #16]
 8005aa4:	697b      	ldr	r3, [r7, #20]
 8005aa6:	429a      	cmp	r2, r3
 8005aa8:	d214      	bcs.n	8005ad4 <HAL_RTC_SetTime+0x118>
      {
        /* Add 1 day to alarm counter*/
        counter_alarm += (uint32_t)(24U * 3600U);
 8005aaa:	693b      	ldr	r3, [r7, #16]
 8005aac:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
 8005ab0:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8005ab4:	613b      	str	r3, [r7, #16]
        
        /* Write new Alarm counter in RTC registers */
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8005ab6:	6939      	ldr	r1, [r7, #16]
 8005ab8:	68f8      	ldr	r0, [r7, #12]
 8005aba:	f000 f96a 	bl	8005d92 <RTC_WriteAlarmCounter>
 8005abe:	4603      	mov	r3, r0
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d007      	beq.n	8005ad4 <HAL_RTC_SetTime+0x118>
        {
          /* Set RTC state */
          hrtc->State = HAL_RTC_STATE_ERROR;
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	2204      	movs	r2, #4
 8005ac8:	745a      	strb	r2, [r3, #17]
          
          /* Process Unlocked */ 
          __HAL_UNLOCK(hrtc);
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	2200      	movs	r2, #0
 8005ace:	741a      	strb	r2, [r3, #16]
          
          return HAL_ERROR;
 8005ad0:	2301      	movs	r3, #1
 8005ad2:	e006      	b.n	8005ae2 <HAL_RTC_SetTime+0x126>
        }
      }
    }
    
    hrtc->State = HAL_RTC_STATE_READY;
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	2201      	movs	r2, #1
 8005ad8:	745a      	strb	r2, [r3, #17]
  
   __HAL_UNLOCK(hrtc); 
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	2200      	movs	r2, #0
 8005ade:	741a      	strb	r2, [r3, #16]
     
   return HAL_OK;
 8005ae0:	2300      	movs	r3, #0
  }
}
 8005ae2:	4618      	mov	r0, r3
 8005ae4:	371c      	adds	r7, #28
 8005ae6:	46bd      	mov	sp, r7
 8005ae8:	bd90      	pop	{r4, r7, pc}
	...

08005aec <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format 
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8005aec:	b580      	push	{r7, lr}
 8005aee:	b088      	sub	sp, #32
 8005af0:	af00      	add	r7, sp, #0
 8005af2:	60f8      	str	r0, [r7, #12]
 8005af4:	60b9      	str	r1, [r7, #8]
 8005af6:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U, hours = 0U;
 8005af8:	2300      	movs	r3, #0
 8005afa:	61fb      	str	r3, [r7, #28]
 8005afc:	2300      	movs	r3, #0
 8005afe:	61bb      	str	r3, [r7, #24]
 8005b00:	2300      	movs	r3, #0
 8005b02:	617b      	str	r3, [r7, #20]
  
  /* Check input parameters */
  if((hrtc == NULL) || (sDate == NULL))
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d002      	beq.n	8005b10 <HAL_RTC_SetDate+0x24>
 8005b0a:	68bb      	ldr	r3, [r7, #8]
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d101      	bne.n	8005b14 <HAL_RTC_SetDate+0x28>
  {
     return HAL_ERROR;
 8005b10:	2301      	movs	r3, #1
 8005b12:	e097      	b.n	8005c44 <HAL_RTC_SetDate+0x158>
  
  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));
  
 /* Process Locked */ 
 __HAL_LOCK(hrtc);
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	7c1b      	ldrb	r3, [r3, #16]
 8005b18:	2b01      	cmp	r3, #1
 8005b1a:	d101      	bne.n	8005b20 <HAL_RTC_SetDate+0x34>
 8005b1c:	2302      	movs	r3, #2
 8005b1e:	e091      	b.n	8005c44 <HAL_RTC_SetDate+0x158>
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	2201      	movs	r2, #1
 8005b24:	741a      	strb	r2, [r3, #16]
  
  hrtc->State = HAL_RTC_STATE_BUSY; 
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	2202      	movs	r2, #2
 8005b2a:	745a      	strb	r2, [r3, #17]
  
  if(Format == RTC_FORMAT_BIN)
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d10c      	bne.n	8005b4c <HAL_RTC_SetDate+0x60>
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date)); 

    /* Change the current date */
    hrtc->DateToUpdate.Year  = sDate->Year;
 8005b32:	68bb      	ldr	r3, [r7, #8]
 8005b34:	78da      	ldrb	r2, [r3, #3]
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = sDate->Month;
 8005b3a:	68bb      	ldr	r3, [r7, #8]
 8005b3c:	785a      	ldrb	r2, [r3, #1]
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date  = sDate->Date;
 8005b42:	68bb      	ldr	r3, [r7, #8]
 8005b44:	789a      	ldrb	r2, [r3, #2]
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	739a      	strb	r2, [r3, #14]
 8005b4a:	e01a      	b.n	8005b82 <HAL_RTC_SetDate+0x96>
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));
    
    /* Change the current date */
    hrtc->DateToUpdate.Year  = RTC_Bcd2ToByte(sDate->Year);
 8005b4c:	68bb      	ldr	r3, [r7, #8]
 8005b4e:	78db      	ldrb	r3, [r3, #3]
 8005b50:	4618      	mov	r0, r3
 8005b52:	f000 f995 	bl	8005e80 <RTC_Bcd2ToByte>
 8005b56:	4603      	mov	r3, r0
 8005b58:	461a      	mov	r2, r3
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_Bcd2ToByte(sDate->Month);
 8005b5e:	68bb      	ldr	r3, [r7, #8]
 8005b60:	785b      	ldrb	r3, [r3, #1]
 8005b62:	4618      	mov	r0, r3
 8005b64:	f000 f98c 	bl	8005e80 <RTC_Bcd2ToByte>
 8005b68:	4603      	mov	r3, r0
 8005b6a:	461a      	mov	r2, r3
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date  = RTC_Bcd2ToByte(sDate->Date);
 8005b70:	68bb      	ldr	r3, [r7, #8]
 8005b72:	789b      	ldrb	r3, [r3, #2]
 8005b74:	4618      	mov	r0, r3
 8005b76:	f000 f983 	bl	8005e80 <RTC_Bcd2ToByte>
 8005b7a:	4603      	mov	r3, r0
 8005b7c:	461a      	mov	r2, r3
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	739a      	strb	r2, [r3, #14]
  }

  /* WeekDay set by user can be ignored because automatically calculated */
  hrtc->DateToUpdate.WeekDay = RTC_WeekDayNum(hrtc->DateToUpdate.Year, hrtc->DateToUpdate.Month, hrtc->DateToUpdate.Date);
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	7bdb      	ldrb	r3, [r3, #15]
 8005b86:	4618      	mov	r0, r3
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	7b59      	ldrb	r1, [r3, #13]
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	7b9b      	ldrb	r3, [r3, #14]
 8005b90:	461a      	mov	r2, r3
 8005b92:	f000 f993 	bl	8005ebc <RTC_WeekDayNum>
 8005b96:	4603      	mov	r3, r0
 8005b98:	461a      	mov	r2, r3
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	731a      	strb	r2, [r3, #12]
  sDate->WeekDay = hrtc->DateToUpdate.WeekDay;
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	7b1a      	ldrb	r2, [r3, #12]
 8005ba2:	68bb      	ldr	r3, [r7, #8]
 8005ba4:	701a      	strb	r2, [r3, #0]

  /* Reset time to be aligned on the same day */
  /* Read the time counter*/
  counter_time = RTC_ReadTimeCounter(hrtc);
 8005ba6:	68f8      	ldr	r0, [r7, #12]
 8005ba8:	f000 f883 	bl	8005cb2 <RTC_ReadTimeCounter>
 8005bac:	61f8      	str	r0, [r7, #28]

  /* Fill the structure fields with the read parameters */
  hours = counter_time / 3600U;
 8005bae:	69fb      	ldr	r3, [r7, #28]
 8005bb0:	4a26      	ldr	r2, [pc, #152]	; (8005c4c <HAL_RTC_SetDate+0x160>)
 8005bb2:	fba2 2303 	umull	r2, r3, r2, r3
 8005bb6:	0adb      	lsrs	r3, r3, #11
 8005bb8:	617b      	str	r3, [r7, #20]
  if (hours > 24U)
 8005bba:	697b      	ldr	r3, [r7, #20]
 8005bbc:	2b18      	cmp	r3, #24
 8005bbe:	d93a      	bls.n	8005c36 <HAL_RTC_SetDate+0x14a>
  {
    /* Set updated time in decreasing counter by number of days elapsed */
    counter_time -= ((hours / 24U) * 24U * 3600U);
 8005bc0:	697b      	ldr	r3, [r7, #20]
 8005bc2:	4a23      	ldr	r2, [pc, #140]	; (8005c50 <HAL_RTC_SetDate+0x164>)
 8005bc4:	fba2 2303 	umull	r2, r3, r2, r3
 8005bc8:	091b      	lsrs	r3, r3, #4
 8005bca:	4a22      	ldr	r2, [pc, #136]	; (8005c54 <HAL_RTC_SetDate+0x168>)
 8005bcc:	fb02 f303 	mul.w	r3, r2, r3
 8005bd0:	69fa      	ldr	r2, [r7, #28]
 8005bd2:	1ad3      	subs	r3, r2, r3
 8005bd4:	61fb      	str	r3, [r7, #28]
    /* Write time counter in RTC registers */
    if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 8005bd6:	69f9      	ldr	r1, [r7, #28]
 8005bd8:	68f8      	ldr	r0, [r7, #12]
 8005bda:	f000 f89a 	bl	8005d12 <RTC_WriteTimeCounter>
 8005bde:	4603      	mov	r3, r0
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d007      	beq.n	8005bf4 <HAL_RTC_SetDate+0x108>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	2204      	movs	r2, #4
 8005be8:	745a      	strb	r2, [r3, #17]
      
      /* Process Unlocked */ 
      __HAL_UNLOCK(hrtc);
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	2200      	movs	r2, #0
 8005bee:	741a      	strb	r2, [r3, #16]
      
      return HAL_ERROR;
 8005bf0:	2301      	movs	r3, #1
 8005bf2:	e027      	b.n	8005c44 <HAL_RTC_SetDate+0x158>
    }

    /* Read current Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8005bf4:	68f8      	ldr	r0, [r7, #12]
 8005bf6:	f000 f8b3 	bl	8005d60 <RTC_ReadAlarmCounter>
 8005bfa:	61b8      	str	r0, [r7, #24]

    /* Set again alarm to match with new time if enabled */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 8005bfc:	69bb      	ldr	r3, [r7, #24]
 8005bfe:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005c02:	d018      	beq.n	8005c36 <HAL_RTC_SetDate+0x14a>
    {
      if(counter_alarm < counter_time)
 8005c04:	69ba      	ldr	r2, [r7, #24]
 8005c06:	69fb      	ldr	r3, [r7, #28]
 8005c08:	429a      	cmp	r2, r3
 8005c0a:	d214      	bcs.n	8005c36 <HAL_RTC_SetDate+0x14a>
      {
        /* Add 1 day to alarm counter*/
        counter_alarm += (uint32_t)(24U * 3600U);
 8005c0c:	69bb      	ldr	r3, [r7, #24]
 8005c0e:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
 8005c12:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8005c16:	61bb      	str	r3, [r7, #24]
        
        /* Write new Alarm counter in RTC registers */
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8005c18:	69b9      	ldr	r1, [r7, #24]
 8005c1a:	68f8      	ldr	r0, [r7, #12]
 8005c1c:	f000 f8b9 	bl	8005d92 <RTC_WriteAlarmCounter>
 8005c20:	4603      	mov	r3, r0
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d007      	beq.n	8005c36 <HAL_RTC_SetDate+0x14a>
        {
          /* Set RTC state */
          hrtc->State = HAL_RTC_STATE_ERROR;
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	2204      	movs	r2, #4
 8005c2a:	745a      	strb	r2, [r3, #17]
          
          /* Process Unlocked */ 
          __HAL_UNLOCK(hrtc);
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	2200      	movs	r2, #0
 8005c30:	741a      	strb	r2, [r3, #16]
          
          return HAL_ERROR;
 8005c32:	2301      	movs	r3, #1
 8005c34:	e006      	b.n	8005c44 <HAL_RTC_SetDate+0x158>
    }
    

  }

  hrtc->State = HAL_RTC_STATE_READY ;
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	2201      	movs	r2, #1
 8005c3a:	745a      	strb	r2, [r3, #17]
  
  /* Process Unlocked */ 
  __HAL_UNLOCK(hrtc);
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	2200      	movs	r2, #0
 8005c40:	741a      	strb	r2, [r3, #16]
  
  return HAL_OK;    
 8005c42:	2300      	movs	r3, #0
}
 8005c44:	4618      	mov	r0, r3
 8005c46:	3720      	adds	r7, #32
 8005c48:	46bd      	mov	sp, r7
 8005c4a:	bd80      	pop	{r7, pc}
 8005c4c:	91a2b3c5 	.word	0x91a2b3c5
 8005c50:	aaaaaaab 	.word	0xaaaaaaab
 8005c54:	00015180 	.word	0x00015180

08005c58 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8005c58:	b580      	push	{r7, lr}
 8005c5a:	b084      	sub	sp, #16
 8005c5c:	af00      	add	r7, sp, #0
 8005c5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005c60:	2300      	movs	r3, #0
 8005c62:	60fb      	str	r3, [r7, #12]
  
  /* Check input parameters */
  if(hrtc == NULL)
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d101      	bne.n	8005c6e <HAL_RTC_WaitForSynchro+0x16>
  {
     return HAL_ERROR;
 8005c6a:	2301      	movs	r3, #1
 8005c6c:	e01d      	b.n	8005caa <HAL_RTC_WaitForSynchro+0x52>
  }
  
  /* Clear RSF flag */
  CLEAR_BIT(hrtc->Instance->CRL, RTC_FLAG_RSF);
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	685a      	ldr	r2, [r3, #4]
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	f022 0208 	bic.w	r2, r2, #8
 8005c7c:	605a      	str	r2, [r3, #4]
  
  tickstart = HAL_GetTick();
 8005c7e:	f7fd f971 	bl	8002f64 <HAL_GetTick>
 8005c82:	60f8      	str	r0, [r7, #12]
  
  /* Wait the registers to be synchronised */
  while((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 8005c84:	e009      	b.n	8005c9a <HAL_RTC_WaitForSynchro+0x42>
  {
    if((HAL_GetTick() - tickstart ) >  RTC_TIMEOUT_VALUE)
 8005c86:	f7fd f96d 	bl	8002f64 <HAL_GetTick>
 8005c8a:	4602      	mov	r2, r0
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	1ad3      	subs	r3, r2, r3
 8005c90:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005c94:	d901      	bls.n	8005c9a <HAL_RTC_WaitForSynchro+0x42>
    {       
      return HAL_TIMEOUT;
 8005c96:	2303      	movs	r3, #3
 8005c98:	e007      	b.n	8005caa <HAL_RTC_WaitForSynchro+0x52>
  while((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	685b      	ldr	r3, [r3, #4]
 8005ca0:	f003 0308 	and.w	r3, r3, #8
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d0ee      	beq.n	8005c86 <HAL_RTC_WaitForSynchro+0x2e>
    } 
  }
  
  return HAL_OK;
 8005ca8:	2300      	movs	r3, #0
}
 8005caa:	4618      	mov	r0, r3
 8005cac:	3710      	adds	r7, #16
 8005cae:	46bd      	mov	sp, r7
 8005cb0:	bd80      	pop	{r7, pc}

08005cb2 <RTC_ReadTimeCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadTimeCounter(RTC_HandleTypeDef* hrtc)
{
 8005cb2:	b480      	push	{r7}
 8005cb4:	b087      	sub	sp, #28
 8005cb6:	af00      	add	r7, sp, #0
 8005cb8:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, high2 = 0U, low = 0U;
 8005cba:	2300      	movs	r3, #0
 8005cbc:	827b      	strh	r3, [r7, #18]
 8005cbe:	2300      	movs	r3, #0
 8005cc0:	823b      	strh	r3, [r7, #16]
 8005cc2:	2300      	movs	r3, #0
 8005cc4:	81fb      	strh	r3, [r7, #14]
  uint32_t timecounter = 0U;
 8005cc6:	2300      	movs	r3, #0
 8005cc8:	617b      	str	r3, [r7, #20]

  high1 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	699b      	ldr	r3, [r3, #24]
 8005cd0:	827b      	strh	r3, [r7, #18]
  low   = READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT);
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	69db      	ldr	r3, [r3, #28]
 8005cd8:	81fb      	strh	r3, [r7, #14]
  high2 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	699b      	ldr	r3, [r3, #24]
 8005ce0:	823b      	strh	r3, [r7, #16]

  if (high1 != high2)
 8005ce2:	8a7a      	ldrh	r2, [r7, #18]
 8005ce4:	8a3b      	ldrh	r3, [r7, #16]
 8005ce6:	429a      	cmp	r2, r3
 8005ce8:	d008      	beq.n	8005cfc <RTC_ReadTimeCounter+0x4a>
  { /* In this case the counter roll over during reading of CNTL and CNTH registers, 
       read again CNTL register then return the counter value */
    timecounter = (((uint32_t) high2 << 16U) | READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT));
 8005cea:	8a3b      	ldrh	r3, [r7, #16]
 8005cec:	041a      	lsls	r2, r3, #16
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	69db      	ldr	r3, [r3, #28]
 8005cf4:	b29b      	uxth	r3, r3
 8005cf6:	4313      	orrs	r3, r2
 8005cf8:	617b      	str	r3, [r7, #20]
 8005cfa:	e004      	b.n	8005d06 <RTC_ReadTimeCounter+0x54>
  }
  else
  { /* No counter roll over during reading of CNTL and CNTH registers, counter 
       value is equal to first value of CNTL and CNTH */
    timecounter = (((uint32_t) high1 << 16U) | low);
 8005cfc:	8a7b      	ldrh	r3, [r7, #18]
 8005cfe:	041a      	lsls	r2, r3, #16
 8005d00:	89fb      	ldrh	r3, [r7, #14]
 8005d02:	4313      	orrs	r3, r2
 8005d04:	617b      	str	r3, [r7, #20]
  }

  return timecounter;
 8005d06:	697b      	ldr	r3, [r7, #20]
}
 8005d08:	4618      	mov	r0, r3
 8005d0a:	371c      	adds	r7, #28
 8005d0c:	46bd      	mov	sp, r7
 8005d0e:	bc80      	pop	{r7}
 8005d10:	4770      	bx	lr

08005d12 <RTC_WriteTimeCounter>:
  *                the configuration information for RTC.
  * @param  TimeCounter: Counter to write in RTC_CNT registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteTimeCounter(RTC_HandleTypeDef* hrtc, uint32_t TimeCounter)
{
 8005d12:	b580      	push	{r7, lr}
 8005d14:	b084      	sub	sp, #16
 8005d16:	af00      	add	r7, sp, #0
 8005d18:	6078      	str	r0, [r7, #4]
 8005d1a:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005d1c:	2300      	movs	r3, #0
 8005d1e:	73fb      	strb	r3, [r7, #15]
  
  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8005d20:	6878      	ldr	r0, [r7, #4]
 8005d22:	f000 f85d 	bl	8005de0 <RTC_EnterInitMode>
 8005d26:	4603      	mov	r3, r0
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d002      	beq.n	8005d32 <RTC_WriteTimeCounter+0x20>
  {
    status = HAL_ERROR;
 8005d2c:	2301      	movs	r3, #1
 8005d2e:	73fb      	strb	r3, [r7, #15]
 8005d30:	e011      	b.n	8005d56 <RTC_WriteTimeCounter+0x44>
  } 
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->CNTH, (TimeCounter >> 16U));
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	683a      	ldr	r2, [r7, #0]
 8005d38:	0c12      	lsrs	r2, r2, #16
 8005d3a:	619a      	str	r2, [r3, #24]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->CNTL, (TimeCounter & RTC_CNTL_RTC_CNT));
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	683a      	ldr	r2, [r7, #0]
 8005d42:	b292      	uxth	r2, r2
 8005d44:	61da      	str	r2, [r3, #28]
    
    /* Wait for synchro */
    if(RTC_ExitInitMode(hrtc) != HAL_OK)
 8005d46:	6878      	ldr	r0, [r7, #4]
 8005d48:	f000 f872 	bl	8005e30 <RTC_ExitInitMode>
 8005d4c:	4603      	mov	r3, r0
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d001      	beq.n	8005d56 <RTC_WriteTimeCounter+0x44>
    {       
      status = HAL_ERROR;
 8005d52:	2301      	movs	r3, #1
 8005d54:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8005d56:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d58:	4618      	mov	r0, r3
 8005d5a:	3710      	adds	r7, #16
 8005d5c:	46bd      	mov	sp, r7
 8005d5e:	bd80      	pop	{r7, pc}

08005d60 <RTC_ReadAlarmCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadAlarmCounter(RTC_HandleTypeDef* hrtc)
{
 8005d60:	b480      	push	{r7}
 8005d62:	b085      	sub	sp, #20
 8005d64:	af00      	add	r7, sp, #0
 8005d66:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, low = 0U;
 8005d68:	2300      	movs	r3, #0
 8005d6a:	81fb      	strh	r3, [r7, #14]
 8005d6c:	2300      	movs	r3, #0
 8005d6e:	81bb      	strh	r3, [r7, #12]

  high1 = READ_REG(hrtc->Instance->ALRH & RTC_CNTH_RTC_CNT);
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	6a1b      	ldr	r3, [r3, #32]
 8005d76:	81fb      	strh	r3, [r7, #14]
  low   = READ_REG(hrtc->Instance->ALRL & RTC_CNTL_RTC_CNT);
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d7e:	81bb      	strh	r3, [r7, #12]

  return (((uint32_t) high1 << 16U) | low);
 8005d80:	89fb      	ldrh	r3, [r7, #14]
 8005d82:	041a      	lsls	r2, r3, #16
 8005d84:	89bb      	ldrh	r3, [r7, #12]
 8005d86:	4313      	orrs	r3, r2
}
 8005d88:	4618      	mov	r0, r3
 8005d8a:	3714      	adds	r7, #20
 8005d8c:	46bd      	mov	sp, r7
 8005d8e:	bc80      	pop	{r7}
 8005d90:	4770      	bx	lr

08005d92 <RTC_WriteAlarmCounter>:
  *                the configuration information for RTC.
  * @param  AlarmCounter: Counter to write in RTC_ALR registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteAlarmCounter(RTC_HandleTypeDef* hrtc, uint32_t AlarmCounter)
{
 8005d92:	b580      	push	{r7, lr}
 8005d94:	b084      	sub	sp, #16
 8005d96:	af00      	add	r7, sp, #0
 8005d98:	6078      	str	r0, [r7, #4]
 8005d9a:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005d9c:	2300      	movs	r3, #0
 8005d9e:	73fb      	strb	r3, [r7, #15]
  
  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8005da0:	6878      	ldr	r0, [r7, #4]
 8005da2:	f000 f81d 	bl	8005de0 <RTC_EnterInitMode>
 8005da6:	4603      	mov	r3, r0
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	d002      	beq.n	8005db2 <RTC_WriteAlarmCounter+0x20>
  {
    status = HAL_ERROR;
 8005dac:	2301      	movs	r3, #1
 8005dae:	73fb      	strb	r3, [r7, #15]
 8005db0:	e011      	b.n	8005dd6 <RTC_WriteAlarmCounter+0x44>
  } 
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->ALRH, (AlarmCounter >> 16U));
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	683a      	ldr	r2, [r7, #0]
 8005db8:	0c12      	lsrs	r2, r2, #16
 8005dba:	621a      	str	r2, [r3, #32]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->ALRL, (AlarmCounter & RTC_ALRL_RTC_ALR));
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	683a      	ldr	r2, [r7, #0]
 8005dc2:	b292      	uxth	r2, r2
 8005dc4:	625a      	str	r2, [r3, #36]	; 0x24
    
    /* Wait for synchro */
    if(RTC_ExitInitMode(hrtc) != HAL_OK)
 8005dc6:	6878      	ldr	r0, [r7, #4]
 8005dc8:	f000 f832 	bl	8005e30 <RTC_ExitInitMode>
 8005dcc:	4603      	mov	r3, r0
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d001      	beq.n	8005dd6 <RTC_WriteAlarmCounter+0x44>
    {       
      status = HAL_ERROR;
 8005dd2:	2301      	movs	r3, #1
 8005dd4:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8005dd6:	7bfb      	ldrb	r3, [r7, #15]
}
 8005dd8:	4618      	mov	r0, r3
 8005dda:	3710      	adds	r7, #16
 8005ddc:	46bd      	mov	sp, r7
 8005dde:	bd80      	pop	{r7, pc}

08005de0 <RTC_EnterInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8005de0:	b580      	push	{r7, lr}
 8005de2:	b084      	sub	sp, #16
 8005de4:	af00      	add	r7, sp, #0
 8005de6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005de8:	2300      	movs	r3, #0
 8005dea:	60fb      	str	r3, [r7, #12]
  
  tickstart = HAL_GetTick();
 8005dec:	f7fd f8ba 	bl	8002f64 <HAL_GetTick>
 8005df0:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8005df2:	e009      	b.n	8005e08 <RTC_EnterInitMode+0x28>
  {
    if((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8005df4:	f7fd f8b6 	bl	8002f64 <HAL_GetTick>
 8005df8:	4602      	mov	r2, r0
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	1ad3      	subs	r3, r2, r3
 8005dfe:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005e02:	d901      	bls.n	8005e08 <RTC_EnterInitMode+0x28>
    {       
      return HAL_TIMEOUT;
 8005e04:	2303      	movs	r3, #3
 8005e06:	e00f      	b.n	8005e28 <RTC_EnterInitMode+0x48>
  while((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	685b      	ldr	r3, [r3, #4]
 8005e0e:	f003 0320 	and.w	r3, r3, #32
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d0ee      	beq.n	8005df4 <RTC_EnterInitMode+0x14>
    } 
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	685a      	ldr	r2, [r3, #4]
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	f042 0210 	orr.w	r2, r2, #16
 8005e24:	605a      	str	r2, [r3, #4]
  
  
  return HAL_OK;  
 8005e26:	2300      	movs	r3, #0
}
 8005e28:	4618      	mov	r0, r3
 8005e2a:	3710      	adds	r7, #16
 8005e2c:	46bd      	mov	sp, r7
 8005e2e:	bd80      	pop	{r7, pc}

08005e30 <RTC_ExitInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef* hrtc)
{
 8005e30:	b580      	push	{r7, lr}
 8005e32:	b084      	sub	sp, #16
 8005e34:	af00      	add	r7, sp, #0
 8005e36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005e38:	2300      	movs	r3, #0
 8005e3a:	60fb      	str	r3, [r7, #12]
  
  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	685a      	ldr	r2, [r3, #4]
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	f022 0210 	bic.w	r2, r2, #16
 8005e4a:	605a      	str	r2, [r3, #4]
  
  tickstart = HAL_GetTick();
 8005e4c:	f7fd f88a 	bl	8002f64 <HAL_GetTick>
 8005e50:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8005e52:	e009      	b.n	8005e68 <RTC_ExitInitMode+0x38>
  {
    if((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8005e54:	f7fd f886 	bl	8002f64 <HAL_GetTick>
 8005e58:	4602      	mov	r2, r0
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	1ad3      	subs	r3, r2, r3
 8005e5e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005e62:	d901      	bls.n	8005e68 <RTC_ExitInitMode+0x38>
    {       
      return HAL_TIMEOUT;
 8005e64:	2303      	movs	r3, #3
 8005e66:	e007      	b.n	8005e78 <RTC_ExitInitMode+0x48>
  while((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	685b      	ldr	r3, [r3, #4]
 8005e6e:	f003 0320 	and.w	r3, r3, #32
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d0ee      	beq.n	8005e54 <RTC_ExitInitMode+0x24>
    } 
  }
  
  return HAL_OK;  
 8005e76:	2300      	movs	r3, #0
}
 8005e78:	4618      	mov	r0, r3
 8005e7a:	3710      	adds	r7, #16
 8005e7c:	46bd      	mov	sp, r7
 8005e7e:	bd80      	pop	{r7, pc}

08005e80 <RTC_Bcd2ToByte>:
  * @brief  Converts from 2 digit BCD to Binary.
  * @param  Value: BCD value to be converted
  * @retval Converted word
  */
static uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8005e80:	b480      	push	{r7}
 8005e82:	b085      	sub	sp, #20
 8005e84:	af00      	add	r7, sp, #0
 8005e86:	4603      	mov	r3, r0
 8005e88:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0U;
 8005e8a:	2300      	movs	r3, #0
 8005e8c:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10U;
 8005e8e:	79fb      	ldrb	r3, [r7, #7]
 8005e90:	091b      	lsrs	r3, r3, #4
 8005e92:	b2db      	uxtb	r3, r3
 8005e94:	461a      	mov	r2, r3
 8005e96:	4613      	mov	r3, r2
 8005e98:	009b      	lsls	r3, r3, #2
 8005e9a:	4413      	add	r3, r2
 8005e9c:	005b      	lsls	r3, r3, #1
 8005e9e:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0F));
 8005ea0:	79fb      	ldrb	r3, [r7, #7]
 8005ea2:	f003 030f 	and.w	r3, r3, #15
 8005ea6:	b2da      	uxtb	r2, r3
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	b2db      	uxtb	r3, r3
 8005eac:	4413      	add	r3, r2
 8005eae:	b2db      	uxtb	r3, r3
}
 8005eb0:	4618      	mov	r0, r3
 8005eb2:	3714      	adds	r7, #20
 8005eb4:	46bd      	mov	sp, r7
 8005eb6:	bc80      	pop	{r7}
 8005eb8:	4770      	bx	lr
	...

08005ebc <RTC_WeekDayNum>:
  *         @arg RTC_WEEKDAY_FRIDAY
  *         @arg RTC_WEEKDAY_SATURDAY
  *         @arg RTC_WEEKDAY_SUNDAY
  */
static uint8_t RTC_WeekDayNum(uint32_t nYear, uint8_t nMonth, uint8_t nDay)
{
 8005ebc:	b480      	push	{r7}
 8005ebe:	b085      	sub	sp, #20
 8005ec0:	af00      	add	r7, sp, #0
 8005ec2:	6078      	str	r0, [r7, #4]
 8005ec4:	460b      	mov	r3, r1
 8005ec6:	70fb      	strb	r3, [r7, #3]
 8005ec8:	4613      	mov	r3, r2
 8005eca:	70bb      	strb	r3, [r7, #2]
  uint32_t year = 0U, weekday = 0U;
 8005ecc:	2300      	movs	r3, #0
 8005ece:	60bb      	str	r3, [r7, #8]
 8005ed0:	2300      	movs	r3, #0
 8005ed2:	60fb      	str	r3, [r7, #12]

  year = 2000U + nYear;
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 8005eda:	60bb      	str	r3, [r7, #8]
  
  if(nMonth < 3U)
 8005edc:	78fb      	ldrb	r3, [r7, #3]
 8005ede:	2b02      	cmp	r3, #2
 8005ee0:	d82d      	bhi.n	8005f3e <RTC_WeekDayNum+0x82>
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [(year-1)/4] - [(year-1)/100] + [(year-1)/400] } mod 7*/
    weekday = (((23U * nMonth)/9U) + nDay + 4U + year + ((year-1U)/4U) - ((year-1U)/100U) + ((year-1U)/400U)) % 7U;
 8005ee2:	78fa      	ldrb	r2, [r7, #3]
 8005ee4:	4613      	mov	r3, r2
 8005ee6:	005b      	lsls	r3, r3, #1
 8005ee8:	4413      	add	r3, r2
 8005eea:	00db      	lsls	r3, r3, #3
 8005eec:	1a9b      	subs	r3, r3, r2
 8005eee:	4a2c      	ldr	r2, [pc, #176]	; (8005fa0 <RTC_WeekDayNum+0xe4>)
 8005ef0:	fba2 2303 	umull	r2, r3, r2, r3
 8005ef4:	085a      	lsrs	r2, r3, #1
 8005ef6:	78bb      	ldrb	r3, [r7, #2]
 8005ef8:	441a      	add	r2, r3
 8005efa:	68bb      	ldr	r3, [r7, #8]
 8005efc:	441a      	add	r2, r3
 8005efe:	68bb      	ldr	r3, [r7, #8]
 8005f00:	3b01      	subs	r3, #1
 8005f02:	089b      	lsrs	r3, r3, #2
 8005f04:	441a      	add	r2, r3
 8005f06:	68bb      	ldr	r3, [r7, #8]
 8005f08:	3b01      	subs	r3, #1
 8005f0a:	4926      	ldr	r1, [pc, #152]	; (8005fa4 <RTC_WeekDayNum+0xe8>)
 8005f0c:	fba1 1303 	umull	r1, r3, r1, r3
 8005f10:	095b      	lsrs	r3, r3, #5
 8005f12:	1ad2      	subs	r2, r2, r3
 8005f14:	68bb      	ldr	r3, [r7, #8]
 8005f16:	3b01      	subs	r3, #1
 8005f18:	4922      	ldr	r1, [pc, #136]	; (8005fa4 <RTC_WeekDayNum+0xe8>)
 8005f1a:	fba1 1303 	umull	r1, r3, r1, r3
 8005f1e:	09db      	lsrs	r3, r3, #7
 8005f20:	4413      	add	r3, r2
 8005f22:	1d1a      	adds	r2, r3, #4
 8005f24:	4b20      	ldr	r3, [pc, #128]	; (8005fa8 <RTC_WeekDayNum+0xec>)
 8005f26:	fba3 1302 	umull	r1, r3, r3, r2
 8005f2a:	1ad1      	subs	r1, r2, r3
 8005f2c:	0849      	lsrs	r1, r1, #1
 8005f2e:	440b      	add	r3, r1
 8005f30:	0899      	lsrs	r1, r3, #2
 8005f32:	460b      	mov	r3, r1
 8005f34:	00db      	lsls	r3, r3, #3
 8005f36:	1a5b      	subs	r3, r3, r1
 8005f38:	1ad3      	subs	r3, r2, r3
 8005f3a:	60fb      	str	r3, [r7, #12]
 8005f3c:	e029      	b.n	8005f92 <RTC_WeekDayNum+0xd6>
  }
  else
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [year/4] - [year/100] + [year/400] - 2 } mod 7*/
    weekday = (((23U * nMonth)/9U) + nDay + 4U + year + (year/4U) - (year/100U) + (year/400U) - 2U ) % 7U; 
 8005f3e:	78fa      	ldrb	r2, [r7, #3]
 8005f40:	4613      	mov	r3, r2
 8005f42:	005b      	lsls	r3, r3, #1
 8005f44:	4413      	add	r3, r2
 8005f46:	00db      	lsls	r3, r3, #3
 8005f48:	1a9b      	subs	r3, r3, r2
 8005f4a:	4a15      	ldr	r2, [pc, #84]	; (8005fa0 <RTC_WeekDayNum+0xe4>)
 8005f4c:	fba2 2303 	umull	r2, r3, r2, r3
 8005f50:	085a      	lsrs	r2, r3, #1
 8005f52:	78bb      	ldrb	r3, [r7, #2]
 8005f54:	441a      	add	r2, r3
 8005f56:	68bb      	ldr	r3, [r7, #8]
 8005f58:	441a      	add	r2, r3
 8005f5a:	68bb      	ldr	r3, [r7, #8]
 8005f5c:	089b      	lsrs	r3, r3, #2
 8005f5e:	441a      	add	r2, r3
 8005f60:	68bb      	ldr	r3, [r7, #8]
 8005f62:	4910      	ldr	r1, [pc, #64]	; (8005fa4 <RTC_WeekDayNum+0xe8>)
 8005f64:	fba1 1303 	umull	r1, r3, r1, r3
 8005f68:	095b      	lsrs	r3, r3, #5
 8005f6a:	1ad2      	subs	r2, r2, r3
 8005f6c:	68bb      	ldr	r3, [r7, #8]
 8005f6e:	490d      	ldr	r1, [pc, #52]	; (8005fa4 <RTC_WeekDayNum+0xe8>)
 8005f70:	fba1 1303 	umull	r1, r3, r1, r3
 8005f74:	09db      	lsrs	r3, r3, #7
 8005f76:	4413      	add	r3, r2
 8005f78:	1c9a      	adds	r2, r3, #2
 8005f7a:	4b0b      	ldr	r3, [pc, #44]	; (8005fa8 <RTC_WeekDayNum+0xec>)
 8005f7c:	fba3 1302 	umull	r1, r3, r3, r2
 8005f80:	1ad1      	subs	r1, r2, r3
 8005f82:	0849      	lsrs	r1, r1, #1
 8005f84:	440b      	add	r3, r1
 8005f86:	0899      	lsrs	r1, r3, #2
 8005f88:	460b      	mov	r3, r1
 8005f8a:	00db      	lsls	r3, r3, #3
 8005f8c:	1a5b      	subs	r3, r3, r1
 8005f8e:	1ad3      	subs	r3, r2, r3
 8005f90:	60fb      	str	r3, [r7, #12]
  }

  return (uint8_t)weekday;
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	b2db      	uxtb	r3, r3
}
 8005f96:	4618      	mov	r0, r3
 8005f98:	3714      	adds	r7, #20
 8005f9a:	46bd      	mov	sp, r7
 8005f9c:	bc80      	pop	{r7}
 8005f9e:	4770      	bx	lr
 8005fa0:	38e38e39 	.word	0x38e38e39
 8005fa4:	51eb851f 	.word	0x51eb851f
 8005fa8:	24924925 	.word	0x24924925

08005fac <HAL_RTCEx_BKUPWrite>:
  *                                 specify the register (depending devices).
  * @param  Data: Data to be written in the specified RTC Backup data register.                     
  * @retval None
  */
void HAL_RTCEx_BKUPWrite(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister, uint32_t Data)
{
 8005fac:	b480      	push	{r7}
 8005fae:	b087      	sub	sp, #28
 8005fb0:	af00      	add	r7, sp, #0
 8005fb2:	60f8      	str	r0, [r7, #12]
 8005fb4:	60b9      	str	r1, [r7, #8]
 8005fb6:	607a      	str	r2, [r7, #4]
  uint32_t tmp = 0U;
 8005fb8:	2300      	movs	r3, #0
 8005fba:	617b      	str	r3, [r7, #20]
  UNUSED(hrtc);

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));
  
  tmp = (uint32_t)BKP_BASE; 
 8005fbc:	4b07      	ldr	r3, [pc, #28]	; (8005fdc <HAL_RTCEx_BKUPWrite+0x30>)
 8005fbe:	617b      	str	r3, [r7, #20]
  tmp += (BackupRegister * 4U);
 8005fc0:	68bb      	ldr	r3, [r7, #8]
 8005fc2:	009b      	lsls	r3, r3, #2
 8005fc4:	697a      	ldr	r2, [r7, #20]
 8005fc6:	4413      	add	r3, r2
 8005fc8:	617b      	str	r3, [r7, #20]

  *(__IO uint32_t *) tmp = (Data & BKP_DR1_D);
 8005fca:	697b      	ldr	r3, [r7, #20]
 8005fcc:	687a      	ldr	r2, [r7, #4]
 8005fce:	b292      	uxth	r2, r2
 8005fd0:	601a      	str	r2, [r3, #0]
}
 8005fd2:	bf00      	nop
 8005fd4:	371c      	adds	r7, #28
 8005fd6:	46bd      	mov	sp, r7
 8005fd8:	bc80      	pop	{r7}
 8005fda:	4770      	bx	lr
 8005fdc:	40006c00 	.word	0x40006c00

08005fe0 <HAL_RTCEx_BKUPRead>:
  *          This parameter can be: RTC_BKP_DRx where x can be from 1 to 10 (or 42) to 
  *                                 specify the register (depending devices).
  * @retval Read value
  */
uint32_t HAL_RTCEx_BKUPRead(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister)
{
 8005fe0:	b480      	push	{r7}
 8005fe2:	b085      	sub	sp, #20
 8005fe4:	af00      	add	r7, sp, #0
 8005fe6:	6078      	str	r0, [r7, #4]
 8005fe8:	6039      	str	r1, [r7, #0]
  uint32_t backupregister = 0U;
 8005fea:	2300      	movs	r3, #0
 8005fec:	60fb      	str	r3, [r7, #12]
  uint32_t pvalue = 0U;
 8005fee:	2300      	movs	r3, #0
 8005ff0:	60bb      	str	r3, [r7, #8]
  UNUSED(hrtc);

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  backupregister = (uint32_t)BKP_BASE; 
 8005ff2:	4b08      	ldr	r3, [pc, #32]	; (8006014 <HAL_RTCEx_BKUPRead+0x34>)
 8005ff4:	60fb      	str	r3, [r7, #12]
  backupregister += (BackupRegister * 4U);
 8005ff6:	683b      	ldr	r3, [r7, #0]
 8005ff8:	009b      	lsls	r3, r3, #2
 8005ffa:	68fa      	ldr	r2, [r7, #12]
 8005ffc:	4413      	add	r3, r2
 8005ffe:	60fb      	str	r3, [r7, #12]
  
  pvalue = (*(__IO uint32_t *)(backupregister)) & BKP_DR1_D;
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	b29b      	uxth	r3, r3
 8006006:	60bb      	str	r3, [r7, #8]

  /* Read the specified register */
  return pvalue;
 8006008:	68bb      	ldr	r3, [r7, #8]
}
 800600a:	4618      	mov	r0, r3
 800600c:	3714      	adds	r7, #20
 800600e:	46bd      	mov	sp, r7
 8006010:	bc80      	pop	{r7}
 8006012:	4770      	bx	lr
 8006014:	40006c00 	.word	0x40006c00

08006018 <HAL_TIM_PWM_Init>:
  *         parameters in the TIM_HandleTypeDef and create the associated handle.
  * @param  htim : TIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006018:	b580      	push	{r7, lr}
 800601a:	b082      	sub	sp, #8
 800601c:	af00      	add	r7, sp, #0
 800601e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if(htim == NULL)
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	2b00      	cmp	r3, #0
 8006024:	d101      	bne.n	800602a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006026:	2301      	movs	r3, #1
 8006028:	e01d      	b.n	8006066 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if(htim->State == HAL_TIM_STATE_RESET)
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006030:	b2db      	uxtb	r3, r3
 8006032:	2b00      	cmp	r3, #0
 8006034:	d106      	bne.n	8006044 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	2200      	movs	r2, #0
 800603a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800603e:	6878      	ldr	r0, [r7, #4]
 8006040:	f7fc fbf8 	bl	8002834 <HAL_TIM_PWM_MspInit>
  }

  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	2202      	movs	r2, #2
 8006048:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	681a      	ldr	r2, [r3, #0]
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	3304      	adds	r3, #4
 8006054:	4619      	mov	r1, r3
 8006056:	4610      	mov	r0, r2
 8006058:	f000 f8f8 	bl	800624c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	2201      	movs	r2, #1
 8006060:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006064:	2300      	movs	r3, #0
}
 8006066:	4618      	mov	r0, r3
 8006068:	3708      	adds	r7, #8
 800606a:	46bd      	mov	sp, r7
 800606c:	bd80      	pop	{r7, pc}
	...

08006070 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006070:	b580      	push	{r7, lr}
 8006072:	b082      	sub	sp, #8
 8006074:	af00      	add	r7, sp, #0
 8006076:	6078      	str	r0, [r7, #4]
 8006078:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	2201      	movs	r2, #1
 8006080:	6839      	ldr	r1, [r7, #0]
 8006082:	4618      	mov	r0, r3
 8006084:	f000 fae8 	bl	8006658 <TIM_CCxChannelCmd>

  if(IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	4a0b      	ldr	r2, [pc, #44]	; (80060bc <HAL_TIM_PWM_Start+0x4c>)
 800608e:	4293      	cmp	r3, r2
 8006090:	d107      	bne.n	80060a2 <HAL_TIM_PWM_Start+0x32>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80060a0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	681a      	ldr	r2, [r3, #0]
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	f042 0201 	orr.w	r2, r2, #1
 80060b0:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80060b2:	2300      	movs	r3, #0
}
 80060b4:	4618      	mov	r0, r3
 80060b6:	3708      	adds	r7, #8
 80060b8:	46bd      	mov	sp, r7
 80060ba:	bd80      	pop	{r7, pc}
 80060bc:	40012c00 	.word	0x40012c00

080060c0 <HAL_TIM_PWM_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim, TIM_OC_InitTypeDef* sConfig, uint32_t Channel)
{
 80060c0:	b580      	push	{r7, lr}
 80060c2:	b084      	sub	sp, #16
 80060c4:	af00      	add	r7, sp, #0
 80060c6:	60f8      	str	r0, [r7, #12]
 80060c8:	60b9      	str	r1, [r7, #8]
 80060ca:	607a      	str	r2, [r7, #4]
  __HAL_LOCK(htim);
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80060d2:	2b01      	cmp	r3, #1
 80060d4:	d101      	bne.n	80060da <HAL_TIM_PWM_ConfigChannel+0x1a>
 80060d6:	2302      	movs	r3, #2
 80060d8:	e0b4      	b.n	8006244 <HAL_TIM_PWM_ConfigChannel+0x184>
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	2201      	movs	r2, #1
 80060de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  htim->State = HAL_TIM_STATE_BUSY;
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	2202      	movs	r2, #2
 80060e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	2b0c      	cmp	r3, #12
 80060ee:	f200 809f 	bhi.w	8006230 <HAL_TIM_PWM_ConfigChannel+0x170>
 80060f2:	a201      	add	r2, pc, #4	; (adr r2, 80060f8 <HAL_TIM_PWM_ConfigChannel+0x38>)
 80060f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060f8:	0800612d 	.word	0x0800612d
 80060fc:	08006231 	.word	0x08006231
 8006100:	08006231 	.word	0x08006231
 8006104:	08006231 	.word	0x08006231
 8006108:	0800616d 	.word	0x0800616d
 800610c:	08006231 	.word	0x08006231
 8006110:	08006231 	.word	0x08006231
 8006114:	08006231 	.word	0x08006231
 8006118:	080061af 	.word	0x080061af
 800611c:	08006231 	.word	0x08006231
 8006120:	08006231 	.word	0x08006231
 8006124:	08006231 	.word	0x08006231
 8006128:	080061ef 	.word	0x080061ef
  {
    case TIM_CHANNEL_1:
    {
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	68b9      	ldr	r1, [r7, #8]
 8006132:	4618      	mov	r0, r3
 8006134:	f000 f8f0 	bl	8006318 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	699a      	ldr	r2, [r3, #24]
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	f042 0208 	orr.w	r2, r2, #8
 8006146:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	699a      	ldr	r2, [r3, #24]
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	f022 0204 	bic.w	r2, r2, #4
 8006156:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	6999      	ldr	r1, [r3, #24]
 800615e:	68bb      	ldr	r3, [r7, #8]
 8006160:	691a      	ldr	r2, [r3, #16]
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	430a      	orrs	r2, r1
 8006168:	619a      	str	r2, [r3, #24]
    }
    break;
 800616a:	e062      	b.n	8006232 <HAL_TIM_PWM_ConfigChannel+0x172>

    case TIM_CHANNEL_2:
    {
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	68b9      	ldr	r1, [r7, #8]
 8006172:	4618      	mov	r0, r3
 8006174:	f000 f93c 	bl	80063f0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	699a      	ldr	r2, [r3, #24]
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006186:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	699a      	ldr	r2, [r3, #24]
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006196:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8;
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	6999      	ldr	r1, [r3, #24]
 800619e:	68bb      	ldr	r3, [r7, #8]
 80061a0:	691b      	ldr	r3, [r3, #16]
 80061a2:	021a      	lsls	r2, r3, #8
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	430a      	orrs	r2, r1
 80061aa:	619a      	str	r2, [r3, #24]
    }
    break;
 80061ac:	e041      	b.n	8006232 <HAL_TIM_PWM_ConfigChannel+0x172>

    case TIM_CHANNEL_3:
    {
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));
      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	68b9      	ldr	r1, [r7, #8]
 80061b4:	4618      	mov	r0, r3
 80061b6:	f000 f98b 	bl	80064d0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	69da      	ldr	r2, [r3, #28]
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	f042 0208 	orr.w	r2, r2, #8
 80061c8:	61da      	str	r2, [r3, #28]

     /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	69da      	ldr	r2, [r3, #28]
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	f022 0204 	bic.w	r2, r2, #4
 80061d8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	69d9      	ldr	r1, [r3, #28]
 80061e0:	68bb      	ldr	r3, [r7, #8]
 80061e2:	691a      	ldr	r2, [r3, #16]
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	430a      	orrs	r2, r1
 80061ea:	61da      	str	r2, [r3, #28]
    }
    break;
 80061ec:	e021      	b.n	8006232 <HAL_TIM_PWM_ConfigChannel+0x172>

    case TIM_CHANNEL_4:
    {
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));
      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	68b9      	ldr	r1, [r7, #8]
 80061f4:	4618      	mov	r0, r3
 80061f6:	f000 f9db 	bl	80065b0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	69da      	ldr	r2, [r3, #28]
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006208:	61da      	str	r2, [r3, #28]

     /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	69da      	ldr	r2, [r3, #28]
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006218:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8;
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	69d9      	ldr	r1, [r3, #28]
 8006220:	68bb      	ldr	r3, [r7, #8]
 8006222:	691b      	ldr	r3, [r3, #16]
 8006224:	021a      	lsls	r2, r3, #8
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	430a      	orrs	r2, r1
 800622c:	61da      	str	r2, [r3, #28]
    }
    break;
 800622e:	e000      	b.n	8006232 <HAL_TIM_PWM_ConfigChannel+0x172>

    default:
    break;
 8006230:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	2201      	movs	r2, #1
 8006236:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	2200      	movs	r2, #0
 800623e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006242:	2300      	movs	r3, #0
}
 8006244:	4618      	mov	r0, r3
 8006246:	3710      	adds	r7, #16
 8006248:	46bd      	mov	sp, r7
 800624a:	bd80      	pop	{r7, pc}

0800624c <TIM_Base_SetConfig>:
  * @param  TIMx : TIM periheral
  * @param  Structure : TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800624c:	b480      	push	{r7}
 800624e:	b085      	sub	sp, #20
 8006250:	af00      	add	r7, sp, #0
 8006252:	6078      	str	r0, [r7, #4]
 8006254:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1 = 0U;
 8006256:	2300      	movs	r3, #0
 8006258:	60fb      	str	r3, [r7, #12]
  tmpcr1 = TIMx->CR1;
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	4a2a      	ldr	r2, [pc, #168]	; (800630c <TIM_Base_SetConfig+0xc0>)
 8006264:	4293      	cmp	r3, r2
 8006266:	d00b      	beq.n	8006280 <TIM_Base_SetConfig+0x34>
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800626e:	d007      	beq.n	8006280 <TIM_Base_SetConfig+0x34>
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	4a27      	ldr	r2, [pc, #156]	; (8006310 <TIM_Base_SetConfig+0xc4>)
 8006274:	4293      	cmp	r3, r2
 8006276:	d003      	beq.n	8006280 <TIM_Base_SetConfig+0x34>
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	4a26      	ldr	r2, [pc, #152]	; (8006314 <TIM_Base_SetConfig+0xc8>)
 800627c:	4293      	cmp	r3, r2
 800627e:	d108      	bne.n	8006292 <TIM_Base_SetConfig+0x46>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006286:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006288:	683b      	ldr	r3, [r7, #0]
 800628a:	685b      	ldr	r3, [r3, #4]
 800628c:	68fa      	ldr	r2, [r7, #12]
 800628e:	4313      	orrs	r3, r2
 8006290:	60fb      	str	r3, [r7, #12]
  }

  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	4a1d      	ldr	r2, [pc, #116]	; (800630c <TIM_Base_SetConfig+0xc0>)
 8006296:	4293      	cmp	r3, r2
 8006298:	d00b      	beq.n	80062b2 <TIM_Base_SetConfig+0x66>
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80062a0:	d007      	beq.n	80062b2 <TIM_Base_SetConfig+0x66>
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	4a1a      	ldr	r2, [pc, #104]	; (8006310 <TIM_Base_SetConfig+0xc4>)
 80062a6:	4293      	cmp	r3, r2
 80062a8:	d003      	beq.n	80062b2 <TIM_Base_SetConfig+0x66>
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	4a19      	ldr	r2, [pc, #100]	; (8006314 <TIM_Base_SetConfig+0xc8>)
 80062ae:	4293      	cmp	r3, r2
 80062b0:	d108      	bne.n	80062c4 <TIM_Base_SetConfig+0x78>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80062b8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80062ba:	683b      	ldr	r3, [r7, #0]
 80062bc:	68db      	ldr	r3, [r3, #12]
 80062be:	68fa      	ldr	r2, [r7, #12]
 80062c0:	4313      	orrs	r3, r2
 80062c2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  tmpcr1 &= ~TIM_CR1_ARPE;
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80062ca:	60fb      	str	r3, [r7, #12]
  tmpcr1 |= (uint32_t)Structure->AutoReloadPreload;
 80062cc:	683b      	ldr	r3, [r7, #0]
 80062ce:	695b      	ldr	r3, [r3, #20]
 80062d0:	68fa      	ldr	r2, [r7, #12]
 80062d2:	4313      	orrs	r3, r2
 80062d4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	68fa      	ldr	r2, [r7, #12]
 80062da:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80062dc:	683b      	ldr	r3, [r7, #0]
 80062de:	689a      	ldr	r2, [r3, #8]
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 80062e4:	683b      	ldr	r3, [r7, #0]
 80062e6:	681a      	ldr	r2, [r3, #0]
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	4a07      	ldr	r2, [pc, #28]	; (800630c <TIM_Base_SetConfig+0xc0>)
 80062f0:	4293      	cmp	r3, r2
 80062f2:	d103      	bne.n	80062fc <TIM_Base_SetConfig+0xb0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80062f4:	683b      	ldr	r3, [r7, #0]
 80062f6:	691a      	ldr	r2, [r3, #16]
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediatly */
  TIMx->EGR = TIM_EGR_UG;
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	2201      	movs	r2, #1
 8006300:	615a      	str	r2, [r3, #20]
}
 8006302:	bf00      	nop
 8006304:	3714      	adds	r7, #20
 8006306:	46bd      	mov	sp, r7
 8006308:	bc80      	pop	{r7}
 800630a:	4770      	bx	lr
 800630c:	40012c00 	.word	0x40012c00
 8006310:	40000400 	.word	0x40000400
 8006314:	40000800 	.word	0x40000800

08006318 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config : The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006318:	b480      	push	{r7}
 800631a:	b087      	sub	sp, #28
 800631c:	af00      	add	r7, sp, #0
 800631e:	6078      	str	r0, [r7, #4]
 8006320:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0U;
 8006322:	2300      	movs	r3, #0
 8006324:	60fb      	str	r3, [r7, #12]
  uint32_t tmpccer = 0U;
 8006326:	2300      	movs	r3, #0
 8006328:	617b      	str	r3, [r7, #20]
  uint32_t tmpcr2 = 0U;
 800632a:	2300      	movs	r3, #0
 800632c:	613b      	str	r3, [r7, #16]

   /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	6a1b      	ldr	r3, [r3, #32]
 8006332:	f023 0201 	bic.w	r2, r3, #1
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	6a1b      	ldr	r3, [r3, #32]
 800633e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	685b      	ldr	r3, [r3, #4]
 8006344:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	699b      	ldr	r3, [r3, #24]
 800634a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006352:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	f023 0303 	bic.w	r3, r3, #3
 800635a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800635c:	683b      	ldr	r3, [r7, #0]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	68fa      	ldr	r2, [r7, #12]
 8006362:	4313      	orrs	r3, r2
 8006364:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006366:	697b      	ldr	r3, [r7, #20]
 8006368:	f023 0302 	bic.w	r3, r3, #2
 800636c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800636e:	683b      	ldr	r3, [r7, #0]
 8006370:	689b      	ldr	r3, [r3, #8]
 8006372:	697a      	ldr	r2, [r7, #20]
 8006374:	4313      	orrs	r3, r2
 8006376:	617b      	str	r3, [r7, #20]

  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	4a1c      	ldr	r2, [pc, #112]	; (80063ec <TIM_OC1_SetConfig+0xd4>)
 800637c:	4293      	cmp	r3, r2
 800637e:	d10c      	bne.n	800639a <TIM_OC1_SetConfig+0x82>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006380:	697b      	ldr	r3, [r7, #20]
 8006382:	f023 0308 	bic.w	r3, r3, #8
 8006386:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006388:	683b      	ldr	r3, [r7, #0]
 800638a:	68db      	ldr	r3, [r3, #12]
 800638c:	697a      	ldr	r2, [r7, #20]
 800638e:	4313      	orrs	r3, r2
 8006390:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006392:	697b      	ldr	r3, [r7, #20]
 8006394:	f023 0304 	bic.w	r3, r3, #4
 8006398:	617b      	str	r3, [r7, #20]
  }

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	4a13      	ldr	r2, [pc, #76]	; (80063ec <TIM_OC1_SetConfig+0xd4>)
 800639e:	4293      	cmp	r3, r2
 80063a0:	d111      	bne.n	80063c6 <TIM_OC1_SetConfig+0xae>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80063a2:	693b      	ldr	r3, [r7, #16]
 80063a4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80063a8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80063aa:	693b      	ldr	r3, [r7, #16]
 80063ac:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80063b0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80063b2:	683b      	ldr	r3, [r7, #0]
 80063b4:	695b      	ldr	r3, [r3, #20]
 80063b6:	693a      	ldr	r2, [r7, #16]
 80063b8:	4313      	orrs	r3, r2
 80063ba:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80063bc:	683b      	ldr	r3, [r7, #0]
 80063be:	699b      	ldr	r3, [r3, #24]
 80063c0:	693a      	ldr	r2, [r7, #16]
 80063c2:	4313      	orrs	r3, r2
 80063c4:	613b      	str	r3, [r7, #16]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	693a      	ldr	r2, [r7, #16]
 80063ca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	68fa      	ldr	r2, [r7, #12]
 80063d0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80063d2:	683b      	ldr	r3, [r7, #0]
 80063d4:	685a      	ldr	r2, [r3, #4]
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	697a      	ldr	r2, [r7, #20]
 80063de:	621a      	str	r2, [r3, #32]
}
 80063e0:	bf00      	nop
 80063e2:	371c      	adds	r7, #28
 80063e4:	46bd      	mov	sp, r7
 80063e6:	bc80      	pop	{r7}
 80063e8:	4770      	bx	lr
 80063ea:	bf00      	nop
 80063ec:	40012c00 	.word	0x40012c00

080063f0 <TIM_OC2_SetConfig>:
  * @param  TIMx  to select the TIM peripheral
  * @param  OC_Config : The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80063f0:	b480      	push	{r7}
 80063f2:	b087      	sub	sp, #28
 80063f4:	af00      	add	r7, sp, #0
 80063f6:	6078      	str	r0, [r7, #4]
 80063f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0U;
 80063fa:	2300      	movs	r3, #0
 80063fc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpccer = 0U;
 80063fe:	2300      	movs	r3, #0
 8006400:	617b      	str	r3, [r7, #20]
  uint32_t tmpcr2 = 0U;
 8006402:	2300      	movs	r3, #0
 8006404:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	6a1b      	ldr	r3, [r3, #32]
 800640a:	f023 0210 	bic.w	r2, r3, #16
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	6a1b      	ldr	r3, [r3, #32]
 8006416:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	685b      	ldr	r3, [r3, #4]
 800641c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	699b      	ldr	r3, [r3, #24]
 8006422:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800642a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006432:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006434:	683b      	ldr	r3, [r7, #0]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	021b      	lsls	r3, r3, #8
 800643a:	68fa      	ldr	r2, [r7, #12]
 800643c:	4313      	orrs	r3, r2
 800643e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006440:	697b      	ldr	r3, [r7, #20]
 8006442:	f023 0320 	bic.w	r3, r3, #32
 8006446:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006448:	683b      	ldr	r3, [r7, #0]
 800644a:	689b      	ldr	r3, [r3, #8]
 800644c:	011b      	lsls	r3, r3, #4
 800644e:	697a      	ldr	r2, [r7, #20]
 8006450:	4313      	orrs	r3, r2
 8006452:	617b      	str	r3, [r7, #20]

  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	4a1d      	ldr	r2, [pc, #116]	; (80064cc <TIM_OC2_SetConfig+0xdc>)
 8006458:	4293      	cmp	r3, r2
 800645a:	d10d      	bne.n	8006478 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800645c:	697b      	ldr	r3, [r7, #20]
 800645e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006462:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006464:	683b      	ldr	r3, [r7, #0]
 8006466:	68db      	ldr	r3, [r3, #12]
 8006468:	011b      	lsls	r3, r3, #4
 800646a:	697a      	ldr	r2, [r7, #20]
 800646c:	4313      	orrs	r3, r2
 800646e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006470:	697b      	ldr	r3, [r7, #20]
 8006472:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006476:	617b      	str	r3, [r7, #20]

  }

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	4a14      	ldr	r2, [pc, #80]	; (80064cc <TIM_OC2_SetConfig+0xdc>)
 800647c:	4293      	cmp	r3, r2
 800647e:	d113      	bne.n	80064a8 <TIM_OC2_SetConfig+0xb8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006480:	693b      	ldr	r3, [r7, #16]
 8006482:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006486:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006488:	693b      	ldr	r3, [r7, #16]
 800648a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800648e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2);
 8006490:	683b      	ldr	r3, [r7, #0]
 8006492:	695b      	ldr	r3, [r3, #20]
 8006494:	009b      	lsls	r3, r3, #2
 8006496:	693a      	ldr	r2, [r7, #16]
 8006498:	4313      	orrs	r3, r2
 800649a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2);
 800649c:	683b      	ldr	r3, [r7, #0]
 800649e:	699b      	ldr	r3, [r3, #24]
 80064a0:	009b      	lsls	r3, r3, #2
 80064a2:	693a      	ldr	r2, [r7, #16]
 80064a4:	4313      	orrs	r3, r2
 80064a6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	693a      	ldr	r2, [r7, #16]
 80064ac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	68fa      	ldr	r2, [r7, #12]
 80064b2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80064b4:	683b      	ldr	r3, [r7, #0]
 80064b6:	685a      	ldr	r2, [r3, #4]
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	697a      	ldr	r2, [r7, #20]
 80064c0:	621a      	str	r2, [r3, #32]
}
 80064c2:	bf00      	nop
 80064c4:	371c      	adds	r7, #28
 80064c6:	46bd      	mov	sp, r7
 80064c8:	bc80      	pop	{r7}
 80064ca:	4770      	bx	lr
 80064cc:	40012c00 	.word	0x40012c00

080064d0 <TIM_OC3_SetConfig>:
  * @param  TIMx  to select the TIM peripheral
  * @param  OC_Config : The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80064d0:	b480      	push	{r7}
 80064d2:	b087      	sub	sp, #28
 80064d4:	af00      	add	r7, sp, #0
 80064d6:	6078      	str	r0, [r7, #4]
 80064d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0U;
 80064da:	2300      	movs	r3, #0
 80064dc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpccer = 0U;
 80064de:	2300      	movs	r3, #0
 80064e0:	617b      	str	r3, [r7, #20]
  uint32_t tmpcr2 = 0U;
 80064e2:	2300      	movs	r3, #0
 80064e4:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	6a1b      	ldr	r3, [r3, #32]
 80064ea:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	6a1b      	ldr	r3, [r3, #32]
 80064f6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	685b      	ldr	r3, [r3, #4]
 80064fc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	69db      	ldr	r3, [r3, #28]
 8006502:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800650a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	f023 0303 	bic.w	r3, r3, #3
 8006512:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006514:	683b      	ldr	r3, [r7, #0]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	68fa      	ldr	r2, [r7, #12]
 800651a:	4313      	orrs	r3, r2
 800651c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800651e:	697b      	ldr	r3, [r7, #20]
 8006520:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006524:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006526:	683b      	ldr	r3, [r7, #0]
 8006528:	689b      	ldr	r3, [r3, #8]
 800652a:	021b      	lsls	r3, r3, #8
 800652c:	697a      	ldr	r2, [r7, #20]
 800652e:	4313      	orrs	r3, r2
 8006530:	617b      	str	r3, [r7, #20]

  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	4a1d      	ldr	r2, [pc, #116]	; (80065ac <TIM_OC3_SetConfig+0xdc>)
 8006536:	4293      	cmp	r3, r2
 8006538:	d10d      	bne.n	8006556 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800653a:	697b      	ldr	r3, [r7, #20]
 800653c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006540:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006542:	683b      	ldr	r3, [r7, #0]
 8006544:	68db      	ldr	r3, [r3, #12]
 8006546:	021b      	lsls	r3, r3, #8
 8006548:	697a      	ldr	r2, [r7, #20]
 800654a:	4313      	orrs	r3, r2
 800654c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800654e:	697b      	ldr	r3, [r7, #20]
 8006550:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006554:	617b      	str	r3, [r7, #20]
  }

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	4a14      	ldr	r2, [pc, #80]	; (80065ac <TIM_OC3_SetConfig+0xdc>)
 800655a:	4293      	cmp	r3, r2
 800655c:	d113      	bne.n	8006586 <TIM_OC3_SetConfig+0xb6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800655e:	693b      	ldr	r3, [r7, #16]
 8006560:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006564:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006566:	693b      	ldr	r3, [r7, #16]
 8006568:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800656c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800656e:	683b      	ldr	r3, [r7, #0]
 8006570:	695b      	ldr	r3, [r3, #20]
 8006572:	011b      	lsls	r3, r3, #4
 8006574:	693a      	ldr	r2, [r7, #16]
 8006576:	4313      	orrs	r3, r2
 8006578:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800657a:	683b      	ldr	r3, [r7, #0]
 800657c:	699b      	ldr	r3, [r3, #24]
 800657e:	011b      	lsls	r3, r3, #4
 8006580:	693a      	ldr	r2, [r7, #16]
 8006582:	4313      	orrs	r3, r2
 8006584:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	693a      	ldr	r2, [r7, #16]
 800658a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	68fa      	ldr	r2, [r7, #12]
 8006590:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006592:	683b      	ldr	r3, [r7, #0]
 8006594:	685a      	ldr	r2, [r3, #4]
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	697a      	ldr	r2, [r7, #20]
 800659e:	621a      	str	r2, [r3, #32]
}
 80065a0:	bf00      	nop
 80065a2:	371c      	adds	r7, #28
 80065a4:	46bd      	mov	sp, r7
 80065a6:	bc80      	pop	{r7}
 80065a8:	4770      	bx	lr
 80065aa:	bf00      	nop
 80065ac:	40012c00 	.word	0x40012c00

080065b0 <TIM_OC4_SetConfig>:
  * @param  TIMx  to select the TIM peripheral
  * @param  OC_Config : The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80065b0:	b480      	push	{r7}
 80065b2:	b087      	sub	sp, #28
 80065b4:	af00      	add	r7, sp, #0
 80065b6:	6078      	str	r0, [r7, #4]
 80065b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0U;
 80065ba:	2300      	movs	r3, #0
 80065bc:	613b      	str	r3, [r7, #16]
  uint32_t tmpccer = 0U;
 80065be:	2300      	movs	r3, #0
 80065c0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpcr2 = 0U;
 80065c2:	2300      	movs	r3, #0
 80065c4:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	6a1b      	ldr	r3, [r3, #32]
 80065ca:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	6a1b      	ldr	r3, [r3, #32]
 80065d6:	60fb      	str	r3, [r7, #12]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	685b      	ldr	r3, [r3, #4]
 80065dc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	69db      	ldr	r3, [r3, #28]
 80065e2:	613b      	str	r3, [r7, #16]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80065e4:	693b      	ldr	r3, [r7, #16]
 80065e6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80065ea:	613b      	str	r3, [r7, #16]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80065ec:	693b      	ldr	r3, [r7, #16]
 80065ee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80065f2:	613b      	str	r3, [r7, #16]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80065f4:	683b      	ldr	r3, [r7, #0]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	021b      	lsls	r3, r3, #8
 80065fa:	693a      	ldr	r2, [r7, #16]
 80065fc:	4313      	orrs	r3, r2
 80065fe:	613b      	str	r3, [r7, #16]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006606:	60fb      	str	r3, [r7, #12]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006608:	683b      	ldr	r3, [r7, #0]
 800660a:	689b      	ldr	r3, [r3, #8]
 800660c:	031b      	lsls	r3, r3, #12
 800660e:	68fa      	ldr	r2, [r7, #12]
 8006610:	4313      	orrs	r3, r2
 8006612:	60fb      	str	r3, [r7, #12]

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	4a0f      	ldr	r2, [pc, #60]	; (8006654 <TIM_OC4_SetConfig+0xa4>)
 8006618:	4293      	cmp	r3, r2
 800661a:	d109      	bne.n	8006630 <TIM_OC4_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

   /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800661c:	697b      	ldr	r3, [r7, #20]
 800661e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006622:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6);
 8006624:	683b      	ldr	r3, [r7, #0]
 8006626:	695b      	ldr	r3, [r3, #20]
 8006628:	019b      	lsls	r3, r3, #6
 800662a:	697a      	ldr	r2, [r7, #20]
 800662c:	4313      	orrs	r3, r2
 800662e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	697a      	ldr	r2, [r7, #20]
 8006634:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	693a      	ldr	r2, [r7, #16]
 800663a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800663c:	683b      	ldr	r3, [r7, #0]
 800663e:	685a      	ldr	r2, [r3, #4]
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	68fa      	ldr	r2, [r7, #12]
 8006648:	621a      	str	r2, [r3, #32]
}
 800664a:	bf00      	nop
 800664c:	371c      	adds	r7, #28
 800664e:	46bd      	mov	sp, r7
 8006650:	bc80      	pop	{r7}
 8006652:	4770      	bx	lr
 8006654:	40012c00 	.word	0x40012c00

08006658 <TIM_CCxChannelCmd>:
  * @param  ChannelState : specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_Disable.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef* TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006658:	b480      	push	{r7}
 800665a:	b087      	sub	sp, #28
 800665c:	af00      	add	r7, sp, #0
 800665e:	60f8      	str	r0, [r7, #12]
 8006660:	60b9      	str	r1, [r7, #8]
 8006662:	607a      	str	r2, [r7, #4]
  uint32_t tmp = 0U;
 8006664:	2300      	movs	r3, #0
 8006666:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << Channel;
 8006668:	2201      	movs	r2, #1
 800666a:	68bb      	ldr	r3, [r7, #8]
 800666c:	fa02 f303 	lsl.w	r3, r2, r3
 8006670:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	6a1a      	ldr	r2, [r3, #32]
 8006676:	697b      	ldr	r3, [r7, #20]
 8006678:	43db      	mvns	r3, r3
 800667a:	401a      	ands	r2, r3
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |=  (uint32_t)(ChannelState << Channel);
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	6a1a      	ldr	r2, [r3, #32]
 8006684:	6879      	ldr	r1, [r7, #4]
 8006686:	68bb      	ldr	r3, [r7, #8]
 8006688:	fa01 f303 	lsl.w	r3, r1, r3
 800668c:	431a      	orrs	r2, r3
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	621a      	str	r2, [r3, #32]
}
 8006692:	bf00      	nop
 8006694:	371c      	adds	r7, #28
 8006696:	46bd      	mov	sp, r7
 8006698:	bc80      	pop	{r7}
 800669a:	4770      	bx	lr

0800669c <HAL_TIMEx_MasterConfigSynchronization>:
  *         contains the selected trigger output (TRGO) and the Master/Slave
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim, TIM_MasterConfigTypeDef * sMasterConfig)
{
 800669c:	b480      	push	{r7}
 800669e:	b083      	sub	sp, #12
 80066a0:	af00      	add	r7, sp, #0
 80066a2:	6078      	str	r0, [r7, #4]
 80066a4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  __HAL_LOCK(htim);
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80066ac:	2b01      	cmp	r3, #1
 80066ae:	d101      	bne.n	80066b4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80066b0:	2302      	movs	r3, #2
 80066b2:	e032      	b.n	800671a <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	2201      	movs	r2, #1
 80066b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	2202      	movs	r2, #2
 80066c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the MMS Bits */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	685a      	ldr	r2, [r3, #4]
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80066d2:	605a      	str	r2, [r3, #4]
  /* Select the TRGO source */
  htim->Instance->CR2 |=  sMasterConfig->MasterOutputTrigger;
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	6859      	ldr	r1, [r3, #4]
 80066da:	683b      	ldr	r3, [r7, #0]
 80066dc:	681a      	ldr	r2, [r3, #0]
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	430a      	orrs	r2, r1
 80066e4:	605a      	str	r2, [r3, #4]

  /* Reset the MSM Bit */
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	689a      	ldr	r2, [r3, #8]
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80066f4:	609a      	str	r2, [r3, #8]
  /* Set or Reset the MSM Bit */
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	6899      	ldr	r1, [r3, #8]
 80066fc:	683b      	ldr	r3, [r7, #0]
 80066fe:	685a      	ldr	r2, [r3, #4]
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	430a      	orrs	r2, r1
 8006706:	609a      	str	r2, [r3, #8]

  htim->State = HAL_TIM_STATE_READY;
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	2201      	movs	r2, #1
 800670c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	2200      	movs	r2, #0
 8006714:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006718:	2300      	movs	r3, #0
}
 800671a:	4618      	mov	r0, r3
 800671c:	370c      	adds	r7, #12
 800671e:	46bd      	mov	sp, r7
 8006720:	bc80      	pop	{r7}
 8006722:	4770      	bx	lr

08006724 <HAL_UART_Init>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006724:	b580      	push	{r7, lr}
 8006726:	b082      	sub	sp, #8
 8006728:	af00      	add	r7, sp, #0
 800672a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if(huart == NULL)
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	2b00      	cmp	r3, #0
 8006730:	d101      	bne.n	8006736 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006732:	2301      	movs	r3, #1
 8006734:	e03f      	b.n	80067b6 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */
  
  if(huart->gState == HAL_UART_STATE_RESET)
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800673c:	b2db      	uxtb	r3, r3
 800673e:	2b00      	cmp	r3, #0
 8006740:	d106      	bne.n	8006750 <HAL_UART_Init+0x2c>
  {  
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	2200      	movs	r2, #0
 8006746:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    HAL_UART_MspInit(huart);
 800674a:	6878      	ldr	r0, [r7, #4]
 800674c:	f7fc f922 	bl	8002994 <HAL_UART_MspInit>
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	2224      	movs	r2, #36	; 0x24
 8006754:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	68da      	ldr	r2, [r3, #12]
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006766:	60da      	str	r2, [r3, #12]
  
  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006768:	6878      	ldr	r0, [r7, #4]
 800676a:	f000 fa5f 	bl	8006c2c <UART_SetConfig>
  
  /* In asynchronous mode, the following bits must be kept cleared: 
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	691a      	ldr	r2, [r3, #16]
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800677c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	695a      	ldr	r2, [r3, #20]
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800678c:	615a      	str	r2, [r3, #20]
  
  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	68da      	ldr	r2, [r3, #12]
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800679c:	60da      	str	r2, [r3, #12]
  
  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	2200      	movs	r2, #0
 80067a2:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState= HAL_UART_STATE_READY;
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	2220      	movs	r2, #32
 80067a8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState= HAL_UART_STATE_READY;
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	2220      	movs	r2, #32
 80067b0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
  
  return HAL_OK;
 80067b4:	2300      	movs	r3, #0
}
 80067b6:	4618      	mov	r0, r3
 80067b8:	3708      	adds	r7, #8
 80067ba:	46bd      	mov	sp, r7
 80067bc:	bd80      	pop	{r7, pc}
	...

080067c0 <HAL_UART_IRQHandler>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80067c0:	b580      	push	{r7, lr}
 80067c2:	b088      	sub	sp, #32
 80067c4:	af00      	add	r7, sp, #0
 80067c6:	6078      	str	r0, [r7, #4]
   uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	61fb      	str	r3, [r7, #28]
   uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	68db      	ldr	r3, [r3, #12]
 80067d6:	61bb      	str	r3, [r7, #24]
   uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	695b      	ldr	r3, [r3, #20]
 80067de:	617b      	str	r3, [r7, #20]
   uint32_t errorflags = 0x00U;
 80067e0:	2300      	movs	r3, #0
 80067e2:	613b      	str	r3, [r7, #16]
   uint32_t dmarequest = 0x00U;
 80067e4:	2300      	movs	r3, #0
 80067e6:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80067e8:	69fb      	ldr	r3, [r7, #28]
 80067ea:	f003 030f 	and.w	r3, r3, #15
 80067ee:	613b      	str	r3, [r7, #16]
  if(errorflags == RESET)
 80067f0:	693b      	ldr	r3, [r7, #16]
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	d10d      	bne.n	8006812 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if(((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80067f6:	69fb      	ldr	r3, [r7, #28]
 80067f8:	f003 0320 	and.w	r3, r3, #32
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	d008      	beq.n	8006812 <HAL_UART_IRQHandler+0x52>
 8006800:	69bb      	ldr	r3, [r7, #24]
 8006802:	f003 0320 	and.w	r3, r3, #32
 8006806:	2b00      	cmp	r3, #0
 8006808:	d003      	beq.n	8006812 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800680a:	6878      	ldr	r0, [r7, #4]
 800680c:	f000 f98d 	bl	8006b2a <UART_Receive_IT>
      return;
 8006810:	e0cc      	b.n	80069ac <HAL_UART_IRQHandler+0x1ec>
    }
  }

  /* If some errors occur */
  if((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8006812:	693b      	ldr	r3, [r7, #16]
 8006814:	2b00      	cmp	r3, #0
 8006816:	f000 80ab 	beq.w	8006970 <HAL_UART_IRQHandler+0x1b0>
 800681a:	697b      	ldr	r3, [r7, #20]
 800681c:	f003 0301 	and.w	r3, r3, #1
 8006820:	2b00      	cmp	r3, #0
 8006822:	d105      	bne.n	8006830 <HAL_UART_IRQHandler+0x70>
 8006824:	69bb      	ldr	r3, [r7, #24]
 8006826:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800682a:	2b00      	cmp	r3, #0
 800682c:	f000 80a0 	beq.w	8006970 <HAL_UART_IRQHandler+0x1b0>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if(((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8006830:	69fb      	ldr	r3, [r7, #28]
 8006832:	f003 0301 	and.w	r3, r3, #1
 8006836:	2b00      	cmp	r3, #0
 8006838:	d00a      	beq.n	8006850 <HAL_UART_IRQHandler+0x90>
 800683a:	69bb      	ldr	r3, [r7, #24]
 800683c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006840:	2b00      	cmp	r3, #0
 8006842:	d005      	beq.n	8006850 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006848:	f043 0201 	orr.w	r2, r3, #1
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if(((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006850:	69fb      	ldr	r3, [r7, #28]
 8006852:	f003 0304 	and.w	r3, r3, #4
 8006856:	2b00      	cmp	r3, #0
 8006858:	d00a      	beq.n	8006870 <HAL_UART_IRQHandler+0xb0>
 800685a:	697b      	ldr	r3, [r7, #20]
 800685c:	f003 0301 	and.w	r3, r3, #1
 8006860:	2b00      	cmp	r3, #0
 8006862:	d005      	beq.n	8006870 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006868:	f043 0202 	orr.w	r2, r3, #2
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if(((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006870:	69fb      	ldr	r3, [r7, #28]
 8006872:	f003 0302 	and.w	r3, r3, #2
 8006876:	2b00      	cmp	r3, #0
 8006878:	d00a      	beq.n	8006890 <HAL_UART_IRQHandler+0xd0>
 800687a:	697b      	ldr	r3, [r7, #20]
 800687c:	f003 0301 	and.w	r3, r3, #1
 8006880:	2b00      	cmp	r3, #0
 8006882:	d005      	beq.n	8006890 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006888:	f043 0204 	orr.w	r2, r3, #4
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if(((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006890:	69fb      	ldr	r3, [r7, #28]
 8006892:	f003 0308 	and.w	r3, r3, #8
 8006896:	2b00      	cmp	r3, #0
 8006898:	d00a      	beq.n	80068b0 <HAL_UART_IRQHandler+0xf0>
 800689a:	697b      	ldr	r3, [r7, #20]
 800689c:	f003 0301 	and.w	r3, r3, #1
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	d005      	beq.n	80068b0 <HAL_UART_IRQHandler+0xf0>
    { 
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80068a8:	f043 0208 	orr.w	r2, r3, #8
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if(huart->ErrorCode != HAL_UART_ERROR_NONE)
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80068b4:	2b00      	cmp	r3, #0
 80068b6:	d078      	beq.n	80069aa <HAL_UART_IRQHandler+0x1ea>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if(((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80068b8:	69fb      	ldr	r3, [r7, #28]
 80068ba:	f003 0320 	and.w	r3, r3, #32
 80068be:	2b00      	cmp	r3, #0
 80068c0:	d007      	beq.n	80068d2 <HAL_UART_IRQHandler+0x112>
 80068c2:	69bb      	ldr	r3, [r7, #24]
 80068c4:	f003 0320 	and.w	r3, r3, #32
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	d002      	beq.n	80068d2 <HAL_UART_IRQHandler+0x112>
      {
        UART_Receive_IT(huart);
 80068cc:	6878      	ldr	r0, [r7, #4]
 80068ce:	f000 f92c 	bl	8006b2a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	695b      	ldr	r3, [r3, #20]
 80068d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80068dc:	2b00      	cmp	r3, #0
 80068de:	bf14      	ite	ne
 80068e0:	2301      	movne	r3, #1
 80068e2:	2300      	moveq	r3, #0
 80068e4:	b2db      	uxtb	r3, r3
 80068e6:	60fb      	str	r3, [r7, #12]
      if(((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80068ec:	f003 0308 	and.w	r3, r3, #8
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	d102      	bne.n	80068fa <HAL_UART_IRQHandler+0x13a>
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	d031      	beq.n	800695e <HAL_UART_IRQHandler+0x19e>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80068fa:	6878      	ldr	r0, [r7, #4]
 80068fc:	f000 f877 	bl	80069ee <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	695b      	ldr	r3, [r3, #20]
 8006906:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800690a:	2b00      	cmp	r3, #0
 800690c:	d023      	beq.n	8006956 <HAL_UART_IRQHandler+0x196>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	695a      	ldr	r2, [r3, #20]
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800691c:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if(huart->hdmarx != NULL)
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006922:	2b00      	cmp	r3, #0
 8006924:	d013      	beq.n	800694e <HAL_UART_IRQHandler+0x18e>
          {
            /* Set the UART DMA Abort callback : 
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800692a:	4a22      	ldr	r2, [pc, #136]	; (80069b4 <HAL_UART_IRQHandler+0x1f4>)
 800692c:	635a      	str	r2, [r3, #52]	; 0x34
            if(HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006932:	4618      	mov	r0, r3
 8006934:	f7fd f8f2 	bl	8003b1c <HAL_DMA_Abort_IT>
 8006938:	4603      	mov	r3, r0
 800693a:	2b00      	cmp	r3, #0
 800693c:	d016      	beq.n	800696c <HAL_UART_IRQHandler+0x1ac>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006942:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006944:	687a      	ldr	r2, [r7, #4]
 8006946:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8006948:	4610      	mov	r0, r2
 800694a:	4798      	blx	r3
        if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800694c:	e00e      	b.n	800696c <HAL_UART_IRQHandler+0x1ac>
            }
          }
          else
          {
            /* Call user error callback */
            HAL_UART_ErrorCallback(huart);
 800694e:	6878      	ldr	r0, [r7, #4]
 8006950:	f000 f844 	bl	80069dc <HAL_UART_ErrorCallback>
        if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006954:	e00a      	b.n	800696c <HAL_UART_IRQHandler+0x1ac>
          }
        }
        else
        {
          /* Call user error callback */
          HAL_UART_ErrorCallback(huart);
 8006956:	6878      	ldr	r0, [r7, #4]
 8006958:	f000 f840 	bl	80069dc <HAL_UART_ErrorCallback>
        if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800695c:	e006      	b.n	800696c <HAL_UART_IRQHandler+0x1ac>
      }
      else
      {
        /* Non Blocking error : transfer could go on. 
           Error is notified to user through user error callback */
        HAL_UART_ErrorCallback(huart);
 800695e:	6878      	ldr	r0, [r7, #4]
 8006960:	f000 f83c 	bl	80069dc <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	2200      	movs	r2, #0
 8006968:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 800696a:	e01e      	b.n	80069aa <HAL_UART_IRQHandler+0x1ea>
        if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800696c:	bf00      	nop
    return;
 800696e:	e01c      	b.n	80069aa <HAL_UART_IRQHandler+0x1ea>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if(((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006970:	69fb      	ldr	r3, [r7, #28]
 8006972:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006976:	2b00      	cmp	r3, #0
 8006978:	d008      	beq.n	800698c <HAL_UART_IRQHandler+0x1cc>
 800697a:	69bb      	ldr	r3, [r7, #24]
 800697c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006980:	2b00      	cmp	r3, #0
 8006982:	d003      	beq.n	800698c <HAL_UART_IRQHandler+0x1cc>
  {
    UART_Transmit_IT(huart);
 8006984:	6878      	ldr	r0, [r7, #4]
 8006986:	f000 f863 	bl	8006a50 <UART_Transmit_IT>
    return;
 800698a:	e00f      	b.n	80069ac <HAL_UART_IRQHandler+0x1ec>
  }
  
  /* UART in mode Transmitter end --------------------------------------------*/
  if(((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800698c:	69fb      	ldr	r3, [r7, #28]
 800698e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006992:	2b00      	cmp	r3, #0
 8006994:	d00a      	beq.n	80069ac <HAL_UART_IRQHandler+0x1ec>
 8006996:	69bb      	ldr	r3, [r7, #24]
 8006998:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800699c:	2b00      	cmp	r3, #0
 800699e:	d005      	beq.n	80069ac <HAL_UART_IRQHandler+0x1ec>
  {
    UART_EndTransmit_IT(huart);
 80069a0:	6878      	ldr	r0, [r7, #4]
 80069a2:	f000 f8aa 	bl	8006afa <UART_EndTransmit_IT>
    return;
 80069a6:	bf00      	nop
 80069a8:	e000      	b.n	80069ac <HAL_UART_IRQHandler+0x1ec>
    return;
 80069aa:	bf00      	nop
  }
}
 80069ac:	3720      	adds	r7, #32
 80069ae:	46bd      	mov	sp, r7
 80069b0:	bd80      	pop	{r7, pc}
 80069b2:	bf00      	nop
 80069b4:	08006a29 	.word	0x08006a29

080069b8 <HAL_UART_TxCpltCallback>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
 __weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80069b8:	b480      	push	{r7}
 80069ba:	b083      	sub	sp, #12
 80069bc:	af00      	add	r7, sp, #0
 80069be:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */ 
}
 80069c0:	bf00      	nop
 80069c2:	370c      	adds	r7, #12
 80069c4:	46bd      	mov	sp, r7
 80069c6:	bc80      	pop	{r7}
 80069c8:	4770      	bx	lr

080069ca <HAL_UART_RxCpltCallback>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80069ca:	b480      	push	{r7}
 80069cc:	b083      	sub	sp, #12
 80069ce:	af00      	add	r7, sp, #0
 80069d0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80069d2:	bf00      	nop
 80069d4:	370c      	adds	r7, #12
 80069d6:	46bd      	mov	sp, r7
 80069d8:	bc80      	pop	{r7}
 80069da:	4770      	bx	lr

080069dc <HAL_UART_ErrorCallback>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
 __weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80069dc:	b480      	push	{r7}
 80069de:	b083      	sub	sp, #12
 80069e0:	af00      	add	r7, sp, #0
 80069e2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart); 
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */ 
}
 80069e4:	bf00      	nop
 80069e6:	370c      	adds	r7, #12
 80069e8:	46bd      	mov	sp, r7
 80069ea:	bc80      	pop	{r7}
 80069ec:	4770      	bx	lr

080069ee <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart: UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80069ee:	b480      	push	{r7}
 80069f0:	b083      	sub	sp, #12
 80069f2:	af00      	add	r7, sp, #0
 80069f4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	68da      	ldr	r2, [r3, #12]
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8006a04:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	695a      	ldr	r2, [r3, #20]
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	f022 0201 	bic.w	r2, r2, #1
 8006a14:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	2220      	movs	r2, #32
 8006a1a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8006a1e:	bf00      	nop
 8006a20:	370c      	adds	r7, #12
 8006a22:	46bd      	mov	sp, r7
 8006a24:	bc80      	pop	{r7}
 8006a26:	4770      	bx	lr

08006a28 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006a28:	b580      	push	{r7, lr}
 8006a2a:	b084      	sub	sp, #16
 8006a2c:	af00      	add	r7, sp, #0
 8006a2e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a34:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	2200      	movs	r2, #0
 8006a3a:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	2200      	movs	r2, #0
 8006a40:	84da      	strh	r2, [r3, #38]	; 0x26

  HAL_UART_ErrorCallback(huart);
 8006a42:	68f8      	ldr	r0, [r7, #12]
 8006a44:	f7ff ffca 	bl	80069dc <HAL_UART_ErrorCallback>
}
 8006a48:	bf00      	nop
 8006a4a:	3710      	adds	r7, #16
 8006a4c:	46bd      	mov	sp, r7
 8006a4e:	bd80      	pop	{r7, pc}

08006a50 <UART_Transmit_IT>:
  * @param  huart: Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006a50:	b480      	push	{r7}
 8006a52:	b085      	sub	sp, #20
 8006a54:	af00      	add	r7, sp, #0
 8006a56:	6078      	str	r0, [r7, #4]
  uint16_t* tmp;
  
  /* Check that a Tx process is ongoing */
  if(huart->gState == HAL_UART_STATE_BUSY_TX)
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8006a5e:	b2db      	uxtb	r3, r3
 8006a60:	2b21      	cmp	r3, #33	; 0x21
 8006a62:	d144      	bne.n	8006aee <UART_Transmit_IT+0x9e>
  {
    if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	689b      	ldr	r3, [r3, #8]
 8006a68:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006a6c:	d11a      	bne.n	8006aa4 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t*) huart->pTxBuffPtr;
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	6a1b      	ldr	r3, [r3, #32]
 8006a72:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	881b      	ldrh	r3, [r3, #0]
 8006a78:	461a      	mov	r2, r3
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006a82:	605a      	str	r2, [r3, #4]
      if(huart->Init.Parity == UART_PARITY_NONE)
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	691b      	ldr	r3, [r3, #16]
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	d105      	bne.n	8006a98 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	6a1b      	ldr	r3, [r3, #32]
 8006a90:	1c9a      	adds	r2, r3, #2
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	621a      	str	r2, [r3, #32]
 8006a96:	e00e      	b.n	8006ab6 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	6a1b      	ldr	r3, [r3, #32]
 8006a9c:	1c5a      	adds	r2, r3, #1
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	621a      	str	r2, [r3, #32]
 8006aa2:	e008      	b.n	8006ab6 <UART_Transmit_IT+0x66>
      }
    } 
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	6a1b      	ldr	r3, [r3, #32]
 8006aa8:	1c59      	adds	r1, r3, #1
 8006aaa:	687a      	ldr	r2, [r7, #4]
 8006aac:	6211      	str	r1, [r2, #32]
 8006aae:	781a      	ldrb	r2, [r3, #0]
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	605a      	str	r2, [r3, #4]
    }

    if(--huart->TxXferCount == 0U)
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006aba:	b29b      	uxth	r3, r3
 8006abc:	3b01      	subs	r3, #1
 8006abe:	b29b      	uxth	r3, r3
 8006ac0:	687a      	ldr	r2, [r7, #4]
 8006ac2:	4619      	mov	r1, r3
 8006ac4:	84d1      	strh	r1, [r2, #38]	; 0x26
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	d10f      	bne.n	8006aea <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	68da      	ldr	r2, [r3, #12]
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006ad8:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */    
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	68da      	ldr	r2, [r3, #12]
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006ae8:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006aea:	2300      	movs	r3, #0
 8006aec:	e000      	b.n	8006af0 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8006aee:	2302      	movs	r3, #2
  }
}
 8006af0:	4618      	mov	r0, r3
 8006af2:	3714      	adds	r7, #20
 8006af4:	46bd      	mov	sp, r7
 8006af6:	bc80      	pop	{r7}
 8006af8:	4770      	bx	lr

08006afa <UART_EndTransmit_IT>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006afa:	b580      	push	{r7, lr}
 8006afc:	b082      	sub	sp, #8
 8006afe:	af00      	add	r7, sp, #0
 8006b00:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */    
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	68da      	ldr	r2, [r3, #12]
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006b10:	60da      	str	r2, [r3, #12]
  
  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	2220      	movs	r2, #32
 8006b16:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  HAL_UART_TxCpltCallback(huart);
 8006b1a:	6878      	ldr	r0, [r7, #4]
 8006b1c:	f7ff ff4c 	bl	80069b8 <HAL_UART_TxCpltCallback>
  
  return HAL_OK;
 8006b20:	2300      	movs	r3, #0
}
 8006b22:	4618      	mov	r0, r3
 8006b24:	3708      	adds	r7, #8
 8006b26:	46bd      	mov	sp, r7
 8006b28:	bd80      	pop	{r7, pc}

08006b2a <UART_Receive_IT>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006b2a:	b580      	push	{r7, lr}
 8006b2c:	b084      	sub	sp, #16
 8006b2e:	af00      	add	r7, sp, #0
 8006b30:	6078      	str	r0, [r7, #4]
  uint16_t* tmp;
  
  /* Check that a Rx process is ongoing */
  if(huart->RxState == HAL_UART_STATE_BUSY_RX) 
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8006b38:	b2db      	uxtb	r3, r3
 8006b3a:	2b22      	cmp	r3, #34	; 0x22
 8006b3c:	d171      	bne.n	8006c22 <UART_Receive_IT+0xf8>
  {
    if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	689b      	ldr	r3, [r3, #8]
 8006b42:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006b46:	d123      	bne.n	8006b90 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t*) huart->pRxBuffPtr;
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b4c:	60fb      	str	r3, [r7, #12]
      if(huart->Init.Parity == UART_PARITY_NONE)
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	691b      	ldr	r3, [r3, #16]
 8006b52:	2b00      	cmp	r3, #0
 8006b54:	d10e      	bne.n	8006b74 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	685b      	ldr	r3, [r3, #4]
 8006b5c:	b29b      	uxth	r3, r3
 8006b5e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006b62:	b29a      	uxth	r2, r3
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b6c:	1c9a      	adds	r2, r3, #2
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	629a      	str	r2, [r3, #40]	; 0x28
 8006b72:	e029      	b.n	8006bc8 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	685b      	ldr	r3, [r3, #4]
 8006b7a:	b29b      	uxth	r3, r3
 8006b7c:	b2db      	uxtb	r3, r3
 8006b7e:	b29a      	uxth	r2, r3
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b88:	1c5a      	adds	r2, r3, #1
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	629a      	str	r2, [r3, #40]	; 0x28
 8006b8e:	e01b      	b.n	8006bc8 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if(huart->Init.Parity == UART_PARITY_NONE)
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	691b      	ldr	r3, [r3, #16]
 8006b94:	2b00      	cmp	r3, #0
 8006b96:	d10a      	bne.n	8006bae <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	6858      	ldr	r0, [r3, #4]
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ba2:	1c59      	adds	r1, r3, #1
 8006ba4:	687a      	ldr	r2, [r7, #4]
 8006ba6:	6291      	str	r1, [r2, #40]	; 0x28
 8006ba8:	b2c2      	uxtb	r2, r0
 8006baa:	701a      	strb	r2, [r3, #0]
 8006bac:	e00c      	b.n	8006bc8 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	685b      	ldr	r3, [r3, #4]
 8006bb4:	b2da      	uxtb	r2, r3
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006bba:	1c58      	adds	r0, r3, #1
 8006bbc:	6879      	ldr	r1, [r7, #4]
 8006bbe:	6288      	str	r0, [r1, #40]	; 0x28
 8006bc0:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8006bc4:	b2d2      	uxtb	r2, r2
 8006bc6:	701a      	strb	r2, [r3, #0]
      }
    }

    if(--huart->RxXferCount == 0U)
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006bcc:	b29b      	uxth	r3, r3
 8006bce:	3b01      	subs	r3, #1
 8006bd0:	b29b      	uxth	r3, r3
 8006bd2:	687a      	ldr	r2, [r7, #4]
 8006bd4:	4619      	mov	r1, r3
 8006bd6:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8006bd8:	2b00      	cmp	r3, #0
 8006bda:	d120      	bne.n	8006c1e <UART_Receive_IT+0xf4>
    {
      /* Disable the IRDA Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	68da      	ldr	r2, [r3, #12]
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	f022 0220 	bic.w	r2, r2, #32
 8006bea:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	68da      	ldr	r2, [r3, #12]
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006bfa:	60da      	str	r2, [r3, #12]
        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	695a      	ldr	r2, [r3, #20]
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	f022 0201 	bic.w	r2, r2, #1
 8006c0a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	2220      	movs	r2, #32
 8006c10:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

      HAL_UART_RxCpltCallback(huart);
 8006c14:	6878      	ldr	r0, [r7, #4]
 8006c16:	f7ff fed8 	bl	80069ca <HAL_UART_RxCpltCallback>

      return HAL_OK;
 8006c1a:	2300      	movs	r3, #0
 8006c1c:	e002      	b.n	8006c24 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8006c1e:	2300      	movs	r3, #0
 8006c20:	e000      	b.n	8006c24 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8006c22:	2302      	movs	r3, #2
  }
}
 8006c24:	4618      	mov	r0, r3
 8006c26:	3710      	adds	r7, #16
 8006c28:	46bd      	mov	sp, r7
 8006c2a:	bd80      	pop	{r7, pc}

08006c2c <UART_SetConfig>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006c2c:	b5b0      	push	{r4, r5, r7, lr}
 8006c2e:	b084      	sub	sp, #16
 8006c30:	af00      	add	r7, sp, #0
 8006c32:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0x00U;
 8006c34:	2300      	movs	r3, #0
 8006c36:	60fb      	str	r3, [r7, #12]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*------- UART-associated USART registers setting : CR2 Configuration ------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according 
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	691b      	ldr	r3, [r3, #16]
 8006c3e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	68da      	ldr	r2, [r3, #12]
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	430a      	orrs	r2, r1
 8006c4c:	611a      	str	r2, [r3, #16]
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1, 
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8), 
             tmpreg);
#else
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	689a      	ldr	r2, [r3, #8]
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	691b      	ldr	r3, [r3, #16]
 8006c56:	431a      	orrs	r2, r3
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	695b      	ldr	r3, [r3, #20]
 8006c5c:	4313      	orrs	r3, r2
 8006c5e:	68fa      	ldr	r2, [r7, #12]
 8006c60:	4313      	orrs	r3, r2
 8006c62:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1, 
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	68db      	ldr	r3, [r3, #12]
 8006c6a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8006c6e:	f023 030c 	bic.w	r3, r3, #12
 8006c72:	687a      	ldr	r2, [r7, #4]
 8006c74:	6812      	ldr	r2, [r2, #0]
 8006c76:	68f9      	ldr	r1, [r7, #12]
 8006c78:	430b      	orrs	r3, r1
 8006c7a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*------- UART-associated USART registers setting : CR3 Configuration ------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	695b      	ldr	r3, [r3, #20]
 8006c82:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	699a      	ldr	r2, [r3, #24]
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	430a      	orrs	r2, r1
 8006c90:	615a      	str	r2, [r3, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	4a6f      	ldr	r2, [pc, #444]	; (8006e54 <UART_SetConfig+0x228>)
 8006c98:	4293      	cmp	r3, r2
 8006c9a:	d16b      	bne.n	8006d74 <UART_SetConfig+0x148>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8006c9c:	f7fe fc50 	bl	8005540 <HAL_RCC_GetPCLK2Freq>
 8006ca0:	4602      	mov	r2, r0
 8006ca2:	4613      	mov	r3, r2
 8006ca4:	009b      	lsls	r3, r3, #2
 8006ca6:	4413      	add	r3, r2
 8006ca8:	009a      	lsls	r2, r3, #2
 8006caa:	441a      	add	r2, r3
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	685b      	ldr	r3, [r3, #4]
 8006cb0:	009b      	lsls	r3, r3, #2
 8006cb2:	fbb2 f3f3 	udiv	r3, r2, r3
 8006cb6:	4a68      	ldr	r2, [pc, #416]	; (8006e58 <UART_SetConfig+0x22c>)
 8006cb8:	fba2 2303 	umull	r2, r3, r2, r3
 8006cbc:	095b      	lsrs	r3, r3, #5
 8006cbe:	011c      	lsls	r4, r3, #4
 8006cc0:	f7fe fc3e 	bl	8005540 <HAL_RCC_GetPCLK2Freq>
 8006cc4:	4602      	mov	r2, r0
 8006cc6:	4613      	mov	r3, r2
 8006cc8:	009b      	lsls	r3, r3, #2
 8006cca:	4413      	add	r3, r2
 8006ccc:	009a      	lsls	r2, r3, #2
 8006cce:	441a      	add	r2, r3
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	685b      	ldr	r3, [r3, #4]
 8006cd4:	009b      	lsls	r3, r3, #2
 8006cd6:	fbb2 f5f3 	udiv	r5, r2, r3
 8006cda:	f7fe fc31 	bl	8005540 <HAL_RCC_GetPCLK2Freq>
 8006cde:	4602      	mov	r2, r0
 8006ce0:	4613      	mov	r3, r2
 8006ce2:	009b      	lsls	r3, r3, #2
 8006ce4:	4413      	add	r3, r2
 8006ce6:	009a      	lsls	r2, r3, #2
 8006ce8:	441a      	add	r2, r3
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	685b      	ldr	r3, [r3, #4]
 8006cee:	009b      	lsls	r3, r3, #2
 8006cf0:	fbb2 f3f3 	udiv	r3, r2, r3
 8006cf4:	4a58      	ldr	r2, [pc, #352]	; (8006e58 <UART_SetConfig+0x22c>)
 8006cf6:	fba2 2303 	umull	r2, r3, r2, r3
 8006cfa:	095b      	lsrs	r3, r3, #5
 8006cfc:	2264      	movs	r2, #100	; 0x64
 8006cfe:	fb02 f303 	mul.w	r3, r2, r3
 8006d02:	1aeb      	subs	r3, r5, r3
 8006d04:	011b      	lsls	r3, r3, #4
 8006d06:	3332      	adds	r3, #50	; 0x32
 8006d08:	4a53      	ldr	r2, [pc, #332]	; (8006e58 <UART_SetConfig+0x22c>)
 8006d0a:	fba2 2303 	umull	r2, r3, r2, r3
 8006d0e:	095b      	lsrs	r3, r3, #5
 8006d10:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006d14:	441c      	add	r4, r3
 8006d16:	f7fe fc13 	bl	8005540 <HAL_RCC_GetPCLK2Freq>
 8006d1a:	4602      	mov	r2, r0
 8006d1c:	4613      	mov	r3, r2
 8006d1e:	009b      	lsls	r3, r3, #2
 8006d20:	4413      	add	r3, r2
 8006d22:	009a      	lsls	r2, r3, #2
 8006d24:	441a      	add	r2, r3
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	685b      	ldr	r3, [r3, #4]
 8006d2a:	009b      	lsls	r3, r3, #2
 8006d2c:	fbb2 f5f3 	udiv	r5, r2, r3
 8006d30:	f7fe fc06 	bl	8005540 <HAL_RCC_GetPCLK2Freq>
 8006d34:	4602      	mov	r2, r0
 8006d36:	4613      	mov	r3, r2
 8006d38:	009b      	lsls	r3, r3, #2
 8006d3a:	4413      	add	r3, r2
 8006d3c:	009a      	lsls	r2, r3, #2
 8006d3e:	441a      	add	r2, r3
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	685b      	ldr	r3, [r3, #4]
 8006d44:	009b      	lsls	r3, r3, #2
 8006d46:	fbb2 f3f3 	udiv	r3, r2, r3
 8006d4a:	4a43      	ldr	r2, [pc, #268]	; (8006e58 <UART_SetConfig+0x22c>)
 8006d4c:	fba2 2303 	umull	r2, r3, r2, r3
 8006d50:	095b      	lsrs	r3, r3, #5
 8006d52:	2264      	movs	r2, #100	; 0x64
 8006d54:	fb02 f303 	mul.w	r3, r2, r3
 8006d58:	1aeb      	subs	r3, r5, r3
 8006d5a:	011b      	lsls	r3, r3, #4
 8006d5c:	3332      	adds	r3, #50	; 0x32
 8006d5e:	4a3e      	ldr	r2, [pc, #248]	; (8006e58 <UART_SetConfig+0x22c>)
 8006d60:	fba2 2303 	umull	r2, r3, r2, r3
 8006d64:	095b      	lsrs	r3, r3, #5
 8006d66:	f003 020f 	and.w	r2, r3, #15
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	4422      	add	r2, r4
 8006d70:	609a      	str	r2, [r3, #8]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
  }
#endif /* USART_CR1_OVER8 */
}
 8006d72:	e06a      	b.n	8006e4a <UART_SetConfig+0x21e>
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8006d74:	f7fe fbd0 	bl	8005518 <HAL_RCC_GetPCLK1Freq>
 8006d78:	4602      	mov	r2, r0
 8006d7a:	4613      	mov	r3, r2
 8006d7c:	009b      	lsls	r3, r3, #2
 8006d7e:	4413      	add	r3, r2
 8006d80:	009a      	lsls	r2, r3, #2
 8006d82:	441a      	add	r2, r3
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	685b      	ldr	r3, [r3, #4]
 8006d88:	009b      	lsls	r3, r3, #2
 8006d8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8006d8e:	4a32      	ldr	r2, [pc, #200]	; (8006e58 <UART_SetConfig+0x22c>)
 8006d90:	fba2 2303 	umull	r2, r3, r2, r3
 8006d94:	095b      	lsrs	r3, r3, #5
 8006d96:	011c      	lsls	r4, r3, #4
 8006d98:	f7fe fbbe 	bl	8005518 <HAL_RCC_GetPCLK1Freq>
 8006d9c:	4602      	mov	r2, r0
 8006d9e:	4613      	mov	r3, r2
 8006da0:	009b      	lsls	r3, r3, #2
 8006da2:	4413      	add	r3, r2
 8006da4:	009a      	lsls	r2, r3, #2
 8006da6:	441a      	add	r2, r3
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	685b      	ldr	r3, [r3, #4]
 8006dac:	009b      	lsls	r3, r3, #2
 8006dae:	fbb2 f5f3 	udiv	r5, r2, r3
 8006db2:	f7fe fbb1 	bl	8005518 <HAL_RCC_GetPCLK1Freq>
 8006db6:	4602      	mov	r2, r0
 8006db8:	4613      	mov	r3, r2
 8006dba:	009b      	lsls	r3, r3, #2
 8006dbc:	4413      	add	r3, r2
 8006dbe:	009a      	lsls	r2, r3, #2
 8006dc0:	441a      	add	r2, r3
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	685b      	ldr	r3, [r3, #4]
 8006dc6:	009b      	lsls	r3, r3, #2
 8006dc8:	fbb2 f3f3 	udiv	r3, r2, r3
 8006dcc:	4a22      	ldr	r2, [pc, #136]	; (8006e58 <UART_SetConfig+0x22c>)
 8006dce:	fba2 2303 	umull	r2, r3, r2, r3
 8006dd2:	095b      	lsrs	r3, r3, #5
 8006dd4:	2264      	movs	r2, #100	; 0x64
 8006dd6:	fb02 f303 	mul.w	r3, r2, r3
 8006dda:	1aeb      	subs	r3, r5, r3
 8006ddc:	011b      	lsls	r3, r3, #4
 8006dde:	3332      	adds	r3, #50	; 0x32
 8006de0:	4a1d      	ldr	r2, [pc, #116]	; (8006e58 <UART_SetConfig+0x22c>)
 8006de2:	fba2 2303 	umull	r2, r3, r2, r3
 8006de6:	095b      	lsrs	r3, r3, #5
 8006de8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006dec:	441c      	add	r4, r3
 8006dee:	f7fe fb93 	bl	8005518 <HAL_RCC_GetPCLK1Freq>
 8006df2:	4602      	mov	r2, r0
 8006df4:	4613      	mov	r3, r2
 8006df6:	009b      	lsls	r3, r3, #2
 8006df8:	4413      	add	r3, r2
 8006dfa:	009a      	lsls	r2, r3, #2
 8006dfc:	441a      	add	r2, r3
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	685b      	ldr	r3, [r3, #4]
 8006e02:	009b      	lsls	r3, r3, #2
 8006e04:	fbb2 f5f3 	udiv	r5, r2, r3
 8006e08:	f7fe fb86 	bl	8005518 <HAL_RCC_GetPCLK1Freq>
 8006e0c:	4602      	mov	r2, r0
 8006e0e:	4613      	mov	r3, r2
 8006e10:	009b      	lsls	r3, r3, #2
 8006e12:	4413      	add	r3, r2
 8006e14:	009a      	lsls	r2, r3, #2
 8006e16:	441a      	add	r2, r3
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	685b      	ldr	r3, [r3, #4]
 8006e1c:	009b      	lsls	r3, r3, #2
 8006e1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006e22:	4a0d      	ldr	r2, [pc, #52]	; (8006e58 <UART_SetConfig+0x22c>)
 8006e24:	fba2 2303 	umull	r2, r3, r2, r3
 8006e28:	095b      	lsrs	r3, r3, #5
 8006e2a:	2264      	movs	r2, #100	; 0x64
 8006e2c:	fb02 f303 	mul.w	r3, r2, r3
 8006e30:	1aeb      	subs	r3, r5, r3
 8006e32:	011b      	lsls	r3, r3, #4
 8006e34:	3332      	adds	r3, #50	; 0x32
 8006e36:	4a08      	ldr	r2, [pc, #32]	; (8006e58 <UART_SetConfig+0x22c>)
 8006e38:	fba2 2303 	umull	r2, r3, r2, r3
 8006e3c:	095b      	lsrs	r3, r3, #5
 8006e3e:	f003 020f 	and.w	r2, r3, #15
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	4422      	add	r2, r4
 8006e48:	609a      	str	r2, [r3, #8]
}
 8006e4a:	bf00      	nop
 8006e4c:	3710      	adds	r7, #16
 8006e4e:	46bd      	mov	sp, r7
 8006e50:	bdb0      	pop	{r4, r5, r7, pc}
 8006e52:	bf00      	nop
 8006e54:	40013800 	.word	0x40013800
 8006e58:	51eb851f 	.word	0x51eb851f

08006e5c <atoi>:
 8006e5c:	220a      	movs	r2, #10
 8006e5e:	2100      	movs	r1, #0
 8006e60:	f001 bda0 	b.w	80089a4 <strtol>

08006e64 <__errno>:
 8006e64:	4b01      	ldr	r3, [pc, #4]	; (8006e6c <__errno+0x8>)
 8006e66:	6818      	ldr	r0, [r3, #0]
 8006e68:	4770      	bx	lr
 8006e6a:	bf00      	nop
 8006e6c:	20000024 	.word	0x20000024

08006e70 <__libc_init_array>:
 8006e70:	b570      	push	{r4, r5, r6, lr}
 8006e72:	2500      	movs	r5, #0
 8006e74:	4e0c      	ldr	r6, [pc, #48]	; (8006ea8 <__libc_init_array+0x38>)
 8006e76:	4c0d      	ldr	r4, [pc, #52]	; (8006eac <__libc_init_array+0x3c>)
 8006e78:	1ba4      	subs	r4, r4, r6
 8006e7a:	10a4      	asrs	r4, r4, #2
 8006e7c:	42a5      	cmp	r5, r4
 8006e7e:	d109      	bne.n	8006e94 <__libc_init_array+0x24>
 8006e80:	f003 fdac 	bl	800a9dc <_init>
 8006e84:	2500      	movs	r5, #0
 8006e86:	4e0a      	ldr	r6, [pc, #40]	; (8006eb0 <__libc_init_array+0x40>)
 8006e88:	4c0a      	ldr	r4, [pc, #40]	; (8006eb4 <__libc_init_array+0x44>)
 8006e8a:	1ba4      	subs	r4, r4, r6
 8006e8c:	10a4      	asrs	r4, r4, #2
 8006e8e:	42a5      	cmp	r5, r4
 8006e90:	d105      	bne.n	8006e9e <__libc_init_array+0x2e>
 8006e92:	bd70      	pop	{r4, r5, r6, pc}
 8006e94:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006e98:	4798      	blx	r3
 8006e9a:	3501      	adds	r5, #1
 8006e9c:	e7ee      	b.n	8006e7c <__libc_init_array+0xc>
 8006e9e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006ea2:	4798      	blx	r3
 8006ea4:	3501      	adds	r5, #1
 8006ea6:	e7f2      	b.n	8006e8e <__libc_init_array+0x1e>
 8006ea8:	0800b478 	.word	0x0800b478
 8006eac:	0800b478 	.word	0x0800b478
 8006eb0:	0800b478 	.word	0x0800b478
 8006eb4:	0800b47c 	.word	0x0800b47c

08006eb8 <memcpy>:
 8006eb8:	b510      	push	{r4, lr}
 8006eba:	1e43      	subs	r3, r0, #1
 8006ebc:	440a      	add	r2, r1
 8006ebe:	4291      	cmp	r1, r2
 8006ec0:	d100      	bne.n	8006ec4 <memcpy+0xc>
 8006ec2:	bd10      	pop	{r4, pc}
 8006ec4:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006ec8:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006ecc:	e7f7      	b.n	8006ebe <memcpy+0x6>

08006ece <memmove>:
 8006ece:	4288      	cmp	r0, r1
 8006ed0:	b510      	push	{r4, lr}
 8006ed2:	eb01 0302 	add.w	r3, r1, r2
 8006ed6:	d807      	bhi.n	8006ee8 <memmove+0x1a>
 8006ed8:	1e42      	subs	r2, r0, #1
 8006eda:	4299      	cmp	r1, r3
 8006edc:	d00a      	beq.n	8006ef4 <memmove+0x26>
 8006ede:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006ee2:	f802 4f01 	strb.w	r4, [r2, #1]!
 8006ee6:	e7f8      	b.n	8006eda <memmove+0xc>
 8006ee8:	4283      	cmp	r3, r0
 8006eea:	d9f5      	bls.n	8006ed8 <memmove+0xa>
 8006eec:	1881      	adds	r1, r0, r2
 8006eee:	1ad2      	subs	r2, r2, r3
 8006ef0:	42d3      	cmn	r3, r2
 8006ef2:	d100      	bne.n	8006ef6 <memmove+0x28>
 8006ef4:	bd10      	pop	{r4, pc}
 8006ef6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006efa:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8006efe:	e7f7      	b.n	8006ef0 <memmove+0x22>

08006f00 <memset>:
 8006f00:	4603      	mov	r3, r0
 8006f02:	4402      	add	r2, r0
 8006f04:	4293      	cmp	r3, r2
 8006f06:	d100      	bne.n	8006f0a <memset+0xa>
 8006f08:	4770      	bx	lr
 8006f0a:	f803 1b01 	strb.w	r1, [r3], #1
 8006f0e:	e7f9      	b.n	8006f04 <memset+0x4>

08006f10 <__cvt>:
 8006f10:	2b00      	cmp	r3, #0
 8006f12:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006f16:	461e      	mov	r6, r3
 8006f18:	bfbb      	ittet	lt
 8006f1a:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8006f1e:	461e      	movlt	r6, r3
 8006f20:	2300      	movge	r3, #0
 8006f22:	232d      	movlt	r3, #45	; 0x2d
 8006f24:	b088      	sub	sp, #32
 8006f26:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8006f28:	e9dd 1a12 	ldrd	r1, sl, [sp, #72]	; 0x48
 8006f2c:	f027 0720 	bic.w	r7, r7, #32
 8006f30:	2f46      	cmp	r7, #70	; 0x46
 8006f32:	4614      	mov	r4, r2
 8006f34:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8006f36:	700b      	strb	r3, [r1, #0]
 8006f38:	d004      	beq.n	8006f44 <__cvt+0x34>
 8006f3a:	2f45      	cmp	r7, #69	; 0x45
 8006f3c:	d100      	bne.n	8006f40 <__cvt+0x30>
 8006f3e:	3501      	adds	r5, #1
 8006f40:	2302      	movs	r3, #2
 8006f42:	e000      	b.n	8006f46 <__cvt+0x36>
 8006f44:	2303      	movs	r3, #3
 8006f46:	aa07      	add	r2, sp, #28
 8006f48:	9204      	str	r2, [sp, #16]
 8006f4a:	aa06      	add	r2, sp, #24
 8006f4c:	e9cd a202 	strd	sl, r2, [sp, #8]
 8006f50:	e9cd 3500 	strd	r3, r5, [sp]
 8006f54:	4622      	mov	r2, r4
 8006f56:	4633      	mov	r3, r6
 8006f58:	f001 fdca 	bl	8008af0 <_dtoa_r>
 8006f5c:	2f47      	cmp	r7, #71	; 0x47
 8006f5e:	4680      	mov	r8, r0
 8006f60:	d102      	bne.n	8006f68 <__cvt+0x58>
 8006f62:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006f64:	07db      	lsls	r3, r3, #31
 8006f66:	d526      	bpl.n	8006fb6 <__cvt+0xa6>
 8006f68:	2f46      	cmp	r7, #70	; 0x46
 8006f6a:	eb08 0905 	add.w	r9, r8, r5
 8006f6e:	d111      	bne.n	8006f94 <__cvt+0x84>
 8006f70:	f898 3000 	ldrb.w	r3, [r8]
 8006f74:	2b30      	cmp	r3, #48	; 0x30
 8006f76:	d10a      	bne.n	8006f8e <__cvt+0x7e>
 8006f78:	2200      	movs	r2, #0
 8006f7a:	2300      	movs	r3, #0
 8006f7c:	4620      	mov	r0, r4
 8006f7e:	4631      	mov	r1, r6
 8006f80:	f7f9 fd12 	bl	80009a8 <__aeabi_dcmpeq>
 8006f84:	b918      	cbnz	r0, 8006f8e <__cvt+0x7e>
 8006f86:	f1c5 0501 	rsb	r5, r5, #1
 8006f8a:	f8ca 5000 	str.w	r5, [sl]
 8006f8e:	f8da 3000 	ldr.w	r3, [sl]
 8006f92:	4499      	add	r9, r3
 8006f94:	2200      	movs	r2, #0
 8006f96:	2300      	movs	r3, #0
 8006f98:	4620      	mov	r0, r4
 8006f9a:	4631      	mov	r1, r6
 8006f9c:	f7f9 fd04 	bl	80009a8 <__aeabi_dcmpeq>
 8006fa0:	b938      	cbnz	r0, 8006fb2 <__cvt+0xa2>
 8006fa2:	2230      	movs	r2, #48	; 0x30
 8006fa4:	9b07      	ldr	r3, [sp, #28]
 8006fa6:	454b      	cmp	r3, r9
 8006fa8:	d205      	bcs.n	8006fb6 <__cvt+0xa6>
 8006faa:	1c59      	adds	r1, r3, #1
 8006fac:	9107      	str	r1, [sp, #28]
 8006fae:	701a      	strb	r2, [r3, #0]
 8006fb0:	e7f8      	b.n	8006fa4 <__cvt+0x94>
 8006fb2:	f8cd 901c 	str.w	r9, [sp, #28]
 8006fb6:	4640      	mov	r0, r8
 8006fb8:	9b07      	ldr	r3, [sp, #28]
 8006fba:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8006fbc:	eba3 0308 	sub.w	r3, r3, r8
 8006fc0:	6013      	str	r3, [r2, #0]
 8006fc2:	b008      	add	sp, #32
 8006fc4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08006fc8 <__exponent>:
 8006fc8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006fca:	2900      	cmp	r1, #0
 8006fcc:	bfb4      	ite	lt
 8006fce:	232d      	movlt	r3, #45	; 0x2d
 8006fd0:	232b      	movge	r3, #43	; 0x2b
 8006fd2:	4604      	mov	r4, r0
 8006fd4:	bfb8      	it	lt
 8006fd6:	4249      	neglt	r1, r1
 8006fd8:	2909      	cmp	r1, #9
 8006fda:	f804 2b02 	strb.w	r2, [r4], #2
 8006fde:	7043      	strb	r3, [r0, #1]
 8006fe0:	dd21      	ble.n	8007026 <__exponent+0x5e>
 8006fe2:	f10d 0307 	add.w	r3, sp, #7
 8006fe6:	461f      	mov	r7, r3
 8006fe8:	260a      	movs	r6, #10
 8006fea:	fb91 f5f6 	sdiv	r5, r1, r6
 8006fee:	fb06 1115 	mls	r1, r6, r5, r1
 8006ff2:	2d09      	cmp	r5, #9
 8006ff4:	f101 0130 	add.w	r1, r1, #48	; 0x30
 8006ff8:	f803 1c01 	strb.w	r1, [r3, #-1]
 8006ffc:	f103 32ff 	add.w	r2, r3, #4294967295	; 0xffffffff
 8007000:	4629      	mov	r1, r5
 8007002:	dc09      	bgt.n	8007018 <__exponent+0x50>
 8007004:	3130      	adds	r1, #48	; 0x30
 8007006:	3b02      	subs	r3, #2
 8007008:	f802 1c01 	strb.w	r1, [r2, #-1]
 800700c:	42bb      	cmp	r3, r7
 800700e:	4622      	mov	r2, r4
 8007010:	d304      	bcc.n	800701c <__exponent+0x54>
 8007012:	1a10      	subs	r0, r2, r0
 8007014:	b003      	add	sp, #12
 8007016:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007018:	4613      	mov	r3, r2
 800701a:	e7e6      	b.n	8006fea <__exponent+0x22>
 800701c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007020:	f804 2b01 	strb.w	r2, [r4], #1
 8007024:	e7f2      	b.n	800700c <__exponent+0x44>
 8007026:	2330      	movs	r3, #48	; 0x30
 8007028:	4419      	add	r1, r3
 800702a:	7083      	strb	r3, [r0, #2]
 800702c:	1d02      	adds	r2, r0, #4
 800702e:	70c1      	strb	r1, [r0, #3]
 8007030:	e7ef      	b.n	8007012 <__exponent+0x4a>
	...

08007034 <_printf_float>:
 8007034:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007038:	b091      	sub	sp, #68	; 0x44
 800703a:	460c      	mov	r4, r1
 800703c:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 800703e:	4693      	mov	fp, r2
 8007040:	461e      	mov	r6, r3
 8007042:	4605      	mov	r5, r0
 8007044:	f002 fe36 	bl	8009cb4 <_localeconv_r>
 8007048:	6803      	ldr	r3, [r0, #0]
 800704a:	4618      	mov	r0, r3
 800704c:	9309      	str	r3, [sp, #36]	; 0x24
 800704e:	f7f9 f87f 	bl	8000150 <strlen>
 8007052:	2300      	movs	r3, #0
 8007054:	930e      	str	r3, [sp, #56]	; 0x38
 8007056:	683b      	ldr	r3, [r7, #0]
 8007058:	900a      	str	r0, [sp, #40]	; 0x28
 800705a:	3307      	adds	r3, #7
 800705c:	f023 0307 	bic.w	r3, r3, #7
 8007060:	f103 0208 	add.w	r2, r3, #8
 8007064:	f894 8018 	ldrb.w	r8, [r4, #24]
 8007068:	f8d4 a000 	ldr.w	sl, [r4]
 800706c:	603a      	str	r2, [r7, #0]
 800706e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007072:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8007076:	e9d4 7912 	ldrd	r7, r9, [r4, #72]	; 0x48
 800707a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800707e:	930b      	str	r3, [sp, #44]	; 0x2c
 8007080:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007084:	4ba6      	ldr	r3, [pc, #664]	; (8007320 <_printf_float+0x2ec>)
 8007086:	4638      	mov	r0, r7
 8007088:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800708a:	f7f9 fcbf 	bl	8000a0c <__aeabi_dcmpun>
 800708e:	bb68      	cbnz	r0, 80070ec <_printf_float+0xb8>
 8007090:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007094:	4ba2      	ldr	r3, [pc, #648]	; (8007320 <_printf_float+0x2ec>)
 8007096:	4638      	mov	r0, r7
 8007098:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800709a:	f7f9 fc99 	bl	80009d0 <__aeabi_dcmple>
 800709e:	bb28      	cbnz	r0, 80070ec <_printf_float+0xb8>
 80070a0:	2200      	movs	r2, #0
 80070a2:	2300      	movs	r3, #0
 80070a4:	4638      	mov	r0, r7
 80070a6:	4649      	mov	r1, r9
 80070a8:	f7f9 fc88 	bl	80009bc <__aeabi_dcmplt>
 80070ac:	b110      	cbz	r0, 80070b4 <_printf_float+0x80>
 80070ae:	232d      	movs	r3, #45	; 0x2d
 80070b0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80070b4:	4f9b      	ldr	r7, [pc, #620]	; (8007324 <_printf_float+0x2f0>)
 80070b6:	4b9c      	ldr	r3, [pc, #624]	; (8007328 <_printf_float+0x2f4>)
 80070b8:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80070bc:	bf98      	it	ls
 80070be:	461f      	movls	r7, r3
 80070c0:	2303      	movs	r3, #3
 80070c2:	f04f 0900 	mov.w	r9, #0
 80070c6:	6123      	str	r3, [r4, #16]
 80070c8:	f02a 0304 	bic.w	r3, sl, #4
 80070cc:	6023      	str	r3, [r4, #0]
 80070ce:	9600      	str	r6, [sp, #0]
 80070d0:	465b      	mov	r3, fp
 80070d2:	aa0f      	add	r2, sp, #60	; 0x3c
 80070d4:	4621      	mov	r1, r4
 80070d6:	4628      	mov	r0, r5
 80070d8:	f000 f9e2 	bl	80074a0 <_printf_common>
 80070dc:	3001      	adds	r0, #1
 80070de:	f040 8090 	bne.w	8007202 <_printf_float+0x1ce>
 80070e2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80070e6:	b011      	add	sp, #68	; 0x44
 80070e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80070ec:	463a      	mov	r2, r7
 80070ee:	464b      	mov	r3, r9
 80070f0:	4638      	mov	r0, r7
 80070f2:	4649      	mov	r1, r9
 80070f4:	f7f9 fc8a 	bl	8000a0c <__aeabi_dcmpun>
 80070f8:	b110      	cbz	r0, 8007100 <_printf_float+0xcc>
 80070fa:	4f8c      	ldr	r7, [pc, #560]	; (800732c <_printf_float+0x2f8>)
 80070fc:	4b8c      	ldr	r3, [pc, #560]	; (8007330 <_printf_float+0x2fc>)
 80070fe:	e7db      	b.n	80070b8 <_printf_float+0x84>
 8007100:	6863      	ldr	r3, [r4, #4]
 8007102:	f44a 6280 	orr.w	r2, sl, #1024	; 0x400
 8007106:	1c59      	adds	r1, r3, #1
 8007108:	a80d      	add	r0, sp, #52	; 0x34
 800710a:	a90e      	add	r1, sp, #56	; 0x38
 800710c:	d140      	bne.n	8007190 <_printf_float+0x15c>
 800710e:	2306      	movs	r3, #6
 8007110:	6063      	str	r3, [r4, #4]
 8007112:	f04f 0c00 	mov.w	ip, #0
 8007116:	f10d 0333 	add.w	r3, sp, #51	; 0x33
 800711a:	e9cd 2301 	strd	r2, r3, [sp, #4]
 800711e:	6863      	ldr	r3, [r4, #4]
 8007120:	6022      	str	r2, [r4, #0]
 8007122:	e9cd 0803 	strd	r0, r8, [sp, #12]
 8007126:	9300      	str	r3, [sp, #0]
 8007128:	463a      	mov	r2, r7
 800712a:	464b      	mov	r3, r9
 800712c:	e9cd 1c05 	strd	r1, ip, [sp, #20]
 8007130:	4628      	mov	r0, r5
 8007132:	f7ff feed 	bl	8006f10 <__cvt>
 8007136:	f008 03df 	and.w	r3, r8, #223	; 0xdf
 800713a:	2b47      	cmp	r3, #71	; 0x47
 800713c:	4607      	mov	r7, r0
 800713e:	d109      	bne.n	8007154 <_printf_float+0x120>
 8007140:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007142:	1cd8      	adds	r0, r3, #3
 8007144:	db02      	blt.n	800714c <_printf_float+0x118>
 8007146:	6862      	ldr	r2, [r4, #4]
 8007148:	4293      	cmp	r3, r2
 800714a:	dd47      	ble.n	80071dc <_printf_float+0x1a8>
 800714c:	f1a8 0802 	sub.w	r8, r8, #2
 8007150:	fa5f f888 	uxtb.w	r8, r8
 8007154:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 8007158:	990d      	ldr	r1, [sp, #52]	; 0x34
 800715a:	d824      	bhi.n	80071a6 <_printf_float+0x172>
 800715c:	3901      	subs	r1, #1
 800715e:	4642      	mov	r2, r8
 8007160:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8007164:	910d      	str	r1, [sp, #52]	; 0x34
 8007166:	f7ff ff2f 	bl	8006fc8 <__exponent>
 800716a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800716c:	4681      	mov	r9, r0
 800716e:	1813      	adds	r3, r2, r0
 8007170:	2a01      	cmp	r2, #1
 8007172:	6123      	str	r3, [r4, #16]
 8007174:	dc02      	bgt.n	800717c <_printf_float+0x148>
 8007176:	6822      	ldr	r2, [r4, #0]
 8007178:	07d1      	lsls	r1, r2, #31
 800717a:	d501      	bpl.n	8007180 <_printf_float+0x14c>
 800717c:	3301      	adds	r3, #1
 800717e:	6123      	str	r3, [r4, #16]
 8007180:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8007184:	2b00      	cmp	r3, #0
 8007186:	d0a2      	beq.n	80070ce <_printf_float+0x9a>
 8007188:	232d      	movs	r3, #45	; 0x2d
 800718a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800718e:	e79e      	b.n	80070ce <_printf_float+0x9a>
 8007190:	f1b8 0f67 	cmp.w	r8, #103	; 0x67
 8007194:	f000 816e 	beq.w	8007474 <_printf_float+0x440>
 8007198:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800719c:	d1b9      	bne.n	8007112 <_printf_float+0xde>
 800719e:	2b00      	cmp	r3, #0
 80071a0:	d1b7      	bne.n	8007112 <_printf_float+0xde>
 80071a2:	2301      	movs	r3, #1
 80071a4:	e7b4      	b.n	8007110 <_printf_float+0xdc>
 80071a6:	f1b8 0f66 	cmp.w	r8, #102	; 0x66
 80071aa:	d119      	bne.n	80071e0 <_printf_float+0x1ac>
 80071ac:	2900      	cmp	r1, #0
 80071ae:	6863      	ldr	r3, [r4, #4]
 80071b0:	dd0c      	ble.n	80071cc <_printf_float+0x198>
 80071b2:	6121      	str	r1, [r4, #16]
 80071b4:	b913      	cbnz	r3, 80071bc <_printf_float+0x188>
 80071b6:	6822      	ldr	r2, [r4, #0]
 80071b8:	07d2      	lsls	r2, r2, #31
 80071ba:	d502      	bpl.n	80071c2 <_printf_float+0x18e>
 80071bc:	3301      	adds	r3, #1
 80071be:	440b      	add	r3, r1
 80071c0:	6123      	str	r3, [r4, #16]
 80071c2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80071c4:	f04f 0900 	mov.w	r9, #0
 80071c8:	65a3      	str	r3, [r4, #88]	; 0x58
 80071ca:	e7d9      	b.n	8007180 <_printf_float+0x14c>
 80071cc:	b913      	cbnz	r3, 80071d4 <_printf_float+0x1a0>
 80071ce:	6822      	ldr	r2, [r4, #0]
 80071d0:	07d0      	lsls	r0, r2, #31
 80071d2:	d501      	bpl.n	80071d8 <_printf_float+0x1a4>
 80071d4:	3302      	adds	r3, #2
 80071d6:	e7f3      	b.n	80071c0 <_printf_float+0x18c>
 80071d8:	2301      	movs	r3, #1
 80071da:	e7f1      	b.n	80071c0 <_printf_float+0x18c>
 80071dc:	f04f 0867 	mov.w	r8, #103	; 0x67
 80071e0:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 80071e4:	4293      	cmp	r3, r2
 80071e6:	db05      	blt.n	80071f4 <_printf_float+0x1c0>
 80071e8:	6822      	ldr	r2, [r4, #0]
 80071ea:	6123      	str	r3, [r4, #16]
 80071ec:	07d1      	lsls	r1, r2, #31
 80071ee:	d5e8      	bpl.n	80071c2 <_printf_float+0x18e>
 80071f0:	3301      	adds	r3, #1
 80071f2:	e7e5      	b.n	80071c0 <_printf_float+0x18c>
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	bfcc      	ite	gt
 80071f8:	2301      	movgt	r3, #1
 80071fa:	f1c3 0302 	rsble	r3, r3, #2
 80071fe:	4413      	add	r3, r2
 8007200:	e7de      	b.n	80071c0 <_printf_float+0x18c>
 8007202:	6823      	ldr	r3, [r4, #0]
 8007204:	055a      	lsls	r2, r3, #21
 8007206:	d407      	bmi.n	8007218 <_printf_float+0x1e4>
 8007208:	6923      	ldr	r3, [r4, #16]
 800720a:	463a      	mov	r2, r7
 800720c:	4659      	mov	r1, fp
 800720e:	4628      	mov	r0, r5
 8007210:	47b0      	blx	r6
 8007212:	3001      	adds	r0, #1
 8007214:	d129      	bne.n	800726a <_printf_float+0x236>
 8007216:	e764      	b.n	80070e2 <_printf_float+0xae>
 8007218:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 800721c:	f240 80d7 	bls.w	80073ce <_printf_float+0x39a>
 8007220:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007224:	2200      	movs	r2, #0
 8007226:	2300      	movs	r3, #0
 8007228:	f7f9 fbbe 	bl	80009a8 <__aeabi_dcmpeq>
 800722c:	b388      	cbz	r0, 8007292 <_printf_float+0x25e>
 800722e:	2301      	movs	r3, #1
 8007230:	4a40      	ldr	r2, [pc, #256]	; (8007334 <_printf_float+0x300>)
 8007232:	4659      	mov	r1, fp
 8007234:	4628      	mov	r0, r5
 8007236:	47b0      	blx	r6
 8007238:	3001      	adds	r0, #1
 800723a:	f43f af52 	beq.w	80070e2 <_printf_float+0xae>
 800723e:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8007242:	429a      	cmp	r2, r3
 8007244:	db02      	blt.n	800724c <_printf_float+0x218>
 8007246:	6823      	ldr	r3, [r4, #0]
 8007248:	07d8      	lsls	r0, r3, #31
 800724a:	d50e      	bpl.n	800726a <_printf_float+0x236>
 800724c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007250:	4659      	mov	r1, fp
 8007252:	4628      	mov	r0, r5
 8007254:	47b0      	blx	r6
 8007256:	3001      	adds	r0, #1
 8007258:	f43f af43 	beq.w	80070e2 <_printf_float+0xae>
 800725c:	2700      	movs	r7, #0
 800725e:	f104 081a 	add.w	r8, r4, #26
 8007262:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007264:	3b01      	subs	r3, #1
 8007266:	42bb      	cmp	r3, r7
 8007268:	dc09      	bgt.n	800727e <_printf_float+0x24a>
 800726a:	6823      	ldr	r3, [r4, #0]
 800726c:	079f      	lsls	r7, r3, #30
 800726e:	f100 80fd 	bmi.w	800746c <_printf_float+0x438>
 8007272:	68e0      	ldr	r0, [r4, #12]
 8007274:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007276:	4298      	cmp	r0, r3
 8007278:	bfb8      	it	lt
 800727a:	4618      	movlt	r0, r3
 800727c:	e733      	b.n	80070e6 <_printf_float+0xb2>
 800727e:	2301      	movs	r3, #1
 8007280:	4642      	mov	r2, r8
 8007282:	4659      	mov	r1, fp
 8007284:	4628      	mov	r0, r5
 8007286:	47b0      	blx	r6
 8007288:	3001      	adds	r0, #1
 800728a:	f43f af2a 	beq.w	80070e2 <_printf_float+0xae>
 800728e:	3701      	adds	r7, #1
 8007290:	e7e7      	b.n	8007262 <_printf_float+0x22e>
 8007292:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007294:	2b00      	cmp	r3, #0
 8007296:	dc2b      	bgt.n	80072f0 <_printf_float+0x2bc>
 8007298:	2301      	movs	r3, #1
 800729a:	4a26      	ldr	r2, [pc, #152]	; (8007334 <_printf_float+0x300>)
 800729c:	4659      	mov	r1, fp
 800729e:	4628      	mov	r0, r5
 80072a0:	47b0      	blx	r6
 80072a2:	3001      	adds	r0, #1
 80072a4:	f43f af1d 	beq.w	80070e2 <_printf_float+0xae>
 80072a8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80072aa:	b923      	cbnz	r3, 80072b6 <_printf_float+0x282>
 80072ac:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80072ae:	b913      	cbnz	r3, 80072b6 <_printf_float+0x282>
 80072b0:	6823      	ldr	r3, [r4, #0]
 80072b2:	07d9      	lsls	r1, r3, #31
 80072b4:	d5d9      	bpl.n	800726a <_printf_float+0x236>
 80072b6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80072ba:	4659      	mov	r1, fp
 80072bc:	4628      	mov	r0, r5
 80072be:	47b0      	blx	r6
 80072c0:	3001      	adds	r0, #1
 80072c2:	f43f af0e 	beq.w	80070e2 <_printf_float+0xae>
 80072c6:	f04f 0800 	mov.w	r8, #0
 80072ca:	f104 091a 	add.w	r9, r4, #26
 80072ce:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80072d0:	425b      	negs	r3, r3
 80072d2:	4543      	cmp	r3, r8
 80072d4:	dc01      	bgt.n	80072da <_printf_float+0x2a6>
 80072d6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80072d8:	e797      	b.n	800720a <_printf_float+0x1d6>
 80072da:	2301      	movs	r3, #1
 80072dc:	464a      	mov	r2, r9
 80072de:	4659      	mov	r1, fp
 80072e0:	4628      	mov	r0, r5
 80072e2:	47b0      	blx	r6
 80072e4:	3001      	adds	r0, #1
 80072e6:	f43f aefc 	beq.w	80070e2 <_printf_float+0xae>
 80072ea:	f108 0801 	add.w	r8, r8, #1
 80072ee:	e7ee      	b.n	80072ce <_printf_float+0x29a>
 80072f0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80072f2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80072f4:	429a      	cmp	r2, r3
 80072f6:	bfa8      	it	ge
 80072f8:	461a      	movge	r2, r3
 80072fa:	2a00      	cmp	r2, #0
 80072fc:	4690      	mov	r8, r2
 80072fe:	dd07      	ble.n	8007310 <_printf_float+0x2dc>
 8007300:	4613      	mov	r3, r2
 8007302:	4659      	mov	r1, fp
 8007304:	463a      	mov	r2, r7
 8007306:	4628      	mov	r0, r5
 8007308:	47b0      	blx	r6
 800730a:	3001      	adds	r0, #1
 800730c:	f43f aee9 	beq.w	80070e2 <_printf_float+0xae>
 8007310:	f104 031a 	add.w	r3, r4, #26
 8007314:	f04f 0a00 	mov.w	sl, #0
 8007318:	ea28 78e8 	bic.w	r8, r8, r8, asr #31
 800731c:	930b      	str	r3, [sp, #44]	; 0x2c
 800731e:	e015      	b.n	800734c <_printf_float+0x318>
 8007320:	7fefffff 	.word	0x7fefffff
 8007324:	0800b1c8 	.word	0x0800b1c8
 8007328:	0800b1c4 	.word	0x0800b1c4
 800732c:	0800b1d0 	.word	0x0800b1d0
 8007330:	0800b1cc 	.word	0x0800b1cc
 8007334:	0800b1d4 	.word	0x0800b1d4
 8007338:	2301      	movs	r3, #1
 800733a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800733c:	4659      	mov	r1, fp
 800733e:	4628      	mov	r0, r5
 8007340:	47b0      	blx	r6
 8007342:	3001      	adds	r0, #1
 8007344:	f43f aecd 	beq.w	80070e2 <_printf_float+0xae>
 8007348:	f10a 0a01 	add.w	sl, sl, #1
 800734c:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
 8007350:	eba9 0308 	sub.w	r3, r9, r8
 8007354:	4553      	cmp	r3, sl
 8007356:	dcef      	bgt.n	8007338 <_printf_float+0x304>
 8007358:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800735c:	429a      	cmp	r2, r3
 800735e:	444f      	add	r7, r9
 8007360:	db14      	blt.n	800738c <_printf_float+0x358>
 8007362:	6823      	ldr	r3, [r4, #0]
 8007364:	07da      	lsls	r2, r3, #31
 8007366:	d411      	bmi.n	800738c <_printf_float+0x358>
 8007368:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800736a:	990d      	ldr	r1, [sp, #52]	; 0x34
 800736c:	eba3 0209 	sub.w	r2, r3, r9
 8007370:	eba3 0901 	sub.w	r9, r3, r1
 8007374:	4591      	cmp	r9, r2
 8007376:	bfa8      	it	ge
 8007378:	4691      	movge	r9, r2
 800737a:	f1b9 0f00 	cmp.w	r9, #0
 800737e:	dc0d      	bgt.n	800739c <_printf_float+0x368>
 8007380:	2700      	movs	r7, #0
 8007382:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007386:	f104 081a 	add.w	r8, r4, #26
 800738a:	e018      	b.n	80073be <_printf_float+0x38a>
 800738c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007390:	4659      	mov	r1, fp
 8007392:	4628      	mov	r0, r5
 8007394:	47b0      	blx	r6
 8007396:	3001      	adds	r0, #1
 8007398:	d1e6      	bne.n	8007368 <_printf_float+0x334>
 800739a:	e6a2      	b.n	80070e2 <_printf_float+0xae>
 800739c:	464b      	mov	r3, r9
 800739e:	463a      	mov	r2, r7
 80073a0:	4659      	mov	r1, fp
 80073a2:	4628      	mov	r0, r5
 80073a4:	47b0      	blx	r6
 80073a6:	3001      	adds	r0, #1
 80073a8:	d1ea      	bne.n	8007380 <_printf_float+0x34c>
 80073aa:	e69a      	b.n	80070e2 <_printf_float+0xae>
 80073ac:	2301      	movs	r3, #1
 80073ae:	4642      	mov	r2, r8
 80073b0:	4659      	mov	r1, fp
 80073b2:	4628      	mov	r0, r5
 80073b4:	47b0      	blx	r6
 80073b6:	3001      	adds	r0, #1
 80073b8:	f43f ae93 	beq.w	80070e2 <_printf_float+0xae>
 80073bc:	3701      	adds	r7, #1
 80073be:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80073c2:	1a9b      	subs	r3, r3, r2
 80073c4:	eba3 0309 	sub.w	r3, r3, r9
 80073c8:	42bb      	cmp	r3, r7
 80073ca:	dcef      	bgt.n	80073ac <_printf_float+0x378>
 80073cc:	e74d      	b.n	800726a <_printf_float+0x236>
 80073ce:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80073d0:	2a01      	cmp	r2, #1
 80073d2:	dc01      	bgt.n	80073d8 <_printf_float+0x3a4>
 80073d4:	07db      	lsls	r3, r3, #31
 80073d6:	d538      	bpl.n	800744a <_printf_float+0x416>
 80073d8:	2301      	movs	r3, #1
 80073da:	463a      	mov	r2, r7
 80073dc:	4659      	mov	r1, fp
 80073de:	4628      	mov	r0, r5
 80073e0:	47b0      	blx	r6
 80073e2:	3001      	adds	r0, #1
 80073e4:	f43f ae7d 	beq.w	80070e2 <_printf_float+0xae>
 80073e8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80073ec:	4659      	mov	r1, fp
 80073ee:	4628      	mov	r0, r5
 80073f0:	47b0      	blx	r6
 80073f2:	3001      	adds	r0, #1
 80073f4:	f107 0701 	add.w	r7, r7, #1
 80073f8:	f43f ae73 	beq.w	80070e2 <_printf_float+0xae>
 80073fc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007400:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007402:	2200      	movs	r2, #0
 8007404:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8007408:	2300      	movs	r3, #0
 800740a:	f7f9 facd 	bl	80009a8 <__aeabi_dcmpeq>
 800740e:	b9c0      	cbnz	r0, 8007442 <_printf_float+0x40e>
 8007410:	4643      	mov	r3, r8
 8007412:	463a      	mov	r2, r7
 8007414:	4659      	mov	r1, fp
 8007416:	4628      	mov	r0, r5
 8007418:	47b0      	blx	r6
 800741a:	3001      	adds	r0, #1
 800741c:	d10d      	bne.n	800743a <_printf_float+0x406>
 800741e:	e660      	b.n	80070e2 <_printf_float+0xae>
 8007420:	2301      	movs	r3, #1
 8007422:	4642      	mov	r2, r8
 8007424:	4659      	mov	r1, fp
 8007426:	4628      	mov	r0, r5
 8007428:	47b0      	blx	r6
 800742a:	3001      	adds	r0, #1
 800742c:	f43f ae59 	beq.w	80070e2 <_printf_float+0xae>
 8007430:	3701      	adds	r7, #1
 8007432:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007434:	3b01      	subs	r3, #1
 8007436:	42bb      	cmp	r3, r7
 8007438:	dcf2      	bgt.n	8007420 <_printf_float+0x3ec>
 800743a:	464b      	mov	r3, r9
 800743c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8007440:	e6e4      	b.n	800720c <_printf_float+0x1d8>
 8007442:	2700      	movs	r7, #0
 8007444:	f104 081a 	add.w	r8, r4, #26
 8007448:	e7f3      	b.n	8007432 <_printf_float+0x3fe>
 800744a:	2301      	movs	r3, #1
 800744c:	e7e1      	b.n	8007412 <_printf_float+0x3de>
 800744e:	2301      	movs	r3, #1
 8007450:	4642      	mov	r2, r8
 8007452:	4659      	mov	r1, fp
 8007454:	4628      	mov	r0, r5
 8007456:	47b0      	blx	r6
 8007458:	3001      	adds	r0, #1
 800745a:	f43f ae42 	beq.w	80070e2 <_printf_float+0xae>
 800745e:	3701      	adds	r7, #1
 8007460:	68e3      	ldr	r3, [r4, #12]
 8007462:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007464:	1a9b      	subs	r3, r3, r2
 8007466:	42bb      	cmp	r3, r7
 8007468:	dcf1      	bgt.n	800744e <_printf_float+0x41a>
 800746a:	e702      	b.n	8007272 <_printf_float+0x23e>
 800746c:	2700      	movs	r7, #0
 800746e:	f104 0819 	add.w	r8, r4, #25
 8007472:	e7f5      	b.n	8007460 <_printf_float+0x42c>
 8007474:	2b00      	cmp	r3, #0
 8007476:	f43f ae94 	beq.w	80071a2 <_printf_float+0x16e>
 800747a:	f04f 0c00 	mov.w	ip, #0
 800747e:	e9cd 1c05 	strd	r1, ip, [sp, #20]
 8007482:	f10d 0133 	add.w	r1, sp, #51	; 0x33
 8007486:	6022      	str	r2, [r4, #0]
 8007488:	e9cd 0803 	strd	r0, r8, [sp, #12]
 800748c:	e9cd 2101 	strd	r2, r1, [sp, #4]
 8007490:	9300      	str	r3, [sp, #0]
 8007492:	463a      	mov	r2, r7
 8007494:	464b      	mov	r3, r9
 8007496:	4628      	mov	r0, r5
 8007498:	f7ff fd3a 	bl	8006f10 <__cvt>
 800749c:	4607      	mov	r7, r0
 800749e:	e64f      	b.n	8007140 <_printf_float+0x10c>

080074a0 <_printf_common>:
 80074a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80074a4:	4691      	mov	r9, r2
 80074a6:	461f      	mov	r7, r3
 80074a8:	688a      	ldr	r2, [r1, #8]
 80074aa:	690b      	ldr	r3, [r1, #16]
 80074ac:	4606      	mov	r6, r0
 80074ae:	4293      	cmp	r3, r2
 80074b0:	bfb8      	it	lt
 80074b2:	4613      	movlt	r3, r2
 80074b4:	f8c9 3000 	str.w	r3, [r9]
 80074b8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80074bc:	460c      	mov	r4, r1
 80074be:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80074c2:	b112      	cbz	r2, 80074ca <_printf_common+0x2a>
 80074c4:	3301      	adds	r3, #1
 80074c6:	f8c9 3000 	str.w	r3, [r9]
 80074ca:	6823      	ldr	r3, [r4, #0]
 80074cc:	0699      	lsls	r1, r3, #26
 80074ce:	bf42      	ittt	mi
 80074d0:	f8d9 3000 	ldrmi.w	r3, [r9]
 80074d4:	3302      	addmi	r3, #2
 80074d6:	f8c9 3000 	strmi.w	r3, [r9]
 80074da:	6825      	ldr	r5, [r4, #0]
 80074dc:	f015 0506 	ands.w	r5, r5, #6
 80074e0:	d107      	bne.n	80074f2 <_printf_common+0x52>
 80074e2:	f104 0a19 	add.w	sl, r4, #25
 80074e6:	68e3      	ldr	r3, [r4, #12]
 80074e8:	f8d9 2000 	ldr.w	r2, [r9]
 80074ec:	1a9b      	subs	r3, r3, r2
 80074ee:	42ab      	cmp	r3, r5
 80074f0:	dc29      	bgt.n	8007546 <_printf_common+0xa6>
 80074f2:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80074f6:	6822      	ldr	r2, [r4, #0]
 80074f8:	3300      	adds	r3, #0
 80074fa:	bf18      	it	ne
 80074fc:	2301      	movne	r3, #1
 80074fe:	0692      	lsls	r2, r2, #26
 8007500:	d42e      	bmi.n	8007560 <_printf_common+0xc0>
 8007502:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007506:	4639      	mov	r1, r7
 8007508:	4630      	mov	r0, r6
 800750a:	47c0      	blx	r8
 800750c:	3001      	adds	r0, #1
 800750e:	d021      	beq.n	8007554 <_printf_common+0xb4>
 8007510:	6823      	ldr	r3, [r4, #0]
 8007512:	68e5      	ldr	r5, [r4, #12]
 8007514:	f003 0306 	and.w	r3, r3, #6
 8007518:	2b04      	cmp	r3, #4
 800751a:	bf18      	it	ne
 800751c:	2500      	movne	r5, #0
 800751e:	f8d9 2000 	ldr.w	r2, [r9]
 8007522:	f04f 0900 	mov.w	r9, #0
 8007526:	bf08      	it	eq
 8007528:	1aad      	subeq	r5, r5, r2
 800752a:	68a3      	ldr	r3, [r4, #8]
 800752c:	6922      	ldr	r2, [r4, #16]
 800752e:	bf08      	it	eq
 8007530:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007534:	4293      	cmp	r3, r2
 8007536:	bfc4      	itt	gt
 8007538:	1a9b      	subgt	r3, r3, r2
 800753a:	18ed      	addgt	r5, r5, r3
 800753c:	341a      	adds	r4, #26
 800753e:	454d      	cmp	r5, r9
 8007540:	d11a      	bne.n	8007578 <_printf_common+0xd8>
 8007542:	2000      	movs	r0, #0
 8007544:	e008      	b.n	8007558 <_printf_common+0xb8>
 8007546:	2301      	movs	r3, #1
 8007548:	4652      	mov	r2, sl
 800754a:	4639      	mov	r1, r7
 800754c:	4630      	mov	r0, r6
 800754e:	47c0      	blx	r8
 8007550:	3001      	adds	r0, #1
 8007552:	d103      	bne.n	800755c <_printf_common+0xbc>
 8007554:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007558:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800755c:	3501      	adds	r5, #1
 800755e:	e7c2      	b.n	80074e6 <_printf_common+0x46>
 8007560:	2030      	movs	r0, #48	; 0x30
 8007562:	18e1      	adds	r1, r4, r3
 8007564:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007568:	1c5a      	adds	r2, r3, #1
 800756a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800756e:	4422      	add	r2, r4
 8007570:	3302      	adds	r3, #2
 8007572:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007576:	e7c4      	b.n	8007502 <_printf_common+0x62>
 8007578:	2301      	movs	r3, #1
 800757a:	4622      	mov	r2, r4
 800757c:	4639      	mov	r1, r7
 800757e:	4630      	mov	r0, r6
 8007580:	47c0      	blx	r8
 8007582:	3001      	adds	r0, #1
 8007584:	d0e6      	beq.n	8007554 <_printf_common+0xb4>
 8007586:	f109 0901 	add.w	r9, r9, #1
 800758a:	e7d8      	b.n	800753e <_printf_common+0x9e>

0800758c <_printf_i>:
 800758c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007590:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8007594:	460c      	mov	r4, r1
 8007596:	7e09      	ldrb	r1, [r1, #24]
 8007598:	b085      	sub	sp, #20
 800759a:	296e      	cmp	r1, #110	; 0x6e
 800759c:	4617      	mov	r7, r2
 800759e:	4606      	mov	r6, r0
 80075a0:	4698      	mov	r8, r3
 80075a2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80075a4:	f000 80b3 	beq.w	800770e <_printf_i+0x182>
 80075a8:	d822      	bhi.n	80075f0 <_printf_i+0x64>
 80075aa:	2963      	cmp	r1, #99	; 0x63
 80075ac:	d036      	beq.n	800761c <_printf_i+0x90>
 80075ae:	d80a      	bhi.n	80075c6 <_printf_i+0x3a>
 80075b0:	2900      	cmp	r1, #0
 80075b2:	f000 80b9 	beq.w	8007728 <_printf_i+0x19c>
 80075b6:	2958      	cmp	r1, #88	; 0x58
 80075b8:	f000 8083 	beq.w	80076c2 <_printf_i+0x136>
 80075bc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80075c0:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80075c4:	e032      	b.n	800762c <_printf_i+0xa0>
 80075c6:	2964      	cmp	r1, #100	; 0x64
 80075c8:	d001      	beq.n	80075ce <_printf_i+0x42>
 80075ca:	2969      	cmp	r1, #105	; 0x69
 80075cc:	d1f6      	bne.n	80075bc <_printf_i+0x30>
 80075ce:	6820      	ldr	r0, [r4, #0]
 80075d0:	6813      	ldr	r3, [r2, #0]
 80075d2:	0605      	lsls	r5, r0, #24
 80075d4:	f103 0104 	add.w	r1, r3, #4
 80075d8:	d52a      	bpl.n	8007630 <_printf_i+0xa4>
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	6011      	str	r1, [r2, #0]
 80075de:	2b00      	cmp	r3, #0
 80075e0:	da03      	bge.n	80075ea <_printf_i+0x5e>
 80075e2:	222d      	movs	r2, #45	; 0x2d
 80075e4:	425b      	negs	r3, r3
 80075e6:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80075ea:	486f      	ldr	r0, [pc, #444]	; (80077a8 <_printf_i+0x21c>)
 80075ec:	220a      	movs	r2, #10
 80075ee:	e039      	b.n	8007664 <_printf_i+0xd8>
 80075f0:	2973      	cmp	r1, #115	; 0x73
 80075f2:	f000 809d 	beq.w	8007730 <_printf_i+0x1a4>
 80075f6:	d808      	bhi.n	800760a <_printf_i+0x7e>
 80075f8:	296f      	cmp	r1, #111	; 0x6f
 80075fa:	d020      	beq.n	800763e <_printf_i+0xb2>
 80075fc:	2970      	cmp	r1, #112	; 0x70
 80075fe:	d1dd      	bne.n	80075bc <_printf_i+0x30>
 8007600:	6823      	ldr	r3, [r4, #0]
 8007602:	f043 0320 	orr.w	r3, r3, #32
 8007606:	6023      	str	r3, [r4, #0]
 8007608:	e003      	b.n	8007612 <_printf_i+0x86>
 800760a:	2975      	cmp	r1, #117	; 0x75
 800760c:	d017      	beq.n	800763e <_printf_i+0xb2>
 800760e:	2978      	cmp	r1, #120	; 0x78
 8007610:	d1d4      	bne.n	80075bc <_printf_i+0x30>
 8007612:	2378      	movs	r3, #120	; 0x78
 8007614:	4865      	ldr	r0, [pc, #404]	; (80077ac <_printf_i+0x220>)
 8007616:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800761a:	e055      	b.n	80076c8 <_printf_i+0x13c>
 800761c:	6813      	ldr	r3, [r2, #0]
 800761e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007622:	1d19      	adds	r1, r3, #4
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	6011      	str	r1, [r2, #0]
 8007628:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800762c:	2301      	movs	r3, #1
 800762e:	e08c      	b.n	800774a <_printf_i+0x1be>
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007636:	6011      	str	r1, [r2, #0]
 8007638:	bf18      	it	ne
 800763a:	b21b      	sxthne	r3, r3
 800763c:	e7cf      	b.n	80075de <_printf_i+0x52>
 800763e:	6813      	ldr	r3, [r2, #0]
 8007640:	6825      	ldr	r5, [r4, #0]
 8007642:	1d18      	adds	r0, r3, #4
 8007644:	6010      	str	r0, [r2, #0]
 8007646:	0628      	lsls	r0, r5, #24
 8007648:	d501      	bpl.n	800764e <_printf_i+0xc2>
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	e002      	b.n	8007654 <_printf_i+0xc8>
 800764e:	0668      	lsls	r0, r5, #25
 8007650:	d5fb      	bpl.n	800764a <_printf_i+0xbe>
 8007652:	881b      	ldrh	r3, [r3, #0]
 8007654:	296f      	cmp	r1, #111	; 0x6f
 8007656:	bf14      	ite	ne
 8007658:	220a      	movne	r2, #10
 800765a:	2208      	moveq	r2, #8
 800765c:	4852      	ldr	r0, [pc, #328]	; (80077a8 <_printf_i+0x21c>)
 800765e:	2100      	movs	r1, #0
 8007660:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007664:	6865      	ldr	r5, [r4, #4]
 8007666:	2d00      	cmp	r5, #0
 8007668:	60a5      	str	r5, [r4, #8]
 800766a:	f2c0 8095 	blt.w	8007798 <_printf_i+0x20c>
 800766e:	6821      	ldr	r1, [r4, #0]
 8007670:	f021 0104 	bic.w	r1, r1, #4
 8007674:	6021      	str	r1, [r4, #0]
 8007676:	2b00      	cmp	r3, #0
 8007678:	d13d      	bne.n	80076f6 <_printf_i+0x16a>
 800767a:	2d00      	cmp	r5, #0
 800767c:	f040 808e 	bne.w	800779c <_printf_i+0x210>
 8007680:	4665      	mov	r5, ip
 8007682:	2a08      	cmp	r2, #8
 8007684:	d10b      	bne.n	800769e <_printf_i+0x112>
 8007686:	6823      	ldr	r3, [r4, #0]
 8007688:	07db      	lsls	r3, r3, #31
 800768a:	d508      	bpl.n	800769e <_printf_i+0x112>
 800768c:	6923      	ldr	r3, [r4, #16]
 800768e:	6862      	ldr	r2, [r4, #4]
 8007690:	429a      	cmp	r2, r3
 8007692:	bfde      	ittt	le
 8007694:	2330      	movle	r3, #48	; 0x30
 8007696:	f805 3c01 	strble.w	r3, [r5, #-1]
 800769a:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800769e:	ebac 0305 	sub.w	r3, ip, r5
 80076a2:	6123      	str	r3, [r4, #16]
 80076a4:	f8cd 8000 	str.w	r8, [sp]
 80076a8:	463b      	mov	r3, r7
 80076aa:	aa03      	add	r2, sp, #12
 80076ac:	4621      	mov	r1, r4
 80076ae:	4630      	mov	r0, r6
 80076b0:	f7ff fef6 	bl	80074a0 <_printf_common>
 80076b4:	3001      	adds	r0, #1
 80076b6:	d14d      	bne.n	8007754 <_printf_i+0x1c8>
 80076b8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80076bc:	b005      	add	sp, #20
 80076be:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80076c2:	4839      	ldr	r0, [pc, #228]	; (80077a8 <_printf_i+0x21c>)
 80076c4:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80076c8:	6813      	ldr	r3, [r2, #0]
 80076ca:	6821      	ldr	r1, [r4, #0]
 80076cc:	1d1d      	adds	r5, r3, #4
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	6015      	str	r5, [r2, #0]
 80076d2:	060a      	lsls	r2, r1, #24
 80076d4:	d50b      	bpl.n	80076ee <_printf_i+0x162>
 80076d6:	07ca      	lsls	r2, r1, #31
 80076d8:	bf44      	itt	mi
 80076da:	f041 0120 	orrmi.w	r1, r1, #32
 80076de:	6021      	strmi	r1, [r4, #0]
 80076e0:	b91b      	cbnz	r3, 80076ea <_printf_i+0x15e>
 80076e2:	6822      	ldr	r2, [r4, #0]
 80076e4:	f022 0220 	bic.w	r2, r2, #32
 80076e8:	6022      	str	r2, [r4, #0]
 80076ea:	2210      	movs	r2, #16
 80076ec:	e7b7      	b.n	800765e <_printf_i+0xd2>
 80076ee:	064d      	lsls	r5, r1, #25
 80076f0:	bf48      	it	mi
 80076f2:	b29b      	uxthmi	r3, r3
 80076f4:	e7ef      	b.n	80076d6 <_printf_i+0x14a>
 80076f6:	4665      	mov	r5, ip
 80076f8:	fbb3 f1f2 	udiv	r1, r3, r2
 80076fc:	fb02 3311 	mls	r3, r2, r1, r3
 8007700:	5cc3      	ldrb	r3, [r0, r3]
 8007702:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8007706:	460b      	mov	r3, r1
 8007708:	2900      	cmp	r1, #0
 800770a:	d1f5      	bne.n	80076f8 <_printf_i+0x16c>
 800770c:	e7b9      	b.n	8007682 <_printf_i+0xf6>
 800770e:	6813      	ldr	r3, [r2, #0]
 8007710:	6825      	ldr	r5, [r4, #0]
 8007712:	1d18      	adds	r0, r3, #4
 8007714:	6961      	ldr	r1, [r4, #20]
 8007716:	6010      	str	r0, [r2, #0]
 8007718:	0628      	lsls	r0, r5, #24
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	d501      	bpl.n	8007722 <_printf_i+0x196>
 800771e:	6019      	str	r1, [r3, #0]
 8007720:	e002      	b.n	8007728 <_printf_i+0x19c>
 8007722:	066a      	lsls	r2, r5, #25
 8007724:	d5fb      	bpl.n	800771e <_printf_i+0x192>
 8007726:	8019      	strh	r1, [r3, #0]
 8007728:	2300      	movs	r3, #0
 800772a:	4665      	mov	r5, ip
 800772c:	6123      	str	r3, [r4, #16]
 800772e:	e7b9      	b.n	80076a4 <_printf_i+0x118>
 8007730:	6813      	ldr	r3, [r2, #0]
 8007732:	1d19      	adds	r1, r3, #4
 8007734:	6011      	str	r1, [r2, #0]
 8007736:	681d      	ldr	r5, [r3, #0]
 8007738:	6862      	ldr	r2, [r4, #4]
 800773a:	2100      	movs	r1, #0
 800773c:	4628      	mov	r0, r5
 800773e:	f002 fae1 	bl	8009d04 <memchr>
 8007742:	b108      	cbz	r0, 8007748 <_printf_i+0x1bc>
 8007744:	1b40      	subs	r0, r0, r5
 8007746:	6060      	str	r0, [r4, #4]
 8007748:	6863      	ldr	r3, [r4, #4]
 800774a:	6123      	str	r3, [r4, #16]
 800774c:	2300      	movs	r3, #0
 800774e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007752:	e7a7      	b.n	80076a4 <_printf_i+0x118>
 8007754:	6923      	ldr	r3, [r4, #16]
 8007756:	462a      	mov	r2, r5
 8007758:	4639      	mov	r1, r7
 800775a:	4630      	mov	r0, r6
 800775c:	47c0      	blx	r8
 800775e:	3001      	adds	r0, #1
 8007760:	d0aa      	beq.n	80076b8 <_printf_i+0x12c>
 8007762:	6823      	ldr	r3, [r4, #0]
 8007764:	079b      	lsls	r3, r3, #30
 8007766:	d413      	bmi.n	8007790 <_printf_i+0x204>
 8007768:	68e0      	ldr	r0, [r4, #12]
 800776a:	9b03      	ldr	r3, [sp, #12]
 800776c:	4298      	cmp	r0, r3
 800776e:	bfb8      	it	lt
 8007770:	4618      	movlt	r0, r3
 8007772:	e7a3      	b.n	80076bc <_printf_i+0x130>
 8007774:	2301      	movs	r3, #1
 8007776:	464a      	mov	r2, r9
 8007778:	4639      	mov	r1, r7
 800777a:	4630      	mov	r0, r6
 800777c:	47c0      	blx	r8
 800777e:	3001      	adds	r0, #1
 8007780:	d09a      	beq.n	80076b8 <_printf_i+0x12c>
 8007782:	3501      	adds	r5, #1
 8007784:	68e3      	ldr	r3, [r4, #12]
 8007786:	9a03      	ldr	r2, [sp, #12]
 8007788:	1a9b      	subs	r3, r3, r2
 800778a:	42ab      	cmp	r3, r5
 800778c:	dcf2      	bgt.n	8007774 <_printf_i+0x1e8>
 800778e:	e7eb      	b.n	8007768 <_printf_i+0x1dc>
 8007790:	2500      	movs	r5, #0
 8007792:	f104 0919 	add.w	r9, r4, #25
 8007796:	e7f5      	b.n	8007784 <_printf_i+0x1f8>
 8007798:	2b00      	cmp	r3, #0
 800779a:	d1ac      	bne.n	80076f6 <_printf_i+0x16a>
 800779c:	7803      	ldrb	r3, [r0, #0]
 800779e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80077a2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80077a6:	e76c      	b.n	8007682 <_printf_i+0xf6>
 80077a8:	0800b1d6 	.word	0x0800b1d6
 80077ac:	0800b1e7 	.word	0x0800b1e7

080077b0 <_scanf_float>:
 80077b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80077b4:	469a      	mov	sl, r3
 80077b6:	688b      	ldr	r3, [r1, #8]
 80077b8:	4616      	mov	r6, r2
 80077ba:	1e5a      	subs	r2, r3, #1
 80077bc:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 80077c0:	bf88      	it	hi
 80077c2:	f46f 72ae 	mvnhi.w	r2, #348	; 0x15c
 80077c6:	b087      	sub	sp, #28
 80077c8:	bf85      	ittet	hi
 80077ca:	189b      	addhi	r3, r3, r2
 80077cc:	9301      	strhi	r3, [sp, #4]
 80077ce:	2300      	movls	r3, #0
 80077d0:	f240 135d 	movwhi	r3, #349	; 0x15d
 80077d4:	4688      	mov	r8, r1
 80077d6:	f04f 0b00 	mov.w	fp, #0
 80077da:	bf8c      	ite	hi
 80077dc:	608b      	strhi	r3, [r1, #8]
 80077de:	9301      	strls	r3, [sp, #4]
 80077e0:	680b      	ldr	r3, [r1, #0]
 80077e2:	4607      	mov	r7, r0
 80077e4:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 80077e8:	f848 3b1c 	str.w	r3, [r8], #28
 80077ec:	460c      	mov	r4, r1
 80077ee:	4645      	mov	r5, r8
 80077f0:	465a      	mov	r2, fp
 80077f2:	46d9      	mov	r9, fp
 80077f4:	e9cd bb03 	strd	fp, fp, [sp, #12]
 80077f8:	f8cd b008 	str.w	fp, [sp, #8]
 80077fc:	68a1      	ldr	r1, [r4, #8]
 80077fe:	b181      	cbz	r1, 8007822 <_scanf_float+0x72>
 8007800:	6833      	ldr	r3, [r6, #0]
 8007802:	781b      	ldrb	r3, [r3, #0]
 8007804:	2b49      	cmp	r3, #73	; 0x49
 8007806:	d071      	beq.n	80078ec <_scanf_float+0x13c>
 8007808:	d84d      	bhi.n	80078a6 <_scanf_float+0xf6>
 800780a:	2b39      	cmp	r3, #57	; 0x39
 800780c:	d840      	bhi.n	8007890 <_scanf_float+0xe0>
 800780e:	2b31      	cmp	r3, #49	; 0x31
 8007810:	f080 8088 	bcs.w	8007924 <_scanf_float+0x174>
 8007814:	2b2d      	cmp	r3, #45	; 0x2d
 8007816:	f000 8090 	beq.w	800793a <_scanf_float+0x18a>
 800781a:	d815      	bhi.n	8007848 <_scanf_float+0x98>
 800781c:	2b2b      	cmp	r3, #43	; 0x2b
 800781e:	f000 808c 	beq.w	800793a <_scanf_float+0x18a>
 8007822:	f1b9 0f00 	cmp.w	r9, #0
 8007826:	d003      	beq.n	8007830 <_scanf_float+0x80>
 8007828:	6823      	ldr	r3, [r4, #0]
 800782a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800782e:	6023      	str	r3, [r4, #0]
 8007830:	3a01      	subs	r2, #1
 8007832:	2a01      	cmp	r2, #1
 8007834:	f200 80ea 	bhi.w	8007a0c <_scanf_float+0x25c>
 8007838:	4545      	cmp	r5, r8
 800783a:	f200 80dc 	bhi.w	80079f6 <_scanf_float+0x246>
 800783e:	2601      	movs	r6, #1
 8007840:	4630      	mov	r0, r6
 8007842:	b007      	add	sp, #28
 8007844:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007848:	2b2e      	cmp	r3, #46	; 0x2e
 800784a:	f000 809f 	beq.w	800798c <_scanf_float+0x1dc>
 800784e:	2b30      	cmp	r3, #48	; 0x30
 8007850:	d1e7      	bne.n	8007822 <_scanf_float+0x72>
 8007852:	6820      	ldr	r0, [r4, #0]
 8007854:	f410 7f80 	tst.w	r0, #256	; 0x100
 8007858:	d064      	beq.n	8007924 <_scanf_float+0x174>
 800785a:	9b01      	ldr	r3, [sp, #4]
 800785c:	f020 0080 	bic.w	r0, r0, #128	; 0x80
 8007860:	6020      	str	r0, [r4, #0]
 8007862:	f109 0901 	add.w	r9, r9, #1
 8007866:	b11b      	cbz	r3, 8007870 <_scanf_float+0xc0>
 8007868:	3b01      	subs	r3, #1
 800786a:	3101      	adds	r1, #1
 800786c:	9301      	str	r3, [sp, #4]
 800786e:	60a1      	str	r1, [r4, #8]
 8007870:	68a3      	ldr	r3, [r4, #8]
 8007872:	3b01      	subs	r3, #1
 8007874:	60a3      	str	r3, [r4, #8]
 8007876:	6923      	ldr	r3, [r4, #16]
 8007878:	3301      	adds	r3, #1
 800787a:	6123      	str	r3, [r4, #16]
 800787c:	6873      	ldr	r3, [r6, #4]
 800787e:	3b01      	subs	r3, #1
 8007880:	2b00      	cmp	r3, #0
 8007882:	6073      	str	r3, [r6, #4]
 8007884:	f340 80ac 	ble.w	80079e0 <_scanf_float+0x230>
 8007888:	6833      	ldr	r3, [r6, #0]
 800788a:	3301      	adds	r3, #1
 800788c:	6033      	str	r3, [r6, #0]
 800788e:	e7b5      	b.n	80077fc <_scanf_float+0x4c>
 8007890:	2b45      	cmp	r3, #69	; 0x45
 8007892:	f000 8085 	beq.w	80079a0 <_scanf_float+0x1f0>
 8007896:	2b46      	cmp	r3, #70	; 0x46
 8007898:	d06a      	beq.n	8007970 <_scanf_float+0x1c0>
 800789a:	2b41      	cmp	r3, #65	; 0x41
 800789c:	d1c1      	bne.n	8007822 <_scanf_float+0x72>
 800789e:	2a01      	cmp	r2, #1
 80078a0:	d1bf      	bne.n	8007822 <_scanf_float+0x72>
 80078a2:	2202      	movs	r2, #2
 80078a4:	e046      	b.n	8007934 <_scanf_float+0x184>
 80078a6:	2b65      	cmp	r3, #101	; 0x65
 80078a8:	d07a      	beq.n	80079a0 <_scanf_float+0x1f0>
 80078aa:	d818      	bhi.n	80078de <_scanf_float+0x12e>
 80078ac:	2b54      	cmp	r3, #84	; 0x54
 80078ae:	d066      	beq.n	800797e <_scanf_float+0x1ce>
 80078b0:	d811      	bhi.n	80078d6 <_scanf_float+0x126>
 80078b2:	2b4e      	cmp	r3, #78	; 0x4e
 80078b4:	d1b5      	bne.n	8007822 <_scanf_float+0x72>
 80078b6:	2a00      	cmp	r2, #0
 80078b8:	d146      	bne.n	8007948 <_scanf_float+0x198>
 80078ba:	f1b9 0f00 	cmp.w	r9, #0
 80078be:	d145      	bne.n	800794c <_scanf_float+0x19c>
 80078c0:	6821      	ldr	r1, [r4, #0]
 80078c2:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 80078c6:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 80078ca:	d13f      	bne.n	800794c <_scanf_float+0x19c>
 80078cc:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 80078d0:	6021      	str	r1, [r4, #0]
 80078d2:	2201      	movs	r2, #1
 80078d4:	e02e      	b.n	8007934 <_scanf_float+0x184>
 80078d6:	2b59      	cmp	r3, #89	; 0x59
 80078d8:	d01e      	beq.n	8007918 <_scanf_float+0x168>
 80078da:	2b61      	cmp	r3, #97	; 0x61
 80078dc:	e7de      	b.n	800789c <_scanf_float+0xec>
 80078de:	2b6e      	cmp	r3, #110	; 0x6e
 80078e0:	d0e9      	beq.n	80078b6 <_scanf_float+0x106>
 80078e2:	d815      	bhi.n	8007910 <_scanf_float+0x160>
 80078e4:	2b66      	cmp	r3, #102	; 0x66
 80078e6:	d043      	beq.n	8007970 <_scanf_float+0x1c0>
 80078e8:	2b69      	cmp	r3, #105	; 0x69
 80078ea:	d19a      	bne.n	8007822 <_scanf_float+0x72>
 80078ec:	f1bb 0f00 	cmp.w	fp, #0
 80078f0:	d138      	bne.n	8007964 <_scanf_float+0x1b4>
 80078f2:	f1b9 0f00 	cmp.w	r9, #0
 80078f6:	d197      	bne.n	8007828 <_scanf_float+0x78>
 80078f8:	6821      	ldr	r1, [r4, #0]
 80078fa:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 80078fe:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 8007902:	d195      	bne.n	8007830 <_scanf_float+0x80>
 8007904:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8007908:	6021      	str	r1, [r4, #0]
 800790a:	f04f 0b01 	mov.w	fp, #1
 800790e:	e011      	b.n	8007934 <_scanf_float+0x184>
 8007910:	2b74      	cmp	r3, #116	; 0x74
 8007912:	d034      	beq.n	800797e <_scanf_float+0x1ce>
 8007914:	2b79      	cmp	r3, #121	; 0x79
 8007916:	d184      	bne.n	8007822 <_scanf_float+0x72>
 8007918:	f1bb 0f07 	cmp.w	fp, #7
 800791c:	d181      	bne.n	8007822 <_scanf_float+0x72>
 800791e:	f04f 0b08 	mov.w	fp, #8
 8007922:	e007      	b.n	8007934 <_scanf_float+0x184>
 8007924:	eb12 0f0b 	cmn.w	r2, fp
 8007928:	f47f af7b 	bne.w	8007822 <_scanf_float+0x72>
 800792c:	6821      	ldr	r1, [r4, #0]
 800792e:	f421 71c0 	bic.w	r1, r1, #384	; 0x180
 8007932:	6021      	str	r1, [r4, #0]
 8007934:	702b      	strb	r3, [r5, #0]
 8007936:	3501      	adds	r5, #1
 8007938:	e79a      	b.n	8007870 <_scanf_float+0xc0>
 800793a:	6821      	ldr	r1, [r4, #0]
 800793c:	0608      	lsls	r0, r1, #24
 800793e:	f57f af70 	bpl.w	8007822 <_scanf_float+0x72>
 8007942:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8007946:	e7f4      	b.n	8007932 <_scanf_float+0x182>
 8007948:	2a02      	cmp	r2, #2
 800794a:	d047      	beq.n	80079dc <_scanf_float+0x22c>
 800794c:	f1bb 0f01 	cmp.w	fp, #1
 8007950:	d003      	beq.n	800795a <_scanf_float+0x1aa>
 8007952:	f1bb 0f04 	cmp.w	fp, #4
 8007956:	f47f af64 	bne.w	8007822 <_scanf_float+0x72>
 800795a:	f10b 0b01 	add.w	fp, fp, #1
 800795e:	fa5f fb8b 	uxtb.w	fp, fp
 8007962:	e7e7      	b.n	8007934 <_scanf_float+0x184>
 8007964:	f1bb 0f03 	cmp.w	fp, #3
 8007968:	d0f7      	beq.n	800795a <_scanf_float+0x1aa>
 800796a:	f1bb 0f05 	cmp.w	fp, #5
 800796e:	e7f2      	b.n	8007956 <_scanf_float+0x1a6>
 8007970:	f1bb 0f02 	cmp.w	fp, #2
 8007974:	f47f af55 	bne.w	8007822 <_scanf_float+0x72>
 8007978:	f04f 0b03 	mov.w	fp, #3
 800797c:	e7da      	b.n	8007934 <_scanf_float+0x184>
 800797e:	f1bb 0f06 	cmp.w	fp, #6
 8007982:	f47f af4e 	bne.w	8007822 <_scanf_float+0x72>
 8007986:	f04f 0b07 	mov.w	fp, #7
 800798a:	e7d3      	b.n	8007934 <_scanf_float+0x184>
 800798c:	6821      	ldr	r1, [r4, #0]
 800798e:	0588      	lsls	r0, r1, #22
 8007990:	f57f af47 	bpl.w	8007822 <_scanf_float+0x72>
 8007994:	f421 7120 	bic.w	r1, r1, #640	; 0x280
 8007998:	6021      	str	r1, [r4, #0]
 800799a:	f8cd 9008 	str.w	r9, [sp, #8]
 800799e:	e7c9      	b.n	8007934 <_scanf_float+0x184>
 80079a0:	6821      	ldr	r1, [r4, #0]
 80079a2:	f401 60a0 	and.w	r0, r1, #1280	; 0x500
 80079a6:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 80079aa:	d006      	beq.n	80079ba <_scanf_float+0x20a>
 80079ac:	0548      	lsls	r0, r1, #21
 80079ae:	f57f af38 	bpl.w	8007822 <_scanf_float+0x72>
 80079b2:	f1b9 0f00 	cmp.w	r9, #0
 80079b6:	f43f af3b 	beq.w	8007830 <_scanf_float+0x80>
 80079ba:	0588      	lsls	r0, r1, #22
 80079bc:	bf58      	it	pl
 80079be:	9802      	ldrpl	r0, [sp, #8]
 80079c0:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 80079c4:	bf58      	it	pl
 80079c6:	eba9 0000 	subpl.w	r0, r9, r0
 80079ca:	f441 71c0 	orr.w	r1, r1, #384	; 0x180
 80079ce:	bf58      	it	pl
 80079d0:	e9cd 0503 	strdpl	r0, r5, [sp, #12]
 80079d4:	6021      	str	r1, [r4, #0]
 80079d6:	f04f 0900 	mov.w	r9, #0
 80079da:	e7ab      	b.n	8007934 <_scanf_float+0x184>
 80079dc:	2203      	movs	r2, #3
 80079de:	e7a9      	b.n	8007934 <_scanf_float+0x184>
 80079e0:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80079e4:	4631      	mov	r1, r6
 80079e6:	4638      	mov	r0, r7
 80079e8:	9205      	str	r2, [sp, #20]
 80079ea:	4798      	blx	r3
 80079ec:	9a05      	ldr	r2, [sp, #20]
 80079ee:	2800      	cmp	r0, #0
 80079f0:	f43f af04 	beq.w	80077fc <_scanf_float+0x4c>
 80079f4:	e715      	b.n	8007822 <_scanf_float+0x72>
 80079f6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80079fa:	4632      	mov	r2, r6
 80079fc:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8007a00:	4638      	mov	r0, r7
 8007a02:	4798      	blx	r3
 8007a04:	6923      	ldr	r3, [r4, #16]
 8007a06:	3b01      	subs	r3, #1
 8007a08:	6123      	str	r3, [r4, #16]
 8007a0a:	e715      	b.n	8007838 <_scanf_float+0x88>
 8007a0c:	f10b 33ff 	add.w	r3, fp, #4294967295	; 0xffffffff
 8007a10:	2b06      	cmp	r3, #6
 8007a12:	d80a      	bhi.n	8007a2a <_scanf_float+0x27a>
 8007a14:	f1bb 0f02 	cmp.w	fp, #2
 8007a18:	d967      	bls.n	8007aea <_scanf_float+0x33a>
 8007a1a:	f1ab 0b03 	sub.w	fp, fp, #3
 8007a1e:	fa5f fb8b 	uxtb.w	fp, fp
 8007a22:	eba5 0b0b 	sub.w	fp, r5, fp
 8007a26:	455d      	cmp	r5, fp
 8007a28:	d14a      	bne.n	8007ac0 <_scanf_float+0x310>
 8007a2a:	6823      	ldr	r3, [r4, #0]
 8007a2c:	05da      	lsls	r2, r3, #23
 8007a2e:	d51f      	bpl.n	8007a70 <_scanf_float+0x2c0>
 8007a30:	055b      	lsls	r3, r3, #21
 8007a32:	d467      	bmi.n	8007b04 <_scanf_float+0x354>
 8007a34:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8007a38:	6923      	ldr	r3, [r4, #16]
 8007a3a:	2965      	cmp	r1, #101	; 0x65
 8007a3c:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 8007a40:	f105 3bff 	add.w	fp, r5, #4294967295	; 0xffffffff
 8007a44:	6123      	str	r3, [r4, #16]
 8007a46:	d00d      	beq.n	8007a64 <_scanf_float+0x2b4>
 8007a48:	2945      	cmp	r1, #69	; 0x45
 8007a4a:	d00b      	beq.n	8007a64 <_scanf_float+0x2b4>
 8007a4c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007a50:	4632      	mov	r2, r6
 8007a52:	4638      	mov	r0, r7
 8007a54:	4798      	blx	r3
 8007a56:	6923      	ldr	r3, [r4, #16]
 8007a58:	f815 1c02 	ldrb.w	r1, [r5, #-2]
 8007a5c:	3b01      	subs	r3, #1
 8007a5e:	f1a5 0b02 	sub.w	fp, r5, #2
 8007a62:	6123      	str	r3, [r4, #16]
 8007a64:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007a68:	4632      	mov	r2, r6
 8007a6a:	4638      	mov	r0, r7
 8007a6c:	4798      	blx	r3
 8007a6e:	465d      	mov	r5, fp
 8007a70:	6826      	ldr	r6, [r4, #0]
 8007a72:	f016 0610 	ands.w	r6, r6, #16
 8007a76:	d176      	bne.n	8007b66 <_scanf_float+0x3b6>
 8007a78:	702e      	strb	r6, [r5, #0]
 8007a7a:	6823      	ldr	r3, [r4, #0]
 8007a7c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8007a80:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007a84:	d141      	bne.n	8007b0a <_scanf_float+0x35a>
 8007a86:	9b02      	ldr	r3, [sp, #8]
 8007a88:	eba9 0303 	sub.w	r3, r9, r3
 8007a8c:	425a      	negs	r2, r3
 8007a8e:	2b00      	cmp	r3, #0
 8007a90:	d148      	bne.n	8007b24 <_scanf_float+0x374>
 8007a92:	4641      	mov	r1, r8
 8007a94:	2200      	movs	r2, #0
 8007a96:	4638      	mov	r0, r7
 8007a98:	f000 fee6 	bl	8008868 <_strtod_r>
 8007a9c:	6825      	ldr	r5, [r4, #0]
 8007a9e:	4680      	mov	r8, r0
 8007aa0:	f015 0f02 	tst.w	r5, #2
 8007aa4:	4689      	mov	r9, r1
 8007aa6:	f8da 3000 	ldr.w	r3, [sl]
 8007aaa:	d046      	beq.n	8007b3a <_scanf_float+0x38a>
 8007aac:	1d1a      	adds	r2, r3, #4
 8007aae:	f8ca 2000 	str.w	r2, [sl]
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	e9c3 8900 	strd	r8, r9, [r3]
 8007ab8:	68e3      	ldr	r3, [r4, #12]
 8007aba:	3301      	adds	r3, #1
 8007abc:	60e3      	str	r3, [r4, #12]
 8007abe:	e6bf      	b.n	8007840 <_scanf_float+0x90>
 8007ac0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007ac4:	4632      	mov	r2, r6
 8007ac6:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8007aca:	4638      	mov	r0, r7
 8007acc:	4798      	blx	r3
 8007ace:	6923      	ldr	r3, [r4, #16]
 8007ad0:	3b01      	subs	r3, #1
 8007ad2:	6123      	str	r3, [r4, #16]
 8007ad4:	e7a7      	b.n	8007a26 <_scanf_float+0x276>
 8007ad6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007ada:	4632      	mov	r2, r6
 8007adc:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8007ae0:	4638      	mov	r0, r7
 8007ae2:	4798      	blx	r3
 8007ae4:	6923      	ldr	r3, [r4, #16]
 8007ae6:	3b01      	subs	r3, #1
 8007ae8:	6123      	str	r3, [r4, #16]
 8007aea:	4545      	cmp	r5, r8
 8007aec:	d8f3      	bhi.n	8007ad6 <_scanf_float+0x326>
 8007aee:	e6a6      	b.n	800783e <_scanf_float+0x8e>
 8007af0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007af4:	4632      	mov	r2, r6
 8007af6:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8007afa:	4638      	mov	r0, r7
 8007afc:	4798      	blx	r3
 8007afe:	6923      	ldr	r3, [r4, #16]
 8007b00:	3b01      	subs	r3, #1
 8007b02:	6123      	str	r3, [r4, #16]
 8007b04:	4545      	cmp	r5, r8
 8007b06:	d8f3      	bhi.n	8007af0 <_scanf_float+0x340>
 8007b08:	e699      	b.n	800783e <_scanf_float+0x8e>
 8007b0a:	9b03      	ldr	r3, [sp, #12]
 8007b0c:	2b00      	cmp	r3, #0
 8007b0e:	d0c0      	beq.n	8007a92 <_scanf_float+0x2e2>
 8007b10:	9904      	ldr	r1, [sp, #16]
 8007b12:	230a      	movs	r3, #10
 8007b14:	4632      	mov	r2, r6
 8007b16:	3101      	adds	r1, #1
 8007b18:	4638      	mov	r0, r7
 8007b1a:	f000 ff31 	bl	8008980 <_strtol_r>
 8007b1e:	9b03      	ldr	r3, [sp, #12]
 8007b20:	9d04      	ldr	r5, [sp, #16]
 8007b22:	1ac2      	subs	r2, r0, r3
 8007b24:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8007b28:	429d      	cmp	r5, r3
 8007b2a:	bf28      	it	cs
 8007b2c:	f504 75b7 	addcs.w	r5, r4, #366	; 0x16e
 8007b30:	490e      	ldr	r1, [pc, #56]	; (8007b6c <_scanf_float+0x3bc>)
 8007b32:	4628      	mov	r0, r5
 8007b34:	f000 f854 	bl	8007be0 <siprintf>
 8007b38:	e7ab      	b.n	8007a92 <_scanf_float+0x2e2>
 8007b3a:	1d1f      	adds	r7, r3, #4
 8007b3c:	f015 0504 	ands.w	r5, r5, #4
 8007b40:	f8ca 7000 	str.w	r7, [sl]
 8007b44:	d1b5      	bne.n	8007ab2 <_scanf_float+0x302>
 8007b46:	681f      	ldr	r7, [r3, #0]
 8007b48:	4602      	mov	r2, r0
 8007b4a:	460b      	mov	r3, r1
 8007b4c:	f7f8 ff5e 	bl	8000a0c <__aeabi_dcmpun>
 8007b50:	b120      	cbz	r0, 8007b5c <_scanf_float+0x3ac>
 8007b52:	4628      	mov	r0, r5
 8007b54:	f000 f80c 	bl	8007b70 <nanf>
 8007b58:	6038      	str	r0, [r7, #0]
 8007b5a:	e7ad      	b.n	8007ab8 <_scanf_float+0x308>
 8007b5c:	4640      	mov	r0, r8
 8007b5e:	4649      	mov	r1, r9
 8007b60:	f7f8 ffb2 	bl	8000ac8 <__aeabi_d2f>
 8007b64:	e7f8      	b.n	8007b58 <_scanf_float+0x3a8>
 8007b66:	2600      	movs	r6, #0
 8007b68:	e66a      	b.n	8007840 <_scanf_float+0x90>
 8007b6a:	bf00      	nop
 8007b6c:	0800b1f8 	.word	0x0800b1f8

08007b70 <nanf>:
 8007b70:	4800      	ldr	r0, [pc, #0]	; (8007b74 <nanf+0x4>)
 8007b72:	4770      	bx	lr
 8007b74:	7fc00000 	.word	0x7fc00000

08007b78 <sniprintf>:
 8007b78:	b40c      	push	{r2, r3}
 8007b7a:	b530      	push	{r4, r5, lr}
 8007b7c:	4b17      	ldr	r3, [pc, #92]	; (8007bdc <sniprintf+0x64>)
 8007b7e:	1e0c      	subs	r4, r1, #0
 8007b80:	b09d      	sub	sp, #116	; 0x74
 8007b82:	681d      	ldr	r5, [r3, #0]
 8007b84:	da08      	bge.n	8007b98 <sniprintf+0x20>
 8007b86:	238b      	movs	r3, #139	; 0x8b
 8007b88:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007b8c:	602b      	str	r3, [r5, #0]
 8007b8e:	b01d      	add	sp, #116	; 0x74
 8007b90:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007b94:	b002      	add	sp, #8
 8007b96:	4770      	bx	lr
 8007b98:	f44f 7302 	mov.w	r3, #520	; 0x208
 8007b9c:	f8ad 3014 	strh.w	r3, [sp, #20]
 8007ba0:	bf0c      	ite	eq
 8007ba2:	4623      	moveq	r3, r4
 8007ba4:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 8007ba8:	9304      	str	r3, [sp, #16]
 8007baa:	9307      	str	r3, [sp, #28]
 8007bac:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8007bb0:	9002      	str	r0, [sp, #8]
 8007bb2:	9006      	str	r0, [sp, #24]
 8007bb4:	f8ad 3016 	strh.w	r3, [sp, #22]
 8007bb8:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8007bba:	ab21      	add	r3, sp, #132	; 0x84
 8007bbc:	a902      	add	r1, sp, #8
 8007bbe:	4628      	mov	r0, r5
 8007bc0:	9301      	str	r3, [sp, #4]
 8007bc2:	f002 fdb3 	bl	800a72c <_svfiprintf_r>
 8007bc6:	1c43      	adds	r3, r0, #1
 8007bc8:	bfbc      	itt	lt
 8007bca:	238b      	movlt	r3, #139	; 0x8b
 8007bcc:	602b      	strlt	r3, [r5, #0]
 8007bce:	2c00      	cmp	r4, #0
 8007bd0:	d0dd      	beq.n	8007b8e <sniprintf+0x16>
 8007bd2:	2200      	movs	r2, #0
 8007bd4:	9b02      	ldr	r3, [sp, #8]
 8007bd6:	701a      	strb	r2, [r3, #0]
 8007bd8:	e7d9      	b.n	8007b8e <sniprintf+0x16>
 8007bda:	bf00      	nop
 8007bdc:	20000024 	.word	0x20000024

08007be0 <siprintf>:
 8007be0:	b40e      	push	{r1, r2, r3}
 8007be2:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007be6:	b500      	push	{lr}
 8007be8:	b09c      	sub	sp, #112	; 0x70
 8007bea:	ab1d      	add	r3, sp, #116	; 0x74
 8007bec:	9002      	str	r0, [sp, #8]
 8007bee:	9006      	str	r0, [sp, #24]
 8007bf0:	9107      	str	r1, [sp, #28]
 8007bf2:	9104      	str	r1, [sp, #16]
 8007bf4:	4808      	ldr	r0, [pc, #32]	; (8007c18 <siprintf+0x38>)
 8007bf6:	4909      	ldr	r1, [pc, #36]	; (8007c1c <siprintf+0x3c>)
 8007bf8:	f853 2b04 	ldr.w	r2, [r3], #4
 8007bfc:	9105      	str	r1, [sp, #20]
 8007bfe:	6800      	ldr	r0, [r0, #0]
 8007c00:	a902      	add	r1, sp, #8
 8007c02:	9301      	str	r3, [sp, #4]
 8007c04:	f002 fd92 	bl	800a72c <_svfiprintf_r>
 8007c08:	2200      	movs	r2, #0
 8007c0a:	9b02      	ldr	r3, [sp, #8]
 8007c0c:	701a      	strb	r2, [r3, #0]
 8007c0e:	b01c      	add	sp, #112	; 0x70
 8007c10:	f85d eb04 	ldr.w	lr, [sp], #4
 8007c14:	b003      	add	sp, #12
 8007c16:	4770      	bx	lr
 8007c18:	20000024 	.word	0x20000024
 8007c1c:	ffff0208 	.word	0xffff0208

08007c20 <sulp>:
 8007c20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007c24:	460f      	mov	r7, r1
 8007c26:	4690      	mov	r8, r2
 8007c28:	f002 fb44 	bl	800a2b4 <__ulp>
 8007c2c:	4604      	mov	r4, r0
 8007c2e:	460d      	mov	r5, r1
 8007c30:	f1b8 0f00 	cmp.w	r8, #0
 8007c34:	d011      	beq.n	8007c5a <sulp+0x3a>
 8007c36:	f3c7 530a 	ubfx	r3, r7, #20, #11
 8007c3a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8007c3e:	2b00      	cmp	r3, #0
 8007c40:	dd0b      	ble.n	8007c5a <sulp+0x3a>
 8007c42:	2400      	movs	r4, #0
 8007c44:	051b      	lsls	r3, r3, #20
 8007c46:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8007c4a:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8007c4e:	4622      	mov	r2, r4
 8007c50:	462b      	mov	r3, r5
 8007c52:	f7f8 fc41 	bl	80004d8 <__aeabi_dmul>
 8007c56:	4604      	mov	r4, r0
 8007c58:	460d      	mov	r5, r1
 8007c5a:	4620      	mov	r0, r4
 8007c5c:	4629      	mov	r1, r5
 8007c5e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007c62:	0000      	movs	r0, r0
 8007c64:	0000      	movs	r0, r0
	...

08007c68 <_strtod_l>:
 8007c68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007c6c:	461f      	mov	r7, r3
 8007c6e:	2300      	movs	r3, #0
 8007c70:	b0a1      	sub	sp, #132	; 0x84
 8007c72:	4683      	mov	fp, r0
 8007c74:	4638      	mov	r0, r7
 8007c76:	460e      	mov	r6, r1
 8007c78:	9217      	str	r2, [sp, #92]	; 0x5c
 8007c7a:	931c      	str	r3, [sp, #112]	; 0x70
 8007c7c:	f002 f817 	bl	8009cae <__localeconv_l>
 8007c80:	4680      	mov	r8, r0
 8007c82:	6800      	ldr	r0, [r0, #0]
 8007c84:	f7f8 fa64 	bl	8000150 <strlen>
 8007c88:	f04f 0900 	mov.w	r9, #0
 8007c8c:	4604      	mov	r4, r0
 8007c8e:	f04f 0a00 	mov.w	sl, #0
 8007c92:	961b      	str	r6, [sp, #108]	; 0x6c
 8007c94:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007c96:	781a      	ldrb	r2, [r3, #0]
 8007c98:	2a0d      	cmp	r2, #13
 8007c9a:	d832      	bhi.n	8007d02 <_strtod_l+0x9a>
 8007c9c:	2a09      	cmp	r2, #9
 8007c9e:	d236      	bcs.n	8007d0e <_strtod_l+0xa6>
 8007ca0:	2a00      	cmp	r2, #0
 8007ca2:	d03e      	beq.n	8007d22 <_strtod_l+0xba>
 8007ca4:	2300      	movs	r3, #0
 8007ca6:	930d      	str	r3, [sp, #52]	; 0x34
 8007ca8:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 8007caa:	782b      	ldrb	r3, [r5, #0]
 8007cac:	2b30      	cmp	r3, #48	; 0x30
 8007cae:	f040 80ac 	bne.w	8007e0a <_strtod_l+0x1a2>
 8007cb2:	786b      	ldrb	r3, [r5, #1]
 8007cb4:	2b58      	cmp	r3, #88	; 0x58
 8007cb6:	d001      	beq.n	8007cbc <_strtod_l+0x54>
 8007cb8:	2b78      	cmp	r3, #120	; 0x78
 8007cba:	d167      	bne.n	8007d8c <_strtod_l+0x124>
 8007cbc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007cbe:	9702      	str	r7, [sp, #8]
 8007cc0:	9301      	str	r3, [sp, #4]
 8007cc2:	ab1c      	add	r3, sp, #112	; 0x70
 8007cc4:	9300      	str	r3, [sp, #0]
 8007cc6:	4a89      	ldr	r2, [pc, #548]	; (8007eec <_strtod_l+0x284>)
 8007cc8:	ab1d      	add	r3, sp, #116	; 0x74
 8007cca:	a91b      	add	r1, sp, #108	; 0x6c
 8007ccc:	4658      	mov	r0, fp
 8007cce:	f001 fd13 	bl	80096f8 <__gethex>
 8007cd2:	f010 0407 	ands.w	r4, r0, #7
 8007cd6:	4606      	mov	r6, r0
 8007cd8:	d005      	beq.n	8007ce6 <_strtod_l+0x7e>
 8007cda:	2c06      	cmp	r4, #6
 8007cdc:	d12b      	bne.n	8007d36 <_strtod_l+0xce>
 8007cde:	2300      	movs	r3, #0
 8007ce0:	3501      	adds	r5, #1
 8007ce2:	951b      	str	r5, [sp, #108]	; 0x6c
 8007ce4:	930d      	str	r3, [sp, #52]	; 0x34
 8007ce6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007ce8:	2b00      	cmp	r3, #0
 8007cea:	f040 85a6 	bne.w	800883a <_strtod_l+0xbd2>
 8007cee:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007cf0:	b1e3      	cbz	r3, 8007d2c <_strtod_l+0xc4>
 8007cf2:	464a      	mov	r2, r9
 8007cf4:	f10a 4300 	add.w	r3, sl, #2147483648	; 0x80000000
 8007cf8:	4610      	mov	r0, r2
 8007cfa:	4619      	mov	r1, r3
 8007cfc:	b021      	add	sp, #132	; 0x84
 8007cfe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007d02:	2a2b      	cmp	r2, #43	; 0x2b
 8007d04:	d015      	beq.n	8007d32 <_strtod_l+0xca>
 8007d06:	2a2d      	cmp	r2, #45	; 0x2d
 8007d08:	d004      	beq.n	8007d14 <_strtod_l+0xac>
 8007d0a:	2a20      	cmp	r2, #32
 8007d0c:	d1ca      	bne.n	8007ca4 <_strtod_l+0x3c>
 8007d0e:	3301      	adds	r3, #1
 8007d10:	931b      	str	r3, [sp, #108]	; 0x6c
 8007d12:	e7bf      	b.n	8007c94 <_strtod_l+0x2c>
 8007d14:	2201      	movs	r2, #1
 8007d16:	920d      	str	r2, [sp, #52]	; 0x34
 8007d18:	1c5a      	adds	r2, r3, #1
 8007d1a:	921b      	str	r2, [sp, #108]	; 0x6c
 8007d1c:	785b      	ldrb	r3, [r3, #1]
 8007d1e:	2b00      	cmp	r3, #0
 8007d20:	d1c2      	bne.n	8007ca8 <_strtod_l+0x40>
 8007d22:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007d24:	961b      	str	r6, [sp, #108]	; 0x6c
 8007d26:	2b00      	cmp	r3, #0
 8007d28:	f040 8585 	bne.w	8008836 <_strtod_l+0xbce>
 8007d2c:	464a      	mov	r2, r9
 8007d2e:	4653      	mov	r3, sl
 8007d30:	e7e2      	b.n	8007cf8 <_strtod_l+0x90>
 8007d32:	2200      	movs	r2, #0
 8007d34:	e7ef      	b.n	8007d16 <_strtod_l+0xae>
 8007d36:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8007d38:	b13a      	cbz	r2, 8007d4a <_strtod_l+0xe2>
 8007d3a:	2135      	movs	r1, #53	; 0x35
 8007d3c:	a81e      	add	r0, sp, #120	; 0x78
 8007d3e:	f002 fbac 	bl	800a49a <__copybits>
 8007d42:	991c      	ldr	r1, [sp, #112]	; 0x70
 8007d44:	4658      	mov	r0, fp
 8007d46:	f002 f81f 	bl	8009d88 <_Bfree>
 8007d4a:	3c01      	subs	r4, #1
 8007d4c:	2c04      	cmp	r4, #4
 8007d4e:	d806      	bhi.n	8007d5e <_strtod_l+0xf6>
 8007d50:	e8df f004 	tbb	[pc, r4]
 8007d54:	1714030a 	.word	0x1714030a
 8007d58:	0a          	.byte	0x0a
 8007d59:	00          	.byte	0x00
 8007d5a:	e9dd 9a1e 	ldrd	r9, sl, [sp, #120]	; 0x78
 8007d5e:	0731      	lsls	r1, r6, #28
 8007d60:	d5c1      	bpl.n	8007ce6 <_strtod_l+0x7e>
 8007d62:	f04a 4a00 	orr.w	sl, sl, #2147483648	; 0x80000000
 8007d66:	e7be      	b.n	8007ce6 <_strtod_l+0x7e>
 8007d68:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8007d6a:	e9dd 931e 	ldrd	r9, r3, [sp, #120]	; 0x78
 8007d6e:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8007d72:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8007d76:	ea43 5a02 	orr.w	sl, r3, r2, lsl #20
 8007d7a:	e7f0      	b.n	8007d5e <_strtod_l+0xf6>
 8007d7c:	f8df a170 	ldr.w	sl, [pc, #368]	; 8007ef0 <_strtod_l+0x288>
 8007d80:	e7ed      	b.n	8007d5e <_strtod_l+0xf6>
 8007d82:	f06f 4a00 	mvn.w	sl, #2147483648	; 0x80000000
 8007d86:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
 8007d8a:	e7e8      	b.n	8007d5e <_strtod_l+0xf6>
 8007d8c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007d8e:	1c5a      	adds	r2, r3, #1
 8007d90:	921b      	str	r2, [sp, #108]	; 0x6c
 8007d92:	785b      	ldrb	r3, [r3, #1]
 8007d94:	2b30      	cmp	r3, #48	; 0x30
 8007d96:	d0f9      	beq.n	8007d8c <_strtod_l+0x124>
 8007d98:	2b00      	cmp	r3, #0
 8007d9a:	d0a4      	beq.n	8007ce6 <_strtod_l+0x7e>
 8007d9c:	2301      	movs	r3, #1
 8007d9e:	2500      	movs	r5, #0
 8007da0:	220a      	movs	r2, #10
 8007da2:	9307      	str	r3, [sp, #28]
 8007da4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007da6:	9506      	str	r5, [sp, #24]
 8007da8:	9308      	str	r3, [sp, #32]
 8007daa:	9504      	str	r5, [sp, #16]
 8007dac:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8007dae:	7807      	ldrb	r7, [r0, #0]
 8007db0:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 8007db4:	b2d9      	uxtb	r1, r3
 8007db6:	2909      	cmp	r1, #9
 8007db8:	d929      	bls.n	8007e0e <_strtod_l+0x1a6>
 8007dba:	4622      	mov	r2, r4
 8007dbc:	f8d8 1000 	ldr.w	r1, [r8]
 8007dc0:	f002 fdbc 	bl	800a93c <strncmp>
 8007dc4:	2800      	cmp	r0, #0
 8007dc6:	d031      	beq.n	8007e2c <_strtod_l+0x1c4>
 8007dc8:	2000      	movs	r0, #0
 8007dca:	463b      	mov	r3, r7
 8007dcc:	4602      	mov	r2, r0
 8007dce:	9c04      	ldr	r4, [sp, #16]
 8007dd0:	9005      	str	r0, [sp, #20]
 8007dd2:	2b65      	cmp	r3, #101	; 0x65
 8007dd4:	d001      	beq.n	8007dda <_strtod_l+0x172>
 8007dd6:	2b45      	cmp	r3, #69	; 0x45
 8007dd8:	d114      	bne.n	8007e04 <_strtod_l+0x19c>
 8007dda:	b924      	cbnz	r4, 8007de6 <_strtod_l+0x17e>
 8007ddc:	b910      	cbnz	r0, 8007de4 <_strtod_l+0x17c>
 8007dde:	9b07      	ldr	r3, [sp, #28]
 8007de0:	2b00      	cmp	r3, #0
 8007de2:	d09e      	beq.n	8007d22 <_strtod_l+0xba>
 8007de4:	2400      	movs	r4, #0
 8007de6:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 8007de8:	1c73      	adds	r3, r6, #1
 8007dea:	931b      	str	r3, [sp, #108]	; 0x6c
 8007dec:	7873      	ldrb	r3, [r6, #1]
 8007dee:	2b2b      	cmp	r3, #43	; 0x2b
 8007df0:	d078      	beq.n	8007ee4 <_strtod_l+0x27c>
 8007df2:	2b2d      	cmp	r3, #45	; 0x2d
 8007df4:	d070      	beq.n	8007ed8 <_strtod_l+0x270>
 8007df6:	f04f 0c00 	mov.w	ip, #0
 8007dfa:	f1a3 0730 	sub.w	r7, r3, #48	; 0x30
 8007dfe:	2f09      	cmp	r7, #9
 8007e00:	d97c      	bls.n	8007efc <_strtod_l+0x294>
 8007e02:	961b      	str	r6, [sp, #108]	; 0x6c
 8007e04:	f04f 0e00 	mov.w	lr, #0
 8007e08:	e09a      	b.n	8007f40 <_strtod_l+0x2d8>
 8007e0a:	2300      	movs	r3, #0
 8007e0c:	e7c7      	b.n	8007d9e <_strtod_l+0x136>
 8007e0e:	9904      	ldr	r1, [sp, #16]
 8007e10:	3001      	adds	r0, #1
 8007e12:	2908      	cmp	r1, #8
 8007e14:	bfd7      	itett	le
 8007e16:	9906      	ldrle	r1, [sp, #24]
 8007e18:	fb02 3505 	mlagt	r5, r2, r5, r3
 8007e1c:	fb02 3301 	mlale	r3, r2, r1, r3
 8007e20:	9306      	strle	r3, [sp, #24]
 8007e22:	9b04      	ldr	r3, [sp, #16]
 8007e24:	901b      	str	r0, [sp, #108]	; 0x6c
 8007e26:	3301      	adds	r3, #1
 8007e28:	9304      	str	r3, [sp, #16]
 8007e2a:	e7bf      	b.n	8007dac <_strtod_l+0x144>
 8007e2c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007e2e:	191a      	adds	r2, r3, r4
 8007e30:	921b      	str	r2, [sp, #108]	; 0x6c
 8007e32:	9a04      	ldr	r2, [sp, #16]
 8007e34:	5d1b      	ldrb	r3, [r3, r4]
 8007e36:	2a00      	cmp	r2, #0
 8007e38:	d037      	beq.n	8007eaa <_strtod_l+0x242>
 8007e3a:	4602      	mov	r2, r0
 8007e3c:	9c04      	ldr	r4, [sp, #16]
 8007e3e:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8007e42:	2909      	cmp	r1, #9
 8007e44:	d913      	bls.n	8007e6e <_strtod_l+0x206>
 8007e46:	2101      	movs	r1, #1
 8007e48:	9105      	str	r1, [sp, #20]
 8007e4a:	e7c2      	b.n	8007dd2 <_strtod_l+0x16a>
 8007e4c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007e4e:	3001      	adds	r0, #1
 8007e50:	1c5a      	adds	r2, r3, #1
 8007e52:	921b      	str	r2, [sp, #108]	; 0x6c
 8007e54:	785b      	ldrb	r3, [r3, #1]
 8007e56:	2b30      	cmp	r3, #48	; 0x30
 8007e58:	d0f8      	beq.n	8007e4c <_strtod_l+0x1e4>
 8007e5a:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 8007e5e:	2a08      	cmp	r2, #8
 8007e60:	f200 84f0 	bhi.w	8008844 <_strtod_l+0xbdc>
 8007e64:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8007e66:	9208      	str	r2, [sp, #32]
 8007e68:	4602      	mov	r2, r0
 8007e6a:	2000      	movs	r0, #0
 8007e6c:	4604      	mov	r4, r0
 8007e6e:	f1b3 0e30 	subs.w	lr, r3, #48	; 0x30
 8007e72:	f100 0101 	add.w	r1, r0, #1
 8007e76:	d012      	beq.n	8007e9e <_strtod_l+0x236>
 8007e78:	440a      	add	r2, r1
 8007e7a:	270a      	movs	r7, #10
 8007e7c:	4621      	mov	r1, r4
 8007e7e:	eb00 0c04 	add.w	ip, r0, r4
 8007e82:	458c      	cmp	ip, r1
 8007e84:	d113      	bne.n	8007eae <_strtod_l+0x246>
 8007e86:	1821      	adds	r1, r4, r0
 8007e88:	2908      	cmp	r1, #8
 8007e8a:	f104 0401 	add.w	r4, r4, #1
 8007e8e:	4404      	add	r4, r0
 8007e90:	dc19      	bgt.n	8007ec6 <_strtod_l+0x25e>
 8007e92:	210a      	movs	r1, #10
 8007e94:	9b06      	ldr	r3, [sp, #24]
 8007e96:	fb01 e303 	mla	r3, r1, r3, lr
 8007e9a:	9306      	str	r3, [sp, #24]
 8007e9c:	2100      	movs	r1, #0
 8007e9e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007ea0:	1c58      	adds	r0, r3, #1
 8007ea2:	901b      	str	r0, [sp, #108]	; 0x6c
 8007ea4:	785b      	ldrb	r3, [r3, #1]
 8007ea6:	4608      	mov	r0, r1
 8007ea8:	e7c9      	b.n	8007e3e <_strtod_l+0x1d6>
 8007eaa:	9804      	ldr	r0, [sp, #16]
 8007eac:	e7d3      	b.n	8007e56 <_strtod_l+0x1ee>
 8007eae:	2908      	cmp	r1, #8
 8007eb0:	f101 0101 	add.w	r1, r1, #1
 8007eb4:	dc03      	bgt.n	8007ebe <_strtod_l+0x256>
 8007eb6:	9b06      	ldr	r3, [sp, #24]
 8007eb8:	437b      	muls	r3, r7
 8007eba:	9306      	str	r3, [sp, #24]
 8007ebc:	e7e1      	b.n	8007e82 <_strtod_l+0x21a>
 8007ebe:	2910      	cmp	r1, #16
 8007ec0:	bfd8      	it	le
 8007ec2:	437d      	mulle	r5, r7
 8007ec4:	e7dd      	b.n	8007e82 <_strtod_l+0x21a>
 8007ec6:	2c10      	cmp	r4, #16
 8007ec8:	bfdc      	itt	le
 8007eca:	210a      	movle	r1, #10
 8007ecc:	fb01 e505 	mlale	r5, r1, r5, lr
 8007ed0:	e7e4      	b.n	8007e9c <_strtod_l+0x234>
 8007ed2:	2301      	movs	r3, #1
 8007ed4:	9305      	str	r3, [sp, #20]
 8007ed6:	e781      	b.n	8007ddc <_strtod_l+0x174>
 8007ed8:	f04f 0c01 	mov.w	ip, #1
 8007edc:	1cb3      	adds	r3, r6, #2
 8007ede:	931b      	str	r3, [sp, #108]	; 0x6c
 8007ee0:	78b3      	ldrb	r3, [r6, #2]
 8007ee2:	e78a      	b.n	8007dfa <_strtod_l+0x192>
 8007ee4:	f04f 0c00 	mov.w	ip, #0
 8007ee8:	e7f8      	b.n	8007edc <_strtod_l+0x274>
 8007eea:	bf00      	nop
 8007eec:	0800b200 	.word	0x0800b200
 8007ef0:	7ff00000 	.word	0x7ff00000
 8007ef4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007ef6:	1c5f      	adds	r7, r3, #1
 8007ef8:	971b      	str	r7, [sp, #108]	; 0x6c
 8007efa:	785b      	ldrb	r3, [r3, #1]
 8007efc:	2b30      	cmp	r3, #48	; 0x30
 8007efe:	d0f9      	beq.n	8007ef4 <_strtod_l+0x28c>
 8007f00:	f1a3 0731 	sub.w	r7, r3, #49	; 0x31
 8007f04:	2f08      	cmp	r7, #8
 8007f06:	f63f af7d 	bhi.w	8007e04 <_strtod_l+0x19c>
 8007f0a:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 8007f0e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007f10:	9309      	str	r3, [sp, #36]	; 0x24
 8007f12:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007f14:	1c5f      	adds	r7, r3, #1
 8007f16:	971b      	str	r7, [sp, #108]	; 0x6c
 8007f18:	785b      	ldrb	r3, [r3, #1]
 8007f1a:	f1a3 0830 	sub.w	r8, r3, #48	; 0x30
 8007f1e:	f1b8 0f09 	cmp.w	r8, #9
 8007f22:	d937      	bls.n	8007f94 <_strtod_l+0x32c>
 8007f24:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007f26:	1a7f      	subs	r7, r7, r1
 8007f28:	2f08      	cmp	r7, #8
 8007f2a:	f644 671f 	movw	r7, #19999	; 0x4e1f
 8007f2e:	dc37      	bgt.n	8007fa0 <_strtod_l+0x338>
 8007f30:	45be      	cmp	lr, r7
 8007f32:	bfa8      	it	ge
 8007f34:	46be      	movge	lr, r7
 8007f36:	f1bc 0f00 	cmp.w	ip, #0
 8007f3a:	d001      	beq.n	8007f40 <_strtod_l+0x2d8>
 8007f3c:	f1ce 0e00 	rsb	lr, lr, #0
 8007f40:	2c00      	cmp	r4, #0
 8007f42:	d151      	bne.n	8007fe8 <_strtod_l+0x380>
 8007f44:	2800      	cmp	r0, #0
 8007f46:	f47f aece 	bne.w	8007ce6 <_strtod_l+0x7e>
 8007f4a:	9a07      	ldr	r2, [sp, #28]
 8007f4c:	2a00      	cmp	r2, #0
 8007f4e:	f47f aeca 	bne.w	8007ce6 <_strtod_l+0x7e>
 8007f52:	9a05      	ldr	r2, [sp, #20]
 8007f54:	2a00      	cmp	r2, #0
 8007f56:	f47f aee4 	bne.w	8007d22 <_strtod_l+0xba>
 8007f5a:	2b4e      	cmp	r3, #78	; 0x4e
 8007f5c:	d027      	beq.n	8007fae <_strtod_l+0x346>
 8007f5e:	dc21      	bgt.n	8007fa4 <_strtod_l+0x33c>
 8007f60:	2b49      	cmp	r3, #73	; 0x49
 8007f62:	f47f aede 	bne.w	8007d22 <_strtod_l+0xba>
 8007f66:	49a4      	ldr	r1, [pc, #656]	; (80081f8 <_strtod_l+0x590>)
 8007f68:	a81b      	add	r0, sp, #108	; 0x6c
 8007f6a:	f001 fdf9 	bl	8009b60 <__match>
 8007f6e:	2800      	cmp	r0, #0
 8007f70:	f43f aed7 	beq.w	8007d22 <_strtod_l+0xba>
 8007f74:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007f76:	49a1      	ldr	r1, [pc, #644]	; (80081fc <_strtod_l+0x594>)
 8007f78:	3b01      	subs	r3, #1
 8007f7a:	a81b      	add	r0, sp, #108	; 0x6c
 8007f7c:	931b      	str	r3, [sp, #108]	; 0x6c
 8007f7e:	f001 fdef 	bl	8009b60 <__match>
 8007f82:	b910      	cbnz	r0, 8007f8a <_strtod_l+0x322>
 8007f84:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007f86:	3301      	adds	r3, #1
 8007f88:	931b      	str	r3, [sp, #108]	; 0x6c
 8007f8a:	f8df a284 	ldr.w	sl, [pc, #644]	; 8008210 <_strtod_l+0x5a8>
 8007f8e:	f04f 0900 	mov.w	r9, #0
 8007f92:	e6a8      	b.n	8007ce6 <_strtod_l+0x7e>
 8007f94:	210a      	movs	r1, #10
 8007f96:	fb01 3e0e 	mla	lr, r1, lr, r3
 8007f9a:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8007f9e:	e7b8      	b.n	8007f12 <_strtod_l+0x2aa>
 8007fa0:	46be      	mov	lr, r7
 8007fa2:	e7c8      	b.n	8007f36 <_strtod_l+0x2ce>
 8007fa4:	2b69      	cmp	r3, #105	; 0x69
 8007fa6:	d0de      	beq.n	8007f66 <_strtod_l+0x2fe>
 8007fa8:	2b6e      	cmp	r3, #110	; 0x6e
 8007faa:	f47f aeba 	bne.w	8007d22 <_strtod_l+0xba>
 8007fae:	4994      	ldr	r1, [pc, #592]	; (8008200 <_strtod_l+0x598>)
 8007fb0:	a81b      	add	r0, sp, #108	; 0x6c
 8007fb2:	f001 fdd5 	bl	8009b60 <__match>
 8007fb6:	2800      	cmp	r0, #0
 8007fb8:	f43f aeb3 	beq.w	8007d22 <_strtod_l+0xba>
 8007fbc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007fbe:	781b      	ldrb	r3, [r3, #0]
 8007fc0:	2b28      	cmp	r3, #40	; 0x28
 8007fc2:	d10e      	bne.n	8007fe2 <_strtod_l+0x37a>
 8007fc4:	aa1e      	add	r2, sp, #120	; 0x78
 8007fc6:	498f      	ldr	r1, [pc, #572]	; (8008204 <_strtod_l+0x59c>)
 8007fc8:	a81b      	add	r0, sp, #108	; 0x6c
 8007fca:	f001 fddd 	bl	8009b88 <__hexnan>
 8007fce:	2805      	cmp	r0, #5
 8007fd0:	d107      	bne.n	8007fe2 <_strtod_l+0x37a>
 8007fd2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8007fd4:	f8dd 9078 	ldr.w	r9, [sp, #120]	; 0x78
 8007fd8:	f043 4aff 	orr.w	sl, r3, #2139095040	; 0x7f800000
 8007fdc:	f44a 0ae0 	orr.w	sl, sl, #7340032	; 0x700000
 8007fe0:	e681      	b.n	8007ce6 <_strtod_l+0x7e>
 8007fe2:	f8df a234 	ldr.w	sl, [pc, #564]	; 8008218 <_strtod_l+0x5b0>
 8007fe6:	e7d2      	b.n	8007f8e <_strtod_l+0x326>
 8007fe8:	ebae 0302 	sub.w	r3, lr, r2
 8007fec:	9307      	str	r3, [sp, #28]
 8007fee:	9b04      	ldr	r3, [sp, #16]
 8007ff0:	9806      	ldr	r0, [sp, #24]
 8007ff2:	2b00      	cmp	r3, #0
 8007ff4:	bf08      	it	eq
 8007ff6:	4623      	moveq	r3, r4
 8007ff8:	2c10      	cmp	r4, #16
 8007ffa:	9304      	str	r3, [sp, #16]
 8007ffc:	46a0      	mov	r8, r4
 8007ffe:	bfa8      	it	ge
 8008000:	f04f 0810 	movge.w	r8, #16
 8008004:	f7f8 f9ee 	bl	80003e4 <__aeabi_ui2d>
 8008008:	2c09      	cmp	r4, #9
 800800a:	4681      	mov	r9, r0
 800800c:	468a      	mov	sl, r1
 800800e:	dc13      	bgt.n	8008038 <_strtod_l+0x3d0>
 8008010:	9b07      	ldr	r3, [sp, #28]
 8008012:	2b00      	cmp	r3, #0
 8008014:	f43f ae67 	beq.w	8007ce6 <_strtod_l+0x7e>
 8008018:	9b07      	ldr	r3, [sp, #28]
 800801a:	dd7e      	ble.n	800811a <_strtod_l+0x4b2>
 800801c:	2b16      	cmp	r3, #22
 800801e:	dc65      	bgt.n	80080ec <_strtod_l+0x484>
 8008020:	4a79      	ldr	r2, [pc, #484]	; (8008208 <_strtod_l+0x5a0>)
 8008022:	eb02 0ec3 	add.w	lr, r2, r3, lsl #3
 8008026:	464a      	mov	r2, r9
 8008028:	e9de 0100 	ldrd	r0, r1, [lr]
 800802c:	4653      	mov	r3, sl
 800802e:	f7f8 fa53 	bl	80004d8 <__aeabi_dmul>
 8008032:	4681      	mov	r9, r0
 8008034:	468a      	mov	sl, r1
 8008036:	e656      	b.n	8007ce6 <_strtod_l+0x7e>
 8008038:	4b73      	ldr	r3, [pc, #460]	; (8008208 <_strtod_l+0x5a0>)
 800803a:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800803e:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8008042:	f7f8 fa49 	bl	80004d8 <__aeabi_dmul>
 8008046:	4606      	mov	r6, r0
 8008048:	4628      	mov	r0, r5
 800804a:	460f      	mov	r7, r1
 800804c:	f7f8 f9ca 	bl	80003e4 <__aeabi_ui2d>
 8008050:	4602      	mov	r2, r0
 8008052:	460b      	mov	r3, r1
 8008054:	4630      	mov	r0, r6
 8008056:	4639      	mov	r1, r7
 8008058:	f7f8 f888 	bl	800016c <__adddf3>
 800805c:	2c0f      	cmp	r4, #15
 800805e:	4681      	mov	r9, r0
 8008060:	468a      	mov	sl, r1
 8008062:	ddd5      	ble.n	8008010 <_strtod_l+0x3a8>
 8008064:	9b07      	ldr	r3, [sp, #28]
 8008066:	eba4 0808 	sub.w	r8, r4, r8
 800806a:	4498      	add	r8, r3
 800806c:	f1b8 0f00 	cmp.w	r8, #0
 8008070:	f340 809a 	ble.w	80081a8 <_strtod_l+0x540>
 8008074:	f018 030f 	ands.w	r3, r8, #15
 8008078:	d00a      	beq.n	8008090 <_strtod_l+0x428>
 800807a:	4963      	ldr	r1, [pc, #396]	; (8008208 <_strtod_l+0x5a0>)
 800807c:	464a      	mov	r2, r9
 800807e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8008082:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008086:	4653      	mov	r3, sl
 8008088:	f7f8 fa26 	bl	80004d8 <__aeabi_dmul>
 800808c:	4681      	mov	r9, r0
 800808e:	468a      	mov	sl, r1
 8008090:	f038 080f 	bics.w	r8, r8, #15
 8008094:	d077      	beq.n	8008186 <_strtod_l+0x51e>
 8008096:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800809a:	dd4b      	ble.n	8008134 <_strtod_l+0x4cc>
 800809c:	f04f 0800 	mov.w	r8, #0
 80080a0:	f8cd 8010 	str.w	r8, [sp, #16]
 80080a4:	f8cd 8020 	str.w	r8, [sp, #32]
 80080a8:	f8cd 8018 	str.w	r8, [sp, #24]
 80080ac:	2322      	movs	r3, #34	; 0x22
 80080ae:	f04f 0900 	mov.w	r9, #0
 80080b2:	f8df a15c 	ldr.w	sl, [pc, #348]	; 8008210 <_strtod_l+0x5a8>
 80080b6:	f8cb 3000 	str.w	r3, [fp]
 80080ba:	9b08      	ldr	r3, [sp, #32]
 80080bc:	2b00      	cmp	r3, #0
 80080be:	f43f ae12 	beq.w	8007ce6 <_strtod_l+0x7e>
 80080c2:	991c      	ldr	r1, [sp, #112]	; 0x70
 80080c4:	4658      	mov	r0, fp
 80080c6:	f001 fe5f 	bl	8009d88 <_Bfree>
 80080ca:	9906      	ldr	r1, [sp, #24]
 80080cc:	4658      	mov	r0, fp
 80080ce:	f001 fe5b 	bl	8009d88 <_Bfree>
 80080d2:	9904      	ldr	r1, [sp, #16]
 80080d4:	4658      	mov	r0, fp
 80080d6:	f001 fe57 	bl	8009d88 <_Bfree>
 80080da:	9908      	ldr	r1, [sp, #32]
 80080dc:	4658      	mov	r0, fp
 80080de:	f001 fe53 	bl	8009d88 <_Bfree>
 80080e2:	4641      	mov	r1, r8
 80080e4:	4658      	mov	r0, fp
 80080e6:	f001 fe4f 	bl	8009d88 <_Bfree>
 80080ea:	e5fc      	b.n	8007ce6 <_strtod_l+0x7e>
 80080ec:	9a07      	ldr	r2, [sp, #28]
 80080ee:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 80080f2:	4293      	cmp	r3, r2
 80080f4:	dbb6      	blt.n	8008064 <_strtod_l+0x3fc>
 80080f6:	4d44      	ldr	r5, [pc, #272]	; (8008208 <_strtod_l+0x5a0>)
 80080f8:	f1c4 040f 	rsb	r4, r4, #15
 80080fc:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 8008100:	464a      	mov	r2, r9
 8008102:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008106:	4653      	mov	r3, sl
 8008108:	f7f8 f9e6 	bl	80004d8 <__aeabi_dmul>
 800810c:	9b07      	ldr	r3, [sp, #28]
 800810e:	1b1c      	subs	r4, r3, r4
 8008110:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 8008114:	e9d5 2300 	ldrd	r2, r3, [r5]
 8008118:	e789      	b.n	800802e <_strtod_l+0x3c6>
 800811a:	f113 0f16 	cmn.w	r3, #22
 800811e:	dba1      	blt.n	8008064 <_strtod_l+0x3fc>
 8008120:	4a39      	ldr	r2, [pc, #228]	; (8008208 <_strtod_l+0x5a0>)
 8008122:	4648      	mov	r0, r9
 8008124:	eba2 02c3 	sub.w	r2, r2, r3, lsl #3
 8008128:	e9d2 2300 	ldrd	r2, r3, [r2]
 800812c:	4651      	mov	r1, sl
 800812e:	f7f8 fafd 	bl	800072c <__aeabi_ddiv>
 8008132:	e77e      	b.n	8008032 <_strtod_l+0x3ca>
 8008134:	2300      	movs	r3, #0
 8008136:	4648      	mov	r0, r9
 8008138:	4651      	mov	r1, sl
 800813a:	461d      	mov	r5, r3
 800813c:	4e33      	ldr	r6, [pc, #204]	; (800820c <_strtod_l+0x5a4>)
 800813e:	ea4f 1828 	mov.w	r8, r8, asr #4
 8008142:	f1b8 0f01 	cmp.w	r8, #1
 8008146:	dc21      	bgt.n	800818c <_strtod_l+0x524>
 8008148:	b10b      	cbz	r3, 800814e <_strtod_l+0x4e6>
 800814a:	4681      	mov	r9, r0
 800814c:	468a      	mov	sl, r1
 800814e:	4b2f      	ldr	r3, [pc, #188]	; (800820c <_strtod_l+0x5a4>)
 8008150:	f1aa 7a54 	sub.w	sl, sl, #55574528	; 0x3500000
 8008154:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8008158:	464a      	mov	r2, r9
 800815a:	e9d5 0100 	ldrd	r0, r1, [r5]
 800815e:	4653      	mov	r3, sl
 8008160:	f7f8 f9ba 	bl	80004d8 <__aeabi_dmul>
 8008164:	4b2a      	ldr	r3, [pc, #168]	; (8008210 <_strtod_l+0x5a8>)
 8008166:	460a      	mov	r2, r1
 8008168:	400b      	ands	r3, r1
 800816a:	492a      	ldr	r1, [pc, #168]	; (8008214 <_strtod_l+0x5ac>)
 800816c:	4681      	mov	r9, r0
 800816e:	428b      	cmp	r3, r1
 8008170:	d894      	bhi.n	800809c <_strtod_l+0x434>
 8008172:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8008176:	428b      	cmp	r3, r1
 8008178:	bf86      	itte	hi
 800817a:	f04f 39ff 	movhi.w	r9, #4294967295	; 0xffffffff
 800817e:	f8df a09c 	ldrhi.w	sl, [pc, #156]	; 800821c <_strtod_l+0x5b4>
 8008182:	f102 7a54 	addls.w	sl, r2, #55574528	; 0x3500000
 8008186:	2300      	movs	r3, #0
 8008188:	9305      	str	r3, [sp, #20]
 800818a:	e07b      	b.n	8008284 <_strtod_l+0x61c>
 800818c:	f018 0f01 	tst.w	r8, #1
 8008190:	d006      	beq.n	80081a0 <_strtod_l+0x538>
 8008192:	eb06 03c5 	add.w	r3, r6, r5, lsl #3
 8008196:	e9d3 2300 	ldrd	r2, r3, [r3]
 800819a:	f7f8 f99d 	bl	80004d8 <__aeabi_dmul>
 800819e:	2301      	movs	r3, #1
 80081a0:	3501      	adds	r5, #1
 80081a2:	ea4f 0868 	mov.w	r8, r8, asr #1
 80081a6:	e7cc      	b.n	8008142 <_strtod_l+0x4da>
 80081a8:	d0ed      	beq.n	8008186 <_strtod_l+0x51e>
 80081aa:	f1c8 0800 	rsb	r8, r8, #0
 80081ae:	f018 020f 	ands.w	r2, r8, #15
 80081b2:	d00a      	beq.n	80081ca <_strtod_l+0x562>
 80081b4:	4b14      	ldr	r3, [pc, #80]	; (8008208 <_strtod_l+0x5a0>)
 80081b6:	4648      	mov	r0, r9
 80081b8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80081bc:	4651      	mov	r1, sl
 80081be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081c2:	f7f8 fab3 	bl	800072c <__aeabi_ddiv>
 80081c6:	4681      	mov	r9, r0
 80081c8:	468a      	mov	sl, r1
 80081ca:	ea5f 1828 	movs.w	r8, r8, asr #4
 80081ce:	d0da      	beq.n	8008186 <_strtod_l+0x51e>
 80081d0:	f1b8 0f1f 	cmp.w	r8, #31
 80081d4:	dd24      	ble.n	8008220 <_strtod_l+0x5b8>
 80081d6:	f04f 0800 	mov.w	r8, #0
 80081da:	f8cd 8010 	str.w	r8, [sp, #16]
 80081de:	f8cd 8020 	str.w	r8, [sp, #32]
 80081e2:	f8cd 8018 	str.w	r8, [sp, #24]
 80081e6:	2322      	movs	r3, #34	; 0x22
 80081e8:	f04f 0900 	mov.w	r9, #0
 80081ec:	f04f 0a00 	mov.w	sl, #0
 80081f0:	f8cb 3000 	str.w	r3, [fp]
 80081f4:	e761      	b.n	80080ba <_strtod_l+0x452>
 80081f6:	bf00      	nop
 80081f8:	0800b1c9 	.word	0x0800b1c9
 80081fc:	0800b253 	.word	0x0800b253
 8008200:	0800b1d1 	.word	0x0800b1d1
 8008204:	0800b214 	.word	0x0800b214
 8008208:	0800b290 	.word	0x0800b290
 800820c:	0800b268 	.word	0x0800b268
 8008210:	7ff00000 	.word	0x7ff00000
 8008214:	7ca00000 	.word	0x7ca00000
 8008218:	fff80000 	.word	0xfff80000
 800821c:	7fefffff 	.word	0x7fefffff
 8008220:	f018 0310 	ands.w	r3, r8, #16
 8008224:	bf18      	it	ne
 8008226:	236a      	movne	r3, #106	; 0x6a
 8008228:	4648      	mov	r0, r9
 800822a:	9305      	str	r3, [sp, #20]
 800822c:	4651      	mov	r1, sl
 800822e:	2300      	movs	r3, #0
 8008230:	4da1      	ldr	r5, [pc, #644]	; (80084b8 <_strtod_l+0x850>)
 8008232:	f1b8 0f00 	cmp.w	r8, #0
 8008236:	f300 8113 	bgt.w	8008460 <_strtod_l+0x7f8>
 800823a:	b10b      	cbz	r3, 8008240 <_strtod_l+0x5d8>
 800823c:	4681      	mov	r9, r0
 800823e:	468a      	mov	sl, r1
 8008240:	9b05      	ldr	r3, [sp, #20]
 8008242:	b1bb      	cbz	r3, 8008274 <_strtod_l+0x60c>
 8008244:	f3ca 530a 	ubfx	r3, sl, #20, #11
 8008248:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800824c:	2b00      	cmp	r3, #0
 800824e:	4651      	mov	r1, sl
 8008250:	dd10      	ble.n	8008274 <_strtod_l+0x60c>
 8008252:	2b1f      	cmp	r3, #31
 8008254:	f340 8110 	ble.w	8008478 <_strtod_l+0x810>
 8008258:	2b34      	cmp	r3, #52	; 0x34
 800825a:	bfd8      	it	le
 800825c:	f04f 32ff 	movle.w	r2, #4294967295	; 0xffffffff
 8008260:	f04f 0900 	mov.w	r9, #0
 8008264:	bfcf      	iteee	gt
 8008266:	f04f 7a5c 	movgt.w	sl, #57671680	; 0x3700000
 800826a:	3b20      	suble	r3, #32
 800826c:	fa02 f303 	lslle.w	r3, r2, r3
 8008270:	ea03 0a01 	andle.w	sl, r3, r1
 8008274:	2200      	movs	r2, #0
 8008276:	2300      	movs	r3, #0
 8008278:	4648      	mov	r0, r9
 800827a:	4651      	mov	r1, sl
 800827c:	f7f8 fb94 	bl	80009a8 <__aeabi_dcmpeq>
 8008280:	2800      	cmp	r0, #0
 8008282:	d1a8      	bne.n	80081d6 <_strtod_l+0x56e>
 8008284:	9b06      	ldr	r3, [sp, #24]
 8008286:	9a04      	ldr	r2, [sp, #16]
 8008288:	9300      	str	r3, [sp, #0]
 800828a:	9908      	ldr	r1, [sp, #32]
 800828c:	4623      	mov	r3, r4
 800828e:	4658      	mov	r0, fp
 8008290:	f001 fdcc 	bl	8009e2c <__s2b>
 8008294:	9008      	str	r0, [sp, #32]
 8008296:	2800      	cmp	r0, #0
 8008298:	f43f af00 	beq.w	800809c <_strtod_l+0x434>
 800829c:	9a07      	ldr	r2, [sp, #28]
 800829e:	9b07      	ldr	r3, [sp, #28]
 80082a0:	2a00      	cmp	r2, #0
 80082a2:	f1c3 0300 	rsb	r3, r3, #0
 80082a6:	bfa8      	it	ge
 80082a8:	2300      	movge	r3, #0
 80082aa:	f04f 0800 	mov.w	r8, #0
 80082ae:	930e      	str	r3, [sp, #56]	; 0x38
 80082b0:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 80082b4:	9316      	str	r3, [sp, #88]	; 0x58
 80082b6:	f8cd 8010 	str.w	r8, [sp, #16]
 80082ba:	9b08      	ldr	r3, [sp, #32]
 80082bc:	4658      	mov	r0, fp
 80082be:	6859      	ldr	r1, [r3, #4]
 80082c0:	f001 fd2e 	bl	8009d20 <_Balloc>
 80082c4:	9006      	str	r0, [sp, #24]
 80082c6:	2800      	cmp	r0, #0
 80082c8:	f43f aef0 	beq.w	80080ac <_strtod_l+0x444>
 80082cc:	9b08      	ldr	r3, [sp, #32]
 80082ce:	300c      	adds	r0, #12
 80082d0:	691a      	ldr	r2, [r3, #16]
 80082d2:	f103 010c 	add.w	r1, r3, #12
 80082d6:	3202      	adds	r2, #2
 80082d8:	0092      	lsls	r2, r2, #2
 80082da:	f7fe fded 	bl	8006eb8 <memcpy>
 80082de:	ab1e      	add	r3, sp, #120	; 0x78
 80082e0:	9301      	str	r3, [sp, #4]
 80082e2:	ab1d      	add	r3, sp, #116	; 0x74
 80082e4:	9300      	str	r3, [sp, #0]
 80082e6:	464a      	mov	r2, r9
 80082e8:	4653      	mov	r3, sl
 80082ea:	4658      	mov	r0, fp
 80082ec:	e9cd 9a0a 	strd	r9, sl, [sp, #40]	; 0x28
 80082f0:	f002 f856 	bl	800a3a0 <__d2b>
 80082f4:	901c      	str	r0, [sp, #112]	; 0x70
 80082f6:	2800      	cmp	r0, #0
 80082f8:	f43f aed8 	beq.w	80080ac <_strtod_l+0x444>
 80082fc:	2101      	movs	r1, #1
 80082fe:	4658      	mov	r0, fp
 8008300:	f001 fe20 	bl	8009f44 <__i2b>
 8008304:	9004      	str	r0, [sp, #16]
 8008306:	4603      	mov	r3, r0
 8008308:	2800      	cmp	r0, #0
 800830a:	f43f aecf 	beq.w	80080ac <_strtod_l+0x444>
 800830e:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 8008310:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8008312:	2d00      	cmp	r5, #0
 8008314:	bfab      	itete	ge
 8008316:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 8008318:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 800831a:	18ee      	addge	r6, r5, r3
 800831c:	1b5c      	sublt	r4, r3, r5
 800831e:	9b05      	ldr	r3, [sp, #20]
 8008320:	bfa8      	it	ge
 8008322:	9c16      	ldrge	r4, [sp, #88]	; 0x58
 8008324:	eba5 0503 	sub.w	r5, r5, r3
 8008328:	4415      	add	r5, r2
 800832a:	4b64      	ldr	r3, [pc, #400]	; (80084bc <_strtod_l+0x854>)
 800832c:	f105 35ff 	add.w	r5, r5, #4294967295	; 0xffffffff
 8008330:	bfb8      	it	lt
 8008332:	9e0e      	ldrlt	r6, [sp, #56]	; 0x38
 8008334:	429d      	cmp	r5, r3
 8008336:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800833a:	f280 80af 	bge.w	800849c <_strtod_l+0x834>
 800833e:	1b5b      	subs	r3, r3, r5
 8008340:	2b1f      	cmp	r3, #31
 8008342:	eba2 0203 	sub.w	r2, r2, r3
 8008346:	f04f 0701 	mov.w	r7, #1
 800834a:	f300 809c 	bgt.w	8008486 <_strtod_l+0x81e>
 800834e:	2500      	movs	r5, #0
 8008350:	fa07 f303 	lsl.w	r3, r7, r3
 8008354:	930f      	str	r3, [sp, #60]	; 0x3c
 8008356:	18b7      	adds	r7, r6, r2
 8008358:	9b05      	ldr	r3, [sp, #20]
 800835a:	42be      	cmp	r6, r7
 800835c:	4414      	add	r4, r2
 800835e:	441c      	add	r4, r3
 8008360:	4633      	mov	r3, r6
 8008362:	bfa8      	it	ge
 8008364:	463b      	movge	r3, r7
 8008366:	42a3      	cmp	r3, r4
 8008368:	bfa8      	it	ge
 800836a:	4623      	movge	r3, r4
 800836c:	2b00      	cmp	r3, #0
 800836e:	bfc2      	ittt	gt
 8008370:	1aff      	subgt	r7, r7, r3
 8008372:	1ae4      	subgt	r4, r4, r3
 8008374:	1af6      	subgt	r6, r6, r3
 8008376:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008378:	b1bb      	cbz	r3, 80083aa <_strtod_l+0x742>
 800837a:	461a      	mov	r2, r3
 800837c:	9904      	ldr	r1, [sp, #16]
 800837e:	4658      	mov	r0, fp
 8008380:	f001 fe7e 	bl	800a080 <__pow5mult>
 8008384:	9004      	str	r0, [sp, #16]
 8008386:	2800      	cmp	r0, #0
 8008388:	f43f ae90 	beq.w	80080ac <_strtod_l+0x444>
 800838c:	4601      	mov	r1, r0
 800838e:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8008390:	4658      	mov	r0, fp
 8008392:	f001 fde0 	bl	8009f56 <__multiply>
 8008396:	9009      	str	r0, [sp, #36]	; 0x24
 8008398:	2800      	cmp	r0, #0
 800839a:	f43f ae87 	beq.w	80080ac <_strtod_l+0x444>
 800839e:	991c      	ldr	r1, [sp, #112]	; 0x70
 80083a0:	4658      	mov	r0, fp
 80083a2:	f001 fcf1 	bl	8009d88 <_Bfree>
 80083a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80083a8:	931c      	str	r3, [sp, #112]	; 0x70
 80083aa:	2f00      	cmp	r7, #0
 80083ac:	dc7a      	bgt.n	80084a4 <_strtod_l+0x83c>
 80083ae:	9b07      	ldr	r3, [sp, #28]
 80083b0:	2b00      	cmp	r3, #0
 80083b2:	dd08      	ble.n	80083c6 <_strtod_l+0x75e>
 80083b4:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80083b6:	9906      	ldr	r1, [sp, #24]
 80083b8:	4658      	mov	r0, fp
 80083ba:	f001 fe61 	bl	800a080 <__pow5mult>
 80083be:	9006      	str	r0, [sp, #24]
 80083c0:	2800      	cmp	r0, #0
 80083c2:	f43f ae73 	beq.w	80080ac <_strtod_l+0x444>
 80083c6:	2c00      	cmp	r4, #0
 80083c8:	dd08      	ble.n	80083dc <_strtod_l+0x774>
 80083ca:	4622      	mov	r2, r4
 80083cc:	9906      	ldr	r1, [sp, #24]
 80083ce:	4658      	mov	r0, fp
 80083d0:	f001 fea4 	bl	800a11c <__lshift>
 80083d4:	9006      	str	r0, [sp, #24]
 80083d6:	2800      	cmp	r0, #0
 80083d8:	f43f ae68 	beq.w	80080ac <_strtod_l+0x444>
 80083dc:	2e00      	cmp	r6, #0
 80083de:	dd08      	ble.n	80083f2 <_strtod_l+0x78a>
 80083e0:	4632      	mov	r2, r6
 80083e2:	9904      	ldr	r1, [sp, #16]
 80083e4:	4658      	mov	r0, fp
 80083e6:	f001 fe99 	bl	800a11c <__lshift>
 80083ea:	9004      	str	r0, [sp, #16]
 80083ec:	2800      	cmp	r0, #0
 80083ee:	f43f ae5d 	beq.w	80080ac <_strtod_l+0x444>
 80083f2:	9a06      	ldr	r2, [sp, #24]
 80083f4:	991c      	ldr	r1, [sp, #112]	; 0x70
 80083f6:	4658      	mov	r0, fp
 80083f8:	f001 fefe 	bl	800a1f8 <__mdiff>
 80083fc:	4680      	mov	r8, r0
 80083fe:	2800      	cmp	r0, #0
 8008400:	f43f ae54 	beq.w	80080ac <_strtod_l+0x444>
 8008404:	2400      	movs	r4, #0
 8008406:	68c3      	ldr	r3, [r0, #12]
 8008408:	9904      	ldr	r1, [sp, #16]
 800840a:	60c4      	str	r4, [r0, #12]
 800840c:	930c      	str	r3, [sp, #48]	; 0x30
 800840e:	f001 fed9 	bl	800a1c4 <__mcmp>
 8008412:	42a0      	cmp	r0, r4
 8008414:	da54      	bge.n	80084c0 <_strtod_l+0x858>
 8008416:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008418:	b9f3      	cbnz	r3, 8008458 <_strtod_l+0x7f0>
 800841a:	f1b9 0f00 	cmp.w	r9, #0
 800841e:	d11b      	bne.n	8008458 <_strtod_l+0x7f0>
 8008420:	f3ca 0313 	ubfx	r3, sl, #0, #20
 8008424:	b9c3      	cbnz	r3, 8008458 <_strtod_l+0x7f0>
 8008426:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 800842a:	0d1b      	lsrs	r3, r3, #20
 800842c:	051b      	lsls	r3, r3, #20
 800842e:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8008432:	d911      	bls.n	8008458 <_strtod_l+0x7f0>
 8008434:	f8d8 3014 	ldr.w	r3, [r8, #20]
 8008438:	b91b      	cbnz	r3, 8008442 <_strtod_l+0x7da>
 800843a:	f8d8 3010 	ldr.w	r3, [r8, #16]
 800843e:	2b01      	cmp	r3, #1
 8008440:	dd0a      	ble.n	8008458 <_strtod_l+0x7f0>
 8008442:	4641      	mov	r1, r8
 8008444:	2201      	movs	r2, #1
 8008446:	4658      	mov	r0, fp
 8008448:	f001 fe68 	bl	800a11c <__lshift>
 800844c:	9904      	ldr	r1, [sp, #16]
 800844e:	4680      	mov	r8, r0
 8008450:	f001 feb8 	bl	800a1c4 <__mcmp>
 8008454:	2800      	cmp	r0, #0
 8008456:	dc68      	bgt.n	800852a <_strtod_l+0x8c2>
 8008458:	9b05      	ldr	r3, [sp, #20]
 800845a:	2b00      	cmp	r3, #0
 800845c:	d172      	bne.n	8008544 <_strtod_l+0x8dc>
 800845e:	e630      	b.n	80080c2 <_strtod_l+0x45a>
 8008460:	f018 0f01 	tst.w	r8, #1
 8008464:	d004      	beq.n	8008470 <_strtod_l+0x808>
 8008466:	e9d5 2300 	ldrd	r2, r3, [r5]
 800846a:	f7f8 f835 	bl	80004d8 <__aeabi_dmul>
 800846e:	2301      	movs	r3, #1
 8008470:	ea4f 0868 	mov.w	r8, r8, asr #1
 8008474:	3508      	adds	r5, #8
 8008476:	e6dc      	b.n	8008232 <_strtod_l+0x5ca>
 8008478:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800847c:	fa02 f303 	lsl.w	r3, r2, r3
 8008480:	ea03 0909 	and.w	r9, r3, r9
 8008484:	e6f6      	b.n	8008274 <_strtod_l+0x60c>
 8008486:	f1c5 457f 	rsb	r5, r5, #4278190080	; 0xff000000
 800848a:	f505 057f 	add.w	r5, r5, #16711680	; 0xff0000
 800848e:	f505 457b 	add.w	r5, r5, #64256	; 0xfb00
 8008492:	35e2      	adds	r5, #226	; 0xe2
 8008494:	fa07 f505 	lsl.w	r5, r7, r5
 8008498:	970f      	str	r7, [sp, #60]	; 0x3c
 800849a:	e75c      	b.n	8008356 <_strtod_l+0x6ee>
 800849c:	2301      	movs	r3, #1
 800849e:	2500      	movs	r5, #0
 80084a0:	930f      	str	r3, [sp, #60]	; 0x3c
 80084a2:	e758      	b.n	8008356 <_strtod_l+0x6ee>
 80084a4:	463a      	mov	r2, r7
 80084a6:	991c      	ldr	r1, [sp, #112]	; 0x70
 80084a8:	4658      	mov	r0, fp
 80084aa:	f001 fe37 	bl	800a11c <__lshift>
 80084ae:	901c      	str	r0, [sp, #112]	; 0x70
 80084b0:	2800      	cmp	r0, #0
 80084b2:	f47f af7c 	bne.w	80083ae <_strtod_l+0x746>
 80084b6:	e5f9      	b.n	80080ac <_strtod_l+0x444>
 80084b8:	0800b228 	.word	0x0800b228
 80084bc:	fffffc02 	.word	0xfffffc02
 80084c0:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 80084c4:	f040 8089 	bne.w	80085da <_strtod_l+0x972>
 80084c8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80084ca:	f3ca 0313 	ubfx	r3, sl, #0, #20
 80084ce:	b342      	cbz	r2, 8008522 <_strtod_l+0x8ba>
 80084d0:	4aaf      	ldr	r2, [pc, #700]	; (8008790 <_strtod_l+0xb28>)
 80084d2:	4293      	cmp	r3, r2
 80084d4:	d156      	bne.n	8008584 <_strtod_l+0x91c>
 80084d6:	9b05      	ldr	r3, [sp, #20]
 80084d8:	4648      	mov	r0, r9
 80084da:	b1eb      	cbz	r3, 8008518 <_strtod_l+0x8b0>
 80084dc:	4653      	mov	r3, sl
 80084de:	4aad      	ldr	r2, [pc, #692]	; (8008794 <_strtod_l+0xb2c>)
 80084e0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80084e4:	401a      	ands	r2, r3
 80084e6:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 80084ea:	d818      	bhi.n	800851e <_strtod_l+0x8b6>
 80084ec:	0d12      	lsrs	r2, r2, #20
 80084ee:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 80084f2:	fa01 f303 	lsl.w	r3, r1, r3
 80084f6:	4298      	cmp	r0, r3
 80084f8:	d144      	bne.n	8008584 <_strtod_l+0x91c>
 80084fa:	4ba7      	ldr	r3, [pc, #668]	; (8008798 <_strtod_l+0xb30>)
 80084fc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80084fe:	429a      	cmp	r2, r3
 8008500:	d102      	bne.n	8008508 <_strtod_l+0x8a0>
 8008502:	3001      	adds	r0, #1
 8008504:	f43f add2 	beq.w	80080ac <_strtod_l+0x444>
 8008508:	4ba2      	ldr	r3, [pc, #648]	; (8008794 <_strtod_l+0xb2c>)
 800850a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800850c:	f04f 0900 	mov.w	r9, #0
 8008510:	401a      	ands	r2, r3
 8008512:	f502 1a80 	add.w	sl, r2, #1048576	; 0x100000
 8008516:	e79f      	b.n	8008458 <_strtod_l+0x7f0>
 8008518:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800851c:	e7eb      	b.n	80084f6 <_strtod_l+0x88e>
 800851e:	460b      	mov	r3, r1
 8008520:	e7e9      	b.n	80084f6 <_strtod_l+0x88e>
 8008522:	bb7b      	cbnz	r3, 8008584 <_strtod_l+0x91c>
 8008524:	f1b9 0f00 	cmp.w	r9, #0
 8008528:	d12c      	bne.n	8008584 <_strtod_l+0x91c>
 800852a:	9905      	ldr	r1, [sp, #20]
 800852c:	4653      	mov	r3, sl
 800852e:	4a99      	ldr	r2, [pc, #612]	; (8008794 <_strtod_l+0xb2c>)
 8008530:	b1f1      	cbz	r1, 8008570 <_strtod_l+0x908>
 8008532:	ea02 010a 	and.w	r1, r2, sl
 8008536:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800853a:	dc19      	bgt.n	8008570 <_strtod_l+0x908>
 800853c:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8008540:	f77f ae51 	ble.w	80081e6 <_strtod_l+0x57e>
 8008544:	2300      	movs	r3, #0
 8008546:	4a95      	ldr	r2, [pc, #596]	; (800879c <_strtod_l+0xb34>)
 8008548:	4648      	mov	r0, r9
 800854a:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 800854e:	4651      	mov	r1, sl
 8008550:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8008554:	f7f7 ffc0 	bl	80004d8 <__aeabi_dmul>
 8008558:	4681      	mov	r9, r0
 800855a:	468a      	mov	sl, r1
 800855c:	2900      	cmp	r1, #0
 800855e:	f47f adb0 	bne.w	80080c2 <_strtod_l+0x45a>
 8008562:	2800      	cmp	r0, #0
 8008564:	f47f adad 	bne.w	80080c2 <_strtod_l+0x45a>
 8008568:	2322      	movs	r3, #34	; 0x22
 800856a:	f8cb 3000 	str.w	r3, [fp]
 800856e:	e5a8      	b.n	80080c2 <_strtod_l+0x45a>
 8008570:	4013      	ands	r3, r2
 8008572:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8008576:	ea6f 5a13 	mvn.w	sl, r3, lsr #20
 800857a:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
 800857e:	ea6f 5a0a 	mvn.w	sl, sl, lsl #20
 8008582:	e769      	b.n	8008458 <_strtod_l+0x7f0>
 8008584:	b19d      	cbz	r5, 80085ae <_strtod_l+0x946>
 8008586:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008588:	421d      	tst	r5, r3
 800858a:	f43f af65 	beq.w	8008458 <_strtod_l+0x7f0>
 800858e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008590:	9a05      	ldr	r2, [sp, #20]
 8008592:	4648      	mov	r0, r9
 8008594:	4651      	mov	r1, sl
 8008596:	b173      	cbz	r3, 80085b6 <_strtod_l+0x94e>
 8008598:	f7ff fb42 	bl	8007c20 <sulp>
 800859c:	4602      	mov	r2, r0
 800859e:	460b      	mov	r3, r1
 80085a0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80085a4:	f7f7 fde2 	bl	800016c <__adddf3>
 80085a8:	4681      	mov	r9, r0
 80085aa:	468a      	mov	sl, r1
 80085ac:	e754      	b.n	8008458 <_strtod_l+0x7f0>
 80085ae:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80085b0:	ea13 0f09 	tst.w	r3, r9
 80085b4:	e7e9      	b.n	800858a <_strtod_l+0x922>
 80085b6:	f7ff fb33 	bl	8007c20 <sulp>
 80085ba:	4602      	mov	r2, r0
 80085bc:	460b      	mov	r3, r1
 80085be:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80085c2:	f7f7 fdd1 	bl	8000168 <__aeabi_dsub>
 80085c6:	2200      	movs	r2, #0
 80085c8:	2300      	movs	r3, #0
 80085ca:	4681      	mov	r9, r0
 80085cc:	468a      	mov	sl, r1
 80085ce:	f7f8 f9eb 	bl	80009a8 <__aeabi_dcmpeq>
 80085d2:	2800      	cmp	r0, #0
 80085d4:	f47f ae07 	bne.w	80081e6 <_strtod_l+0x57e>
 80085d8:	e73e      	b.n	8008458 <_strtod_l+0x7f0>
 80085da:	9904      	ldr	r1, [sp, #16]
 80085dc:	4640      	mov	r0, r8
 80085de:	f001 ff2e 	bl	800a43e <__ratio>
 80085e2:	2200      	movs	r2, #0
 80085e4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80085e8:	4606      	mov	r6, r0
 80085ea:	460f      	mov	r7, r1
 80085ec:	f7f8 f9f0 	bl	80009d0 <__aeabi_dcmple>
 80085f0:	2800      	cmp	r0, #0
 80085f2:	d075      	beq.n	80086e0 <_strtod_l+0xa78>
 80085f4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80085f6:	2b00      	cmp	r3, #0
 80085f8:	d047      	beq.n	800868a <_strtod_l+0xa22>
 80085fa:	2600      	movs	r6, #0
 80085fc:	4f68      	ldr	r7, [pc, #416]	; (80087a0 <_strtod_l+0xb38>)
 80085fe:	4d68      	ldr	r5, [pc, #416]	; (80087a0 <_strtod_l+0xb38>)
 8008600:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008602:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008606:	0d1b      	lsrs	r3, r3, #20
 8008608:	051b      	lsls	r3, r3, #20
 800860a:	930f      	str	r3, [sp, #60]	; 0x3c
 800860c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800860e:	4b65      	ldr	r3, [pc, #404]	; (80087a4 <_strtod_l+0xb3c>)
 8008610:	429a      	cmp	r2, r3
 8008612:	f040 80cf 	bne.w	80087b4 <_strtod_l+0xb4c>
 8008616:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800861a:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 800861e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008620:	4648      	mov	r0, r9
 8008622:	f1a3 7a54 	sub.w	sl, r3, #55574528	; 0x3500000
 8008626:	4651      	mov	r1, sl
 8008628:	f001 fe44 	bl	800a2b4 <__ulp>
 800862c:	4602      	mov	r2, r0
 800862e:	460b      	mov	r3, r1
 8008630:	4630      	mov	r0, r6
 8008632:	4639      	mov	r1, r7
 8008634:	f7f7 ff50 	bl	80004d8 <__aeabi_dmul>
 8008638:	464a      	mov	r2, r9
 800863a:	4653      	mov	r3, sl
 800863c:	f7f7 fd96 	bl	800016c <__adddf3>
 8008640:	460b      	mov	r3, r1
 8008642:	4954      	ldr	r1, [pc, #336]	; (8008794 <_strtod_l+0xb2c>)
 8008644:	4a58      	ldr	r2, [pc, #352]	; (80087a8 <_strtod_l+0xb40>)
 8008646:	4019      	ands	r1, r3
 8008648:	4291      	cmp	r1, r2
 800864a:	4681      	mov	r9, r0
 800864c:	d95e      	bls.n	800870c <_strtod_l+0xaa4>
 800864e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008650:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8008654:	4293      	cmp	r3, r2
 8008656:	d103      	bne.n	8008660 <_strtod_l+0x9f8>
 8008658:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800865a:	3301      	adds	r3, #1
 800865c:	f43f ad26 	beq.w	80080ac <_strtod_l+0x444>
 8008660:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
 8008664:	f8df a130 	ldr.w	sl, [pc, #304]	; 8008798 <_strtod_l+0xb30>
 8008668:	991c      	ldr	r1, [sp, #112]	; 0x70
 800866a:	4658      	mov	r0, fp
 800866c:	f001 fb8c 	bl	8009d88 <_Bfree>
 8008670:	9906      	ldr	r1, [sp, #24]
 8008672:	4658      	mov	r0, fp
 8008674:	f001 fb88 	bl	8009d88 <_Bfree>
 8008678:	9904      	ldr	r1, [sp, #16]
 800867a:	4658      	mov	r0, fp
 800867c:	f001 fb84 	bl	8009d88 <_Bfree>
 8008680:	4641      	mov	r1, r8
 8008682:	4658      	mov	r0, fp
 8008684:	f001 fb80 	bl	8009d88 <_Bfree>
 8008688:	e617      	b.n	80082ba <_strtod_l+0x652>
 800868a:	f1b9 0f00 	cmp.w	r9, #0
 800868e:	d119      	bne.n	80086c4 <_strtod_l+0xa5c>
 8008690:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008692:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008696:	b9e3      	cbnz	r3, 80086d2 <_strtod_l+0xa6a>
 8008698:	2200      	movs	r2, #0
 800869a:	4b41      	ldr	r3, [pc, #260]	; (80087a0 <_strtod_l+0xb38>)
 800869c:	4630      	mov	r0, r6
 800869e:	4639      	mov	r1, r7
 80086a0:	f7f8 f98c 	bl	80009bc <__aeabi_dcmplt>
 80086a4:	b9c8      	cbnz	r0, 80086da <_strtod_l+0xa72>
 80086a6:	2200      	movs	r2, #0
 80086a8:	4b40      	ldr	r3, [pc, #256]	; (80087ac <_strtod_l+0xb44>)
 80086aa:	4630      	mov	r0, r6
 80086ac:	4639      	mov	r1, r7
 80086ae:	f7f7 ff13 	bl	80004d8 <__aeabi_dmul>
 80086b2:	4604      	mov	r4, r0
 80086b4:	460d      	mov	r5, r1
 80086b6:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 80086ba:	9418      	str	r4, [sp, #96]	; 0x60
 80086bc:	9319      	str	r3, [sp, #100]	; 0x64
 80086be:	e9dd 6718 	ldrd	r6, r7, [sp, #96]	; 0x60
 80086c2:	e79d      	b.n	8008600 <_strtod_l+0x998>
 80086c4:	f1b9 0f01 	cmp.w	r9, #1
 80086c8:	d103      	bne.n	80086d2 <_strtod_l+0xa6a>
 80086ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80086cc:	2b00      	cmp	r3, #0
 80086ce:	f43f ad8a 	beq.w	80081e6 <_strtod_l+0x57e>
 80086d2:	2600      	movs	r6, #0
 80086d4:	4f36      	ldr	r7, [pc, #216]	; (80087b0 <_strtod_l+0xb48>)
 80086d6:	2400      	movs	r4, #0
 80086d8:	e791      	b.n	80085fe <_strtod_l+0x996>
 80086da:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 80086dc:	4d33      	ldr	r5, [pc, #204]	; (80087ac <_strtod_l+0xb44>)
 80086de:	e7ea      	b.n	80086b6 <_strtod_l+0xa4e>
 80086e0:	4b32      	ldr	r3, [pc, #200]	; (80087ac <_strtod_l+0xb44>)
 80086e2:	2200      	movs	r2, #0
 80086e4:	4630      	mov	r0, r6
 80086e6:	4639      	mov	r1, r7
 80086e8:	f7f7 fef6 	bl	80004d8 <__aeabi_dmul>
 80086ec:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80086ee:	4604      	mov	r4, r0
 80086f0:	460d      	mov	r5, r1
 80086f2:	b933      	cbnz	r3, 8008702 <_strtod_l+0xa9a>
 80086f4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80086f8:	9010      	str	r0, [sp, #64]	; 0x40
 80086fa:	9311      	str	r3, [sp, #68]	; 0x44
 80086fc:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8008700:	e77e      	b.n	8008600 <_strtod_l+0x998>
 8008702:	4602      	mov	r2, r0
 8008704:	460b      	mov	r3, r1
 8008706:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 800870a:	e7f7      	b.n	80086fc <_strtod_l+0xa94>
 800870c:	f103 7a54 	add.w	sl, r3, #55574528	; 0x3500000
 8008710:	9b05      	ldr	r3, [sp, #20]
 8008712:	2b00      	cmp	r3, #0
 8008714:	d1a8      	bne.n	8008668 <_strtod_l+0xa00>
 8008716:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 800871a:	0d1b      	lsrs	r3, r3, #20
 800871c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800871e:	051b      	lsls	r3, r3, #20
 8008720:	429a      	cmp	r2, r3
 8008722:	4656      	mov	r6, sl
 8008724:	d1a0      	bne.n	8008668 <_strtod_l+0xa00>
 8008726:	4629      	mov	r1, r5
 8008728:	4620      	mov	r0, r4
 800872a:	f7f8 f985 	bl	8000a38 <__aeabi_d2iz>
 800872e:	f7f7 fe69 	bl	8000404 <__aeabi_i2d>
 8008732:	460b      	mov	r3, r1
 8008734:	4602      	mov	r2, r0
 8008736:	4629      	mov	r1, r5
 8008738:	4620      	mov	r0, r4
 800873a:	f7f7 fd15 	bl	8000168 <__aeabi_dsub>
 800873e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008740:	4604      	mov	r4, r0
 8008742:	460d      	mov	r5, r1
 8008744:	b933      	cbnz	r3, 8008754 <_strtod_l+0xaec>
 8008746:	f1b9 0f00 	cmp.w	r9, #0
 800874a:	d103      	bne.n	8008754 <_strtod_l+0xaec>
 800874c:	f3ca 0613 	ubfx	r6, sl, #0, #20
 8008750:	2e00      	cmp	r6, #0
 8008752:	d06a      	beq.n	800882a <_strtod_l+0xbc2>
 8008754:	a30a      	add	r3, pc, #40	; (adr r3, 8008780 <_strtod_l+0xb18>)
 8008756:	e9d3 2300 	ldrd	r2, r3, [r3]
 800875a:	4620      	mov	r0, r4
 800875c:	4629      	mov	r1, r5
 800875e:	f7f8 f92d 	bl	80009bc <__aeabi_dcmplt>
 8008762:	2800      	cmp	r0, #0
 8008764:	f47f acad 	bne.w	80080c2 <_strtod_l+0x45a>
 8008768:	a307      	add	r3, pc, #28	; (adr r3, 8008788 <_strtod_l+0xb20>)
 800876a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800876e:	4620      	mov	r0, r4
 8008770:	4629      	mov	r1, r5
 8008772:	f7f8 f941 	bl	80009f8 <__aeabi_dcmpgt>
 8008776:	2800      	cmp	r0, #0
 8008778:	f43f af76 	beq.w	8008668 <_strtod_l+0xa00>
 800877c:	e4a1      	b.n	80080c2 <_strtod_l+0x45a>
 800877e:	bf00      	nop
 8008780:	94a03595 	.word	0x94a03595
 8008784:	3fdfffff 	.word	0x3fdfffff
 8008788:	35afe535 	.word	0x35afe535
 800878c:	3fe00000 	.word	0x3fe00000
 8008790:	000fffff 	.word	0x000fffff
 8008794:	7ff00000 	.word	0x7ff00000
 8008798:	7fefffff 	.word	0x7fefffff
 800879c:	39500000 	.word	0x39500000
 80087a0:	3ff00000 	.word	0x3ff00000
 80087a4:	7fe00000 	.word	0x7fe00000
 80087a8:	7c9fffff 	.word	0x7c9fffff
 80087ac:	3fe00000 	.word	0x3fe00000
 80087b0:	bff00000 	.word	0xbff00000
 80087b4:	9b05      	ldr	r3, [sp, #20]
 80087b6:	b313      	cbz	r3, 80087fe <_strtod_l+0xb96>
 80087b8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80087ba:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80087be:	d81e      	bhi.n	80087fe <_strtod_l+0xb96>
 80087c0:	a325      	add	r3, pc, #148	; (adr r3, 8008858 <_strtod_l+0xbf0>)
 80087c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087c6:	4620      	mov	r0, r4
 80087c8:	4629      	mov	r1, r5
 80087ca:	f7f8 f901 	bl	80009d0 <__aeabi_dcmple>
 80087ce:	b190      	cbz	r0, 80087f6 <_strtod_l+0xb8e>
 80087d0:	4629      	mov	r1, r5
 80087d2:	4620      	mov	r0, r4
 80087d4:	f7f8 f958 	bl	8000a88 <__aeabi_d2uiz>
 80087d8:	2800      	cmp	r0, #0
 80087da:	bf08      	it	eq
 80087dc:	2001      	moveq	r0, #1
 80087de:	f7f7 fe01 	bl	80003e4 <__aeabi_ui2d>
 80087e2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80087e4:	4604      	mov	r4, r0
 80087e6:	460d      	mov	r5, r1
 80087e8:	b9d3      	cbnz	r3, 8008820 <_strtod_l+0xbb8>
 80087ea:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80087ee:	9012      	str	r0, [sp, #72]	; 0x48
 80087f0:	9313      	str	r3, [sp, #76]	; 0x4c
 80087f2:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
 80087f6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80087f8:	f107 63d6 	add.w	r3, r7, #112197632	; 0x6b00000
 80087fc:	1a9f      	subs	r7, r3, r2
 80087fe:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8008802:	f001 fd57 	bl	800a2b4 <__ulp>
 8008806:	4602      	mov	r2, r0
 8008808:	460b      	mov	r3, r1
 800880a:	4630      	mov	r0, r6
 800880c:	4639      	mov	r1, r7
 800880e:	f7f7 fe63 	bl	80004d8 <__aeabi_dmul>
 8008812:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8008816:	f7f7 fca9 	bl	800016c <__adddf3>
 800881a:	4681      	mov	r9, r0
 800881c:	468a      	mov	sl, r1
 800881e:	e777      	b.n	8008710 <_strtod_l+0xaa8>
 8008820:	4602      	mov	r2, r0
 8008822:	460b      	mov	r3, r1
 8008824:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
 8008828:	e7e3      	b.n	80087f2 <_strtod_l+0xb8a>
 800882a:	a30d      	add	r3, pc, #52	; (adr r3, 8008860 <_strtod_l+0xbf8>)
 800882c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008830:	f7f8 f8c4 	bl	80009bc <__aeabi_dcmplt>
 8008834:	e79f      	b.n	8008776 <_strtod_l+0xb0e>
 8008836:	2300      	movs	r3, #0
 8008838:	930d      	str	r3, [sp, #52]	; 0x34
 800883a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800883c:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800883e:	6013      	str	r3, [r2, #0]
 8008840:	f7ff ba55 	b.w	8007cee <_strtod_l+0x86>
 8008844:	2b65      	cmp	r3, #101	; 0x65
 8008846:	f04f 0200 	mov.w	r2, #0
 800884a:	f43f ab42 	beq.w	8007ed2 <_strtod_l+0x26a>
 800884e:	2101      	movs	r1, #1
 8008850:	4614      	mov	r4, r2
 8008852:	9105      	str	r1, [sp, #20]
 8008854:	f7ff babf 	b.w	8007dd6 <_strtod_l+0x16e>
 8008858:	ffc00000 	.word	0xffc00000
 800885c:	41dfffff 	.word	0x41dfffff
 8008860:	94a03595 	.word	0x94a03595
 8008864:	3fcfffff 	.word	0x3fcfffff

08008868 <_strtod_r>:
 8008868:	4b05      	ldr	r3, [pc, #20]	; (8008880 <_strtod_r+0x18>)
 800886a:	b410      	push	{r4}
 800886c:	681b      	ldr	r3, [r3, #0]
 800886e:	4c05      	ldr	r4, [pc, #20]	; (8008884 <_strtod_r+0x1c>)
 8008870:	6a1b      	ldr	r3, [r3, #32]
 8008872:	2b00      	cmp	r3, #0
 8008874:	bf08      	it	eq
 8008876:	4623      	moveq	r3, r4
 8008878:	bc10      	pop	{r4}
 800887a:	f7ff b9f5 	b.w	8007c68 <_strtod_l>
 800887e:	bf00      	nop
 8008880:	20000024 	.word	0x20000024
 8008884:	20000088 	.word	0x20000088

08008888 <_strtol_l.isra.0>:
 8008888:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800888c:	4680      	mov	r8, r0
 800888e:	4689      	mov	r9, r1
 8008890:	4692      	mov	sl, r2
 8008892:	461e      	mov	r6, r3
 8008894:	460f      	mov	r7, r1
 8008896:	463d      	mov	r5, r7
 8008898:	9808      	ldr	r0, [sp, #32]
 800889a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800889e:	f001 fa03 	bl	8009ca8 <__locale_ctype_ptr_l>
 80088a2:	4420      	add	r0, r4
 80088a4:	7843      	ldrb	r3, [r0, #1]
 80088a6:	f013 0308 	ands.w	r3, r3, #8
 80088aa:	d132      	bne.n	8008912 <_strtol_l.isra.0+0x8a>
 80088ac:	2c2d      	cmp	r4, #45	; 0x2d
 80088ae:	d132      	bne.n	8008916 <_strtol_l.isra.0+0x8e>
 80088b0:	2201      	movs	r2, #1
 80088b2:	787c      	ldrb	r4, [r7, #1]
 80088b4:	1cbd      	adds	r5, r7, #2
 80088b6:	2e00      	cmp	r6, #0
 80088b8:	d05d      	beq.n	8008976 <_strtol_l.isra.0+0xee>
 80088ba:	2e10      	cmp	r6, #16
 80088bc:	d109      	bne.n	80088d2 <_strtol_l.isra.0+0x4a>
 80088be:	2c30      	cmp	r4, #48	; 0x30
 80088c0:	d107      	bne.n	80088d2 <_strtol_l.isra.0+0x4a>
 80088c2:	782b      	ldrb	r3, [r5, #0]
 80088c4:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80088c8:	2b58      	cmp	r3, #88	; 0x58
 80088ca:	d14f      	bne.n	800896c <_strtol_l.isra.0+0xe4>
 80088cc:	2610      	movs	r6, #16
 80088ce:	786c      	ldrb	r4, [r5, #1]
 80088d0:	3502      	adds	r5, #2
 80088d2:	2a00      	cmp	r2, #0
 80088d4:	bf14      	ite	ne
 80088d6:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 80088da:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 80088de:	2700      	movs	r7, #0
 80088e0:	fbb1 fcf6 	udiv	ip, r1, r6
 80088e4:	4638      	mov	r0, r7
 80088e6:	fb06 1e1c 	mls	lr, r6, ip, r1
 80088ea:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 80088ee:	2b09      	cmp	r3, #9
 80088f0:	d817      	bhi.n	8008922 <_strtol_l.isra.0+0x9a>
 80088f2:	461c      	mov	r4, r3
 80088f4:	42a6      	cmp	r6, r4
 80088f6:	dd23      	ble.n	8008940 <_strtol_l.isra.0+0xb8>
 80088f8:	1c7b      	adds	r3, r7, #1
 80088fa:	d007      	beq.n	800890c <_strtol_l.isra.0+0x84>
 80088fc:	4584      	cmp	ip, r0
 80088fe:	d31c      	bcc.n	800893a <_strtol_l.isra.0+0xb2>
 8008900:	d101      	bne.n	8008906 <_strtol_l.isra.0+0x7e>
 8008902:	45a6      	cmp	lr, r4
 8008904:	db19      	blt.n	800893a <_strtol_l.isra.0+0xb2>
 8008906:	2701      	movs	r7, #1
 8008908:	fb00 4006 	mla	r0, r0, r6, r4
 800890c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008910:	e7eb      	b.n	80088ea <_strtol_l.isra.0+0x62>
 8008912:	462f      	mov	r7, r5
 8008914:	e7bf      	b.n	8008896 <_strtol_l.isra.0+0xe>
 8008916:	2c2b      	cmp	r4, #43	; 0x2b
 8008918:	bf04      	itt	eq
 800891a:	1cbd      	addeq	r5, r7, #2
 800891c:	787c      	ldrbeq	r4, [r7, #1]
 800891e:	461a      	mov	r2, r3
 8008920:	e7c9      	b.n	80088b6 <_strtol_l.isra.0+0x2e>
 8008922:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 8008926:	2b19      	cmp	r3, #25
 8008928:	d801      	bhi.n	800892e <_strtol_l.isra.0+0xa6>
 800892a:	3c37      	subs	r4, #55	; 0x37
 800892c:	e7e2      	b.n	80088f4 <_strtol_l.isra.0+0x6c>
 800892e:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 8008932:	2b19      	cmp	r3, #25
 8008934:	d804      	bhi.n	8008940 <_strtol_l.isra.0+0xb8>
 8008936:	3c57      	subs	r4, #87	; 0x57
 8008938:	e7dc      	b.n	80088f4 <_strtol_l.isra.0+0x6c>
 800893a:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800893e:	e7e5      	b.n	800890c <_strtol_l.isra.0+0x84>
 8008940:	1c7b      	adds	r3, r7, #1
 8008942:	d108      	bne.n	8008956 <_strtol_l.isra.0+0xce>
 8008944:	2322      	movs	r3, #34	; 0x22
 8008946:	4608      	mov	r0, r1
 8008948:	f8c8 3000 	str.w	r3, [r8]
 800894c:	f1ba 0f00 	cmp.w	sl, #0
 8008950:	d107      	bne.n	8008962 <_strtol_l.isra.0+0xda>
 8008952:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008956:	b102      	cbz	r2, 800895a <_strtol_l.isra.0+0xd2>
 8008958:	4240      	negs	r0, r0
 800895a:	f1ba 0f00 	cmp.w	sl, #0
 800895e:	d0f8      	beq.n	8008952 <_strtol_l.isra.0+0xca>
 8008960:	b10f      	cbz	r7, 8008966 <_strtol_l.isra.0+0xde>
 8008962:	f105 39ff 	add.w	r9, r5, #4294967295	; 0xffffffff
 8008966:	f8ca 9000 	str.w	r9, [sl]
 800896a:	e7f2      	b.n	8008952 <_strtol_l.isra.0+0xca>
 800896c:	2430      	movs	r4, #48	; 0x30
 800896e:	2e00      	cmp	r6, #0
 8008970:	d1af      	bne.n	80088d2 <_strtol_l.isra.0+0x4a>
 8008972:	2608      	movs	r6, #8
 8008974:	e7ad      	b.n	80088d2 <_strtol_l.isra.0+0x4a>
 8008976:	2c30      	cmp	r4, #48	; 0x30
 8008978:	d0a3      	beq.n	80088c2 <_strtol_l.isra.0+0x3a>
 800897a:	260a      	movs	r6, #10
 800897c:	e7a9      	b.n	80088d2 <_strtol_l.isra.0+0x4a>
	...

08008980 <_strtol_r>:
 8008980:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008982:	4c06      	ldr	r4, [pc, #24]	; (800899c <_strtol_r+0x1c>)
 8008984:	4d06      	ldr	r5, [pc, #24]	; (80089a0 <_strtol_r+0x20>)
 8008986:	6824      	ldr	r4, [r4, #0]
 8008988:	6a24      	ldr	r4, [r4, #32]
 800898a:	2c00      	cmp	r4, #0
 800898c:	bf08      	it	eq
 800898e:	462c      	moveq	r4, r5
 8008990:	9400      	str	r4, [sp, #0]
 8008992:	f7ff ff79 	bl	8008888 <_strtol_l.isra.0>
 8008996:	b003      	add	sp, #12
 8008998:	bd30      	pop	{r4, r5, pc}
 800899a:	bf00      	nop
 800899c:	20000024 	.word	0x20000024
 80089a0:	20000088 	.word	0x20000088

080089a4 <strtol>:
 80089a4:	4b08      	ldr	r3, [pc, #32]	; (80089c8 <strtol+0x24>)
 80089a6:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80089a8:	681c      	ldr	r4, [r3, #0]
 80089aa:	4d08      	ldr	r5, [pc, #32]	; (80089cc <strtol+0x28>)
 80089ac:	6a23      	ldr	r3, [r4, #32]
 80089ae:	2b00      	cmp	r3, #0
 80089b0:	bf08      	it	eq
 80089b2:	462b      	moveq	r3, r5
 80089b4:	9300      	str	r3, [sp, #0]
 80089b6:	4613      	mov	r3, r2
 80089b8:	460a      	mov	r2, r1
 80089ba:	4601      	mov	r1, r0
 80089bc:	4620      	mov	r0, r4
 80089be:	f7ff ff63 	bl	8008888 <_strtol_l.isra.0>
 80089c2:	b003      	add	sp, #12
 80089c4:	bd30      	pop	{r4, r5, pc}
 80089c6:	bf00      	nop
 80089c8:	20000024 	.word	0x20000024
 80089cc:	20000088 	.word	0x20000088

080089d0 <quorem>:
 80089d0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80089d4:	6903      	ldr	r3, [r0, #16]
 80089d6:	690c      	ldr	r4, [r1, #16]
 80089d8:	4680      	mov	r8, r0
 80089da:	42a3      	cmp	r3, r4
 80089dc:	f2c0 8084 	blt.w	8008ae8 <quorem+0x118>
 80089e0:	3c01      	subs	r4, #1
 80089e2:	f101 0714 	add.w	r7, r1, #20
 80089e6:	f100 0614 	add.w	r6, r0, #20
 80089ea:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 80089ee:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 80089f2:	3501      	adds	r5, #1
 80089f4:	fbb0 f5f5 	udiv	r5, r0, r5
 80089f8:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 80089fc:	eb06 030c 	add.w	r3, r6, ip
 8008a00:	eb07 090c 	add.w	r9, r7, ip
 8008a04:	9301      	str	r3, [sp, #4]
 8008a06:	b39d      	cbz	r5, 8008a70 <quorem+0xa0>
 8008a08:	f04f 0a00 	mov.w	sl, #0
 8008a0c:	4638      	mov	r0, r7
 8008a0e:	46b6      	mov	lr, r6
 8008a10:	46d3      	mov	fp, sl
 8008a12:	f850 2b04 	ldr.w	r2, [r0], #4
 8008a16:	b293      	uxth	r3, r2
 8008a18:	fb05 a303 	mla	r3, r5, r3, sl
 8008a1c:	0c12      	lsrs	r2, r2, #16
 8008a1e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008a22:	fb05 a202 	mla	r2, r5, r2, sl
 8008a26:	b29b      	uxth	r3, r3
 8008a28:	ebab 0303 	sub.w	r3, fp, r3
 8008a2c:	f8de b000 	ldr.w	fp, [lr]
 8008a30:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8008a34:	fa1f fb8b 	uxth.w	fp, fp
 8008a38:	445b      	add	r3, fp
 8008a3a:	fa1f fb82 	uxth.w	fp, r2
 8008a3e:	f8de 2000 	ldr.w	r2, [lr]
 8008a42:	4581      	cmp	r9, r0
 8008a44:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8008a48:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008a4c:	b29b      	uxth	r3, r3
 8008a4e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008a52:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8008a56:	f84e 3b04 	str.w	r3, [lr], #4
 8008a5a:	d2da      	bcs.n	8008a12 <quorem+0x42>
 8008a5c:	f856 300c 	ldr.w	r3, [r6, ip]
 8008a60:	b933      	cbnz	r3, 8008a70 <quorem+0xa0>
 8008a62:	9b01      	ldr	r3, [sp, #4]
 8008a64:	3b04      	subs	r3, #4
 8008a66:	429e      	cmp	r6, r3
 8008a68:	461a      	mov	r2, r3
 8008a6a:	d331      	bcc.n	8008ad0 <quorem+0x100>
 8008a6c:	f8c8 4010 	str.w	r4, [r8, #16]
 8008a70:	4640      	mov	r0, r8
 8008a72:	f001 fba7 	bl	800a1c4 <__mcmp>
 8008a76:	2800      	cmp	r0, #0
 8008a78:	db26      	blt.n	8008ac8 <quorem+0xf8>
 8008a7a:	4630      	mov	r0, r6
 8008a7c:	f04f 0c00 	mov.w	ip, #0
 8008a80:	3501      	adds	r5, #1
 8008a82:	f857 1b04 	ldr.w	r1, [r7], #4
 8008a86:	f8d0 e000 	ldr.w	lr, [r0]
 8008a8a:	b28b      	uxth	r3, r1
 8008a8c:	ebac 0303 	sub.w	r3, ip, r3
 8008a90:	fa1f f28e 	uxth.w	r2, lr
 8008a94:	4413      	add	r3, r2
 8008a96:	0c0a      	lsrs	r2, r1, #16
 8008a98:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8008a9c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008aa0:	b29b      	uxth	r3, r3
 8008aa2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008aa6:	45b9      	cmp	r9, r7
 8008aa8:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8008aac:	f840 3b04 	str.w	r3, [r0], #4
 8008ab0:	d2e7      	bcs.n	8008a82 <quorem+0xb2>
 8008ab2:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8008ab6:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8008aba:	b92a      	cbnz	r2, 8008ac8 <quorem+0xf8>
 8008abc:	3b04      	subs	r3, #4
 8008abe:	429e      	cmp	r6, r3
 8008ac0:	461a      	mov	r2, r3
 8008ac2:	d30b      	bcc.n	8008adc <quorem+0x10c>
 8008ac4:	f8c8 4010 	str.w	r4, [r8, #16]
 8008ac8:	4628      	mov	r0, r5
 8008aca:	b003      	add	sp, #12
 8008acc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008ad0:	6812      	ldr	r2, [r2, #0]
 8008ad2:	3b04      	subs	r3, #4
 8008ad4:	2a00      	cmp	r2, #0
 8008ad6:	d1c9      	bne.n	8008a6c <quorem+0x9c>
 8008ad8:	3c01      	subs	r4, #1
 8008ada:	e7c4      	b.n	8008a66 <quorem+0x96>
 8008adc:	6812      	ldr	r2, [r2, #0]
 8008ade:	3b04      	subs	r3, #4
 8008ae0:	2a00      	cmp	r2, #0
 8008ae2:	d1ef      	bne.n	8008ac4 <quorem+0xf4>
 8008ae4:	3c01      	subs	r4, #1
 8008ae6:	e7ea      	b.n	8008abe <quorem+0xee>
 8008ae8:	2000      	movs	r0, #0
 8008aea:	e7ee      	b.n	8008aca <quorem+0xfa>
 8008aec:	0000      	movs	r0, r0
	...

08008af0 <_dtoa_r>:
 8008af0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008af4:	4616      	mov	r6, r2
 8008af6:	461f      	mov	r7, r3
 8008af8:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8008afa:	b095      	sub	sp, #84	; 0x54
 8008afc:	4604      	mov	r4, r0
 8008afe:	f8dd 8084 	ldr.w	r8, [sp, #132]	; 0x84
 8008b02:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8008b06:	b93d      	cbnz	r5, 8008b18 <_dtoa_r+0x28>
 8008b08:	2010      	movs	r0, #16
 8008b0a:	f001 f8e1 	bl	8009cd0 <malloc>
 8008b0e:	6260      	str	r0, [r4, #36]	; 0x24
 8008b10:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8008b14:	6005      	str	r5, [r0, #0]
 8008b16:	60c5      	str	r5, [r0, #12]
 8008b18:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008b1a:	6819      	ldr	r1, [r3, #0]
 8008b1c:	b151      	cbz	r1, 8008b34 <_dtoa_r+0x44>
 8008b1e:	685a      	ldr	r2, [r3, #4]
 8008b20:	2301      	movs	r3, #1
 8008b22:	4093      	lsls	r3, r2
 8008b24:	604a      	str	r2, [r1, #4]
 8008b26:	608b      	str	r3, [r1, #8]
 8008b28:	4620      	mov	r0, r4
 8008b2a:	f001 f92d 	bl	8009d88 <_Bfree>
 8008b2e:	2200      	movs	r2, #0
 8008b30:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008b32:	601a      	str	r2, [r3, #0]
 8008b34:	1e3b      	subs	r3, r7, #0
 8008b36:	bfaf      	iteee	ge
 8008b38:	2300      	movge	r3, #0
 8008b3a:	2201      	movlt	r2, #1
 8008b3c:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8008b40:	9303      	strlt	r3, [sp, #12]
 8008b42:	bfac      	ite	ge
 8008b44:	f8c8 3000 	strge.w	r3, [r8]
 8008b48:	f8c8 2000 	strlt.w	r2, [r8]
 8008b4c:	4bae      	ldr	r3, [pc, #696]	; (8008e08 <_dtoa_r+0x318>)
 8008b4e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8008b52:	ea33 0308 	bics.w	r3, r3, r8
 8008b56:	d11b      	bne.n	8008b90 <_dtoa_r+0xa0>
 8008b58:	f242 730f 	movw	r3, #9999	; 0x270f
 8008b5c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8008b5e:	6013      	str	r3, [r2, #0]
 8008b60:	9b02      	ldr	r3, [sp, #8]
 8008b62:	b923      	cbnz	r3, 8008b6e <_dtoa_r+0x7e>
 8008b64:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8008b68:	2800      	cmp	r0, #0
 8008b6a:	f000 8545 	beq.w	80095f8 <_dtoa_r+0xb08>
 8008b6e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008b70:	b953      	cbnz	r3, 8008b88 <_dtoa_r+0x98>
 8008b72:	4ba6      	ldr	r3, [pc, #664]	; (8008e0c <_dtoa_r+0x31c>)
 8008b74:	e021      	b.n	8008bba <_dtoa_r+0xca>
 8008b76:	4ba6      	ldr	r3, [pc, #664]	; (8008e10 <_dtoa_r+0x320>)
 8008b78:	9306      	str	r3, [sp, #24]
 8008b7a:	3308      	adds	r3, #8
 8008b7c:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8008b7e:	6013      	str	r3, [r2, #0]
 8008b80:	9806      	ldr	r0, [sp, #24]
 8008b82:	b015      	add	sp, #84	; 0x54
 8008b84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008b88:	4ba0      	ldr	r3, [pc, #640]	; (8008e0c <_dtoa_r+0x31c>)
 8008b8a:	9306      	str	r3, [sp, #24]
 8008b8c:	3303      	adds	r3, #3
 8008b8e:	e7f5      	b.n	8008b7c <_dtoa_r+0x8c>
 8008b90:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8008b94:	2200      	movs	r2, #0
 8008b96:	2300      	movs	r3, #0
 8008b98:	4630      	mov	r0, r6
 8008b9a:	4639      	mov	r1, r7
 8008b9c:	f7f7 ff04 	bl	80009a8 <__aeabi_dcmpeq>
 8008ba0:	4682      	mov	sl, r0
 8008ba2:	b160      	cbz	r0, 8008bbe <_dtoa_r+0xce>
 8008ba4:	2301      	movs	r3, #1
 8008ba6:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8008ba8:	6013      	str	r3, [r2, #0]
 8008baa:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008bac:	2b00      	cmp	r3, #0
 8008bae:	f000 8520 	beq.w	80095f2 <_dtoa_r+0xb02>
 8008bb2:	4b98      	ldr	r3, [pc, #608]	; (8008e14 <_dtoa_r+0x324>)
 8008bb4:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8008bb6:	6013      	str	r3, [r2, #0]
 8008bb8:	3b01      	subs	r3, #1
 8008bba:	9306      	str	r3, [sp, #24]
 8008bbc:	e7e0      	b.n	8008b80 <_dtoa_r+0x90>
 8008bbe:	ab12      	add	r3, sp, #72	; 0x48
 8008bc0:	9301      	str	r3, [sp, #4]
 8008bc2:	ab13      	add	r3, sp, #76	; 0x4c
 8008bc4:	9300      	str	r3, [sp, #0]
 8008bc6:	4632      	mov	r2, r6
 8008bc8:	463b      	mov	r3, r7
 8008bca:	4620      	mov	r0, r4
 8008bcc:	f001 fbe8 	bl	800a3a0 <__d2b>
 8008bd0:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8008bd4:	4683      	mov	fp, r0
 8008bd6:	2d00      	cmp	r5, #0
 8008bd8:	d07d      	beq.n	8008cd6 <_dtoa_r+0x1e6>
 8008bda:	46b0      	mov	r8, r6
 8008bdc:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8008be0:	f043 597f 	orr.w	r9, r3, #1069547520	; 0x3fc00000
 8008be4:	f449 1940 	orr.w	r9, r9, #3145728	; 0x300000
 8008be8:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8008bec:	f8cd a040 	str.w	sl, [sp, #64]	; 0x40
 8008bf0:	2200      	movs	r2, #0
 8008bf2:	4b89      	ldr	r3, [pc, #548]	; (8008e18 <_dtoa_r+0x328>)
 8008bf4:	4640      	mov	r0, r8
 8008bf6:	4649      	mov	r1, r9
 8008bf8:	f7f7 fab6 	bl	8000168 <__aeabi_dsub>
 8008bfc:	a37c      	add	r3, pc, #496	; (adr r3, 8008df0 <_dtoa_r+0x300>)
 8008bfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c02:	f7f7 fc69 	bl	80004d8 <__aeabi_dmul>
 8008c06:	a37c      	add	r3, pc, #496	; (adr r3, 8008df8 <_dtoa_r+0x308>)
 8008c08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c0c:	f7f7 faae 	bl	800016c <__adddf3>
 8008c10:	4606      	mov	r6, r0
 8008c12:	4628      	mov	r0, r5
 8008c14:	460f      	mov	r7, r1
 8008c16:	f7f7 fbf5 	bl	8000404 <__aeabi_i2d>
 8008c1a:	a379      	add	r3, pc, #484	; (adr r3, 8008e00 <_dtoa_r+0x310>)
 8008c1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c20:	f7f7 fc5a 	bl	80004d8 <__aeabi_dmul>
 8008c24:	4602      	mov	r2, r0
 8008c26:	460b      	mov	r3, r1
 8008c28:	4630      	mov	r0, r6
 8008c2a:	4639      	mov	r1, r7
 8008c2c:	f7f7 fa9e 	bl	800016c <__adddf3>
 8008c30:	4606      	mov	r6, r0
 8008c32:	460f      	mov	r7, r1
 8008c34:	f7f7 ff00 	bl	8000a38 <__aeabi_d2iz>
 8008c38:	2200      	movs	r2, #0
 8008c3a:	4682      	mov	sl, r0
 8008c3c:	2300      	movs	r3, #0
 8008c3e:	4630      	mov	r0, r6
 8008c40:	4639      	mov	r1, r7
 8008c42:	f7f7 febb 	bl	80009bc <__aeabi_dcmplt>
 8008c46:	b148      	cbz	r0, 8008c5c <_dtoa_r+0x16c>
 8008c48:	4650      	mov	r0, sl
 8008c4a:	f7f7 fbdb 	bl	8000404 <__aeabi_i2d>
 8008c4e:	4632      	mov	r2, r6
 8008c50:	463b      	mov	r3, r7
 8008c52:	f7f7 fea9 	bl	80009a8 <__aeabi_dcmpeq>
 8008c56:	b908      	cbnz	r0, 8008c5c <_dtoa_r+0x16c>
 8008c58:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8008c5c:	f1ba 0f16 	cmp.w	sl, #22
 8008c60:	d85a      	bhi.n	8008d18 <_dtoa_r+0x228>
 8008c62:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008c66:	496d      	ldr	r1, [pc, #436]	; (8008e1c <_dtoa_r+0x32c>)
 8008c68:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8008c6c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008c70:	f7f7 fec2 	bl	80009f8 <__aeabi_dcmpgt>
 8008c74:	2800      	cmp	r0, #0
 8008c76:	d051      	beq.n	8008d1c <_dtoa_r+0x22c>
 8008c78:	2300      	movs	r3, #0
 8008c7a:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8008c7e:	930d      	str	r3, [sp, #52]	; 0x34
 8008c80:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008c82:	1b5d      	subs	r5, r3, r5
 8008c84:	1e6b      	subs	r3, r5, #1
 8008c86:	9307      	str	r3, [sp, #28]
 8008c88:	bf43      	ittte	mi
 8008c8a:	2300      	movmi	r3, #0
 8008c8c:	f1c5 0901 	rsbmi	r9, r5, #1
 8008c90:	9307      	strmi	r3, [sp, #28]
 8008c92:	f04f 0900 	movpl.w	r9, #0
 8008c96:	f1ba 0f00 	cmp.w	sl, #0
 8008c9a:	db41      	blt.n	8008d20 <_dtoa_r+0x230>
 8008c9c:	9b07      	ldr	r3, [sp, #28]
 8008c9e:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
 8008ca2:	4453      	add	r3, sl
 8008ca4:	9307      	str	r3, [sp, #28]
 8008ca6:	2300      	movs	r3, #0
 8008ca8:	9308      	str	r3, [sp, #32]
 8008caa:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8008cac:	2b09      	cmp	r3, #9
 8008cae:	f200 808f 	bhi.w	8008dd0 <_dtoa_r+0x2e0>
 8008cb2:	2b05      	cmp	r3, #5
 8008cb4:	bfc4      	itt	gt
 8008cb6:	3b04      	subgt	r3, #4
 8008cb8:	931e      	strgt	r3, [sp, #120]	; 0x78
 8008cba:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8008cbc:	bfc8      	it	gt
 8008cbe:	2500      	movgt	r5, #0
 8008cc0:	f1a3 0302 	sub.w	r3, r3, #2
 8008cc4:	bfd8      	it	le
 8008cc6:	2501      	movle	r5, #1
 8008cc8:	2b03      	cmp	r3, #3
 8008cca:	f200 808d 	bhi.w	8008de8 <_dtoa_r+0x2f8>
 8008cce:	e8df f003 	tbb	[pc, r3]
 8008cd2:	7d7b      	.short	0x7d7b
 8008cd4:	6f2f      	.short	0x6f2f
 8008cd6:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8008cda:	441d      	add	r5, r3
 8008cdc:	f205 4032 	addw	r0, r5, #1074	; 0x432
 8008ce0:	2820      	cmp	r0, #32
 8008ce2:	dd13      	ble.n	8008d0c <_dtoa_r+0x21c>
 8008ce4:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 8008ce8:	9b02      	ldr	r3, [sp, #8]
 8008cea:	fa08 f800 	lsl.w	r8, r8, r0
 8008cee:	f205 4012 	addw	r0, r5, #1042	; 0x412
 8008cf2:	fa23 f000 	lsr.w	r0, r3, r0
 8008cf6:	ea48 0000 	orr.w	r0, r8, r0
 8008cfa:	f7f7 fb73 	bl	80003e4 <__aeabi_ui2d>
 8008cfe:	2301      	movs	r3, #1
 8008d00:	4680      	mov	r8, r0
 8008d02:	f1a1 79f8 	sub.w	r9, r1, #32505856	; 0x1f00000
 8008d06:	3d01      	subs	r5, #1
 8008d08:	9310      	str	r3, [sp, #64]	; 0x40
 8008d0a:	e771      	b.n	8008bf0 <_dtoa_r+0x100>
 8008d0c:	9b02      	ldr	r3, [sp, #8]
 8008d0e:	f1c0 0020 	rsb	r0, r0, #32
 8008d12:	fa03 f000 	lsl.w	r0, r3, r0
 8008d16:	e7f0      	b.n	8008cfa <_dtoa_r+0x20a>
 8008d18:	2301      	movs	r3, #1
 8008d1a:	e7b0      	b.n	8008c7e <_dtoa_r+0x18e>
 8008d1c:	900d      	str	r0, [sp, #52]	; 0x34
 8008d1e:	e7af      	b.n	8008c80 <_dtoa_r+0x190>
 8008d20:	f1ca 0300 	rsb	r3, sl, #0
 8008d24:	9308      	str	r3, [sp, #32]
 8008d26:	2300      	movs	r3, #0
 8008d28:	eba9 090a 	sub.w	r9, r9, sl
 8008d2c:	930c      	str	r3, [sp, #48]	; 0x30
 8008d2e:	e7bc      	b.n	8008caa <_dtoa_r+0x1ba>
 8008d30:	2301      	movs	r3, #1
 8008d32:	9309      	str	r3, [sp, #36]	; 0x24
 8008d34:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8008d36:	2b00      	cmp	r3, #0
 8008d38:	dd74      	ble.n	8008e24 <_dtoa_r+0x334>
 8008d3a:	4698      	mov	r8, r3
 8008d3c:	9304      	str	r3, [sp, #16]
 8008d3e:	2200      	movs	r2, #0
 8008d40:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8008d42:	6072      	str	r2, [r6, #4]
 8008d44:	2204      	movs	r2, #4
 8008d46:	f102 0014 	add.w	r0, r2, #20
 8008d4a:	4298      	cmp	r0, r3
 8008d4c:	6871      	ldr	r1, [r6, #4]
 8008d4e:	d96e      	bls.n	8008e2e <_dtoa_r+0x33e>
 8008d50:	4620      	mov	r0, r4
 8008d52:	f000 ffe5 	bl	8009d20 <_Balloc>
 8008d56:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008d58:	6030      	str	r0, [r6, #0]
 8008d5a:	681b      	ldr	r3, [r3, #0]
 8008d5c:	f1b8 0f0e 	cmp.w	r8, #14
 8008d60:	9306      	str	r3, [sp, #24]
 8008d62:	f200 80ed 	bhi.w	8008f40 <_dtoa_r+0x450>
 8008d66:	2d00      	cmp	r5, #0
 8008d68:	f000 80ea 	beq.w	8008f40 <_dtoa_r+0x450>
 8008d6c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008d70:	f1ba 0f00 	cmp.w	sl, #0
 8008d74:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8008d78:	dd77      	ble.n	8008e6a <_dtoa_r+0x37a>
 8008d7a:	4a28      	ldr	r2, [pc, #160]	; (8008e1c <_dtoa_r+0x32c>)
 8008d7c:	f00a 030f 	and.w	r3, sl, #15
 8008d80:	ea4f 162a 	mov.w	r6, sl, asr #4
 8008d84:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8008d88:	06f0      	lsls	r0, r6, #27
 8008d8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d8e:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8008d92:	d568      	bpl.n	8008e66 <_dtoa_r+0x376>
 8008d94:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8008d98:	4b21      	ldr	r3, [pc, #132]	; (8008e20 <_dtoa_r+0x330>)
 8008d9a:	2503      	movs	r5, #3
 8008d9c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008da0:	f7f7 fcc4 	bl	800072c <__aeabi_ddiv>
 8008da4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008da8:	f006 060f 	and.w	r6, r6, #15
 8008dac:	4f1c      	ldr	r7, [pc, #112]	; (8008e20 <_dtoa_r+0x330>)
 8008dae:	e04f      	b.n	8008e50 <_dtoa_r+0x360>
 8008db0:	2301      	movs	r3, #1
 8008db2:	9309      	str	r3, [sp, #36]	; 0x24
 8008db4:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8008db6:	4453      	add	r3, sl
 8008db8:	f103 0801 	add.w	r8, r3, #1
 8008dbc:	9304      	str	r3, [sp, #16]
 8008dbe:	4643      	mov	r3, r8
 8008dc0:	2b01      	cmp	r3, #1
 8008dc2:	bfb8      	it	lt
 8008dc4:	2301      	movlt	r3, #1
 8008dc6:	e7ba      	b.n	8008d3e <_dtoa_r+0x24e>
 8008dc8:	2300      	movs	r3, #0
 8008dca:	e7b2      	b.n	8008d32 <_dtoa_r+0x242>
 8008dcc:	2300      	movs	r3, #0
 8008dce:	e7f0      	b.n	8008db2 <_dtoa_r+0x2c2>
 8008dd0:	2501      	movs	r5, #1
 8008dd2:	2300      	movs	r3, #0
 8008dd4:	9509      	str	r5, [sp, #36]	; 0x24
 8008dd6:	931e      	str	r3, [sp, #120]	; 0x78
 8008dd8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008ddc:	2200      	movs	r2, #0
 8008dde:	9304      	str	r3, [sp, #16]
 8008de0:	4698      	mov	r8, r3
 8008de2:	2312      	movs	r3, #18
 8008de4:	921f      	str	r2, [sp, #124]	; 0x7c
 8008de6:	e7aa      	b.n	8008d3e <_dtoa_r+0x24e>
 8008de8:	2301      	movs	r3, #1
 8008dea:	9309      	str	r3, [sp, #36]	; 0x24
 8008dec:	e7f4      	b.n	8008dd8 <_dtoa_r+0x2e8>
 8008dee:	bf00      	nop
 8008df0:	636f4361 	.word	0x636f4361
 8008df4:	3fd287a7 	.word	0x3fd287a7
 8008df8:	8b60c8b3 	.word	0x8b60c8b3
 8008dfc:	3fc68a28 	.word	0x3fc68a28
 8008e00:	509f79fb 	.word	0x509f79fb
 8008e04:	3fd34413 	.word	0x3fd34413
 8008e08:	7ff00000 	.word	0x7ff00000
 8008e0c:	0800b259 	.word	0x0800b259
 8008e10:	0800b250 	.word	0x0800b250
 8008e14:	0800b1d5 	.word	0x0800b1d5
 8008e18:	3ff80000 	.word	0x3ff80000
 8008e1c:	0800b290 	.word	0x0800b290
 8008e20:	0800b268 	.word	0x0800b268
 8008e24:	2301      	movs	r3, #1
 8008e26:	9304      	str	r3, [sp, #16]
 8008e28:	4698      	mov	r8, r3
 8008e2a:	461a      	mov	r2, r3
 8008e2c:	e7da      	b.n	8008de4 <_dtoa_r+0x2f4>
 8008e2e:	3101      	adds	r1, #1
 8008e30:	6071      	str	r1, [r6, #4]
 8008e32:	0052      	lsls	r2, r2, #1
 8008e34:	e787      	b.n	8008d46 <_dtoa_r+0x256>
 8008e36:	07f1      	lsls	r1, r6, #31
 8008e38:	d508      	bpl.n	8008e4c <_dtoa_r+0x35c>
 8008e3a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8008e3e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008e42:	f7f7 fb49 	bl	80004d8 <__aeabi_dmul>
 8008e46:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8008e4a:	3501      	adds	r5, #1
 8008e4c:	1076      	asrs	r6, r6, #1
 8008e4e:	3708      	adds	r7, #8
 8008e50:	2e00      	cmp	r6, #0
 8008e52:	d1f0      	bne.n	8008e36 <_dtoa_r+0x346>
 8008e54:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8008e58:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008e5c:	f7f7 fc66 	bl	800072c <__aeabi_ddiv>
 8008e60:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008e64:	e01b      	b.n	8008e9e <_dtoa_r+0x3ae>
 8008e66:	2502      	movs	r5, #2
 8008e68:	e7a0      	b.n	8008dac <_dtoa_r+0x2bc>
 8008e6a:	f000 80a4 	beq.w	8008fb6 <_dtoa_r+0x4c6>
 8008e6e:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8008e72:	f1ca 0600 	rsb	r6, sl, #0
 8008e76:	4ba0      	ldr	r3, [pc, #640]	; (80090f8 <_dtoa_r+0x608>)
 8008e78:	f006 020f 	and.w	r2, r6, #15
 8008e7c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008e80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e84:	f7f7 fb28 	bl	80004d8 <__aeabi_dmul>
 8008e88:	2502      	movs	r5, #2
 8008e8a:	2300      	movs	r3, #0
 8008e8c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008e90:	4f9a      	ldr	r7, [pc, #616]	; (80090fc <_dtoa_r+0x60c>)
 8008e92:	1136      	asrs	r6, r6, #4
 8008e94:	2e00      	cmp	r6, #0
 8008e96:	f040 8083 	bne.w	8008fa0 <_dtoa_r+0x4b0>
 8008e9a:	2b00      	cmp	r3, #0
 8008e9c:	d1e0      	bne.n	8008e60 <_dtoa_r+0x370>
 8008e9e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008ea0:	2b00      	cmp	r3, #0
 8008ea2:	f000 808a 	beq.w	8008fba <_dtoa_r+0x4ca>
 8008ea6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008eaa:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8008eae:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8008eb2:	2200      	movs	r2, #0
 8008eb4:	4b92      	ldr	r3, [pc, #584]	; (8009100 <_dtoa_r+0x610>)
 8008eb6:	f7f7 fd81 	bl	80009bc <__aeabi_dcmplt>
 8008eba:	2800      	cmp	r0, #0
 8008ebc:	d07d      	beq.n	8008fba <_dtoa_r+0x4ca>
 8008ebe:	f1b8 0f00 	cmp.w	r8, #0
 8008ec2:	d07a      	beq.n	8008fba <_dtoa_r+0x4ca>
 8008ec4:	9b04      	ldr	r3, [sp, #16]
 8008ec6:	2b00      	cmp	r3, #0
 8008ec8:	dd36      	ble.n	8008f38 <_dtoa_r+0x448>
 8008eca:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8008ece:	2200      	movs	r2, #0
 8008ed0:	4b8c      	ldr	r3, [pc, #560]	; (8009104 <_dtoa_r+0x614>)
 8008ed2:	f7f7 fb01 	bl	80004d8 <__aeabi_dmul>
 8008ed6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008eda:	9e04      	ldr	r6, [sp, #16]
 8008edc:	f10a 37ff 	add.w	r7, sl, #4294967295	; 0xffffffff
 8008ee0:	3501      	adds	r5, #1
 8008ee2:	4628      	mov	r0, r5
 8008ee4:	f7f7 fa8e 	bl	8000404 <__aeabi_i2d>
 8008ee8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008eec:	f7f7 faf4 	bl	80004d8 <__aeabi_dmul>
 8008ef0:	2200      	movs	r2, #0
 8008ef2:	4b85      	ldr	r3, [pc, #532]	; (8009108 <_dtoa_r+0x618>)
 8008ef4:	f7f7 f93a 	bl	800016c <__adddf3>
 8008ef8:	f1a1 7550 	sub.w	r5, r1, #54525952	; 0x3400000
 8008efc:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8008f00:	950b      	str	r5, [sp, #44]	; 0x2c
 8008f02:	2e00      	cmp	r6, #0
 8008f04:	d15c      	bne.n	8008fc0 <_dtoa_r+0x4d0>
 8008f06:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008f0a:	2200      	movs	r2, #0
 8008f0c:	4b7f      	ldr	r3, [pc, #508]	; (800910c <_dtoa_r+0x61c>)
 8008f0e:	f7f7 f92b 	bl	8000168 <__aeabi_dsub>
 8008f12:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008f14:	462b      	mov	r3, r5
 8008f16:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008f1a:	f7f7 fd6d 	bl	80009f8 <__aeabi_dcmpgt>
 8008f1e:	2800      	cmp	r0, #0
 8008f20:	f040 8281 	bne.w	8009426 <_dtoa_r+0x936>
 8008f24:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008f28:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008f2a:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 8008f2e:	f7f7 fd45 	bl	80009bc <__aeabi_dcmplt>
 8008f32:	2800      	cmp	r0, #0
 8008f34:	f040 8275 	bne.w	8009422 <_dtoa_r+0x932>
 8008f38:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8008f3c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8008f40:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008f42:	2b00      	cmp	r3, #0
 8008f44:	f2c0 814b 	blt.w	80091de <_dtoa_r+0x6ee>
 8008f48:	f1ba 0f0e 	cmp.w	sl, #14
 8008f4c:	f300 8147 	bgt.w	80091de <_dtoa_r+0x6ee>
 8008f50:	4b69      	ldr	r3, [pc, #420]	; (80090f8 <_dtoa_r+0x608>)
 8008f52:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8008f56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f5a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8008f5e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8008f60:	2b00      	cmp	r3, #0
 8008f62:	f280 80d7 	bge.w	8009114 <_dtoa_r+0x624>
 8008f66:	f1b8 0f00 	cmp.w	r8, #0
 8008f6a:	f300 80d3 	bgt.w	8009114 <_dtoa_r+0x624>
 8008f6e:	f040 8257 	bne.w	8009420 <_dtoa_r+0x930>
 8008f72:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008f76:	2200      	movs	r2, #0
 8008f78:	4b64      	ldr	r3, [pc, #400]	; (800910c <_dtoa_r+0x61c>)
 8008f7a:	f7f7 faad 	bl	80004d8 <__aeabi_dmul>
 8008f7e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008f82:	f7f7 fd2f 	bl	80009e4 <__aeabi_dcmpge>
 8008f86:	4646      	mov	r6, r8
 8008f88:	4647      	mov	r7, r8
 8008f8a:	2800      	cmp	r0, #0
 8008f8c:	f040 822d 	bne.w	80093ea <_dtoa_r+0x8fa>
 8008f90:	9b06      	ldr	r3, [sp, #24]
 8008f92:	9a06      	ldr	r2, [sp, #24]
 8008f94:	1c5d      	adds	r5, r3, #1
 8008f96:	2331      	movs	r3, #49	; 0x31
 8008f98:	f10a 0a01 	add.w	sl, sl, #1
 8008f9c:	7013      	strb	r3, [r2, #0]
 8008f9e:	e228      	b.n	80093f2 <_dtoa_r+0x902>
 8008fa0:	07f2      	lsls	r2, r6, #31
 8008fa2:	d505      	bpl.n	8008fb0 <_dtoa_r+0x4c0>
 8008fa4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008fa8:	f7f7 fa96 	bl	80004d8 <__aeabi_dmul>
 8008fac:	2301      	movs	r3, #1
 8008fae:	3501      	adds	r5, #1
 8008fb0:	1076      	asrs	r6, r6, #1
 8008fb2:	3708      	adds	r7, #8
 8008fb4:	e76e      	b.n	8008e94 <_dtoa_r+0x3a4>
 8008fb6:	2502      	movs	r5, #2
 8008fb8:	e771      	b.n	8008e9e <_dtoa_r+0x3ae>
 8008fba:	4657      	mov	r7, sl
 8008fbc:	4646      	mov	r6, r8
 8008fbe:	e790      	b.n	8008ee2 <_dtoa_r+0x3f2>
 8008fc0:	4b4d      	ldr	r3, [pc, #308]	; (80090f8 <_dtoa_r+0x608>)
 8008fc2:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8008fc6:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8008fca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008fcc:	2b00      	cmp	r3, #0
 8008fce:	d048      	beq.n	8009062 <_dtoa_r+0x572>
 8008fd0:	4602      	mov	r2, r0
 8008fd2:	460b      	mov	r3, r1
 8008fd4:	2000      	movs	r0, #0
 8008fd6:	494e      	ldr	r1, [pc, #312]	; (8009110 <_dtoa_r+0x620>)
 8008fd8:	f7f7 fba8 	bl	800072c <__aeabi_ddiv>
 8008fdc:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8008fe0:	f7f7 f8c2 	bl	8000168 <__aeabi_dsub>
 8008fe4:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8008fe8:	9d06      	ldr	r5, [sp, #24]
 8008fea:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008fee:	f7f7 fd23 	bl	8000a38 <__aeabi_d2iz>
 8008ff2:	9011      	str	r0, [sp, #68]	; 0x44
 8008ff4:	f7f7 fa06 	bl	8000404 <__aeabi_i2d>
 8008ff8:	4602      	mov	r2, r0
 8008ffa:	460b      	mov	r3, r1
 8008ffc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009000:	f7f7 f8b2 	bl	8000168 <__aeabi_dsub>
 8009004:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009006:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800900a:	3330      	adds	r3, #48	; 0x30
 800900c:	f805 3b01 	strb.w	r3, [r5], #1
 8009010:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8009014:	f7f7 fcd2 	bl	80009bc <__aeabi_dcmplt>
 8009018:	2800      	cmp	r0, #0
 800901a:	d163      	bne.n	80090e4 <_dtoa_r+0x5f4>
 800901c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009020:	2000      	movs	r0, #0
 8009022:	4937      	ldr	r1, [pc, #220]	; (8009100 <_dtoa_r+0x610>)
 8009024:	f7f7 f8a0 	bl	8000168 <__aeabi_dsub>
 8009028:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800902c:	f7f7 fcc6 	bl	80009bc <__aeabi_dcmplt>
 8009030:	2800      	cmp	r0, #0
 8009032:	f040 80b5 	bne.w	80091a0 <_dtoa_r+0x6b0>
 8009036:	9b06      	ldr	r3, [sp, #24]
 8009038:	1aeb      	subs	r3, r5, r3
 800903a:	429e      	cmp	r6, r3
 800903c:	f77f af7c 	ble.w	8008f38 <_dtoa_r+0x448>
 8009040:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8009044:	2200      	movs	r2, #0
 8009046:	4b2f      	ldr	r3, [pc, #188]	; (8009104 <_dtoa_r+0x614>)
 8009048:	f7f7 fa46 	bl	80004d8 <__aeabi_dmul>
 800904c:	2200      	movs	r2, #0
 800904e:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8009052:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009056:	4b2b      	ldr	r3, [pc, #172]	; (8009104 <_dtoa_r+0x614>)
 8009058:	f7f7 fa3e 	bl	80004d8 <__aeabi_dmul>
 800905c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009060:	e7c3      	b.n	8008fea <_dtoa_r+0x4fa>
 8009062:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8009066:	f7f7 fa37 	bl	80004d8 <__aeabi_dmul>
 800906a:	9b06      	ldr	r3, [sp, #24]
 800906c:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8009070:	199d      	adds	r5, r3, r6
 8009072:	461e      	mov	r6, r3
 8009074:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009078:	f7f7 fcde 	bl	8000a38 <__aeabi_d2iz>
 800907c:	9011      	str	r0, [sp, #68]	; 0x44
 800907e:	f7f7 f9c1 	bl	8000404 <__aeabi_i2d>
 8009082:	4602      	mov	r2, r0
 8009084:	460b      	mov	r3, r1
 8009086:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800908a:	f7f7 f86d 	bl	8000168 <__aeabi_dsub>
 800908e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009090:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009094:	3330      	adds	r3, #48	; 0x30
 8009096:	f806 3b01 	strb.w	r3, [r6], #1
 800909a:	42ae      	cmp	r6, r5
 800909c:	f04f 0200 	mov.w	r2, #0
 80090a0:	d124      	bne.n	80090ec <_dtoa_r+0x5fc>
 80090a2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80090a6:	4b1a      	ldr	r3, [pc, #104]	; (8009110 <_dtoa_r+0x620>)
 80090a8:	f7f7 f860 	bl	800016c <__adddf3>
 80090ac:	4602      	mov	r2, r0
 80090ae:	460b      	mov	r3, r1
 80090b0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80090b4:	f7f7 fca0 	bl	80009f8 <__aeabi_dcmpgt>
 80090b8:	2800      	cmp	r0, #0
 80090ba:	d171      	bne.n	80091a0 <_dtoa_r+0x6b0>
 80090bc:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80090c0:	2000      	movs	r0, #0
 80090c2:	4913      	ldr	r1, [pc, #76]	; (8009110 <_dtoa_r+0x620>)
 80090c4:	f7f7 f850 	bl	8000168 <__aeabi_dsub>
 80090c8:	4602      	mov	r2, r0
 80090ca:	460b      	mov	r3, r1
 80090cc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80090d0:	f7f7 fc74 	bl	80009bc <__aeabi_dcmplt>
 80090d4:	2800      	cmp	r0, #0
 80090d6:	f43f af2f 	beq.w	8008f38 <_dtoa_r+0x448>
 80090da:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80090de:	1e6a      	subs	r2, r5, #1
 80090e0:	2b30      	cmp	r3, #48	; 0x30
 80090e2:	d001      	beq.n	80090e8 <_dtoa_r+0x5f8>
 80090e4:	46ba      	mov	sl, r7
 80090e6:	e04a      	b.n	800917e <_dtoa_r+0x68e>
 80090e8:	4615      	mov	r5, r2
 80090ea:	e7f6      	b.n	80090da <_dtoa_r+0x5ea>
 80090ec:	4b05      	ldr	r3, [pc, #20]	; (8009104 <_dtoa_r+0x614>)
 80090ee:	f7f7 f9f3 	bl	80004d8 <__aeabi_dmul>
 80090f2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80090f6:	e7bd      	b.n	8009074 <_dtoa_r+0x584>
 80090f8:	0800b290 	.word	0x0800b290
 80090fc:	0800b268 	.word	0x0800b268
 8009100:	3ff00000 	.word	0x3ff00000
 8009104:	40240000 	.word	0x40240000
 8009108:	401c0000 	.word	0x401c0000
 800910c:	40140000 	.word	0x40140000
 8009110:	3fe00000 	.word	0x3fe00000
 8009114:	9d06      	ldr	r5, [sp, #24]
 8009116:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800911a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800911e:	4630      	mov	r0, r6
 8009120:	4639      	mov	r1, r7
 8009122:	f7f7 fb03 	bl	800072c <__aeabi_ddiv>
 8009126:	f7f7 fc87 	bl	8000a38 <__aeabi_d2iz>
 800912a:	4681      	mov	r9, r0
 800912c:	f7f7 f96a 	bl	8000404 <__aeabi_i2d>
 8009130:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009134:	f7f7 f9d0 	bl	80004d8 <__aeabi_dmul>
 8009138:	4602      	mov	r2, r0
 800913a:	460b      	mov	r3, r1
 800913c:	4630      	mov	r0, r6
 800913e:	4639      	mov	r1, r7
 8009140:	f7f7 f812 	bl	8000168 <__aeabi_dsub>
 8009144:	f109 0630 	add.w	r6, r9, #48	; 0x30
 8009148:	f805 6b01 	strb.w	r6, [r5], #1
 800914c:	9e06      	ldr	r6, [sp, #24]
 800914e:	4602      	mov	r2, r0
 8009150:	1bae      	subs	r6, r5, r6
 8009152:	45b0      	cmp	r8, r6
 8009154:	460b      	mov	r3, r1
 8009156:	d135      	bne.n	80091c4 <_dtoa_r+0x6d4>
 8009158:	f7f7 f808 	bl	800016c <__adddf3>
 800915c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009160:	4606      	mov	r6, r0
 8009162:	460f      	mov	r7, r1
 8009164:	f7f7 fc48 	bl	80009f8 <__aeabi_dcmpgt>
 8009168:	b9c8      	cbnz	r0, 800919e <_dtoa_r+0x6ae>
 800916a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800916e:	4630      	mov	r0, r6
 8009170:	4639      	mov	r1, r7
 8009172:	f7f7 fc19 	bl	80009a8 <__aeabi_dcmpeq>
 8009176:	b110      	cbz	r0, 800917e <_dtoa_r+0x68e>
 8009178:	f019 0f01 	tst.w	r9, #1
 800917c:	d10f      	bne.n	800919e <_dtoa_r+0x6ae>
 800917e:	4659      	mov	r1, fp
 8009180:	4620      	mov	r0, r4
 8009182:	f000 fe01 	bl	8009d88 <_Bfree>
 8009186:	2300      	movs	r3, #0
 8009188:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800918a:	702b      	strb	r3, [r5, #0]
 800918c:	f10a 0301 	add.w	r3, sl, #1
 8009190:	6013      	str	r3, [r2, #0]
 8009192:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009194:	2b00      	cmp	r3, #0
 8009196:	f43f acf3 	beq.w	8008b80 <_dtoa_r+0x90>
 800919a:	601d      	str	r5, [r3, #0]
 800919c:	e4f0      	b.n	8008b80 <_dtoa_r+0x90>
 800919e:	4657      	mov	r7, sl
 80091a0:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80091a4:	1e6b      	subs	r3, r5, #1
 80091a6:	2a39      	cmp	r2, #57	; 0x39
 80091a8:	d106      	bne.n	80091b8 <_dtoa_r+0x6c8>
 80091aa:	9a06      	ldr	r2, [sp, #24]
 80091ac:	429a      	cmp	r2, r3
 80091ae:	d107      	bne.n	80091c0 <_dtoa_r+0x6d0>
 80091b0:	2330      	movs	r3, #48	; 0x30
 80091b2:	7013      	strb	r3, [r2, #0]
 80091b4:	4613      	mov	r3, r2
 80091b6:	3701      	adds	r7, #1
 80091b8:	781a      	ldrb	r2, [r3, #0]
 80091ba:	3201      	adds	r2, #1
 80091bc:	701a      	strb	r2, [r3, #0]
 80091be:	e791      	b.n	80090e4 <_dtoa_r+0x5f4>
 80091c0:	461d      	mov	r5, r3
 80091c2:	e7ed      	b.n	80091a0 <_dtoa_r+0x6b0>
 80091c4:	2200      	movs	r2, #0
 80091c6:	4b99      	ldr	r3, [pc, #612]	; (800942c <_dtoa_r+0x93c>)
 80091c8:	f7f7 f986 	bl	80004d8 <__aeabi_dmul>
 80091cc:	2200      	movs	r2, #0
 80091ce:	2300      	movs	r3, #0
 80091d0:	4606      	mov	r6, r0
 80091d2:	460f      	mov	r7, r1
 80091d4:	f7f7 fbe8 	bl	80009a8 <__aeabi_dcmpeq>
 80091d8:	2800      	cmp	r0, #0
 80091da:	d09e      	beq.n	800911a <_dtoa_r+0x62a>
 80091dc:	e7cf      	b.n	800917e <_dtoa_r+0x68e>
 80091de:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80091e0:	2a00      	cmp	r2, #0
 80091e2:	f000 8088 	beq.w	80092f6 <_dtoa_r+0x806>
 80091e6:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80091e8:	2a01      	cmp	r2, #1
 80091ea:	dc6d      	bgt.n	80092c8 <_dtoa_r+0x7d8>
 80091ec:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80091ee:	2a00      	cmp	r2, #0
 80091f0:	d066      	beq.n	80092c0 <_dtoa_r+0x7d0>
 80091f2:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80091f6:	464d      	mov	r5, r9
 80091f8:	9e08      	ldr	r6, [sp, #32]
 80091fa:	9a07      	ldr	r2, [sp, #28]
 80091fc:	2101      	movs	r1, #1
 80091fe:	441a      	add	r2, r3
 8009200:	4620      	mov	r0, r4
 8009202:	4499      	add	r9, r3
 8009204:	9207      	str	r2, [sp, #28]
 8009206:	f000 fe9d 	bl	8009f44 <__i2b>
 800920a:	4607      	mov	r7, r0
 800920c:	2d00      	cmp	r5, #0
 800920e:	dd0b      	ble.n	8009228 <_dtoa_r+0x738>
 8009210:	9b07      	ldr	r3, [sp, #28]
 8009212:	2b00      	cmp	r3, #0
 8009214:	dd08      	ble.n	8009228 <_dtoa_r+0x738>
 8009216:	42ab      	cmp	r3, r5
 8009218:	bfa8      	it	ge
 800921a:	462b      	movge	r3, r5
 800921c:	9a07      	ldr	r2, [sp, #28]
 800921e:	eba9 0903 	sub.w	r9, r9, r3
 8009222:	1aed      	subs	r5, r5, r3
 8009224:	1ad3      	subs	r3, r2, r3
 8009226:	9307      	str	r3, [sp, #28]
 8009228:	9b08      	ldr	r3, [sp, #32]
 800922a:	b1eb      	cbz	r3, 8009268 <_dtoa_r+0x778>
 800922c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800922e:	2b00      	cmp	r3, #0
 8009230:	d065      	beq.n	80092fe <_dtoa_r+0x80e>
 8009232:	b18e      	cbz	r6, 8009258 <_dtoa_r+0x768>
 8009234:	4639      	mov	r1, r7
 8009236:	4632      	mov	r2, r6
 8009238:	4620      	mov	r0, r4
 800923a:	f000 ff21 	bl	800a080 <__pow5mult>
 800923e:	465a      	mov	r2, fp
 8009240:	4601      	mov	r1, r0
 8009242:	4607      	mov	r7, r0
 8009244:	4620      	mov	r0, r4
 8009246:	f000 fe86 	bl	8009f56 <__multiply>
 800924a:	4659      	mov	r1, fp
 800924c:	900a      	str	r0, [sp, #40]	; 0x28
 800924e:	4620      	mov	r0, r4
 8009250:	f000 fd9a 	bl	8009d88 <_Bfree>
 8009254:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009256:	469b      	mov	fp, r3
 8009258:	9b08      	ldr	r3, [sp, #32]
 800925a:	1b9a      	subs	r2, r3, r6
 800925c:	d004      	beq.n	8009268 <_dtoa_r+0x778>
 800925e:	4659      	mov	r1, fp
 8009260:	4620      	mov	r0, r4
 8009262:	f000 ff0d 	bl	800a080 <__pow5mult>
 8009266:	4683      	mov	fp, r0
 8009268:	2101      	movs	r1, #1
 800926a:	4620      	mov	r0, r4
 800926c:	f000 fe6a 	bl	8009f44 <__i2b>
 8009270:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009272:	4606      	mov	r6, r0
 8009274:	2b00      	cmp	r3, #0
 8009276:	f000 81c6 	beq.w	8009606 <_dtoa_r+0xb16>
 800927a:	461a      	mov	r2, r3
 800927c:	4601      	mov	r1, r0
 800927e:	4620      	mov	r0, r4
 8009280:	f000 fefe 	bl	800a080 <__pow5mult>
 8009284:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8009286:	4606      	mov	r6, r0
 8009288:	2b01      	cmp	r3, #1
 800928a:	dc3e      	bgt.n	800930a <_dtoa_r+0x81a>
 800928c:	9b02      	ldr	r3, [sp, #8]
 800928e:	2b00      	cmp	r3, #0
 8009290:	d137      	bne.n	8009302 <_dtoa_r+0x812>
 8009292:	9b03      	ldr	r3, [sp, #12]
 8009294:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009298:	2b00      	cmp	r3, #0
 800929a:	d134      	bne.n	8009306 <_dtoa_r+0x816>
 800929c:	9b03      	ldr	r3, [sp, #12]
 800929e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80092a2:	0d1b      	lsrs	r3, r3, #20
 80092a4:	051b      	lsls	r3, r3, #20
 80092a6:	b12b      	cbz	r3, 80092b4 <_dtoa_r+0x7c4>
 80092a8:	9b07      	ldr	r3, [sp, #28]
 80092aa:	f109 0901 	add.w	r9, r9, #1
 80092ae:	3301      	adds	r3, #1
 80092b0:	9307      	str	r3, [sp, #28]
 80092b2:	2301      	movs	r3, #1
 80092b4:	9308      	str	r3, [sp, #32]
 80092b6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80092b8:	2b00      	cmp	r3, #0
 80092ba:	d128      	bne.n	800930e <_dtoa_r+0x81e>
 80092bc:	2001      	movs	r0, #1
 80092be:	e02e      	b.n	800931e <_dtoa_r+0x82e>
 80092c0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80092c2:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80092c6:	e796      	b.n	80091f6 <_dtoa_r+0x706>
 80092c8:	9b08      	ldr	r3, [sp, #32]
 80092ca:	f108 36ff 	add.w	r6, r8, #4294967295	; 0xffffffff
 80092ce:	42b3      	cmp	r3, r6
 80092d0:	bfb7      	itett	lt
 80092d2:	9b08      	ldrlt	r3, [sp, #32]
 80092d4:	1b9e      	subge	r6, r3, r6
 80092d6:	1af2      	sublt	r2, r6, r3
 80092d8:	9b0c      	ldrlt	r3, [sp, #48]	; 0x30
 80092da:	bfbf      	itttt	lt
 80092dc:	9608      	strlt	r6, [sp, #32]
 80092de:	189b      	addlt	r3, r3, r2
 80092e0:	930c      	strlt	r3, [sp, #48]	; 0x30
 80092e2:	2600      	movlt	r6, #0
 80092e4:	f1b8 0f00 	cmp.w	r8, #0
 80092e8:	bfb9      	ittee	lt
 80092ea:	eba9 0508 	sublt.w	r5, r9, r8
 80092ee:	2300      	movlt	r3, #0
 80092f0:	464d      	movge	r5, r9
 80092f2:	4643      	movge	r3, r8
 80092f4:	e781      	b.n	80091fa <_dtoa_r+0x70a>
 80092f6:	9e08      	ldr	r6, [sp, #32]
 80092f8:	464d      	mov	r5, r9
 80092fa:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80092fc:	e786      	b.n	800920c <_dtoa_r+0x71c>
 80092fe:	9a08      	ldr	r2, [sp, #32]
 8009300:	e7ad      	b.n	800925e <_dtoa_r+0x76e>
 8009302:	2300      	movs	r3, #0
 8009304:	e7d6      	b.n	80092b4 <_dtoa_r+0x7c4>
 8009306:	9b02      	ldr	r3, [sp, #8]
 8009308:	e7d4      	b.n	80092b4 <_dtoa_r+0x7c4>
 800930a:	2300      	movs	r3, #0
 800930c:	9308      	str	r3, [sp, #32]
 800930e:	6933      	ldr	r3, [r6, #16]
 8009310:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8009314:	6918      	ldr	r0, [r3, #16]
 8009316:	f000 fdc7 	bl	8009ea8 <__hi0bits>
 800931a:	f1c0 0020 	rsb	r0, r0, #32
 800931e:	9b07      	ldr	r3, [sp, #28]
 8009320:	4418      	add	r0, r3
 8009322:	f010 001f 	ands.w	r0, r0, #31
 8009326:	d047      	beq.n	80093b8 <_dtoa_r+0x8c8>
 8009328:	f1c0 0320 	rsb	r3, r0, #32
 800932c:	2b04      	cmp	r3, #4
 800932e:	dd3b      	ble.n	80093a8 <_dtoa_r+0x8b8>
 8009330:	9b07      	ldr	r3, [sp, #28]
 8009332:	f1c0 001c 	rsb	r0, r0, #28
 8009336:	4481      	add	r9, r0
 8009338:	4405      	add	r5, r0
 800933a:	4403      	add	r3, r0
 800933c:	9307      	str	r3, [sp, #28]
 800933e:	f1b9 0f00 	cmp.w	r9, #0
 8009342:	dd05      	ble.n	8009350 <_dtoa_r+0x860>
 8009344:	4659      	mov	r1, fp
 8009346:	464a      	mov	r2, r9
 8009348:	4620      	mov	r0, r4
 800934a:	f000 fee7 	bl	800a11c <__lshift>
 800934e:	4683      	mov	fp, r0
 8009350:	9b07      	ldr	r3, [sp, #28]
 8009352:	2b00      	cmp	r3, #0
 8009354:	dd05      	ble.n	8009362 <_dtoa_r+0x872>
 8009356:	4631      	mov	r1, r6
 8009358:	461a      	mov	r2, r3
 800935a:	4620      	mov	r0, r4
 800935c:	f000 fede 	bl	800a11c <__lshift>
 8009360:	4606      	mov	r6, r0
 8009362:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009364:	b353      	cbz	r3, 80093bc <_dtoa_r+0x8cc>
 8009366:	4631      	mov	r1, r6
 8009368:	4658      	mov	r0, fp
 800936a:	f000 ff2b 	bl	800a1c4 <__mcmp>
 800936e:	2800      	cmp	r0, #0
 8009370:	da24      	bge.n	80093bc <_dtoa_r+0x8cc>
 8009372:	2300      	movs	r3, #0
 8009374:	4659      	mov	r1, fp
 8009376:	220a      	movs	r2, #10
 8009378:	4620      	mov	r0, r4
 800937a:	f000 fd1c 	bl	8009db6 <__multadd>
 800937e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009380:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8009384:	4683      	mov	fp, r0
 8009386:	2b00      	cmp	r3, #0
 8009388:	f000 8144 	beq.w	8009614 <_dtoa_r+0xb24>
 800938c:	2300      	movs	r3, #0
 800938e:	4639      	mov	r1, r7
 8009390:	220a      	movs	r2, #10
 8009392:	4620      	mov	r0, r4
 8009394:	f000 fd0f 	bl	8009db6 <__multadd>
 8009398:	9b04      	ldr	r3, [sp, #16]
 800939a:	4607      	mov	r7, r0
 800939c:	2b00      	cmp	r3, #0
 800939e:	dc4d      	bgt.n	800943c <_dtoa_r+0x94c>
 80093a0:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80093a2:	2b02      	cmp	r3, #2
 80093a4:	dd4a      	ble.n	800943c <_dtoa_r+0x94c>
 80093a6:	e011      	b.n	80093cc <_dtoa_r+0x8dc>
 80093a8:	d0c9      	beq.n	800933e <_dtoa_r+0x84e>
 80093aa:	9a07      	ldr	r2, [sp, #28]
 80093ac:	331c      	adds	r3, #28
 80093ae:	441a      	add	r2, r3
 80093b0:	4499      	add	r9, r3
 80093b2:	441d      	add	r5, r3
 80093b4:	4613      	mov	r3, r2
 80093b6:	e7c1      	b.n	800933c <_dtoa_r+0x84c>
 80093b8:	4603      	mov	r3, r0
 80093ba:	e7f6      	b.n	80093aa <_dtoa_r+0x8ba>
 80093bc:	f1b8 0f00 	cmp.w	r8, #0
 80093c0:	dc36      	bgt.n	8009430 <_dtoa_r+0x940>
 80093c2:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80093c4:	2b02      	cmp	r3, #2
 80093c6:	dd33      	ble.n	8009430 <_dtoa_r+0x940>
 80093c8:	f8cd 8010 	str.w	r8, [sp, #16]
 80093cc:	9b04      	ldr	r3, [sp, #16]
 80093ce:	b963      	cbnz	r3, 80093ea <_dtoa_r+0x8fa>
 80093d0:	4631      	mov	r1, r6
 80093d2:	2205      	movs	r2, #5
 80093d4:	4620      	mov	r0, r4
 80093d6:	f000 fcee 	bl	8009db6 <__multadd>
 80093da:	4601      	mov	r1, r0
 80093dc:	4606      	mov	r6, r0
 80093de:	4658      	mov	r0, fp
 80093e0:	f000 fef0 	bl	800a1c4 <__mcmp>
 80093e4:	2800      	cmp	r0, #0
 80093e6:	f73f add3 	bgt.w	8008f90 <_dtoa_r+0x4a0>
 80093ea:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80093ec:	9d06      	ldr	r5, [sp, #24]
 80093ee:	ea6f 0a03 	mvn.w	sl, r3
 80093f2:	f04f 0900 	mov.w	r9, #0
 80093f6:	4631      	mov	r1, r6
 80093f8:	4620      	mov	r0, r4
 80093fa:	f000 fcc5 	bl	8009d88 <_Bfree>
 80093fe:	2f00      	cmp	r7, #0
 8009400:	f43f aebd 	beq.w	800917e <_dtoa_r+0x68e>
 8009404:	f1b9 0f00 	cmp.w	r9, #0
 8009408:	d005      	beq.n	8009416 <_dtoa_r+0x926>
 800940a:	45b9      	cmp	r9, r7
 800940c:	d003      	beq.n	8009416 <_dtoa_r+0x926>
 800940e:	4649      	mov	r1, r9
 8009410:	4620      	mov	r0, r4
 8009412:	f000 fcb9 	bl	8009d88 <_Bfree>
 8009416:	4639      	mov	r1, r7
 8009418:	4620      	mov	r0, r4
 800941a:	f000 fcb5 	bl	8009d88 <_Bfree>
 800941e:	e6ae      	b.n	800917e <_dtoa_r+0x68e>
 8009420:	2600      	movs	r6, #0
 8009422:	4637      	mov	r7, r6
 8009424:	e7e1      	b.n	80093ea <_dtoa_r+0x8fa>
 8009426:	46ba      	mov	sl, r7
 8009428:	4637      	mov	r7, r6
 800942a:	e5b1      	b.n	8008f90 <_dtoa_r+0x4a0>
 800942c:	40240000 	.word	0x40240000
 8009430:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009432:	f8cd 8010 	str.w	r8, [sp, #16]
 8009436:	2b00      	cmp	r3, #0
 8009438:	f000 80f3 	beq.w	8009622 <_dtoa_r+0xb32>
 800943c:	2d00      	cmp	r5, #0
 800943e:	dd05      	ble.n	800944c <_dtoa_r+0x95c>
 8009440:	4639      	mov	r1, r7
 8009442:	462a      	mov	r2, r5
 8009444:	4620      	mov	r0, r4
 8009446:	f000 fe69 	bl	800a11c <__lshift>
 800944a:	4607      	mov	r7, r0
 800944c:	9b08      	ldr	r3, [sp, #32]
 800944e:	2b00      	cmp	r3, #0
 8009450:	d04c      	beq.n	80094ec <_dtoa_r+0x9fc>
 8009452:	6879      	ldr	r1, [r7, #4]
 8009454:	4620      	mov	r0, r4
 8009456:	f000 fc63 	bl	8009d20 <_Balloc>
 800945a:	4605      	mov	r5, r0
 800945c:	693a      	ldr	r2, [r7, #16]
 800945e:	f107 010c 	add.w	r1, r7, #12
 8009462:	3202      	adds	r2, #2
 8009464:	0092      	lsls	r2, r2, #2
 8009466:	300c      	adds	r0, #12
 8009468:	f7fd fd26 	bl	8006eb8 <memcpy>
 800946c:	2201      	movs	r2, #1
 800946e:	4629      	mov	r1, r5
 8009470:	4620      	mov	r0, r4
 8009472:	f000 fe53 	bl	800a11c <__lshift>
 8009476:	46b9      	mov	r9, r7
 8009478:	4607      	mov	r7, r0
 800947a:	9b06      	ldr	r3, [sp, #24]
 800947c:	9307      	str	r3, [sp, #28]
 800947e:	9b02      	ldr	r3, [sp, #8]
 8009480:	f003 0301 	and.w	r3, r3, #1
 8009484:	9308      	str	r3, [sp, #32]
 8009486:	4631      	mov	r1, r6
 8009488:	4658      	mov	r0, fp
 800948a:	f7ff faa1 	bl	80089d0 <quorem>
 800948e:	4649      	mov	r1, r9
 8009490:	4605      	mov	r5, r0
 8009492:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8009496:	4658      	mov	r0, fp
 8009498:	f000 fe94 	bl	800a1c4 <__mcmp>
 800949c:	463a      	mov	r2, r7
 800949e:	9002      	str	r0, [sp, #8]
 80094a0:	4631      	mov	r1, r6
 80094a2:	4620      	mov	r0, r4
 80094a4:	f000 fea8 	bl	800a1f8 <__mdiff>
 80094a8:	68c3      	ldr	r3, [r0, #12]
 80094aa:	4602      	mov	r2, r0
 80094ac:	bb03      	cbnz	r3, 80094f0 <_dtoa_r+0xa00>
 80094ae:	4601      	mov	r1, r0
 80094b0:	9009      	str	r0, [sp, #36]	; 0x24
 80094b2:	4658      	mov	r0, fp
 80094b4:	f000 fe86 	bl	800a1c4 <__mcmp>
 80094b8:	4603      	mov	r3, r0
 80094ba:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80094bc:	4611      	mov	r1, r2
 80094be:	4620      	mov	r0, r4
 80094c0:	9309      	str	r3, [sp, #36]	; 0x24
 80094c2:	f000 fc61 	bl	8009d88 <_Bfree>
 80094c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80094c8:	b9a3      	cbnz	r3, 80094f4 <_dtoa_r+0xa04>
 80094ca:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80094cc:	b992      	cbnz	r2, 80094f4 <_dtoa_r+0xa04>
 80094ce:	9a08      	ldr	r2, [sp, #32]
 80094d0:	b982      	cbnz	r2, 80094f4 <_dtoa_r+0xa04>
 80094d2:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80094d6:	d029      	beq.n	800952c <_dtoa_r+0xa3c>
 80094d8:	9b02      	ldr	r3, [sp, #8]
 80094da:	2b00      	cmp	r3, #0
 80094dc:	dd01      	ble.n	80094e2 <_dtoa_r+0x9f2>
 80094de:	f105 0831 	add.w	r8, r5, #49	; 0x31
 80094e2:	9b07      	ldr	r3, [sp, #28]
 80094e4:	1c5d      	adds	r5, r3, #1
 80094e6:	f883 8000 	strb.w	r8, [r3]
 80094ea:	e784      	b.n	80093f6 <_dtoa_r+0x906>
 80094ec:	4638      	mov	r0, r7
 80094ee:	e7c2      	b.n	8009476 <_dtoa_r+0x986>
 80094f0:	2301      	movs	r3, #1
 80094f2:	e7e3      	b.n	80094bc <_dtoa_r+0x9cc>
 80094f4:	9a02      	ldr	r2, [sp, #8]
 80094f6:	2a00      	cmp	r2, #0
 80094f8:	db04      	blt.n	8009504 <_dtoa_r+0xa14>
 80094fa:	d123      	bne.n	8009544 <_dtoa_r+0xa54>
 80094fc:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80094fe:	bb0a      	cbnz	r2, 8009544 <_dtoa_r+0xa54>
 8009500:	9a08      	ldr	r2, [sp, #32]
 8009502:	b9fa      	cbnz	r2, 8009544 <_dtoa_r+0xa54>
 8009504:	2b00      	cmp	r3, #0
 8009506:	ddec      	ble.n	80094e2 <_dtoa_r+0x9f2>
 8009508:	4659      	mov	r1, fp
 800950a:	2201      	movs	r2, #1
 800950c:	4620      	mov	r0, r4
 800950e:	f000 fe05 	bl	800a11c <__lshift>
 8009512:	4631      	mov	r1, r6
 8009514:	4683      	mov	fp, r0
 8009516:	f000 fe55 	bl	800a1c4 <__mcmp>
 800951a:	2800      	cmp	r0, #0
 800951c:	dc03      	bgt.n	8009526 <_dtoa_r+0xa36>
 800951e:	d1e0      	bne.n	80094e2 <_dtoa_r+0x9f2>
 8009520:	f018 0f01 	tst.w	r8, #1
 8009524:	d0dd      	beq.n	80094e2 <_dtoa_r+0x9f2>
 8009526:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800952a:	d1d8      	bne.n	80094de <_dtoa_r+0x9ee>
 800952c:	9b07      	ldr	r3, [sp, #28]
 800952e:	9a07      	ldr	r2, [sp, #28]
 8009530:	1c5d      	adds	r5, r3, #1
 8009532:	2339      	movs	r3, #57	; 0x39
 8009534:	7013      	strb	r3, [r2, #0]
 8009536:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800953a:	1e6a      	subs	r2, r5, #1
 800953c:	2b39      	cmp	r3, #57	; 0x39
 800953e:	d04d      	beq.n	80095dc <_dtoa_r+0xaec>
 8009540:	3301      	adds	r3, #1
 8009542:	e052      	b.n	80095ea <_dtoa_r+0xafa>
 8009544:	9a07      	ldr	r2, [sp, #28]
 8009546:	2b00      	cmp	r3, #0
 8009548:	f102 0501 	add.w	r5, r2, #1
 800954c:	dd06      	ble.n	800955c <_dtoa_r+0xa6c>
 800954e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8009552:	d0eb      	beq.n	800952c <_dtoa_r+0xa3c>
 8009554:	f108 0801 	add.w	r8, r8, #1
 8009558:	9b07      	ldr	r3, [sp, #28]
 800955a:	e7c4      	b.n	80094e6 <_dtoa_r+0x9f6>
 800955c:	9b06      	ldr	r3, [sp, #24]
 800955e:	9a04      	ldr	r2, [sp, #16]
 8009560:	1aeb      	subs	r3, r5, r3
 8009562:	4293      	cmp	r3, r2
 8009564:	f805 8c01 	strb.w	r8, [r5, #-1]
 8009568:	d021      	beq.n	80095ae <_dtoa_r+0xabe>
 800956a:	4659      	mov	r1, fp
 800956c:	2300      	movs	r3, #0
 800956e:	220a      	movs	r2, #10
 8009570:	4620      	mov	r0, r4
 8009572:	f000 fc20 	bl	8009db6 <__multadd>
 8009576:	45b9      	cmp	r9, r7
 8009578:	4683      	mov	fp, r0
 800957a:	f04f 0300 	mov.w	r3, #0
 800957e:	f04f 020a 	mov.w	r2, #10
 8009582:	4649      	mov	r1, r9
 8009584:	4620      	mov	r0, r4
 8009586:	d105      	bne.n	8009594 <_dtoa_r+0xaa4>
 8009588:	f000 fc15 	bl	8009db6 <__multadd>
 800958c:	4681      	mov	r9, r0
 800958e:	4607      	mov	r7, r0
 8009590:	9507      	str	r5, [sp, #28]
 8009592:	e778      	b.n	8009486 <_dtoa_r+0x996>
 8009594:	f000 fc0f 	bl	8009db6 <__multadd>
 8009598:	4639      	mov	r1, r7
 800959a:	4681      	mov	r9, r0
 800959c:	2300      	movs	r3, #0
 800959e:	220a      	movs	r2, #10
 80095a0:	4620      	mov	r0, r4
 80095a2:	f000 fc08 	bl	8009db6 <__multadd>
 80095a6:	4607      	mov	r7, r0
 80095a8:	e7f2      	b.n	8009590 <_dtoa_r+0xaa0>
 80095aa:	f04f 0900 	mov.w	r9, #0
 80095ae:	4659      	mov	r1, fp
 80095b0:	2201      	movs	r2, #1
 80095b2:	4620      	mov	r0, r4
 80095b4:	f000 fdb2 	bl	800a11c <__lshift>
 80095b8:	4631      	mov	r1, r6
 80095ba:	4683      	mov	fp, r0
 80095bc:	f000 fe02 	bl	800a1c4 <__mcmp>
 80095c0:	2800      	cmp	r0, #0
 80095c2:	dcb8      	bgt.n	8009536 <_dtoa_r+0xa46>
 80095c4:	d102      	bne.n	80095cc <_dtoa_r+0xadc>
 80095c6:	f018 0f01 	tst.w	r8, #1
 80095ca:	d1b4      	bne.n	8009536 <_dtoa_r+0xa46>
 80095cc:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80095d0:	1e6a      	subs	r2, r5, #1
 80095d2:	2b30      	cmp	r3, #48	; 0x30
 80095d4:	f47f af0f 	bne.w	80093f6 <_dtoa_r+0x906>
 80095d8:	4615      	mov	r5, r2
 80095da:	e7f7      	b.n	80095cc <_dtoa_r+0xadc>
 80095dc:	9b06      	ldr	r3, [sp, #24]
 80095de:	4293      	cmp	r3, r2
 80095e0:	d105      	bne.n	80095ee <_dtoa_r+0xafe>
 80095e2:	2331      	movs	r3, #49	; 0x31
 80095e4:	9a06      	ldr	r2, [sp, #24]
 80095e6:	f10a 0a01 	add.w	sl, sl, #1
 80095ea:	7013      	strb	r3, [r2, #0]
 80095ec:	e703      	b.n	80093f6 <_dtoa_r+0x906>
 80095ee:	4615      	mov	r5, r2
 80095f0:	e7a1      	b.n	8009536 <_dtoa_r+0xa46>
 80095f2:	4b17      	ldr	r3, [pc, #92]	; (8009650 <_dtoa_r+0xb60>)
 80095f4:	f7ff bae1 	b.w	8008bba <_dtoa_r+0xca>
 80095f8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80095fa:	2b00      	cmp	r3, #0
 80095fc:	f47f aabb 	bne.w	8008b76 <_dtoa_r+0x86>
 8009600:	4b14      	ldr	r3, [pc, #80]	; (8009654 <_dtoa_r+0xb64>)
 8009602:	f7ff bada 	b.w	8008bba <_dtoa_r+0xca>
 8009606:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8009608:	2b01      	cmp	r3, #1
 800960a:	f77f ae3f 	ble.w	800928c <_dtoa_r+0x79c>
 800960e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009610:	9308      	str	r3, [sp, #32]
 8009612:	e653      	b.n	80092bc <_dtoa_r+0x7cc>
 8009614:	9b04      	ldr	r3, [sp, #16]
 8009616:	2b00      	cmp	r3, #0
 8009618:	dc03      	bgt.n	8009622 <_dtoa_r+0xb32>
 800961a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800961c:	2b02      	cmp	r3, #2
 800961e:	f73f aed5 	bgt.w	80093cc <_dtoa_r+0x8dc>
 8009622:	9d06      	ldr	r5, [sp, #24]
 8009624:	4631      	mov	r1, r6
 8009626:	4658      	mov	r0, fp
 8009628:	f7ff f9d2 	bl	80089d0 <quorem>
 800962c:	9b06      	ldr	r3, [sp, #24]
 800962e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8009632:	f805 8b01 	strb.w	r8, [r5], #1
 8009636:	9a04      	ldr	r2, [sp, #16]
 8009638:	1aeb      	subs	r3, r5, r3
 800963a:	429a      	cmp	r2, r3
 800963c:	ddb5      	ble.n	80095aa <_dtoa_r+0xaba>
 800963e:	4659      	mov	r1, fp
 8009640:	2300      	movs	r3, #0
 8009642:	220a      	movs	r2, #10
 8009644:	4620      	mov	r0, r4
 8009646:	f000 fbb6 	bl	8009db6 <__multadd>
 800964a:	4683      	mov	fp, r0
 800964c:	e7ea      	b.n	8009624 <_dtoa_r+0xb34>
 800964e:	bf00      	nop
 8009650:	0800b1d4 	.word	0x0800b1d4
 8009654:	0800b250 	.word	0x0800b250

08009658 <rshift>:
 8009658:	b5f0      	push	{r4, r5, r6, r7, lr}
 800965a:	6906      	ldr	r6, [r0, #16]
 800965c:	114b      	asrs	r3, r1, #5
 800965e:	429e      	cmp	r6, r3
 8009660:	f100 0414 	add.w	r4, r0, #20
 8009664:	dd31      	ble.n	80096ca <rshift+0x72>
 8009666:	f011 011f 	ands.w	r1, r1, #31
 800966a:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 800966e:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 8009672:	d108      	bne.n	8009686 <rshift+0x2e>
 8009674:	4621      	mov	r1, r4
 8009676:	42b2      	cmp	r2, r6
 8009678:	460b      	mov	r3, r1
 800967a:	d211      	bcs.n	80096a0 <rshift+0x48>
 800967c:	f852 3b04 	ldr.w	r3, [r2], #4
 8009680:	f841 3b04 	str.w	r3, [r1], #4
 8009684:	e7f7      	b.n	8009676 <rshift+0x1e>
 8009686:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 800968a:	4623      	mov	r3, r4
 800968c:	f1c1 0c20 	rsb	ip, r1, #32
 8009690:	40cd      	lsrs	r5, r1
 8009692:	3204      	adds	r2, #4
 8009694:	42b2      	cmp	r2, r6
 8009696:	4617      	mov	r7, r2
 8009698:	d30d      	bcc.n	80096b6 <rshift+0x5e>
 800969a:	601d      	str	r5, [r3, #0]
 800969c:	b105      	cbz	r5, 80096a0 <rshift+0x48>
 800969e:	3304      	adds	r3, #4
 80096a0:	42a3      	cmp	r3, r4
 80096a2:	eba3 0204 	sub.w	r2, r3, r4
 80096a6:	bf08      	it	eq
 80096a8:	2300      	moveq	r3, #0
 80096aa:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80096ae:	6102      	str	r2, [r0, #16]
 80096b0:	bf08      	it	eq
 80096b2:	6143      	streq	r3, [r0, #20]
 80096b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80096b6:	683f      	ldr	r7, [r7, #0]
 80096b8:	fa07 f70c 	lsl.w	r7, r7, ip
 80096bc:	433d      	orrs	r5, r7
 80096be:	f843 5b04 	str.w	r5, [r3], #4
 80096c2:	f852 5b04 	ldr.w	r5, [r2], #4
 80096c6:	40cd      	lsrs	r5, r1
 80096c8:	e7e4      	b.n	8009694 <rshift+0x3c>
 80096ca:	4623      	mov	r3, r4
 80096cc:	e7e8      	b.n	80096a0 <rshift+0x48>

080096ce <__hexdig_fun>:
 80096ce:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 80096d2:	2b09      	cmp	r3, #9
 80096d4:	d802      	bhi.n	80096dc <__hexdig_fun+0xe>
 80096d6:	3820      	subs	r0, #32
 80096d8:	b2c0      	uxtb	r0, r0
 80096da:	4770      	bx	lr
 80096dc:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 80096e0:	2b05      	cmp	r3, #5
 80096e2:	d801      	bhi.n	80096e8 <__hexdig_fun+0x1a>
 80096e4:	3847      	subs	r0, #71	; 0x47
 80096e6:	e7f7      	b.n	80096d8 <__hexdig_fun+0xa>
 80096e8:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 80096ec:	2b05      	cmp	r3, #5
 80096ee:	d801      	bhi.n	80096f4 <__hexdig_fun+0x26>
 80096f0:	3827      	subs	r0, #39	; 0x27
 80096f2:	e7f1      	b.n	80096d8 <__hexdig_fun+0xa>
 80096f4:	2000      	movs	r0, #0
 80096f6:	4770      	bx	lr

080096f8 <__gethex>:
 80096f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80096fc:	b08b      	sub	sp, #44	; 0x2c
 80096fe:	9002      	str	r0, [sp, #8]
 8009700:	9816      	ldr	r0, [sp, #88]	; 0x58
 8009702:	468a      	mov	sl, r1
 8009704:	4690      	mov	r8, r2
 8009706:	9306      	str	r3, [sp, #24]
 8009708:	f000 fad1 	bl	8009cae <__localeconv_l>
 800970c:	6803      	ldr	r3, [r0, #0]
 800970e:	f04f 0b00 	mov.w	fp, #0
 8009712:	4618      	mov	r0, r3
 8009714:	9303      	str	r3, [sp, #12]
 8009716:	f7f6 fd1b 	bl	8000150 <strlen>
 800971a:	9b03      	ldr	r3, [sp, #12]
 800971c:	9001      	str	r0, [sp, #4]
 800971e:	4403      	add	r3, r0
 8009720:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8009724:	9307      	str	r3, [sp, #28]
 8009726:	f8da 3000 	ldr.w	r3, [sl]
 800972a:	3302      	adds	r3, #2
 800972c:	461f      	mov	r7, r3
 800972e:	f813 0b01 	ldrb.w	r0, [r3], #1
 8009732:	2830      	cmp	r0, #48	; 0x30
 8009734:	d06c      	beq.n	8009810 <__gethex+0x118>
 8009736:	f7ff ffca 	bl	80096ce <__hexdig_fun>
 800973a:	4604      	mov	r4, r0
 800973c:	2800      	cmp	r0, #0
 800973e:	d16a      	bne.n	8009816 <__gethex+0x11e>
 8009740:	9a01      	ldr	r2, [sp, #4]
 8009742:	9903      	ldr	r1, [sp, #12]
 8009744:	4638      	mov	r0, r7
 8009746:	f001 f8f9 	bl	800a93c <strncmp>
 800974a:	2800      	cmp	r0, #0
 800974c:	d166      	bne.n	800981c <__gethex+0x124>
 800974e:	9b01      	ldr	r3, [sp, #4]
 8009750:	5cf8      	ldrb	r0, [r7, r3]
 8009752:	18fe      	adds	r6, r7, r3
 8009754:	f7ff ffbb 	bl	80096ce <__hexdig_fun>
 8009758:	2800      	cmp	r0, #0
 800975a:	d062      	beq.n	8009822 <__gethex+0x12a>
 800975c:	4633      	mov	r3, r6
 800975e:	7818      	ldrb	r0, [r3, #0]
 8009760:	461f      	mov	r7, r3
 8009762:	2830      	cmp	r0, #48	; 0x30
 8009764:	f103 0301 	add.w	r3, r3, #1
 8009768:	d0f9      	beq.n	800975e <__gethex+0x66>
 800976a:	f7ff ffb0 	bl	80096ce <__hexdig_fun>
 800976e:	fab0 f580 	clz	r5, r0
 8009772:	4634      	mov	r4, r6
 8009774:	f04f 0b01 	mov.w	fp, #1
 8009778:	096d      	lsrs	r5, r5, #5
 800977a:	463a      	mov	r2, r7
 800977c:	4616      	mov	r6, r2
 800977e:	7830      	ldrb	r0, [r6, #0]
 8009780:	3201      	adds	r2, #1
 8009782:	f7ff ffa4 	bl	80096ce <__hexdig_fun>
 8009786:	2800      	cmp	r0, #0
 8009788:	d1f8      	bne.n	800977c <__gethex+0x84>
 800978a:	9a01      	ldr	r2, [sp, #4]
 800978c:	9903      	ldr	r1, [sp, #12]
 800978e:	4630      	mov	r0, r6
 8009790:	f001 f8d4 	bl	800a93c <strncmp>
 8009794:	b950      	cbnz	r0, 80097ac <__gethex+0xb4>
 8009796:	b954      	cbnz	r4, 80097ae <__gethex+0xb6>
 8009798:	9b01      	ldr	r3, [sp, #4]
 800979a:	18f4      	adds	r4, r6, r3
 800979c:	4622      	mov	r2, r4
 800979e:	4616      	mov	r6, r2
 80097a0:	7830      	ldrb	r0, [r6, #0]
 80097a2:	3201      	adds	r2, #1
 80097a4:	f7ff ff93 	bl	80096ce <__hexdig_fun>
 80097a8:	2800      	cmp	r0, #0
 80097aa:	d1f8      	bne.n	800979e <__gethex+0xa6>
 80097ac:	b10c      	cbz	r4, 80097b2 <__gethex+0xba>
 80097ae:	1ba4      	subs	r4, r4, r6
 80097b0:	00a4      	lsls	r4, r4, #2
 80097b2:	7833      	ldrb	r3, [r6, #0]
 80097b4:	2b50      	cmp	r3, #80	; 0x50
 80097b6:	d001      	beq.n	80097bc <__gethex+0xc4>
 80097b8:	2b70      	cmp	r3, #112	; 0x70
 80097ba:	d140      	bne.n	800983e <__gethex+0x146>
 80097bc:	7873      	ldrb	r3, [r6, #1]
 80097be:	2b2b      	cmp	r3, #43	; 0x2b
 80097c0:	d031      	beq.n	8009826 <__gethex+0x12e>
 80097c2:	2b2d      	cmp	r3, #45	; 0x2d
 80097c4:	d033      	beq.n	800982e <__gethex+0x136>
 80097c6:	f04f 0900 	mov.w	r9, #0
 80097ca:	1c71      	adds	r1, r6, #1
 80097cc:	7808      	ldrb	r0, [r1, #0]
 80097ce:	f7ff ff7e 	bl	80096ce <__hexdig_fun>
 80097d2:	1e43      	subs	r3, r0, #1
 80097d4:	b2db      	uxtb	r3, r3
 80097d6:	2b18      	cmp	r3, #24
 80097d8:	d831      	bhi.n	800983e <__gethex+0x146>
 80097da:	f1a0 0210 	sub.w	r2, r0, #16
 80097de:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80097e2:	f7ff ff74 	bl	80096ce <__hexdig_fun>
 80097e6:	1e43      	subs	r3, r0, #1
 80097e8:	b2db      	uxtb	r3, r3
 80097ea:	2b18      	cmp	r3, #24
 80097ec:	d922      	bls.n	8009834 <__gethex+0x13c>
 80097ee:	f1b9 0f00 	cmp.w	r9, #0
 80097f2:	d000      	beq.n	80097f6 <__gethex+0xfe>
 80097f4:	4252      	negs	r2, r2
 80097f6:	4414      	add	r4, r2
 80097f8:	f8ca 1000 	str.w	r1, [sl]
 80097fc:	b30d      	cbz	r5, 8009842 <__gethex+0x14a>
 80097fe:	f1bb 0f00 	cmp.w	fp, #0
 8009802:	bf0c      	ite	eq
 8009804:	2706      	moveq	r7, #6
 8009806:	2700      	movne	r7, #0
 8009808:	4638      	mov	r0, r7
 800980a:	b00b      	add	sp, #44	; 0x2c
 800980c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009810:	f10b 0b01 	add.w	fp, fp, #1
 8009814:	e78a      	b.n	800972c <__gethex+0x34>
 8009816:	2500      	movs	r5, #0
 8009818:	462c      	mov	r4, r5
 800981a:	e7ae      	b.n	800977a <__gethex+0x82>
 800981c:	463e      	mov	r6, r7
 800981e:	2501      	movs	r5, #1
 8009820:	e7c7      	b.n	80097b2 <__gethex+0xba>
 8009822:	4604      	mov	r4, r0
 8009824:	e7fb      	b.n	800981e <__gethex+0x126>
 8009826:	f04f 0900 	mov.w	r9, #0
 800982a:	1cb1      	adds	r1, r6, #2
 800982c:	e7ce      	b.n	80097cc <__gethex+0xd4>
 800982e:	f04f 0901 	mov.w	r9, #1
 8009832:	e7fa      	b.n	800982a <__gethex+0x132>
 8009834:	230a      	movs	r3, #10
 8009836:	fb03 0202 	mla	r2, r3, r2, r0
 800983a:	3a10      	subs	r2, #16
 800983c:	e7cf      	b.n	80097de <__gethex+0xe6>
 800983e:	4631      	mov	r1, r6
 8009840:	e7da      	b.n	80097f8 <__gethex+0x100>
 8009842:	4629      	mov	r1, r5
 8009844:	1bf3      	subs	r3, r6, r7
 8009846:	3b01      	subs	r3, #1
 8009848:	2b07      	cmp	r3, #7
 800984a:	dc49      	bgt.n	80098e0 <__gethex+0x1e8>
 800984c:	9802      	ldr	r0, [sp, #8]
 800984e:	f000 fa67 	bl	8009d20 <_Balloc>
 8009852:	f04f 0b00 	mov.w	fp, #0
 8009856:	4605      	mov	r5, r0
 8009858:	46da      	mov	sl, fp
 800985a:	9b01      	ldr	r3, [sp, #4]
 800985c:	f100 0914 	add.w	r9, r0, #20
 8009860:	f1c3 0301 	rsb	r3, r3, #1
 8009864:	f8cd 9010 	str.w	r9, [sp, #16]
 8009868:	9308      	str	r3, [sp, #32]
 800986a:	42b7      	cmp	r7, r6
 800986c:	d33b      	bcc.n	80098e6 <__gethex+0x1ee>
 800986e:	9804      	ldr	r0, [sp, #16]
 8009870:	f840 ab04 	str.w	sl, [r0], #4
 8009874:	eba0 0009 	sub.w	r0, r0, r9
 8009878:	1080      	asrs	r0, r0, #2
 800987a:	6128      	str	r0, [r5, #16]
 800987c:	0147      	lsls	r7, r0, #5
 800987e:	4650      	mov	r0, sl
 8009880:	f000 fb12 	bl	8009ea8 <__hi0bits>
 8009884:	f8d8 6000 	ldr.w	r6, [r8]
 8009888:	1a3f      	subs	r7, r7, r0
 800988a:	42b7      	cmp	r7, r6
 800988c:	dd64      	ble.n	8009958 <__gethex+0x260>
 800988e:	1bbf      	subs	r7, r7, r6
 8009890:	4639      	mov	r1, r7
 8009892:	4628      	mov	r0, r5
 8009894:	f000 fe1b 	bl	800a4ce <__any_on>
 8009898:	4682      	mov	sl, r0
 800989a:	b178      	cbz	r0, 80098bc <__gethex+0x1c4>
 800989c:	f04f 0a01 	mov.w	sl, #1
 80098a0:	1e7b      	subs	r3, r7, #1
 80098a2:	1159      	asrs	r1, r3, #5
 80098a4:	f003 021f 	and.w	r2, r3, #31
 80098a8:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 80098ac:	fa0a f202 	lsl.w	r2, sl, r2
 80098b0:	420a      	tst	r2, r1
 80098b2:	d003      	beq.n	80098bc <__gethex+0x1c4>
 80098b4:	4553      	cmp	r3, sl
 80098b6:	dc46      	bgt.n	8009946 <__gethex+0x24e>
 80098b8:	f04f 0a02 	mov.w	sl, #2
 80098bc:	4639      	mov	r1, r7
 80098be:	4628      	mov	r0, r5
 80098c0:	f7ff feca 	bl	8009658 <rshift>
 80098c4:	443c      	add	r4, r7
 80098c6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80098ca:	42a3      	cmp	r3, r4
 80098cc:	da52      	bge.n	8009974 <__gethex+0x27c>
 80098ce:	4629      	mov	r1, r5
 80098d0:	9802      	ldr	r0, [sp, #8]
 80098d2:	f000 fa59 	bl	8009d88 <_Bfree>
 80098d6:	2300      	movs	r3, #0
 80098d8:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80098da:	27a3      	movs	r7, #163	; 0xa3
 80098dc:	6013      	str	r3, [r2, #0]
 80098de:	e793      	b.n	8009808 <__gethex+0x110>
 80098e0:	3101      	adds	r1, #1
 80098e2:	105b      	asrs	r3, r3, #1
 80098e4:	e7b0      	b.n	8009848 <__gethex+0x150>
 80098e6:	1e73      	subs	r3, r6, #1
 80098e8:	9305      	str	r3, [sp, #20]
 80098ea:	9a07      	ldr	r2, [sp, #28]
 80098ec:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80098f0:	4293      	cmp	r3, r2
 80098f2:	d018      	beq.n	8009926 <__gethex+0x22e>
 80098f4:	f1bb 0f20 	cmp.w	fp, #32
 80098f8:	d107      	bne.n	800990a <__gethex+0x212>
 80098fa:	9b04      	ldr	r3, [sp, #16]
 80098fc:	f8c3 a000 	str.w	sl, [r3]
 8009900:	f04f 0a00 	mov.w	sl, #0
 8009904:	46d3      	mov	fp, sl
 8009906:	3304      	adds	r3, #4
 8009908:	9304      	str	r3, [sp, #16]
 800990a:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800990e:	f7ff fede 	bl	80096ce <__hexdig_fun>
 8009912:	f000 000f 	and.w	r0, r0, #15
 8009916:	fa00 f00b 	lsl.w	r0, r0, fp
 800991a:	ea4a 0a00 	orr.w	sl, sl, r0
 800991e:	f10b 0b04 	add.w	fp, fp, #4
 8009922:	9b05      	ldr	r3, [sp, #20]
 8009924:	e00d      	b.n	8009942 <__gethex+0x24a>
 8009926:	9b05      	ldr	r3, [sp, #20]
 8009928:	9a08      	ldr	r2, [sp, #32]
 800992a:	4413      	add	r3, r2
 800992c:	42bb      	cmp	r3, r7
 800992e:	d3e1      	bcc.n	80098f4 <__gethex+0x1fc>
 8009930:	4618      	mov	r0, r3
 8009932:	9a01      	ldr	r2, [sp, #4]
 8009934:	9903      	ldr	r1, [sp, #12]
 8009936:	9309      	str	r3, [sp, #36]	; 0x24
 8009938:	f001 f800 	bl	800a93c <strncmp>
 800993c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800993e:	2800      	cmp	r0, #0
 8009940:	d1d8      	bne.n	80098f4 <__gethex+0x1fc>
 8009942:	461e      	mov	r6, r3
 8009944:	e791      	b.n	800986a <__gethex+0x172>
 8009946:	1eb9      	subs	r1, r7, #2
 8009948:	4628      	mov	r0, r5
 800994a:	f000 fdc0 	bl	800a4ce <__any_on>
 800994e:	2800      	cmp	r0, #0
 8009950:	d0b2      	beq.n	80098b8 <__gethex+0x1c0>
 8009952:	f04f 0a03 	mov.w	sl, #3
 8009956:	e7b1      	b.n	80098bc <__gethex+0x1c4>
 8009958:	da09      	bge.n	800996e <__gethex+0x276>
 800995a:	1bf7      	subs	r7, r6, r7
 800995c:	4629      	mov	r1, r5
 800995e:	463a      	mov	r2, r7
 8009960:	9802      	ldr	r0, [sp, #8]
 8009962:	f000 fbdb 	bl	800a11c <__lshift>
 8009966:	4605      	mov	r5, r0
 8009968:	1be4      	subs	r4, r4, r7
 800996a:	f100 0914 	add.w	r9, r0, #20
 800996e:	f04f 0a00 	mov.w	sl, #0
 8009972:	e7a8      	b.n	80098c6 <__gethex+0x1ce>
 8009974:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8009978:	42a0      	cmp	r0, r4
 800997a:	dd6b      	ble.n	8009a54 <__gethex+0x35c>
 800997c:	1b04      	subs	r4, r0, r4
 800997e:	42a6      	cmp	r6, r4
 8009980:	dc2e      	bgt.n	80099e0 <__gethex+0x2e8>
 8009982:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8009986:	2b02      	cmp	r3, #2
 8009988:	d022      	beq.n	80099d0 <__gethex+0x2d8>
 800998a:	2b03      	cmp	r3, #3
 800998c:	d024      	beq.n	80099d8 <__gethex+0x2e0>
 800998e:	2b01      	cmp	r3, #1
 8009990:	d115      	bne.n	80099be <__gethex+0x2c6>
 8009992:	42a6      	cmp	r6, r4
 8009994:	d113      	bne.n	80099be <__gethex+0x2c6>
 8009996:	2e01      	cmp	r6, #1
 8009998:	dc0b      	bgt.n	80099b2 <__gethex+0x2ba>
 800999a:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800999e:	9a06      	ldr	r2, [sp, #24]
 80099a0:	2762      	movs	r7, #98	; 0x62
 80099a2:	6013      	str	r3, [r2, #0]
 80099a4:	2301      	movs	r3, #1
 80099a6:	612b      	str	r3, [r5, #16]
 80099a8:	f8c9 3000 	str.w	r3, [r9]
 80099ac:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80099ae:	601d      	str	r5, [r3, #0]
 80099b0:	e72a      	b.n	8009808 <__gethex+0x110>
 80099b2:	1e71      	subs	r1, r6, #1
 80099b4:	4628      	mov	r0, r5
 80099b6:	f000 fd8a 	bl	800a4ce <__any_on>
 80099ba:	2800      	cmp	r0, #0
 80099bc:	d1ed      	bne.n	800999a <__gethex+0x2a2>
 80099be:	4629      	mov	r1, r5
 80099c0:	9802      	ldr	r0, [sp, #8]
 80099c2:	f000 f9e1 	bl	8009d88 <_Bfree>
 80099c6:	2300      	movs	r3, #0
 80099c8:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80099ca:	2750      	movs	r7, #80	; 0x50
 80099cc:	6013      	str	r3, [r2, #0]
 80099ce:	e71b      	b.n	8009808 <__gethex+0x110>
 80099d0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80099d2:	2b00      	cmp	r3, #0
 80099d4:	d0e1      	beq.n	800999a <__gethex+0x2a2>
 80099d6:	e7f2      	b.n	80099be <__gethex+0x2c6>
 80099d8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80099da:	2b00      	cmp	r3, #0
 80099dc:	d1dd      	bne.n	800999a <__gethex+0x2a2>
 80099de:	e7ee      	b.n	80099be <__gethex+0x2c6>
 80099e0:	1e67      	subs	r7, r4, #1
 80099e2:	f1ba 0f00 	cmp.w	sl, #0
 80099e6:	d132      	bne.n	8009a4e <__gethex+0x356>
 80099e8:	b127      	cbz	r7, 80099f4 <__gethex+0x2fc>
 80099ea:	4639      	mov	r1, r7
 80099ec:	4628      	mov	r0, r5
 80099ee:	f000 fd6e 	bl	800a4ce <__any_on>
 80099f2:	4682      	mov	sl, r0
 80099f4:	2301      	movs	r3, #1
 80099f6:	117a      	asrs	r2, r7, #5
 80099f8:	f007 071f 	and.w	r7, r7, #31
 80099fc:	fa03 f707 	lsl.w	r7, r3, r7
 8009a00:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 8009a04:	4621      	mov	r1, r4
 8009a06:	421f      	tst	r7, r3
 8009a08:	f04f 0702 	mov.w	r7, #2
 8009a0c:	4628      	mov	r0, r5
 8009a0e:	bf18      	it	ne
 8009a10:	f04a 0a02 	orrne.w	sl, sl, #2
 8009a14:	1b36      	subs	r6, r6, r4
 8009a16:	f7ff fe1f 	bl	8009658 <rshift>
 8009a1a:	f8d8 4004 	ldr.w	r4, [r8, #4]
 8009a1e:	f1ba 0f00 	cmp.w	sl, #0
 8009a22:	d048      	beq.n	8009ab6 <__gethex+0x3be>
 8009a24:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8009a28:	2b02      	cmp	r3, #2
 8009a2a:	d015      	beq.n	8009a58 <__gethex+0x360>
 8009a2c:	2b03      	cmp	r3, #3
 8009a2e:	d017      	beq.n	8009a60 <__gethex+0x368>
 8009a30:	2b01      	cmp	r3, #1
 8009a32:	d109      	bne.n	8009a48 <__gethex+0x350>
 8009a34:	f01a 0f02 	tst.w	sl, #2
 8009a38:	d006      	beq.n	8009a48 <__gethex+0x350>
 8009a3a:	f8d9 3000 	ldr.w	r3, [r9]
 8009a3e:	ea4a 0a03 	orr.w	sl, sl, r3
 8009a42:	f01a 0f01 	tst.w	sl, #1
 8009a46:	d10e      	bne.n	8009a66 <__gethex+0x36e>
 8009a48:	f047 0710 	orr.w	r7, r7, #16
 8009a4c:	e033      	b.n	8009ab6 <__gethex+0x3be>
 8009a4e:	f04f 0a01 	mov.w	sl, #1
 8009a52:	e7cf      	b.n	80099f4 <__gethex+0x2fc>
 8009a54:	2701      	movs	r7, #1
 8009a56:	e7e2      	b.n	8009a1e <__gethex+0x326>
 8009a58:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009a5a:	f1c3 0301 	rsb	r3, r3, #1
 8009a5e:	9315      	str	r3, [sp, #84]	; 0x54
 8009a60:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009a62:	2b00      	cmp	r3, #0
 8009a64:	d0f0      	beq.n	8009a48 <__gethex+0x350>
 8009a66:	f04f 0c00 	mov.w	ip, #0
 8009a6a:	f8d5 9010 	ldr.w	r9, [r5, #16]
 8009a6e:	f105 0314 	add.w	r3, r5, #20
 8009a72:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 8009a76:	eb03 010a 	add.w	r1, r3, sl
 8009a7a:	4618      	mov	r0, r3
 8009a7c:	f853 2b04 	ldr.w	r2, [r3], #4
 8009a80:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
 8009a84:	d01c      	beq.n	8009ac0 <__gethex+0x3c8>
 8009a86:	3201      	adds	r2, #1
 8009a88:	6002      	str	r2, [r0, #0]
 8009a8a:	2f02      	cmp	r7, #2
 8009a8c:	f105 0314 	add.w	r3, r5, #20
 8009a90:	d138      	bne.n	8009b04 <__gethex+0x40c>
 8009a92:	f8d8 2000 	ldr.w	r2, [r8]
 8009a96:	3a01      	subs	r2, #1
 8009a98:	42b2      	cmp	r2, r6
 8009a9a:	d10a      	bne.n	8009ab2 <__gethex+0x3ba>
 8009a9c:	2201      	movs	r2, #1
 8009a9e:	1171      	asrs	r1, r6, #5
 8009aa0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8009aa4:	f006 061f 	and.w	r6, r6, #31
 8009aa8:	fa02 f606 	lsl.w	r6, r2, r6
 8009aac:	421e      	tst	r6, r3
 8009aae:	bf18      	it	ne
 8009ab0:	4617      	movne	r7, r2
 8009ab2:	f047 0720 	orr.w	r7, r7, #32
 8009ab6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009ab8:	601d      	str	r5, [r3, #0]
 8009aba:	9b06      	ldr	r3, [sp, #24]
 8009abc:	601c      	str	r4, [r3, #0]
 8009abe:	e6a3      	b.n	8009808 <__gethex+0x110>
 8009ac0:	4299      	cmp	r1, r3
 8009ac2:	f843 cc04 	str.w	ip, [r3, #-4]
 8009ac6:	d8d8      	bhi.n	8009a7a <__gethex+0x382>
 8009ac8:	68ab      	ldr	r3, [r5, #8]
 8009aca:	4599      	cmp	r9, r3
 8009acc:	db12      	blt.n	8009af4 <__gethex+0x3fc>
 8009ace:	6869      	ldr	r1, [r5, #4]
 8009ad0:	9802      	ldr	r0, [sp, #8]
 8009ad2:	3101      	adds	r1, #1
 8009ad4:	f000 f924 	bl	8009d20 <_Balloc>
 8009ad8:	4683      	mov	fp, r0
 8009ada:	692a      	ldr	r2, [r5, #16]
 8009adc:	f105 010c 	add.w	r1, r5, #12
 8009ae0:	3202      	adds	r2, #2
 8009ae2:	0092      	lsls	r2, r2, #2
 8009ae4:	300c      	adds	r0, #12
 8009ae6:	f7fd f9e7 	bl	8006eb8 <memcpy>
 8009aea:	4629      	mov	r1, r5
 8009aec:	9802      	ldr	r0, [sp, #8]
 8009aee:	f000 f94b 	bl	8009d88 <_Bfree>
 8009af2:	465d      	mov	r5, fp
 8009af4:	692b      	ldr	r3, [r5, #16]
 8009af6:	1c5a      	adds	r2, r3, #1
 8009af8:	612a      	str	r2, [r5, #16]
 8009afa:	2201      	movs	r2, #1
 8009afc:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8009b00:	615a      	str	r2, [r3, #20]
 8009b02:	e7c2      	b.n	8009a8a <__gethex+0x392>
 8009b04:	692a      	ldr	r2, [r5, #16]
 8009b06:	454a      	cmp	r2, r9
 8009b08:	dd0b      	ble.n	8009b22 <__gethex+0x42a>
 8009b0a:	2101      	movs	r1, #1
 8009b0c:	4628      	mov	r0, r5
 8009b0e:	f7ff fda3 	bl	8009658 <rshift>
 8009b12:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8009b16:	3401      	adds	r4, #1
 8009b18:	42a3      	cmp	r3, r4
 8009b1a:	f6ff aed8 	blt.w	80098ce <__gethex+0x1d6>
 8009b1e:	2701      	movs	r7, #1
 8009b20:	e7c7      	b.n	8009ab2 <__gethex+0x3ba>
 8009b22:	f016 061f 	ands.w	r6, r6, #31
 8009b26:	d0fa      	beq.n	8009b1e <__gethex+0x426>
 8009b28:	449a      	add	sl, r3
 8009b2a:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 8009b2e:	f000 f9bb 	bl	8009ea8 <__hi0bits>
 8009b32:	f1c6 0620 	rsb	r6, r6, #32
 8009b36:	42b0      	cmp	r0, r6
 8009b38:	dbe7      	blt.n	8009b0a <__gethex+0x412>
 8009b3a:	e7f0      	b.n	8009b1e <__gethex+0x426>

08009b3c <L_shift>:
 8009b3c:	f1c2 0208 	rsb	r2, r2, #8
 8009b40:	0092      	lsls	r2, r2, #2
 8009b42:	b570      	push	{r4, r5, r6, lr}
 8009b44:	f1c2 0620 	rsb	r6, r2, #32
 8009b48:	6843      	ldr	r3, [r0, #4]
 8009b4a:	6804      	ldr	r4, [r0, #0]
 8009b4c:	fa03 f506 	lsl.w	r5, r3, r6
 8009b50:	432c      	orrs	r4, r5
 8009b52:	40d3      	lsrs	r3, r2
 8009b54:	6004      	str	r4, [r0, #0]
 8009b56:	f840 3f04 	str.w	r3, [r0, #4]!
 8009b5a:	4288      	cmp	r0, r1
 8009b5c:	d3f4      	bcc.n	8009b48 <L_shift+0xc>
 8009b5e:	bd70      	pop	{r4, r5, r6, pc}

08009b60 <__match>:
 8009b60:	b530      	push	{r4, r5, lr}
 8009b62:	6803      	ldr	r3, [r0, #0]
 8009b64:	3301      	adds	r3, #1
 8009b66:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009b6a:	b914      	cbnz	r4, 8009b72 <__match+0x12>
 8009b6c:	6003      	str	r3, [r0, #0]
 8009b6e:	2001      	movs	r0, #1
 8009b70:	bd30      	pop	{r4, r5, pc}
 8009b72:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009b76:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8009b7a:	2d19      	cmp	r5, #25
 8009b7c:	bf98      	it	ls
 8009b7e:	3220      	addls	r2, #32
 8009b80:	42a2      	cmp	r2, r4
 8009b82:	d0f0      	beq.n	8009b66 <__match+0x6>
 8009b84:	2000      	movs	r0, #0
 8009b86:	e7f3      	b.n	8009b70 <__match+0x10>

08009b88 <__hexnan>:
 8009b88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009b8c:	2500      	movs	r5, #0
 8009b8e:	680b      	ldr	r3, [r1, #0]
 8009b90:	4682      	mov	sl, r0
 8009b92:	115f      	asrs	r7, r3, #5
 8009b94:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 8009b98:	f013 031f 	ands.w	r3, r3, #31
 8009b9c:	bf18      	it	ne
 8009b9e:	3704      	addne	r7, #4
 8009ba0:	1f3e      	subs	r6, r7, #4
 8009ba2:	4690      	mov	r8, r2
 8009ba4:	46b1      	mov	r9, r6
 8009ba6:	4634      	mov	r4, r6
 8009ba8:	46ab      	mov	fp, r5
 8009baa:	b087      	sub	sp, #28
 8009bac:	6801      	ldr	r1, [r0, #0]
 8009bae:	9301      	str	r3, [sp, #4]
 8009bb0:	f847 5c04 	str.w	r5, [r7, #-4]
 8009bb4:	9502      	str	r5, [sp, #8]
 8009bb6:	784a      	ldrb	r2, [r1, #1]
 8009bb8:	1c4b      	adds	r3, r1, #1
 8009bba:	9303      	str	r3, [sp, #12]
 8009bbc:	b342      	cbz	r2, 8009c10 <__hexnan+0x88>
 8009bbe:	4610      	mov	r0, r2
 8009bc0:	9105      	str	r1, [sp, #20]
 8009bc2:	9204      	str	r2, [sp, #16]
 8009bc4:	f7ff fd83 	bl	80096ce <__hexdig_fun>
 8009bc8:	2800      	cmp	r0, #0
 8009bca:	d143      	bne.n	8009c54 <__hexnan+0xcc>
 8009bcc:	9a04      	ldr	r2, [sp, #16]
 8009bce:	9905      	ldr	r1, [sp, #20]
 8009bd0:	2a20      	cmp	r2, #32
 8009bd2:	d818      	bhi.n	8009c06 <__hexnan+0x7e>
 8009bd4:	9b02      	ldr	r3, [sp, #8]
 8009bd6:	459b      	cmp	fp, r3
 8009bd8:	dd13      	ble.n	8009c02 <__hexnan+0x7a>
 8009bda:	454c      	cmp	r4, r9
 8009bdc:	d206      	bcs.n	8009bec <__hexnan+0x64>
 8009bde:	2d07      	cmp	r5, #7
 8009be0:	dc04      	bgt.n	8009bec <__hexnan+0x64>
 8009be2:	462a      	mov	r2, r5
 8009be4:	4649      	mov	r1, r9
 8009be6:	4620      	mov	r0, r4
 8009be8:	f7ff ffa8 	bl	8009b3c <L_shift>
 8009bec:	4544      	cmp	r4, r8
 8009bee:	d944      	bls.n	8009c7a <__hexnan+0xf2>
 8009bf0:	2300      	movs	r3, #0
 8009bf2:	f1a4 0904 	sub.w	r9, r4, #4
 8009bf6:	f844 3c04 	str.w	r3, [r4, #-4]
 8009bfa:	461d      	mov	r5, r3
 8009bfc:	464c      	mov	r4, r9
 8009bfe:	f8cd b008 	str.w	fp, [sp, #8]
 8009c02:	9903      	ldr	r1, [sp, #12]
 8009c04:	e7d7      	b.n	8009bb6 <__hexnan+0x2e>
 8009c06:	2a29      	cmp	r2, #41	; 0x29
 8009c08:	d14a      	bne.n	8009ca0 <__hexnan+0x118>
 8009c0a:	3102      	adds	r1, #2
 8009c0c:	f8ca 1000 	str.w	r1, [sl]
 8009c10:	f1bb 0f00 	cmp.w	fp, #0
 8009c14:	d044      	beq.n	8009ca0 <__hexnan+0x118>
 8009c16:	454c      	cmp	r4, r9
 8009c18:	d206      	bcs.n	8009c28 <__hexnan+0xa0>
 8009c1a:	2d07      	cmp	r5, #7
 8009c1c:	dc04      	bgt.n	8009c28 <__hexnan+0xa0>
 8009c1e:	462a      	mov	r2, r5
 8009c20:	4649      	mov	r1, r9
 8009c22:	4620      	mov	r0, r4
 8009c24:	f7ff ff8a 	bl	8009b3c <L_shift>
 8009c28:	4544      	cmp	r4, r8
 8009c2a:	d928      	bls.n	8009c7e <__hexnan+0xf6>
 8009c2c:	4643      	mov	r3, r8
 8009c2e:	f854 2b04 	ldr.w	r2, [r4], #4
 8009c32:	42a6      	cmp	r6, r4
 8009c34:	f843 2b04 	str.w	r2, [r3], #4
 8009c38:	d2f9      	bcs.n	8009c2e <__hexnan+0xa6>
 8009c3a:	2200      	movs	r2, #0
 8009c3c:	f843 2b04 	str.w	r2, [r3], #4
 8009c40:	429e      	cmp	r6, r3
 8009c42:	d2fb      	bcs.n	8009c3c <__hexnan+0xb4>
 8009c44:	6833      	ldr	r3, [r6, #0]
 8009c46:	b91b      	cbnz	r3, 8009c50 <__hexnan+0xc8>
 8009c48:	4546      	cmp	r6, r8
 8009c4a:	d127      	bne.n	8009c9c <__hexnan+0x114>
 8009c4c:	2301      	movs	r3, #1
 8009c4e:	6033      	str	r3, [r6, #0]
 8009c50:	2005      	movs	r0, #5
 8009c52:	e026      	b.n	8009ca2 <__hexnan+0x11a>
 8009c54:	3501      	adds	r5, #1
 8009c56:	2d08      	cmp	r5, #8
 8009c58:	f10b 0b01 	add.w	fp, fp, #1
 8009c5c:	dd06      	ble.n	8009c6c <__hexnan+0xe4>
 8009c5e:	4544      	cmp	r4, r8
 8009c60:	d9cf      	bls.n	8009c02 <__hexnan+0x7a>
 8009c62:	2300      	movs	r3, #0
 8009c64:	2501      	movs	r5, #1
 8009c66:	f844 3c04 	str.w	r3, [r4, #-4]
 8009c6a:	3c04      	subs	r4, #4
 8009c6c:	6822      	ldr	r2, [r4, #0]
 8009c6e:	f000 000f 	and.w	r0, r0, #15
 8009c72:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8009c76:	6020      	str	r0, [r4, #0]
 8009c78:	e7c3      	b.n	8009c02 <__hexnan+0x7a>
 8009c7a:	2508      	movs	r5, #8
 8009c7c:	e7c1      	b.n	8009c02 <__hexnan+0x7a>
 8009c7e:	9b01      	ldr	r3, [sp, #4]
 8009c80:	2b00      	cmp	r3, #0
 8009c82:	d0df      	beq.n	8009c44 <__hexnan+0xbc>
 8009c84:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009c88:	f1c3 0320 	rsb	r3, r3, #32
 8009c8c:	fa22 f303 	lsr.w	r3, r2, r3
 8009c90:	f857 2c04 	ldr.w	r2, [r7, #-4]
 8009c94:	401a      	ands	r2, r3
 8009c96:	f847 2c04 	str.w	r2, [r7, #-4]
 8009c9a:	e7d3      	b.n	8009c44 <__hexnan+0xbc>
 8009c9c:	3e04      	subs	r6, #4
 8009c9e:	e7d1      	b.n	8009c44 <__hexnan+0xbc>
 8009ca0:	2004      	movs	r0, #4
 8009ca2:	b007      	add	sp, #28
 8009ca4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08009ca8 <__locale_ctype_ptr_l>:
 8009ca8:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 8009cac:	4770      	bx	lr

08009cae <__localeconv_l>:
 8009cae:	30f0      	adds	r0, #240	; 0xf0
 8009cb0:	4770      	bx	lr
	...

08009cb4 <_localeconv_r>:
 8009cb4:	4b04      	ldr	r3, [pc, #16]	; (8009cc8 <_localeconv_r+0x14>)
 8009cb6:	681b      	ldr	r3, [r3, #0]
 8009cb8:	6a18      	ldr	r0, [r3, #32]
 8009cba:	4b04      	ldr	r3, [pc, #16]	; (8009ccc <_localeconv_r+0x18>)
 8009cbc:	2800      	cmp	r0, #0
 8009cbe:	bf08      	it	eq
 8009cc0:	4618      	moveq	r0, r3
 8009cc2:	30f0      	adds	r0, #240	; 0xf0
 8009cc4:	4770      	bx	lr
 8009cc6:	bf00      	nop
 8009cc8:	20000024 	.word	0x20000024
 8009ccc:	20000088 	.word	0x20000088

08009cd0 <malloc>:
 8009cd0:	4b02      	ldr	r3, [pc, #8]	; (8009cdc <malloc+0xc>)
 8009cd2:	4601      	mov	r1, r0
 8009cd4:	6818      	ldr	r0, [r3, #0]
 8009cd6:	f000 bc75 	b.w	800a5c4 <_malloc_r>
 8009cda:	bf00      	nop
 8009cdc:	20000024 	.word	0x20000024

08009ce0 <__ascii_mbtowc>:
 8009ce0:	b082      	sub	sp, #8
 8009ce2:	b901      	cbnz	r1, 8009ce6 <__ascii_mbtowc+0x6>
 8009ce4:	a901      	add	r1, sp, #4
 8009ce6:	b142      	cbz	r2, 8009cfa <__ascii_mbtowc+0x1a>
 8009ce8:	b14b      	cbz	r3, 8009cfe <__ascii_mbtowc+0x1e>
 8009cea:	7813      	ldrb	r3, [r2, #0]
 8009cec:	600b      	str	r3, [r1, #0]
 8009cee:	7812      	ldrb	r2, [r2, #0]
 8009cf0:	1c10      	adds	r0, r2, #0
 8009cf2:	bf18      	it	ne
 8009cf4:	2001      	movne	r0, #1
 8009cf6:	b002      	add	sp, #8
 8009cf8:	4770      	bx	lr
 8009cfa:	4610      	mov	r0, r2
 8009cfc:	e7fb      	b.n	8009cf6 <__ascii_mbtowc+0x16>
 8009cfe:	f06f 0001 	mvn.w	r0, #1
 8009d02:	e7f8      	b.n	8009cf6 <__ascii_mbtowc+0x16>

08009d04 <memchr>:
 8009d04:	b510      	push	{r4, lr}
 8009d06:	b2c9      	uxtb	r1, r1
 8009d08:	4402      	add	r2, r0
 8009d0a:	4290      	cmp	r0, r2
 8009d0c:	4603      	mov	r3, r0
 8009d0e:	d101      	bne.n	8009d14 <memchr+0x10>
 8009d10:	2300      	movs	r3, #0
 8009d12:	e003      	b.n	8009d1c <memchr+0x18>
 8009d14:	781c      	ldrb	r4, [r3, #0]
 8009d16:	3001      	adds	r0, #1
 8009d18:	428c      	cmp	r4, r1
 8009d1a:	d1f6      	bne.n	8009d0a <memchr+0x6>
 8009d1c:	4618      	mov	r0, r3
 8009d1e:	bd10      	pop	{r4, pc}

08009d20 <_Balloc>:
 8009d20:	b570      	push	{r4, r5, r6, lr}
 8009d22:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8009d24:	4604      	mov	r4, r0
 8009d26:	460e      	mov	r6, r1
 8009d28:	b93d      	cbnz	r5, 8009d3a <_Balloc+0x1a>
 8009d2a:	2010      	movs	r0, #16
 8009d2c:	f7ff ffd0 	bl	8009cd0 <malloc>
 8009d30:	6260      	str	r0, [r4, #36]	; 0x24
 8009d32:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8009d36:	6005      	str	r5, [r0, #0]
 8009d38:	60c5      	str	r5, [r0, #12]
 8009d3a:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8009d3c:	68eb      	ldr	r3, [r5, #12]
 8009d3e:	b183      	cbz	r3, 8009d62 <_Balloc+0x42>
 8009d40:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009d42:	68db      	ldr	r3, [r3, #12]
 8009d44:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8009d48:	b9b8      	cbnz	r0, 8009d7a <_Balloc+0x5a>
 8009d4a:	2101      	movs	r1, #1
 8009d4c:	fa01 f506 	lsl.w	r5, r1, r6
 8009d50:	1d6a      	adds	r2, r5, #5
 8009d52:	0092      	lsls	r2, r2, #2
 8009d54:	4620      	mov	r0, r4
 8009d56:	f000 fbdb 	bl	800a510 <_calloc_r>
 8009d5a:	b160      	cbz	r0, 8009d76 <_Balloc+0x56>
 8009d5c:	e9c0 6501 	strd	r6, r5, [r0, #4]
 8009d60:	e00e      	b.n	8009d80 <_Balloc+0x60>
 8009d62:	2221      	movs	r2, #33	; 0x21
 8009d64:	2104      	movs	r1, #4
 8009d66:	4620      	mov	r0, r4
 8009d68:	f000 fbd2 	bl	800a510 <_calloc_r>
 8009d6c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009d6e:	60e8      	str	r0, [r5, #12]
 8009d70:	68db      	ldr	r3, [r3, #12]
 8009d72:	2b00      	cmp	r3, #0
 8009d74:	d1e4      	bne.n	8009d40 <_Balloc+0x20>
 8009d76:	2000      	movs	r0, #0
 8009d78:	bd70      	pop	{r4, r5, r6, pc}
 8009d7a:	6802      	ldr	r2, [r0, #0]
 8009d7c:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8009d80:	2300      	movs	r3, #0
 8009d82:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009d86:	e7f7      	b.n	8009d78 <_Balloc+0x58>

08009d88 <_Bfree>:
 8009d88:	b570      	push	{r4, r5, r6, lr}
 8009d8a:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8009d8c:	4606      	mov	r6, r0
 8009d8e:	460d      	mov	r5, r1
 8009d90:	b93c      	cbnz	r4, 8009da2 <_Bfree+0x1a>
 8009d92:	2010      	movs	r0, #16
 8009d94:	f7ff ff9c 	bl	8009cd0 <malloc>
 8009d98:	6270      	str	r0, [r6, #36]	; 0x24
 8009d9a:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009d9e:	6004      	str	r4, [r0, #0]
 8009da0:	60c4      	str	r4, [r0, #12]
 8009da2:	b13d      	cbz	r5, 8009db4 <_Bfree+0x2c>
 8009da4:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8009da6:	686a      	ldr	r2, [r5, #4]
 8009da8:	68db      	ldr	r3, [r3, #12]
 8009daa:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009dae:	6029      	str	r1, [r5, #0]
 8009db0:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8009db4:	bd70      	pop	{r4, r5, r6, pc}

08009db6 <__multadd>:
 8009db6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009dba:	461f      	mov	r7, r3
 8009dbc:	4606      	mov	r6, r0
 8009dbe:	460c      	mov	r4, r1
 8009dc0:	2300      	movs	r3, #0
 8009dc2:	690d      	ldr	r5, [r1, #16]
 8009dc4:	f101 0c14 	add.w	ip, r1, #20
 8009dc8:	f8dc 0000 	ldr.w	r0, [ip]
 8009dcc:	3301      	adds	r3, #1
 8009dce:	b281      	uxth	r1, r0
 8009dd0:	fb02 7101 	mla	r1, r2, r1, r7
 8009dd4:	0c00      	lsrs	r0, r0, #16
 8009dd6:	0c0f      	lsrs	r7, r1, #16
 8009dd8:	fb02 7000 	mla	r0, r2, r0, r7
 8009ddc:	b289      	uxth	r1, r1
 8009dde:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8009de2:	429d      	cmp	r5, r3
 8009de4:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8009de8:	f84c 1b04 	str.w	r1, [ip], #4
 8009dec:	dcec      	bgt.n	8009dc8 <__multadd+0x12>
 8009dee:	b1d7      	cbz	r7, 8009e26 <__multadd+0x70>
 8009df0:	68a3      	ldr	r3, [r4, #8]
 8009df2:	42ab      	cmp	r3, r5
 8009df4:	dc12      	bgt.n	8009e1c <__multadd+0x66>
 8009df6:	6861      	ldr	r1, [r4, #4]
 8009df8:	4630      	mov	r0, r6
 8009dfa:	3101      	adds	r1, #1
 8009dfc:	f7ff ff90 	bl	8009d20 <_Balloc>
 8009e00:	4680      	mov	r8, r0
 8009e02:	6922      	ldr	r2, [r4, #16]
 8009e04:	f104 010c 	add.w	r1, r4, #12
 8009e08:	3202      	adds	r2, #2
 8009e0a:	0092      	lsls	r2, r2, #2
 8009e0c:	300c      	adds	r0, #12
 8009e0e:	f7fd f853 	bl	8006eb8 <memcpy>
 8009e12:	4621      	mov	r1, r4
 8009e14:	4630      	mov	r0, r6
 8009e16:	f7ff ffb7 	bl	8009d88 <_Bfree>
 8009e1a:	4644      	mov	r4, r8
 8009e1c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8009e20:	3501      	adds	r5, #1
 8009e22:	615f      	str	r7, [r3, #20]
 8009e24:	6125      	str	r5, [r4, #16]
 8009e26:	4620      	mov	r0, r4
 8009e28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08009e2c <__s2b>:
 8009e2c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009e30:	4615      	mov	r5, r2
 8009e32:	2209      	movs	r2, #9
 8009e34:	461f      	mov	r7, r3
 8009e36:	3308      	adds	r3, #8
 8009e38:	460c      	mov	r4, r1
 8009e3a:	fb93 f3f2 	sdiv	r3, r3, r2
 8009e3e:	4606      	mov	r6, r0
 8009e40:	2201      	movs	r2, #1
 8009e42:	2100      	movs	r1, #0
 8009e44:	429a      	cmp	r2, r3
 8009e46:	db20      	blt.n	8009e8a <__s2b+0x5e>
 8009e48:	4630      	mov	r0, r6
 8009e4a:	f7ff ff69 	bl	8009d20 <_Balloc>
 8009e4e:	9b08      	ldr	r3, [sp, #32]
 8009e50:	2d09      	cmp	r5, #9
 8009e52:	6143      	str	r3, [r0, #20]
 8009e54:	f04f 0301 	mov.w	r3, #1
 8009e58:	6103      	str	r3, [r0, #16]
 8009e5a:	dd19      	ble.n	8009e90 <__s2b+0x64>
 8009e5c:	f104 0809 	add.w	r8, r4, #9
 8009e60:	46c1      	mov	r9, r8
 8009e62:	442c      	add	r4, r5
 8009e64:	f819 3b01 	ldrb.w	r3, [r9], #1
 8009e68:	4601      	mov	r1, r0
 8009e6a:	3b30      	subs	r3, #48	; 0x30
 8009e6c:	220a      	movs	r2, #10
 8009e6e:	4630      	mov	r0, r6
 8009e70:	f7ff ffa1 	bl	8009db6 <__multadd>
 8009e74:	45a1      	cmp	r9, r4
 8009e76:	d1f5      	bne.n	8009e64 <__s2b+0x38>
 8009e78:	eb08 0405 	add.w	r4, r8, r5
 8009e7c:	3c08      	subs	r4, #8
 8009e7e:	1b2d      	subs	r5, r5, r4
 8009e80:	1963      	adds	r3, r4, r5
 8009e82:	42bb      	cmp	r3, r7
 8009e84:	db07      	blt.n	8009e96 <__s2b+0x6a>
 8009e86:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009e8a:	0052      	lsls	r2, r2, #1
 8009e8c:	3101      	adds	r1, #1
 8009e8e:	e7d9      	b.n	8009e44 <__s2b+0x18>
 8009e90:	340a      	adds	r4, #10
 8009e92:	2509      	movs	r5, #9
 8009e94:	e7f3      	b.n	8009e7e <__s2b+0x52>
 8009e96:	f814 3b01 	ldrb.w	r3, [r4], #1
 8009e9a:	4601      	mov	r1, r0
 8009e9c:	3b30      	subs	r3, #48	; 0x30
 8009e9e:	220a      	movs	r2, #10
 8009ea0:	4630      	mov	r0, r6
 8009ea2:	f7ff ff88 	bl	8009db6 <__multadd>
 8009ea6:	e7eb      	b.n	8009e80 <__s2b+0x54>

08009ea8 <__hi0bits>:
 8009ea8:	0c02      	lsrs	r2, r0, #16
 8009eaa:	0412      	lsls	r2, r2, #16
 8009eac:	4603      	mov	r3, r0
 8009eae:	b9b2      	cbnz	r2, 8009ede <__hi0bits+0x36>
 8009eb0:	0403      	lsls	r3, r0, #16
 8009eb2:	2010      	movs	r0, #16
 8009eb4:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8009eb8:	bf04      	itt	eq
 8009eba:	021b      	lsleq	r3, r3, #8
 8009ebc:	3008      	addeq	r0, #8
 8009ebe:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8009ec2:	bf04      	itt	eq
 8009ec4:	011b      	lsleq	r3, r3, #4
 8009ec6:	3004      	addeq	r0, #4
 8009ec8:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8009ecc:	bf04      	itt	eq
 8009ece:	009b      	lsleq	r3, r3, #2
 8009ed0:	3002      	addeq	r0, #2
 8009ed2:	2b00      	cmp	r3, #0
 8009ed4:	db06      	blt.n	8009ee4 <__hi0bits+0x3c>
 8009ed6:	005b      	lsls	r3, r3, #1
 8009ed8:	d503      	bpl.n	8009ee2 <__hi0bits+0x3a>
 8009eda:	3001      	adds	r0, #1
 8009edc:	4770      	bx	lr
 8009ede:	2000      	movs	r0, #0
 8009ee0:	e7e8      	b.n	8009eb4 <__hi0bits+0xc>
 8009ee2:	2020      	movs	r0, #32
 8009ee4:	4770      	bx	lr

08009ee6 <__lo0bits>:
 8009ee6:	6803      	ldr	r3, [r0, #0]
 8009ee8:	4601      	mov	r1, r0
 8009eea:	f013 0207 	ands.w	r2, r3, #7
 8009eee:	d00b      	beq.n	8009f08 <__lo0bits+0x22>
 8009ef0:	07da      	lsls	r2, r3, #31
 8009ef2:	d423      	bmi.n	8009f3c <__lo0bits+0x56>
 8009ef4:	0798      	lsls	r0, r3, #30
 8009ef6:	bf49      	itett	mi
 8009ef8:	085b      	lsrmi	r3, r3, #1
 8009efa:	089b      	lsrpl	r3, r3, #2
 8009efc:	2001      	movmi	r0, #1
 8009efe:	600b      	strmi	r3, [r1, #0]
 8009f00:	bf5c      	itt	pl
 8009f02:	600b      	strpl	r3, [r1, #0]
 8009f04:	2002      	movpl	r0, #2
 8009f06:	4770      	bx	lr
 8009f08:	b298      	uxth	r0, r3
 8009f0a:	b9a8      	cbnz	r0, 8009f38 <__lo0bits+0x52>
 8009f0c:	2010      	movs	r0, #16
 8009f0e:	0c1b      	lsrs	r3, r3, #16
 8009f10:	f013 0fff 	tst.w	r3, #255	; 0xff
 8009f14:	bf04      	itt	eq
 8009f16:	0a1b      	lsreq	r3, r3, #8
 8009f18:	3008      	addeq	r0, #8
 8009f1a:	071a      	lsls	r2, r3, #28
 8009f1c:	bf04      	itt	eq
 8009f1e:	091b      	lsreq	r3, r3, #4
 8009f20:	3004      	addeq	r0, #4
 8009f22:	079a      	lsls	r2, r3, #30
 8009f24:	bf04      	itt	eq
 8009f26:	089b      	lsreq	r3, r3, #2
 8009f28:	3002      	addeq	r0, #2
 8009f2a:	07da      	lsls	r2, r3, #31
 8009f2c:	d402      	bmi.n	8009f34 <__lo0bits+0x4e>
 8009f2e:	085b      	lsrs	r3, r3, #1
 8009f30:	d006      	beq.n	8009f40 <__lo0bits+0x5a>
 8009f32:	3001      	adds	r0, #1
 8009f34:	600b      	str	r3, [r1, #0]
 8009f36:	4770      	bx	lr
 8009f38:	4610      	mov	r0, r2
 8009f3a:	e7e9      	b.n	8009f10 <__lo0bits+0x2a>
 8009f3c:	2000      	movs	r0, #0
 8009f3e:	4770      	bx	lr
 8009f40:	2020      	movs	r0, #32
 8009f42:	4770      	bx	lr

08009f44 <__i2b>:
 8009f44:	b510      	push	{r4, lr}
 8009f46:	460c      	mov	r4, r1
 8009f48:	2101      	movs	r1, #1
 8009f4a:	f7ff fee9 	bl	8009d20 <_Balloc>
 8009f4e:	2201      	movs	r2, #1
 8009f50:	6144      	str	r4, [r0, #20]
 8009f52:	6102      	str	r2, [r0, #16]
 8009f54:	bd10      	pop	{r4, pc}

08009f56 <__multiply>:
 8009f56:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009f5a:	4614      	mov	r4, r2
 8009f5c:	690a      	ldr	r2, [r1, #16]
 8009f5e:	6923      	ldr	r3, [r4, #16]
 8009f60:	4688      	mov	r8, r1
 8009f62:	429a      	cmp	r2, r3
 8009f64:	bfbe      	ittt	lt
 8009f66:	460b      	movlt	r3, r1
 8009f68:	46a0      	movlt	r8, r4
 8009f6a:	461c      	movlt	r4, r3
 8009f6c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8009f70:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8009f74:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8009f78:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8009f7c:	eb07 0609 	add.w	r6, r7, r9
 8009f80:	42b3      	cmp	r3, r6
 8009f82:	bfb8      	it	lt
 8009f84:	3101      	addlt	r1, #1
 8009f86:	f7ff fecb 	bl	8009d20 <_Balloc>
 8009f8a:	f100 0514 	add.w	r5, r0, #20
 8009f8e:	462b      	mov	r3, r5
 8009f90:	2200      	movs	r2, #0
 8009f92:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8009f96:	4573      	cmp	r3, lr
 8009f98:	d316      	bcc.n	8009fc8 <__multiply+0x72>
 8009f9a:	f104 0214 	add.w	r2, r4, #20
 8009f9e:	f108 0114 	add.w	r1, r8, #20
 8009fa2:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8009fa6:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8009faa:	9300      	str	r3, [sp, #0]
 8009fac:	9b00      	ldr	r3, [sp, #0]
 8009fae:	9201      	str	r2, [sp, #4]
 8009fb0:	4293      	cmp	r3, r2
 8009fb2:	d80c      	bhi.n	8009fce <__multiply+0x78>
 8009fb4:	2e00      	cmp	r6, #0
 8009fb6:	dd03      	ble.n	8009fc0 <__multiply+0x6a>
 8009fb8:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8009fbc:	2b00      	cmp	r3, #0
 8009fbe:	d05d      	beq.n	800a07c <__multiply+0x126>
 8009fc0:	6106      	str	r6, [r0, #16]
 8009fc2:	b003      	add	sp, #12
 8009fc4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009fc8:	f843 2b04 	str.w	r2, [r3], #4
 8009fcc:	e7e3      	b.n	8009f96 <__multiply+0x40>
 8009fce:	f8b2 b000 	ldrh.w	fp, [r2]
 8009fd2:	f1bb 0f00 	cmp.w	fp, #0
 8009fd6:	d023      	beq.n	800a020 <__multiply+0xca>
 8009fd8:	4689      	mov	r9, r1
 8009fda:	46ac      	mov	ip, r5
 8009fdc:	f04f 0800 	mov.w	r8, #0
 8009fe0:	f859 4b04 	ldr.w	r4, [r9], #4
 8009fe4:	f8dc a000 	ldr.w	sl, [ip]
 8009fe8:	b2a3      	uxth	r3, r4
 8009fea:	fa1f fa8a 	uxth.w	sl, sl
 8009fee:	fb0b a303 	mla	r3, fp, r3, sl
 8009ff2:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8009ff6:	f8dc 4000 	ldr.w	r4, [ip]
 8009ffa:	4443      	add	r3, r8
 8009ffc:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800a000:	fb0b 840a 	mla	r4, fp, sl, r8
 800a004:	46e2      	mov	sl, ip
 800a006:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 800a00a:	b29b      	uxth	r3, r3
 800a00c:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800a010:	454f      	cmp	r7, r9
 800a012:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800a016:	f84a 3b04 	str.w	r3, [sl], #4
 800a01a:	d82b      	bhi.n	800a074 <__multiply+0x11e>
 800a01c:	f8cc 8004 	str.w	r8, [ip, #4]
 800a020:	9b01      	ldr	r3, [sp, #4]
 800a022:	3204      	adds	r2, #4
 800a024:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 800a028:	f1ba 0f00 	cmp.w	sl, #0
 800a02c:	d020      	beq.n	800a070 <__multiply+0x11a>
 800a02e:	4689      	mov	r9, r1
 800a030:	46a8      	mov	r8, r5
 800a032:	f04f 0b00 	mov.w	fp, #0
 800a036:	682b      	ldr	r3, [r5, #0]
 800a038:	f8b9 c000 	ldrh.w	ip, [r9]
 800a03c:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 800a040:	b29b      	uxth	r3, r3
 800a042:	fb0a 440c 	mla	r4, sl, ip, r4
 800a046:	46c4      	mov	ip, r8
 800a048:	445c      	add	r4, fp
 800a04a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800a04e:	f84c 3b04 	str.w	r3, [ip], #4
 800a052:	f859 3b04 	ldr.w	r3, [r9], #4
 800a056:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 800a05a:	0c1b      	lsrs	r3, r3, #16
 800a05c:	fb0a b303 	mla	r3, sl, r3, fp
 800a060:	454f      	cmp	r7, r9
 800a062:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 800a066:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 800a06a:	d805      	bhi.n	800a078 <__multiply+0x122>
 800a06c:	f8c8 3004 	str.w	r3, [r8, #4]
 800a070:	3504      	adds	r5, #4
 800a072:	e79b      	b.n	8009fac <__multiply+0x56>
 800a074:	46d4      	mov	ip, sl
 800a076:	e7b3      	b.n	8009fe0 <__multiply+0x8a>
 800a078:	46e0      	mov	r8, ip
 800a07a:	e7dd      	b.n	800a038 <__multiply+0xe2>
 800a07c:	3e01      	subs	r6, #1
 800a07e:	e799      	b.n	8009fb4 <__multiply+0x5e>

0800a080 <__pow5mult>:
 800a080:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a084:	4615      	mov	r5, r2
 800a086:	f012 0203 	ands.w	r2, r2, #3
 800a08a:	4606      	mov	r6, r0
 800a08c:	460f      	mov	r7, r1
 800a08e:	d007      	beq.n	800a0a0 <__pow5mult+0x20>
 800a090:	4c21      	ldr	r4, [pc, #132]	; (800a118 <__pow5mult+0x98>)
 800a092:	3a01      	subs	r2, #1
 800a094:	2300      	movs	r3, #0
 800a096:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a09a:	f7ff fe8c 	bl	8009db6 <__multadd>
 800a09e:	4607      	mov	r7, r0
 800a0a0:	10ad      	asrs	r5, r5, #2
 800a0a2:	d035      	beq.n	800a110 <__pow5mult+0x90>
 800a0a4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800a0a6:	b93c      	cbnz	r4, 800a0b8 <__pow5mult+0x38>
 800a0a8:	2010      	movs	r0, #16
 800a0aa:	f7ff fe11 	bl	8009cd0 <malloc>
 800a0ae:	6270      	str	r0, [r6, #36]	; 0x24
 800a0b0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a0b4:	6004      	str	r4, [r0, #0]
 800a0b6:	60c4      	str	r4, [r0, #12]
 800a0b8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800a0bc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a0c0:	b94c      	cbnz	r4, 800a0d6 <__pow5mult+0x56>
 800a0c2:	f240 2171 	movw	r1, #625	; 0x271
 800a0c6:	4630      	mov	r0, r6
 800a0c8:	f7ff ff3c 	bl	8009f44 <__i2b>
 800a0cc:	2300      	movs	r3, #0
 800a0ce:	4604      	mov	r4, r0
 800a0d0:	f8c8 0008 	str.w	r0, [r8, #8]
 800a0d4:	6003      	str	r3, [r0, #0]
 800a0d6:	f04f 0800 	mov.w	r8, #0
 800a0da:	07eb      	lsls	r3, r5, #31
 800a0dc:	d50a      	bpl.n	800a0f4 <__pow5mult+0x74>
 800a0de:	4639      	mov	r1, r7
 800a0e0:	4622      	mov	r2, r4
 800a0e2:	4630      	mov	r0, r6
 800a0e4:	f7ff ff37 	bl	8009f56 <__multiply>
 800a0e8:	4681      	mov	r9, r0
 800a0ea:	4639      	mov	r1, r7
 800a0ec:	4630      	mov	r0, r6
 800a0ee:	f7ff fe4b 	bl	8009d88 <_Bfree>
 800a0f2:	464f      	mov	r7, r9
 800a0f4:	106d      	asrs	r5, r5, #1
 800a0f6:	d00b      	beq.n	800a110 <__pow5mult+0x90>
 800a0f8:	6820      	ldr	r0, [r4, #0]
 800a0fa:	b938      	cbnz	r0, 800a10c <__pow5mult+0x8c>
 800a0fc:	4622      	mov	r2, r4
 800a0fe:	4621      	mov	r1, r4
 800a100:	4630      	mov	r0, r6
 800a102:	f7ff ff28 	bl	8009f56 <__multiply>
 800a106:	6020      	str	r0, [r4, #0]
 800a108:	f8c0 8000 	str.w	r8, [r0]
 800a10c:	4604      	mov	r4, r0
 800a10e:	e7e4      	b.n	800a0da <__pow5mult+0x5a>
 800a110:	4638      	mov	r0, r7
 800a112:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a116:	bf00      	nop
 800a118:	0800b358 	.word	0x0800b358

0800a11c <__lshift>:
 800a11c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a120:	460c      	mov	r4, r1
 800a122:	4607      	mov	r7, r0
 800a124:	4616      	mov	r6, r2
 800a126:	6923      	ldr	r3, [r4, #16]
 800a128:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a12c:	eb0a 0903 	add.w	r9, sl, r3
 800a130:	6849      	ldr	r1, [r1, #4]
 800a132:	68a3      	ldr	r3, [r4, #8]
 800a134:	f109 0501 	add.w	r5, r9, #1
 800a138:	42ab      	cmp	r3, r5
 800a13a:	db32      	blt.n	800a1a2 <__lshift+0x86>
 800a13c:	4638      	mov	r0, r7
 800a13e:	f7ff fdef 	bl	8009d20 <_Balloc>
 800a142:	2300      	movs	r3, #0
 800a144:	4680      	mov	r8, r0
 800a146:	461a      	mov	r2, r3
 800a148:	f100 0114 	add.w	r1, r0, #20
 800a14c:	4553      	cmp	r3, sl
 800a14e:	db2b      	blt.n	800a1a8 <__lshift+0x8c>
 800a150:	6920      	ldr	r0, [r4, #16]
 800a152:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a156:	f104 0314 	add.w	r3, r4, #20
 800a15a:	f016 021f 	ands.w	r2, r6, #31
 800a15e:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a162:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800a166:	d025      	beq.n	800a1b4 <__lshift+0x98>
 800a168:	2000      	movs	r0, #0
 800a16a:	f1c2 0e20 	rsb	lr, r2, #32
 800a16e:	468a      	mov	sl, r1
 800a170:	681e      	ldr	r6, [r3, #0]
 800a172:	4096      	lsls	r6, r2
 800a174:	4330      	orrs	r0, r6
 800a176:	f84a 0b04 	str.w	r0, [sl], #4
 800a17a:	f853 0b04 	ldr.w	r0, [r3], #4
 800a17e:	459c      	cmp	ip, r3
 800a180:	fa20 f00e 	lsr.w	r0, r0, lr
 800a184:	d814      	bhi.n	800a1b0 <__lshift+0x94>
 800a186:	6048      	str	r0, [r1, #4]
 800a188:	b108      	cbz	r0, 800a18e <__lshift+0x72>
 800a18a:	f109 0502 	add.w	r5, r9, #2
 800a18e:	3d01      	subs	r5, #1
 800a190:	4638      	mov	r0, r7
 800a192:	f8c8 5010 	str.w	r5, [r8, #16]
 800a196:	4621      	mov	r1, r4
 800a198:	f7ff fdf6 	bl	8009d88 <_Bfree>
 800a19c:	4640      	mov	r0, r8
 800a19e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a1a2:	3101      	adds	r1, #1
 800a1a4:	005b      	lsls	r3, r3, #1
 800a1a6:	e7c7      	b.n	800a138 <__lshift+0x1c>
 800a1a8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800a1ac:	3301      	adds	r3, #1
 800a1ae:	e7cd      	b.n	800a14c <__lshift+0x30>
 800a1b0:	4651      	mov	r1, sl
 800a1b2:	e7dc      	b.n	800a16e <__lshift+0x52>
 800a1b4:	3904      	subs	r1, #4
 800a1b6:	f853 2b04 	ldr.w	r2, [r3], #4
 800a1ba:	459c      	cmp	ip, r3
 800a1bc:	f841 2f04 	str.w	r2, [r1, #4]!
 800a1c0:	d8f9      	bhi.n	800a1b6 <__lshift+0x9a>
 800a1c2:	e7e4      	b.n	800a18e <__lshift+0x72>

0800a1c4 <__mcmp>:
 800a1c4:	6903      	ldr	r3, [r0, #16]
 800a1c6:	690a      	ldr	r2, [r1, #16]
 800a1c8:	b530      	push	{r4, r5, lr}
 800a1ca:	1a9b      	subs	r3, r3, r2
 800a1cc:	d10c      	bne.n	800a1e8 <__mcmp+0x24>
 800a1ce:	0092      	lsls	r2, r2, #2
 800a1d0:	3014      	adds	r0, #20
 800a1d2:	3114      	adds	r1, #20
 800a1d4:	1884      	adds	r4, r0, r2
 800a1d6:	4411      	add	r1, r2
 800a1d8:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800a1dc:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800a1e0:	4295      	cmp	r5, r2
 800a1e2:	d003      	beq.n	800a1ec <__mcmp+0x28>
 800a1e4:	d305      	bcc.n	800a1f2 <__mcmp+0x2e>
 800a1e6:	2301      	movs	r3, #1
 800a1e8:	4618      	mov	r0, r3
 800a1ea:	bd30      	pop	{r4, r5, pc}
 800a1ec:	42a0      	cmp	r0, r4
 800a1ee:	d3f3      	bcc.n	800a1d8 <__mcmp+0x14>
 800a1f0:	e7fa      	b.n	800a1e8 <__mcmp+0x24>
 800a1f2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a1f6:	e7f7      	b.n	800a1e8 <__mcmp+0x24>

0800a1f8 <__mdiff>:
 800a1f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a1fc:	460d      	mov	r5, r1
 800a1fe:	4607      	mov	r7, r0
 800a200:	4611      	mov	r1, r2
 800a202:	4628      	mov	r0, r5
 800a204:	4614      	mov	r4, r2
 800a206:	f7ff ffdd 	bl	800a1c4 <__mcmp>
 800a20a:	1e06      	subs	r6, r0, #0
 800a20c:	d108      	bne.n	800a220 <__mdiff+0x28>
 800a20e:	4631      	mov	r1, r6
 800a210:	4638      	mov	r0, r7
 800a212:	f7ff fd85 	bl	8009d20 <_Balloc>
 800a216:	2301      	movs	r3, #1
 800a218:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800a21c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a220:	bfa4      	itt	ge
 800a222:	4623      	movge	r3, r4
 800a224:	462c      	movge	r4, r5
 800a226:	4638      	mov	r0, r7
 800a228:	6861      	ldr	r1, [r4, #4]
 800a22a:	bfa6      	itte	ge
 800a22c:	461d      	movge	r5, r3
 800a22e:	2600      	movge	r6, #0
 800a230:	2601      	movlt	r6, #1
 800a232:	f7ff fd75 	bl	8009d20 <_Balloc>
 800a236:	f04f 0e00 	mov.w	lr, #0
 800a23a:	60c6      	str	r6, [r0, #12]
 800a23c:	692b      	ldr	r3, [r5, #16]
 800a23e:	6926      	ldr	r6, [r4, #16]
 800a240:	f104 0214 	add.w	r2, r4, #20
 800a244:	f105 0914 	add.w	r9, r5, #20
 800a248:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 800a24c:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 800a250:	f100 0114 	add.w	r1, r0, #20
 800a254:	f852 ab04 	ldr.w	sl, [r2], #4
 800a258:	f859 5b04 	ldr.w	r5, [r9], #4
 800a25c:	fa1f f38a 	uxth.w	r3, sl
 800a260:	4473      	add	r3, lr
 800a262:	b2ac      	uxth	r4, r5
 800a264:	1b1b      	subs	r3, r3, r4
 800a266:	0c2c      	lsrs	r4, r5, #16
 800a268:	ebc4 441a 	rsb	r4, r4, sl, lsr #16
 800a26c:	eb04 4423 	add.w	r4, r4, r3, asr #16
 800a270:	b29b      	uxth	r3, r3
 800a272:	ea4f 4e24 	mov.w	lr, r4, asr #16
 800a276:	45c8      	cmp	r8, r9
 800a278:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800a27c:	4694      	mov	ip, r2
 800a27e:	f841 4b04 	str.w	r4, [r1], #4
 800a282:	d8e7      	bhi.n	800a254 <__mdiff+0x5c>
 800a284:	45bc      	cmp	ip, r7
 800a286:	d304      	bcc.n	800a292 <__mdiff+0x9a>
 800a288:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 800a28c:	b183      	cbz	r3, 800a2b0 <__mdiff+0xb8>
 800a28e:	6106      	str	r6, [r0, #16]
 800a290:	e7c4      	b.n	800a21c <__mdiff+0x24>
 800a292:	f85c 4b04 	ldr.w	r4, [ip], #4
 800a296:	b2a2      	uxth	r2, r4
 800a298:	4472      	add	r2, lr
 800a29a:	1413      	asrs	r3, r2, #16
 800a29c:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 800a2a0:	b292      	uxth	r2, r2
 800a2a2:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800a2a6:	ea4f 4e23 	mov.w	lr, r3, asr #16
 800a2aa:	f841 2b04 	str.w	r2, [r1], #4
 800a2ae:	e7e9      	b.n	800a284 <__mdiff+0x8c>
 800a2b0:	3e01      	subs	r6, #1
 800a2b2:	e7e9      	b.n	800a288 <__mdiff+0x90>

0800a2b4 <__ulp>:
 800a2b4:	4b10      	ldr	r3, [pc, #64]	; (800a2f8 <__ulp+0x44>)
 800a2b6:	400b      	ands	r3, r1
 800a2b8:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 800a2bc:	2b00      	cmp	r3, #0
 800a2be:	dd02      	ble.n	800a2c6 <__ulp+0x12>
 800a2c0:	2000      	movs	r0, #0
 800a2c2:	4619      	mov	r1, r3
 800a2c4:	4770      	bx	lr
 800a2c6:	425b      	negs	r3, r3
 800a2c8:	151b      	asrs	r3, r3, #20
 800a2ca:	2b13      	cmp	r3, #19
 800a2cc:	f04f 0000 	mov.w	r0, #0
 800a2d0:	f04f 0100 	mov.w	r1, #0
 800a2d4:	dc04      	bgt.n	800a2e0 <__ulp+0x2c>
 800a2d6:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800a2da:	fa42 f103 	asr.w	r1, r2, r3
 800a2de:	4770      	bx	lr
 800a2e0:	2201      	movs	r2, #1
 800a2e2:	3b14      	subs	r3, #20
 800a2e4:	2b1e      	cmp	r3, #30
 800a2e6:	bfce      	itee	gt
 800a2e8:	4613      	movgt	r3, r2
 800a2ea:	f1c3 031f 	rsble	r3, r3, #31
 800a2ee:	fa02 f303 	lslle.w	r3, r2, r3
 800a2f2:	4618      	mov	r0, r3
 800a2f4:	4770      	bx	lr
 800a2f6:	bf00      	nop
 800a2f8:	7ff00000 	.word	0x7ff00000

0800a2fc <__b2d>:
 800a2fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a300:	6907      	ldr	r7, [r0, #16]
 800a302:	f100 0914 	add.w	r9, r0, #20
 800a306:	eb09 0787 	add.w	r7, r9, r7, lsl #2
 800a30a:	f857 6c04 	ldr.w	r6, [r7, #-4]
 800a30e:	f1a7 0804 	sub.w	r8, r7, #4
 800a312:	4630      	mov	r0, r6
 800a314:	f7ff fdc8 	bl	8009ea8 <__hi0bits>
 800a318:	f1c0 0320 	rsb	r3, r0, #32
 800a31c:	280a      	cmp	r0, #10
 800a31e:	600b      	str	r3, [r1, #0]
 800a320:	491e      	ldr	r1, [pc, #120]	; (800a39c <__b2d+0xa0>)
 800a322:	dc17      	bgt.n	800a354 <__b2d+0x58>
 800a324:	45c1      	cmp	r9, r8
 800a326:	bf28      	it	cs
 800a328:	2200      	movcs	r2, #0
 800a32a:	f1c0 0c0b 	rsb	ip, r0, #11
 800a32e:	fa26 f30c 	lsr.w	r3, r6, ip
 800a332:	bf38      	it	cc
 800a334:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 800a338:	ea43 0501 	orr.w	r5, r3, r1
 800a33c:	f100 0315 	add.w	r3, r0, #21
 800a340:	fa06 f303 	lsl.w	r3, r6, r3
 800a344:	fa22 f20c 	lsr.w	r2, r2, ip
 800a348:	ea43 0402 	orr.w	r4, r3, r2
 800a34c:	4620      	mov	r0, r4
 800a34e:	4629      	mov	r1, r5
 800a350:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a354:	45c1      	cmp	r9, r8
 800a356:	bf3a      	itte	cc
 800a358:	f1a7 0808 	subcc.w	r8, r7, #8
 800a35c:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 800a360:	2200      	movcs	r2, #0
 800a362:	f1b0 030b 	subs.w	r3, r0, #11
 800a366:	d015      	beq.n	800a394 <__b2d+0x98>
 800a368:	409e      	lsls	r6, r3
 800a36a:	f1c3 0720 	rsb	r7, r3, #32
 800a36e:	f046 567f 	orr.w	r6, r6, #1069547520	; 0x3fc00000
 800a372:	fa22 f107 	lsr.w	r1, r2, r7
 800a376:	45c8      	cmp	r8, r9
 800a378:	f446 1640 	orr.w	r6, r6, #3145728	; 0x300000
 800a37c:	ea46 0501 	orr.w	r5, r6, r1
 800a380:	bf94      	ite	ls
 800a382:	2100      	movls	r1, #0
 800a384:	f858 1c04 	ldrhi.w	r1, [r8, #-4]
 800a388:	fa02 f003 	lsl.w	r0, r2, r3
 800a38c:	40f9      	lsrs	r1, r7
 800a38e:	ea40 0401 	orr.w	r4, r0, r1
 800a392:	e7db      	b.n	800a34c <__b2d+0x50>
 800a394:	ea46 0501 	orr.w	r5, r6, r1
 800a398:	4614      	mov	r4, r2
 800a39a:	e7d7      	b.n	800a34c <__b2d+0x50>
 800a39c:	3ff00000 	.word	0x3ff00000

0800a3a0 <__d2b>:
 800a3a0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800a3a4:	461c      	mov	r4, r3
 800a3a6:	e9dd 6508 	ldrd	r6, r5, [sp, #32]
 800a3aa:	2101      	movs	r1, #1
 800a3ac:	4690      	mov	r8, r2
 800a3ae:	f7ff fcb7 	bl	8009d20 <_Balloc>
 800a3b2:	f3c4 0213 	ubfx	r2, r4, #0, #20
 800a3b6:	f3c4 540a 	ubfx	r4, r4, #20, #11
 800a3ba:	4607      	mov	r7, r0
 800a3bc:	bb34      	cbnz	r4, 800a40c <__d2b+0x6c>
 800a3be:	9201      	str	r2, [sp, #4]
 800a3c0:	f1b8 0200 	subs.w	r2, r8, #0
 800a3c4:	d027      	beq.n	800a416 <__d2b+0x76>
 800a3c6:	a802      	add	r0, sp, #8
 800a3c8:	f840 2d08 	str.w	r2, [r0, #-8]!
 800a3cc:	f7ff fd8b 	bl	8009ee6 <__lo0bits>
 800a3d0:	9900      	ldr	r1, [sp, #0]
 800a3d2:	b1f0      	cbz	r0, 800a412 <__d2b+0x72>
 800a3d4:	9a01      	ldr	r2, [sp, #4]
 800a3d6:	f1c0 0320 	rsb	r3, r0, #32
 800a3da:	fa02 f303 	lsl.w	r3, r2, r3
 800a3de:	430b      	orrs	r3, r1
 800a3e0:	40c2      	lsrs	r2, r0
 800a3e2:	617b      	str	r3, [r7, #20]
 800a3e4:	9201      	str	r2, [sp, #4]
 800a3e6:	9b01      	ldr	r3, [sp, #4]
 800a3e8:	2b00      	cmp	r3, #0
 800a3ea:	bf14      	ite	ne
 800a3ec:	2102      	movne	r1, #2
 800a3ee:	2101      	moveq	r1, #1
 800a3f0:	61bb      	str	r3, [r7, #24]
 800a3f2:	6139      	str	r1, [r7, #16]
 800a3f4:	b1c4      	cbz	r4, 800a428 <__d2b+0x88>
 800a3f6:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800a3fa:	4404      	add	r4, r0
 800a3fc:	6034      	str	r4, [r6, #0]
 800a3fe:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800a402:	6028      	str	r0, [r5, #0]
 800a404:	4638      	mov	r0, r7
 800a406:	b002      	add	sp, #8
 800a408:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a40c:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800a410:	e7d5      	b.n	800a3be <__d2b+0x1e>
 800a412:	6179      	str	r1, [r7, #20]
 800a414:	e7e7      	b.n	800a3e6 <__d2b+0x46>
 800a416:	a801      	add	r0, sp, #4
 800a418:	f7ff fd65 	bl	8009ee6 <__lo0bits>
 800a41c:	2101      	movs	r1, #1
 800a41e:	9b01      	ldr	r3, [sp, #4]
 800a420:	6139      	str	r1, [r7, #16]
 800a422:	617b      	str	r3, [r7, #20]
 800a424:	3020      	adds	r0, #32
 800a426:	e7e5      	b.n	800a3f4 <__d2b+0x54>
 800a428:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800a42c:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 800a430:	6030      	str	r0, [r6, #0]
 800a432:	6918      	ldr	r0, [r3, #16]
 800a434:	f7ff fd38 	bl	8009ea8 <__hi0bits>
 800a438:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800a43c:	e7e1      	b.n	800a402 <__d2b+0x62>

0800a43e <__ratio>:
 800a43e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a442:	4688      	mov	r8, r1
 800a444:	4669      	mov	r1, sp
 800a446:	4681      	mov	r9, r0
 800a448:	f7ff ff58 	bl	800a2fc <__b2d>
 800a44c:	468b      	mov	fp, r1
 800a44e:	4606      	mov	r6, r0
 800a450:	460f      	mov	r7, r1
 800a452:	4640      	mov	r0, r8
 800a454:	a901      	add	r1, sp, #4
 800a456:	f7ff ff51 	bl	800a2fc <__b2d>
 800a45a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800a45e:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800a462:	460d      	mov	r5, r1
 800a464:	eba3 0c02 	sub.w	ip, r3, r2
 800a468:	e9dd 3200 	ldrd	r3, r2, [sp]
 800a46c:	1a9b      	subs	r3, r3, r2
 800a46e:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800a472:	2b00      	cmp	r3, #0
 800a474:	bfd5      	itete	le
 800a476:	460a      	movle	r2, r1
 800a478:	463a      	movgt	r2, r7
 800a47a:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800a47e:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 800a482:	bfd8      	it	le
 800a484:	eb02 5503 	addle.w	r5, r2, r3, lsl #20
 800a488:	462b      	mov	r3, r5
 800a48a:	4602      	mov	r2, r0
 800a48c:	4659      	mov	r1, fp
 800a48e:	4630      	mov	r0, r6
 800a490:	f7f6 f94c 	bl	800072c <__aeabi_ddiv>
 800a494:	b003      	add	sp, #12
 800a496:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800a49a <__copybits>:
 800a49a:	3901      	subs	r1, #1
 800a49c:	b510      	push	{r4, lr}
 800a49e:	1149      	asrs	r1, r1, #5
 800a4a0:	6914      	ldr	r4, [r2, #16]
 800a4a2:	3101      	adds	r1, #1
 800a4a4:	f102 0314 	add.w	r3, r2, #20
 800a4a8:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800a4ac:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800a4b0:	42a3      	cmp	r3, r4
 800a4b2:	4602      	mov	r2, r0
 800a4b4:	d303      	bcc.n	800a4be <__copybits+0x24>
 800a4b6:	2300      	movs	r3, #0
 800a4b8:	428a      	cmp	r2, r1
 800a4ba:	d305      	bcc.n	800a4c8 <__copybits+0x2e>
 800a4bc:	bd10      	pop	{r4, pc}
 800a4be:	f853 2b04 	ldr.w	r2, [r3], #4
 800a4c2:	f840 2b04 	str.w	r2, [r0], #4
 800a4c6:	e7f3      	b.n	800a4b0 <__copybits+0x16>
 800a4c8:	f842 3b04 	str.w	r3, [r2], #4
 800a4cc:	e7f4      	b.n	800a4b8 <__copybits+0x1e>

0800a4ce <__any_on>:
 800a4ce:	f100 0214 	add.w	r2, r0, #20
 800a4d2:	6900      	ldr	r0, [r0, #16]
 800a4d4:	114b      	asrs	r3, r1, #5
 800a4d6:	4298      	cmp	r0, r3
 800a4d8:	b510      	push	{r4, lr}
 800a4da:	db11      	blt.n	800a500 <__any_on+0x32>
 800a4dc:	dd0a      	ble.n	800a4f4 <__any_on+0x26>
 800a4de:	f011 011f 	ands.w	r1, r1, #31
 800a4e2:	d007      	beq.n	800a4f4 <__any_on+0x26>
 800a4e4:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800a4e8:	fa24 f001 	lsr.w	r0, r4, r1
 800a4ec:	fa00 f101 	lsl.w	r1, r0, r1
 800a4f0:	428c      	cmp	r4, r1
 800a4f2:	d10b      	bne.n	800a50c <__any_on+0x3e>
 800a4f4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800a4f8:	4293      	cmp	r3, r2
 800a4fa:	d803      	bhi.n	800a504 <__any_on+0x36>
 800a4fc:	2000      	movs	r0, #0
 800a4fe:	bd10      	pop	{r4, pc}
 800a500:	4603      	mov	r3, r0
 800a502:	e7f7      	b.n	800a4f4 <__any_on+0x26>
 800a504:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800a508:	2900      	cmp	r1, #0
 800a50a:	d0f5      	beq.n	800a4f8 <__any_on+0x2a>
 800a50c:	2001      	movs	r0, #1
 800a50e:	e7f6      	b.n	800a4fe <__any_on+0x30>

0800a510 <_calloc_r>:
 800a510:	b538      	push	{r3, r4, r5, lr}
 800a512:	fb02 f401 	mul.w	r4, r2, r1
 800a516:	4621      	mov	r1, r4
 800a518:	f000 f854 	bl	800a5c4 <_malloc_r>
 800a51c:	4605      	mov	r5, r0
 800a51e:	b118      	cbz	r0, 800a528 <_calloc_r+0x18>
 800a520:	4622      	mov	r2, r4
 800a522:	2100      	movs	r1, #0
 800a524:	f7fc fcec 	bl	8006f00 <memset>
 800a528:	4628      	mov	r0, r5
 800a52a:	bd38      	pop	{r3, r4, r5, pc}

0800a52c <_free_r>:
 800a52c:	b538      	push	{r3, r4, r5, lr}
 800a52e:	4605      	mov	r5, r0
 800a530:	2900      	cmp	r1, #0
 800a532:	d043      	beq.n	800a5bc <_free_r+0x90>
 800a534:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a538:	1f0c      	subs	r4, r1, #4
 800a53a:	2b00      	cmp	r3, #0
 800a53c:	bfb8      	it	lt
 800a53e:	18e4      	addlt	r4, r4, r3
 800a540:	f000 fa1b 	bl	800a97a <__malloc_lock>
 800a544:	4a1e      	ldr	r2, [pc, #120]	; (800a5c0 <_free_r+0x94>)
 800a546:	6813      	ldr	r3, [r2, #0]
 800a548:	4610      	mov	r0, r2
 800a54a:	b933      	cbnz	r3, 800a55a <_free_r+0x2e>
 800a54c:	6063      	str	r3, [r4, #4]
 800a54e:	6014      	str	r4, [r2, #0]
 800a550:	4628      	mov	r0, r5
 800a552:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a556:	f000 ba11 	b.w	800a97c <__malloc_unlock>
 800a55a:	42a3      	cmp	r3, r4
 800a55c:	d90b      	bls.n	800a576 <_free_r+0x4a>
 800a55e:	6821      	ldr	r1, [r4, #0]
 800a560:	1862      	adds	r2, r4, r1
 800a562:	4293      	cmp	r3, r2
 800a564:	bf01      	itttt	eq
 800a566:	681a      	ldreq	r2, [r3, #0]
 800a568:	685b      	ldreq	r3, [r3, #4]
 800a56a:	1852      	addeq	r2, r2, r1
 800a56c:	6022      	streq	r2, [r4, #0]
 800a56e:	6063      	str	r3, [r4, #4]
 800a570:	6004      	str	r4, [r0, #0]
 800a572:	e7ed      	b.n	800a550 <_free_r+0x24>
 800a574:	4613      	mov	r3, r2
 800a576:	685a      	ldr	r2, [r3, #4]
 800a578:	b10a      	cbz	r2, 800a57e <_free_r+0x52>
 800a57a:	42a2      	cmp	r2, r4
 800a57c:	d9fa      	bls.n	800a574 <_free_r+0x48>
 800a57e:	6819      	ldr	r1, [r3, #0]
 800a580:	1858      	adds	r0, r3, r1
 800a582:	42a0      	cmp	r0, r4
 800a584:	d10b      	bne.n	800a59e <_free_r+0x72>
 800a586:	6820      	ldr	r0, [r4, #0]
 800a588:	4401      	add	r1, r0
 800a58a:	1858      	adds	r0, r3, r1
 800a58c:	4282      	cmp	r2, r0
 800a58e:	6019      	str	r1, [r3, #0]
 800a590:	d1de      	bne.n	800a550 <_free_r+0x24>
 800a592:	6810      	ldr	r0, [r2, #0]
 800a594:	6852      	ldr	r2, [r2, #4]
 800a596:	4401      	add	r1, r0
 800a598:	6019      	str	r1, [r3, #0]
 800a59a:	605a      	str	r2, [r3, #4]
 800a59c:	e7d8      	b.n	800a550 <_free_r+0x24>
 800a59e:	d902      	bls.n	800a5a6 <_free_r+0x7a>
 800a5a0:	230c      	movs	r3, #12
 800a5a2:	602b      	str	r3, [r5, #0]
 800a5a4:	e7d4      	b.n	800a550 <_free_r+0x24>
 800a5a6:	6820      	ldr	r0, [r4, #0]
 800a5a8:	1821      	adds	r1, r4, r0
 800a5aa:	428a      	cmp	r2, r1
 800a5ac:	bf01      	itttt	eq
 800a5ae:	6811      	ldreq	r1, [r2, #0]
 800a5b0:	6852      	ldreq	r2, [r2, #4]
 800a5b2:	1809      	addeq	r1, r1, r0
 800a5b4:	6021      	streq	r1, [r4, #0]
 800a5b6:	6062      	str	r2, [r4, #4]
 800a5b8:	605c      	str	r4, [r3, #4]
 800a5ba:	e7c9      	b.n	800a550 <_free_r+0x24>
 800a5bc:	bd38      	pop	{r3, r4, r5, pc}
 800a5be:	bf00      	nop
 800a5c0:	20000688 	.word	0x20000688

0800a5c4 <_malloc_r>:
 800a5c4:	b570      	push	{r4, r5, r6, lr}
 800a5c6:	1ccd      	adds	r5, r1, #3
 800a5c8:	f025 0503 	bic.w	r5, r5, #3
 800a5cc:	3508      	adds	r5, #8
 800a5ce:	2d0c      	cmp	r5, #12
 800a5d0:	bf38      	it	cc
 800a5d2:	250c      	movcc	r5, #12
 800a5d4:	2d00      	cmp	r5, #0
 800a5d6:	4606      	mov	r6, r0
 800a5d8:	db01      	blt.n	800a5de <_malloc_r+0x1a>
 800a5da:	42a9      	cmp	r1, r5
 800a5dc:	d903      	bls.n	800a5e6 <_malloc_r+0x22>
 800a5de:	230c      	movs	r3, #12
 800a5e0:	6033      	str	r3, [r6, #0]
 800a5e2:	2000      	movs	r0, #0
 800a5e4:	bd70      	pop	{r4, r5, r6, pc}
 800a5e6:	f000 f9c8 	bl	800a97a <__malloc_lock>
 800a5ea:	4a21      	ldr	r2, [pc, #132]	; (800a670 <_malloc_r+0xac>)
 800a5ec:	6814      	ldr	r4, [r2, #0]
 800a5ee:	4621      	mov	r1, r4
 800a5f0:	b991      	cbnz	r1, 800a618 <_malloc_r+0x54>
 800a5f2:	4c20      	ldr	r4, [pc, #128]	; (800a674 <_malloc_r+0xb0>)
 800a5f4:	6823      	ldr	r3, [r4, #0]
 800a5f6:	b91b      	cbnz	r3, 800a600 <_malloc_r+0x3c>
 800a5f8:	4630      	mov	r0, r6
 800a5fa:	f000 f98f 	bl	800a91c <_sbrk_r>
 800a5fe:	6020      	str	r0, [r4, #0]
 800a600:	4629      	mov	r1, r5
 800a602:	4630      	mov	r0, r6
 800a604:	f000 f98a 	bl	800a91c <_sbrk_r>
 800a608:	1c43      	adds	r3, r0, #1
 800a60a:	d124      	bne.n	800a656 <_malloc_r+0x92>
 800a60c:	230c      	movs	r3, #12
 800a60e:	4630      	mov	r0, r6
 800a610:	6033      	str	r3, [r6, #0]
 800a612:	f000 f9b3 	bl	800a97c <__malloc_unlock>
 800a616:	e7e4      	b.n	800a5e2 <_malloc_r+0x1e>
 800a618:	680b      	ldr	r3, [r1, #0]
 800a61a:	1b5b      	subs	r3, r3, r5
 800a61c:	d418      	bmi.n	800a650 <_malloc_r+0x8c>
 800a61e:	2b0b      	cmp	r3, #11
 800a620:	d90f      	bls.n	800a642 <_malloc_r+0x7e>
 800a622:	600b      	str	r3, [r1, #0]
 800a624:	18cc      	adds	r4, r1, r3
 800a626:	50cd      	str	r5, [r1, r3]
 800a628:	4630      	mov	r0, r6
 800a62a:	f000 f9a7 	bl	800a97c <__malloc_unlock>
 800a62e:	f104 000b 	add.w	r0, r4, #11
 800a632:	1d23      	adds	r3, r4, #4
 800a634:	f020 0007 	bic.w	r0, r0, #7
 800a638:	1ac3      	subs	r3, r0, r3
 800a63a:	d0d3      	beq.n	800a5e4 <_malloc_r+0x20>
 800a63c:	425a      	negs	r2, r3
 800a63e:	50e2      	str	r2, [r4, r3]
 800a640:	e7d0      	b.n	800a5e4 <_malloc_r+0x20>
 800a642:	684b      	ldr	r3, [r1, #4]
 800a644:	428c      	cmp	r4, r1
 800a646:	bf16      	itet	ne
 800a648:	6063      	strne	r3, [r4, #4]
 800a64a:	6013      	streq	r3, [r2, #0]
 800a64c:	460c      	movne	r4, r1
 800a64e:	e7eb      	b.n	800a628 <_malloc_r+0x64>
 800a650:	460c      	mov	r4, r1
 800a652:	6849      	ldr	r1, [r1, #4]
 800a654:	e7cc      	b.n	800a5f0 <_malloc_r+0x2c>
 800a656:	1cc4      	adds	r4, r0, #3
 800a658:	f024 0403 	bic.w	r4, r4, #3
 800a65c:	42a0      	cmp	r0, r4
 800a65e:	d005      	beq.n	800a66c <_malloc_r+0xa8>
 800a660:	1a21      	subs	r1, r4, r0
 800a662:	4630      	mov	r0, r6
 800a664:	f000 f95a 	bl	800a91c <_sbrk_r>
 800a668:	3001      	adds	r0, #1
 800a66a:	d0cf      	beq.n	800a60c <_malloc_r+0x48>
 800a66c:	6025      	str	r5, [r4, #0]
 800a66e:	e7db      	b.n	800a628 <_malloc_r+0x64>
 800a670:	20000688 	.word	0x20000688
 800a674:	2000068c 	.word	0x2000068c

0800a678 <__ssputs_r>:
 800a678:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a67c:	688e      	ldr	r6, [r1, #8]
 800a67e:	4682      	mov	sl, r0
 800a680:	429e      	cmp	r6, r3
 800a682:	460c      	mov	r4, r1
 800a684:	4690      	mov	r8, r2
 800a686:	4699      	mov	r9, r3
 800a688:	d837      	bhi.n	800a6fa <__ssputs_r+0x82>
 800a68a:	898a      	ldrh	r2, [r1, #12]
 800a68c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800a690:	d031      	beq.n	800a6f6 <__ssputs_r+0x7e>
 800a692:	2302      	movs	r3, #2
 800a694:	6825      	ldr	r5, [r4, #0]
 800a696:	6909      	ldr	r1, [r1, #16]
 800a698:	1a6f      	subs	r7, r5, r1
 800a69a:	6965      	ldr	r5, [r4, #20]
 800a69c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a6a0:	fb95 f5f3 	sdiv	r5, r5, r3
 800a6a4:	f109 0301 	add.w	r3, r9, #1
 800a6a8:	443b      	add	r3, r7
 800a6aa:	429d      	cmp	r5, r3
 800a6ac:	bf38      	it	cc
 800a6ae:	461d      	movcc	r5, r3
 800a6b0:	0553      	lsls	r3, r2, #21
 800a6b2:	d530      	bpl.n	800a716 <__ssputs_r+0x9e>
 800a6b4:	4629      	mov	r1, r5
 800a6b6:	f7ff ff85 	bl	800a5c4 <_malloc_r>
 800a6ba:	4606      	mov	r6, r0
 800a6bc:	b950      	cbnz	r0, 800a6d4 <__ssputs_r+0x5c>
 800a6be:	230c      	movs	r3, #12
 800a6c0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a6c4:	f8ca 3000 	str.w	r3, [sl]
 800a6c8:	89a3      	ldrh	r3, [r4, #12]
 800a6ca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a6ce:	81a3      	strh	r3, [r4, #12]
 800a6d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a6d4:	463a      	mov	r2, r7
 800a6d6:	6921      	ldr	r1, [r4, #16]
 800a6d8:	f7fc fbee 	bl	8006eb8 <memcpy>
 800a6dc:	89a3      	ldrh	r3, [r4, #12]
 800a6de:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800a6e2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a6e6:	81a3      	strh	r3, [r4, #12]
 800a6e8:	6126      	str	r6, [r4, #16]
 800a6ea:	443e      	add	r6, r7
 800a6ec:	6026      	str	r6, [r4, #0]
 800a6ee:	464e      	mov	r6, r9
 800a6f0:	6165      	str	r5, [r4, #20]
 800a6f2:	1bed      	subs	r5, r5, r7
 800a6f4:	60a5      	str	r5, [r4, #8]
 800a6f6:	454e      	cmp	r6, r9
 800a6f8:	d900      	bls.n	800a6fc <__ssputs_r+0x84>
 800a6fa:	464e      	mov	r6, r9
 800a6fc:	4632      	mov	r2, r6
 800a6fe:	4641      	mov	r1, r8
 800a700:	6820      	ldr	r0, [r4, #0]
 800a702:	f7fc fbe4 	bl	8006ece <memmove>
 800a706:	68a3      	ldr	r3, [r4, #8]
 800a708:	2000      	movs	r0, #0
 800a70a:	1b9b      	subs	r3, r3, r6
 800a70c:	60a3      	str	r3, [r4, #8]
 800a70e:	6823      	ldr	r3, [r4, #0]
 800a710:	441e      	add	r6, r3
 800a712:	6026      	str	r6, [r4, #0]
 800a714:	e7dc      	b.n	800a6d0 <__ssputs_r+0x58>
 800a716:	462a      	mov	r2, r5
 800a718:	f000 f931 	bl	800a97e <_realloc_r>
 800a71c:	4606      	mov	r6, r0
 800a71e:	2800      	cmp	r0, #0
 800a720:	d1e2      	bne.n	800a6e8 <__ssputs_r+0x70>
 800a722:	6921      	ldr	r1, [r4, #16]
 800a724:	4650      	mov	r0, sl
 800a726:	f7ff ff01 	bl	800a52c <_free_r>
 800a72a:	e7c8      	b.n	800a6be <__ssputs_r+0x46>

0800a72c <_svfiprintf_r>:
 800a72c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a730:	461d      	mov	r5, r3
 800a732:	898b      	ldrh	r3, [r1, #12]
 800a734:	b09d      	sub	sp, #116	; 0x74
 800a736:	061f      	lsls	r7, r3, #24
 800a738:	4680      	mov	r8, r0
 800a73a:	460c      	mov	r4, r1
 800a73c:	4616      	mov	r6, r2
 800a73e:	d50f      	bpl.n	800a760 <_svfiprintf_r+0x34>
 800a740:	690b      	ldr	r3, [r1, #16]
 800a742:	b96b      	cbnz	r3, 800a760 <_svfiprintf_r+0x34>
 800a744:	2140      	movs	r1, #64	; 0x40
 800a746:	f7ff ff3d 	bl	800a5c4 <_malloc_r>
 800a74a:	6020      	str	r0, [r4, #0]
 800a74c:	6120      	str	r0, [r4, #16]
 800a74e:	b928      	cbnz	r0, 800a75c <_svfiprintf_r+0x30>
 800a750:	230c      	movs	r3, #12
 800a752:	f8c8 3000 	str.w	r3, [r8]
 800a756:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a75a:	e0c8      	b.n	800a8ee <_svfiprintf_r+0x1c2>
 800a75c:	2340      	movs	r3, #64	; 0x40
 800a75e:	6163      	str	r3, [r4, #20]
 800a760:	2300      	movs	r3, #0
 800a762:	9309      	str	r3, [sp, #36]	; 0x24
 800a764:	2320      	movs	r3, #32
 800a766:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a76a:	2330      	movs	r3, #48	; 0x30
 800a76c:	f04f 0b01 	mov.w	fp, #1
 800a770:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a774:	9503      	str	r5, [sp, #12]
 800a776:	4637      	mov	r7, r6
 800a778:	463d      	mov	r5, r7
 800a77a:	f815 3b01 	ldrb.w	r3, [r5], #1
 800a77e:	b10b      	cbz	r3, 800a784 <_svfiprintf_r+0x58>
 800a780:	2b25      	cmp	r3, #37	; 0x25
 800a782:	d13e      	bne.n	800a802 <_svfiprintf_r+0xd6>
 800a784:	ebb7 0a06 	subs.w	sl, r7, r6
 800a788:	d00b      	beq.n	800a7a2 <_svfiprintf_r+0x76>
 800a78a:	4653      	mov	r3, sl
 800a78c:	4632      	mov	r2, r6
 800a78e:	4621      	mov	r1, r4
 800a790:	4640      	mov	r0, r8
 800a792:	f7ff ff71 	bl	800a678 <__ssputs_r>
 800a796:	3001      	adds	r0, #1
 800a798:	f000 80a4 	beq.w	800a8e4 <_svfiprintf_r+0x1b8>
 800a79c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a79e:	4453      	add	r3, sl
 800a7a0:	9309      	str	r3, [sp, #36]	; 0x24
 800a7a2:	783b      	ldrb	r3, [r7, #0]
 800a7a4:	2b00      	cmp	r3, #0
 800a7a6:	f000 809d 	beq.w	800a8e4 <_svfiprintf_r+0x1b8>
 800a7aa:	2300      	movs	r3, #0
 800a7ac:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a7b0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a7b4:	9304      	str	r3, [sp, #16]
 800a7b6:	9307      	str	r3, [sp, #28]
 800a7b8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a7bc:	931a      	str	r3, [sp, #104]	; 0x68
 800a7be:	462f      	mov	r7, r5
 800a7c0:	2205      	movs	r2, #5
 800a7c2:	f817 1b01 	ldrb.w	r1, [r7], #1
 800a7c6:	4850      	ldr	r0, [pc, #320]	; (800a908 <_svfiprintf_r+0x1dc>)
 800a7c8:	f7ff fa9c 	bl	8009d04 <memchr>
 800a7cc:	9b04      	ldr	r3, [sp, #16]
 800a7ce:	b9d0      	cbnz	r0, 800a806 <_svfiprintf_r+0xda>
 800a7d0:	06d9      	lsls	r1, r3, #27
 800a7d2:	bf44      	itt	mi
 800a7d4:	2220      	movmi	r2, #32
 800a7d6:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800a7da:	071a      	lsls	r2, r3, #28
 800a7dc:	bf44      	itt	mi
 800a7de:	222b      	movmi	r2, #43	; 0x2b
 800a7e0:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800a7e4:	782a      	ldrb	r2, [r5, #0]
 800a7e6:	2a2a      	cmp	r2, #42	; 0x2a
 800a7e8:	d015      	beq.n	800a816 <_svfiprintf_r+0xea>
 800a7ea:	462f      	mov	r7, r5
 800a7ec:	2000      	movs	r0, #0
 800a7ee:	250a      	movs	r5, #10
 800a7f0:	9a07      	ldr	r2, [sp, #28]
 800a7f2:	4639      	mov	r1, r7
 800a7f4:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a7f8:	3b30      	subs	r3, #48	; 0x30
 800a7fa:	2b09      	cmp	r3, #9
 800a7fc:	d94d      	bls.n	800a89a <_svfiprintf_r+0x16e>
 800a7fe:	b1b8      	cbz	r0, 800a830 <_svfiprintf_r+0x104>
 800a800:	e00f      	b.n	800a822 <_svfiprintf_r+0xf6>
 800a802:	462f      	mov	r7, r5
 800a804:	e7b8      	b.n	800a778 <_svfiprintf_r+0x4c>
 800a806:	4a40      	ldr	r2, [pc, #256]	; (800a908 <_svfiprintf_r+0x1dc>)
 800a808:	463d      	mov	r5, r7
 800a80a:	1a80      	subs	r0, r0, r2
 800a80c:	fa0b f000 	lsl.w	r0, fp, r0
 800a810:	4318      	orrs	r0, r3
 800a812:	9004      	str	r0, [sp, #16]
 800a814:	e7d3      	b.n	800a7be <_svfiprintf_r+0x92>
 800a816:	9a03      	ldr	r2, [sp, #12]
 800a818:	1d11      	adds	r1, r2, #4
 800a81a:	6812      	ldr	r2, [r2, #0]
 800a81c:	9103      	str	r1, [sp, #12]
 800a81e:	2a00      	cmp	r2, #0
 800a820:	db01      	blt.n	800a826 <_svfiprintf_r+0xfa>
 800a822:	9207      	str	r2, [sp, #28]
 800a824:	e004      	b.n	800a830 <_svfiprintf_r+0x104>
 800a826:	4252      	negs	r2, r2
 800a828:	f043 0302 	orr.w	r3, r3, #2
 800a82c:	9207      	str	r2, [sp, #28]
 800a82e:	9304      	str	r3, [sp, #16]
 800a830:	783b      	ldrb	r3, [r7, #0]
 800a832:	2b2e      	cmp	r3, #46	; 0x2e
 800a834:	d10c      	bne.n	800a850 <_svfiprintf_r+0x124>
 800a836:	787b      	ldrb	r3, [r7, #1]
 800a838:	2b2a      	cmp	r3, #42	; 0x2a
 800a83a:	d133      	bne.n	800a8a4 <_svfiprintf_r+0x178>
 800a83c:	9b03      	ldr	r3, [sp, #12]
 800a83e:	3702      	adds	r7, #2
 800a840:	1d1a      	adds	r2, r3, #4
 800a842:	681b      	ldr	r3, [r3, #0]
 800a844:	9203      	str	r2, [sp, #12]
 800a846:	2b00      	cmp	r3, #0
 800a848:	bfb8      	it	lt
 800a84a:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800a84e:	9305      	str	r3, [sp, #20]
 800a850:	4d2e      	ldr	r5, [pc, #184]	; (800a90c <_svfiprintf_r+0x1e0>)
 800a852:	2203      	movs	r2, #3
 800a854:	7839      	ldrb	r1, [r7, #0]
 800a856:	4628      	mov	r0, r5
 800a858:	f7ff fa54 	bl	8009d04 <memchr>
 800a85c:	b138      	cbz	r0, 800a86e <_svfiprintf_r+0x142>
 800a85e:	2340      	movs	r3, #64	; 0x40
 800a860:	1b40      	subs	r0, r0, r5
 800a862:	fa03 f000 	lsl.w	r0, r3, r0
 800a866:	9b04      	ldr	r3, [sp, #16]
 800a868:	3701      	adds	r7, #1
 800a86a:	4303      	orrs	r3, r0
 800a86c:	9304      	str	r3, [sp, #16]
 800a86e:	7839      	ldrb	r1, [r7, #0]
 800a870:	2206      	movs	r2, #6
 800a872:	4827      	ldr	r0, [pc, #156]	; (800a910 <_svfiprintf_r+0x1e4>)
 800a874:	1c7e      	adds	r6, r7, #1
 800a876:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a87a:	f7ff fa43 	bl	8009d04 <memchr>
 800a87e:	2800      	cmp	r0, #0
 800a880:	d038      	beq.n	800a8f4 <_svfiprintf_r+0x1c8>
 800a882:	4b24      	ldr	r3, [pc, #144]	; (800a914 <_svfiprintf_r+0x1e8>)
 800a884:	bb13      	cbnz	r3, 800a8cc <_svfiprintf_r+0x1a0>
 800a886:	9b03      	ldr	r3, [sp, #12]
 800a888:	3307      	adds	r3, #7
 800a88a:	f023 0307 	bic.w	r3, r3, #7
 800a88e:	3308      	adds	r3, #8
 800a890:	9303      	str	r3, [sp, #12]
 800a892:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a894:	444b      	add	r3, r9
 800a896:	9309      	str	r3, [sp, #36]	; 0x24
 800a898:	e76d      	b.n	800a776 <_svfiprintf_r+0x4a>
 800a89a:	fb05 3202 	mla	r2, r5, r2, r3
 800a89e:	2001      	movs	r0, #1
 800a8a0:	460f      	mov	r7, r1
 800a8a2:	e7a6      	b.n	800a7f2 <_svfiprintf_r+0xc6>
 800a8a4:	2300      	movs	r3, #0
 800a8a6:	250a      	movs	r5, #10
 800a8a8:	4619      	mov	r1, r3
 800a8aa:	3701      	adds	r7, #1
 800a8ac:	9305      	str	r3, [sp, #20]
 800a8ae:	4638      	mov	r0, r7
 800a8b0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a8b4:	3a30      	subs	r2, #48	; 0x30
 800a8b6:	2a09      	cmp	r2, #9
 800a8b8:	d903      	bls.n	800a8c2 <_svfiprintf_r+0x196>
 800a8ba:	2b00      	cmp	r3, #0
 800a8bc:	d0c8      	beq.n	800a850 <_svfiprintf_r+0x124>
 800a8be:	9105      	str	r1, [sp, #20]
 800a8c0:	e7c6      	b.n	800a850 <_svfiprintf_r+0x124>
 800a8c2:	fb05 2101 	mla	r1, r5, r1, r2
 800a8c6:	2301      	movs	r3, #1
 800a8c8:	4607      	mov	r7, r0
 800a8ca:	e7f0      	b.n	800a8ae <_svfiprintf_r+0x182>
 800a8cc:	ab03      	add	r3, sp, #12
 800a8ce:	9300      	str	r3, [sp, #0]
 800a8d0:	4622      	mov	r2, r4
 800a8d2:	4b11      	ldr	r3, [pc, #68]	; (800a918 <_svfiprintf_r+0x1ec>)
 800a8d4:	a904      	add	r1, sp, #16
 800a8d6:	4640      	mov	r0, r8
 800a8d8:	f7fc fbac 	bl	8007034 <_printf_float>
 800a8dc:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 800a8e0:	4681      	mov	r9, r0
 800a8e2:	d1d6      	bne.n	800a892 <_svfiprintf_r+0x166>
 800a8e4:	89a3      	ldrh	r3, [r4, #12]
 800a8e6:	065b      	lsls	r3, r3, #25
 800a8e8:	f53f af35 	bmi.w	800a756 <_svfiprintf_r+0x2a>
 800a8ec:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a8ee:	b01d      	add	sp, #116	; 0x74
 800a8f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a8f4:	ab03      	add	r3, sp, #12
 800a8f6:	9300      	str	r3, [sp, #0]
 800a8f8:	4622      	mov	r2, r4
 800a8fa:	4b07      	ldr	r3, [pc, #28]	; (800a918 <_svfiprintf_r+0x1ec>)
 800a8fc:	a904      	add	r1, sp, #16
 800a8fe:	4640      	mov	r0, r8
 800a900:	f7fc fe44 	bl	800758c <_printf_i>
 800a904:	e7ea      	b.n	800a8dc <_svfiprintf_r+0x1b0>
 800a906:	bf00      	nop
 800a908:	0800b364 	.word	0x0800b364
 800a90c:	0800b36a 	.word	0x0800b36a
 800a910:	0800b36e 	.word	0x0800b36e
 800a914:	08007035 	.word	0x08007035
 800a918:	0800a679 	.word	0x0800a679

0800a91c <_sbrk_r>:
 800a91c:	b538      	push	{r3, r4, r5, lr}
 800a91e:	2300      	movs	r3, #0
 800a920:	4c05      	ldr	r4, [pc, #20]	; (800a938 <_sbrk_r+0x1c>)
 800a922:	4605      	mov	r5, r0
 800a924:	4608      	mov	r0, r1
 800a926:	6023      	str	r3, [r4, #0]
 800a928:	f7f7 feba 	bl	80026a0 <_sbrk>
 800a92c:	1c43      	adds	r3, r0, #1
 800a92e:	d102      	bne.n	800a936 <_sbrk_r+0x1a>
 800a930:	6823      	ldr	r3, [r4, #0]
 800a932:	b103      	cbz	r3, 800a936 <_sbrk_r+0x1a>
 800a934:	602b      	str	r3, [r5, #0]
 800a936:	bd38      	pop	{r3, r4, r5, pc}
 800a938:	20000a50 	.word	0x20000a50

0800a93c <strncmp>:
 800a93c:	b510      	push	{r4, lr}
 800a93e:	b16a      	cbz	r2, 800a95c <strncmp+0x20>
 800a940:	3901      	subs	r1, #1
 800a942:	1884      	adds	r4, r0, r2
 800a944:	f810 3b01 	ldrb.w	r3, [r0], #1
 800a948:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800a94c:	4293      	cmp	r3, r2
 800a94e:	d103      	bne.n	800a958 <strncmp+0x1c>
 800a950:	42a0      	cmp	r0, r4
 800a952:	d001      	beq.n	800a958 <strncmp+0x1c>
 800a954:	2b00      	cmp	r3, #0
 800a956:	d1f5      	bne.n	800a944 <strncmp+0x8>
 800a958:	1a98      	subs	r0, r3, r2
 800a95a:	bd10      	pop	{r4, pc}
 800a95c:	4610      	mov	r0, r2
 800a95e:	e7fc      	b.n	800a95a <strncmp+0x1e>

0800a960 <__ascii_wctomb>:
 800a960:	b149      	cbz	r1, 800a976 <__ascii_wctomb+0x16>
 800a962:	2aff      	cmp	r2, #255	; 0xff
 800a964:	bf8b      	itete	hi
 800a966:	238a      	movhi	r3, #138	; 0x8a
 800a968:	700a      	strbls	r2, [r1, #0]
 800a96a:	6003      	strhi	r3, [r0, #0]
 800a96c:	2001      	movls	r0, #1
 800a96e:	bf88      	it	hi
 800a970:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 800a974:	4770      	bx	lr
 800a976:	4608      	mov	r0, r1
 800a978:	4770      	bx	lr

0800a97a <__malloc_lock>:
 800a97a:	4770      	bx	lr

0800a97c <__malloc_unlock>:
 800a97c:	4770      	bx	lr

0800a97e <_realloc_r>:
 800a97e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a980:	4607      	mov	r7, r0
 800a982:	4614      	mov	r4, r2
 800a984:	460e      	mov	r6, r1
 800a986:	b921      	cbnz	r1, 800a992 <_realloc_r+0x14>
 800a988:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800a98c:	4611      	mov	r1, r2
 800a98e:	f7ff be19 	b.w	800a5c4 <_malloc_r>
 800a992:	b922      	cbnz	r2, 800a99e <_realloc_r+0x20>
 800a994:	f7ff fdca 	bl	800a52c <_free_r>
 800a998:	4625      	mov	r5, r4
 800a99a:	4628      	mov	r0, r5
 800a99c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a99e:	f000 f814 	bl	800a9ca <_malloc_usable_size_r>
 800a9a2:	42a0      	cmp	r0, r4
 800a9a4:	d20f      	bcs.n	800a9c6 <_realloc_r+0x48>
 800a9a6:	4621      	mov	r1, r4
 800a9a8:	4638      	mov	r0, r7
 800a9aa:	f7ff fe0b 	bl	800a5c4 <_malloc_r>
 800a9ae:	4605      	mov	r5, r0
 800a9b0:	2800      	cmp	r0, #0
 800a9b2:	d0f2      	beq.n	800a99a <_realloc_r+0x1c>
 800a9b4:	4631      	mov	r1, r6
 800a9b6:	4622      	mov	r2, r4
 800a9b8:	f7fc fa7e 	bl	8006eb8 <memcpy>
 800a9bc:	4631      	mov	r1, r6
 800a9be:	4638      	mov	r0, r7
 800a9c0:	f7ff fdb4 	bl	800a52c <_free_r>
 800a9c4:	e7e9      	b.n	800a99a <_realloc_r+0x1c>
 800a9c6:	4635      	mov	r5, r6
 800a9c8:	e7e7      	b.n	800a99a <_realloc_r+0x1c>

0800a9ca <_malloc_usable_size_r>:
 800a9ca:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a9ce:	1f18      	subs	r0, r3, #4
 800a9d0:	2b00      	cmp	r3, #0
 800a9d2:	bfbc      	itt	lt
 800a9d4:	580b      	ldrlt	r3, [r1, r0]
 800a9d6:	18c0      	addlt	r0, r0, r3
 800a9d8:	4770      	bx	lr
	...

0800a9dc <_init>:
 800a9dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a9de:	bf00      	nop
 800a9e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a9e2:	bc08      	pop	{r3}
 800a9e4:	469e      	mov	lr, r3
 800a9e6:	4770      	bx	lr

0800a9e8 <_fini>:
 800a9e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a9ea:	bf00      	nop
 800a9ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a9ee:	bc08      	pop	{r3}
 800a9f0:	469e      	mov	lr, r3
 800a9f2:	4770      	bx	lr
