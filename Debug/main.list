
main.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008504  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000009b8  08008618  08008618  00018618  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008fd0  08008fd0  000201e8  2**0
                  CONTENTS
  4 .ARM          00000000  08008fd0  08008fd0  000201e8  2**0
                  CONTENTS
  5 .preinit_array 00000000  08008fd0  08008fd0  000201e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008fd0  08008fd0  00018fd0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008fd4  08008fd4  00018fd4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e8  20000000  08008fd8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000076c  200001e8  080091c0  000201e8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000954  080091c0  00020954  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201e8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001818c  00000000  00000000  00020211  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003202  00000000  00000000  0003839d  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000e78  00000000  00000000  0003b5a0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000d08  00000000  00000000  0003c418  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00017cb9  00000000  00000000  0003d120  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000f11f  00000000  00000000  00054dd9  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00078435  00000000  00000000  00063ef8  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000dc32d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000482c  00000000  00000000  000dc3a8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001e8 	.word	0x200001e8
 800012c:	00000000 	.word	0x00000000
 8000130:	080085fc 	.word	0x080085fc

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001ec 	.word	0x200001ec
 800014c:	080085fc 	.word	0x080085fc

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800029e:	f1a4 0401 	sub.w	r4, r4, #1
 80002a2:	d1e9      	bne.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2uiz>:
 8000a88:	004a      	lsls	r2, r1, #1
 8000a8a:	d211      	bcs.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a90:	d211      	bcs.n	8000ab6 <__aeabi_d2uiz+0x2e>
 8000a92:	d50d      	bpl.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a9c:	d40e      	bmi.n	8000abc <__aeabi_d2uiz+0x34>
 8000a9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aa6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_d2uiz+0x3a>
 8000abc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0000 	mov.w	r0, #0
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_d2f>:
 8000ac8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000acc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ad0:	bf24      	itt	cs
 8000ad2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ad6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ada:	d90d      	bls.n	8000af8 <__aeabi_d2f+0x30>
 8000adc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ae0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000af0:	bf08      	it	eq
 8000af2:	f020 0001 	biceq.w	r0, r0, #1
 8000af6:	4770      	bx	lr
 8000af8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000afc:	d121      	bne.n	8000b42 <__aeabi_d2f+0x7a>
 8000afe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b02:	bfbc      	itt	lt
 8000b04:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b08:	4770      	bxlt	lr
 8000b0a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b12:	f1c2 0218 	rsb	r2, r2, #24
 8000b16:	f1c2 0c20 	rsb	ip, r2, #32
 8000b1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b22:	bf18      	it	ne
 8000b24:	f040 0001 	orrne.w	r0, r0, #1
 8000b28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b34:	ea40 000c 	orr.w	r0, r0, ip
 8000b38:	fa23 f302 	lsr.w	r3, r3, r2
 8000b3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b40:	e7cc      	b.n	8000adc <__aeabi_d2f+0x14>
 8000b42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b46:	d107      	bne.n	8000b58 <__aeabi_d2f+0x90>
 8000b48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b4c:	bf1e      	ittt	ne
 8000b4e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b52:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b56:	4770      	bxne	lr
 8000b58:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b5c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b60:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop

08000b68 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	b084      	sub	sp, #16
 8000b6c:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig;

    /**Common config
    */
  hadc1.Instance = ADC1;
 8000b6e:	4b23      	ldr	r3, [pc, #140]	; (8000bfc <MX_ADC1_Init+0x94>)
 8000b70:	4a23      	ldr	r2, [pc, #140]	; (8000c00 <MX_ADC1_Init+0x98>)
 8000b72:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000b74:	4b21      	ldr	r3, [pc, #132]	; (8000bfc <MX_ADC1_Init+0x94>)
 8000b76:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000b7a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000b7c:	4b1f      	ldr	r3, [pc, #124]	; (8000bfc <MX_ADC1_Init+0x94>)
 8000b7e:	2201      	movs	r2, #1
 8000b80:	60da      	str	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000b82:	4b1e      	ldr	r3, [pc, #120]	; (8000bfc <MX_ADC1_Init+0x94>)
 8000b84:	2200      	movs	r2, #0
 8000b86:	615a      	str	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000b88:	4b1c      	ldr	r3, [pc, #112]	; (8000bfc <MX_ADC1_Init+0x94>)
 8000b8a:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8000b8e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000b90:	4b1a      	ldr	r3, [pc, #104]	; (8000bfc <MX_ADC1_Init+0x94>)
 8000b92:	2200      	movs	r2, #0
 8000b94:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 2;
 8000b96:	4b19      	ldr	r3, [pc, #100]	; (8000bfc <MX_ADC1_Init+0x94>)
 8000b98:	2202      	movs	r2, #2
 8000b9a:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000b9c:	4817      	ldr	r0, [pc, #92]	; (8000bfc <MX_ADC1_Init+0x94>)
 8000b9e:	f001 fadb 	bl	8002158 <HAL_ADC_Init>
 8000ba2:	4603      	mov	r3, r0
 8000ba4:	2b00      	cmp	r3, #0
 8000ba6:	d003      	beq.n	8000bb0 <MX_ADC1_Init+0x48>
  {
    _Error_Handler(__FILE__, __LINE__);
 8000ba8:	2145      	movs	r1, #69	; 0x45
 8000baa:	4816      	ldr	r0, [pc, #88]	; (8000c04 <MX_ADC1_Init+0x9c>)
 8000bac:	f000 fe18 	bl	80017e0 <_Error_Handler>
  }

    /**Configure Regular Channel
    */
  sConfig.Channel = ADC_CHANNEL_8;
 8000bb0:	2308      	movs	r3, #8
 8000bb2:	607b      	str	r3, [r7, #4]
  sConfig.Rank = 1;
 8000bb4:	2301      	movs	r3, #1
 8000bb6:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000bb8:	2300      	movs	r3, #0
 8000bba:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000bbc:	1d3b      	adds	r3, r7, #4
 8000bbe:	4619      	mov	r1, r3
 8000bc0:	480e      	ldr	r0, [pc, #56]	; (8000bfc <MX_ADC1_Init+0x94>)
 8000bc2:	f001 fc9b 	bl	80024fc <HAL_ADC_ConfigChannel>
 8000bc6:	4603      	mov	r3, r0
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	d003      	beq.n	8000bd4 <MX_ADC1_Init+0x6c>
  {
    _Error_Handler(__FILE__, __LINE__);
 8000bcc:	214f      	movs	r1, #79	; 0x4f
 8000bce:	480d      	ldr	r0, [pc, #52]	; (8000c04 <MX_ADC1_Init+0x9c>)
 8000bd0:	f000 fe06 	bl	80017e0 <_Error_Handler>
  }

    /**Configure Regular Channel
    */
  sConfig.Channel = ADC_CHANNEL_7;
 8000bd4:	2307      	movs	r3, #7
 8000bd6:	607b      	str	r3, [r7, #4]
  sConfig.Rank = 2;
 8000bd8:	2302      	movs	r3, #2
 8000bda:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000bdc:	1d3b      	adds	r3, r7, #4
 8000bde:	4619      	mov	r1, r3
 8000be0:	4806      	ldr	r0, [pc, #24]	; (8000bfc <MX_ADC1_Init+0x94>)
 8000be2:	f001 fc8b 	bl	80024fc <HAL_ADC_ConfigChannel>
 8000be6:	4603      	mov	r3, r0
 8000be8:	2b00      	cmp	r3, #0
 8000bea:	d003      	beq.n	8000bf4 <MX_ADC1_Init+0x8c>
  {
    _Error_Handler(__FILE__, __LINE__);
 8000bec:	2158      	movs	r1, #88	; 0x58
 8000bee:	4805      	ldr	r0, [pc, #20]	; (8000c04 <MX_ADC1_Init+0x9c>)
 8000bf0:	f000 fdf6 	bl	80017e0 <_Error_Handler>
  }

}
 8000bf4:	bf00      	nop
 8000bf6:	3710      	adds	r7, #16
 8000bf8:	46bd      	mov	sp, r7
 8000bfa:	bd80      	pop	{r7, pc}
 8000bfc:	20000658 	.word	0x20000658
 8000c00:	40012400 	.word	0x40012400
 8000c04:	08008618 	.word	0x08008618

08000c08 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	b088      	sub	sp, #32
 8000c0c:	af00      	add	r7, sp, #0
 8000c0e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  if(adcHandle->Instance==ADC1)
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	681b      	ldr	r3, [r3, #0]
 8000c14:	4a28      	ldr	r2, [pc, #160]	; (8000cb8 <HAL_ADC_MspInit+0xb0>)
 8000c16:	4293      	cmp	r3, r2
 8000c18:	d149      	bne.n	8000cae <HAL_ADC_MspInit+0xa6>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000c1a:	4b28      	ldr	r3, [pc, #160]	; (8000cbc <HAL_ADC_MspInit+0xb4>)
 8000c1c:	699b      	ldr	r3, [r3, #24]
 8000c1e:	4a27      	ldr	r2, [pc, #156]	; (8000cbc <HAL_ADC_MspInit+0xb4>)
 8000c20:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000c24:	6193      	str	r3, [r2, #24]
 8000c26:	4b25      	ldr	r3, [pc, #148]	; (8000cbc <HAL_ADC_MspInit+0xb4>)
 8000c28:	699b      	ldr	r3, [r3, #24]
 8000c2a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000c2e:	60fb      	str	r3, [r7, #12]
 8000c30:	68fb      	ldr	r3, [r7, #12]

    /**ADC1 GPIO Configuration
    PA7     ------> ADC1_IN7
    PB0     ------> ADC1_IN8
    */
    GPIO_InitStruct.Pin = ADC1_Pin;
 8000c32:	2380      	movs	r3, #128	; 0x80
 8000c34:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000c36:	2303      	movs	r3, #3
 8000c38:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(ADC1_GPIO_Port, &GPIO_InitStruct);
 8000c3a:	f107 0310 	add.w	r3, r7, #16
 8000c3e:	4619      	mov	r1, r3
 8000c40:	481f      	ldr	r0, [pc, #124]	; (8000cc0 <HAL_ADC_MspInit+0xb8>)
 8000c42:	f002 f971 	bl	8002f28 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ADC2_Pin;
 8000c46:	2301      	movs	r3, #1
 8000c48:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000c4a:	2303      	movs	r3, #3
 8000c4c:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(ADC2_GPIO_Port, &GPIO_InitStruct);
 8000c4e:	f107 0310 	add.w	r3, r7, #16
 8000c52:	4619      	mov	r1, r3
 8000c54:	481b      	ldr	r0, [pc, #108]	; (8000cc4 <HAL_ADC_MspInit+0xbc>)
 8000c56:	f002 f967 	bl	8002f28 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8000c5a:	4b1b      	ldr	r3, [pc, #108]	; (8000cc8 <HAL_ADC_MspInit+0xc0>)
 8000c5c:	4a1b      	ldr	r2, [pc, #108]	; (8000ccc <HAL_ADC_MspInit+0xc4>)
 8000c5e:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000c60:	4b19      	ldr	r3, [pc, #100]	; (8000cc8 <HAL_ADC_MspInit+0xc0>)
 8000c62:	2200      	movs	r2, #0
 8000c64:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000c66:	4b18      	ldr	r3, [pc, #96]	; (8000cc8 <HAL_ADC_MspInit+0xc0>)
 8000c68:	2200      	movs	r2, #0
 8000c6a:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000c6c:	4b16      	ldr	r3, [pc, #88]	; (8000cc8 <HAL_ADC_MspInit+0xc0>)
 8000c6e:	2280      	movs	r2, #128	; 0x80
 8000c70:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000c72:	4b15      	ldr	r3, [pc, #84]	; (8000cc8 <HAL_ADC_MspInit+0xc0>)
 8000c74:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000c78:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000c7a:	4b13      	ldr	r3, [pc, #76]	; (8000cc8 <HAL_ADC_MspInit+0xc0>)
 8000c7c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000c80:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000c82:	4b11      	ldr	r3, [pc, #68]	; (8000cc8 <HAL_ADC_MspInit+0xc0>)
 8000c84:	2220      	movs	r2, #32
 8000c86:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000c88:	4b0f      	ldr	r3, [pc, #60]	; (8000cc8 <HAL_ADC_MspInit+0xc0>)
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000c8e:	480e      	ldr	r0, [pc, #56]	; (8000cc8 <HAL_ADC_MspInit+0xc0>)
 8000c90:	f001 ff50 	bl	8002b34 <HAL_DMA_Init>
 8000c94:	4603      	mov	r3, r0
 8000c96:	2b00      	cmp	r3, #0
 8000c98:	d003      	beq.n	8000ca2 <HAL_ADC_MspInit+0x9a>
    {
      _Error_Handler(__FILE__, __LINE__);
 8000c9a:	2181      	movs	r1, #129	; 0x81
 8000c9c:	480c      	ldr	r0, [pc, #48]	; (8000cd0 <HAL_ADC_MspInit+0xc8>)
 8000c9e:	f000 fd9f 	bl	80017e0 <_Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	4a08      	ldr	r2, [pc, #32]	; (8000cc8 <HAL_ADC_MspInit+0xc0>)
 8000ca6:	621a      	str	r2, [r3, #32]
 8000ca8:	4a07      	ldr	r2, [pc, #28]	; (8000cc8 <HAL_ADC_MspInit+0xc0>)
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	6253      	str	r3, [r2, #36]	; 0x24

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000cae:	bf00      	nop
 8000cb0:	3720      	adds	r7, #32
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	bd80      	pop	{r7, pc}
 8000cb6:	bf00      	nop
 8000cb8:	40012400 	.word	0x40012400
 8000cbc:	40021000 	.word	0x40021000
 8000cc0:	40010800 	.word	0x40010800
 8000cc4:	40010c00 	.word	0x40010c00
 8000cc8:	20000688 	.word	0x20000688
 8000ccc:	40020008 	.word	0x40020008
 8000cd0:	08008618 	.word	0x08008618

08000cd4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	b082      	sub	sp, #8
 8000cd8:	af00      	add	r7, sp, #0
  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000cda:	4b0c      	ldr	r3, [pc, #48]	; (8000d0c <MX_DMA_Init+0x38>)
 8000cdc:	695b      	ldr	r3, [r3, #20]
 8000cde:	4a0b      	ldr	r2, [pc, #44]	; (8000d0c <MX_DMA_Init+0x38>)
 8000ce0:	f043 0301 	orr.w	r3, r3, #1
 8000ce4:	6153      	str	r3, [r2, #20]
 8000ce6:	4b09      	ldr	r3, [pc, #36]	; (8000d0c <MX_DMA_Init+0x38>)
 8000ce8:	695b      	ldr	r3, [r3, #20]
 8000cea:	f003 0301 	and.w	r3, r3, #1
 8000cee:	607b      	str	r3, [r7, #4]
 8000cf0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	2100      	movs	r1, #0
 8000cf6:	200b      	movs	r0, #11
 8000cf8:	f001 febd 	bl	8002a76 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000cfc:	200b      	movs	r0, #11
 8000cfe:	f001 fed6 	bl	8002aae <HAL_NVIC_EnableIRQ>

}
 8000d02:	bf00      	nop
 8000d04:	3708      	adds	r7, #8
 8000d06:	46bd      	mov	sp, r7
 8000d08:	bd80      	pop	{r7, pc}
 8000d0a:	bf00      	nop
 8000d0c:	40021000 	.word	0x40021000

08000d10 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	b088      	sub	sp, #32
 8000d14:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d16:	4b31      	ldr	r3, [pc, #196]	; (8000ddc <MX_GPIO_Init+0xcc>)
 8000d18:	699b      	ldr	r3, [r3, #24]
 8000d1a:	4a30      	ldr	r2, [pc, #192]	; (8000ddc <MX_GPIO_Init+0xcc>)
 8000d1c:	f043 0310 	orr.w	r3, r3, #16
 8000d20:	6193      	str	r3, [r2, #24]
 8000d22:	4b2e      	ldr	r3, [pc, #184]	; (8000ddc <MX_GPIO_Init+0xcc>)
 8000d24:	699b      	ldr	r3, [r3, #24]
 8000d26:	f003 0310 	and.w	r3, r3, #16
 8000d2a:	60fb      	str	r3, [r7, #12]
 8000d2c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d2e:	4b2b      	ldr	r3, [pc, #172]	; (8000ddc <MX_GPIO_Init+0xcc>)
 8000d30:	699b      	ldr	r3, [r3, #24]
 8000d32:	4a2a      	ldr	r2, [pc, #168]	; (8000ddc <MX_GPIO_Init+0xcc>)
 8000d34:	f043 0304 	orr.w	r3, r3, #4
 8000d38:	6193      	str	r3, [r2, #24]
 8000d3a:	4b28      	ldr	r3, [pc, #160]	; (8000ddc <MX_GPIO_Init+0xcc>)
 8000d3c:	699b      	ldr	r3, [r3, #24]
 8000d3e:	f003 0304 	and.w	r3, r3, #4
 8000d42:	60bb      	str	r3, [r7, #8]
 8000d44:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d46:	4b25      	ldr	r3, [pc, #148]	; (8000ddc <MX_GPIO_Init+0xcc>)
 8000d48:	699b      	ldr	r3, [r3, #24]
 8000d4a:	4a24      	ldr	r2, [pc, #144]	; (8000ddc <MX_GPIO_Init+0xcc>)
 8000d4c:	f043 0308 	orr.w	r3, r3, #8
 8000d50:	6193      	str	r3, [r2, #24]
 8000d52:	4b22      	ldr	r3, [pc, #136]	; (8000ddc <MX_GPIO_Init+0xcc>)
 8000d54:	699b      	ldr	r3, [r3, #24]
 8000d56:	f003 0308 	and.w	r3, r3, #8
 8000d5a:	607b      	str	r3, [r7, #4]
 8000d5c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000d5e:	2200      	movs	r2, #0
 8000d60:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000d64:	481e      	ldr	r0, [pc, #120]	; (8000de0 <MX_GPIO_Init+0xd0>)
 8000d66:	f002 fa54 	bl	8003212 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, OUTPUT_M1_Pin|OUTPUT_M2_Pin, GPIO_PIN_RESET);
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	f44f 7140 	mov.w	r1, #768	; 0x300
 8000d70:	481c      	ldr	r0, [pc, #112]	; (8000de4 <MX_GPIO_Init+0xd4>)
 8000d72:	f002 fa4e 	bl	8003212 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000d76:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000d7a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d7c:	2301      	movs	r3, #1
 8000d7e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d80:	2302      	movs	r3, #2
 8000d82:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d84:	f107 0310 	add.w	r3, r7, #16
 8000d88:	4619      	mov	r1, r3
 8000d8a:	4815      	ldr	r0, [pc, #84]	; (8000de0 <MX_GPIO_Init+0xd0>)
 8000d8c:	f002 f8cc 	bl	8002f28 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = INPUT_B1_Pin|INPUT_B2_Pin|INPUT_B3_Pin|INPUT_B4_Pin;
 8000d90:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8000d94:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000d96:	4b14      	ldr	r3, [pc, #80]	; (8000de8 <MX_GPIO_Init+0xd8>)
 8000d98:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000d9a:	2302      	movs	r3, #2
 8000d9c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d9e:	f107 0310 	add.w	r3, r7, #16
 8000da2:	4619      	mov	r1, r3
 8000da4:	4811      	ldr	r0, [pc, #68]	; (8000dec <MX_GPIO_Init+0xdc>)
 8000da6:	f002 f8bf 	bl	8002f28 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = OUTPUT_M1_Pin|OUTPUT_M2_Pin;
 8000daa:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000dae:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000db0:	2301      	movs	r3, #1
 8000db2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000db4:	2302      	movs	r3, #2
 8000db6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000db8:	f107 0310 	add.w	r3, r7, #16
 8000dbc:	4619      	mov	r1, r3
 8000dbe:	4809      	ldr	r0, [pc, #36]	; (8000de4 <MX_GPIO_Init+0xd4>)
 8000dc0:	f002 f8b2 	bl	8002f28 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	2100      	movs	r1, #0
 8000dc8:	2028      	movs	r0, #40	; 0x28
 8000dca:	f001 fe54 	bl	8002a76 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000dce:	2028      	movs	r0, #40	; 0x28
 8000dd0:	f001 fe6d 	bl	8002aae <HAL_NVIC_EnableIRQ>

}
 8000dd4:	bf00      	nop
 8000dd6:	3720      	adds	r7, #32
 8000dd8:	46bd      	mov	sp, r7
 8000dda:	bd80      	pop	{r7, pc}
 8000ddc:	40021000 	.word	0x40021000
 8000de0:	40011000 	.word	0x40011000
 8000de4:	40010800 	.word	0x40010800
 8000de8:	10110000 	.word	0x10110000
 8000dec:	40010c00 	.word	0x40010c00

08000df0 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000df0:	b580      	push	{r7, lr}
 8000df2:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 8000df4:	4b13      	ldr	r3, [pc, #76]	; (8000e44 <MX_I2C1_Init+0x54>)
 8000df6:	4a14      	ldr	r2, [pc, #80]	; (8000e48 <MX_I2C1_Init+0x58>)
 8000df8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000dfa:	4b12      	ldr	r3, [pc, #72]	; (8000e44 <MX_I2C1_Init+0x54>)
 8000dfc:	4a13      	ldr	r2, [pc, #76]	; (8000e4c <MX_I2C1_Init+0x5c>)
 8000dfe:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000e00:	4b10      	ldr	r3, [pc, #64]	; (8000e44 <MX_I2C1_Init+0x54>)
 8000e02:	2200      	movs	r2, #0
 8000e04:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000e06:	4b0f      	ldr	r3, [pc, #60]	; (8000e44 <MX_I2C1_Init+0x54>)
 8000e08:	2200      	movs	r2, #0
 8000e0a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000e0c:	4b0d      	ldr	r3, [pc, #52]	; (8000e44 <MX_I2C1_Init+0x54>)
 8000e0e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000e12:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000e14:	4b0b      	ldr	r3, [pc, #44]	; (8000e44 <MX_I2C1_Init+0x54>)
 8000e16:	2200      	movs	r2, #0
 8000e18:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000e1a:	4b0a      	ldr	r3, [pc, #40]	; (8000e44 <MX_I2C1_Init+0x54>)
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000e20:	4b08      	ldr	r3, [pc, #32]	; (8000e44 <MX_I2C1_Init+0x54>)
 8000e22:	2200      	movs	r2, #0
 8000e24:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000e26:	4b07      	ldr	r3, [pc, #28]	; (8000e44 <MX_I2C1_Init+0x54>)
 8000e28:	2200      	movs	r2, #0
 8000e2a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000e2c:	4805      	ldr	r0, [pc, #20]	; (8000e44 <MX_I2C1_Init+0x54>)
 8000e2e:	f002 fa31 	bl	8003294 <HAL_I2C_Init>
 8000e32:	4603      	mov	r3, r0
 8000e34:	2b00      	cmp	r3, #0
 8000e36:	d003      	beq.n	8000e40 <MX_I2C1_Init+0x50>
  {
    _Error_Handler(__FILE__, __LINE__);
 8000e38:	2142      	movs	r1, #66	; 0x42
 8000e3a:	4805      	ldr	r0, [pc, #20]	; (8000e50 <MX_I2C1_Init+0x60>)
 8000e3c:	f000 fcd0 	bl	80017e0 <_Error_Handler>
  }

}
 8000e40:	bf00      	nop
 8000e42:	bd80      	pop	{r7, pc}
 8000e44:	200006cc 	.word	0x200006cc
 8000e48:	40005400 	.word	0x40005400
 8000e4c:	000186a0 	.word	0x000186a0
 8000e50:	0800862c 	.word	0x0800862c

08000e54 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000e54:	b580      	push	{r7, lr}
 8000e56:	b088      	sub	sp, #32
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  if(i2cHandle->Instance==I2C1)
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	4a0f      	ldr	r2, [pc, #60]	; (8000ea0 <HAL_I2C_MspInit+0x4c>)
 8000e62:	4293      	cmp	r3, r2
 8000e64:	d117      	bne.n	8000e96 <HAL_I2C_MspInit+0x42>

    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000e66:	23c0      	movs	r3, #192	; 0xc0
 8000e68:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000e6a:	2312      	movs	r3, #18
 8000e6c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000e6e:	2303      	movs	r3, #3
 8000e70:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e72:	f107 0310 	add.w	r3, r7, #16
 8000e76:	4619      	mov	r1, r3
 8000e78:	480a      	ldr	r0, [pc, #40]	; (8000ea4 <HAL_I2C_MspInit+0x50>)
 8000e7a:	f002 f855 	bl	8002f28 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000e7e:	4b0a      	ldr	r3, [pc, #40]	; (8000ea8 <HAL_I2C_MspInit+0x54>)
 8000e80:	69db      	ldr	r3, [r3, #28]
 8000e82:	4a09      	ldr	r2, [pc, #36]	; (8000ea8 <HAL_I2C_MspInit+0x54>)
 8000e84:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000e88:	61d3      	str	r3, [r2, #28]
 8000e8a:	4b07      	ldr	r3, [pc, #28]	; (8000ea8 <HAL_I2C_MspInit+0x54>)
 8000e8c:	69db      	ldr	r3, [r3, #28]
 8000e8e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000e92:	60fb      	str	r3, [r7, #12]
 8000e94:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000e96:	bf00      	nop
 8000e98:	3720      	adds	r7, #32
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	bd80      	pop	{r7, pc}
 8000e9e:	bf00      	nop
 8000ea0:	40005400 	.word	0x40005400
 8000ea4:	40010c00 	.word	0x40010c00
 8000ea8:	40021000 	.word	0x40021000

08000eac <motor_control>:
/* Private function prototypes -----------------------------------------------*/

/* USER CODE END PFP */

/* USER CODE BEGIN 0 */
void motor_control(int dir, int pwm) {
 8000eac:	b580      	push	{r7, lr}
 8000eae:	b082      	sub	sp, #8
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	6078      	str	r0, [r7, #4]
 8000eb4:	6039      	str	r1, [r7, #0]
	if (dir >= 1) {
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	2b00      	cmp	r3, #0
 8000eba:	dd1e      	ble.n	8000efa <motor_control+0x4e>
		OUTPUT_1_State = 1;
 8000ebc:	4b32      	ldr	r3, [pc, #200]	; (8000f88 <motor_control+0xdc>)
 8000ebe:	2201      	movs	r2, #1
 8000ec0:	601a      	str	r2, [r3, #0]
		OUTPUT_2_State = 0;
 8000ec2:	4b32      	ldr	r3, [pc, #200]	; (8000f8c <motor_control+0xe0>)
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	601a      	str	r2, [r3, #0]
		HAL_GPIO_WritePin(OUTPUT_M1_GPIO_Port, OUTPUT_M1_Pin, 1);
 8000ec8:	2201      	movs	r2, #1
 8000eca:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000ece:	4830      	ldr	r0, [pc, #192]	; (8000f90 <motor_control+0xe4>)
 8000ed0:	f002 f99f 	bl	8003212 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(OUTPUT_M2_GPIO_Port, OUTPUT_M2_Pin, 0);
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000eda:	482d      	ldr	r0, [pc, #180]	; (8000f90 <motor_control+0xe4>)
 8000edc:	f002 f999 	bl	8003212 <HAL_GPIO_WritePin>
		PWM1 = pwm;
 8000ee0:	683b      	ldr	r3, [r7, #0]
 8000ee2:	4a2c      	ldr	r2, [pc, #176]	; (8000f94 <motor_control+0xe8>)
 8000ee4:	6013      	str	r3, [r2, #0]
		PWM2 = 0;
 8000ee6:	4b2c      	ldr	r3, [pc, #176]	; (8000f98 <motor_control+0xec>)
 8000ee8:	2200      	movs	r2, #0
 8000eea:	601a      	str	r2, [r3, #0]
		user_pwm_setvalue_1(pwm);
 8000eec:	6838      	ldr	r0, [r7, #0]
 8000eee:	f000 fe27 	bl	8001b40 <user_pwm_setvalue_1>
		user_pwm_setvalue_2(0);
 8000ef2:	2000      	movs	r0, #0
 8000ef4:	f000 fe42 	bl	8001b7c <user_pwm_setvalue_2>
		HAL_GPIO_WritePin(OUTPUT_M1_GPIO_Port, OUTPUT_M1_Pin, 0);
		HAL_GPIO_WritePin(OUTPUT_M2_GPIO_Port, OUTPUT_M2_Pin, 0);
		user_pwm_setvalue_1(0);
		user_pwm_setvalue_2(0);
	}
}
 8000ef8:	e042      	b.n	8000f80 <motor_control+0xd4>
	} else if (dir <= -1) {
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	da1e      	bge.n	8000f3e <motor_control+0x92>
		OUTPUT_1_State = 0;
 8000f00:	4b21      	ldr	r3, [pc, #132]	; (8000f88 <motor_control+0xdc>)
 8000f02:	2200      	movs	r2, #0
 8000f04:	601a      	str	r2, [r3, #0]
		OUTPUT_2_State = 1;
 8000f06:	4b21      	ldr	r3, [pc, #132]	; (8000f8c <motor_control+0xe0>)
 8000f08:	2201      	movs	r2, #1
 8000f0a:	601a      	str	r2, [r3, #0]
		HAL_GPIO_WritePin(OUTPUT_M1_GPIO_Port, OUTPUT_M1_Pin, 0);
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000f12:	481f      	ldr	r0, [pc, #124]	; (8000f90 <motor_control+0xe4>)
 8000f14:	f002 f97d 	bl	8003212 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(OUTPUT_M2_GPIO_Port, OUTPUT_M2_Pin, 1);
 8000f18:	2201      	movs	r2, #1
 8000f1a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000f1e:	481c      	ldr	r0, [pc, #112]	; (8000f90 <motor_control+0xe4>)
 8000f20:	f002 f977 	bl	8003212 <HAL_GPIO_WritePin>
		PWM1 = 0;
 8000f24:	4b1b      	ldr	r3, [pc, #108]	; (8000f94 <motor_control+0xe8>)
 8000f26:	2200      	movs	r2, #0
 8000f28:	601a      	str	r2, [r3, #0]
		PWM2 = pwm;
 8000f2a:	683b      	ldr	r3, [r7, #0]
 8000f2c:	4a1a      	ldr	r2, [pc, #104]	; (8000f98 <motor_control+0xec>)
 8000f2e:	6013      	str	r3, [r2, #0]
		user_pwm_setvalue_1(0);
 8000f30:	2000      	movs	r0, #0
 8000f32:	f000 fe05 	bl	8001b40 <user_pwm_setvalue_1>
		user_pwm_setvalue_2(pwm);
 8000f36:	6838      	ldr	r0, [r7, #0]
 8000f38:	f000 fe20 	bl	8001b7c <user_pwm_setvalue_2>
}
 8000f3c:	e020      	b.n	8000f80 <motor_control+0xd4>
	} else if (dir == 0) {
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	d11d      	bne.n	8000f80 <motor_control+0xd4>
		OUTPUT_1_State = 0;
 8000f44:	4b10      	ldr	r3, [pc, #64]	; (8000f88 <motor_control+0xdc>)
 8000f46:	2200      	movs	r2, #0
 8000f48:	601a      	str	r2, [r3, #0]
		OUTPUT_2_State = 0;
 8000f4a:	4b10      	ldr	r3, [pc, #64]	; (8000f8c <motor_control+0xe0>)
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	601a      	str	r2, [r3, #0]
		PWM1 = 0;
 8000f50:	4b10      	ldr	r3, [pc, #64]	; (8000f94 <motor_control+0xe8>)
 8000f52:	2200      	movs	r2, #0
 8000f54:	601a      	str	r2, [r3, #0]
		PWM2 = 0;
 8000f56:	4b10      	ldr	r3, [pc, #64]	; (8000f98 <motor_control+0xec>)
 8000f58:	2200      	movs	r2, #0
 8000f5a:	601a      	str	r2, [r3, #0]
		HAL_GPIO_WritePin(OUTPUT_M1_GPIO_Port, OUTPUT_M1_Pin, 0);
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000f62:	480b      	ldr	r0, [pc, #44]	; (8000f90 <motor_control+0xe4>)
 8000f64:	f002 f955 	bl	8003212 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(OUTPUT_M2_GPIO_Port, OUTPUT_M2_Pin, 0);
 8000f68:	2200      	movs	r2, #0
 8000f6a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000f6e:	4808      	ldr	r0, [pc, #32]	; (8000f90 <motor_control+0xe4>)
 8000f70:	f002 f94f 	bl	8003212 <HAL_GPIO_WritePin>
		user_pwm_setvalue_1(0);
 8000f74:	2000      	movs	r0, #0
 8000f76:	f000 fde3 	bl	8001b40 <user_pwm_setvalue_1>
		user_pwm_setvalue_2(0);
 8000f7a:	2000      	movs	r0, #0
 8000f7c:	f000 fdfe 	bl	8001b7c <user_pwm_setvalue_2>
}
 8000f80:	bf00      	nop
 8000f82:	3708      	adds	r7, #8
 8000f84:	46bd      	mov	sp, r7
 8000f86:	bd80      	pop	{r7, pc}
 8000f88:	2000021c 	.word	0x2000021c
 8000f8c:	20000220 	.word	0x20000220
 8000f90:	40010800 	.word	0x40010800
 8000f94:	20000214 	.word	0x20000214
 8000f98:	20000218 	.word	0x20000218

08000f9c <clean_buttom_flag>:

void clean_buttom_flag(void) {
 8000f9c:	b480      	push	{r7}
 8000f9e:	af00      	add	r7, sp, #0
	//Usart2DmaPrintf("clena\n");
	for (i = 0; i <= 5; i++) { //clean flag
 8000fa0:	4b0b      	ldr	r3, [pc, #44]	; (8000fd0 <clean_buttom_flag+0x34>)
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	601a      	str	r2, [r3, #0]
 8000fa6:	e00a      	b.n	8000fbe <clean_buttom_flag+0x22>
		buttom_flag[i] = 0;
 8000fa8:	4b09      	ldr	r3, [pc, #36]	; (8000fd0 <clean_buttom_flag+0x34>)
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	4a09      	ldr	r2, [pc, #36]	; (8000fd4 <clean_buttom_flag+0x38>)
 8000fae:	2100      	movs	r1, #0
 8000fb0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (i = 0; i <= 5; i++) { //clean flag
 8000fb4:	4b06      	ldr	r3, [pc, #24]	; (8000fd0 <clean_buttom_flag+0x34>)
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	3301      	adds	r3, #1
 8000fba:	4a05      	ldr	r2, [pc, #20]	; (8000fd0 <clean_buttom_flag+0x34>)
 8000fbc:	6013      	str	r3, [r2, #0]
 8000fbe:	4b04      	ldr	r3, [pc, #16]	; (8000fd0 <clean_buttom_flag+0x34>)
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	2b05      	cmp	r3, #5
 8000fc4:	ddf0      	ble.n	8000fa8 <clean_buttom_flag+0xc>
		//HAL_Delay(1);
	}
}
 8000fc6:	bf00      	nop
 8000fc8:	46bd      	mov	sp, r7
 8000fca:	bc80      	pop	{r7}
 8000fcc:	4770      	bx	lr
 8000fce:	bf00      	nop
 8000fd0:	200008fc 	.word	0x200008fc
 8000fd4:	20000230 	.word	0x20000230

08000fd8 <read_ADC>:
int read_ADC() {
 8000fd8:	b480      	push	{r7}
 8000fda:	af00      	add	r7, sp, #0
	for (i = 0, ad1 = 0, ad2 = 0; i < 10;) {
 8000fdc:	4b22      	ldr	r3, [pc, #136]	; (8001068 <read_ADC+0x90>)
 8000fde:	2200      	movs	r2, #0
 8000fe0:	601a      	str	r2, [r3, #0]
 8000fe2:	4b22      	ldr	r3, [pc, #136]	; (800106c <read_ADC+0x94>)
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	601a      	str	r2, [r3, #0]
 8000fe8:	4b21      	ldr	r3, [pc, #132]	; (8001070 <read_ADC+0x98>)
 8000fea:	2200      	movs	r2, #0
 8000fec:	601a      	str	r2, [r3, #0]
 8000fee:	e019      	b.n	8001024 <read_ADC+0x4c>
		ad1 += ADC_Value[i++];
 8000ff0:	4b1d      	ldr	r3, [pc, #116]	; (8001068 <read_ADC+0x90>)
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	1c5a      	adds	r2, r3, #1
 8000ff6:	491c      	ldr	r1, [pc, #112]	; (8001068 <read_ADC+0x90>)
 8000ff8:	600a      	str	r2, [r1, #0]
 8000ffa:	4a1e      	ldr	r2, [pc, #120]	; (8001074 <read_ADC+0x9c>)
 8000ffc:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001000:	4b1a      	ldr	r3, [pc, #104]	; (800106c <read_ADC+0x94>)
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	4413      	add	r3, r2
 8001006:	4a19      	ldr	r2, [pc, #100]	; (800106c <read_ADC+0x94>)
 8001008:	6013      	str	r3, [r2, #0]
		ad2 += ADC_Value[i++];
 800100a:	4b17      	ldr	r3, [pc, #92]	; (8001068 <read_ADC+0x90>)
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	1c5a      	adds	r2, r3, #1
 8001010:	4915      	ldr	r1, [pc, #84]	; (8001068 <read_ADC+0x90>)
 8001012:	600a      	str	r2, [r1, #0]
 8001014:	4a17      	ldr	r2, [pc, #92]	; (8001074 <read_ADC+0x9c>)
 8001016:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800101a:	4b15      	ldr	r3, [pc, #84]	; (8001070 <read_ADC+0x98>)
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	4413      	add	r3, r2
 8001020:	4a13      	ldr	r2, [pc, #76]	; (8001070 <read_ADC+0x98>)
 8001022:	6013      	str	r3, [r2, #0]
	for (i = 0, ad1 = 0, ad2 = 0; i < 10;) {
 8001024:	4b10      	ldr	r3, [pc, #64]	; (8001068 <read_ADC+0x90>)
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	2b09      	cmp	r3, #9
 800102a:	dde1      	ble.n	8000ff0 <read_ADC+0x18>
		//HAL_Delay(1);
	}
	real_adc1 = ad1 / 5;
 800102c:	4b0f      	ldr	r3, [pc, #60]	; (800106c <read_ADC+0x94>)
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	4a11      	ldr	r2, [pc, #68]	; (8001078 <read_ADC+0xa0>)
 8001032:	fba2 2303 	umull	r2, r3, r2, r3
 8001036:	089b      	lsrs	r3, r3, #2
 8001038:	4a10      	ldr	r2, [pc, #64]	; (800107c <read_ADC+0xa4>)
 800103a:	6013      	str	r3, [r2, #0]
	real_adc2 = ad2 / 5;
 800103c:	4b0c      	ldr	r3, [pc, #48]	; (8001070 <read_ADC+0x98>)
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	4a0d      	ldr	r2, [pc, #52]	; (8001078 <read_ADC+0xa0>)
 8001042:	fba2 2303 	umull	r2, r3, r2, r3
 8001046:	089b      	lsrs	r3, r3, #2
 8001048:	4a0d      	ldr	r2, [pc, #52]	; (8001080 <read_ADC+0xa8>)
 800104a:	6013      	str	r3, [r2, #0]
	if (real_adc1 <= real_adc2) {
 800104c:	4b0b      	ldr	r3, [pc, #44]	; (800107c <read_ADC+0xa4>)
 800104e:	681a      	ldr	r2, [r3, #0]
 8001050:	4b0b      	ldr	r3, [pc, #44]	; (8001080 <read_ADC+0xa8>)
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	429a      	cmp	r2, r3
 8001056:	d801      	bhi.n	800105c <read_ADC+0x84>
		return 1;
 8001058:	2301      	movs	r3, #1
 800105a:	e000      	b.n	800105e <read_ADC+0x86>
	} else {
		return 0;
 800105c:	2300      	movs	r3, #0
	}
}
 800105e:	4618      	mov	r0, r3
 8001060:	46bd      	mov	sp, r7
 8001062:	bc80      	pop	{r7}
 8001064:	4770      	bx	lr
 8001066:	bf00      	nop
 8001068:	200008fc 	.word	0x200008fc
 800106c:	200008f8 	.word	0x200008f8
 8001070:	20000900 	.word	0x20000900
 8001074:	20000768 	.word	0x20000768
 8001078:	cccccccd 	.word	0xcccccccd
 800107c:	20000904 	.word	0x20000904
 8001080:	20000764 	.word	0x20000764

08001084 <detection_load>:
//檢知附載
int detection_load(int time, int th) {
 8001084:	b480      	push	{r7}
 8001086:	b083      	sub	sp, #12
 8001088:	af00      	add	r7, sp, #0
 800108a:	6078      	str	r0, [r7, #4]
 800108c:	6039      	str	r1, [r7, #0]
	if (time == 0)
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	2b00      	cmp	r3, #0
 8001092:	d104      	bne.n	800109e <detection_load+0x1a>
		keep_adc1 = real_adc1;
 8001094:	4b0f      	ldr	r3, [pc, #60]	; (80010d4 <detection_load+0x50>)
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	4a0f      	ldr	r2, [pc, #60]	; (80010d8 <detection_load+0x54>)
 800109a:	6013      	str	r3, [r2, #0]
		} else {
			keep_adc2 = real_adc1;
			return 0;
		}
	}
}
 800109c:	e015      	b.n	80010ca <detection_load+0x46>
		if (abs(keep_adc1 - real_adc1) > th) {
 800109e:	4b0e      	ldr	r3, [pc, #56]	; (80010d8 <detection_load+0x54>)
 80010a0:	681a      	ldr	r2, [r3, #0]
 80010a2:	4b0c      	ldr	r3, [pc, #48]	; (80010d4 <detection_load+0x50>)
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	1ad3      	subs	r3, r2, r3
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	bfb8      	it	lt
 80010ac:	425b      	neglt	r3, r3
 80010ae:	683a      	ldr	r2, [r7, #0]
 80010b0:	429a      	cmp	r2, r3
 80010b2:	da05      	bge.n	80010c0 <detection_load+0x3c>
			keep_adc1 = real_adc1;
 80010b4:	4b07      	ldr	r3, [pc, #28]	; (80010d4 <detection_load+0x50>)
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	4a07      	ldr	r2, [pc, #28]	; (80010d8 <detection_load+0x54>)
 80010ba:	6013      	str	r3, [r2, #0]
			return 1;
 80010bc:	2301      	movs	r3, #1
 80010be:	e004      	b.n	80010ca <detection_load+0x46>
			keep_adc2 = real_adc1;
 80010c0:	4b04      	ldr	r3, [pc, #16]	; (80010d4 <detection_load+0x50>)
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	4a05      	ldr	r2, [pc, #20]	; (80010dc <detection_load+0x58>)
 80010c6:	6013      	str	r3, [r2, #0]
			return 0;
 80010c8:	2300      	movs	r3, #0
}
 80010ca:	4618      	mov	r0, r3
 80010cc:	370c      	adds	r7, #12
 80010ce:	46bd      	mov	sp, r7
 80010d0:	bc80      	pop	{r7}
 80010d2:	4770      	bx	lr
 80010d4:	20000904 	.word	0x20000904
 80010d8:	20000908 	.word	0x20000908
 80010dc:	20000720 	.word	0x20000720

080010e0 <Display>:

void Display() {
 80010e0:	b590      	push	{r4, r7, lr}
 80010e2:	b085      	sub	sp, #20
 80010e4:	af04      	add	r7, sp, #16
	ssd1306_Fill(Black);
 80010e6:	2000      	movs	r0, #0
 80010e8:	f000 fe08 	bl	8001cfc <ssd1306_Fill>
	ssd1306_SetCursor(2, 0);
 80010ec:	2100      	movs	r1, #0
 80010ee:	2002      	movs	r0, #2
 80010f0:	f000 ff5a 	bl	8001fa8 <ssd1306_SetCursor>
	snprintf(buff, sizeof(buff), "%s,%s", __DATE__, __TIME__);
 80010f4:	4b5a      	ldr	r3, [pc, #360]	; (8001260 <Display+0x180>)
 80010f6:	9300      	str	r3, [sp, #0]
 80010f8:	4b5a      	ldr	r3, [pc, #360]	; (8001264 <Display+0x184>)
 80010fa:	4a5b      	ldr	r2, [pc, #364]	; (8001268 <Display+0x188>)
 80010fc:	2140      	movs	r1, #64	; 0x40
 80010fe:	485b      	ldr	r0, [pc, #364]	; (800126c <Display+0x18c>)
 8001100:	f004 fb62 	bl	80057c8 <sniprintf>
	ssd1306_WriteString(buff, Font_6x8, White);
 8001104:	4a5a      	ldr	r2, [pc, #360]	; (8001270 <Display+0x190>)
 8001106:	2301      	movs	r3, #1
 8001108:	ca06      	ldmia	r2, {r1, r2}
 800110a:	4858      	ldr	r0, [pc, #352]	; (800126c <Display+0x18c>)
 800110c:	f000 ff26 	bl	8001f5c <ssd1306_WriteString>

	ssd1306_SetCursor(2, 8*1);
 8001110:	2108      	movs	r1, #8
 8001112:	2002      	movs	r0, #2
 8001114:	f000 ff48 	bl	8001fa8 <ssd1306_SetCursor>
	snprintf(buff, sizeof(buff), "steta:%d,%d", sysinfo_State, stage);
 8001118:	4b56      	ldr	r3, [pc, #344]	; (8001274 <Display+0x194>)
 800111a:	681a      	ldr	r2, [r3, #0]
 800111c:	4b56      	ldr	r3, [pc, #344]	; (8001278 <Display+0x198>)
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	9300      	str	r3, [sp, #0]
 8001122:	4613      	mov	r3, r2
 8001124:	4a55      	ldr	r2, [pc, #340]	; (800127c <Display+0x19c>)
 8001126:	2140      	movs	r1, #64	; 0x40
 8001128:	4850      	ldr	r0, [pc, #320]	; (800126c <Display+0x18c>)
 800112a:	f004 fb4d 	bl	80057c8 <sniprintf>
	ssd1306_WriteString(buff, Font_6x8, White);
 800112e:	4a50      	ldr	r2, [pc, #320]	; (8001270 <Display+0x190>)
 8001130:	2301      	movs	r3, #1
 8001132:	ca06      	ldmia	r2, {r1, r2}
 8001134:	484d      	ldr	r0, [pc, #308]	; (800126c <Display+0x18c>)
 8001136:	f000 ff11 	bl	8001f5c <ssd1306_WriteString>

	snprintf(buff, sizeof(buff), "[B0]:%d,KA1:%d", real_adc1, keep_adc1);
 800113a:	4b51      	ldr	r3, [pc, #324]	; (8001280 <Display+0x1a0>)
 800113c:	681a      	ldr	r2, [r3, #0]
 800113e:	4b51      	ldr	r3, [pc, #324]	; (8001284 <Display+0x1a4>)
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	9300      	str	r3, [sp, #0]
 8001144:	4613      	mov	r3, r2
 8001146:	4a50      	ldr	r2, [pc, #320]	; (8001288 <Display+0x1a8>)
 8001148:	2140      	movs	r1, #64	; 0x40
 800114a:	4848      	ldr	r0, [pc, #288]	; (800126c <Display+0x18c>)
 800114c:	f004 fb3c 	bl	80057c8 <sniprintf>
	ssd1306_SetCursor(2,8*2);
 8001150:	2110      	movs	r1, #16
 8001152:	2002      	movs	r0, #2
 8001154:	f000 ff28 	bl	8001fa8 <ssd1306_SetCursor>
	ssd1306_WriteString(buff, Font_6x8, White);
 8001158:	4a45      	ldr	r2, [pc, #276]	; (8001270 <Display+0x190>)
 800115a:	2301      	movs	r3, #1
 800115c:	ca06      	ldmia	r2, {r1, r2}
 800115e:	4843      	ldr	r0, [pc, #268]	; (800126c <Display+0x18c>)
 8001160:	f000 fefc 	bl	8001f5c <ssd1306_WriteString>

	snprintf(buff, sizeof(buff), "[A7]:%d,KA2:%d", real_adc2, keep_adc2);
 8001164:	4b49      	ldr	r3, [pc, #292]	; (800128c <Display+0x1ac>)
 8001166:	681a      	ldr	r2, [r3, #0]
 8001168:	4b49      	ldr	r3, [pc, #292]	; (8001290 <Display+0x1b0>)
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	9300      	str	r3, [sp, #0]
 800116e:	4613      	mov	r3, r2
 8001170:	4a48      	ldr	r2, [pc, #288]	; (8001294 <Display+0x1b4>)
 8001172:	2140      	movs	r1, #64	; 0x40
 8001174:	483d      	ldr	r0, [pc, #244]	; (800126c <Display+0x18c>)
 8001176:	f004 fb27 	bl	80057c8 <sniprintf>
	ssd1306_SetCursor(2, 8*3);
 800117a:	2118      	movs	r1, #24
 800117c:	2002      	movs	r0, #2
 800117e:	f000 ff13 	bl	8001fa8 <ssd1306_SetCursor>
	ssd1306_WriteString(buff, Font_6x8, White);
 8001182:	4a3b      	ldr	r2, [pc, #236]	; (8001270 <Display+0x190>)
 8001184:	2301      	movs	r3, #1
 8001186:	ca06      	ldmia	r2, {r1, r2}
 8001188:	4838      	ldr	r0, [pc, #224]	; (800126c <Display+0x18c>)
 800118a:	f000 fee7 	bl	8001f5c <ssd1306_WriteString>

	snprintf(buff, sizeof(buff), "PWM1:%d, GPIO1:%d", PWM1, OUTPUT_1_State);
 800118e:	4b42      	ldr	r3, [pc, #264]	; (8001298 <Display+0x1b8>)
 8001190:	681a      	ldr	r2, [r3, #0]
 8001192:	4b42      	ldr	r3, [pc, #264]	; (800129c <Display+0x1bc>)
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	9300      	str	r3, [sp, #0]
 8001198:	4613      	mov	r3, r2
 800119a:	4a41      	ldr	r2, [pc, #260]	; (80012a0 <Display+0x1c0>)
 800119c:	2140      	movs	r1, #64	; 0x40
 800119e:	4833      	ldr	r0, [pc, #204]	; (800126c <Display+0x18c>)
 80011a0:	f004 fb12 	bl	80057c8 <sniprintf>
	ssd1306_SetCursor(2, 8*4);
 80011a4:	2120      	movs	r1, #32
 80011a6:	2002      	movs	r0, #2
 80011a8:	f000 fefe 	bl	8001fa8 <ssd1306_SetCursor>
	ssd1306_WriteString(buff, Font_6x8, White);
 80011ac:	4a30      	ldr	r2, [pc, #192]	; (8001270 <Display+0x190>)
 80011ae:	2301      	movs	r3, #1
 80011b0:	ca06      	ldmia	r2, {r1, r2}
 80011b2:	482e      	ldr	r0, [pc, #184]	; (800126c <Display+0x18c>)
 80011b4:	f000 fed2 	bl	8001f5c <ssd1306_WriteString>
	snprintf(buff, sizeof(buff), "PWM2:%d, GPIO2:%d", PWM2, OUTPUT_2_State);
 80011b8:	4b3a      	ldr	r3, [pc, #232]	; (80012a4 <Display+0x1c4>)
 80011ba:	681a      	ldr	r2, [r3, #0]
 80011bc:	4b3a      	ldr	r3, [pc, #232]	; (80012a8 <Display+0x1c8>)
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	9300      	str	r3, [sp, #0]
 80011c2:	4613      	mov	r3, r2
 80011c4:	4a39      	ldr	r2, [pc, #228]	; (80012ac <Display+0x1cc>)
 80011c6:	2140      	movs	r1, #64	; 0x40
 80011c8:	4828      	ldr	r0, [pc, #160]	; (800126c <Display+0x18c>)
 80011ca:	f004 fafd 	bl	80057c8 <sniprintf>
	ssd1306_SetCursor(2, 8*5);
 80011ce:	2128      	movs	r1, #40	; 0x28
 80011d0:	2002      	movs	r0, #2
 80011d2:	f000 fee9 	bl	8001fa8 <ssd1306_SetCursor>
	ssd1306_WriteString(buff, Font_6x8, White);
 80011d6:	4a26      	ldr	r2, [pc, #152]	; (8001270 <Display+0x190>)
 80011d8:	2301      	movs	r3, #1
 80011da:	ca06      	ldmia	r2, {r1, r2}
 80011dc:	4823      	ldr	r0, [pc, #140]	; (800126c <Display+0x18c>)
 80011de:	f000 febd 	bl	8001f5c <ssd1306_WriteString>

	snprintf(buff, sizeof(buff), "Buttom[%d]:%d,%d,%d,%d",buttom_State, buttom_flag[1],
 80011e2:	4b33      	ldr	r3, [pc, #204]	; (80012b0 <Display+0x1d0>)
 80011e4:	681c      	ldr	r4, [r3, #0]
 80011e6:	4b33      	ldr	r3, [pc, #204]	; (80012b4 <Display+0x1d4>)
 80011e8:	685b      	ldr	r3, [r3, #4]
 80011ea:	4a32      	ldr	r2, [pc, #200]	; (80012b4 <Display+0x1d4>)
 80011ec:	6892      	ldr	r2, [r2, #8]
 80011ee:	4931      	ldr	r1, [pc, #196]	; (80012b4 <Display+0x1d4>)
 80011f0:	68c9      	ldr	r1, [r1, #12]
 80011f2:	4830      	ldr	r0, [pc, #192]	; (80012b4 <Display+0x1d4>)
 80011f4:	6900      	ldr	r0, [r0, #16]
 80011f6:	9003      	str	r0, [sp, #12]
 80011f8:	9102      	str	r1, [sp, #8]
 80011fa:	9201      	str	r2, [sp, #4]
 80011fc:	9300      	str	r3, [sp, #0]
 80011fe:	4623      	mov	r3, r4
 8001200:	4a2d      	ldr	r2, [pc, #180]	; (80012b8 <Display+0x1d8>)
 8001202:	2140      	movs	r1, #64	; 0x40
 8001204:	4819      	ldr	r0, [pc, #100]	; (800126c <Display+0x18c>)
 8001206:	f004 fadf 	bl	80057c8 <sniprintf>
			buttom_flag[2], buttom_flag[3], buttom_flag[4]);
	ssd1306_SetCursor(2, 8*6);
 800120a:	2130      	movs	r1, #48	; 0x30
 800120c:	2002      	movs	r0, #2
 800120e:	f000 fecb 	bl	8001fa8 <ssd1306_SetCursor>
	ssd1306_WriteString(buff, Font_6x8, White);
 8001212:	4a17      	ldr	r2, [pc, #92]	; (8001270 <Display+0x190>)
 8001214:	2301      	movs	r3, #1
 8001216:	ca06      	ldmia	r2, {r1, r2}
 8001218:	4814      	ldr	r0, [pc, #80]	; (800126c <Display+0x18c>)
 800121a:	f000 fe9f 	bl	8001f5c <ssd1306_WriteString>

	//snprintf(buff, sizeof(buff), "time:%d,%d", end, start);
	//ssd1306_SetCursor(2, 8*7);
	//ssd1306_WriteString(buff, Font_6x8, White);
	if (end > start) {
 800121e:	4b27      	ldr	r3, [pc, #156]	; (80012bc <Display+0x1dc>)
 8001220:	681a      	ldr	r2, [r3, #0]
 8001222:	4b27      	ldr	r3, [pc, #156]	; (80012c0 <Display+0x1e0>)
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	429a      	cmp	r2, r3
 8001228:	d913      	bls.n	8001252 <Display+0x172>
		snprintf(buff, sizeof(buff), "time:%d", end - start);
 800122a:	4b24      	ldr	r3, [pc, #144]	; (80012bc <Display+0x1dc>)
 800122c:	681a      	ldr	r2, [r3, #0]
 800122e:	4b24      	ldr	r3, [pc, #144]	; (80012c0 <Display+0x1e0>)
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	1ad3      	subs	r3, r2, r3
 8001234:	4a23      	ldr	r2, [pc, #140]	; (80012c4 <Display+0x1e4>)
 8001236:	2140      	movs	r1, #64	; 0x40
 8001238:	480c      	ldr	r0, [pc, #48]	; (800126c <Display+0x18c>)
 800123a:	f004 fac5 	bl	80057c8 <sniprintf>
		ssd1306_SetCursor(2, 8*7);
 800123e:	2138      	movs	r1, #56	; 0x38
 8001240:	2002      	movs	r0, #2
 8001242:	f000 feb1 	bl	8001fa8 <ssd1306_SetCursor>
		ssd1306_WriteString(buff, Font_6x8, White);
 8001246:	4a0a      	ldr	r2, [pc, #40]	; (8001270 <Display+0x190>)
 8001248:	2301      	movs	r3, #1
 800124a:	ca06      	ldmia	r2, {r1, r2}
 800124c:	4807      	ldr	r0, [pc, #28]	; (800126c <Display+0x18c>)
 800124e:	f000 fe85 	bl	8001f5c <ssd1306_WriteString>
	}
	ssd1306_UpdateScreen();
 8001252:	f000 fd75 	bl	8001d40 <ssd1306_UpdateScreen>

}
 8001256:	bf00      	nop
 8001258:	3704      	adds	r7, #4
 800125a:	46bd      	mov	sp, r7
 800125c:	bd90      	pop	{r4, r7, pc}
 800125e:	bf00      	nop
 8001260:	08008654 	.word	0x08008654
 8001264:	08008640 	.word	0x08008640
 8001268:	0800864c 	.word	0x0800864c
 800126c:	20000724 	.word	0x20000724
 8001270:	20000010 	.word	0x20000010
 8001274:	20000224 	.word	0x20000224
 8001278:	20000204 	.word	0x20000204
 800127c:	08008660 	.word	0x08008660
 8001280:	20000904 	.word	0x20000904
 8001284:	20000908 	.word	0x20000908
 8001288:	0800866c 	.word	0x0800866c
 800128c:	20000764 	.word	0x20000764
 8001290:	20000720 	.word	0x20000720
 8001294:	0800867c 	.word	0x0800867c
 8001298:	20000214 	.word	0x20000214
 800129c:	2000021c 	.word	0x2000021c
 80012a0:	0800868c 	.word	0x0800868c
 80012a4:	20000218 	.word	0x20000218
 80012a8:	20000220 	.word	0x20000220
 80012ac:	080086a0 	.word	0x080086a0
 80012b0:	20000228 	.word	0x20000228
 80012b4:	20000230 	.word	0x20000230
 80012b8:	080086b4 	.word	0x080086b4
 80012bc:	20000210 	.word	0x20000210
 80012c0:	2000020c 	.word	0x2000020c
 80012c4:	080086cc 	.word	0x080086cc

080012c8 <read_GPIO>:
	if (!i) {
		str[i++] = '0';
	}
	str[i] = 0;
}
int read_GPIO(int th) {
 80012c8:	b580      	push	{r7, lr}
 80012ca:	b084      	sub	sp, #16
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	6078      	str	r0, [r7, #4]
	int state = 0;
 80012d0:	2300      	movs	r3, #0
 80012d2:	60fb      	str	r3, [r7, #12]
	if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_12) == GPIO_PIN_SET) {
 80012d4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80012d8:	482a      	ldr	r0, [pc, #168]	; (8001384 <read_GPIO+0xbc>)
 80012da:	f001 ff83 	bl	80031e4 <HAL_GPIO_ReadPin>
 80012de:	4603      	mov	r3, r0
 80012e0:	2b01      	cmp	r3, #1
 80012e2:	d104      	bne.n	80012ee <read_GPIO+0x26>
		buttom_flag[1]++;
 80012e4:	4b28      	ldr	r3, [pc, #160]	; (8001388 <read_GPIO+0xc0>)
 80012e6:	685b      	ldr	r3, [r3, #4]
 80012e8:	3301      	adds	r3, #1
 80012ea:	4a27      	ldr	r2, [pc, #156]	; (8001388 <read_GPIO+0xc0>)
 80012ec:	6053      	str	r3, [r2, #4]
	}
	if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_13) == GPIO_PIN_SET) {
 80012ee:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80012f2:	4824      	ldr	r0, [pc, #144]	; (8001384 <read_GPIO+0xbc>)
 80012f4:	f001 ff76 	bl	80031e4 <HAL_GPIO_ReadPin>
 80012f8:	4603      	mov	r3, r0
 80012fa:	2b01      	cmp	r3, #1
 80012fc:	d104      	bne.n	8001308 <read_GPIO+0x40>
		buttom_flag[2]++;
 80012fe:	4b22      	ldr	r3, [pc, #136]	; (8001388 <read_GPIO+0xc0>)
 8001300:	689b      	ldr	r3, [r3, #8]
 8001302:	3301      	adds	r3, #1
 8001304:	4a20      	ldr	r2, [pc, #128]	; (8001388 <read_GPIO+0xc0>)
 8001306:	6093      	str	r3, [r2, #8]
	}
	if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_14) == GPIO_PIN_SET) {
 8001308:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800130c:	481d      	ldr	r0, [pc, #116]	; (8001384 <read_GPIO+0xbc>)
 800130e:	f001 ff69 	bl	80031e4 <HAL_GPIO_ReadPin>
 8001312:	4603      	mov	r3, r0
 8001314:	2b01      	cmp	r3, #1
 8001316:	d104      	bne.n	8001322 <read_GPIO+0x5a>
		buttom_flag[3]++;
 8001318:	4b1b      	ldr	r3, [pc, #108]	; (8001388 <read_GPIO+0xc0>)
 800131a:	68db      	ldr	r3, [r3, #12]
 800131c:	3301      	adds	r3, #1
 800131e:	4a1a      	ldr	r2, [pc, #104]	; (8001388 <read_GPIO+0xc0>)
 8001320:	60d3      	str	r3, [r2, #12]
	}
	if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_15) == GPIO_PIN_SET) {
 8001322:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001326:	4817      	ldr	r0, [pc, #92]	; (8001384 <read_GPIO+0xbc>)
 8001328:	f001 ff5c 	bl	80031e4 <HAL_GPIO_ReadPin>
 800132c:	4603      	mov	r3, r0
 800132e:	2b01      	cmp	r3, #1
 8001330:	d104      	bne.n	800133c <read_GPIO+0x74>
		buttom_flag[4]++;
 8001332:	4b15      	ldr	r3, [pc, #84]	; (8001388 <read_GPIO+0xc0>)
 8001334:	691b      	ldr	r3, [r3, #16]
 8001336:	3301      	adds	r3, #1
 8001338:	4a13      	ldr	r2, [pc, #76]	; (8001388 <read_GPIO+0xc0>)
 800133a:	6113      	str	r3, [r2, #16]
	}

	if (buttom_flag[1] >= th)
 800133c:	4b12      	ldr	r3, [pc, #72]	; (8001388 <read_GPIO+0xc0>)
 800133e:	685b      	ldr	r3, [r3, #4]
 8001340:	687a      	ldr	r2, [r7, #4]
 8001342:	429a      	cmp	r2, r3
 8001344:	dc01      	bgt.n	800134a <read_GPIO+0x82>
		state = 1;
 8001346:	2301      	movs	r3, #1
 8001348:	60fb      	str	r3, [r7, #12]
	if (buttom_flag[2] >= th)
 800134a:	4b0f      	ldr	r3, [pc, #60]	; (8001388 <read_GPIO+0xc0>)
 800134c:	689b      	ldr	r3, [r3, #8]
 800134e:	687a      	ldr	r2, [r7, #4]
 8001350:	429a      	cmp	r2, r3
 8001352:	dc02      	bgt.n	800135a <read_GPIO+0x92>
		state = state + 2;
 8001354:	68fb      	ldr	r3, [r7, #12]
 8001356:	3302      	adds	r3, #2
 8001358:	60fb      	str	r3, [r7, #12]
	if (buttom_flag[3] >= th)
 800135a:	4b0b      	ldr	r3, [pc, #44]	; (8001388 <read_GPIO+0xc0>)
 800135c:	68db      	ldr	r3, [r3, #12]
 800135e:	687a      	ldr	r2, [r7, #4]
 8001360:	429a      	cmp	r2, r3
 8001362:	dc02      	bgt.n	800136a <read_GPIO+0xa2>
		state = state + 4;
 8001364:	68fb      	ldr	r3, [r7, #12]
 8001366:	3304      	adds	r3, #4
 8001368:	60fb      	str	r3, [r7, #12]
	if (buttom_flag[4] >= th)
 800136a:	4b07      	ldr	r3, [pc, #28]	; (8001388 <read_GPIO+0xc0>)
 800136c:	691b      	ldr	r3, [r3, #16]
 800136e:	687a      	ldr	r2, [r7, #4]
 8001370:	429a      	cmp	r2, r3
 8001372:	dc02      	bgt.n	800137a <read_GPIO+0xb2>
		state = state + 8;
 8001374:	68fb      	ldr	r3, [r7, #12]
 8001376:	3308      	adds	r3, #8
 8001378:	60fb      	str	r3, [r7, #12]

	return state;
 800137a:	68fb      	ldr	r3, [r7, #12]
}
 800137c:	4618      	mov	r0, r3
 800137e:	3710      	adds	r7, #16
 8001380:	46bd      	mov	sp, r7
 8001382:	bd80      	pop	{r7, pc}
 8001384:	40010c00 	.word	0x40010c00
 8001388:	20000230 	.word	0x20000230

0800138c <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 800138c:	b480      	push	{r7}
 800138e:	b083      	sub	sp, #12
 8001390:	af00      	add	r7, sp, #0
 8001392:	4603      	mov	r3, r0
 8001394:	80fb      	strh	r3, [r7, #6]
	 HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13); //PC13 Led
	 buttom_flag[4]++;
	 break;
	 }
	 */
}
 8001396:	bf00      	nop
 8001398:	370c      	adds	r7, #12
 800139a:	46bd      	mov	sp, r7
 800139c:	bc80      	pop	{r7}
 800139e:	4770      	bx	lr

080013a0 <main>:
/* USER CODE END 0 */

int main(void) {
 80013a0:	b580      	push	{r7, lr}
 80013a2:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration----------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80013a4:	f000 fe70 	bl	8002088 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80013a8:	f000 f9b6 	bl	8001718 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80013ac:	f7ff fcb0 	bl	8000d10 <MX_GPIO_Init>
	MX_DMA_Init();
 80013b0:	f7ff fc90 	bl	8000cd4 <MX_DMA_Init>
	MX_I2C1_Init();
 80013b4:	f7ff fd1c 	bl	8000df0 <MX_I2C1_Init>
	MX_ADC1_Init();
 80013b8:	f7ff fbd6 	bl	8000b68 <MX_ADC1_Init>
	MX_TIM2_Init();
 80013bc:	f000 fb1a 	bl	80019f4 <MX_TIM2_Init>

	/* USER CODE BEGIN 2 */
	//ssd1306_Reset();
	ssd1306_Init();
 80013c0:	f000 fc32 	bl	8001c28 <ssd1306_Init>
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*) &ADC_Value, 100);
 80013c4:	2264      	movs	r2, #100	; 0x64
 80013c6:	499a      	ldr	r1, [pc, #616]	; (8001630 <main+0x290>)
 80013c8:	489a      	ldr	r0, [pc, #616]	; (8001634 <main+0x294>)
 80013ca:	f000 ff9d 	bl	8002308 <HAL_ADC_Start_DMA>

	motor_control(0, 0);
 80013ce:	2100      	movs	r1, #0
 80013d0:	2000      	movs	r0, #0
 80013d2:	f7ff fd6b 	bl	8000eac <motor_control>
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */

		//系統運行時間
		start = HAL_GetTick();
 80013d6:	f000 fe97 	bl	8002108 <HAL_GetTick>
 80013da:	4602      	mov	r2, r0
 80013dc:	4b96      	ldr	r3, [pc, #600]	; (8001638 <main+0x298>)
 80013de:	601a      	str	r2, [r3, #0]
		if (start < end) {	//時間未結束
 80013e0:	4b95      	ldr	r3, [pc, #596]	; (8001638 <main+0x298>)
 80013e2:	681a      	ldr	r2, [r3, #0]
 80013e4:	4b95      	ldr	r3, [pc, #596]	; (800163c <main+0x29c>)
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	429a      	cmp	r2, r3
 80013ea:	f080 8133 	bcs.w	8001654 <main+0x2b4>
			if (dir_flag == 1) {
 80013ee:	4b94      	ldr	r3, [pc, #592]	; (8001640 <main+0x2a0>)
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	2b01      	cmp	r3, #1
 80013f4:	f040 8086 	bne.w	8001504 <main+0x164>
				if (start < end - 4000) {
 80013f8:	4b90      	ldr	r3, [pc, #576]	; (800163c <main+0x29c>)
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	f5a3 627a 	sub.w	r2, r3, #4000	; 0xfa0
 8001400:	4b8d      	ldr	r3, [pc, #564]	; (8001638 <main+0x298>)
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	429a      	cmp	r2, r3
 8001406:	d924      	bls.n	8001452 <main+0xb2>
					stage = 1;
 8001408:	4b8e      	ldr	r3, [pc, #568]	; (8001644 <main+0x2a4>)
 800140a:	2201      	movs	r2, #1
 800140c:	601a      	str	r2, [r3, #0]
					if (stage != last_stage) {
 800140e:	4b8d      	ldr	r3, [pc, #564]	; (8001644 <main+0x2a4>)
 8001410:	681a      	ldr	r2, [r3, #0]
 8001412:	4b8d      	ldr	r3, [pc, #564]	; (8001648 <main+0x2a8>)
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	429a      	cmp	r2, r3
 8001418:	d009      	beq.n	800142e <main+0x8e>
						last_stage = stage;
 800141a:	4b8a      	ldr	r3, [pc, #552]	; (8001644 <main+0x2a4>)
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	4a8a      	ldr	r2, [pc, #552]	; (8001648 <main+0x2a8>)
 8001420:	6013      	str	r3, [r2, #0]
						detection_load(0, sensitivity);
 8001422:	4b8a      	ldr	r3, [pc, #552]	; (800164c <main+0x2ac>)
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	4619      	mov	r1, r3
 8001428:	2000      	movs	r0, #0
 800142a:	f7ff fe2b 	bl	8001084 <detection_load>
					}
					if (detection_load(1, sensitivity))
 800142e:	4b87      	ldr	r3, [pc, #540]	; (800164c <main+0x2ac>)
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	4619      	mov	r1, r3
 8001434:	2001      	movs	r0, #1
 8001436:	f7ff fe25 	bl	8001084 <detection_load>
 800143a:	4603      	mov	r3, r0
 800143c:	2b00      	cmp	r3, #0
 800143e:	d002      	beq.n	8001446 <main+0xa6>
						sysinfo_State = 1;
 8001440:	4b83      	ldr	r3, [pc, #524]	; (8001650 <main+0x2b0>)
 8001442:	2201      	movs	r2, #1
 8001444:	601a      	str	r2, [r3, #0]
					motor_control(1, 1000);
 8001446:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800144a:	2001      	movs	r0, #1
 800144c:	f7ff fd2e 	bl	8000eac <motor_control>
 8001450:	e0e4      	b.n	800161c <main+0x27c>
				} else if (start < end - 2000) {
 8001452:	4b7a      	ldr	r3, [pc, #488]	; (800163c <main+0x29c>)
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	f5a3 62fa 	sub.w	r2, r3, #2000	; 0x7d0
 800145a:	4b77      	ldr	r3, [pc, #476]	; (8001638 <main+0x298>)
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	429a      	cmp	r2, r3
 8001460:	d924      	bls.n	80014ac <main+0x10c>
					stage = 2;
 8001462:	4b78      	ldr	r3, [pc, #480]	; (8001644 <main+0x2a4>)
 8001464:	2202      	movs	r2, #2
 8001466:	601a      	str	r2, [r3, #0]
					if (stage != last_stage) {
 8001468:	4b76      	ldr	r3, [pc, #472]	; (8001644 <main+0x2a4>)
 800146a:	681a      	ldr	r2, [r3, #0]
 800146c:	4b76      	ldr	r3, [pc, #472]	; (8001648 <main+0x2a8>)
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	429a      	cmp	r2, r3
 8001472:	d009      	beq.n	8001488 <main+0xe8>
						last_stage = stage;
 8001474:	4b73      	ldr	r3, [pc, #460]	; (8001644 <main+0x2a4>)
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	4a73      	ldr	r2, [pc, #460]	; (8001648 <main+0x2a8>)
 800147a:	6013      	str	r3, [r2, #0]
						detection_load(0, sensitivity);
 800147c:	4b73      	ldr	r3, [pc, #460]	; (800164c <main+0x2ac>)
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	4619      	mov	r1, r3
 8001482:	2000      	movs	r0, #0
 8001484:	f7ff fdfe 	bl	8001084 <detection_load>
					}
					if (detection_load(1, sensitivity))
 8001488:	4b70      	ldr	r3, [pc, #448]	; (800164c <main+0x2ac>)
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	4619      	mov	r1, r3
 800148e:	2001      	movs	r0, #1
 8001490:	f7ff fdf8 	bl	8001084 <detection_load>
 8001494:	4603      	mov	r3, r0
 8001496:	2b00      	cmp	r3, #0
 8001498:	d002      	beq.n	80014a0 <main+0x100>
						sysinfo_State = 1;
 800149a:	4b6d      	ldr	r3, [pc, #436]	; (8001650 <main+0x2b0>)
 800149c:	2201      	movs	r2, #1
 800149e:	601a      	str	r2, [r3, #0]
					motor_control(1, 4000);
 80014a0:	f44f 617a 	mov.w	r1, #4000	; 0xfa0
 80014a4:	2001      	movs	r0, #1
 80014a6:	f7ff fd01 	bl	8000eac <motor_control>
 80014aa:	e0b7      	b.n	800161c <main+0x27c>
				} else if (start < end) {
 80014ac:	4b62      	ldr	r3, [pc, #392]	; (8001638 <main+0x298>)
 80014ae:	681a      	ldr	r2, [r3, #0]
 80014b0:	4b62      	ldr	r3, [pc, #392]	; (800163c <main+0x29c>)
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	429a      	cmp	r2, r3
 80014b6:	f080 80b1 	bcs.w	800161c <main+0x27c>
					stage = 3;
 80014ba:	4b62      	ldr	r3, [pc, #392]	; (8001644 <main+0x2a4>)
 80014bc:	2203      	movs	r2, #3
 80014be:	601a      	str	r2, [r3, #0]
					if (stage != last_stage) {
 80014c0:	4b60      	ldr	r3, [pc, #384]	; (8001644 <main+0x2a4>)
 80014c2:	681a      	ldr	r2, [r3, #0]
 80014c4:	4b60      	ldr	r3, [pc, #384]	; (8001648 <main+0x2a8>)
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	429a      	cmp	r2, r3
 80014ca:	d009      	beq.n	80014e0 <main+0x140>
						last_stage = stage;
 80014cc:	4b5d      	ldr	r3, [pc, #372]	; (8001644 <main+0x2a4>)
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	4a5d      	ldr	r2, [pc, #372]	; (8001648 <main+0x2a8>)
 80014d2:	6013      	str	r3, [r2, #0]
						detection_load(0, sensitivity);
 80014d4:	4b5d      	ldr	r3, [pc, #372]	; (800164c <main+0x2ac>)
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	4619      	mov	r1, r3
 80014da:	2000      	movs	r0, #0
 80014dc:	f7ff fdd2 	bl	8001084 <detection_load>
					}
					if (detection_load(1, sensitivity))
 80014e0:	4b5a      	ldr	r3, [pc, #360]	; (800164c <main+0x2ac>)
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	4619      	mov	r1, r3
 80014e6:	2001      	movs	r0, #1
 80014e8:	f7ff fdcc 	bl	8001084 <detection_load>
 80014ec:	4603      	mov	r3, r0
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d002      	beq.n	80014f8 <main+0x158>
						sysinfo_State = 1;
 80014f2:	4b57      	ldr	r3, [pc, #348]	; (8001650 <main+0x2b0>)
 80014f4:	2201      	movs	r2, #1
 80014f6:	601a      	str	r2, [r3, #0]
					motor_control(1, 1000);
 80014f8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80014fc:	2001      	movs	r0, #1
 80014fe:	f7ff fcd5 	bl	8000eac <motor_control>
 8001502:	e08b      	b.n	800161c <main+0x27c>
				}
			} else if (dir_flag == 4) {
 8001504:	4b4e      	ldr	r3, [pc, #312]	; (8001640 <main+0x2a0>)
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	2b04      	cmp	r3, #4
 800150a:	f040 8087 	bne.w	800161c <main+0x27c>
				if (start < end - 4000) {
 800150e:	4b4b      	ldr	r3, [pc, #300]	; (800163c <main+0x29c>)
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	f5a3 627a 	sub.w	r2, r3, #4000	; 0xfa0
 8001516:	4b48      	ldr	r3, [pc, #288]	; (8001638 <main+0x298>)
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	429a      	cmp	r2, r3
 800151c:	d925      	bls.n	800156a <main+0x1ca>
					stage = 1;
 800151e:	4b49      	ldr	r3, [pc, #292]	; (8001644 <main+0x2a4>)
 8001520:	2201      	movs	r2, #1
 8001522:	601a      	str	r2, [r3, #0]
					if (stage != last_stage) {
 8001524:	4b47      	ldr	r3, [pc, #284]	; (8001644 <main+0x2a4>)
 8001526:	681a      	ldr	r2, [r3, #0]
 8001528:	4b47      	ldr	r3, [pc, #284]	; (8001648 <main+0x2a8>)
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	429a      	cmp	r2, r3
 800152e:	d009      	beq.n	8001544 <main+0x1a4>
						last_stage = stage;
 8001530:	4b44      	ldr	r3, [pc, #272]	; (8001644 <main+0x2a4>)
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	4a44      	ldr	r2, [pc, #272]	; (8001648 <main+0x2a8>)
 8001536:	6013      	str	r3, [r2, #0]
						detection_load(0, sensitivity);
 8001538:	4b44      	ldr	r3, [pc, #272]	; (800164c <main+0x2ac>)
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	4619      	mov	r1, r3
 800153e:	2000      	movs	r0, #0
 8001540:	f7ff fda0 	bl	8001084 <detection_load>
					}
					if (detection_load(1, sensitivity))
 8001544:	4b41      	ldr	r3, [pc, #260]	; (800164c <main+0x2ac>)
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	4619      	mov	r1, r3
 800154a:	2001      	movs	r0, #1
 800154c:	f7ff fd9a 	bl	8001084 <detection_load>
 8001550:	4603      	mov	r3, r0
 8001552:	2b00      	cmp	r3, #0
 8001554:	d002      	beq.n	800155c <main+0x1bc>
						sysinfo_State = 1;
 8001556:	4b3e      	ldr	r3, [pc, #248]	; (8001650 <main+0x2b0>)
 8001558:	2201      	movs	r2, #1
 800155a:	601a      	str	r2, [r3, #0]
					motor_control(-1, 1000);
 800155c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001560:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001564:	f7ff fca2 	bl	8000eac <motor_control>
 8001568:	e058      	b.n	800161c <main+0x27c>
				} else if (start < end - 2000) {
 800156a:	4b34      	ldr	r3, [pc, #208]	; (800163c <main+0x29c>)
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	f5a3 62fa 	sub.w	r2, r3, #2000	; 0x7d0
 8001572:	4b31      	ldr	r3, [pc, #196]	; (8001638 <main+0x298>)
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	429a      	cmp	r2, r3
 8001578:	d925      	bls.n	80015c6 <main+0x226>
					stage = 2;
 800157a:	4b32      	ldr	r3, [pc, #200]	; (8001644 <main+0x2a4>)
 800157c:	2202      	movs	r2, #2
 800157e:	601a      	str	r2, [r3, #0]
					if (stage != last_stage) {
 8001580:	4b30      	ldr	r3, [pc, #192]	; (8001644 <main+0x2a4>)
 8001582:	681a      	ldr	r2, [r3, #0]
 8001584:	4b30      	ldr	r3, [pc, #192]	; (8001648 <main+0x2a8>)
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	429a      	cmp	r2, r3
 800158a:	d009      	beq.n	80015a0 <main+0x200>
						last_stage = stage;
 800158c:	4b2d      	ldr	r3, [pc, #180]	; (8001644 <main+0x2a4>)
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	4a2d      	ldr	r2, [pc, #180]	; (8001648 <main+0x2a8>)
 8001592:	6013      	str	r3, [r2, #0]
						detection_load(0, sensitivity);
 8001594:	4b2d      	ldr	r3, [pc, #180]	; (800164c <main+0x2ac>)
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	4619      	mov	r1, r3
 800159a:	2000      	movs	r0, #0
 800159c:	f7ff fd72 	bl	8001084 <detection_load>
					}
					if (detection_load(1, sensitivity))
 80015a0:	4b2a      	ldr	r3, [pc, #168]	; (800164c <main+0x2ac>)
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	4619      	mov	r1, r3
 80015a6:	2001      	movs	r0, #1
 80015a8:	f7ff fd6c 	bl	8001084 <detection_load>
 80015ac:	4603      	mov	r3, r0
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d002      	beq.n	80015b8 <main+0x218>
						sysinfo_State = 1;
 80015b2:	4b27      	ldr	r3, [pc, #156]	; (8001650 <main+0x2b0>)
 80015b4:	2201      	movs	r2, #1
 80015b6:	601a      	str	r2, [r3, #0]
					motor_control(-1, 4000);
 80015b8:	f44f 617a 	mov.w	r1, #4000	; 0xfa0
 80015bc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80015c0:	f7ff fc74 	bl	8000eac <motor_control>
 80015c4:	e02a      	b.n	800161c <main+0x27c>
				} else if (start < end) {
 80015c6:	4b1c      	ldr	r3, [pc, #112]	; (8001638 <main+0x298>)
 80015c8:	681a      	ldr	r2, [r3, #0]
 80015ca:	4b1c      	ldr	r3, [pc, #112]	; (800163c <main+0x29c>)
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	429a      	cmp	r2, r3
 80015d0:	d224      	bcs.n	800161c <main+0x27c>
					stage = 3;
 80015d2:	4b1c      	ldr	r3, [pc, #112]	; (8001644 <main+0x2a4>)
 80015d4:	2203      	movs	r2, #3
 80015d6:	601a      	str	r2, [r3, #0]
					if (stage != last_stage) {
 80015d8:	4b1a      	ldr	r3, [pc, #104]	; (8001644 <main+0x2a4>)
 80015da:	681a      	ldr	r2, [r3, #0]
 80015dc:	4b1a      	ldr	r3, [pc, #104]	; (8001648 <main+0x2a8>)
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	429a      	cmp	r2, r3
 80015e2:	d009      	beq.n	80015f8 <main+0x258>
						last_stage = stage;
 80015e4:	4b17      	ldr	r3, [pc, #92]	; (8001644 <main+0x2a4>)
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	4a17      	ldr	r2, [pc, #92]	; (8001648 <main+0x2a8>)
 80015ea:	6013      	str	r3, [r2, #0]
						detection_load(0, sensitivity);
 80015ec:	4b17      	ldr	r3, [pc, #92]	; (800164c <main+0x2ac>)
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	4619      	mov	r1, r3
 80015f2:	2000      	movs	r0, #0
 80015f4:	f7ff fd46 	bl	8001084 <detection_load>
					}
					if (detection_load(1, sensitivity))
 80015f8:	4b14      	ldr	r3, [pc, #80]	; (800164c <main+0x2ac>)
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	4619      	mov	r1, r3
 80015fe:	2001      	movs	r0, #1
 8001600:	f7ff fd40 	bl	8001084 <detection_load>
 8001604:	4603      	mov	r3, r0
 8001606:	2b00      	cmp	r3, #0
 8001608:	d002      	beq.n	8001610 <main+0x270>
						sysinfo_State = 1;
 800160a:	4b11      	ldr	r3, [pc, #68]	; (8001650 <main+0x2b0>)
 800160c:	2201      	movs	r2, #1
 800160e:	601a      	str	r2, [r3, #0]
					motor_control(-1, 1000);
 8001610:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001614:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001618:	f7ff fc48 	bl	8000eac <motor_control>
				}
			}
			if (sysinfo_State == 1)
 800161c:	4b0c      	ldr	r3, [pc, #48]	; (8001650 <main+0x2b0>)
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	2b01      	cmp	r3, #1
 8001622:	d125      	bne.n	8001670 <main+0x2d0>
				end = start;	//壓力觸發
 8001624:	4b04      	ldr	r3, [pc, #16]	; (8001638 <main+0x298>)
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	4a04      	ldr	r2, [pc, #16]	; (800163c <main+0x29c>)
 800162a:	6013      	str	r3, [r2, #0]
 800162c:	e020      	b.n	8001670 <main+0x2d0>
 800162e:	bf00      	nop
 8001630:	20000768 	.word	0x20000768
 8001634:	20000658 	.word	0x20000658
 8001638:	2000020c 	.word	0x2000020c
 800163c:	20000210 	.word	0x20000210
 8001640:	2000022c 	.word	0x2000022c
 8001644:	20000204 	.word	0x20000204
 8001648:	20000208 	.word	0x20000208
 800164c:	20000004 	.word	0x20000004
 8001650:	20000224 	.word	0x20000224
		} else {	//時間結束
			stage = 0;
 8001654:	4b27      	ldr	r3, [pc, #156]	; (80016f4 <main+0x354>)
 8001656:	2200      	movs	r2, #0
 8001658:	601a      	str	r2, [r3, #0]
			sysinfo_State = 0;
 800165a:	4b27      	ldr	r3, [pc, #156]	; (80016f8 <main+0x358>)
 800165c:	2200      	movs	r2, #0
 800165e:	601a      	str	r2, [r3, #0]
			detection_load(0, 50);
 8001660:	2132      	movs	r1, #50	; 0x32
 8001662:	2000      	movs	r0, #0
 8001664:	f7ff fd0e 	bl	8001084 <detection_load>
			motor_control(0, 0);
 8001668:	2100      	movs	r1, #0
 800166a:	2000      	movs	r0, #0
 800166c:	f7ff fc1e 	bl	8000eac <motor_control>
		}

		//壓力觸動時輸出1
		//sysinfo_State = read_ADC();
		read_ADC();
 8001670:	f7ff fcb2 	bl	8000fd8 <read_ADC>

		//讀取案就狀態
		buttom_State = read_GPIO(1);
 8001674:	2001      	movs	r0, #1
 8001676:	f7ff fe27 	bl	80012c8 <read_GPIO>
 800167a:	4603      	mov	r3, r0
 800167c:	461a      	mov	r2, r3
 800167e:	4b1f      	ldr	r3, [pc, #124]	; (80016fc <main+0x35c>)
 8001680:	601a      	str	r2, [r3, #0]
		if (buttom_State == 1) {
 8001682:	4b1e      	ldr	r3, [pc, #120]	; (80016fc <main+0x35c>)
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	2b01      	cmp	r3, #1
 8001688:	d10a      	bne.n	80016a0 <main+0x300>
			end = start + runtime;
 800168a:	4b1d      	ldr	r3, [pc, #116]	; (8001700 <main+0x360>)
 800168c:	681a      	ldr	r2, [r3, #0]
 800168e:	4b1d      	ldr	r3, [pc, #116]	; (8001704 <main+0x364>)
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	4413      	add	r3, r2
 8001694:	4a1c      	ldr	r2, [pc, #112]	; (8001708 <main+0x368>)
 8001696:	6013      	str	r3, [r2, #0]
			dir_flag = 1;
 8001698:	4b1c      	ldr	r3, [pc, #112]	; (800170c <main+0x36c>)
 800169a:	2201      	movs	r2, #1
 800169c:	601a      	str	r2, [r3, #0]
 800169e:	e01a      	b.n	80016d6 <main+0x336>
		} else if (buttom_State == 4) {
 80016a0:	4b16      	ldr	r3, [pc, #88]	; (80016fc <main+0x35c>)
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	2b04      	cmp	r3, #4
 80016a6:	d10a      	bne.n	80016be <main+0x31e>
			end = start + runtime;
 80016a8:	4b15      	ldr	r3, [pc, #84]	; (8001700 <main+0x360>)
 80016aa:	681a      	ldr	r2, [r3, #0]
 80016ac:	4b15      	ldr	r3, [pc, #84]	; (8001704 <main+0x364>)
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	4413      	add	r3, r2
 80016b2:	4a15      	ldr	r2, [pc, #84]	; (8001708 <main+0x368>)
 80016b4:	6013      	str	r3, [r2, #0]
			dir_flag = 4;
 80016b6:	4b15      	ldr	r3, [pc, #84]	; (800170c <main+0x36c>)
 80016b8:	2204      	movs	r2, #4
 80016ba:	601a      	str	r2, [r3, #0]
 80016bc:	e00b      	b.n	80016d6 <main+0x336>
		} else if (buttom_State == 2) {
 80016be:	4b0f      	ldr	r3, [pc, #60]	; (80016fc <main+0x35c>)
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	2b02      	cmp	r3, #2
 80016c4:	d107      	bne.n	80016d6 <main+0x336>
			end = start;
 80016c6:	4b0e      	ldr	r3, [pc, #56]	; (8001700 <main+0x360>)
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	4a0f      	ldr	r2, [pc, #60]	; (8001708 <main+0x368>)
 80016cc:	6013      	str	r3, [r2, #0]
			motor_control(0, 0);
 80016ce:	2100      	movs	r1, #0
 80016d0:	2000      	movs	r0, #0
 80016d2:	f7ff fbeb 	bl	8000eac <motor_control>
		}

		//LCD畫面
		if (i2c_working == 1)
 80016d6:	4b0e      	ldr	r3, [pc, #56]	; (8001710 <main+0x370>)
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	2b01      	cmp	r3, #1
 80016dc:	d101      	bne.n	80016e2 <main+0x342>
			Display();
 80016de:	f7ff fcff 	bl	80010e0 <Display>

		//系統LED PC13
		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 80016e2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80016e6:	480b      	ldr	r0, [pc, #44]	; (8001714 <main+0x374>)
 80016e8:	f001 fdab 	bl	8003242 <HAL_GPIO_TogglePin>

		//清除buttom flag
		clean_buttom_flag();
 80016ec:	f7ff fc56 	bl	8000f9c <clean_buttom_flag>
		start = HAL_GetTick();
 80016f0:	e671      	b.n	80013d6 <main+0x36>
 80016f2:	bf00      	nop
 80016f4:	20000204 	.word	0x20000204
 80016f8:	20000224 	.word	0x20000224
 80016fc:	20000228 	.word	0x20000228
 8001700:	2000020c 	.word	0x2000020c
 8001704:	20000000 	.word	0x20000000
 8001708:	20000210 	.word	0x20000210
 800170c:	2000022c 	.word	0x2000022c
 8001710:	20000008 	.word	0x20000008
 8001714:	40011000 	.word	0x40011000

08001718 <SystemClock_Config>:

}

/** System Clock Configuration
 */
void SystemClock_Config(void) {
 8001718:	b580      	push	{r7, lr}
 800171a:	b094      	sub	sp, #80	; 0x50
 800171c:	af00      	add	r7, sp, #0
	RCC_ClkInitTypeDef RCC_ClkInitStruct;
	RCC_PeriphCLKInitTypeDef PeriphClkInit;

	/**Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800171e:	2302      	movs	r3, #2
 8001720:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001722:	2301      	movs	r3, #1
 8001724:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.HSICalibrationValue = 16;
 8001726:	2310      	movs	r3, #16
 8001728:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800172a:	2302      	movs	r3, #2
 800172c:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 800172e:	2300      	movs	r3, #0
 8001730:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8001732:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 8001736:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8001738:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800173c:	4618      	mov	r0, r3
 800173e:	f002 f987 	bl	8003a50 <HAL_RCC_OscConfig>
 8001742:	4603      	mov	r3, r0
 8001744:	2b00      	cmp	r3, #0
 8001746:	d004      	beq.n	8001752 <SystemClock_Config+0x3a>
		_Error_Handler(__FILE__, __LINE__);
 8001748:	f44f 71de 	mov.w	r1, #444	; 0x1bc
 800174c:	4822      	ldr	r0, [pc, #136]	; (80017d8 <SystemClock_Config+0xc0>)
 800174e:	f000 f847 	bl	80017e0 <_Error_Handler>
	}

	/**Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8001752:	230f      	movs	r3, #15
 8001754:	617b      	str	r3, [r7, #20]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001756:	2302      	movs	r3, #2
 8001758:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800175a:	2300      	movs	r3, #0
 800175c:	61fb      	str	r3, [r7, #28]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800175e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001762:	623b      	str	r3, [r7, #32]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV16;
 8001764:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8001768:	627b      	str	r3, [r7, #36]	; 0x24

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 800176a:	f107 0314 	add.w	r3, r7, #20
 800176e:	2102      	movs	r1, #2
 8001770:	4618      	mov	r0, r3
 8001772:	f002 fbd1 	bl	8003f18 <HAL_RCC_ClockConfig>
 8001776:	4603      	mov	r3, r0
 8001778:	2b00      	cmp	r3, #0
 800177a:	d004      	beq.n	8001786 <SystemClock_Config+0x6e>
		_Error_Handler(__FILE__, __LINE__);
 800177c:	f240 11c9 	movw	r1, #457	; 0x1c9
 8001780:	4815      	ldr	r0, [pc, #84]	; (80017d8 <SystemClock_Config+0xc0>)
 8001782:	f000 f82d 	bl	80017e0 <_Error_Handler>
	}

	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001786:	2302      	movs	r3, #2
 8001788:	607b      	str	r3, [r7, #4]
	PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV8;
 800178a:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 800178e:	60fb      	str	r3, [r7, #12]
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK) {
 8001790:	1d3b      	adds	r3, r7, #4
 8001792:	4618      	mov	r0, r3
 8001794:	f002 fd52 	bl	800423c <HAL_RCCEx_PeriphCLKConfig>
 8001798:	4603      	mov	r3, r0
 800179a:	2b00      	cmp	r3, #0
 800179c:	d004      	beq.n	80017a8 <SystemClock_Config+0x90>
		_Error_Handler(__FILE__, __LINE__);
 800179e:	f240 11cf 	movw	r1, #463	; 0x1cf
 80017a2:	480d      	ldr	r0, [pc, #52]	; (80017d8 <SystemClock_Config+0xc0>)
 80017a4:	f000 f81c 	bl	80017e0 <_Error_Handler>
	}

	/**Configure the Systick interrupt time
	 */
	HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / 1000);
 80017a8:	f002 fd0c 	bl	80041c4 <HAL_RCC_GetHCLKFreq>
 80017ac:	4602      	mov	r2, r0
 80017ae:	4b0b      	ldr	r3, [pc, #44]	; (80017dc <SystemClock_Config+0xc4>)
 80017b0:	fba3 2302 	umull	r2, r3, r3, r2
 80017b4:	099b      	lsrs	r3, r3, #6
 80017b6:	4618      	mov	r0, r3
 80017b8:	f001 f987 	bl	8002aca <HAL_SYSTICK_Config>

	/**Configure the Systick
	 */
	HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 80017bc:	2004      	movs	r0, #4
 80017be:	f001 f991 	bl	8002ae4 <HAL_SYSTICK_CLKSourceConfig>

	/* SysTick_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 80017c2:	2200      	movs	r2, #0
 80017c4:	2100      	movs	r1, #0
 80017c6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80017ca:	f001 f954 	bl	8002a76 <HAL_NVIC_SetPriority>
}
 80017ce:	bf00      	nop
 80017d0:	3750      	adds	r7, #80	; 0x50
 80017d2:	46bd      	mov	sp, r7
 80017d4:	bd80      	pop	{r7, pc}
 80017d6:	bf00      	nop
 80017d8:	080086d4 	.word	0x080086d4
 80017dc:	10624dd3 	.word	0x10624dd3

080017e0 <_Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @param  None
 * @retval None
 */
void _Error_Handler(char *file, int line) {
 80017e0:	b480      	push	{r7}
 80017e2:	b083      	sub	sp, #12
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	6078      	str	r0, [r7, #4]
 80017e8:	6039      	str	r1, [r7, #0]
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	while (1) {
 80017ea:	e7fe      	b.n	80017ea <_Error_Handler+0xa>

080017ec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80017ec:	b580      	push	{r7, lr}
 80017ee:	b082      	sub	sp, #8
 80017f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80017f2:	4b24      	ldr	r3, [pc, #144]	; (8001884 <HAL_MspInit+0x98>)
 80017f4:	699b      	ldr	r3, [r3, #24]
 80017f6:	4a23      	ldr	r2, [pc, #140]	; (8001884 <HAL_MspInit+0x98>)
 80017f8:	f043 0301 	orr.w	r3, r3, #1
 80017fc:	6193      	str	r3, [r2, #24]
 80017fe:	4b21      	ldr	r3, [pc, #132]	; (8001884 <HAL_MspInit+0x98>)
 8001800:	699b      	ldr	r3, [r3, #24]
 8001802:	f003 0301 	and.w	r3, r3, #1
 8001806:	607b      	str	r3, [r7, #4]
 8001808:	687b      	ldr	r3, [r7, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800180a:	2003      	movs	r0, #3
 800180c:	f001 f928 	bl	8002a60 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 8001810:	2200      	movs	r2, #0
 8001812:	2100      	movs	r1, #0
 8001814:	f06f 000b 	mvn.w	r0, #11
 8001818:	f001 f92d 	bl	8002a76 <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 800181c:	2200      	movs	r2, #0
 800181e:	2100      	movs	r1, #0
 8001820:	f06f 000a 	mvn.w	r0, #10
 8001824:	f001 f927 	bl	8002a76 <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 8001828:	2200      	movs	r2, #0
 800182a:	2100      	movs	r1, #0
 800182c:	f06f 0009 	mvn.w	r0, #9
 8001830:	f001 f921 	bl	8002a76 <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 8001834:	2200      	movs	r2, #0
 8001836:	2100      	movs	r1, #0
 8001838:	f06f 0004 	mvn.w	r0, #4
 800183c:	f001 f91b 	bl	8002a76 <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 8001840:	2200      	movs	r2, #0
 8001842:	2100      	movs	r1, #0
 8001844:	f06f 0003 	mvn.w	r0, #3
 8001848:	f001 f915 	bl	8002a76 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 800184c:	2200      	movs	r2, #0
 800184e:	2100      	movs	r1, #0
 8001850:	f06f 0001 	mvn.w	r0, #1
 8001854:	f001 f90f 	bl	8002a76 <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8001858:	2200      	movs	r2, #0
 800185a:	2100      	movs	r1, #0
 800185c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001860:	f001 f909 	bl	8002a76 <HAL_NVIC_SetPriority>

    /**NOJTAG: JTAG-DP Disabled and SW-DP Enabled
    */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001864:	4b08      	ldr	r3, [pc, #32]	; (8001888 <HAL_MspInit+0x9c>)
 8001866:	685b      	ldr	r3, [r3, #4]
 8001868:	4a07      	ldr	r2, [pc, #28]	; (8001888 <HAL_MspInit+0x9c>)
 800186a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800186e:	6053      	str	r3, [r2, #4]
 8001870:	4b05      	ldr	r3, [pc, #20]	; (8001888 <HAL_MspInit+0x9c>)
 8001872:	685b      	ldr	r3, [r3, #4]
 8001874:	4a04      	ldr	r2, [pc, #16]	; (8001888 <HAL_MspInit+0x9c>)
 8001876:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800187a:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800187c:	bf00      	nop
 800187e:	3708      	adds	r7, #8
 8001880:	46bd      	mov	sp, r7
 8001882:	bd80      	pop	{r7, pc}
 8001884:	40021000 	.word	0x40021000
 8001888:	40010000 	.word	0x40010000

0800188c <NMI_Handler>:

/**
* @brief This function handles Non maskable interrupt.
*/
void NMI_Handler(void)
{
 800188c:	b480      	push	{r7}
 800188e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001890:	bf00      	nop
 8001892:	46bd      	mov	sp, r7
 8001894:	bc80      	pop	{r7}
 8001896:	4770      	bx	lr

08001898 <HardFault_Handler>:

/**
* @brief This function handles Hard fault interrupt.
*/
void HardFault_Handler(void)
{
 8001898:	b480      	push	{r7}
 800189a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800189c:	e7fe      	b.n	800189c <HardFault_Handler+0x4>

0800189e <MemManage_Handler>:

/**
* @brief This function handles Memory management fault.
*/
void MemManage_Handler(void)
{
 800189e:	b480      	push	{r7}
 80018a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80018a2:	e7fe      	b.n	80018a2 <MemManage_Handler+0x4>

080018a4 <BusFault_Handler>:

/**
* @brief This function handles Prefetch fault, memory access fault.
*/
void BusFault_Handler(void)
{
 80018a4:	b480      	push	{r7}
 80018a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80018a8:	e7fe      	b.n	80018a8 <BusFault_Handler+0x4>

080018aa <UsageFault_Handler>:

/**
* @brief This function handles Undefined instruction or illegal state.
*/
void UsageFault_Handler(void)
{
 80018aa:	b480      	push	{r7}
 80018ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80018ae:	e7fe      	b.n	80018ae <UsageFault_Handler+0x4>

080018b0 <SVC_Handler>:

/**
* @brief This function handles System service call via SWI instruction.
*/
void SVC_Handler(void)
{
 80018b0:	b480      	push	{r7}
 80018b2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80018b4:	bf00      	nop
 80018b6:	46bd      	mov	sp, r7
 80018b8:	bc80      	pop	{r7}
 80018ba:	4770      	bx	lr

080018bc <DebugMon_Handler>:

/**
* @brief This function handles Debug monitor.
*/
void DebugMon_Handler(void)
{
 80018bc:	b480      	push	{r7}
 80018be:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80018c0:	bf00      	nop
 80018c2:	46bd      	mov	sp, r7
 80018c4:	bc80      	pop	{r7}
 80018c6:	4770      	bx	lr

080018c8 <PendSV_Handler>:

/**
* @brief This function handles Pendable request for system service.
*/
void PendSV_Handler(void)
{
 80018c8:	b480      	push	{r7}
 80018ca:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80018cc:	bf00      	nop
 80018ce:	46bd      	mov	sp, r7
 80018d0:	bc80      	pop	{r7}
 80018d2:	4770      	bx	lr

080018d4 <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 80018d4:	b580      	push	{r7, lr}
 80018d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80018d8:	f000 fc08 	bl	80020ec <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
 80018dc:	f001 f91e 	bl	8002b1c <HAL_SYSTICK_IRQHandler>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80018e0:	bf00      	nop
 80018e2:	bd80      	pop	{r7, pc}

080018e4 <DMA1_Channel1_IRQHandler>:

/**
* @brief This function handles DMA1 channel1 global interrupt.
*/
void DMA1_Channel1_IRQHandler(void)
{
 80018e4:	b580      	push	{r7, lr}
 80018e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80018e8:	4802      	ldr	r0, [pc, #8]	; (80018f4 <DMA1_Channel1_IRQHandler+0x10>)
 80018ea:	f001 f9e9 	bl	8002cc0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80018ee:	bf00      	nop
 80018f0:	bd80      	pop	{r7, pc}
 80018f2:	bf00      	nop
 80018f4:	20000688 	.word	0x20000688

080018f8 <EXTI15_10_IRQHandler>:

/**
* @brief This function handles EXTI line[15:10] interrupts.
*/
void EXTI15_10_IRQHandler(void)
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 80018fc:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8001900:	f001 fcb0 	bl	8003264 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8001904:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001908:	f001 fcac 	bl	8003264 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 800190c:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8001910:	f001 fca8 	bl	8003264 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 8001914:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8001918:	f001 fca4 	bl	8003264 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800191c:	bf00      	nop
 800191e:	bd80      	pop	{r7, pc}

08001920 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001920:	b580      	push	{r7, lr}
 8001922:	b086      	sub	sp, #24
 8001924:	af00      	add	r7, sp, #0
 8001926:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001928:	4a14      	ldr	r2, [pc, #80]	; (800197c <_sbrk+0x5c>)
 800192a:	4b15      	ldr	r3, [pc, #84]	; (8001980 <_sbrk+0x60>)
 800192c:	1ad3      	subs	r3, r2, r3
 800192e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001930:	697b      	ldr	r3, [r7, #20]
 8001932:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001934:	4b13      	ldr	r3, [pc, #76]	; (8001984 <_sbrk+0x64>)
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	2b00      	cmp	r3, #0
 800193a:	d102      	bne.n	8001942 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800193c:	4b11      	ldr	r3, [pc, #68]	; (8001984 <_sbrk+0x64>)
 800193e:	4a12      	ldr	r2, [pc, #72]	; (8001988 <_sbrk+0x68>)
 8001940:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001942:	4b10      	ldr	r3, [pc, #64]	; (8001984 <_sbrk+0x64>)
 8001944:	681a      	ldr	r2, [r3, #0]
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	4413      	add	r3, r2
 800194a:	693a      	ldr	r2, [r7, #16]
 800194c:	429a      	cmp	r2, r3
 800194e:	d207      	bcs.n	8001960 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001950:	f003 f8b0 	bl	8004ab4 <__errno>
 8001954:	4602      	mov	r2, r0
 8001956:	230c      	movs	r3, #12
 8001958:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 800195a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800195e:	e009      	b.n	8001974 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001960:	4b08      	ldr	r3, [pc, #32]	; (8001984 <_sbrk+0x64>)
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001966:	4b07      	ldr	r3, [pc, #28]	; (8001984 <_sbrk+0x64>)
 8001968:	681a      	ldr	r2, [r3, #0]
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	4413      	add	r3, r2
 800196e:	4a05      	ldr	r2, [pc, #20]	; (8001984 <_sbrk+0x64>)
 8001970:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001972:	68fb      	ldr	r3, [r7, #12]
}
 8001974:	4618      	mov	r0, r3
 8001976:	3718      	adds	r7, #24
 8001978:	46bd      	mov	sp, r7
 800197a:	bd80      	pop	{r7, pc}
 800197c:	20005000 	.word	0x20005000
 8001980:	00000400 	.word	0x00000400
 8001984:	20000244 	.word	0x20000244
 8001988:	20000958 	.word	0x20000958

0800198c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800198c:	b480      	push	{r7}
 800198e:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8001990:	4b15      	ldr	r3, [pc, #84]	; (80019e8 <SystemInit+0x5c>)
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	4a14      	ldr	r2, [pc, #80]	; (80019e8 <SystemInit+0x5c>)
 8001996:	f043 0301 	orr.w	r3, r3, #1
 800199a:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 800199c:	4b12      	ldr	r3, [pc, #72]	; (80019e8 <SystemInit+0x5c>)
 800199e:	685a      	ldr	r2, [r3, #4]
 80019a0:	4911      	ldr	r1, [pc, #68]	; (80019e8 <SystemInit+0x5c>)
 80019a2:	4b12      	ldr	r3, [pc, #72]	; (80019ec <SystemInit+0x60>)
 80019a4:	4013      	ands	r3, r2
 80019a6:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 80019a8:	4b0f      	ldr	r3, [pc, #60]	; (80019e8 <SystemInit+0x5c>)
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	4a0e      	ldr	r2, [pc, #56]	; (80019e8 <SystemInit+0x5c>)
 80019ae:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80019b2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80019b6:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80019b8:	4b0b      	ldr	r3, [pc, #44]	; (80019e8 <SystemInit+0x5c>)
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	4a0a      	ldr	r2, [pc, #40]	; (80019e8 <SystemInit+0x5c>)
 80019be:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80019c2:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 80019c4:	4b08      	ldr	r3, [pc, #32]	; (80019e8 <SystemInit+0x5c>)
 80019c6:	685b      	ldr	r3, [r3, #4]
 80019c8:	4a07      	ldr	r2, [pc, #28]	; (80019e8 <SystemInit+0x5c>)
 80019ca:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 80019ce:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 80019d0:	4b05      	ldr	r3, [pc, #20]	; (80019e8 <SystemInit+0x5c>)
 80019d2:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 80019d6:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 80019d8:	4b05      	ldr	r3, [pc, #20]	; (80019f0 <SystemInit+0x64>)
 80019da:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80019de:	609a      	str	r2, [r3, #8]
#endif 
}
 80019e0:	bf00      	nop
 80019e2:	46bd      	mov	sp, r7
 80019e4:	bc80      	pop	{r7}
 80019e6:	4770      	bx	lr
 80019e8:	40021000 	.word	0x40021000
 80019ec:	f8ff0000 	.word	0xf8ff0000
 80019f0:	e000ed00 	.word	0xe000ed00

080019f4 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80019f4:	b580      	push	{r7, lr}
 80019f6:	b08a      	sub	sp, #40	; 0x28
 80019f8:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig;
  TIM_OC_InitTypeDef sConfigOC;

  htim2.Instance = TIM2;
 80019fa:	4b2c      	ldr	r3, [pc, #176]	; (8001aac <MX_TIM2_Init+0xb8>)
 80019fc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001a00:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001a02:	4b2a      	ldr	r3, [pc, #168]	; (8001aac <MX_TIM2_Init+0xb8>)
 8001a04:	2200      	movs	r2, #0
 8001a06:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a08:	4b28      	ldr	r3, [pc, #160]	; (8001aac <MX_TIM2_Init+0xb8>)
 8001a0a:	2200      	movs	r2, #0
 8001a0c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10000-1;
 8001a0e:	4b27      	ldr	r3, [pc, #156]	; (8001aac <MX_TIM2_Init+0xb8>)
 8001a10:	f242 720f 	movw	r2, #9999	; 0x270f
 8001a14:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a16:	4b25      	ldr	r3, [pc, #148]	; (8001aac <MX_TIM2_Init+0xb8>)
 8001a18:	2200      	movs	r2, #0
 8001a1a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a1c:	4b23      	ldr	r3, [pc, #140]	; (8001aac <MX_TIM2_Init+0xb8>)
 8001a1e:	2200      	movs	r2, #0
 8001a20:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001a22:	4822      	ldr	r0, [pc, #136]	; (8001aac <MX_TIM2_Init+0xb8>)
 8001a24:	f002 fcc0 	bl	80043a8 <HAL_TIM_PWM_Init>
 8001a28:	4603      	mov	r3, r0
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d003      	beq.n	8001a36 <MX_TIM2_Init+0x42>
  {
    _Error_Handler(__FILE__, __LINE__);
 8001a2e:	213f      	movs	r1, #63	; 0x3f
 8001a30:	481f      	ldr	r0, [pc, #124]	; (8001ab0 <MX_TIM2_Init+0xbc>)
 8001a32:	f7ff fed5 	bl	80017e0 <_Error_Handler>
  }

  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a36:	2300      	movs	r3, #0
 8001a38:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001a3e:	f107 0320 	add.w	r3, r7, #32
 8001a42:	4619      	mov	r1, r3
 8001a44:	4819      	ldr	r0, [pc, #100]	; (8001aac <MX_TIM2_Init+0xb8>)
 8001a46:	f002 fff1 	bl	8004a2c <HAL_TIMEx_MasterConfigSynchronization>
 8001a4a:	4603      	mov	r3, r0
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d003      	beq.n	8001a58 <MX_TIM2_Init+0x64>
  {
    _Error_Handler(__FILE__, __LINE__);
 8001a50:	2146      	movs	r1, #70	; 0x46
 8001a52:	4817      	ldr	r0, [pc, #92]	; (8001ab0 <MX_TIM2_Init+0xbc>)
 8001a54:	f7ff fec4 	bl	80017e0 <_Error_Handler>
  }

  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001a58:	2360      	movs	r3, #96	; 0x60
 8001a5a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001a5c:	2300      	movs	r3, #0
 8001a5e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001a60:	2300      	movs	r3, #0
 8001a62:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001a64:	2300      	movs	r3, #0
 8001a66:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001a68:	1d3b      	adds	r3, r7, #4
 8001a6a:	2208      	movs	r2, #8
 8001a6c:	4619      	mov	r1, r3
 8001a6e:	480f      	ldr	r0, [pc, #60]	; (8001aac <MX_TIM2_Init+0xb8>)
 8001a70:	f002 fcee 	bl	8004450 <HAL_TIM_PWM_ConfigChannel>
 8001a74:	4603      	mov	r3, r0
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d003      	beq.n	8001a82 <MX_TIM2_Init+0x8e>
  {
    _Error_Handler(__FILE__, __LINE__);
 8001a7a:	214f      	movs	r1, #79	; 0x4f
 8001a7c:	480c      	ldr	r0, [pc, #48]	; (8001ab0 <MX_TIM2_Init+0xbc>)
 8001a7e:	f7ff feaf 	bl	80017e0 <_Error_Handler>
  }

  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001a82:	1d3b      	adds	r3, r7, #4
 8001a84:	220c      	movs	r2, #12
 8001a86:	4619      	mov	r1, r3
 8001a88:	4808      	ldr	r0, [pc, #32]	; (8001aac <MX_TIM2_Init+0xb8>)
 8001a8a:	f002 fce1 	bl	8004450 <HAL_TIM_PWM_ConfigChannel>
 8001a8e:	4603      	mov	r3, r0
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d003      	beq.n	8001a9c <MX_TIM2_Init+0xa8>
  {
    _Error_Handler(__FILE__, __LINE__);
 8001a94:	2154      	movs	r1, #84	; 0x54
 8001a96:	4806      	ldr	r0, [pc, #24]	; (8001ab0 <MX_TIM2_Init+0xbc>)
 8001a98:	f7ff fea2 	bl	80017e0 <_Error_Handler>
  }

  HAL_TIM_MspPostInit(&htim2);
 8001a9c:	4803      	ldr	r0, [pc, #12]	; (8001aac <MX_TIM2_Init+0xb8>)
 8001a9e:	f000 f825 	bl	8001aec <HAL_TIM_MspPostInit>

}
 8001aa2:	bf00      	nop
 8001aa4:	3728      	adds	r7, #40	; 0x28
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	bd80      	pop	{r7, pc}
 8001aaa:	bf00      	nop
 8001aac:	2000090c 	.word	0x2000090c
 8001ab0:	080086e8 	.word	0x080086e8

08001ab4 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8001ab4:	b480      	push	{r7}
 8001ab6:	b085      	sub	sp, #20
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM2)
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001ac4:	d10b      	bne.n	8001ade <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001ac6:	4b08      	ldr	r3, [pc, #32]	; (8001ae8 <HAL_TIM_PWM_MspInit+0x34>)
 8001ac8:	69db      	ldr	r3, [r3, #28]
 8001aca:	4a07      	ldr	r2, [pc, #28]	; (8001ae8 <HAL_TIM_PWM_MspInit+0x34>)
 8001acc:	f043 0301 	orr.w	r3, r3, #1
 8001ad0:	61d3      	str	r3, [r2, #28]
 8001ad2:	4b05      	ldr	r3, [pc, #20]	; (8001ae8 <HAL_TIM_PWM_MspInit+0x34>)
 8001ad4:	69db      	ldr	r3, [r3, #28]
 8001ad6:	f003 0301 	and.w	r3, r3, #1
 8001ada:	60fb      	str	r3, [r7, #12]
 8001adc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8001ade:	bf00      	nop
 8001ae0:	3714      	adds	r7, #20
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	bc80      	pop	{r7}
 8001ae6:	4770      	bx	lr
 8001ae8:	40021000 	.word	0x40021000

08001aec <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001aec:	b580      	push	{r7, lr}
 8001aee:	b086      	sub	sp, #24
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  if(timHandle->Instance==TIM2)
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001afc:	d118      	bne.n	8001b30 <HAL_TIM_MspPostInit+0x44>

    /**TIM2 GPIO Configuration
    PB10     ------> TIM2_CH3
    PB11     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = PWM_M1_Pin|PWM_M2_Pin;
 8001afe:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001b02:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b04:	2302      	movs	r3, #2
 8001b06:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b08:	2302      	movs	r3, #2
 8001b0a:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b0c:	f107 0308 	add.w	r3, r7, #8
 8001b10:	4619      	mov	r1, r3
 8001b12:	4809      	ldr	r0, [pc, #36]	; (8001b38 <HAL_TIM_MspPostInit+0x4c>)
 8001b14:	f001 fa08 	bl	8002f28 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM2_PARTIAL_2();
 8001b18:	4b08      	ldr	r3, [pc, #32]	; (8001b3c <HAL_TIM_MspPostInit+0x50>)
 8001b1a:	685b      	ldr	r3, [r3, #4]
 8001b1c:	4a07      	ldr	r2, [pc, #28]	; (8001b3c <HAL_TIM_MspPostInit+0x50>)
 8001b1e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001b22:	6053      	str	r3, [r2, #4]
 8001b24:	4b05      	ldr	r3, [pc, #20]	; (8001b3c <HAL_TIM_MspPostInit+0x50>)
 8001b26:	685b      	ldr	r3, [r3, #4]
 8001b28:	4a04      	ldr	r2, [pc, #16]	; (8001b3c <HAL_TIM_MspPostInit+0x50>)
 8001b2a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001b2e:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001b30:	bf00      	nop
 8001b32:	3718      	adds	r7, #24
 8001b34:	46bd      	mov	sp, r7
 8001b36:	bd80      	pop	{r7, pc}
 8001b38:	40010c00 	.word	0x40010c00
 8001b3c:	40010000 	.word	0x40010000

08001b40 <user_pwm_setvalue_1>:

/* USER CODE BEGIN 1 */


void user_pwm_setvalue_1(uint16_t value)
{
 8001b40:	b580      	push	{r7, lr}
 8001b42:	b08a      	sub	sp, #40	; 0x28
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	4603      	mov	r3, r0
 8001b48:	80fb      	strh	r3, [r7, #6]
    TIM_OC_InitTypeDef sConfigOC;

    sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001b4a:	2360      	movs	r3, #96	; 0x60
 8001b4c:	60fb      	str	r3, [r7, #12]
    sConfigOC.Pulse = value;
 8001b4e:	88fb      	ldrh	r3, [r7, #6]
 8001b50:	613b      	str	r3, [r7, #16]
    sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001b52:	2300      	movs	r3, #0
 8001b54:	617b      	str	r3, [r7, #20]
    sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001b56:	2300      	movs	r3, #0
 8001b58:	61fb      	str	r3, [r7, #28]
    HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3);
 8001b5a:	f107 030c 	add.w	r3, r7, #12
 8001b5e:	2208      	movs	r2, #8
 8001b60:	4619      	mov	r1, r3
 8001b62:	4805      	ldr	r0, [pc, #20]	; (8001b78 <user_pwm_setvalue_1+0x38>)
 8001b64:	f002 fc74 	bl	8004450 <HAL_TIM_PWM_ConfigChannel>
    HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 8001b68:	2108      	movs	r1, #8
 8001b6a:	4803      	ldr	r0, [pc, #12]	; (8001b78 <user_pwm_setvalue_1+0x38>)
 8001b6c:	f002 fc48 	bl	8004400 <HAL_TIM_PWM_Start>
    //HAL_TIM_MspPostInit(&htim2);
}
 8001b70:	bf00      	nop
 8001b72:	3728      	adds	r7, #40	; 0x28
 8001b74:	46bd      	mov	sp, r7
 8001b76:	bd80      	pop	{r7, pc}
 8001b78:	2000090c 	.word	0x2000090c

08001b7c <user_pwm_setvalue_2>:
void user_pwm_setvalue_2(uint16_t value)
{
 8001b7c:	b580      	push	{r7, lr}
 8001b7e:	b08a      	sub	sp, #40	; 0x28
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	4603      	mov	r3, r0
 8001b84:	80fb      	strh	r3, [r7, #6]
    TIM_OC_InitTypeDef sConfigOC;

    sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001b86:	2360      	movs	r3, #96	; 0x60
 8001b88:	60fb      	str	r3, [r7, #12]
    sConfigOC.Pulse = value;
 8001b8a:	88fb      	ldrh	r3, [r7, #6]
 8001b8c:	613b      	str	r3, [r7, #16]
    sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001b8e:	2300      	movs	r3, #0
 8001b90:	617b      	str	r3, [r7, #20]
    sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001b92:	2300      	movs	r3, #0
 8001b94:	61fb      	str	r3, [r7, #28]
    HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4);
 8001b96:	f107 030c 	add.w	r3, r7, #12
 8001b9a:	220c      	movs	r2, #12
 8001b9c:	4619      	mov	r1, r3
 8001b9e:	4805      	ldr	r0, [pc, #20]	; (8001bb4 <user_pwm_setvalue_2+0x38>)
 8001ba0:	f002 fc56 	bl	8004450 <HAL_TIM_PWM_ConfigChannel>
    HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 8001ba4:	210c      	movs	r1, #12
 8001ba6:	4803      	ldr	r0, [pc, #12]	; (8001bb4 <user_pwm_setvalue_2+0x38>)
 8001ba8:	f002 fc2a 	bl	8004400 <HAL_TIM_PWM_Start>
   // HAL_TIM_MspPostInit(&htim2);
}
 8001bac:	bf00      	nop
 8001bae:	3728      	adds	r7, #40	; 0x28
 8001bb0:	46bd      	mov	sp, r7
 8001bb2:	bd80      	pop	{r7, pc}
 8001bb4:	2000090c 	.word	0x2000090c

08001bb8 <ssd1306_Reset>:
#include <stdlib.h>
#include <string.h>  // For memcpy

#if defined(SSD1306_USE_I2C)

void ssd1306_Reset(void) {
 8001bb8:	b480      	push	{r7}
 8001bba:	af00      	add	r7, sp, #0
    /* for I2C - do nothing */
}
 8001bbc:	bf00      	nop
 8001bbe:	46bd      	mov	sp, r7
 8001bc0:	bc80      	pop	{r7}
 8001bc2:	4770      	bx	lr

08001bc4 <ssd1306_WriteCommand>:


// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	b086      	sub	sp, #24
 8001bc8:	af04      	add	r7, sp, #16
 8001bca:	4603      	mov	r3, r0
 8001bcc:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 8001bce:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001bd2:	9302      	str	r3, [sp, #8]
 8001bd4:	2301      	movs	r3, #1
 8001bd6:	9301      	str	r3, [sp, #4]
 8001bd8:	1dfb      	adds	r3, r7, #7
 8001bda:	9300      	str	r3, [sp, #0]
 8001bdc:	2301      	movs	r3, #1
 8001bde:	2200      	movs	r2, #0
 8001be0:	2178      	movs	r1, #120	; 0x78
 8001be2:	4803      	ldr	r0, [pc, #12]	; (8001bf0 <ssd1306_WriteCommand+0x2c>)
 8001be4:	f001 fc36 	bl	8003454 <HAL_I2C_Mem_Write>
}
 8001be8:	bf00      	nop
 8001bea:	3708      	adds	r7, #8
 8001bec:	46bd      	mov	sp, r7
 8001bee:	bd80      	pop	{r7, pc}
 8001bf0:	200006cc 	.word	0x200006cc

08001bf4 <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	b086      	sub	sp, #24
 8001bf8:	af04      	add	r7, sp, #16
 8001bfa:	6078      	str	r0, [r7, #4]
 8001bfc:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 8001bfe:	683b      	ldr	r3, [r7, #0]
 8001c00:	b29b      	uxth	r3, r3
 8001c02:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001c06:	9202      	str	r2, [sp, #8]
 8001c08:	9301      	str	r3, [sp, #4]
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	9300      	str	r3, [sp, #0]
 8001c0e:	2301      	movs	r3, #1
 8001c10:	2240      	movs	r2, #64	; 0x40
 8001c12:	2178      	movs	r1, #120	; 0x78
 8001c14:	4803      	ldr	r0, [pc, #12]	; (8001c24 <ssd1306_WriteData+0x30>)
 8001c16:	f001 fc1d 	bl	8003454 <HAL_I2C_Mem_Write>
}
 8001c1a:	bf00      	nop
 8001c1c:	3708      	adds	r7, #8
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	bd80      	pop	{r7, pc}
 8001c22:	bf00      	nop
 8001c24:	200006cc 	.word	0x200006cc

08001c28 <ssd1306_Init>:
    }
    return ret;
}

// Initialize the oled screen
void ssd1306_Init(void) {
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 8001c2c:	f7ff ffc4 	bl	8001bb8 <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 8001c30:	2064      	movs	r0, #100	; 0x64
 8001c32:	f000 fa73 	bl	800211c <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 8001c36:	2000      	movs	r0, #0
 8001c38:	f000 f9e2 	bl	8002000 <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 8001c3c:	2020      	movs	r0, #32
 8001c3e:	f7ff ffc1 	bl	8001bc4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 8001c42:	2000      	movs	r0, #0
 8001c44:	f7ff ffbe 	bl	8001bc4 <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8001c48:	20b0      	movs	r0, #176	; 0xb0
 8001c4a:	f7ff ffbb 	bl	8001bc4 <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 8001c4e:	20c8      	movs	r0, #200	; 0xc8
 8001c50:	f7ff ffb8 	bl	8001bc4 <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 8001c54:	2000      	movs	r0, #0
 8001c56:	f7ff ffb5 	bl	8001bc4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 8001c5a:	2010      	movs	r0, #16
 8001c5c:	f7ff ffb2 	bl	8001bc4 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 8001c60:	2040      	movs	r0, #64	; 0x40
 8001c62:	f7ff ffaf 	bl	8001bc4 <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 8001c66:	20ff      	movs	r0, #255	; 0xff
 8001c68:	f000 f9b6 	bl	8001fd8 <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 8001c6c:	20a1      	movs	r0, #161	; 0xa1
 8001c6e:	f7ff ffa9 	bl	8001bc4 <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 8001c72:	20a6      	movs	r0, #166	; 0xa6
 8001c74:	f7ff ffa6 	bl	8001bc4 <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 8001c78:	20a8      	movs	r0, #168	; 0xa8
 8001c7a:	f7ff ffa3 	bl	8001bc4 <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x3F); //
 8001c7e:	203f      	movs	r0, #63	; 0x3f
 8001c80:	f7ff ffa0 	bl	8001bc4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8001c84:	20a4      	movs	r0, #164	; 0xa4
 8001c86:	f7ff ff9d 	bl	8001bc4 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 8001c8a:	20d3      	movs	r0, #211	; 0xd3
 8001c8c:	f7ff ff9a 	bl	8001bc4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 8001c90:	2000      	movs	r0, #0
 8001c92:	f7ff ff97 	bl	8001bc4 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 8001c96:	20d5      	movs	r0, #213	; 0xd5
 8001c98:	f7ff ff94 	bl	8001bc4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 8001c9c:	20f0      	movs	r0, #240	; 0xf0
 8001c9e:	f7ff ff91 	bl	8001bc4 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 8001ca2:	20d9      	movs	r0, #217	; 0xd9
 8001ca4:	f7ff ff8e 	bl	8001bc4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 8001ca8:	2022      	movs	r0, #34	; 0x22
 8001caa:	f7ff ff8b 	bl	8001bc4 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 8001cae:	20da      	movs	r0, #218	; 0xda
 8001cb0:	f7ff ff88 	bl	8001bc4 <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x12);
 8001cb4:	2012      	movs	r0, #18
 8001cb6:	f7ff ff85 	bl	8001bc4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 8001cba:	20db      	movs	r0, #219	; 0xdb
 8001cbc:	f7ff ff82 	bl	8001bc4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 8001cc0:	2020      	movs	r0, #32
 8001cc2:	f7ff ff7f 	bl	8001bc4 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 8001cc6:	208d      	movs	r0, #141	; 0x8d
 8001cc8:	f7ff ff7c 	bl	8001bc4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 8001ccc:	2014      	movs	r0, #20
 8001cce:	f7ff ff79 	bl	8001bc4 <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 8001cd2:	2001      	movs	r0, #1
 8001cd4:	f000 f994 	bl	8002000 <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 8001cd8:	2000      	movs	r0, #0
 8001cda:	f000 f80f 	bl	8001cfc <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 8001cde:	f000 f82f 	bl	8001d40 <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 8001ce2:	4b05      	ldr	r3, [pc, #20]	; (8001cf8 <ssd1306_Init+0xd0>)
 8001ce4:	2200      	movs	r2, #0
 8001ce6:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 8001ce8:	4b03      	ldr	r3, [pc, #12]	; (8001cf8 <ssd1306_Init+0xd0>)
 8001cea:	2200      	movs	r2, #0
 8001cec:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 8001cee:	4b02      	ldr	r3, [pc, #8]	; (8001cf8 <ssd1306_Init+0xd0>)
 8001cf0:	2201      	movs	r2, #1
 8001cf2:	715a      	strb	r2, [r3, #5]
}
 8001cf4:	bf00      	nop
 8001cf6:	bd80      	pop	{r7, pc}
 8001cf8:	20000648 	.word	0x20000648

08001cfc <ssd1306_Fill>:

// Fill the whole screen with the given color
void ssd1306_Fill(SSD1306_COLOR color) {
 8001cfc:	b480      	push	{r7}
 8001cfe:	b085      	sub	sp, #20
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	4603      	mov	r3, r0
 8001d04:	71fb      	strb	r3, [r7, #7]
    /* Set memory */
    uint32_t i;

    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 8001d06:	2300      	movs	r3, #0
 8001d08:	60fb      	str	r3, [r7, #12]
 8001d0a:	e00d      	b.n	8001d28 <ssd1306_Fill+0x2c>
        SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 8001d0c:	79fb      	ldrb	r3, [r7, #7]
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d101      	bne.n	8001d16 <ssd1306_Fill+0x1a>
 8001d12:	2100      	movs	r1, #0
 8001d14:	e000      	b.n	8001d18 <ssd1306_Fill+0x1c>
 8001d16:	21ff      	movs	r1, #255	; 0xff
 8001d18:	4a08      	ldr	r2, [pc, #32]	; (8001d3c <ssd1306_Fill+0x40>)
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	4413      	add	r3, r2
 8001d1e:	460a      	mov	r2, r1
 8001d20:	701a      	strb	r2, [r3, #0]
    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	3301      	adds	r3, #1
 8001d26:	60fb      	str	r3, [r7, #12]
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001d2e:	d3ed      	bcc.n	8001d0c <ssd1306_Fill+0x10>
    }
}
 8001d30:	bf00      	nop
 8001d32:	3714      	adds	r7, #20
 8001d34:	46bd      	mov	sp, r7
 8001d36:	bc80      	pop	{r7}
 8001d38:	4770      	bx	lr
 8001d3a:	bf00      	nop
 8001d3c:	20000248 	.word	0x20000248

08001d40 <ssd1306_UpdateScreen>:

// Write the screenbuffer with changed to the screen
void ssd1306_UpdateScreen(void) {
 8001d40:	b580      	push	{r7, lr}
 8001d42:	b082      	sub	sp, #8
 8001d44:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8001d46:	2300      	movs	r3, #0
 8001d48:	71fb      	strb	r3, [r7, #7]
 8001d4a:	e016      	b.n	8001d7a <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 8001d4c:	79fb      	ldrb	r3, [r7, #7]
 8001d4e:	3b50      	subs	r3, #80	; 0x50
 8001d50:	b2db      	uxtb	r3, r3
 8001d52:	4618      	mov	r0, r3
 8001d54:	f7ff ff36 	bl	8001bc4 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00);
 8001d58:	2000      	movs	r0, #0
 8001d5a:	f7ff ff33 	bl	8001bc4 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10);
 8001d5e:	2010      	movs	r0, #16
 8001d60:	f7ff ff30 	bl	8001bc4 <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 8001d64:	79fb      	ldrb	r3, [r7, #7]
 8001d66:	01db      	lsls	r3, r3, #7
 8001d68:	4a07      	ldr	r2, [pc, #28]	; (8001d88 <ssd1306_UpdateScreen+0x48>)
 8001d6a:	4413      	add	r3, r2
 8001d6c:	2180      	movs	r1, #128	; 0x80
 8001d6e:	4618      	mov	r0, r3
 8001d70:	f7ff ff40 	bl	8001bf4 <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8001d74:	79fb      	ldrb	r3, [r7, #7]
 8001d76:	3301      	adds	r3, #1
 8001d78:	71fb      	strb	r3, [r7, #7]
 8001d7a:	79fb      	ldrb	r3, [r7, #7]
 8001d7c:	2b07      	cmp	r3, #7
 8001d7e:	d9e5      	bls.n	8001d4c <ssd1306_UpdateScreen+0xc>
    }
}
 8001d80:	bf00      	nop
 8001d82:	3708      	adds	r7, #8
 8001d84:	46bd      	mov	sp, r7
 8001d86:	bd80      	pop	{r7, pc}
 8001d88:	20000248 	.word	0x20000248

08001d8c <ssd1306_DrawPixel>:

//    Draw one pixel in the screenbuffer
//    X => X Coordinate
//    Y => Y Coordinate
//    color => Pixel color
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 8001d8c:	b480      	push	{r7}
 8001d8e:	b083      	sub	sp, #12
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	4603      	mov	r3, r0
 8001d94:	71fb      	strb	r3, [r7, #7]
 8001d96:	460b      	mov	r3, r1
 8001d98:	71bb      	strb	r3, [r7, #6]
 8001d9a:	4613      	mov	r3, r2
 8001d9c:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 8001d9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	db48      	blt.n	8001e38 <ssd1306_DrawPixel+0xac>
 8001da6:	79bb      	ldrb	r3, [r7, #6]
 8001da8:	2b3f      	cmp	r3, #63	; 0x3f
 8001daa:	d845      	bhi.n	8001e38 <ssd1306_DrawPixel+0xac>
        // Don't write outside the buffer
        return;
    }
    
    // Check if pixel should be inverted
    if(SSD1306.Inverted) {
 8001dac:	4b25      	ldr	r3, [pc, #148]	; (8001e44 <ssd1306_DrawPixel+0xb8>)
 8001dae:	791b      	ldrb	r3, [r3, #4]
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d006      	beq.n	8001dc2 <ssd1306_DrawPixel+0x36>
        color = (SSD1306_COLOR)!color;
 8001db4:	797b      	ldrb	r3, [r7, #5]
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	bf0c      	ite	eq
 8001dba:	2301      	moveq	r3, #1
 8001dbc:	2300      	movne	r3, #0
 8001dbe:	b2db      	uxtb	r3, r3
 8001dc0:	717b      	strb	r3, [r7, #5]
    }
    
    // Draw in the right color
    if(color == White) {
 8001dc2:	797b      	ldrb	r3, [r7, #5]
 8001dc4:	2b01      	cmp	r3, #1
 8001dc6:	d11a      	bne.n	8001dfe <ssd1306_DrawPixel+0x72>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8001dc8:	79fa      	ldrb	r2, [r7, #7]
 8001dca:	79bb      	ldrb	r3, [r7, #6]
 8001dcc:	08db      	lsrs	r3, r3, #3
 8001dce:	b2d8      	uxtb	r0, r3
 8001dd0:	4603      	mov	r3, r0
 8001dd2:	01db      	lsls	r3, r3, #7
 8001dd4:	4413      	add	r3, r2
 8001dd6:	4a1c      	ldr	r2, [pc, #112]	; (8001e48 <ssd1306_DrawPixel+0xbc>)
 8001dd8:	5cd3      	ldrb	r3, [r2, r3]
 8001dda:	b25a      	sxtb	r2, r3
 8001ddc:	79bb      	ldrb	r3, [r7, #6]
 8001dde:	f003 0307 	and.w	r3, r3, #7
 8001de2:	2101      	movs	r1, #1
 8001de4:	fa01 f303 	lsl.w	r3, r1, r3
 8001de8:	b25b      	sxtb	r3, r3
 8001dea:	4313      	orrs	r3, r2
 8001dec:	b259      	sxtb	r1, r3
 8001dee:	79fa      	ldrb	r2, [r7, #7]
 8001df0:	4603      	mov	r3, r0
 8001df2:	01db      	lsls	r3, r3, #7
 8001df4:	4413      	add	r3, r2
 8001df6:	b2c9      	uxtb	r1, r1
 8001df8:	4a13      	ldr	r2, [pc, #76]	; (8001e48 <ssd1306_DrawPixel+0xbc>)
 8001dfa:	54d1      	strb	r1, [r2, r3]
 8001dfc:	e01d      	b.n	8001e3a <ssd1306_DrawPixel+0xae>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8001dfe:	79fa      	ldrb	r2, [r7, #7]
 8001e00:	79bb      	ldrb	r3, [r7, #6]
 8001e02:	08db      	lsrs	r3, r3, #3
 8001e04:	b2d8      	uxtb	r0, r3
 8001e06:	4603      	mov	r3, r0
 8001e08:	01db      	lsls	r3, r3, #7
 8001e0a:	4413      	add	r3, r2
 8001e0c:	4a0e      	ldr	r2, [pc, #56]	; (8001e48 <ssd1306_DrawPixel+0xbc>)
 8001e0e:	5cd3      	ldrb	r3, [r2, r3]
 8001e10:	b25a      	sxtb	r2, r3
 8001e12:	79bb      	ldrb	r3, [r7, #6]
 8001e14:	f003 0307 	and.w	r3, r3, #7
 8001e18:	2101      	movs	r1, #1
 8001e1a:	fa01 f303 	lsl.w	r3, r1, r3
 8001e1e:	b25b      	sxtb	r3, r3
 8001e20:	43db      	mvns	r3, r3
 8001e22:	b25b      	sxtb	r3, r3
 8001e24:	4013      	ands	r3, r2
 8001e26:	b259      	sxtb	r1, r3
 8001e28:	79fa      	ldrb	r2, [r7, #7]
 8001e2a:	4603      	mov	r3, r0
 8001e2c:	01db      	lsls	r3, r3, #7
 8001e2e:	4413      	add	r3, r2
 8001e30:	b2c9      	uxtb	r1, r1
 8001e32:	4a05      	ldr	r2, [pc, #20]	; (8001e48 <ssd1306_DrawPixel+0xbc>)
 8001e34:	54d1      	strb	r1, [r2, r3]
 8001e36:	e000      	b.n	8001e3a <ssd1306_DrawPixel+0xae>
        return;
 8001e38:	bf00      	nop
    }
}
 8001e3a:	370c      	adds	r7, #12
 8001e3c:	46bd      	mov	sp, r7
 8001e3e:	bc80      	pop	{r7}
 8001e40:	4770      	bx	lr
 8001e42:	bf00      	nop
 8001e44:	20000648 	.word	0x20000648
 8001e48:	20000248 	.word	0x20000248

08001e4c <ssd1306_WriteChar>:

// Draw 1 char to the screen buffer
// ch       => char om weg te schrijven
// Font     => Font waarmee we gaan schrijven
// color    => Black or White
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color) {
 8001e4c:	b590      	push	{r4, r7, lr}
 8001e4e:	b089      	sub	sp, #36	; 0x24
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	4604      	mov	r4, r0
 8001e54:	1d38      	adds	r0, r7, #4
 8001e56:	e880 0006 	stmia.w	r0, {r1, r2}
 8001e5a:	461a      	mov	r2, r3
 8001e5c:	4623      	mov	r3, r4
 8001e5e:	73fb      	strb	r3, [r7, #15]
 8001e60:	4613      	mov	r3, r2
 8001e62:	73bb      	strb	r3, [r7, #14]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 8001e64:	7bfb      	ldrb	r3, [r7, #15]
 8001e66:	2b1f      	cmp	r3, #31
 8001e68:	d902      	bls.n	8001e70 <ssd1306_WriteChar+0x24>
 8001e6a:	7bfb      	ldrb	r3, [r7, #15]
 8001e6c:	2b7e      	cmp	r3, #126	; 0x7e
 8001e6e:	d901      	bls.n	8001e74 <ssd1306_WriteChar+0x28>
        return 0;
 8001e70:	2300      	movs	r3, #0
 8001e72:	e06d      	b.n	8001f50 <ssd1306_WriteChar+0x104>
    
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 8001e74:	4b38      	ldr	r3, [pc, #224]	; (8001f58 <ssd1306_WriteChar+0x10c>)
 8001e76:	881b      	ldrh	r3, [r3, #0]
 8001e78:	461a      	mov	r2, r3
 8001e7a:	793b      	ldrb	r3, [r7, #4]
 8001e7c:	4413      	add	r3, r2
 8001e7e:	2b80      	cmp	r3, #128	; 0x80
 8001e80:	dc06      	bgt.n	8001e90 <ssd1306_WriteChar+0x44>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.FontHeight))
 8001e82:	4b35      	ldr	r3, [pc, #212]	; (8001f58 <ssd1306_WriteChar+0x10c>)
 8001e84:	885b      	ldrh	r3, [r3, #2]
 8001e86:	461a      	mov	r2, r3
 8001e88:	797b      	ldrb	r3, [r7, #5]
 8001e8a:	4413      	add	r3, r2
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 8001e8c:	2b40      	cmp	r3, #64	; 0x40
 8001e8e:	dd01      	ble.n	8001e94 <ssd1306_WriteChar+0x48>
    {
        // Not enough space on current line
        return 0;
 8001e90:	2300      	movs	r3, #0
 8001e92:	e05d      	b.n	8001f50 <ssd1306_WriteChar+0x104>
    }
    
    // Use the font to write
    for(i = 0; i < Font.FontHeight; i++) {
 8001e94:	2300      	movs	r3, #0
 8001e96:	61fb      	str	r3, [r7, #28]
 8001e98:	e04c      	b.n	8001f34 <ssd1306_WriteChar+0xe8>
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 8001e9a:	68ba      	ldr	r2, [r7, #8]
 8001e9c:	7bfb      	ldrb	r3, [r7, #15]
 8001e9e:	3b20      	subs	r3, #32
 8001ea0:	7979      	ldrb	r1, [r7, #5]
 8001ea2:	fb01 f303 	mul.w	r3, r1, r3
 8001ea6:	4619      	mov	r1, r3
 8001ea8:	69fb      	ldr	r3, [r7, #28]
 8001eaa:	440b      	add	r3, r1
 8001eac:	005b      	lsls	r3, r3, #1
 8001eae:	4413      	add	r3, r2
 8001eb0:	881b      	ldrh	r3, [r3, #0]
 8001eb2:	617b      	str	r3, [r7, #20]
        for(j = 0; j < Font.FontWidth; j++) {
 8001eb4:	2300      	movs	r3, #0
 8001eb6:	61bb      	str	r3, [r7, #24]
 8001eb8:	e034      	b.n	8001f24 <ssd1306_WriteChar+0xd8>
            if((b << j) & 0x8000)  {
 8001eba:	697a      	ldr	r2, [r7, #20]
 8001ebc:	69bb      	ldr	r3, [r7, #24]
 8001ebe:	fa02 f303 	lsl.w	r3, r2, r3
 8001ec2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d012      	beq.n	8001ef0 <ssd1306_WriteChar+0xa4>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 8001eca:	4b23      	ldr	r3, [pc, #140]	; (8001f58 <ssd1306_WriteChar+0x10c>)
 8001ecc:	881b      	ldrh	r3, [r3, #0]
 8001ece:	b2da      	uxtb	r2, r3
 8001ed0:	69bb      	ldr	r3, [r7, #24]
 8001ed2:	b2db      	uxtb	r3, r3
 8001ed4:	4413      	add	r3, r2
 8001ed6:	b2d8      	uxtb	r0, r3
 8001ed8:	4b1f      	ldr	r3, [pc, #124]	; (8001f58 <ssd1306_WriteChar+0x10c>)
 8001eda:	885b      	ldrh	r3, [r3, #2]
 8001edc:	b2da      	uxtb	r2, r3
 8001ede:	69fb      	ldr	r3, [r7, #28]
 8001ee0:	b2db      	uxtb	r3, r3
 8001ee2:	4413      	add	r3, r2
 8001ee4:	b2db      	uxtb	r3, r3
 8001ee6:	7bba      	ldrb	r2, [r7, #14]
 8001ee8:	4619      	mov	r1, r3
 8001eea:	f7ff ff4f 	bl	8001d8c <ssd1306_DrawPixel>
 8001eee:	e016      	b.n	8001f1e <ssd1306_WriteChar+0xd2>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8001ef0:	4b19      	ldr	r3, [pc, #100]	; (8001f58 <ssd1306_WriteChar+0x10c>)
 8001ef2:	881b      	ldrh	r3, [r3, #0]
 8001ef4:	b2da      	uxtb	r2, r3
 8001ef6:	69bb      	ldr	r3, [r7, #24]
 8001ef8:	b2db      	uxtb	r3, r3
 8001efa:	4413      	add	r3, r2
 8001efc:	b2d8      	uxtb	r0, r3
 8001efe:	4b16      	ldr	r3, [pc, #88]	; (8001f58 <ssd1306_WriteChar+0x10c>)
 8001f00:	885b      	ldrh	r3, [r3, #2]
 8001f02:	b2da      	uxtb	r2, r3
 8001f04:	69fb      	ldr	r3, [r7, #28]
 8001f06:	b2db      	uxtb	r3, r3
 8001f08:	4413      	add	r3, r2
 8001f0a:	b2d9      	uxtb	r1, r3
 8001f0c:	7bbb      	ldrb	r3, [r7, #14]
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	bf0c      	ite	eq
 8001f12:	2301      	moveq	r3, #1
 8001f14:	2300      	movne	r3, #0
 8001f16:	b2db      	uxtb	r3, r3
 8001f18:	461a      	mov	r2, r3
 8001f1a:	f7ff ff37 	bl	8001d8c <ssd1306_DrawPixel>
        for(j = 0; j < Font.FontWidth; j++) {
 8001f1e:	69bb      	ldr	r3, [r7, #24]
 8001f20:	3301      	adds	r3, #1
 8001f22:	61bb      	str	r3, [r7, #24]
 8001f24:	793b      	ldrb	r3, [r7, #4]
 8001f26:	461a      	mov	r2, r3
 8001f28:	69bb      	ldr	r3, [r7, #24]
 8001f2a:	4293      	cmp	r3, r2
 8001f2c:	d3c5      	bcc.n	8001eba <ssd1306_WriteChar+0x6e>
    for(i = 0; i < Font.FontHeight; i++) {
 8001f2e:	69fb      	ldr	r3, [r7, #28]
 8001f30:	3301      	adds	r3, #1
 8001f32:	61fb      	str	r3, [r7, #28]
 8001f34:	797b      	ldrb	r3, [r7, #5]
 8001f36:	461a      	mov	r2, r3
 8001f38:	69fb      	ldr	r3, [r7, #28]
 8001f3a:	4293      	cmp	r3, r2
 8001f3c:	d3ad      	bcc.n	8001e9a <ssd1306_WriteChar+0x4e>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += Font.FontWidth;
 8001f3e:	4b06      	ldr	r3, [pc, #24]	; (8001f58 <ssd1306_WriteChar+0x10c>)
 8001f40:	881a      	ldrh	r2, [r3, #0]
 8001f42:	793b      	ldrb	r3, [r7, #4]
 8001f44:	b29b      	uxth	r3, r3
 8001f46:	4413      	add	r3, r2
 8001f48:	b29a      	uxth	r2, r3
 8001f4a:	4b03      	ldr	r3, [pc, #12]	; (8001f58 <ssd1306_WriteChar+0x10c>)
 8001f4c:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 8001f4e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f50:	4618      	mov	r0, r3
 8001f52:	3724      	adds	r7, #36	; 0x24
 8001f54:	46bd      	mov	sp, r7
 8001f56:	bd90      	pop	{r4, r7, pc}
 8001f58:	20000648 	.word	0x20000648

08001f5c <ssd1306_WriteString>:

// Write full string to screenbuffer
char ssd1306_WriteString(char* str, FontDef Font, SSD1306_COLOR color) {
 8001f5c:	b580      	push	{r7, lr}
 8001f5e:	b084      	sub	sp, #16
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	60f8      	str	r0, [r7, #12]
 8001f64:	1d38      	adds	r0, r7, #4
 8001f66:	e880 0006 	stmia.w	r0, {r1, r2}
 8001f6a:	70fb      	strb	r3, [r7, #3]
    // Write until null-byte
    while (*str) {
 8001f6c:	e012      	b.n	8001f94 <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	7818      	ldrb	r0, [r3, #0]
 8001f72:	78fb      	ldrb	r3, [r7, #3]
 8001f74:	1d3a      	adds	r2, r7, #4
 8001f76:	ca06      	ldmia	r2, {r1, r2}
 8001f78:	f7ff ff68 	bl	8001e4c <ssd1306_WriteChar>
 8001f7c:	4603      	mov	r3, r0
 8001f7e:	461a      	mov	r2, r3
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	781b      	ldrb	r3, [r3, #0]
 8001f84:	429a      	cmp	r2, r3
 8001f86:	d002      	beq.n	8001f8e <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	781b      	ldrb	r3, [r3, #0]
 8001f8c:	e008      	b.n	8001fa0 <ssd1306_WriteString+0x44>
        }
        
        // Next char
        str++;
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	3301      	adds	r3, #1
 8001f92:	60fb      	str	r3, [r7, #12]
    while (*str) {
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	781b      	ldrb	r3, [r3, #0]
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d1e8      	bne.n	8001f6e <ssd1306_WriteString+0x12>
    }
    
    // Everything ok
    return *str;
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	781b      	ldrb	r3, [r3, #0]
}
 8001fa0:	4618      	mov	r0, r3
 8001fa2:	3710      	adds	r7, #16
 8001fa4:	46bd      	mov	sp, r7
 8001fa6:	bd80      	pop	{r7, pc}

08001fa8 <ssd1306_SetCursor>:

// Position the cursor
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 8001fa8:	b480      	push	{r7}
 8001faa:	b083      	sub	sp, #12
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	4603      	mov	r3, r0
 8001fb0:	460a      	mov	r2, r1
 8001fb2:	71fb      	strb	r3, [r7, #7]
 8001fb4:	4613      	mov	r3, r2
 8001fb6:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 8001fb8:	79fb      	ldrb	r3, [r7, #7]
 8001fba:	b29a      	uxth	r2, r3
 8001fbc:	4b05      	ldr	r3, [pc, #20]	; (8001fd4 <ssd1306_SetCursor+0x2c>)
 8001fbe:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 8001fc0:	79bb      	ldrb	r3, [r7, #6]
 8001fc2:	b29a      	uxth	r2, r3
 8001fc4:	4b03      	ldr	r3, [pc, #12]	; (8001fd4 <ssd1306_SetCursor+0x2c>)
 8001fc6:	805a      	strh	r2, [r3, #2]
}
 8001fc8:	bf00      	nop
 8001fca:	370c      	adds	r7, #12
 8001fcc:	46bd      	mov	sp, r7
 8001fce:	bc80      	pop	{r7}
 8001fd0:	4770      	bx	lr
 8001fd2:	bf00      	nop
 8001fd4:	20000648 	.word	0x20000648

08001fd8 <ssd1306_SetContrast>:
  ssd1306_Line(x1,y2,x1,y1,color);

  return;
}

void ssd1306_SetContrast(const uint8_t value) {
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	b084      	sub	sp, #16
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	4603      	mov	r3, r0
 8001fe0:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 8001fe2:	2381      	movs	r3, #129	; 0x81
 8001fe4:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 8001fe6:	7bfb      	ldrb	r3, [r7, #15]
 8001fe8:	4618      	mov	r0, r3
 8001fea:	f7ff fdeb 	bl	8001bc4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 8001fee:	79fb      	ldrb	r3, [r7, #7]
 8001ff0:	4618      	mov	r0, r3
 8001ff2:	f7ff fde7 	bl	8001bc4 <ssd1306_WriteCommand>
}
 8001ff6:	bf00      	nop
 8001ff8:	3710      	adds	r7, #16
 8001ffa:	46bd      	mov	sp, r7
 8001ffc:	bd80      	pop	{r7, pc}
	...

08002000 <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 8002000:	b580      	push	{r7, lr}
 8002002:	b084      	sub	sp, #16
 8002004:	af00      	add	r7, sp, #0
 8002006:	4603      	mov	r3, r0
 8002008:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on) {
 800200a:	79fb      	ldrb	r3, [r7, #7]
 800200c:	2b00      	cmp	r3, #0
 800200e:	d005      	beq.n	800201c <ssd1306_SetDisplayOn+0x1c>
        value = 0xAF;   // Display on
 8002010:	23af      	movs	r3, #175	; 0xaf
 8002012:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 8002014:	4b08      	ldr	r3, [pc, #32]	; (8002038 <ssd1306_SetDisplayOn+0x38>)
 8002016:	2201      	movs	r2, #1
 8002018:	719a      	strb	r2, [r3, #6]
 800201a:	e004      	b.n	8002026 <ssd1306_SetDisplayOn+0x26>
    } else {
        value = 0xAE;   // Display off
 800201c:	23ae      	movs	r3, #174	; 0xae
 800201e:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 8002020:	4b05      	ldr	r3, [pc, #20]	; (8002038 <ssd1306_SetDisplayOn+0x38>)
 8002022:	2200      	movs	r2, #0
 8002024:	719a      	strb	r2, [r3, #6]
    }
    ssd1306_WriteCommand(value);
 8002026:	7bfb      	ldrb	r3, [r7, #15]
 8002028:	4618      	mov	r0, r3
 800202a:	f7ff fdcb 	bl	8001bc4 <ssd1306_WriteCommand>
}
 800202e:	bf00      	nop
 8002030:	3710      	adds	r7, #16
 8002032:	46bd      	mov	sp, r7
 8002034:	bd80      	pop	{r7, pc}
 8002036:	bf00      	nop
 8002038:	20000648 	.word	0x20000648

0800203c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 800203c:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800203e:	e003      	b.n	8002048 <LoopCopyDataInit>

08002040 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8002040:	4b0b      	ldr	r3, [pc, #44]	; (8002070 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8002042:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8002044:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8002046:	3104      	adds	r1, #4

08002048 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8002048:	480a      	ldr	r0, [pc, #40]	; (8002074 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 800204a:	4b0b      	ldr	r3, [pc, #44]	; (8002078 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 800204c:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800204e:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8002050:	d3f6      	bcc.n	8002040 <CopyDataInit>
  ldr r2, =_sbss
 8002052:	4a0a      	ldr	r2, [pc, #40]	; (800207c <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8002054:	e002      	b.n	800205c <LoopFillZerobss>

08002056 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8002056:	2300      	movs	r3, #0
  str r3, [r2], #4
 8002058:	f842 3b04 	str.w	r3, [r2], #4

0800205c <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 800205c:	4b08      	ldr	r3, [pc, #32]	; (8002080 <LoopFillZerobss+0x24>)
  cmp r2, r3
 800205e:	429a      	cmp	r2, r3
  bcc FillZerobss
 8002060:	d3f9      	bcc.n	8002056 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002062:	f7ff fc93 	bl	800198c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002066:	f002 fd2b 	bl	8004ac0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800206a:	f7ff f999 	bl	80013a0 <main>
  bx lr
 800206e:	4770      	bx	lr
  ldr r3, =_sidata
 8002070:	08008fd8 	.word	0x08008fd8
  ldr r0, =_sdata
 8002074:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8002078:	200001e8 	.word	0x200001e8
  ldr r2, =_sbss
 800207c:	200001e8 	.word	0x200001e8
  ldr r3, = _ebss
 8002080:	20000954 	.word	0x20000954

08002084 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002084:	e7fe      	b.n	8002084 <ADC1_2_IRQHandler>
	...

08002088 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002088:	b580      	push	{r7, lr}
 800208a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800208c:	4b08      	ldr	r3, [pc, #32]	; (80020b0 <HAL_Init+0x28>)
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	4a07      	ldr	r2, [pc, #28]	; (80020b0 <HAL_Init+0x28>)
 8002092:	f043 0310 	orr.w	r3, r3, #16
 8002096:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002098:	2003      	movs	r0, #3
 800209a:	f000 fce1 	bl	8002a60 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800209e:	2000      	movs	r0, #0
 80020a0:	f000 f808 	bl	80020b4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80020a4:	f7ff fba2 	bl	80017ec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80020a8:	2300      	movs	r3, #0
}
 80020aa:	4618      	mov	r0, r3
 80020ac:	bd80      	pop	{r7, pc}
 80020ae:	bf00      	nop
 80020b0:	40022000 	.word	0x40022000

080020b4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80020b4:	b580      	push	{r7, lr}
 80020b6:	b082      	sub	sp, #8
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(SystemCoreClock/1000U);
 80020bc:	4b09      	ldr	r3, [pc, #36]	; (80020e4 <HAL_InitTick+0x30>)
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	4a09      	ldr	r2, [pc, #36]	; (80020e8 <HAL_InitTick+0x34>)
 80020c2:	fba2 2303 	umull	r2, r3, r2, r3
 80020c6:	099b      	lsrs	r3, r3, #6
 80020c8:	4618      	mov	r0, r3
 80020ca:	f000 fcfe 	bl	8002aca <HAL_SYSTICK_Config>

  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0U);
 80020ce:	2200      	movs	r2, #0
 80020d0:	6879      	ldr	r1, [r7, #4]
 80020d2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80020d6:	f000 fcce 	bl	8002a76 <HAL_NVIC_SetPriority>

  /* Return function status */
  return HAL_OK;
 80020da:	2300      	movs	r3, #0
}
 80020dc:	4618      	mov	r0, r3
 80020de:	3708      	adds	r7, #8
 80020e0:	46bd      	mov	sp, r7
 80020e2:	bd80      	pop	{r7, pc}
 80020e4:	2000000c 	.word	0x2000000c
 80020e8:	10624dd3 	.word	0x10624dd3

080020ec <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80020ec:	b480      	push	{r7}
 80020ee:	af00      	add	r7, sp, #0
  uwTick++;
 80020f0:	4b04      	ldr	r3, [pc, #16]	; (8002104 <HAL_IncTick+0x18>)
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	3301      	adds	r3, #1
 80020f6:	4a03      	ldr	r2, [pc, #12]	; (8002104 <HAL_IncTick+0x18>)
 80020f8:	6013      	str	r3, [r2, #0]
}
 80020fa:	bf00      	nop
 80020fc:	46bd      	mov	sp, r7
 80020fe:	bc80      	pop	{r7}
 8002100:	4770      	bx	lr
 8002102:	bf00      	nop
 8002104:	2000094c 	.word	0x2000094c

08002108 <HAL_GetTick>:
  * @note  This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002108:	b480      	push	{r7}
 800210a:	af00      	add	r7, sp, #0
  return uwTick;
 800210c:	4b02      	ldr	r3, [pc, #8]	; (8002118 <HAL_GetTick+0x10>)
 800210e:	681b      	ldr	r3, [r3, #0]
}
 8002110:	4618      	mov	r0, r3
 8002112:	46bd      	mov	sp, r7
 8002114:	bc80      	pop	{r7}
 8002116:	4770      	bx	lr
 8002118:	2000094c 	.word	0x2000094c

0800211c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay: specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(__IO uint32_t Delay)
{
 800211c:	b580      	push	{r7, lr}
 800211e:	b084      	sub	sp, #16
 8002120:	af00      	add	r7, sp, #0
 8002122:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002124:	f7ff fff0 	bl	8002108 <HAL_GetTick>
 8002128:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	60fb      	str	r3, [r7, #12]
  
  /* Add a period to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002134:	d002      	beq.n	800213c <HAL_Delay+0x20>
  {
     wait++;
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	3301      	adds	r3, #1
 800213a:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 800213c:	bf00      	nop
 800213e:	f7ff ffe3 	bl	8002108 <HAL_GetTick>
 8002142:	4602      	mov	r2, r0
 8002144:	68bb      	ldr	r3, [r7, #8]
 8002146:	1ad3      	subs	r3, r2, r3
 8002148:	68fa      	ldr	r2, [r7, #12]
 800214a:	429a      	cmp	r2, r3
 800214c:	d8f7      	bhi.n	800213e <HAL_Delay+0x22>
  {
  }
}
 800214e:	bf00      	nop
 8002150:	3710      	adds	r7, #16
 8002152:	46bd      	mov	sp, r7
 8002154:	bd80      	pop	{r7, pc}
	...

08002158 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002158:	b580      	push	{r7, lr}
 800215a:	b086      	sub	sp, #24
 800215c:	af00      	add	r7, sp, #0
 800215e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002160:	2300      	movs	r3, #0
 8002162:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8002164:	2300      	movs	r3, #0
 8002166:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8002168:	2300      	movs	r3, #0
 800216a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 800216c:	2300      	movs	r3, #0
 800216e:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	2b00      	cmp	r3, #0
 8002174:	d101      	bne.n	800217a <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8002176:	2301      	movs	r3, #1
 8002178:	e0be      	b.n	80022f8 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	689b      	ldr	r3, [r3, #8]
 800217e:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002184:	2b00      	cmp	r3, #0
 8002186:	d109      	bne.n	800219c <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	2200      	movs	r2, #0
 800218c:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	2200      	movs	r2, #0
 8002192:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002196:	6878      	ldr	r0, [r7, #4]
 8002198:	f7fe fd36 	bl	8000c08 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 800219c:	6878      	ldr	r0, [r7, #4]
 800219e:	f000 faf7 	bl	8002790 <ADC_ConversionStop_Disable>
 80021a2:	4603      	mov	r3, r0
 80021a4:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021aa:	f003 0310 	and.w	r3, r3, #16
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	f040 8099 	bne.w	80022e6 <HAL_ADC_Init+0x18e>
 80021b4:	7dfb      	ldrb	r3, [r7, #23]
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	f040 8095 	bne.w	80022e6 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021c0:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80021c4:	f023 0302 	bic.w	r3, r3, #2
 80021c8:	f043 0202 	orr.w	r2, r3, #2
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                               |
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv) |
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                               |
 80021d8:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS(hadc->Init.ContinuousConvMode)   );
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	68db      	ldr	r3, [r3, #12]
 80021de:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv) |
 80021e0:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                               |
 80021e2:	68ba      	ldr	r2, [r7, #8]
 80021e4:	4313      	orrs	r3, r2
 80021e6:	60bb      	str	r3, [r7, #8]
    
    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	689b      	ldr	r3, [r3, #8]
 80021ec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80021f0:	d003      	beq.n	80021fa <HAL_ADC_Init+0xa2>
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	689b      	ldr	r3, [r3, #8]
 80021f6:	2b01      	cmp	r3, #1
 80021f8:	d102      	bne.n	8002200 <HAL_ADC_Init+0xa8>
 80021fa:	f44f 7380 	mov.w	r3, #256	; 0x100
 80021fe:	e000      	b.n	8002202 <HAL_ADC_Init+0xaa>
 8002200:	2300      	movs	r3, #0
 8002202:	693a      	ldr	r2, [r7, #16]
 8002204:	4313      	orrs	r3, r2
 8002206:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	695b      	ldr	r3, [r3, #20]
 800220c:	2b01      	cmp	r3, #1
 800220e:	d119      	bne.n	8002244 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	68db      	ldr	r3, [r3, #12]
 8002214:	2b00      	cmp	r3, #0
 8002216:	d109      	bne.n	800222c <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	699b      	ldr	r3, [r3, #24]
 800221c:	3b01      	subs	r3, #1
 800221e:	035a      	lsls	r2, r3, #13
 8002220:	693b      	ldr	r3, [r7, #16]
 8002222:	4313      	orrs	r3, r2
 8002224:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002228:	613b      	str	r3, [r7, #16]
 800222a:	e00b      	b.n	8002244 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002230:	f043 0220 	orr.w	r2, r3, #32
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800223c:	f043 0201 	orr.w	r2, r3, #1
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	685b      	ldr	r3, [r3, #4]
 800224a:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	693a      	ldr	r2, [r7, #16]
 8002254:	430a      	orrs	r2, r1
 8002256:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	689a      	ldr	r2, [r3, #8]
 800225e:	4b28      	ldr	r3, [pc, #160]	; (8002300 <HAL_ADC_Init+0x1a8>)
 8002260:	4013      	ands	r3, r2
 8002262:	687a      	ldr	r2, [r7, #4]
 8002264:	6812      	ldr	r2, [r2, #0]
 8002266:	68b9      	ldr	r1, [r7, #8]
 8002268:	430b      	orrs	r3, r1
 800226a:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	689b      	ldr	r3, [r3, #8]
 8002270:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002274:	d003      	beq.n	800227e <HAL_ADC_Init+0x126>
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	689b      	ldr	r3, [r3, #8]
 800227a:	2b01      	cmp	r3, #1
 800227c:	d104      	bne.n	8002288 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	691b      	ldr	r3, [r3, #16]
 8002282:	3b01      	subs	r3, #1
 8002284:	051b      	lsls	r3, r3, #20
 8002286:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800228e:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	68fa      	ldr	r2, [r7, #12]
 8002298:	430a      	orrs	r2, r1
 800229a:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	689a      	ldr	r2, [r3, #8]
 80022a2:	4b18      	ldr	r3, [pc, #96]	; (8002304 <HAL_ADC_Init+0x1ac>)
 80022a4:	4013      	ands	r3, r2
 80022a6:	68ba      	ldr	r2, [r7, #8]
 80022a8:	429a      	cmp	r2, r3
 80022aa:	d10b      	bne.n	80022c4 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	2200      	movs	r2, #0
 80022b0:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022b6:	f023 0303 	bic.w	r3, r3, #3
 80022ba:	f043 0201 	orr.w	r2, r3, #1
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80022c2:	e018      	b.n	80022f6 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022c8:	f023 0312 	bic.w	r3, r3, #18
 80022cc:	f043 0210 	orr.w	r2, r3, #16
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022d8:	f043 0201 	orr.w	r2, r3, #1
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 80022e0:	2301      	movs	r3, #1
 80022e2:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80022e4:	e007      	b.n	80022f6 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022ea:	f043 0210 	orr.w	r2, r3, #16
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 80022f2:	2301      	movs	r3, #1
 80022f4:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80022f6:	7dfb      	ldrb	r3, [r7, #23]
}
 80022f8:	4618      	mov	r0, r3
 80022fa:	3718      	adds	r7, #24
 80022fc:	46bd      	mov	sp, r7
 80022fe:	bd80      	pop	{r7, pc}
 8002300:	ffe1f7fd 	.word	0xffe1f7fd
 8002304:	ff1f0efe 	.word	0xff1f0efe

08002308 <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8002308:	b580      	push	{r7, lr}
 800230a:	b086      	sub	sp, #24
 800230c:	af00      	add	r7, sp, #0
 800230e:	60f8      	str	r0, [r7, #12]
 8002310:	60b9      	str	r1, [r7, #8]
 8002312:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002314:	2300      	movs	r3, #0
 8002316:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	4a64      	ldr	r2, [pc, #400]	; (80024b0 <HAL_ADC_Start_DMA+0x1a8>)
 800231e:	4293      	cmp	r3, r2
 8002320:	d004      	beq.n	800232c <HAL_ADC_Start_DMA+0x24>
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	4a63      	ldr	r2, [pc, #396]	; (80024b4 <HAL_ADC_Start_DMA+0x1ac>)
 8002328:	4293      	cmp	r3, r2
 800232a:	d106      	bne.n	800233a <HAL_ADC_Start_DMA+0x32>
 800232c:	4b60      	ldr	r3, [pc, #384]	; (80024b0 <HAL_ADC_Start_DMA+0x1a8>)
 800232e:	685b      	ldr	r3, [r3, #4]
 8002330:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8002334:	2b00      	cmp	r3, #0
 8002336:	f040 80b3 	bne.w	80024a0 <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002340:	2b01      	cmp	r3, #1
 8002342:	d101      	bne.n	8002348 <HAL_ADC_Start_DMA+0x40>
 8002344:	2302      	movs	r3, #2
 8002346:	e0ae      	b.n	80024a6 <HAL_ADC_Start_DMA+0x19e>
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	2201      	movs	r2, #1
 800234c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8002350:	68f8      	ldr	r0, [r7, #12]
 8002352:	f000 f9cb 	bl	80026ec <ADC_Enable>
 8002356:	4603      	mov	r3, r0
 8002358:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800235a:	7dfb      	ldrb	r3, [r7, #23]
 800235c:	2b00      	cmp	r3, #0
 800235e:	f040 809a 	bne.w	8002496 <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002366:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800236a:	f023 0301 	bic.w	r3, r3, #1
 800236e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	4a4e      	ldr	r2, [pc, #312]	; (80024b4 <HAL_ADC_Start_DMA+0x1ac>)
 800237c:	4293      	cmp	r3, r2
 800237e:	d105      	bne.n	800238c <HAL_ADC_Start_DMA+0x84>
 8002380:	4b4b      	ldr	r3, [pc, #300]	; (80024b0 <HAL_ADC_Start_DMA+0x1a8>)
 8002382:	685b      	ldr	r3, [r3, #4]
 8002384:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8002388:	2b00      	cmp	r3, #0
 800238a:	d115      	bne.n	80023b8 <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002390:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	685b      	ldr	r3, [r3, #4]
 800239e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d026      	beq.n	80023f4 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023aa:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80023ae:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80023b6:	e01d      	b.n	80023f4 <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023bc:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	4a39      	ldr	r2, [pc, #228]	; (80024b0 <HAL_ADC_Start_DMA+0x1a8>)
 80023ca:	4293      	cmp	r3, r2
 80023cc:	d004      	beq.n	80023d8 <HAL_ADC_Start_DMA+0xd0>
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	4a38      	ldr	r2, [pc, #224]	; (80024b4 <HAL_ADC_Start_DMA+0x1ac>)
 80023d4:	4293      	cmp	r3, r2
 80023d6:	d10d      	bne.n	80023f4 <HAL_ADC_Start_DMA+0xec>
 80023d8:	4b35      	ldr	r3, [pc, #212]	; (80024b0 <HAL_ADC_Start_DMA+0x1a8>)
 80023da:	685b      	ldr	r3, [r3, #4]
 80023dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d007      	beq.n	80023f4 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023e8:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80023ec:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023f8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d006      	beq.n	800240e <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002404:	f023 0206 	bic.w	r2, r3, #6
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	62da      	str	r2, [r3, #44]	; 0x2c
 800240c:	e002      	b.n	8002414 <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	2200      	movs	r2, #0
 8002412:	62da      	str	r2, [r3, #44]	; 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	2200      	movs	r2, #0
 8002418:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	6a1b      	ldr	r3, [r3, #32]
 8002420:	4a25      	ldr	r2, [pc, #148]	; (80024b8 <HAL_ADC_Start_DMA+0x1b0>)
 8002422:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	6a1b      	ldr	r3, [r3, #32]
 8002428:	4a24      	ldr	r2, [pc, #144]	; (80024bc <HAL_ADC_Start_DMA+0x1b4>)
 800242a:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	6a1b      	ldr	r3, [r3, #32]
 8002430:	4a23      	ldr	r2, [pc, #140]	; (80024c0 <HAL_ADC_Start_DMA+0x1b8>)
 8002432:	631a      	str	r2, [r3, #48]	; 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	f06f 0202 	mvn.w	r2, #2
 800243c:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	689a      	ldr	r2, [r3, #8]
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800244c:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	6a18      	ldr	r0, [r3, #32]
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	334c      	adds	r3, #76	; 0x4c
 8002458:	4619      	mov	r1, r3
 800245a:	68ba      	ldr	r2, [r7, #8]
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	f000 fbcf 	bl	8002c00 <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	689b      	ldr	r3, [r3, #8]
 8002468:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 800246c:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8002470:	d108      	bne.n	8002484 <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	689a      	ldr	r2, [r3, #8]
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8002480:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8002482:	e00f      	b.n	80024a4 <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	689a      	ldr	r2, [r3, #8]
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8002492:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8002494:	e006      	b.n	80024a4 <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	2200      	movs	r2, #0
 800249a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    if (tmp_hal_status == HAL_OK)
 800249e:	e001      	b.n	80024a4 <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80024a0:	2301      	movs	r3, #1
 80024a2:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80024a4:	7dfb      	ldrb	r3, [r7, #23]
}
 80024a6:	4618      	mov	r0, r3
 80024a8:	3718      	adds	r7, #24
 80024aa:	46bd      	mov	sp, r7
 80024ac:	bd80      	pop	{r7, pc}
 80024ae:	bf00      	nop
 80024b0:	40012400 	.word	0x40012400
 80024b4:	40012800 	.word	0x40012800
 80024b8:	08002805 	.word	0x08002805
 80024bc:	08002881 	.word	0x08002881
 80024c0:	0800289d 	.word	0x0800289d

080024c4 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80024c4:	b480      	push	{r7}
 80024c6:	b083      	sub	sp, #12
 80024c8:	af00      	add	r7, sp, #0
 80024ca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 80024cc:	bf00      	nop
 80024ce:	370c      	adds	r7, #12
 80024d0:	46bd      	mov	sp, r7
 80024d2:	bc80      	pop	{r7}
 80024d4:	4770      	bx	lr

080024d6 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80024d6:	b480      	push	{r7}
 80024d8:	b083      	sub	sp, #12
 80024da:	af00      	add	r7, sp, #0
 80024dc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80024de:	bf00      	nop
 80024e0:	370c      	adds	r7, #12
 80024e2:	46bd      	mov	sp, r7
 80024e4:	bc80      	pop	{r7}
 80024e6:	4770      	bx	lr

080024e8 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80024e8:	b480      	push	{r7}
 80024ea:	b083      	sub	sp, #12
 80024ec:	af00      	add	r7, sp, #0
 80024ee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80024f0:	bf00      	nop
 80024f2:	370c      	adds	r7, #12
 80024f4:	46bd      	mov	sp, r7
 80024f6:	bc80      	pop	{r7}
 80024f8:	4770      	bx	lr
	...

080024fc <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 80024fc:	b480      	push	{r7}
 80024fe:	b085      	sub	sp, #20
 8002500:	af00      	add	r7, sp, #0
 8002502:	6078      	str	r0, [r7, #4]
 8002504:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002506:	2300      	movs	r3, #0
 8002508:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 800250a:	2300      	movs	r3, #0
 800250c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002514:	2b01      	cmp	r3, #1
 8002516:	d101      	bne.n	800251c <HAL_ADC_ConfigChannel+0x20>
 8002518:	2302      	movs	r3, #2
 800251a:	e0dc      	b.n	80026d6 <HAL_ADC_ConfigChannel+0x1da>
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	2201      	movs	r2, #1
 8002520:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002524:	683b      	ldr	r3, [r7, #0]
 8002526:	685b      	ldr	r3, [r3, #4]
 8002528:	2b06      	cmp	r3, #6
 800252a:	d81c      	bhi.n	8002566 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002532:	683b      	ldr	r3, [r7, #0]
 8002534:	685a      	ldr	r2, [r3, #4]
 8002536:	4613      	mov	r3, r2
 8002538:	009b      	lsls	r3, r3, #2
 800253a:	4413      	add	r3, r2
 800253c:	3b05      	subs	r3, #5
 800253e:	221f      	movs	r2, #31
 8002540:	fa02 f303 	lsl.w	r3, r2, r3
 8002544:	43db      	mvns	r3, r3
 8002546:	4019      	ands	r1, r3
 8002548:	683b      	ldr	r3, [r7, #0]
 800254a:	6818      	ldr	r0, [r3, #0]
 800254c:	683b      	ldr	r3, [r7, #0]
 800254e:	685a      	ldr	r2, [r3, #4]
 8002550:	4613      	mov	r3, r2
 8002552:	009b      	lsls	r3, r3, #2
 8002554:	4413      	add	r3, r2
 8002556:	3b05      	subs	r3, #5
 8002558:	fa00 f203 	lsl.w	r2, r0, r3
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	430a      	orrs	r2, r1
 8002562:	635a      	str	r2, [r3, #52]	; 0x34
 8002564:	e03c      	b.n	80025e0 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002566:	683b      	ldr	r3, [r7, #0]
 8002568:	685b      	ldr	r3, [r3, #4]
 800256a:	2b0c      	cmp	r3, #12
 800256c:	d81c      	bhi.n	80025a8 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002574:	683b      	ldr	r3, [r7, #0]
 8002576:	685a      	ldr	r2, [r3, #4]
 8002578:	4613      	mov	r3, r2
 800257a:	009b      	lsls	r3, r3, #2
 800257c:	4413      	add	r3, r2
 800257e:	3b23      	subs	r3, #35	; 0x23
 8002580:	221f      	movs	r2, #31
 8002582:	fa02 f303 	lsl.w	r3, r2, r3
 8002586:	43db      	mvns	r3, r3
 8002588:	4019      	ands	r1, r3
 800258a:	683b      	ldr	r3, [r7, #0]
 800258c:	6818      	ldr	r0, [r3, #0]
 800258e:	683b      	ldr	r3, [r7, #0]
 8002590:	685a      	ldr	r2, [r3, #4]
 8002592:	4613      	mov	r3, r2
 8002594:	009b      	lsls	r3, r3, #2
 8002596:	4413      	add	r3, r2
 8002598:	3b23      	subs	r3, #35	; 0x23
 800259a:	fa00 f203 	lsl.w	r2, r0, r3
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	430a      	orrs	r2, r1
 80025a4:	631a      	str	r2, [r3, #48]	; 0x30
 80025a6:	e01b      	b.n	80025e0 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80025ae:	683b      	ldr	r3, [r7, #0]
 80025b0:	685a      	ldr	r2, [r3, #4]
 80025b2:	4613      	mov	r3, r2
 80025b4:	009b      	lsls	r3, r3, #2
 80025b6:	4413      	add	r3, r2
 80025b8:	3b41      	subs	r3, #65	; 0x41
 80025ba:	221f      	movs	r2, #31
 80025bc:	fa02 f303 	lsl.w	r3, r2, r3
 80025c0:	43db      	mvns	r3, r3
 80025c2:	4019      	ands	r1, r3
 80025c4:	683b      	ldr	r3, [r7, #0]
 80025c6:	6818      	ldr	r0, [r3, #0]
 80025c8:	683b      	ldr	r3, [r7, #0]
 80025ca:	685a      	ldr	r2, [r3, #4]
 80025cc:	4613      	mov	r3, r2
 80025ce:	009b      	lsls	r3, r3, #2
 80025d0:	4413      	add	r3, r2
 80025d2:	3b41      	subs	r3, #65	; 0x41
 80025d4:	fa00 f203 	lsl.w	r2, r0, r3
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	430a      	orrs	r2, r1
 80025de:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 80025e0:	683b      	ldr	r3, [r7, #0]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	2b09      	cmp	r3, #9
 80025e6:	d91c      	bls.n	8002622 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	68d9      	ldr	r1, [r3, #12]
 80025ee:	683b      	ldr	r3, [r7, #0]
 80025f0:	681a      	ldr	r2, [r3, #0]
 80025f2:	4613      	mov	r3, r2
 80025f4:	005b      	lsls	r3, r3, #1
 80025f6:	4413      	add	r3, r2
 80025f8:	3b1e      	subs	r3, #30
 80025fa:	2207      	movs	r2, #7
 80025fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002600:	43db      	mvns	r3, r3
 8002602:	4019      	ands	r1, r3
 8002604:	683b      	ldr	r3, [r7, #0]
 8002606:	6898      	ldr	r0, [r3, #8]
 8002608:	683b      	ldr	r3, [r7, #0]
 800260a:	681a      	ldr	r2, [r3, #0]
 800260c:	4613      	mov	r3, r2
 800260e:	005b      	lsls	r3, r3, #1
 8002610:	4413      	add	r3, r2
 8002612:	3b1e      	subs	r3, #30
 8002614:	fa00 f203 	lsl.w	r2, r0, r3
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	430a      	orrs	r2, r1
 800261e:	60da      	str	r2, [r3, #12]
 8002620:	e019      	b.n	8002656 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	6919      	ldr	r1, [r3, #16]
 8002628:	683b      	ldr	r3, [r7, #0]
 800262a:	681a      	ldr	r2, [r3, #0]
 800262c:	4613      	mov	r3, r2
 800262e:	005b      	lsls	r3, r3, #1
 8002630:	4413      	add	r3, r2
 8002632:	2207      	movs	r2, #7
 8002634:	fa02 f303 	lsl.w	r3, r2, r3
 8002638:	43db      	mvns	r3, r3
 800263a:	4019      	ands	r1, r3
 800263c:	683b      	ldr	r3, [r7, #0]
 800263e:	6898      	ldr	r0, [r3, #8]
 8002640:	683b      	ldr	r3, [r7, #0]
 8002642:	681a      	ldr	r2, [r3, #0]
 8002644:	4613      	mov	r3, r2
 8002646:	005b      	lsls	r3, r3, #1
 8002648:	4413      	add	r3, r2
 800264a:	fa00 f203 	lsl.w	r2, r0, r3
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	430a      	orrs	r2, r1
 8002654:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002656:	683b      	ldr	r3, [r7, #0]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	2b10      	cmp	r3, #16
 800265c:	d003      	beq.n	8002666 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 800265e:	683b      	ldr	r3, [r7, #0]
 8002660:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002662:	2b11      	cmp	r3, #17
 8002664:	d132      	bne.n	80026cc <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	4a1d      	ldr	r2, [pc, #116]	; (80026e0 <HAL_ADC_ConfigChannel+0x1e4>)
 800266c:	4293      	cmp	r3, r2
 800266e:	d125      	bne.n	80026bc <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	689b      	ldr	r3, [r3, #8]
 8002676:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800267a:	2b00      	cmp	r3, #0
 800267c:	d126      	bne.n	80026cc <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	689a      	ldr	r2, [r3, #8]
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 800268c:	609a      	str	r2, [r3, #8]
        
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 800268e:	683b      	ldr	r3, [r7, #0]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	2b10      	cmp	r3, #16
 8002694:	d11a      	bne.n	80026cc <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002696:	4b13      	ldr	r3, [pc, #76]	; (80026e4 <HAL_ADC_ConfigChannel+0x1e8>)
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	4a13      	ldr	r2, [pc, #76]	; (80026e8 <HAL_ADC_ConfigChannel+0x1ec>)
 800269c:	fba2 2303 	umull	r2, r3, r2, r3
 80026a0:	0c9a      	lsrs	r2, r3, #18
 80026a2:	4613      	mov	r3, r2
 80026a4:	009b      	lsls	r3, r3, #2
 80026a6:	4413      	add	r3, r2
 80026a8:	005b      	lsls	r3, r3, #1
 80026aa:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80026ac:	e002      	b.n	80026b4 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 80026ae:	68bb      	ldr	r3, [r7, #8]
 80026b0:	3b01      	subs	r3, #1
 80026b2:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80026b4:	68bb      	ldr	r3, [r7, #8]
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d1f9      	bne.n	80026ae <HAL_ADC_ConfigChannel+0x1b2>
 80026ba:	e007      	b.n	80026cc <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026c0:	f043 0220 	orr.w	r2, r3, #32
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 80026c8:	2301      	movs	r3, #1
 80026ca:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	2200      	movs	r2, #0
 80026d0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80026d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80026d6:	4618      	mov	r0, r3
 80026d8:	3714      	adds	r7, #20
 80026da:	46bd      	mov	sp, r7
 80026dc:	bc80      	pop	{r7}
 80026de:	4770      	bx	lr
 80026e0:	40012400 	.word	0x40012400
 80026e4:	2000000c 	.word	0x2000000c
 80026e8:	431bde83 	.word	0x431bde83

080026ec <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80026ec:	b580      	push	{r7, lr}
 80026ee:	b084      	sub	sp, #16
 80026f0:	af00      	add	r7, sp, #0
 80026f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80026f4:	2300      	movs	r3, #0
 80026f6:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 80026f8:	2300      	movs	r3, #0
 80026fa:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	689b      	ldr	r3, [r3, #8]
 8002702:	f003 0301 	and.w	r3, r3, #1
 8002706:	2b01      	cmp	r3, #1
 8002708:	d039      	beq.n	800277e <ADC_Enable+0x92>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	689a      	ldr	r2, [r3, #8]
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	f042 0201 	orr.w	r2, r2, #1
 8002718:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800271a:	4b1b      	ldr	r3, [pc, #108]	; (8002788 <ADC_Enable+0x9c>)
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	4a1b      	ldr	r2, [pc, #108]	; (800278c <ADC_Enable+0xa0>)
 8002720:	fba2 2303 	umull	r2, r3, r2, r3
 8002724:	0c9b      	lsrs	r3, r3, #18
 8002726:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002728:	e002      	b.n	8002730 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 800272a:	68bb      	ldr	r3, [r7, #8]
 800272c:	3b01      	subs	r3, #1
 800272e:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002730:	68bb      	ldr	r3, [r7, #8]
 8002732:	2b00      	cmp	r3, #0
 8002734:	d1f9      	bne.n	800272a <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002736:	f7ff fce7 	bl	8002108 <HAL_GetTick>
 800273a:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 800273c:	e018      	b.n	8002770 <ADC_Enable+0x84>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800273e:	f7ff fce3 	bl	8002108 <HAL_GetTick>
 8002742:	4602      	mov	r2, r0
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	1ad3      	subs	r3, r2, r3
 8002748:	2b02      	cmp	r3, #2
 800274a:	d911      	bls.n	8002770 <ADC_Enable+0x84>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002750:	f043 0210 	orr.w	r2, r3, #16
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	629a      	str	r2, [r3, #40]	; 0x28
      
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800275c:	f043 0201 	orr.w	r2, r3, #1
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	62da      	str	r2, [r3, #44]	; 0x2c
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	2200      	movs	r2, #0
 8002768:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
        return HAL_ERROR;
 800276c:	2301      	movs	r3, #1
 800276e:	e007      	b.n	8002780 <ADC_Enable+0x94>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	689b      	ldr	r3, [r3, #8]
 8002776:	f003 0301 	and.w	r3, r3, #1
 800277a:	2b01      	cmp	r3, #1
 800277c:	d1df      	bne.n	800273e <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 800277e:	2300      	movs	r3, #0
}
 8002780:	4618      	mov	r0, r3
 8002782:	3710      	adds	r7, #16
 8002784:	46bd      	mov	sp, r7
 8002786:	bd80      	pop	{r7, pc}
 8002788:	2000000c 	.word	0x2000000c
 800278c:	431bde83 	.word	0x431bde83

08002790 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8002790:	b580      	push	{r7, lr}
 8002792:	b084      	sub	sp, #16
 8002794:	af00      	add	r7, sp, #0
 8002796:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002798:	2300      	movs	r3, #0
 800279a:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	689b      	ldr	r3, [r3, #8]
 80027a2:	f003 0301 	and.w	r3, r3, #1
 80027a6:	2b01      	cmp	r3, #1
 80027a8:	d127      	bne.n	80027fa <ADC_ConversionStop_Disable+0x6a>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	689a      	ldr	r2, [r3, #8]
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	f022 0201 	bic.w	r2, r2, #1
 80027b8:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 80027ba:	f7ff fca5 	bl	8002108 <HAL_GetTick>
 80027be:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 80027c0:	e014      	b.n	80027ec <ADC_ConversionStop_Disable+0x5c>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80027c2:	f7ff fca1 	bl	8002108 <HAL_GetTick>
 80027c6:	4602      	mov	r2, r0
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	1ad3      	subs	r3, r2, r3
 80027cc:	2b02      	cmp	r3, #2
 80027ce:	d90d      	bls.n	80027ec <ADC_ConversionStop_Disable+0x5c>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027d4:	f043 0210 	orr.w	r2, r3, #16
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027e0:	f043 0201 	orr.w	r2, r3, #1
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	62da      	str	r2, [r3, #44]	; 0x2c
        
        return HAL_ERROR;
 80027e8:	2301      	movs	r3, #1
 80027ea:	e007      	b.n	80027fc <ADC_ConversionStop_Disable+0x6c>
    while(ADC_IS_ENABLE(hadc) != RESET)
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	689b      	ldr	r3, [r3, #8]
 80027f2:	f003 0301 	and.w	r3, r3, #1
 80027f6:	2b01      	cmp	r3, #1
 80027f8:	d0e3      	beq.n	80027c2 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80027fa:	2300      	movs	r3, #0
}
 80027fc:	4618      	mov	r0, r3
 80027fe:	3710      	adds	r7, #16
 8002800:	46bd      	mov	sp, r7
 8002802:	bd80      	pop	{r7, pc}

08002804 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002804:	b580      	push	{r7, lr}
 8002806:	b084      	sub	sp, #16
 8002808:	af00      	add	r7, sp, #0
 800280a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002810:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002816:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800281a:	2b00      	cmp	r3, #0
 800281c:	d127      	bne.n	800286e <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002822:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	629a      	str	r2, [r3, #40]	; 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	689b      	ldr	r3, [r3, #8]
 8002830:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8002834:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8002838:	d115      	bne.n	8002866 <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	68db      	ldr	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800283e:	2b00      	cmp	r3, #0
 8002840:	d111      	bne.n	8002866 <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002846:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	629a      	str	r2, [r3, #40]	; 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002852:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002856:	2b00      	cmp	r3, #0
 8002858:	d105      	bne.n	8002866 <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800285e:	f043 0201 	orr.w	r2, r3, #1
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* Conversion complete callback */
    HAL_ADC_ConvCpltCallback(hadc); 
 8002866:	68f8      	ldr	r0, [r7, #12]
 8002868:	f7ff fe2c 	bl	80024c4 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 800286c:	e004      	b.n	8002878 <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	6a1b      	ldr	r3, [r3, #32]
 8002872:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002874:	6878      	ldr	r0, [r7, #4]
 8002876:	4798      	blx	r3
}
 8002878:	bf00      	nop
 800287a:	3710      	adds	r7, #16
 800287c:	46bd      	mov	sp, r7
 800287e:	bd80      	pop	{r7, pc}

08002880 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002880:	b580      	push	{r7, lr}
 8002882:	b084      	sub	sp, #16
 8002884:	af00      	add	r7, sp, #0
 8002886:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800288c:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
  HAL_ADC_ConvHalfCpltCallback(hadc); 
 800288e:	68f8      	ldr	r0, [r7, #12]
 8002890:	f7ff fe21 	bl	80024d6 <HAL_ADC_ConvHalfCpltCallback>
}
 8002894:	bf00      	nop
 8002896:	3710      	adds	r7, #16
 8002898:	46bd      	mov	sp, r7
 800289a:	bd80      	pop	{r7, pc}

0800289c <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 800289c:	b580      	push	{r7, lr}
 800289e:	b084      	sub	sp, #16
 80028a0:	af00      	add	r7, sp, #0
 80028a2:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028a8:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028ae:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028ba:	f043 0204 	orr.w	r2, r3, #4
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Error callback */
  HAL_ADC_ErrorCallback(hadc); 
 80028c2:	68f8      	ldr	r0, [r7, #12]
 80028c4:	f7ff fe10 	bl	80024e8 <HAL_ADC_ErrorCallback>
}
 80028c8:	bf00      	nop
 80028ca:	3710      	adds	r7, #16
 80028cc:	46bd      	mov	sp, r7
 80028ce:	bd80      	pop	{r7, pc}

080028d0 <NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80028d0:	b480      	push	{r7}
 80028d2:	b085      	sub	sp, #20
 80028d4:	af00      	add	r7, sp, #0
 80028d6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	f003 0307 	and.w	r3, r3, #7
 80028de:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80028e0:	4b0c      	ldr	r3, [pc, #48]	; (8002914 <NVIC_SetPriorityGrouping+0x44>)
 80028e2:	68db      	ldr	r3, [r3, #12]
 80028e4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80028e6:	68ba      	ldr	r2, [r7, #8]
 80028e8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80028ec:	4013      	ands	r3, r2
 80028ee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80028f4:	68bb      	ldr	r3, [r7, #8]
 80028f6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80028f8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80028fc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002900:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002902:	4a04      	ldr	r2, [pc, #16]	; (8002914 <NVIC_SetPriorityGrouping+0x44>)
 8002904:	68bb      	ldr	r3, [r7, #8]
 8002906:	60d3      	str	r3, [r2, #12]
}
 8002908:	bf00      	nop
 800290a:	3714      	adds	r7, #20
 800290c:	46bd      	mov	sp, r7
 800290e:	bc80      	pop	{r7}
 8002910:	4770      	bx	lr
 8002912:	bf00      	nop
 8002914:	e000ed00 	.word	0xe000ed00

08002918 <NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
 8002918:	b480      	push	{r7}
 800291a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800291c:	4b04      	ldr	r3, [pc, #16]	; (8002930 <NVIC_GetPriorityGrouping+0x18>)
 800291e:	68db      	ldr	r3, [r3, #12]
 8002920:	0a1b      	lsrs	r3, r3, #8
 8002922:	f003 0307 	and.w	r3, r3, #7
}
 8002926:	4618      	mov	r0, r3
 8002928:	46bd      	mov	sp, r7
 800292a:	bc80      	pop	{r7}
 800292c:	4770      	bx	lr
 800292e:	bf00      	nop
 8002930:	e000ed00 	.word	0xe000ed00

08002934 <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002934:	b480      	push	{r7}
 8002936:	b083      	sub	sp, #12
 8002938:	af00      	add	r7, sp, #0
 800293a:	4603      	mov	r3, r0
 800293c:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 800293e:	79fb      	ldrb	r3, [r7, #7]
 8002940:	f003 021f 	and.w	r2, r3, #31
 8002944:	4906      	ldr	r1, [pc, #24]	; (8002960 <NVIC_EnableIRQ+0x2c>)
 8002946:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800294a:	095b      	lsrs	r3, r3, #5
 800294c:	2001      	movs	r0, #1
 800294e:	fa00 f202 	lsl.w	r2, r0, r2
 8002952:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8002956:	bf00      	nop
 8002958:	370c      	adds	r7, #12
 800295a:	46bd      	mov	sp, r7
 800295c:	bc80      	pop	{r7}
 800295e:	4770      	bx	lr
 8002960:	e000e100 	.word	0xe000e100

08002964 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002964:	b480      	push	{r7}
 8002966:	b083      	sub	sp, #12
 8002968:	af00      	add	r7, sp, #0
 800296a:	4603      	mov	r3, r0
 800296c:	6039      	str	r1, [r7, #0]
 800296e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 8002970:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002974:	2b00      	cmp	r3, #0
 8002976:	da0b      	bge.n	8002990 <NVIC_SetPriority+0x2c>
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002978:	683b      	ldr	r3, [r7, #0]
 800297a:	b2da      	uxtb	r2, r3
 800297c:	490c      	ldr	r1, [pc, #48]	; (80029b0 <NVIC_SetPriority+0x4c>)
 800297e:	79fb      	ldrb	r3, [r7, #7]
 8002980:	f003 030f 	and.w	r3, r3, #15
 8002984:	3b04      	subs	r3, #4
 8002986:	0112      	lsls	r2, r2, #4
 8002988:	b2d2      	uxtb	r2, r2
 800298a:	440b      	add	r3, r1
 800298c:	761a      	strb	r2, [r3, #24]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800298e:	e009      	b.n	80029a4 <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002990:	683b      	ldr	r3, [r7, #0]
 8002992:	b2da      	uxtb	r2, r3
 8002994:	4907      	ldr	r1, [pc, #28]	; (80029b4 <NVIC_SetPriority+0x50>)
 8002996:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800299a:	0112      	lsls	r2, r2, #4
 800299c:	b2d2      	uxtb	r2, r2
 800299e:	440b      	add	r3, r1
 80029a0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80029a4:	bf00      	nop
 80029a6:	370c      	adds	r7, #12
 80029a8:	46bd      	mov	sp, r7
 80029aa:	bc80      	pop	{r7}
 80029ac:	4770      	bx	lr
 80029ae:	bf00      	nop
 80029b0:	e000ed00 	.word	0xe000ed00
 80029b4:	e000e100 	.word	0xe000e100

080029b8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80029b8:	b480      	push	{r7}
 80029ba:	b089      	sub	sp, #36	; 0x24
 80029bc:	af00      	add	r7, sp, #0
 80029be:	60f8      	str	r0, [r7, #12]
 80029c0:	60b9      	str	r1, [r7, #8]
 80029c2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	f003 0307 	and.w	r3, r3, #7
 80029ca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80029cc:	69fb      	ldr	r3, [r7, #28]
 80029ce:	f1c3 0307 	rsb	r3, r3, #7
 80029d2:	2b04      	cmp	r3, #4
 80029d4:	bf28      	it	cs
 80029d6:	2304      	movcs	r3, #4
 80029d8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80029da:	69fb      	ldr	r3, [r7, #28]
 80029dc:	3304      	adds	r3, #4
 80029de:	2b06      	cmp	r3, #6
 80029e0:	d902      	bls.n	80029e8 <NVIC_EncodePriority+0x30>
 80029e2:	69fb      	ldr	r3, [r7, #28]
 80029e4:	3b03      	subs	r3, #3
 80029e6:	e000      	b.n	80029ea <NVIC_EncodePriority+0x32>
 80029e8:	2300      	movs	r3, #0
 80029ea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80029ec:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80029f0:	69bb      	ldr	r3, [r7, #24]
 80029f2:	fa02 f303 	lsl.w	r3, r2, r3
 80029f6:	43da      	mvns	r2, r3
 80029f8:	68bb      	ldr	r3, [r7, #8]
 80029fa:	401a      	ands	r2, r3
 80029fc:	697b      	ldr	r3, [r7, #20]
 80029fe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002a00:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002a04:	697b      	ldr	r3, [r7, #20]
 8002a06:	fa01 f303 	lsl.w	r3, r1, r3
 8002a0a:	43d9      	mvns	r1, r3
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a10:	4313      	orrs	r3, r2
         );
}
 8002a12:	4618      	mov	r0, r3
 8002a14:	3724      	adds	r7, #36	; 0x24
 8002a16:	46bd      	mov	sp, r7
 8002a18:	bc80      	pop	{r7}
 8002a1a:	4770      	bx	lr

08002a1c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002a1c:	b580      	push	{r7, lr}
 8002a1e:	b082      	sub	sp, #8
 8002a20:	af00      	add	r7, sp, #0
 8002a22:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	3b01      	subs	r3, #1
 8002a28:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002a2c:	d301      	bcc.n	8002a32 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002a2e:	2301      	movs	r3, #1
 8002a30:	e00f      	b.n	8002a52 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002a32:	4a0a      	ldr	r2, [pc, #40]	; (8002a5c <SysTick_Config+0x40>)
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	3b01      	subs	r3, #1
 8002a38:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002a3a:	210f      	movs	r1, #15
 8002a3c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002a40:	f7ff ff90 	bl	8002964 <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002a44:	4b05      	ldr	r3, [pc, #20]	; (8002a5c <SysTick_Config+0x40>)
 8002a46:	2200      	movs	r2, #0
 8002a48:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002a4a:	4b04      	ldr	r3, [pc, #16]	; (8002a5c <SysTick_Config+0x40>)
 8002a4c:	2207      	movs	r2, #7
 8002a4e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002a50:	2300      	movs	r3, #0
}
 8002a52:	4618      	mov	r0, r3
 8002a54:	3708      	adds	r7, #8
 8002a56:	46bd      	mov	sp, r7
 8002a58:	bd80      	pop	{r7, pc}
 8002a5a:	bf00      	nop
 8002a5c:	e000e010 	.word	0xe000e010

08002a60 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a60:	b580      	push	{r7, lr}
 8002a62:	b082      	sub	sp, #8
 8002a64:	af00      	add	r7, sp, #0
 8002a66:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002a68:	6878      	ldr	r0, [r7, #4]
 8002a6a:	f7ff ff31 	bl	80028d0 <NVIC_SetPriorityGrouping>
}
 8002a6e:	bf00      	nop
 8002a70:	3708      	adds	r7, #8
 8002a72:	46bd      	mov	sp, r7
 8002a74:	bd80      	pop	{r7, pc}

08002a76 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002a76:	b580      	push	{r7, lr}
 8002a78:	b086      	sub	sp, #24
 8002a7a:	af00      	add	r7, sp, #0
 8002a7c:	4603      	mov	r3, r0
 8002a7e:	60b9      	str	r1, [r7, #8]
 8002a80:	607a      	str	r2, [r7, #4]
 8002a82:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002a84:	2300      	movs	r3, #0
 8002a86:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002a88:	f7ff ff46 	bl	8002918 <NVIC_GetPriorityGrouping>
 8002a8c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002a8e:	687a      	ldr	r2, [r7, #4]
 8002a90:	68b9      	ldr	r1, [r7, #8]
 8002a92:	6978      	ldr	r0, [r7, #20]
 8002a94:	f7ff ff90 	bl	80029b8 <NVIC_EncodePriority>
 8002a98:	4602      	mov	r2, r0
 8002a9a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002a9e:	4611      	mov	r1, r2
 8002aa0:	4618      	mov	r0, r3
 8002aa2:	f7ff ff5f 	bl	8002964 <NVIC_SetPriority>
}
 8002aa6:	bf00      	nop
 8002aa8:	3718      	adds	r7, #24
 8002aaa:	46bd      	mov	sp, r7
 8002aac:	bd80      	pop	{r7, pc}

08002aae <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002aae:	b580      	push	{r7, lr}
 8002ab0:	b082      	sub	sp, #8
 8002ab2:	af00      	add	r7, sp, #0
 8002ab4:	4603      	mov	r3, r0
 8002ab6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002ab8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002abc:	4618      	mov	r0, r3
 8002abe:	f7ff ff39 	bl	8002934 <NVIC_EnableIRQ>
}
 8002ac2:	bf00      	nop
 8002ac4:	3708      	adds	r7, #8
 8002ac6:	46bd      	mov	sp, r7
 8002ac8:	bd80      	pop	{r7, pc}

08002aca <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002aca:	b580      	push	{r7, lr}
 8002acc:	b082      	sub	sp, #8
 8002ace:	af00      	add	r7, sp, #0
 8002ad0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002ad2:	6878      	ldr	r0, [r7, #4]
 8002ad4:	f7ff ffa2 	bl	8002a1c <SysTick_Config>
 8002ad8:	4603      	mov	r3, r0
}
 8002ada:	4618      	mov	r0, r3
 8002adc:	3708      	adds	r7, #8
 8002ade:	46bd      	mov	sp, r7
 8002ae0:	bd80      	pop	{r7, pc}
	...

08002ae4 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8002ae4:	b480      	push	{r7}
 8002ae6:	b083      	sub	sp, #12
 8002ae8:	af00      	add	r7, sp, #0
 8002aea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	2b04      	cmp	r3, #4
 8002af0:	d106      	bne.n	8002b00 <HAL_SYSTICK_CLKSourceConfig+0x1c>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8002af2:	4b09      	ldr	r3, [pc, #36]	; (8002b18 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	4a08      	ldr	r2, [pc, #32]	; (8002b18 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8002af8:	f043 0304 	orr.w	r3, r3, #4
 8002afc:	6013      	str	r3, [r2, #0]
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
  }
}
 8002afe:	e005      	b.n	8002b0c <HAL_SYSTICK_CLKSourceConfig+0x28>
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8002b00:	4b05      	ldr	r3, [pc, #20]	; (8002b18 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	4a04      	ldr	r2, [pc, #16]	; (8002b18 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8002b06:	f023 0304 	bic.w	r3, r3, #4
 8002b0a:	6013      	str	r3, [r2, #0]
}
 8002b0c:	bf00      	nop
 8002b0e:	370c      	adds	r7, #12
 8002b10:	46bd      	mov	sp, r7
 8002b12:	bc80      	pop	{r7}
 8002b14:	4770      	bx	lr
 8002b16:	bf00      	nop
 8002b18:	e000e010 	.word	0xe000e010

08002b1c <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 8002b1c:	b580      	push	{r7, lr}
 8002b1e:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 8002b20:	f000 f802 	bl	8002b28 <HAL_SYSTICK_Callback>
}
 8002b24:	bf00      	nop
 8002b26:	bd80      	pop	{r7, pc}

08002b28 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8002b28:	b480      	push	{r7}
 8002b2a:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 8002b2c:	bf00      	nop
 8002b2e:	46bd      	mov	sp, r7
 8002b30:	bc80      	pop	{r7}
 8002b32:	4770      	bx	lr

08002b34 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002b34:	b480      	push	{r7}
 8002b36:	b085      	sub	sp, #20
 8002b38:	af00      	add	r7, sp, #0
 8002b3a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002b3c:	2300      	movs	r3, #0
 8002b3e:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d101      	bne.n	8002b4a <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8002b46:	2301      	movs	r3, #1
 8002b48:	e04f      	b.n	8002bea <HAL_DMA_Init+0xb6>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	461a      	mov	r2, r3
 8002b50:	4b28      	ldr	r3, [pc, #160]	; (8002bf4 <HAL_DMA_Init+0xc0>)
 8002b52:	4413      	add	r3, r2
 8002b54:	4a28      	ldr	r2, [pc, #160]	; (8002bf8 <HAL_DMA_Init+0xc4>)
 8002b56:	fba2 2303 	umull	r2, r3, r2, r3
 8002b5a:	091b      	lsrs	r3, r3, #4
 8002b5c:	009a      	lsls	r2, r3, #2
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	4a25      	ldr	r2, [pc, #148]	; (8002bfc <HAL_DMA_Init+0xc8>)
 8002b66:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* STM32F101xE || STM32F101xG || STM32F103xE || STM32F103xG || STM32F100xE || STM32F105xC || STM32F107xC */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	2202      	movs	r2, #2
 8002b6c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002b7e:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8002b82:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8002b8c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	68db      	ldr	r3, [r3, #12]
 8002b92:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002b98:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	695b      	ldr	r3, [r3, #20]
 8002b9e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002ba4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	69db      	ldr	r3, [r3, #28]
 8002baa:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002bac:	68fa      	ldr	r2, [r7, #12]
 8002bae:	4313      	orrs	r3, r2
 8002bb0:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	68fa      	ldr	r2, [r7, #12]
 8002bb8:	601a      	str	r2, [r3, #0]


  /* Clean callbacks */
  hdma->XferCpltCallback = NULL;
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	2200      	movs	r2, #0
 8002bbe:	629a      	str	r2, [r3, #40]	; 0x28
  hdma->XferHalfCpltCallback = NULL;
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	2200      	movs	r2, #0
 8002bc4:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma->XferErrorCallback = NULL;
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	2200      	movs	r2, #0
 8002bca:	631a      	str	r2, [r3, #48]	; 0x30
  hdma->XferAbortCallback = NULL;
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	2200      	movs	r2, #0
 8002bd0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	2200      	movs	r2, #0
 8002bd6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	2201      	movs	r2, #1
 8002bdc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	2200      	movs	r2, #0
 8002be4:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8002be8:	2300      	movs	r3, #0
}
 8002bea:	4618      	mov	r0, r3
 8002bec:	3714      	adds	r7, #20
 8002bee:	46bd      	mov	sp, r7
 8002bf0:	bc80      	pop	{r7}
 8002bf2:	4770      	bx	lr
 8002bf4:	bffdfff8 	.word	0xbffdfff8
 8002bf8:	cccccccd 	.word	0xcccccccd
 8002bfc:	40020000 	.word	0x40020000

08002c00 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002c00:	b580      	push	{r7, lr}
 8002c02:	b086      	sub	sp, #24
 8002c04:	af00      	add	r7, sp, #0
 8002c06:	60f8      	str	r0, [r7, #12]
 8002c08:	60b9      	str	r1, [r7, #8]
 8002c0a:	607a      	str	r2, [r7, #4]
 8002c0c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002c0e:	2300      	movs	r3, #0
 8002c10:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002c18:	2b01      	cmp	r3, #1
 8002c1a:	d101      	bne.n	8002c20 <HAL_DMA_Start_IT+0x20>
 8002c1c:	2302      	movs	r3, #2
 8002c1e:	e04a      	b.n	8002cb6 <HAL_DMA_Start_IT+0xb6>
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	2201      	movs	r2, #1
 8002c24:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002c2e:	2b01      	cmp	r3, #1
 8002c30:	d13a      	bne.n	8002ca8 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	2202      	movs	r2, #2
 8002c36:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	2200      	movs	r2, #0
 8002c3e:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	681a      	ldr	r2, [r3, #0]
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	f022 0201 	bic.w	r2, r2, #1
 8002c4e:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002c50:	683b      	ldr	r3, [r7, #0]
 8002c52:	687a      	ldr	r2, [r7, #4]
 8002c54:	68b9      	ldr	r1, [r7, #8]
 8002c56:	68f8      	ldr	r0, [r7, #12]
 8002c58:	f000 f938 	bl	8002ecc <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d008      	beq.n	8002c76 <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	681a      	ldr	r2, [r3, #0]
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	f042 020e 	orr.w	r2, r2, #14
 8002c72:	601a      	str	r2, [r3, #0]
 8002c74:	e00f      	b.n	8002c96 <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	681a      	ldr	r2, [r3, #0]
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	f022 0204 	bic.w	r2, r2, #4
 8002c84:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	681a      	ldr	r2, [r3, #0]
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	f042 020a 	orr.w	r2, r2, #10
 8002c94:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	681a      	ldr	r2, [r3, #0]
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	f042 0201 	orr.w	r2, r2, #1
 8002ca4:	601a      	str	r2, [r3, #0]
 8002ca6:	e005      	b.n	8002cb4 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	2200      	movs	r2, #0
 8002cac:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8002cb0:	2302      	movs	r3, #2
 8002cb2:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8002cb4:	7dfb      	ldrb	r3, [r7, #23]
}
 8002cb6:	4618      	mov	r0, r3
 8002cb8:	3718      	adds	r7, #24
 8002cba:	46bd      	mov	sp, r7
 8002cbc:	bd80      	pop	{r7, pc}
	...

08002cc0 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002cc0:	b580      	push	{r7, lr}
 8002cc2:	b084      	sub	sp, #16
 8002cc4:	af00      	add	r7, sp, #0
 8002cc6:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cdc:	2204      	movs	r2, #4
 8002cde:	409a      	lsls	r2, r3
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	4013      	ands	r3, r2
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d04f      	beq.n	8002d88 <HAL_DMA_IRQHandler+0xc8>
 8002ce8:	68bb      	ldr	r3, [r7, #8]
 8002cea:	f003 0304 	and.w	r3, r3, #4
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d04a      	beq.n	8002d88 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	f003 0320 	and.w	r3, r3, #32
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d107      	bne.n	8002d10 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	681a      	ldr	r2, [r3, #0]
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	f022 0204 	bic.w	r2, r2, #4
 8002d0e:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	4a66      	ldr	r2, [pc, #408]	; (8002eb0 <HAL_DMA_IRQHandler+0x1f0>)
 8002d16:	4293      	cmp	r3, r2
 8002d18:	d029      	beq.n	8002d6e <HAL_DMA_IRQHandler+0xae>
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	4a65      	ldr	r2, [pc, #404]	; (8002eb4 <HAL_DMA_IRQHandler+0x1f4>)
 8002d20:	4293      	cmp	r3, r2
 8002d22:	d022      	beq.n	8002d6a <HAL_DMA_IRQHandler+0xaa>
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	4a63      	ldr	r2, [pc, #396]	; (8002eb8 <HAL_DMA_IRQHandler+0x1f8>)
 8002d2a:	4293      	cmp	r3, r2
 8002d2c:	d01a      	beq.n	8002d64 <HAL_DMA_IRQHandler+0xa4>
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	4a62      	ldr	r2, [pc, #392]	; (8002ebc <HAL_DMA_IRQHandler+0x1fc>)
 8002d34:	4293      	cmp	r3, r2
 8002d36:	d012      	beq.n	8002d5e <HAL_DMA_IRQHandler+0x9e>
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	4a60      	ldr	r2, [pc, #384]	; (8002ec0 <HAL_DMA_IRQHandler+0x200>)
 8002d3e:	4293      	cmp	r3, r2
 8002d40:	d00a      	beq.n	8002d58 <HAL_DMA_IRQHandler+0x98>
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	4a5f      	ldr	r2, [pc, #380]	; (8002ec4 <HAL_DMA_IRQHandler+0x204>)
 8002d48:	4293      	cmp	r3, r2
 8002d4a:	d102      	bne.n	8002d52 <HAL_DMA_IRQHandler+0x92>
 8002d4c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002d50:	e00e      	b.n	8002d70 <HAL_DMA_IRQHandler+0xb0>
 8002d52:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8002d56:	e00b      	b.n	8002d70 <HAL_DMA_IRQHandler+0xb0>
 8002d58:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002d5c:	e008      	b.n	8002d70 <HAL_DMA_IRQHandler+0xb0>
 8002d5e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002d62:	e005      	b.n	8002d70 <HAL_DMA_IRQHandler+0xb0>
 8002d64:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002d68:	e002      	b.n	8002d70 <HAL_DMA_IRQHandler+0xb0>
 8002d6a:	2340      	movs	r3, #64	; 0x40
 8002d6c:	e000      	b.n	8002d70 <HAL_DMA_IRQHandler+0xb0>
 8002d6e:	2304      	movs	r3, #4
 8002d70:	4a55      	ldr	r2, [pc, #340]	; (8002ec8 <HAL_DMA_IRQHandler+0x208>)
 8002d72:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	f000 8094 	beq.w	8002ea6 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d82:	6878      	ldr	r0, [r7, #4]
 8002d84:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8002d86:	e08e      	b.n	8002ea6 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d8c:	2202      	movs	r2, #2
 8002d8e:	409a      	lsls	r2, r3
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	4013      	ands	r3, r2
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d056      	beq.n	8002e46 <HAL_DMA_IRQHandler+0x186>
 8002d98:	68bb      	ldr	r3, [r7, #8]
 8002d9a:	f003 0302 	and.w	r3, r3, #2
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d051      	beq.n	8002e46 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	f003 0320 	and.w	r3, r3, #32
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d10b      	bne.n	8002dc8 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	681a      	ldr	r2, [r3, #0]
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	f022 020a 	bic.w	r2, r2, #10
 8002dbe:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	2201      	movs	r2, #1
 8002dc4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	4a38      	ldr	r2, [pc, #224]	; (8002eb0 <HAL_DMA_IRQHandler+0x1f0>)
 8002dce:	4293      	cmp	r3, r2
 8002dd0:	d029      	beq.n	8002e26 <HAL_DMA_IRQHandler+0x166>
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	4a37      	ldr	r2, [pc, #220]	; (8002eb4 <HAL_DMA_IRQHandler+0x1f4>)
 8002dd8:	4293      	cmp	r3, r2
 8002dda:	d022      	beq.n	8002e22 <HAL_DMA_IRQHandler+0x162>
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	4a35      	ldr	r2, [pc, #212]	; (8002eb8 <HAL_DMA_IRQHandler+0x1f8>)
 8002de2:	4293      	cmp	r3, r2
 8002de4:	d01a      	beq.n	8002e1c <HAL_DMA_IRQHandler+0x15c>
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	4a34      	ldr	r2, [pc, #208]	; (8002ebc <HAL_DMA_IRQHandler+0x1fc>)
 8002dec:	4293      	cmp	r3, r2
 8002dee:	d012      	beq.n	8002e16 <HAL_DMA_IRQHandler+0x156>
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	4a32      	ldr	r2, [pc, #200]	; (8002ec0 <HAL_DMA_IRQHandler+0x200>)
 8002df6:	4293      	cmp	r3, r2
 8002df8:	d00a      	beq.n	8002e10 <HAL_DMA_IRQHandler+0x150>
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	4a31      	ldr	r2, [pc, #196]	; (8002ec4 <HAL_DMA_IRQHandler+0x204>)
 8002e00:	4293      	cmp	r3, r2
 8002e02:	d102      	bne.n	8002e0a <HAL_DMA_IRQHandler+0x14a>
 8002e04:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002e08:	e00e      	b.n	8002e28 <HAL_DMA_IRQHandler+0x168>
 8002e0a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002e0e:	e00b      	b.n	8002e28 <HAL_DMA_IRQHandler+0x168>
 8002e10:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002e14:	e008      	b.n	8002e28 <HAL_DMA_IRQHandler+0x168>
 8002e16:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002e1a:	e005      	b.n	8002e28 <HAL_DMA_IRQHandler+0x168>
 8002e1c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002e20:	e002      	b.n	8002e28 <HAL_DMA_IRQHandler+0x168>
 8002e22:	2320      	movs	r3, #32
 8002e24:	e000      	b.n	8002e28 <HAL_DMA_IRQHandler+0x168>
 8002e26:	2302      	movs	r3, #2
 8002e28:	4a27      	ldr	r2, [pc, #156]	; (8002ec8 <HAL_DMA_IRQHandler+0x208>)
 8002e2a:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	2200      	movs	r2, #0
 8002e30:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d034      	beq.n	8002ea6 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e40:	6878      	ldr	r0, [r7, #4]
 8002e42:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8002e44:	e02f      	b.n	8002ea6 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e4a:	2208      	movs	r2, #8
 8002e4c:	409a      	lsls	r2, r3
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	4013      	ands	r3, r2
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d028      	beq.n	8002ea8 <HAL_DMA_IRQHandler+0x1e8>
 8002e56:	68bb      	ldr	r3, [r7, #8]
 8002e58:	f003 0308 	and.w	r3, r3, #8
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d023      	beq.n	8002ea8 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	681a      	ldr	r2, [r3, #0]
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	f022 020e 	bic.w	r2, r2, #14
 8002e6e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e78:	2101      	movs	r1, #1
 8002e7a:	fa01 f202 	lsl.w	r2, r1, r2
 8002e7e:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	2201      	movs	r2, #1
 8002e84:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	2201      	movs	r2, #1
 8002e8a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	2200      	movs	r2, #0
 8002e92:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d004      	beq.n	8002ea8 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ea2:	6878      	ldr	r0, [r7, #4]
 8002ea4:	4798      	blx	r3
    }
  }
  return;
 8002ea6:	bf00      	nop
 8002ea8:	bf00      	nop
}
 8002eaa:	3710      	adds	r7, #16
 8002eac:	46bd      	mov	sp, r7
 8002eae:	bd80      	pop	{r7, pc}
 8002eb0:	40020008 	.word	0x40020008
 8002eb4:	4002001c 	.word	0x4002001c
 8002eb8:	40020030 	.word	0x40020030
 8002ebc:	40020044 	.word	0x40020044
 8002ec0:	40020058 	.word	0x40020058
 8002ec4:	4002006c 	.word	0x4002006c
 8002ec8:	40020000 	.word	0x40020000

08002ecc <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002ecc:	b480      	push	{r7}
 8002ece:	b085      	sub	sp, #20
 8002ed0:	af00      	add	r7, sp, #0
 8002ed2:	60f8      	str	r0, [r7, #12]
 8002ed4:	60b9      	str	r1, [r7, #8]
 8002ed6:	607a      	str	r2, [r7, #4]
 8002ed8:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ee2:	2101      	movs	r1, #1
 8002ee4:	fa01 f202 	lsl.w	r2, r1, r2
 8002ee8:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	683a      	ldr	r2, [r7, #0]
 8002ef0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	685b      	ldr	r3, [r3, #4]
 8002ef6:	2b10      	cmp	r3, #16
 8002ef8:	d108      	bne.n	8002f0c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	687a      	ldr	r2, [r7, #4]
 8002f00:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	68ba      	ldr	r2, [r7, #8]
 8002f08:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002f0a:	e007      	b.n	8002f1c <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	68ba      	ldr	r2, [r7, #8]
 8002f12:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	687a      	ldr	r2, [r7, #4]
 8002f1a:	60da      	str	r2, [r3, #12]
}
 8002f1c:	bf00      	nop
 8002f1e:	3714      	adds	r7, #20
 8002f20:	46bd      	mov	sp, r7
 8002f22:	bc80      	pop	{r7}
 8002f24:	4770      	bx	lr
	...

08002f28 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002f28:	b480      	push	{r7}
 8002f2a:	b08b      	sub	sp, #44	; 0x2c
 8002f2c:	af00      	add	r7, sp, #0
 8002f2e:	6078      	str	r0, [r7, #4]
 8002f30:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002f32:	2300      	movs	r3, #0
 8002f34:	61fb      	str	r3, [r7, #28]
  uint32_t iocurrent = 0x00U;
 8002f36:	2300      	movs	r3, #0
 8002f38:	61bb      	str	r3, [r7, #24]
  uint32_t temp = 0x00U;
 8002f3a:	2300      	movs	r3, #0
 8002f3c:	617b      	str	r3, [r7, #20]
  uint32_t config = 0x00U;
 8002f3e:	2300      	movs	r3, #0
 8002f40:	623b      	str	r3, [r7, #32]
  __IO uint32_t *configregister; /* Store the address of CRL or CRH register based on pin number */
  uint32_t registeroffset = 0U; /* offset used during computation of CNF and MODE bits placement inside CRL or CRH register */
 8002f42:	2300      	movs	r3, #0
 8002f44:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0U; position < GPIO_NUMBER; position++)
 8002f46:	2300      	movs	r3, #0
 8002f48:	627b      	str	r3, [r7, #36]	; 0x24
 8002f4a:	e127      	b.n	800319c <HAL_GPIO_Init+0x274>
  {
    /* Get the IO position */
    ioposition = (0x01U << position);
 8002f4c:	2201      	movs	r2, #1
 8002f4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f50:	fa02 f303 	lsl.w	r3, r2, r3
 8002f54:	61fb      	str	r3, [r7, #28]
    
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002f56:	683b      	ldr	r3, [r7, #0]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	69fa      	ldr	r2, [r7, #28]
 8002f5c:	4013      	ands	r3, r2
 8002f5e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002f60:	69ba      	ldr	r2, [r7, #24]
 8002f62:	69fb      	ldr	r3, [r7, #28]
 8002f64:	429a      	cmp	r2, r3
 8002f66:	f040 8116 	bne.w	8003196 <HAL_GPIO_Init+0x26e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002f6a:	683b      	ldr	r3, [r7, #0]
 8002f6c:	685b      	ldr	r3, [r3, #4]
 8002f6e:	2b12      	cmp	r3, #18
 8002f70:	d034      	beq.n	8002fdc <HAL_GPIO_Init+0xb4>
 8002f72:	2b12      	cmp	r3, #18
 8002f74:	d80d      	bhi.n	8002f92 <HAL_GPIO_Init+0x6a>
 8002f76:	2b02      	cmp	r3, #2
 8002f78:	d02b      	beq.n	8002fd2 <HAL_GPIO_Init+0xaa>
 8002f7a:	2b02      	cmp	r3, #2
 8002f7c:	d804      	bhi.n	8002f88 <HAL_GPIO_Init+0x60>
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d031      	beq.n	8002fe6 <HAL_GPIO_Init+0xbe>
 8002f82:	2b01      	cmp	r3, #1
 8002f84:	d01c      	beq.n	8002fc0 <HAL_GPIO_Init+0x98>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;
        
        /* Parameters are checked with assert_param */
        default:
          break;
 8002f86:	e048      	b.n	800301a <HAL_GPIO_Init+0xf2>
      switch (GPIO_Init->Mode)
 8002f88:	2b03      	cmp	r3, #3
 8002f8a:	d043      	beq.n	8003014 <HAL_GPIO_Init+0xec>
 8002f8c:	2b11      	cmp	r3, #17
 8002f8e:	d01b      	beq.n	8002fc8 <HAL_GPIO_Init+0xa0>
          break;
 8002f90:	e043      	b.n	800301a <HAL_GPIO_Init+0xf2>
      switch (GPIO_Init->Mode)
 8002f92:	4a87      	ldr	r2, [pc, #540]	; (80031b0 <HAL_GPIO_Init+0x288>)
 8002f94:	4293      	cmp	r3, r2
 8002f96:	d026      	beq.n	8002fe6 <HAL_GPIO_Init+0xbe>
 8002f98:	4a85      	ldr	r2, [pc, #532]	; (80031b0 <HAL_GPIO_Init+0x288>)
 8002f9a:	4293      	cmp	r3, r2
 8002f9c:	d806      	bhi.n	8002fac <HAL_GPIO_Init+0x84>
 8002f9e:	4a85      	ldr	r2, [pc, #532]	; (80031b4 <HAL_GPIO_Init+0x28c>)
 8002fa0:	4293      	cmp	r3, r2
 8002fa2:	d020      	beq.n	8002fe6 <HAL_GPIO_Init+0xbe>
 8002fa4:	4a84      	ldr	r2, [pc, #528]	; (80031b8 <HAL_GPIO_Init+0x290>)
 8002fa6:	4293      	cmp	r3, r2
 8002fa8:	d01d      	beq.n	8002fe6 <HAL_GPIO_Init+0xbe>
          break;
 8002faa:	e036      	b.n	800301a <HAL_GPIO_Init+0xf2>
      switch (GPIO_Init->Mode)
 8002fac:	4a83      	ldr	r2, [pc, #524]	; (80031bc <HAL_GPIO_Init+0x294>)
 8002fae:	4293      	cmp	r3, r2
 8002fb0:	d019      	beq.n	8002fe6 <HAL_GPIO_Init+0xbe>
 8002fb2:	4a83      	ldr	r2, [pc, #524]	; (80031c0 <HAL_GPIO_Init+0x298>)
 8002fb4:	4293      	cmp	r3, r2
 8002fb6:	d016      	beq.n	8002fe6 <HAL_GPIO_Init+0xbe>
 8002fb8:	4a82      	ldr	r2, [pc, #520]	; (80031c4 <HAL_GPIO_Init+0x29c>)
 8002fba:	4293      	cmp	r3, r2
 8002fbc:	d013      	beq.n	8002fe6 <HAL_GPIO_Init+0xbe>
          break;
 8002fbe:	e02c      	b.n	800301a <HAL_GPIO_Init+0xf2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002fc0:	683b      	ldr	r3, [r7, #0]
 8002fc2:	68db      	ldr	r3, [r3, #12]
 8002fc4:	623b      	str	r3, [r7, #32]
          break;
 8002fc6:	e028      	b.n	800301a <HAL_GPIO_Init+0xf2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002fc8:	683b      	ldr	r3, [r7, #0]
 8002fca:	68db      	ldr	r3, [r3, #12]
 8002fcc:	3304      	adds	r3, #4
 8002fce:	623b      	str	r3, [r7, #32]
          break;
 8002fd0:	e023      	b.n	800301a <HAL_GPIO_Init+0xf2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002fd2:	683b      	ldr	r3, [r7, #0]
 8002fd4:	68db      	ldr	r3, [r3, #12]
 8002fd6:	3308      	adds	r3, #8
 8002fd8:	623b      	str	r3, [r7, #32]
          break;
 8002fda:	e01e      	b.n	800301a <HAL_GPIO_Init+0xf2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002fdc:	683b      	ldr	r3, [r7, #0]
 8002fde:	68db      	ldr	r3, [r3, #12]
 8002fe0:	330c      	adds	r3, #12
 8002fe2:	623b      	str	r3, [r7, #32]
          break;
 8002fe4:	e019      	b.n	800301a <HAL_GPIO_Init+0xf2>
          if(GPIO_Init->Pull == GPIO_NOPULL)
 8002fe6:	683b      	ldr	r3, [r7, #0]
 8002fe8:	689b      	ldr	r3, [r3, #8]
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d102      	bne.n	8002ff4 <HAL_GPIO_Init+0xcc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002fee:	2304      	movs	r3, #4
 8002ff0:	623b      	str	r3, [r7, #32]
          break; 
 8002ff2:	e012      	b.n	800301a <HAL_GPIO_Init+0xf2>
          else if(GPIO_Init->Pull == GPIO_PULLUP)
 8002ff4:	683b      	ldr	r3, [r7, #0]
 8002ff6:	689b      	ldr	r3, [r3, #8]
 8002ff8:	2b01      	cmp	r3, #1
 8002ffa:	d105      	bne.n	8003008 <HAL_GPIO_Init+0xe0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002ffc:	2308      	movs	r3, #8
 8002ffe:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	69fa      	ldr	r2, [r7, #28]
 8003004:	611a      	str	r2, [r3, #16]
          break; 
 8003006:	e008      	b.n	800301a <HAL_GPIO_Init+0xf2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003008:	2308      	movs	r3, #8
 800300a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	69fa      	ldr	r2, [r7, #28]
 8003010:	615a      	str	r2, [r3, #20]
          break; 
 8003012:	e002      	b.n	800301a <HAL_GPIO_Init+0xf2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8003014:	2300      	movs	r3, #0
 8003016:	623b      	str	r3, [r7, #32]
          break;
 8003018:	bf00      	nop
      }
      
      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800301a:	69bb      	ldr	r3, [r7, #24]
 800301c:	2bff      	cmp	r3, #255	; 0xff
 800301e:	d801      	bhi.n	8003024 <HAL_GPIO_Init+0xfc>
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	e001      	b.n	8003028 <HAL_GPIO_Init+0x100>
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	3304      	adds	r3, #4
 8003028:	60fb      	str	r3, [r7, #12]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2U) : ((position - 8U) << 2U);
 800302a:	69bb      	ldr	r3, [r7, #24]
 800302c:	2bff      	cmp	r3, #255	; 0xff
 800302e:	d802      	bhi.n	8003036 <HAL_GPIO_Init+0x10e>
 8003030:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003032:	009b      	lsls	r3, r3, #2
 8003034:	e002      	b.n	800303c <HAL_GPIO_Init+0x114>
 8003036:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003038:	3b08      	subs	r3, #8
 800303a:	009b      	lsls	r3, r3, #2
 800303c:	613b      	str	r3, [r7, #16]
      
      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset ), (config << registeroffset));
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	681a      	ldr	r2, [r3, #0]
 8003042:	210f      	movs	r1, #15
 8003044:	693b      	ldr	r3, [r7, #16]
 8003046:	fa01 f303 	lsl.w	r3, r1, r3
 800304a:	43db      	mvns	r3, r3
 800304c:	401a      	ands	r2, r3
 800304e:	6a39      	ldr	r1, [r7, #32]
 8003050:	693b      	ldr	r3, [r7, #16]
 8003052:	fa01 f303 	lsl.w	r3, r1, r3
 8003056:	431a      	orrs	r2, r3
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	601a      	str	r2, [r3, #0]
      
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 800305c:	683b      	ldr	r3, [r7, #0]
 800305e:	685b      	ldr	r3, [r3, #4]
 8003060:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003064:	2b00      	cmp	r3, #0
 8003066:	f000 8096 	beq.w	8003196 <HAL_GPIO_Init+0x26e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800306a:	4b57      	ldr	r3, [pc, #348]	; (80031c8 <HAL_GPIO_Init+0x2a0>)
 800306c:	699b      	ldr	r3, [r3, #24]
 800306e:	4a56      	ldr	r2, [pc, #344]	; (80031c8 <HAL_GPIO_Init+0x2a0>)
 8003070:	f043 0301 	orr.w	r3, r3, #1
 8003074:	6193      	str	r3, [r2, #24]
 8003076:	4b54      	ldr	r3, [pc, #336]	; (80031c8 <HAL_GPIO_Init+0x2a0>)
 8003078:	699b      	ldr	r3, [r3, #24]
 800307a:	f003 0301 	and.w	r3, r3, #1
 800307e:	60bb      	str	r3, [r7, #8]
 8003080:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2U];
 8003082:	4a52      	ldr	r2, [pc, #328]	; (80031cc <HAL_GPIO_Init+0x2a4>)
 8003084:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003086:	089b      	lsrs	r3, r3, #2
 8003088:	3302      	adds	r3, #2
 800308a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800308e:	617b      	str	r3, [r7, #20]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8003090:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003092:	f003 0303 	and.w	r3, r3, #3
 8003096:	009b      	lsls	r3, r3, #2
 8003098:	220f      	movs	r2, #15
 800309a:	fa02 f303 	lsl.w	r3, r2, r3
 800309e:	43db      	mvns	r3, r3
 80030a0:	697a      	ldr	r2, [r7, #20]
 80030a2:	4013      	ands	r3, r2
 80030a4:	617b      	str	r3, [r7, #20]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	4a49      	ldr	r2, [pc, #292]	; (80031d0 <HAL_GPIO_Init+0x2a8>)
 80030aa:	4293      	cmp	r3, r2
 80030ac:	d013      	beq.n	80030d6 <HAL_GPIO_Init+0x1ae>
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	4a48      	ldr	r2, [pc, #288]	; (80031d4 <HAL_GPIO_Init+0x2ac>)
 80030b2:	4293      	cmp	r3, r2
 80030b4:	d00d      	beq.n	80030d2 <HAL_GPIO_Init+0x1aa>
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	4a47      	ldr	r2, [pc, #284]	; (80031d8 <HAL_GPIO_Init+0x2b0>)
 80030ba:	4293      	cmp	r3, r2
 80030bc:	d007      	beq.n	80030ce <HAL_GPIO_Init+0x1a6>
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	4a46      	ldr	r2, [pc, #280]	; (80031dc <HAL_GPIO_Init+0x2b4>)
 80030c2:	4293      	cmp	r3, r2
 80030c4:	d101      	bne.n	80030ca <HAL_GPIO_Init+0x1a2>
 80030c6:	2303      	movs	r3, #3
 80030c8:	e006      	b.n	80030d8 <HAL_GPIO_Init+0x1b0>
 80030ca:	2304      	movs	r3, #4
 80030cc:	e004      	b.n	80030d8 <HAL_GPIO_Init+0x1b0>
 80030ce:	2302      	movs	r3, #2
 80030d0:	e002      	b.n	80030d8 <HAL_GPIO_Init+0x1b0>
 80030d2:	2301      	movs	r3, #1
 80030d4:	e000      	b.n	80030d8 <HAL_GPIO_Init+0x1b0>
 80030d6:	2300      	movs	r3, #0
 80030d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80030da:	f002 0203 	and.w	r2, r2, #3
 80030de:	0092      	lsls	r2, r2, #2
 80030e0:	4093      	lsls	r3, r2
 80030e2:	697a      	ldr	r2, [r7, #20]
 80030e4:	4313      	orrs	r3, r2
 80030e6:	617b      	str	r3, [r7, #20]
        AFIO->EXTICR[position >> 2U] = temp;
 80030e8:	4938      	ldr	r1, [pc, #224]	; (80031cc <HAL_GPIO_Init+0x2a4>)
 80030ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030ec:	089b      	lsrs	r3, r3, #2
 80030ee:	3302      	adds	r3, #2
 80030f0:	697a      	ldr	r2, [r7, #20]
 80030f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        

        /* Configure the interrupt mask */
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80030f6:	683b      	ldr	r3, [r7, #0]
 80030f8:	685b      	ldr	r3, [r3, #4]
 80030fa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d006      	beq.n	8003110 <HAL_GPIO_Init+0x1e8>
        {
          SET_BIT(EXTI->IMR, iocurrent); 
 8003102:	4b37      	ldr	r3, [pc, #220]	; (80031e0 <HAL_GPIO_Init+0x2b8>)
 8003104:	681a      	ldr	r2, [r3, #0]
 8003106:	4936      	ldr	r1, [pc, #216]	; (80031e0 <HAL_GPIO_Init+0x2b8>)
 8003108:	69bb      	ldr	r3, [r7, #24]
 800310a:	4313      	orrs	r3, r2
 800310c:	600b      	str	r3, [r1, #0]
 800310e:	e006      	b.n	800311e <HAL_GPIO_Init+0x1f6>
        } 
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent); 
 8003110:	4b33      	ldr	r3, [pc, #204]	; (80031e0 <HAL_GPIO_Init+0x2b8>)
 8003112:	681a      	ldr	r2, [r3, #0]
 8003114:	69bb      	ldr	r3, [r7, #24]
 8003116:	43db      	mvns	r3, r3
 8003118:	4931      	ldr	r1, [pc, #196]	; (80031e0 <HAL_GPIO_Init+0x2b8>)
 800311a:	4013      	ands	r3, r2
 800311c:	600b      	str	r3, [r1, #0]
        } 
        
        /* Configure the event mask */
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800311e:	683b      	ldr	r3, [r7, #0]
 8003120:	685b      	ldr	r3, [r3, #4]
 8003122:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003126:	2b00      	cmp	r3, #0
 8003128:	d006      	beq.n	8003138 <HAL_GPIO_Init+0x210>
        {
          SET_BIT(EXTI->EMR, iocurrent); 
 800312a:	4b2d      	ldr	r3, [pc, #180]	; (80031e0 <HAL_GPIO_Init+0x2b8>)
 800312c:	685a      	ldr	r2, [r3, #4]
 800312e:	492c      	ldr	r1, [pc, #176]	; (80031e0 <HAL_GPIO_Init+0x2b8>)
 8003130:	69bb      	ldr	r3, [r7, #24]
 8003132:	4313      	orrs	r3, r2
 8003134:	604b      	str	r3, [r1, #4]
 8003136:	e006      	b.n	8003146 <HAL_GPIO_Init+0x21e>
        } 
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent); 
 8003138:	4b29      	ldr	r3, [pc, #164]	; (80031e0 <HAL_GPIO_Init+0x2b8>)
 800313a:	685a      	ldr	r2, [r3, #4]
 800313c:	69bb      	ldr	r3, [r7, #24]
 800313e:	43db      	mvns	r3, r3
 8003140:	4927      	ldr	r1, [pc, #156]	; (80031e0 <HAL_GPIO_Init+0x2b8>)
 8003142:	4013      	ands	r3, r2
 8003144:	604b      	str	r3, [r1, #4]
        }
        
        /* Enable or disable the rising trigger */
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003146:	683b      	ldr	r3, [r7, #0]
 8003148:	685b      	ldr	r3, [r3, #4]
 800314a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800314e:	2b00      	cmp	r3, #0
 8003150:	d006      	beq.n	8003160 <HAL_GPIO_Init+0x238>
        {
          SET_BIT(EXTI->RTSR, iocurrent); 
 8003152:	4b23      	ldr	r3, [pc, #140]	; (80031e0 <HAL_GPIO_Init+0x2b8>)
 8003154:	689a      	ldr	r2, [r3, #8]
 8003156:	4922      	ldr	r1, [pc, #136]	; (80031e0 <HAL_GPIO_Init+0x2b8>)
 8003158:	69bb      	ldr	r3, [r7, #24]
 800315a:	4313      	orrs	r3, r2
 800315c:	608b      	str	r3, [r1, #8]
 800315e:	e006      	b.n	800316e <HAL_GPIO_Init+0x246>
        } 
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent); 
 8003160:	4b1f      	ldr	r3, [pc, #124]	; (80031e0 <HAL_GPIO_Init+0x2b8>)
 8003162:	689a      	ldr	r2, [r3, #8]
 8003164:	69bb      	ldr	r3, [r7, #24]
 8003166:	43db      	mvns	r3, r3
 8003168:	491d      	ldr	r1, [pc, #116]	; (80031e0 <HAL_GPIO_Init+0x2b8>)
 800316a:	4013      	ands	r3, r2
 800316c:	608b      	str	r3, [r1, #8]
        }
        
        /* Enable or disable the falling trigger */
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800316e:	683b      	ldr	r3, [r7, #0]
 8003170:	685b      	ldr	r3, [r3, #4]
 8003172:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003176:	2b00      	cmp	r3, #0
 8003178:	d006      	beq.n	8003188 <HAL_GPIO_Init+0x260>
        {
          SET_BIT(EXTI->FTSR, iocurrent); 
 800317a:	4b19      	ldr	r3, [pc, #100]	; (80031e0 <HAL_GPIO_Init+0x2b8>)
 800317c:	68da      	ldr	r2, [r3, #12]
 800317e:	4918      	ldr	r1, [pc, #96]	; (80031e0 <HAL_GPIO_Init+0x2b8>)
 8003180:	69bb      	ldr	r3, [r7, #24]
 8003182:	4313      	orrs	r3, r2
 8003184:	60cb      	str	r3, [r1, #12]
 8003186:	e006      	b.n	8003196 <HAL_GPIO_Init+0x26e>
        } 
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent); 
 8003188:	4b15      	ldr	r3, [pc, #84]	; (80031e0 <HAL_GPIO_Init+0x2b8>)
 800318a:	68da      	ldr	r2, [r3, #12]
 800318c:	69bb      	ldr	r3, [r7, #24]
 800318e:	43db      	mvns	r3, r3
 8003190:	4913      	ldr	r1, [pc, #76]	; (80031e0 <HAL_GPIO_Init+0x2b8>)
 8003192:	4013      	ands	r3, r2
 8003194:	60cb      	str	r3, [r1, #12]
  for (position = 0U; position < GPIO_NUMBER; position++)
 8003196:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003198:	3301      	adds	r3, #1
 800319a:	627b      	str	r3, [r7, #36]	; 0x24
 800319c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800319e:	2b0f      	cmp	r3, #15
 80031a0:	f67f aed4 	bls.w	8002f4c <HAL_GPIO_Init+0x24>
        }
      }
    }
  }
}
 80031a4:	bf00      	nop
 80031a6:	372c      	adds	r7, #44	; 0x2c
 80031a8:	46bd      	mov	sp, r7
 80031aa:	bc80      	pop	{r7}
 80031ac:	4770      	bx	lr
 80031ae:	bf00      	nop
 80031b0:	10210000 	.word	0x10210000
 80031b4:	10110000 	.word	0x10110000
 80031b8:	10120000 	.word	0x10120000
 80031bc:	10310000 	.word	0x10310000
 80031c0:	10320000 	.word	0x10320000
 80031c4:	10220000 	.word	0x10220000
 80031c8:	40021000 	.word	0x40021000
 80031cc:	40010000 	.word	0x40010000
 80031d0:	40010800 	.word	0x40010800
 80031d4:	40010c00 	.word	0x40010c00
 80031d8:	40011000 	.word	0x40011000
 80031dc:	40011400 	.word	0x40011400
 80031e0:	40010400 	.word	0x40010400

080031e4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80031e4:	b480      	push	{r7}
 80031e6:	b085      	sub	sp, #20
 80031e8:	af00      	add	r7, sp, #0
 80031ea:	6078      	str	r0, [r7, #4]
 80031ec:	460b      	mov	r3, r1
 80031ee:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	689a      	ldr	r2, [r3, #8]
 80031f4:	887b      	ldrh	r3, [r7, #2]
 80031f6:	4013      	ands	r3, r2
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d002      	beq.n	8003202 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80031fc:	2301      	movs	r3, #1
 80031fe:	73fb      	strb	r3, [r7, #15]
 8003200:	e001      	b.n	8003206 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003202:	2300      	movs	r3, #0
 8003204:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003206:	7bfb      	ldrb	r3, [r7, #15]
}
 8003208:	4618      	mov	r0, r3
 800320a:	3714      	adds	r7, #20
 800320c:	46bd      	mov	sp, r7
 800320e:	bc80      	pop	{r7}
 8003210:	4770      	bx	lr

08003212 <HAL_GPIO_WritePin>:
  *            @arg GPIO_BIT_RESET: to clear the port pin
  *            @arg GPIO_BIT_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003212:	b480      	push	{r7}
 8003214:	b083      	sub	sp, #12
 8003216:	af00      	add	r7, sp, #0
 8003218:	6078      	str	r0, [r7, #4]
 800321a:	460b      	mov	r3, r1
 800321c:	807b      	strh	r3, [r7, #2]
 800321e:	4613      	mov	r3, r2
 8003220:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003222:	787b      	ldrb	r3, [r7, #1]
 8003224:	2b00      	cmp	r3, #0
 8003226:	d003      	beq.n	8003230 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003228:	887a      	ldrh	r2, [r7, #2]
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800322e:	e003      	b.n	8003238 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003230:	887b      	ldrh	r3, [r7, #2]
 8003232:	041a      	lsls	r2, r3, #16
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	611a      	str	r2, [r3, #16]
}
 8003238:	bf00      	nop
 800323a:	370c      	adds	r7, #12
 800323c:	46bd      	mov	sp, r7
 800323e:	bc80      	pop	{r7}
 8003240:	4770      	bx	lr

08003242 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral 
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003242:	b480      	push	{r7}
 8003244:	b083      	sub	sp, #12
 8003246:	af00      	add	r7, sp, #0
 8003248:	6078      	str	r0, [r7, #4]
 800324a:	460b      	mov	r3, r1
 800324c:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->ODR ^= GPIO_Pin;
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	68da      	ldr	r2, [r3, #12]
 8003252:	887b      	ldrh	r3, [r7, #2]
 8003254:	405a      	eors	r2, r3
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	60da      	str	r2, [r3, #12]
}
 800325a:	bf00      	nop
 800325c:	370c      	adds	r7, #12
 800325e:	46bd      	mov	sp, r7
 8003260:	bc80      	pop	{r7}
 8003262:	4770      	bx	lr

08003264 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003264:	b580      	push	{r7, lr}
 8003266:	b082      	sub	sp, #8
 8003268:	af00      	add	r7, sp, #0
 800326a:	4603      	mov	r3, r0
 800326c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800326e:	4b08      	ldr	r3, [pc, #32]	; (8003290 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003270:	695a      	ldr	r2, [r3, #20]
 8003272:	88fb      	ldrh	r3, [r7, #6]
 8003274:	4013      	ands	r3, r2
 8003276:	2b00      	cmp	r3, #0
 8003278:	d006      	beq.n	8003288 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800327a:	4a05      	ldr	r2, [pc, #20]	; (8003290 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800327c:	88fb      	ldrh	r3, [r7, #6]
 800327e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003280:	88fb      	ldrh	r3, [r7, #6]
 8003282:	4618      	mov	r0, r3
 8003284:	f7fe f882 	bl	800138c <HAL_GPIO_EXTI_Callback>
  }
}
 8003288:	bf00      	nop
 800328a:	3708      	adds	r7, #8
 800328c:	46bd      	mov	sp, r7
 800328e:	bd80      	pop	{r7, pc}
 8003290:	40010400 	.word	0x40010400

08003294 <HAL_I2C_Init>:
  * @param  hi2c: pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003294:	b580      	push	{r7, lr}
 8003296:	b084      	sub	sp, #16
 8003298:	af00      	add	r7, sp, #0
 800329a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange = 0U;
 800329c:	2300      	movs	r3, #0
 800329e:	60fb      	str	r3, [r7, #12]
  uint32_t pclk1 = 0U;
 80032a0:	2300      	movs	r3, #0
 80032a2:	60bb      	str	r3, [r7, #8]

  /* Check the I2C handle allocation */
  if(hi2c == NULL)
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d101      	bne.n	80032ae <HAL_I2C_Init+0x1a>
  {
    return HAL_ERROR;
 80032aa:	2301      	movs	r3, #1
 80032ac:	e0c8      	b.n	8003440 <HAL_I2C_Init+0x1ac>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if(hi2c->State == HAL_I2C_STATE_RESET)
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80032b4:	b2db      	uxtb	r3, r3
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d106      	bne.n	80032c8 <HAL_I2C_Init+0x34>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	2200      	movs	r2, #0
 80032be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80032c2:	6878      	ldr	r0, [r7, #4]
 80032c4:	f7fd fdc6 	bl	8000e54 <HAL_I2C_MspInit>
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	2224      	movs	r2, #36	; 0x24
 80032cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	681a      	ldr	r2, [r3, #0]
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	f022 0201 	bic.w	r2, r2, #1
 80032de:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80032e0:	f000 ff7a 	bl	80041d8 <HAL_RCC_GetPCLK1Freq>
 80032e4:	60b8      	str	r0, [r7, #8]

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80032e6:	68bb      	ldr	r3, [r7, #8]
 80032e8:	4a57      	ldr	r2, [pc, #348]	; (8003448 <HAL_I2C_Init+0x1b4>)
 80032ea:	fba2 2303 	umull	r2, r3, r2, r3
 80032ee:	0c9b      	lsrs	r3, r3, #18
 80032f0:	60fb      	str	r3, [r7, #12]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->CR2 = freqrange;
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	68fa      	ldr	r2, [r7, #12]
 80032f8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	685b      	ldr	r3, [r3, #4]
 80032fe:	4a53      	ldr	r2, [pc, #332]	; (800344c <HAL_I2C_Init+0x1b8>)
 8003300:	4293      	cmp	r3, r2
 8003302:	d802      	bhi.n	800330a <HAL_I2C_Init+0x76>
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	3301      	adds	r3, #1
 8003308:	e009      	b.n	800331e <HAL_I2C_Init+0x8a>
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003310:	fb02 f303 	mul.w	r3, r2, r3
 8003314:	4a4e      	ldr	r2, [pc, #312]	; (8003450 <HAL_I2C_Init+0x1bc>)
 8003316:	fba2 2303 	umull	r2, r3, r2, r3
 800331a:	099b      	lsrs	r3, r3, #6
 800331c:	3301      	adds	r3, #1
 800331e:	687a      	ldr	r2, [r7, #4]
 8003320:	6812      	ldr	r2, [r2, #0]
 8003322:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  hi2c->Instance->CCR = I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle);
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	685b      	ldr	r3, [r3, #4]
 8003328:	4a48      	ldr	r2, [pc, #288]	; (800344c <HAL_I2C_Init+0x1b8>)
 800332a:	4293      	cmp	r3, r2
 800332c:	d812      	bhi.n	8003354 <HAL_I2C_Init+0xc0>
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	685b      	ldr	r3, [r3, #4]
 8003332:	005b      	lsls	r3, r3, #1
 8003334:	68ba      	ldr	r2, [r7, #8]
 8003336:	fbb2 f3f3 	udiv	r3, r2, r3
 800333a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800333e:	2b03      	cmp	r3, #3
 8003340:	d906      	bls.n	8003350 <HAL_I2C_Init+0xbc>
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	685b      	ldr	r3, [r3, #4]
 8003346:	005b      	lsls	r3, r3, #1
 8003348:	68ba      	ldr	r2, [r7, #8]
 800334a:	fbb2 f3f3 	udiv	r3, r2, r3
 800334e:	e045      	b.n	80033dc <HAL_I2C_Init+0x148>
 8003350:	2304      	movs	r3, #4
 8003352:	e043      	b.n	80033dc <HAL_I2C_Init+0x148>
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	689b      	ldr	r3, [r3, #8]
 8003358:	2b00      	cmp	r3, #0
 800335a:	d10f      	bne.n	800337c <HAL_I2C_Init+0xe8>
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	685a      	ldr	r2, [r3, #4]
 8003360:	4613      	mov	r3, r2
 8003362:	005b      	lsls	r3, r3, #1
 8003364:	4413      	add	r3, r2
 8003366:	68ba      	ldr	r2, [r7, #8]
 8003368:	fbb2 f3f3 	udiv	r3, r2, r3
 800336c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003370:	2b00      	cmp	r3, #0
 8003372:	bf0c      	ite	eq
 8003374:	2301      	moveq	r3, #1
 8003376:	2300      	movne	r3, #0
 8003378:	b2db      	uxtb	r3, r3
 800337a:	e010      	b.n	800339e <HAL_I2C_Init+0x10a>
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	685a      	ldr	r2, [r3, #4]
 8003380:	4613      	mov	r3, r2
 8003382:	009b      	lsls	r3, r3, #2
 8003384:	4413      	add	r3, r2
 8003386:	009a      	lsls	r2, r3, #2
 8003388:	4413      	add	r3, r2
 800338a:	68ba      	ldr	r2, [r7, #8]
 800338c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003390:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003394:	2b00      	cmp	r3, #0
 8003396:	bf0c      	ite	eq
 8003398:	2301      	moveq	r3, #1
 800339a:	2300      	movne	r3, #0
 800339c:	b2db      	uxtb	r3, r3
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d001      	beq.n	80033a6 <HAL_I2C_Init+0x112>
 80033a2:	2301      	movs	r3, #1
 80033a4:	e01a      	b.n	80033dc <HAL_I2C_Init+0x148>
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	689b      	ldr	r3, [r3, #8]
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d10a      	bne.n	80033c4 <HAL_I2C_Init+0x130>
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	685a      	ldr	r2, [r3, #4]
 80033b2:	4613      	mov	r3, r2
 80033b4:	005b      	lsls	r3, r3, #1
 80033b6:	4413      	add	r3, r2
 80033b8:	68ba      	ldr	r2, [r7, #8]
 80033ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80033be:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80033c2:	e00b      	b.n	80033dc <HAL_I2C_Init+0x148>
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	685a      	ldr	r2, [r3, #4]
 80033c8:	4613      	mov	r3, r2
 80033ca:	009b      	lsls	r3, r3, #2
 80033cc:	4413      	add	r3, r2
 80033ce:	009a      	lsls	r2, r3, #2
 80033d0:	4413      	add	r3, r2
 80033d2:	68ba      	ldr	r2, [r7, #8]
 80033d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80033d8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80033dc:	687a      	ldr	r2, [r7, #4]
 80033de:	6812      	ldr	r2, [r2, #0]
 80033e0:	61d3      	str	r3, [r2, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	69d9      	ldr	r1, [r3, #28]
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	6a1a      	ldr	r2, [r3, #32]
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	430a      	orrs	r2, r1
 80033f0:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  hi2c->Instance->OAR1 = (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1);
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	6919      	ldr	r1, [r3, #16]
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	68da      	ldr	r2, [r3, #12]
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	430a      	orrs	r2, r1
 8003400:	609a      	str	r2, [r3, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2);
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	6959      	ldr	r1, [r3, #20]
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	699a      	ldr	r2, [r3, #24]
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	430a      	orrs	r2, r1
 8003410:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	681a      	ldr	r2, [r3, #0]
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	f042 0201 	orr.w	r2, r2, #1
 8003420:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	2200      	movs	r2, #0
 8003426:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	2220      	movs	r2, #32
 800342c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	2200      	movs	r2, #0
 8003434:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	2200      	movs	r2, #0
 800343a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800343e:	2300      	movs	r3, #0
}
 8003440:	4618      	mov	r0, r3
 8003442:	3710      	adds	r7, #16
 8003444:	46bd      	mov	sp, r7
 8003446:	bd80      	pop	{r7, pc}
 8003448:	431bde83 	.word	0x431bde83
 800344c:	000186a0 	.word	0x000186a0
 8003450:	10624dd3 	.word	0x10624dd3

08003454 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003454:	b580      	push	{r7, lr}
 8003456:	b088      	sub	sp, #32
 8003458:	af02      	add	r7, sp, #8
 800345a:	60f8      	str	r0, [r7, #12]
 800345c:	4608      	mov	r0, r1
 800345e:	4611      	mov	r1, r2
 8003460:	461a      	mov	r2, r3
 8003462:	4603      	mov	r3, r0
 8003464:	817b      	strh	r3, [r7, #10]
 8003466:	460b      	mov	r3, r1
 8003468:	813b      	strh	r3, [r7, #8]
 800346a:	4613      	mov	r3, r2
 800346c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart = 0x00U;
 800346e:	2300      	movs	r3, #0
 8003470:	617b      	str	r3, [r7, #20]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003472:	f7fe fe49 	bl	8002108 <HAL_GetTick>
 8003476:	6178      	str	r0, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if(hi2c->State == HAL_I2C_STATE_READY)
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800347e:	b2db      	uxtb	r3, r3
 8003480:	2b20      	cmp	r3, #32
 8003482:	f040 80e7 	bne.w	8003654 <HAL_I2C_Mem_Write+0x200>
  {
    /* Wait until BUSY flag is reset */
    if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003486:	697b      	ldr	r3, [r7, #20]
 8003488:	9300      	str	r3, [sp, #0]
 800348a:	2319      	movs	r3, #25
 800348c:	2201      	movs	r2, #1
 800348e:	4974      	ldr	r1, [pc, #464]	; (8003660 <HAL_I2C_Mem_Write+0x20c>)
 8003490:	68f8      	ldr	r0, [r7, #12]
 8003492:	f000 f97d 	bl	8003790 <I2C_WaitOnFlagUntilTimeout>
 8003496:	4603      	mov	r3, r0
 8003498:	2b00      	cmp	r3, #0
 800349a:	d001      	beq.n	80034a0 <HAL_I2C_Mem_Write+0x4c>
    {
      return HAL_BUSY;
 800349c:	2302      	movs	r3, #2
 800349e:	e0da      	b.n	8003656 <HAL_I2C_Mem_Write+0x202>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80034a6:	2b01      	cmp	r3, #1
 80034a8:	d101      	bne.n	80034ae <HAL_I2C_Mem_Write+0x5a>
 80034aa:	2302      	movs	r3, #2
 80034ac:	e0d3      	b.n	8003656 <HAL_I2C_Mem_Write+0x202>
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	2201      	movs	r2, #1
 80034b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Check if the I2C is already enabled */
    if((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	f003 0301 	and.w	r3, r3, #1
 80034c0:	2b01      	cmp	r3, #1
 80034c2:	d007      	beq.n	80034d4 <HAL_I2C_Mem_Write+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	681a      	ldr	r2, [r3, #0]
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	f042 0201 	orr.w	r2, r2, #1
 80034d2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	681a      	ldr	r2, [r3, #0]
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80034e2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	2221      	movs	r2, #33	; 0x21
 80034e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	2240      	movs	r2, #64	; 0x40
 80034f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	2200      	movs	r2, #0
 80034f8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	6a3a      	ldr	r2, [r7, #32]
 80034fe:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003504:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	4a56      	ldr	r2, [pc, #344]	; (8003664 <HAL_I2C_Mem_Write+0x210>)
 800350a:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferSize    = hi2c->XferCount;
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003510:	b29a      	uxth	r2, r3
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	851a      	strh	r2, [r3, #40]	; 0x28
    
    /* Send Slave Address and Memory Address */
    if(I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003516:	88f8      	ldrh	r0, [r7, #6]
 8003518:	893a      	ldrh	r2, [r7, #8]
 800351a:	8979      	ldrh	r1, [r7, #10]
 800351c:	697b      	ldr	r3, [r7, #20]
 800351e:	9301      	str	r3, [sp, #4]
 8003520:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003522:	9300      	str	r3, [sp, #0]
 8003524:	4603      	mov	r3, r0
 8003526:	68f8      	ldr	r0, [r7, #12]
 8003528:	f000 f89e 	bl	8003668 <I2C_RequestMemoryWrite>
 800352c:	4603      	mov	r3, r0
 800352e:	2b00      	cmp	r3, #0
 8003530:	d05e      	beq.n	80035f0 <HAL_I2C_Mem_Write+0x19c>
    {
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003536:	2b04      	cmp	r3, #4
 8003538:	d105      	bne.n	8003546 <HAL_I2C_Mem_Write+0xf2>
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	2200      	movs	r2, #0
 800353e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        return HAL_ERROR;
 8003542:	2301      	movs	r3, #1
 8003544:	e087      	b.n	8003656 <HAL_I2C_Mem_Write+0x202>
      }
      else
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	2200      	movs	r2, #0
 800354a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        return HAL_TIMEOUT;
 800354e:	2303      	movs	r3, #3
 8003550:	e081      	b.n	8003656 <HAL_I2C_Mem_Write+0x202>
    }

    while(hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003552:	697a      	ldr	r2, [r7, #20]
 8003554:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003556:	68f8      	ldr	r0, [r7, #12]
 8003558:	f000 f9d9 	bl	800390e <I2C_WaitOnTXEFlagUntilTimeout>
 800355c:	4603      	mov	r3, r0
 800355e:	2b00      	cmp	r3, #0
 8003560:	d00f      	beq.n	8003582 <HAL_I2C_Mem_Write+0x12e>
      {
        if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003566:	2b04      	cmp	r3, #4
 8003568:	d109      	bne.n	800357e <HAL_I2C_Mem_Write+0x12a>
        {
          /* Generate Stop */
          hi2c->Instance->CR1 |= I2C_CR1_STOP;
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	681a      	ldr	r2, [r3, #0]
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003578:	601a      	str	r2, [r3, #0]
          return HAL_ERROR;
 800357a:	2301      	movs	r3, #1
 800357c:	e06b      	b.n	8003656 <HAL_I2C_Mem_Write+0x202>
        }
        else
        {
          return HAL_TIMEOUT;
 800357e:	2303      	movs	r3, #3
 8003580:	e069      	b.n	8003656 <HAL_I2C_Mem_Write+0x202>
        }
      }

      /* Write data to DR */
      hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003586:	1c59      	adds	r1, r3, #1
 8003588:	68fa      	ldr	r2, [r7, #12]
 800358a:	6251      	str	r1, [r2, #36]	; 0x24
 800358c:	781a      	ldrb	r2, [r3, #0]
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	611a      	str	r2, [r3, #16]
      hi2c->XferSize--;
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003598:	3b01      	subs	r3, #1
 800359a:	b29a      	uxth	r2, r3
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035a4:	b29b      	uxth	r3, r3
 80035a6:	3b01      	subs	r3, #1
 80035a8:	b29a      	uxth	r2, r3
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	855a      	strh	r2, [r3, #42]	; 0x2a

      if((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	695b      	ldr	r3, [r3, #20]
 80035b4:	f003 0304 	and.w	r3, r3, #4
 80035b8:	2b04      	cmp	r3, #4
 80035ba:	d119      	bne.n	80035f0 <HAL_I2C_Mem_Write+0x19c>
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d015      	beq.n	80035f0 <HAL_I2C_Mem_Write+0x19c>
      {
        /* Write data to DR */
        hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035c8:	1c59      	adds	r1, r3, #1
 80035ca:	68fa      	ldr	r2, [r7, #12]
 80035cc:	6251      	str	r1, [r2, #36]	; 0x24
 80035ce:	781a      	ldrb	r2, [r3, #0]
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	611a      	str	r2, [r3, #16]
        hi2c->XferSize--;
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80035da:	3b01      	subs	r3, #1
 80035dc:	b29a      	uxth	r2, r3
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035e6:	b29b      	uxth	r3, r3
 80035e8:	3b01      	subs	r3, #1
 80035ea:	b29a      	uxth	r2, r3
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	855a      	strh	r2, [r3, #42]	; 0x2a
    while(hi2c->XferSize > 0U)
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d1ac      	bne.n	8003552 <HAL_I2C_Mem_Write+0xfe>
      }
    }
    
    /* Wait until BTF flag is set */
    if(I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80035f8:	697a      	ldr	r2, [r7, #20]
 80035fa:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80035fc:	68f8      	ldr	r0, [r7, #12]
 80035fe:	f000 f9c3 	bl	8003988 <I2C_WaitOnBTFFlagUntilTimeout>
 8003602:	4603      	mov	r3, r0
 8003604:	2b00      	cmp	r3, #0
 8003606:	d00f      	beq.n	8003628 <HAL_I2C_Mem_Write+0x1d4>
    {
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800360c:	2b04      	cmp	r3, #4
 800360e:	d109      	bne.n	8003624 <HAL_I2C_Mem_Write+0x1d0>
      {
        /* Generate Stop */
        hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	681a      	ldr	r2, [r3, #0]
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800361e:	601a      	str	r2, [r3, #0]
        return HAL_ERROR;
 8003620:	2301      	movs	r3, #1
 8003622:	e018      	b.n	8003656 <HAL_I2C_Mem_Write+0x202>
      }
      else
      {
        return HAL_TIMEOUT;
 8003624:	2303      	movs	r3, #3
 8003626:	e016      	b.n	8003656 <HAL_I2C_Mem_Write+0x202>
      }
    }

    /* Generate Stop */
    hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	681a      	ldr	r2, [r3, #0]
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003636:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	2220      	movs	r2, #32
 800363c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	2200      	movs	r2, #0
 8003644:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    
    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	2200      	movs	r2, #0
 800364c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003650:	2300      	movs	r3, #0
 8003652:	e000      	b.n	8003656 <HAL_I2C_Mem_Write+0x202>
  }
  else
  {
    return HAL_BUSY;
 8003654:	2302      	movs	r3, #2
  }
}
 8003656:	4618      	mov	r0, r3
 8003658:	3718      	adds	r7, #24
 800365a:	46bd      	mov	sp, r7
 800365c:	bd80      	pop	{r7, pc}
 800365e:	bf00      	nop
 8003660:	00100002 	.word	0x00100002
 8003664:	ffff0000 	.word	0xffff0000

08003668 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003668:	b580      	push	{r7, lr}
 800366a:	b088      	sub	sp, #32
 800366c:	af02      	add	r7, sp, #8
 800366e:	60f8      	str	r0, [r7, #12]
 8003670:	4608      	mov	r0, r1
 8003672:	4611      	mov	r1, r2
 8003674:	461a      	mov	r2, r3
 8003676:	4603      	mov	r3, r0
 8003678:	817b      	strh	r3, [r7, #10]
 800367a:	460b      	mov	r3, r1
 800367c:	813b      	strh	r3, [r7, #8]
 800367e:	4613      	mov	r3, r2
 8003680:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  hi2c->Instance->CR1 |= I2C_CR1_START;
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	681a      	ldr	r2, [r3, #0]
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003690:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003692:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003694:	9300      	str	r3, [sp, #0]
 8003696:	6a3b      	ldr	r3, [r7, #32]
 8003698:	2200      	movs	r2, #0
 800369a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800369e:	68f8      	ldr	r0, [r7, #12]
 80036a0:	f000 f876 	bl	8003790 <I2C_WaitOnFlagUntilTimeout>
 80036a4:	4603      	mov	r3, r0
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d001      	beq.n	80036ae <I2C_RequestMemoryWrite+0x46>
  {
    return HAL_TIMEOUT;
 80036aa:	2303      	movs	r3, #3
 80036ac:	e069      	b.n	8003782 <I2C_RequestMemoryWrite+0x11a>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80036ae:	897b      	ldrh	r3, [r7, #10]
 80036b0:	b2db      	uxtb	r3, r3
 80036b2:	461a      	mov	r2, r3
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80036bc:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80036be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036c0:	6a3a      	ldr	r2, [r7, #32]
 80036c2:	4932      	ldr	r1, [pc, #200]	; (800378c <I2C_RequestMemoryWrite+0x124>)
 80036c4:	68f8      	ldr	r0, [r7, #12]
 80036c6:	f000 f8b4 	bl	8003832 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80036ca:	4603      	mov	r3, r0
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d007      	beq.n	80036e0 <I2C_RequestMemoryWrite+0x78>
  {
    if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036d4:	2b04      	cmp	r3, #4
 80036d6:	d101      	bne.n	80036dc <I2C_RequestMemoryWrite+0x74>
    {
      return HAL_ERROR;
 80036d8:	2301      	movs	r3, #1
 80036da:	e052      	b.n	8003782 <I2C_RequestMemoryWrite+0x11a>
    }
    else
    {
      return HAL_TIMEOUT;
 80036dc:	2303      	movs	r3, #3
 80036de:	e050      	b.n	8003782 <I2C_RequestMemoryWrite+0x11a>
    }
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80036e0:	2300      	movs	r3, #0
 80036e2:	617b      	str	r3, [r7, #20]
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	695b      	ldr	r3, [r3, #20]
 80036ea:	617b      	str	r3, [r7, #20]
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	699b      	ldr	r3, [r3, #24]
 80036f2:	617b      	str	r3, [r7, #20]
 80036f4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80036f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80036f8:	6a39      	ldr	r1, [r7, #32]
 80036fa:	68f8      	ldr	r0, [r7, #12]
 80036fc:	f000 f907 	bl	800390e <I2C_WaitOnTXEFlagUntilTimeout>
 8003700:	4603      	mov	r3, r0
 8003702:	2b00      	cmp	r3, #0
 8003704:	d00f      	beq.n	8003726 <I2C_RequestMemoryWrite+0xbe>
  {
    if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800370a:	2b04      	cmp	r3, #4
 800370c:	d109      	bne.n	8003722 <I2C_RequestMemoryWrite+0xba>
    {
      /* Generate Stop */
      hi2c->Instance->CR1 |= I2C_CR1_STOP;
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	681a      	ldr	r2, [r3, #0]
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800371c:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
 800371e:	2301      	movs	r3, #1
 8003720:	e02f      	b.n	8003782 <I2C_RequestMemoryWrite+0x11a>
    }
    else
    {
      return HAL_TIMEOUT;
 8003722:	2303      	movs	r3, #3
 8003724:	e02d      	b.n	8003782 <I2C_RequestMemoryWrite+0x11a>
    }
  }

  /* If Memory address size is 8Bit */
  if(MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003726:	88fb      	ldrh	r3, [r7, #6]
 8003728:	2b01      	cmp	r3, #1
 800372a:	d105      	bne.n	8003738 <I2C_RequestMemoryWrite+0xd0>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800372c:	893b      	ldrh	r3, [r7, #8]
 800372e:	b2da      	uxtb	r2, r3
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	611a      	str	r2, [r3, #16]
 8003736:	e023      	b.n	8003780 <I2C_RequestMemoryWrite+0x118>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003738:	893b      	ldrh	r3, [r7, #8]
 800373a:	0a1b      	lsrs	r3, r3, #8
 800373c:	b29b      	uxth	r3, r3
 800373e:	b2da      	uxtb	r2, r3
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003746:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003748:	6a39      	ldr	r1, [r7, #32]
 800374a:	68f8      	ldr	r0, [r7, #12]
 800374c:	f000 f8df 	bl	800390e <I2C_WaitOnTXEFlagUntilTimeout>
 8003750:	4603      	mov	r3, r0
 8003752:	2b00      	cmp	r3, #0
 8003754:	d00f      	beq.n	8003776 <I2C_RequestMemoryWrite+0x10e>
    {
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800375a:	2b04      	cmp	r3, #4
 800375c:	d109      	bne.n	8003772 <I2C_RequestMemoryWrite+0x10a>
      {
        /* Generate Stop */
        hi2c->Instance->CR1 |= I2C_CR1_STOP;
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	681a      	ldr	r2, [r3, #0]
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800376c:	601a      	str	r2, [r3, #0]
        return HAL_ERROR;
 800376e:	2301      	movs	r3, #1
 8003770:	e007      	b.n	8003782 <I2C_RequestMemoryWrite+0x11a>
      }
      else
      {
        return HAL_TIMEOUT;
 8003772:	2303      	movs	r3, #3
 8003774:	e005      	b.n	8003782 <I2C_RequestMemoryWrite+0x11a>
      }
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003776:	893b      	ldrh	r3, [r7, #8]
 8003778:	b2da      	uxtb	r2, r3
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8003780:	2300      	movs	r3, #0
}
 8003782:	4618      	mov	r0, r3
 8003784:	3718      	adds	r7, #24
 8003786:	46bd      	mov	sp, r7
 8003788:	bd80      	pop	{r7, pc}
 800378a:	bf00      	nop
 800378c:	00010002 	.word	0x00010002

08003790 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003790:	b580      	push	{r7, lr}
 8003792:	b084      	sub	sp, #16
 8003794:	af00      	add	r7, sp, #0
 8003796:	60f8      	str	r0, [r7, #12]
 8003798:	60b9      	str	r1, [r7, #8]
 800379a:	603b      	str	r3, [r7, #0]
 800379c:	4613      	mov	r3, r2
 800379e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while((__HAL_I2C_GET_FLAG(hi2c, Flag) ? SET : RESET) == Status) 
 80037a0:	e01f      	b.n	80037e2 <I2C_WaitOnFlagUntilTimeout+0x52>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 80037a2:	683b      	ldr	r3, [r7, #0]
 80037a4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80037a8:	d01b      	beq.n	80037e2 <I2C_WaitOnFlagUntilTimeout+0x52>
    {
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 80037aa:	683b      	ldr	r3, [r7, #0]
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d007      	beq.n	80037c0 <I2C_WaitOnFlagUntilTimeout+0x30>
 80037b0:	f7fe fcaa 	bl	8002108 <HAL_GetTick>
 80037b4:	4602      	mov	r2, r0
 80037b6:	69bb      	ldr	r3, [r7, #24]
 80037b8:	1ad3      	subs	r3, r2, r3
 80037ba:	683a      	ldr	r2, [r7, #0]
 80037bc:	429a      	cmp	r2, r3
 80037be:	d210      	bcs.n	80037e2 <I2C_WaitOnFlagUntilTimeout+0x52>
      {
        hi2c->PreviousState = I2C_STATE_NONE;
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	2200      	movs	r2, #0
 80037c4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State= HAL_I2C_STATE_READY;
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	2220      	movs	r2, #32
 80037ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	2200      	movs	r2, #0
 80037d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	2200      	movs	r2, #0
 80037da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_TIMEOUT;
 80037de:	2303      	movs	r3, #3
 80037e0:	e023      	b.n	800382a <I2C_WaitOnFlagUntilTimeout+0x9a>
  while((__HAL_I2C_GET_FLAG(hi2c, Flag) ? SET : RESET) == Status) 
 80037e2:	68bb      	ldr	r3, [r7, #8]
 80037e4:	0c1b      	lsrs	r3, r3, #16
 80037e6:	b2db      	uxtb	r3, r3
 80037e8:	2b01      	cmp	r3, #1
 80037ea:	d10d      	bne.n	8003808 <I2C_WaitOnFlagUntilTimeout+0x78>
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	695b      	ldr	r3, [r3, #20]
 80037f2:	43da      	mvns	r2, r3
 80037f4:	68bb      	ldr	r3, [r7, #8]
 80037f6:	4013      	ands	r3, r2
 80037f8:	b29b      	uxth	r3, r3
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	bf0c      	ite	eq
 80037fe:	2301      	moveq	r3, #1
 8003800:	2300      	movne	r3, #0
 8003802:	b2db      	uxtb	r3, r3
 8003804:	461a      	mov	r2, r3
 8003806:	e00c      	b.n	8003822 <I2C_WaitOnFlagUntilTimeout+0x92>
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	699b      	ldr	r3, [r3, #24]
 800380e:	43da      	mvns	r2, r3
 8003810:	68bb      	ldr	r3, [r7, #8]
 8003812:	4013      	ands	r3, r2
 8003814:	b29b      	uxth	r3, r3
 8003816:	2b00      	cmp	r3, #0
 8003818:	bf0c      	ite	eq
 800381a:	2301      	moveq	r3, #1
 800381c:	2300      	movne	r3, #0
 800381e:	b2db      	uxtb	r3, r3
 8003820:	461a      	mov	r2, r3
 8003822:	79fb      	ldrb	r3, [r7, #7]
 8003824:	429a      	cmp	r2, r3
 8003826:	d0bc      	beq.n	80037a2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  
  return HAL_OK;
 8003828:	2300      	movs	r3, #0
}
 800382a:	4618      	mov	r0, r3
 800382c:	3710      	adds	r7, #16
 800382e:	46bd      	mov	sp, r7
 8003830:	bd80      	pop	{r7, pc}

08003832 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003832:	b580      	push	{r7, lr}
 8003834:	b084      	sub	sp, #16
 8003836:	af00      	add	r7, sp, #0
 8003838:	60f8      	str	r0, [r7, #12]
 800383a:	60b9      	str	r1, [r7, #8]
 800383c:	607a      	str	r2, [r7, #4]
 800383e:	603b      	str	r3, [r7, #0]
  while(__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003840:	e040      	b.n	80038c4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x92>
  {
    if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	695b      	ldr	r3, [r3, #20]
 8003848:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800384c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003850:	d11c      	bne.n	800388c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x5a>
    {
      /* Generate Stop */
      hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	681a      	ldr	r2, [r3, #0]
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003860:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800386a:	615a      	str	r2, [r3, #20]

      hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	2204      	movs	r2, #4
 8003870:	641a      	str	r2, [r3, #64]	; 0x40
      hi2c->PreviousState = I2C_STATE_NONE;
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	2200      	movs	r2, #0
 8003876:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State= HAL_I2C_STATE_READY;
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	2220      	movs	r2, #32
 800387c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	2200      	movs	r2, #0
 8003884:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003888:	2301      	movs	r3, #1
 800388a:	e03c      	b.n	8003906 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd4>
    }

    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003892:	d017      	beq.n	80038c4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x92>
    {
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	2b00      	cmp	r3, #0
 8003898:	d007      	beq.n	80038aa <I2C_WaitOnMasterAddressFlagUntilTimeout+0x78>
 800389a:	f7fe fc35 	bl	8002108 <HAL_GetTick>
 800389e:	4602      	mov	r2, r0
 80038a0:	683b      	ldr	r3, [r7, #0]
 80038a2:	1ad3      	subs	r3, r2, r3
 80038a4:	687a      	ldr	r2, [r7, #4]
 80038a6:	429a      	cmp	r2, r3
 80038a8:	d20c      	bcs.n	80038c4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x92>
      {
        hi2c->PreviousState = I2C_STATE_NONE;
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	2200      	movs	r2, #0
 80038ae:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State= HAL_I2C_STATE_READY;
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	2220      	movs	r2, #32
 80038b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	2200      	movs	r2, #0
 80038bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80038c0:	2303      	movs	r3, #3
 80038c2:	e020      	b.n	8003906 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd4>
  while(__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80038c4:	68bb      	ldr	r3, [r7, #8]
 80038c6:	0c1b      	lsrs	r3, r3, #16
 80038c8:	b2db      	uxtb	r3, r3
 80038ca:	2b01      	cmp	r3, #1
 80038cc:	d10c      	bne.n	80038e8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb6>
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	695b      	ldr	r3, [r3, #20]
 80038d4:	43da      	mvns	r2, r3
 80038d6:	68bb      	ldr	r3, [r7, #8]
 80038d8:	4013      	ands	r3, r2
 80038da:	b29b      	uxth	r3, r3
 80038dc:	2b00      	cmp	r3, #0
 80038de:	bf14      	ite	ne
 80038e0:	2301      	movne	r3, #1
 80038e2:	2300      	moveq	r3, #0
 80038e4:	b2db      	uxtb	r3, r3
 80038e6:	e00b      	b.n	8003900 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xce>
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	699b      	ldr	r3, [r3, #24]
 80038ee:	43da      	mvns	r2, r3
 80038f0:	68bb      	ldr	r3, [r7, #8]
 80038f2:	4013      	ands	r3, r2
 80038f4:	b29b      	uxth	r3, r3
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	bf14      	ite	ne
 80038fa:	2301      	movne	r3, #1
 80038fc:	2300      	moveq	r3, #0
 80038fe:	b2db      	uxtb	r3, r3
 8003900:	2b00      	cmp	r3, #0
 8003902:	d19e      	bne.n	8003842 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8003904:	2300      	movs	r3, #0
}
 8003906:	4618      	mov	r0, r3
 8003908:	3710      	adds	r7, #16
 800390a:	46bd      	mov	sp, r7
 800390c:	bd80      	pop	{r7, pc}

0800390e <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{    
 800390e:	b580      	push	{r7, lr}
 8003910:	b084      	sub	sp, #16
 8003912:	af00      	add	r7, sp, #0
 8003914:	60f8      	str	r0, [r7, #12]
 8003916:	60b9      	str	r1, [r7, #8]
 8003918:	607a      	str	r2, [r7, #4]
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800391a:	e029      	b.n	8003970 <I2C_WaitOnTXEFlagUntilTimeout+0x62>
  {
    /* Check if a NACK is detected */
    if(I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800391c:	68f8      	ldr	r0, [r7, #12]
 800391e:	f000 f870 	bl	8003a02 <I2C_IsAcknowledgeFailed>
 8003922:	4603      	mov	r3, r0
 8003924:	2b00      	cmp	r3, #0
 8003926:	d001      	beq.n	800392c <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003928:	2301      	movs	r3, #1
 800392a:	e029      	b.n	8003980 <I2C_WaitOnTXEFlagUntilTimeout+0x72>
    }
		
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 800392c:	68bb      	ldr	r3, [r7, #8]
 800392e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003932:	d01d      	beq.n	8003970 <I2C_WaitOnTXEFlagUntilTimeout+0x62>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8003934:	68bb      	ldr	r3, [r7, #8]
 8003936:	2b00      	cmp	r3, #0
 8003938:	d007      	beq.n	800394a <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800393a:	f7fe fbe5 	bl	8002108 <HAL_GetTick>
 800393e:	4602      	mov	r2, r0
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	1ad3      	subs	r3, r2, r3
 8003944:	68ba      	ldr	r2, [r7, #8]
 8003946:	429a      	cmp	r2, r3
 8003948:	d212      	bcs.n	8003970 <I2C_WaitOnTXEFlagUntilTimeout+0x62>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800394e:	f043 0220 	orr.w	r2, r3, #32
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	641a      	str	r2, [r3, #64]	; 0x40
        hi2c->PreviousState = I2C_STATE_NONE;
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	2200      	movs	r2, #0
 800395a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State= HAL_I2C_STATE_READY;
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	2220      	movs	r2, #32
 8003960:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	2200      	movs	r2, #0
 8003968:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800396c:	2303      	movs	r3, #3
 800396e:	e007      	b.n	8003980 <I2C_WaitOnTXEFlagUntilTimeout+0x72>
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	695b      	ldr	r3, [r3, #20]
 8003976:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800397a:	2b80      	cmp	r3, #128	; 0x80
 800397c:	d1ce      	bne.n	800391c <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;      
 800397e:	2300      	movs	r3, #0
}
 8003980:	4618      	mov	r0, r3
 8003982:	3710      	adds	r7, #16
 8003984:	46bd      	mov	sp, r7
 8003986:	bd80      	pop	{r7, pc}

08003988 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{  
 8003988:	b580      	push	{r7, lr}
 800398a:	b084      	sub	sp, #16
 800398c:	af00      	add	r7, sp, #0
 800398e:	60f8      	str	r0, [r7, #12]
 8003990:	60b9      	str	r1, [r7, #8]
 8003992:	607a      	str	r2, [r7, #4]
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003994:	e029      	b.n	80039ea <I2C_WaitOnBTFFlagUntilTimeout+0x62>
  {
    /* Check if a NACK is detected */
    if(I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003996:	68f8      	ldr	r0, [r7, #12]
 8003998:	f000 f833 	bl	8003a02 <I2C_IsAcknowledgeFailed>
 800399c:	4603      	mov	r3, r0
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d001      	beq.n	80039a6 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80039a2:	2301      	movs	r3, #1
 80039a4:	e029      	b.n	80039fa <I2C_WaitOnBTFFlagUntilTimeout+0x72>
    }

    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 80039a6:	68bb      	ldr	r3, [r7, #8]
 80039a8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80039ac:	d01d      	beq.n	80039ea <I2C_WaitOnBTFFlagUntilTimeout+0x62>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 80039ae:	68bb      	ldr	r3, [r7, #8]
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d007      	beq.n	80039c4 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80039b4:	f7fe fba8 	bl	8002108 <HAL_GetTick>
 80039b8:	4602      	mov	r2, r0
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	1ad3      	subs	r3, r2, r3
 80039be:	68ba      	ldr	r2, [r7, #8]
 80039c0:	429a      	cmp	r2, r3
 80039c2:	d212      	bcs.n	80039ea <I2C_WaitOnBTFFlagUntilTimeout+0x62>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039c8:	f043 0220 	orr.w	r2, r3, #32
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	641a      	str	r2, [r3, #64]	; 0x40
        hi2c->PreviousState = I2C_STATE_NONE;
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	2200      	movs	r2, #0
 80039d4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State= HAL_I2C_STATE_READY;
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	2220      	movs	r2, #32
 80039da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	2200      	movs	r2, #0
 80039e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80039e6:	2303      	movs	r3, #3
 80039e8:	e007      	b.n	80039fa <I2C_WaitOnBTFFlagUntilTimeout+0x72>
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	695b      	ldr	r3, [r3, #20]
 80039f0:	f003 0304 	and.w	r3, r3, #4
 80039f4:	2b04      	cmp	r3, #4
 80039f6:	d1ce      	bne.n	8003996 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80039f8:	2300      	movs	r3, #0
}
 80039fa:	4618      	mov	r0, r3
 80039fc:	3710      	adds	r7, #16
 80039fe:	46bd      	mov	sp, r7
 8003a00:	bd80      	pop	{r7, pc}

08003a02 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003a02:	b480      	push	{r7}
 8003a04:	b083      	sub	sp, #12
 8003a06:	af00      	add	r7, sp, #0
 8003a08:	6078      	str	r0, [r7, #4]
  if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	695b      	ldr	r3, [r3, #20]
 8003a10:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a14:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003a18:	d114      	bne.n	8003a44 <I2C_IsAcknowledgeFailed+0x42>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003a22:	615a      	str	r2, [r3, #20]

    hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	2204      	movs	r2, #4
 8003a28:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->PreviousState = I2C_STATE_NONE;
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	2200      	movs	r2, #0
 8003a2e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State= HAL_I2C_STATE_READY;
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	2220      	movs	r2, #32
 8003a34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	2200      	movs	r2, #0
 8003a3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003a40:	2301      	movs	r3, #1
 8003a42:	e000      	b.n	8003a46 <I2C_IsAcknowledgeFailed+0x44>
  }
  return HAL_OK;
 8003a44:	2300      	movs	r3, #0
}
 8003a46:	4618      	mov	r0, r3
 8003a48:	370c      	adds	r7, #12
 8003a4a:	46bd      	mov	sp, r7
 8003a4c:	bc80      	pop	{r7}
 8003a4e:	4770      	bx	lr

08003a50 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003a50:	b580      	push	{r7, lr}
 8003a52:	b086      	sub	sp, #24
 8003a54:	af00      	add	r7, sp, #0
 8003a56:	6078      	str	r0, [r7, #4]
   uint32_t tickstart = 0U;
 8003a58:	2300      	movs	r3, #0
 8003a5a:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  
  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	f003 0301 	and.w	r3, r3, #1
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	f000 8087 	beq.w	8003b78 <HAL_RCC_OscConfig+0x128>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
        
    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8003a6a:	4b92      	ldr	r3, [pc, #584]	; (8003cb4 <HAL_RCC_OscConfig+0x264>)
 8003a6c:	685b      	ldr	r3, [r3, #4]
 8003a6e:	f003 030c 	and.w	r3, r3, #12
 8003a72:	2b04      	cmp	r3, #4
 8003a74:	d00c      	beq.n	8003a90 <HAL_RCC_OscConfig+0x40>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003a76:	4b8f      	ldr	r3, [pc, #572]	; (8003cb4 <HAL_RCC_OscConfig+0x264>)
 8003a78:	685b      	ldr	r3, [r3, #4]
 8003a7a:	f003 030c 	and.w	r3, r3, #12
 8003a7e:	2b08      	cmp	r3, #8
 8003a80:	d112      	bne.n	8003aa8 <HAL_RCC_OscConfig+0x58>
 8003a82:	4b8c      	ldr	r3, [pc, #560]	; (8003cb4 <HAL_RCC_OscConfig+0x264>)
 8003a84:	685b      	ldr	r3, [r3, #4]
 8003a86:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003a8a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a8e:	d10b      	bne.n	8003aa8 <HAL_RCC_OscConfig+0x58>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a90:	4b88      	ldr	r3, [pc, #544]	; (8003cb4 <HAL_RCC_OscConfig+0x264>)
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d06c      	beq.n	8003b76 <HAL_RCC_OscConfig+0x126>
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	685b      	ldr	r3, [r3, #4]
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d168      	bne.n	8003b76 <HAL_RCC_OscConfig+0x126>
      {
        return HAL_ERROR;
 8003aa4:	2301      	movs	r3, #1
 8003aa6:	e22d      	b.n	8003f04 <HAL_RCC_OscConfig+0x4b4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	685b      	ldr	r3, [r3, #4]
 8003aac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003ab0:	d106      	bne.n	8003ac0 <HAL_RCC_OscConfig+0x70>
 8003ab2:	4b80      	ldr	r3, [pc, #512]	; (8003cb4 <HAL_RCC_OscConfig+0x264>)
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	4a7f      	ldr	r2, [pc, #508]	; (8003cb4 <HAL_RCC_OscConfig+0x264>)
 8003ab8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003abc:	6013      	str	r3, [r2, #0]
 8003abe:	e02e      	b.n	8003b1e <HAL_RCC_OscConfig+0xce>
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	685b      	ldr	r3, [r3, #4]
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d10c      	bne.n	8003ae2 <HAL_RCC_OscConfig+0x92>
 8003ac8:	4b7a      	ldr	r3, [pc, #488]	; (8003cb4 <HAL_RCC_OscConfig+0x264>)
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	4a79      	ldr	r2, [pc, #484]	; (8003cb4 <HAL_RCC_OscConfig+0x264>)
 8003ace:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003ad2:	6013      	str	r3, [r2, #0]
 8003ad4:	4b77      	ldr	r3, [pc, #476]	; (8003cb4 <HAL_RCC_OscConfig+0x264>)
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	4a76      	ldr	r2, [pc, #472]	; (8003cb4 <HAL_RCC_OscConfig+0x264>)
 8003ada:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003ade:	6013      	str	r3, [r2, #0]
 8003ae0:	e01d      	b.n	8003b1e <HAL_RCC_OscConfig+0xce>
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	685b      	ldr	r3, [r3, #4]
 8003ae6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003aea:	d10c      	bne.n	8003b06 <HAL_RCC_OscConfig+0xb6>
 8003aec:	4b71      	ldr	r3, [pc, #452]	; (8003cb4 <HAL_RCC_OscConfig+0x264>)
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	4a70      	ldr	r2, [pc, #448]	; (8003cb4 <HAL_RCC_OscConfig+0x264>)
 8003af2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003af6:	6013      	str	r3, [r2, #0]
 8003af8:	4b6e      	ldr	r3, [pc, #440]	; (8003cb4 <HAL_RCC_OscConfig+0x264>)
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	4a6d      	ldr	r2, [pc, #436]	; (8003cb4 <HAL_RCC_OscConfig+0x264>)
 8003afe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b02:	6013      	str	r3, [r2, #0]
 8003b04:	e00b      	b.n	8003b1e <HAL_RCC_OscConfig+0xce>
 8003b06:	4b6b      	ldr	r3, [pc, #428]	; (8003cb4 <HAL_RCC_OscConfig+0x264>)
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	4a6a      	ldr	r2, [pc, #424]	; (8003cb4 <HAL_RCC_OscConfig+0x264>)
 8003b0c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003b10:	6013      	str	r3, [r2, #0]
 8003b12:	4b68      	ldr	r3, [pc, #416]	; (8003cb4 <HAL_RCC_OscConfig+0x264>)
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	4a67      	ldr	r2, [pc, #412]	; (8003cb4 <HAL_RCC_OscConfig+0x264>)
 8003b18:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003b1c:	6013      	str	r3, [r2, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	685b      	ldr	r3, [r3, #4]
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d013      	beq.n	8003b4e <HAL_RCC_OscConfig+0xfe>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b26:	f7fe faef 	bl	8002108 <HAL_GetTick>
 8003b2a:	6138      	str	r0, [r7, #16]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b2c:	e008      	b.n	8003b40 <HAL_RCC_OscConfig+0xf0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003b2e:	f7fe faeb 	bl	8002108 <HAL_GetTick>
 8003b32:	4602      	mov	r2, r0
 8003b34:	693b      	ldr	r3, [r7, #16]
 8003b36:	1ad3      	subs	r3, r2, r3
 8003b38:	2b64      	cmp	r3, #100	; 0x64
 8003b3a:	d901      	bls.n	8003b40 <HAL_RCC_OscConfig+0xf0>
          {
            return HAL_TIMEOUT;
 8003b3c:	2303      	movs	r3, #3
 8003b3e:	e1e1      	b.n	8003f04 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b40:	4b5c      	ldr	r3, [pc, #368]	; (8003cb4 <HAL_RCC_OscConfig+0x264>)
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d0f0      	beq.n	8003b2e <HAL_RCC_OscConfig+0xde>
 8003b4c:	e014      	b.n	8003b78 <HAL_RCC_OscConfig+0x128>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b4e:	f7fe fadb 	bl	8002108 <HAL_GetTick>
 8003b52:	6138      	str	r0, [r7, #16]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003b54:	e008      	b.n	8003b68 <HAL_RCC_OscConfig+0x118>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003b56:	f7fe fad7 	bl	8002108 <HAL_GetTick>
 8003b5a:	4602      	mov	r2, r0
 8003b5c:	693b      	ldr	r3, [r7, #16]
 8003b5e:	1ad3      	subs	r3, r2, r3
 8003b60:	2b64      	cmp	r3, #100	; 0x64
 8003b62:	d901      	bls.n	8003b68 <HAL_RCC_OscConfig+0x118>
          {
            return HAL_TIMEOUT;
 8003b64:	2303      	movs	r3, #3
 8003b66:	e1cd      	b.n	8003f04 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003b68:	4b52      	ldr	r3, [pc, #328]	; (8003cb4 <HAL_RCC_OscConfig+0x264>)
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d1f0      	bne.n	8003b56 <HAL_RCC_OscConfig+0x106>
 8003b74:	e000      	b.n	8003b78 <HAL_RCC_OscConfig+0x128>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b76:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	f003 0302 	and.w	r3, r3, #2
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d063      	beq.n	8003c4c <HAL_RCC_OscConfig+0x1fc>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8003b84:	4b4b      	ldr	r3, [pc, #300]	; (8003cb4 <HAL_RCC_OscConfig+0x264>)
 8003b86:	685b      	ldr	r3, [r3, #4]
 8003b88:	f003 030c 	and.w	r3, r3, #12
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d00b      	beq.n	8003ba8 <HAL_RCC_OscConfig+0x158>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003b90:	4b48      	ldr	r3, [pc, #288]	; (8003cb4 <HAL_RCC_OscConfig+0x264>)
 8003b92:	685b      	ldr	r3, [r3, #4]
 8003b94:	f003 030c 	and.w	r3, r3, #12
 8003b98:	2b08      	cmp	r3, #8
 8003b9a:	d11c      	bne.n	8003bd6 <HAL_RCC_OscConfig+0x186>
 8003b9c:	4b45      	ldr	r3, [pc, #276]	; (8003cb4 <HAL_RCC_OscConfig+0x264>)
 8003b9e:	685b      	ldr	r3, [r3, #4]
 8003ba0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d116      	bne.n	8003bd6 <HAL_RCC_OscConfig+0x186>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003ba8:	4b42      	ldr	r3, [pc, #264]	; (8003cb4 <HAL_RCC_OscConfig+0x264>)
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	f003 0302 	and.w	r3, r3, #2
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d005      	beq.n	8003bc0 <HAL_RCC_OscConfig+0x170>
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	691b      	ldr	r3, [r3, #16]
 8003bb8:	2b01      	cmp	r3, #1
 8003bba:	d001      	beq.n	8003bc0 <HAL_RCC_OscConfig+0x170>
      {
        return HAL_ERROR;
 8003bbc:	2301      	movs	r3, #1
 8003bbe:	e1a1      	b.n	8003f04 <HAL_RCC_OscConfig+0x4b4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003bc0:	4b3c      	ldr	r3, [pc, #240]	; (8003cb4 <HAL_RCC_OscConfig+0x264>)
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	695b      	ldr	r3, [r3, #20]
 8003bcc:	00db      	lsls	r3, r3, #3
 8003bce:	4939      	ldr	r1, [pc, #228]	; (8003cb4 <HAL_RCC_OscConfig+0x264>)
 8003bd0:	4313      	orrs	r3, r2
 8003bd2:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003bd4:	e03a      	b.n	8003c4c <HAL_RCC_OscConfig+0x1fc>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	691b      	ldr	r3, [r3, #16]
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d020      	beq.n	8003c20 <HAL_RCC_OscConfig+0x1d0>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003bde:	4b36      	ldr	r3, [pc, #216]	; (8003cb8 <HAL_RCC_OscConfig+0x268>)
 8003be0:	2201      	movs	r2, #1
 8003be2:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003be4:	f7fe fa90 	bl	8002108 <HAL_GetTick>
 8003be8:	6138      	str	r0, [r7, #16]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003bea:	e008      	b.n	8003bfe <HAL_RCC_OscConfig+0x1ae>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003bec:	f7fe fa8c 	bl	8002108 <HAL_GetTick>
 8003bf0:	4602      	mov	r2, r0
 8003bf2:	693b      	ldr	r3, [r7, #16]
 8003bf4:	1ad3      	subs	r3, r2, r3
 8003bf6:	2b02      	cmp	r3, #2
 8003bf8:	d901      	bls.n	8003bfe <HAL_RCC_OscConfig+0x1ae>
          {
            return HAL_TIMEOUT;
 8003bfa:	2303      	movs	r3, #3
 8003bfc:	e182      	b.n	8003f04 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003bfe:	4b2d      	ldr	r3, [pc, #180]	; (8003cb4 <HAL_RCC_OscConfig+0x264>)
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	f003 0302 	and.w	r3, r3, #2
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d0f0      	beq.n	8003bec <HAL_RCC_OscConfig+0x19c>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c0a:	4b2a      	ldr	r3, [pc, #168]	; (8003cb4 <HAL_RCC_OscConfig+0x264>)
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	695b      	ldr	r3, [r3, #20]
 8003c16:	00db      	lsls	r3, r3, #3
 8003c18:	4926      	ldr	r1, [pc, #152]	; (8003cb4 <HAL_RCC_OscConfig+0x264>)
 8003c1a:	4313      	orrs	r3, r2
 8003c1c:	600b      	str	r3, [r1, #0]
 8003c1e:	e015      	b.n	8003c4c <HAL_RCC_OscConfig+0x1fc>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003c20:	4b25      	ldr	r3, [pc, #148]	; (8003cb8 <HAL_RCC_OscConfig+0x268>)
 8003c22:	2200      	movs	r2, #0
 8003c24:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c26:	f7fe fa6f 	bl	8002108 <HAL_GetTick>
 8003c2a:	6138      	str	r0, [r7, #16]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003c2c:	e008      	b.n	8003c40 <HAL_RCC_OscConfig+0x1f0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003c2e:	f7fe fa6b 	bl	8002108 <HAL_GetTick>
 8003c32:	4602      	mov	r2, r0
 8003c34:	693b      	ldr	r3, [r7, #16]
 8003c36:	1ad3      	subs	r3, r2, r3
 8003c38:	2b02      	cmp	r3, #2
 8003c3a:	d901      	bls.n	8003c40 <HAL_RCC_OscConfig+0x1f0>
          {
            return HAL_TIMEOUT;
 8003c3c:	2303      	movs	r3, #3
 8003c3e:	e161      	b.n	8003f04 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003c40:	4b1c      	ldr	r3, [pc, #112]	; (8003cb4 <HAL_RCC_OscConfig+0x264>)
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	f003 0302 	and.w	r3, r3, #2
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d1f0      	bne.n	8003c2e <HAL_RCC_OscConfig+0x1de>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	f003 0308 	and.w	r3, r3, #8
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d039      	beq.n	8003ccc <HAL_RCC_OscConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	699b      	ldr	r3, [r3, #24]
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d019      	beq.n	8003c94 <HAL_RCC_OscConfig+0x244>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003c60:	4b16      	ldr	r3, [pc, #88]	; (8003cbc <HAL_RCC_OscConfig+0x26c>)
 8003c62:	2201      	movs	r2, #1
 8003c64:	601a      	str	r2, [r3, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003c66:	f7fe fa4f 	bl	8002108 <HAL_GetTick>
 8003c6a:	6138      	str	r0, [r7, #16]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003c6c:	e008      	b.n	8003c80 <HAL_RCC_OscConfig+0x230>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003c6e:	f7fe fa4b 	bl	8002108 <HAL_GetTick>
 8003c72:	4602      	mov	r2, r0
 8003c74:	693b      	ldr	r3, [r7, #16]
 8003c76:	1ad3      	subs	r3, r2, r3
 8003c78:	2b02      	cmp	r3, #2
 8003c7a:	d901      	bls.n	8003c80 <HAL_RCC_OscConfig+0x230>
        {
          return HAL_TIMEOUT;
 8003c7c:	2303      	movs	r3, #3
 8003c7e:	e141      	b.n	8003f04 <HAL_RCC_OscConfig+0x4b4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003c80:	4b0c      	ldr	r3, [pc, #48]	; (8003cb4 <HAL_RCC_OscConfig+0x264>)
 8003c82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c84:	f003 0302 	and.w	r3, r3, #2
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d0f0      	beq.n	8003c6e <HAL_RCC_OscConfig+0x21e>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms 
          should be added.*/
      RCC_Delay(1);
 8003c8c:	2001      	movs	r0, #1
 8003c8e:	f000 fab7 	bl	8004200 <RCC_Delay>
 8003c92:	e01b      	b.n	8003ccc <HAL_RCC_OscConfig+0x27c>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003c94:	4b09      	ldr	r3, [pc, #36]	; (8003cbc <HAL_RCC_OscConfig+0x26c>)
 8003c96:	2200      	movs	r2, #0
 8003c98:	601a      	str	r2, [r3, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003c9a:	f7fe fa35 	bl	8002108 <HAL_GetTick>
 8003c9e:	6138      	str	r0, [r7, #16]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003ca0:	e00e      	b.n	8003cc0 <HAL_RCC_OscConfig+0x270>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003ca2:	f7fe fa31 	bl	8002108 <HAL_GetTick>
 8003ca6:	4602      	mov	r2, r0
 8003ca8:	693b      	ldr	r3, [r7, #16]
 8003caa:	1ad3      	subs	r3, r2, r3
 8003cac:	2b02      	cmp	r3, #2
 8003cae:	d907      	bls.n	8003cc0 <HAL_RCC_OscConfig+0x270>
        {
          return HAL_TIMEOUT;
 8003cb0:	2303      	movs	r3, #3
 8003cb2:	e127      	b.n	8003f04 <HAL_RCC_OscConfig+0x4b4>
 8003cb4:	40021000 	.word	0x40021000
 8003cb8:	42420000 	.word	0x42420000
 8003cbc:	42420480 	.word	0x42420480
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003cc0:	4b92      	ldr	r3, [pc, #584]	; (8003f0c <HAL_RCC_OscConfig+0x4bc>)
 8003cc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cc4:	f003 0302 	and.w	r3, r3, #2
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d1ea      	bne.n	8003ca2 <HAL_RCC_OscConfig+0x252>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	f003 0304 	and.w	r3, r3, #4
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	f000 80a6 	beq.w	8003e26 <HAL_RCC_OscConfig+0x3d6>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003cda:	2300      	movs	r3, #0
 8003cdc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003cde:	4b8b      	ldr	r3, [pc, #556]	; (8003f0c <HAL_RCC_OscConfig+0x4bc>)
 8003ce0:	69db      	ldr	r3, [r3, #28]
 8003ce2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d10d      	bne.n	8003d06 <HAL_RCC_OscConfig+0x2b6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003cea:	4b88      	ldr	r3, [pc, #544]	; (8003f0c <HAL_RCC_OscConfig+0x4bc>)
 8003cec:	69db      	ldr	r3, [r3, #28]
 8003cee:	4a87      	ldr	r2, [pc, #540]	; (8003f0c <HAL_RCC_OscConfig+0x4bc>)
 8003cf0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003cf4:	61d3      	str	r3, [r2, #28]
 8003cf6:	4b85      	ldr	r3, [pc, #532]	; (8003f0c <HAL_RCC_OscConfig+0x4bc>)
 8003cf8:	69db      	ldr	r3, [r3, #28]
 8003cfa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003cfe:	60fb      	str	r3, [r7, #12]
 8003d00:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8003d02:	2301      	movs	r3, #1
 8003d04:	75fb      	strb	r3, [r7, #23]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d06:	4b82      	ldr	r3, [pc, #520]	; (8003f10 <HAL_RCC_OscConfig+0x4c0>)
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d118      	bne.n	8003d44 <HAL_RCC_OscConfig+0x2f4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003d12:	4b7f      	ldr	r3, [pc, #508]	; (8003f10 <HAL_RCC_OscConfig+0x4c0>)
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	4a7e      	ldr	r2, [pc, #504]	; (8003f10 <HAL_RCC_OscConfig+0x4c0>)
 8003d18:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003d1c:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003d1e:	f7fe f9f3 	bl	8002108 <HAL_GetTick>
 8003d22:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d24:	e008      	b.n	8003d38 <HAL_RCC_OscConfig+0x2e8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003d26:	f7fe f9ef 	bl	8002108 <HAL_GetTick>
 8003d2a:	4602      	mov	r2, r0
 8003d2c:	693b      	ldr	r3, [r7, #16]
 8003d2e:	1ad3      	subs	r3, r2, r3
 8003d30:	2b64      	cmp	r3, #100	; 0x64
 8003d32:	d901      	bls.n	8003d38 <HAL_RCC_OscConfig+0x2e8>
        {
          return HAL_TIMEOUT;
 8003d34:	2303      	movs	r3, #3
 8003d36:	e0e5      	b.n	8003f04 <HAL_RCC_OscConfig+0x4b4>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d38:	4b75      	ldr	r3, [pc, #468]	; (8003f10 <HAL_RCC_OscConfig+0x4c0>)
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d0f0      	beq.n	8003d26 <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	68db      	ldr	r3, [r3, #12]
 8003d48:	2b01      	cmp	r3, #1
 8003d4a:	d106      	bne.n	8003d5a <HAL_RCC_OscConfig+0x30a>
 8003d4c:	4b6f      	ldr	r3, [pc, #444]	; (8003f0c <HAL_RCC_OscConfig+0x4bc>)
 8003d4e:	6a1b      	ldr	r3, [r3, #32]
 8003d50:	4a6e      	ldr	r2, [pc, #440]	; (8003f0c <HAL_RCC_OscConfig+0x4bc>)
 8003d52:	f043 0301 	orr.w	r3, r3, #1
 8003d56:	6213      	str	r3, [r2, #32]
 8003d58:	e02d      	b.n	8003db6 <HAL_RCC_OscConfig+0x366>
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	68db      	ldr	r3, [r3, #12]
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d10c      	bne.n	8003d7c <HAL_RCC_OscConfig+0x32c>
 8003d62:	4b6a      	ldr	r3, [pc, #424]	; (8003f0c <HAL_RCC_OscConfig+0x4bc>)
 8003d64:	6a1b      	ldr	r3, [r3, #32]
 8003d66:	4a69      	ldr	r2, [pc, #420]	; (8003f0c <HAL_RCC_OscConfig+0x4bc>)
 8003d68:	f023 0301 	bic.w	r3, r3, #1
 8003d6c:	6213      	str	r3, [r2, #32]
 8003d6e:	4b67      	ldr	r3, [pc, #412]	; (8003f0c <HAL_RCC_OscConfig+0x4bc>)
 8003d70:	6a1b      	ldr	r3, [r3, #32]
 8003d72:	4a66      	ldr	r2, [pc, #408]	; (8003f0c <HAL_RCC_OscConfig+0x4bc>)
 8003d74:	f023 0304 	bic.w	r3, r3, #4
 8003d78:	6213      	str	r3, [r2, #32]
 8003d7a:	e01c      	b.n	8003db6 <HAL_RCC_OscConfig+0x366>
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	68db      	ldr	r3, [r3, #12]
 8003d80:	2b05      	cmp	r3, #5
 8003d82:	d10c      	bne.n	8003d9e <HAL_RCC_OscConfig+0x34e>
 8003d84:	4b61      	ldr	r3, [pc, #388]	; (8003f0c <HAL_RCC_OscConfig+0x4bc>)
 8003d86:	6a1b      	ldr	r3, [r3, #32]
 8003d88:	4a60      	ldr	r2, [pc, #384]	; (8003f0c <HAL_RCC_OscConfig+0x4bc>)
 8003d8a:	f043 0304 	orr.w	r3, r3, #4
 8003d8e:	6213      	str	r3, [r2, #32]
 8003d90:	4b5e      	ldr	r3, [pc, #376]	; (8003f0c <HAL_RCC_OscConfig+0x4bc>)
 8003d92:	6a1b      	ldr	r3, [r3, #32]
 8003d94:	4a5d      	ldr	r2, [pc, #372]	; (8003f0c <HAL_RCC_OscConfig+0x4bc>)
 8003d96:	f043 0301 	orr.w	r3, r3, #1
 8003d9a:	6213      	str	r3, [r2, #32]
 8003d9c:	e00b      	b.n	8003db6 <HAL_RCC_OscConfig+0x366>
 8003d9e:	4b5b      	ldr	r3, [pc, #364]	; (8003f0c <HAL_RCC_OscConfig+0x4bc>)
 8003da0:	6a1b      	ldr	r3, [r3, #32]
 8003da2:	4a5a      	ldr	r2, [pc, #360]	; (8003f0c <HAL_RCC_OscConfig+0x4bc>)
 8003da4:	f023 0301 	bic.w	r3, r3, #1
 8003da8:	6213      	str	r3, [r2, #32]
 8003daa:	4b58      	ldr	r3, [pc, #352]	; (8003f0c <HAL_RCC_OscConfig+0x4bc>)
 8003dac:	6a1b      	ldr	r3, [r3, #32]
 8003dae:	4a57      	ldr	r2, [pc, #348]	; (8003f0c <HAL_RCC_OscConfig+0x4bc>)
 8003db0:	f023 0304 	bic.w	r3, r3, #4
 8003db4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	68db      	ldr	r3, [r3, #12]
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d015      	beq.n	8003dea <HAL_RCC_OscConfig+0x39a>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003dbe:	f7fe f9a3 	bl	8002108 <HAL_GetTick>
 8003dc2:	6138      	str	r0, [r7, #16]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003dc4:	e00a      	b.n	8003ddc <HAL_RCC_OscConfig+0x38c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003dc6:	f7fe f99f 	bl	8002108 <HAL_GetTick>
 8003dca:	4602      	mov	r2, r0
 8003dcc:	693b      	ldr	r3, [r7, #16]
 8003dce:	1ad3      	subs	r3, r2, r3
 8003dd0:	f241 3288 	movw	r2, #5000	; 0x1388
 8003dd4:	4293      	cmp	r3, r2
 8003dd6:	d901      	bls.n	8003ddc <HAL_RCC_OscConfig+0x38c>
        {
          return HAL_TIMEOUT;
 8003dd8:	2303      	movs	r3, #3
 8003dda:	e093      	b.n	8003f04 <HAL_RCC_OscConfig+0x4b4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ddc:	4b4b      	ldr	r3, [pc, #300]	; (8003f0c <HAL_RCC_OscConfig+0x4bc>)
 8003dde:	6a1b      	ldr	r3, [r3, #32]
 8003de0:	f003 0302 	and.w	r3, r3, #2
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d0ee      	beq.n	8003dc6 <HAL_RCC_OscConfig+0x376>
 8003de8:	e014      	b.n	8003e14 <HAL_RCC_OscConfig+0x3c4>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003dea:	f7fe f98d 	bl	8002108 <HAL_GetTick>
 8003dee:	6138      	str	r0, [r7, #16]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003df0:	e00a      	b.n	8003e08 <HAL_RCC_OscConfig+0x3b8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003df2:	f7fe f989 	bl	8002108 <HAL_GetTick>
 8003df6:	4602      	mov	r2, r0
 8003df8:	693b      	ldr	r3, [r7, #16]
 8003dfa:	1ad3      	subs	r3, r2, r3
 8003dfc:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e00:	4293      	cmp	r3, r2
 8003e02:	d901      	bls.n	8003e08 <HAL_RCC_OscConfig+0x3b8>
        {
          return HAL_TIMEOUT;
 8003e04:	2303      	movs	r3, #3
 8003e06:	e07d      	b.n	8003f04 <HAL_RCC_OscConfig+0x4b4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003e08:	4b40      	ldr	r3, [pc, #256]	; (8003f0c <HAL_RCC_OscConfig+0x4bc>)
 8003e0a:	6a1b      	ldr	r3, [r3, #32]
 8003e0c:	f003 0302 	and.w	r3, r3, #2
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d1ee      	bne.n	8003df2 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003e14:	7dfb      	ldrb	r3, [r7, #23]
 8003e16:	2b01      	cmp	r3, #1
 8003e18:	d105      	bne.n	8003e26 <HAL_RCC_OscConfig+0x3d6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003e1a:	4b3c      	ldr	r3, [pc, #240]	; (8003f0c <HAL_RCC_OscConfig+0x4bc>)
 8003e1c:	69db      	ldr	r3, [r3, #28]
 8003e1e:	4a3b      	ldr	r2, [pc, #236]	; (8003f0c <HAL_RCC_OscConfig+0x4bc>)
 8003e20:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003e24:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	69db      	ldr	r3, [r3, #28]
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d069      	beq.n	8003f02 <HAL_RCC_OscConfig+0x4b2>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003e2e:	4b37      	ldr	r3, [pc, #220]	; (8003f0c <HAL_RCC_OscConfig+0x4bc>)
 8003e30:	685b      	ldr	r3, [r3, #4]
 8003e32:	f003 030c 	and.w	r3, r3, #12
 8003e36:	2b08      	cmp	r3, #8
 8003e38:	d061      	beq.n	8003efe <HAL_RCC_OscConfig+0x4ae>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	69db      	ldr	r3, [r3, #28]
 8003e3e:	2b02      	cmp	r3, #2
 8003e40:	d146      	bne.n	8003ed0 <HAL_RCC_OscConfig+0x480>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003e42:	4b34      	ldr	r3, [pc, #208]	; (8003f14 <HAL_RCC_OscConfig+0x4c4>)
 8003e44:	2200      	movs	r2, #0
 8003e46:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e48:	f7fe f95e 	bl	8002108 <HAL_GetTick>
 8003e4c:	6138      	str	r0, [r7, #16]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003e4e:	e008      	b.n	8003e62 <HAL_RCC_OscConfig+0x412>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003e50:	f7fe f95a 	bl	8002108 <HAL_GetTick>
 8003e54:	4602      	mov	r2, r0
 8003e56:	693b      	ldr	r3, [r7, #16]
 8003e58:	1ad3      	subs	r3, r2, r3
 8003e5a:	2b02      	cmp	r3, #2
 8003e5c:	d901      	bls.n	8003e62 <HAL_RCC_OscConfig+0x412>
          {
            return HAL_TIMEOUT;
 8003e5e:	2303      	movs	r3, #3
 8003e60:	e050      	b.n	8003f04 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003e62:	4b2a      	ldr	r3, [pc, #168]	; (8003f0c <HAL_RCC_OscConfig+0x4bc>)
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d1f0      	bne.n	8003e50 <HAL_RCC_OscConfig+0x400>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if(RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	6a1b      	ldr	r3, [r3, #32]
 8003e72:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003e76:	d108      	bne.n	8003e8a <HAL_RCC_OscConfig+0x43a>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003e78:	4b24      	ldr	r3, [pc, #144]	; (8003f0c <HAL_RCC_OscConfig+0x4bc>)
 8003e7a:	685b      	ldr	r3, [r3, #4]
 8003e7c:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	689b      	ldr	r3, [r3, #8]
 8003e84:	4921      	ldr	r1, [pc, #132]	; (8003f0c <HAL_RCC_OscConfig+0x4bc>)
 8003e86:	4313      	orrs	r3, r2
 8003e88:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003e8a:	4b20      	ldr	r3, [pc, #128]	; (8003f0c <HAL_RCC_OscConfig+0x4bc>)
 8003e8c:	685b      	ldr	r3, [r3, #4]
 8003e8e:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	6a19      	ldr	r1, [r3, #32]
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e9a:	430b      	orrs	r3, r1
 8003e9c:	491b      	ldr	r1, [pc, #108]	; (8003f0c <HAL_RCC_OscConfig+0x4bc>)
 8003e9e:	4313      	orrs	r3, r2
 8003ea0:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003ea2:	4b1c      	ldr	r3, [pc, #112]	; (8003f14 <HAL_RCC_OscConfig+0x4c4>)
 8003ea4:	2201      	movs	r2, #1
 8003ea6:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ea8:	f7fe f92e 	bl	8002108 <HAL_GetTick>
 8003eac:	6138      	str	r0, [r7, #16]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003eae:	e008      	b.n	8003ec2 <HAL_RCC_OscConfig+0x472>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003eb0:	f7fe f92a 	bl	8002108 <HAL_GetTick>
 8003eb4:	4602      	mov	r2, r0
 8003eb6:	693b      	ldr	r3, [r7, #16]
 8003eb8:	1ad3      	subs	r3, r2, r3
 8003eba:	2b02      	cmp	r3, #2
 8003ebc:	d901      	bls.n	8003ec2 <HAL_RCC_OscConfig+0x472>
          {
            return HAL_TIMEOUT;
 8003ebe:	2303      	movs	r3, #3
 8003ec0:	e020      	b.n	8003f04 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003ec2:	4b12      	ldr	r3, [pc, #72]	; (8003f0c <HAL_RCC_OscConfig+0x4bc>)
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d0f0      	beq.n	8003eb0 <HAL_RCC_OscConfig+0x460>
 8003ece:	e018      	b.n	8003f02 <HAL_RCC_OscConfig+0x4b2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003ed0:	4b10      	ldr	r3, [pc, #64]	; (8003f14 <HAL_RCC_OscConfig+0x4c4>)
 8003ed2:	2200      	movs	r2, #0
 8003ed4:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ed6:	f7fe f917 	bl	8002108 <HAL_GetTick>
 8003eda:	6138      	str	r0, [r7, #16]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003edc:	e008      	b.n	8003ef0 <HAL_RCC_OscConfig+0x4a0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003ede:	f7fe f913 	bl	8002108 <HAL_GetTick>
 8003ee2:	4602      	mov	r2, r0
 8003ee4:	693b      	ldr	r3, [r7, #16]
 8003ee6:	1ad3      	subs	r3, r2, r3
 8003ee8:	2b02      	cmp	r3, #2
 8003eea:	d901      	bls.n	8003ef0 <HAL_RCC_OscConfig+0x4a0>
          {
            return HAL_TIMEOUT;
 8003eec:	2303      	movs	r3, #3
 8003eee:	e009      	b.n	8003f04 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003ef0:	4b06      	ldr	r3, [pc, #24]	; (8003f0c <HAL_RCC_OscConfig+0x4bc>)
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d1f0      	bne.n	8003ede <HAL_RCC_OscConfig+0x48e>
 8003efc:	e001      	b.n	8003f02 <HAL_RCC_OscConfig+0x4b2>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8003efe:	2301      	movs	r3, #1
 8003f00:	e000      	b.n	8003f04 <HAL_RCC_OscConfig+0x4b4>
    }
  }
  
  return HAL_OK;
 8003f02:	2300      	movs	r3, #0
}
 8003f04:	4618      	mov	r0, r3
 8003f06:	3718      	adds	r7, #24
 8003f08:	46bd      	mov	sp, r7
 8003f0a:	bd80      	pop	{r7, pc}
 8003f0c:	40021000 	.word	0x40021000
 8003f10:	40007000 	.word	0x40007000
 8003f14:	42420060 	.word	0x42420060

08003f18 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003f18:	b580      	push	{r7, lr}
 8003f1a:	b084      	sub	sp, #16
 8003f1c:	af00      	add	r7, sp, #0
 8003f1e:	6078      	str	r0, [r7, #4]
 8003f20:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8003f22:	2300      	movs	r3, #0
 8003f24:	60fb      	str	r3, [r7, #12]
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8003f26:	4b72      	ldr	r3, [pc, #456]	; (80040f0 <HAL_RCC_ClockConfig+0x1d8>)
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	f003 0307 	and.w	r3, r3, #7
 8003f2e:	683a      	ldr	r2, [r7, #0]
 8003f30:	429a      	cmp	r2, r3
 8003f32:	d910      	bls.n	8003f56 <HAL_RCC_ClockConfig+0x3e>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f34:	4b6e      	ldr	r3, [pc, #440]	; (80040f0 <HAL_RCC_ClockConfig+0x1d8>)
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	f023 0207 	bic.w	r2, r3, #7
 8003f3c:	496c      	ldr	r1, [pc, #432]	; (80040f0 <HAL_RCC_ClockConfig+0x1d8>)
 8003f3e:	683b      	ldr	r3, [r7, #0]
 8003f40:	4313      	orrs	r3, r2
 8003f42:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003f44:	4b6a      	ldr	r3, [pc, #424]	; (80040f0 <HAL_RCC_ClockConfig+0x1d8>)
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	f003 0307 	and.w	r3, r3, #7
 8003f4c:	683a      	ldr	r2, [r7, #0]
 8003f4e:	429a      	cmp	r2, r3
 8003f50:	d001      	beq.n	8003f56 <HAL_RCC_ClockConfig+0x3e>
    {
      return HAL_ERROR;
 8003f52:	2301      	movs	r3, #1
 8003f54:	e0c8      	b.n	80040e8 <HAL_RCC_ClockConfig+0x1d0>
    }
  }

#endif /* FLASH_ACR_LATENCY */
  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	f003 0302 	and.w	r3, r3, #2
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d008      	beq.n	8003f74 <HAL_RCC_ClockConfig+0x5c>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003f62:	4b64      	ldr	r3, [pc, #400]	; (80040f4 <HAL_RCC_ClockConfig+0x1dc>)
 8003f64:	685b      	ldr	r3, [r3, #4]
 8003f66:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	689b      	ldr	r3, [r3, #8]
 8003f6e:	4961      	ldr	r1, [pc, #388]	; (80040f4 <HAL_RCC_ClockConfig+0x1dc>)
 8003f70:	4313      	orrs	r3, r2
 8003f72:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	f003 0301 	and.w	r3, r3, #1
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d06a      	beq.n	8004056 <HAL_RCC_ClockConfig+0x13e>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	685b      	ldr	r3, [r3, #4]
 8003f84:	2b01      	cmp	r3, #1
 8003f86:	d107      	bne.n	8003f98 <HAL_RCC_ClockConfig+0x80>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003f88:	4b5a      	ldr	r3, [pc, #360]	; (80040f4 <HAL_RCC_ClockConfig+0x1dc>)
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d115      	bne.n	8003fc0 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8003f94:	2301      	movs	r3, #1
 8003f96:	e0a7      	b.n	80040e8 <HAL_RCC_ClockConfig+0x1d0>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	685b      	ldr	r3, [r3, #4]
 8003f9c:	2b02      	cmp	r3, #2
 8003f9e:	d107      	bne.n	8003fb0 <HAL_RCC_ClockConfig+0x98>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003fa0:	4b54      	ldr	r3, [pc, #336]	; (80040f4 <HAL_RCC_ClockConfig+0x1dc>)
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d109      	bne.n	8003fc0 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8003fac:	2301      	movs	r3, #1
 8003fae:	e09b      	b.n	80040e8 <HAL_RCC_ClockConfig+0x1d0>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003fb0:	4b50      	ldr	r3, [pc, #320]	; (80040f4 <HAL_RCC_ClockConfig+0x1dc>)
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	f003 0302 	and.w	r3, r3, #2
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d101      	bne.n	8003fc0 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8003fbc:	2301      	movs	r3, #1
 8003fbe:	e093      	b.n	80040e8 <HAL_RCC_ClockConfig+0x1d0>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003fc0:	4b4c      	ldr	r3, [pc, #304]	; (80040f4 <HAL_RCC_ClockConfig+0x1dc>)
 8003fc2:	685b      	ldr	r3, [r3, #4]
 8003fc4:	f023 0203 	bic.w	r2, r3, #3
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	685b      	ldr	r3, [r3, #4]
 8003fcc:	4949      	ldr	r1, [pc, #292]	; (80040f4 <HAL_RCC_ClockConfig+0x1dc>)
 8003fce:	4313      	orrs	r3, r2
 8003fd0:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003fd2:	f7fe f899 	bl	8002108 <HAL_GetTick>
 8003fd6:	60f8      	str	r0, [r7, #12]
    
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	685b      	ldr	r3, [r3, #4]
 8003fdc:	2b01      	cmp	r3, #1
 8003fde:	d112      	bne.n	8004006 <HAL_RCC_ClockConfig+0xee>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8003fe0:	e00a      	b.n	8003ff8 <HAL_RCC_ClockConfig+0xe0>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003fe2:	f7fe f891 	bl	8002108 <HAL_GetTick>
 8003fe6:	4602      	mov	r2, r0
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	1ad3      	subs	r3, r2, r3
 8003fec:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ff0:	4293      	cmp	r3, r2
 8003ff2:	d901      	bls.n	8003ff8 <HAL_RCC_ClockConfig+0xe0>
        {
          return HAL_TIMEOUT;
 8003ff4:	2303      	movs	r3, #3
 8003ff6:	e077      	b.n	80040e8 <HAL_RCC_ClockConfig+0x1d0>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8003ff8:	4b3e      	ldr	r3, [pc, #248]	; (80040f4 <HAL_RCC_ClockConfig+0x1dc>)
 8003ffa:	685b      	ldr	r3, [r3, #4]
 8003ffc:	f003 030c 	and.w	r3, r3, #12
 8004000:	2b04      	cmp	r3, #4
 8004002:	d1ee      	bne.n	8003fe2 <HAL_RCC_ClockConfig+0xca>
 8004004:	e027      	b.n	8004056 <HAL_RCC_ClockConfig+0x13e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	685b      	ldr	r3, [r3, #4]
 800400a:	2b02      	cmp	r3, #2
 800400c:	d11d      	bne.n	800404a <HAL_RCC_ClockConfig+0x132>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800400e:	e00a      	b.n	8004026 <HAL_RCC_ClockConfig+0x10e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004010:	f7fe f87a 	bl	8002108 <HAL_GetTick>
 8004014:	4602      	mov	r2, r0
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	1ad3      	subs	r3, r2, r3
 800401a:	f241 3288 	movw	r2, #5000	; 0x1388
 800401e:	4293      	cmp	r3, r2
 8004020:	d901      	bls.n	8004026 <HAL_RCC_ClockConfig+0x10e>
        {
          return HAL_TIMEOUT;
 8004022:	2303      	movs	r3, #3
 8004024:	e060      	b.n	80040e8 <HAL_RCC_ClockConfig+0x1d0>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004026:	4b33      	ldr	r3, [pc, #204]	; (80040f4 <HAL_RCC_ClockConfig+0x1dc>)
 8004028:	685b      	ldr	r3, [r3, #4]
 800402a:	f003 030c 	and.w	r3, r3, #12
 800402e:	2b08      	cmp	r3, #8
 8004030:	d1ee      	bne.n	8004010 <HAL_RCC_ClockConfig+0xf8>
 8004032:	e010      	b.n	8004056 <HAL_RCC_ClockConfig+0x13e>
    }
    else
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004034:	f7fe f868 	bl	8002108 <HAL_GetTick>
 8004038:	4602      	mov	r2, r0
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	1ad3      	subs	r3, r2, r3
 800403e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004042:	4293      	cmp	r3, r2
 8004044:	d901      	bls.n	800404a <HAL_RCC_ClockConfig+0x132>
        {
          return HAL_TIMEOUT;
 8004046:	2303      	movs	r3, #3
 8004048:	e04e      	b.n	80040e8 <HAL_RCC_ClockConfig+0x1d0>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800404a:	4b2a      	ldr	r3, [pc, #168]	; (80040f4 <HAL_RCC_ClockConfig+0x1dc>)
 800404c:	685b      	ldr	r3, [r3, #4]
 800404e:	f003 030c 	and.w	r3, r3, #12
 8004052:	2b00      	cmp	r3, #0
 8004054:	d1ee      	bne.n	8004034 <HAL_RCC_ClockConfig+0x11c>
      }
    }      
  }    
#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 8004056:	4b26      	ldr	r3, [pc, #152]	; (80040f0 <HAL_RCC_ClockConfig+0x1d8>)
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	f003 0307 	and.w	r3, r3, #7
 800405e:	683a      	ldr	r2, [r7, #0]
 8004060:	429a      	cmp	r2, r3
 8004062:	d210      	bcs.n	8004086 <HAL_RCC_ClockConfig+0x16e>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004064:	4b22      	ldr	r3, [pc, #136]	; (80040f0 <HAL_RCC_ClockConfig+0x1d8>)
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	f023 0207 	bic.w	r2, r3, #7
 800406c:	4920      	ldr	r1, [pc, #128]	; (80040f0 <HAL_RCC_ClockConfig+0x1d8>)
 800406e:	683b      	ldr	r3, [r7, #0]
 8004070:	4313      	orrs	r3, r2
 8004072:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8004074:	4b1e      	ldr	r3, [pc, #120]	; (80040f0 <HAL_RCC_ClockConfig+0x1d8>)
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	f003 0307 	and.w	r3, r3, #7
 800407c:	683a      	ldr	r2, [r7, #0]
 800407e:	429a      	cmp	r2, r3
 8004080:	d001      	beq.n	8004086 <HAL_RCC_ClockConfig+0x16e>
    {
      return HAL_ERROR;
 8004082:	2301      	movs	r3, #1
 8004084:	e030      	b.n	80040e8 <HAL_RCC_ClockConfig+0x1d0>
    }
  }    
#endif /* FLASH_ACR_LATENCY */

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	f003 0304 	and.w	r3, r3, #4
 800408e:	2b00      	cmp	r3, #0
 8004090:	d008      	beq.n	80040a4 <HAL_RCC_ClockConfig+0x18c>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004092:	4b18      	ldr	r3, [pc, #96]	; (80040f4 <HAL_RCC_ClockConfig+0x1dc>)
 8004094:	685b      	ldr	r3, [r3, #4]
 8004096:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	68db      	ldr	r3, [r3, #12]
 800409e:	4915      	ldr	r1, [pc, #84]	; (80040f4 <HAL_RCC_ClockConfig+0x1dc>)
 80040a0:	4313      	orrs	r3, r2
 80040a2:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	f003 0308 	and.w	r3, r3, #8
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d009      	beq.n	80040c4 <HAL_RCC_ClockConfig+0x1ac>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80040b0:	4b10      	ldr	r3, [pc, #64]	; (80040f4 <HAL_RCC_ClockConfig+0x1dc>)
 80040b2:	685b      	ldr	r3, [r3, #4]
 80040b4:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	691b      	ldr	r3, [r3, #16]
 80040bc:	00db      	lsls	r3, r3, #3
 80040be:	490d      	ldr	r1, [pc, #52]	; (80040f4 <HAL_RCC_ClockConfig+0x1dc>)
 80040c0:	4313      	orrs	r3, r2
 80040c2:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80040c4:	f000 f81c 	bl	8004100 <HAL_RCC_GetSysClockFreq>
 80040c8:	4601      	mov	r1, r0
 80040ca:	4b0a      	ldr	r3, [pc, #40]	; (80040f4 <HAL_RCC_ClockConfig+0x1dc>)
 80040cc:	685b      	ldr	r3, [r3, #4]
 80040ce:	091b      	lsrs	r3, r3, #4
 80040d0:	f003 030f 	and.w	r3, r3, #15
 80040d4:	4a08      	ldr	r2, [pc, #32]	; (80040f8 <HAL_RCC_ClockConfig+0x1e0>)
 80040d6:	5cd3      	ldrb	r3, [r2, r3]
 80040d8:	fa21 f303 	lsr.w	r3, r1, r3
 80040dc:	4a07      	ldr	r2, [pc, #28]	; (80040fc <HAL_RCC_ClockConfig+0x1e4>)
 80040de:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 80040e0:	2000      	movs	r0, #0
 80040e2:	f7fd ffe7 	bl	80020b4 <HAL_InitTick>
  
  return HAL_OK;
 80040e6:	2300      	movs	r3, #0
}
 80040e8:	4618      	mov	r0, r3
 80040ea:	3710      	adds	r7, #16
 80040ec:	46bd      	mov	sp, r7
 80040ee:	bd80      	pop	{r7, pc}
 80040f0:	40022000 	.word	0x40022000
 80040f4:	40021000 	.word	0x40021000
 80040f8:	08008710 	.word	0x08008710
 80040fc:	2000000c 	.word	0x2000000c

08004100 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004100:	b490      	push	{r4, r7}
 8004102:	b08a      	sub	sp, #40	; 0x28
 8004104:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8004106:	4b2a      	ldr	r3, [pc, #168]	; (80041b0 <HAL_RCC_GetSysClockFreq+0xb0>)
 8004108:	1d3c      	adds	r4, r7, #4
 800410a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800410c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8004110:	4b28      	ldr	r3, [pc, #160]	; (80041b4 <HAL_RCC_GetSysClockFreq+0xb4>)
 8004112:	881b      	ldrh	r3, [r3, #0]
 8004114:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004116:	2300      	movs	r3, #0
 8004118:	61fb      	str	r3, [r7, #28]
 800411a:	2300      	movs	r3, #0
 800411c:	61bb      	str	r3, [r7, #24]
 800411e:	2300      	movs	r3, #0
 8004120:	627b      	str	r3, [r7, #36]	; 0x24
 8004122:	2300      	movs	r3, #0
 8004124:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8004126:	2300      	movs	r3, #0
 8004128:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/
  
  tmpreg = RCC->CFGR;
 800412a:	4b23      	ldr	r3, [pc, #140]	; (80041b8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800412c:	685b      	ldr	r3, [r3, #4]
 800412e:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004130:	69fb      	ldr	r3, [r7, #28]
 8004132:	f003 030c 	and.w	r3, r3, #12
 8004136:	2b04      	cmp	r3, #4
 8004138:	d002      	beq.n	8004140 <HAL_RCC_GetSysClockFreq+0x40>
 800413a:	2b08      	cmp	r3, #8
 800413c:	d003      	beq.n	8004146 <HAL_RCC_GetSysClockFreq+0x46>
 800413e:	e02d      	b.n	800419c <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004140:	4b1e      	ldr	r3, [pc, #120]	; (80041bc <HAL_RCC_GetSysClockFreq+0xbc>)
 8004142:	623b      	str	r3, [r7, #32]
      break;
 8004144:	e02d      	b.n	80041a2 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004146:	69fb      	ldr	r3, [r7, #28]
 8004148:	0c9b      	lsrs	r3, r3, #18
 800414a:	f003 030f 	and.w	r3, r3, #15
 800414e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8004152:	4413      	add	r3, r2
 8004154:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8004158:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800415a:	69fb      	ldr	r3, [r7, #28]
 800415c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004160:	2b00      	cmp	r3, #0
 8004162:	d013      	beq.n	800418c <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004164:	4b14      	ldr	r3, [pc, #80]	; (80041b8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004166:	685b      	ldr	r3, [r3, #4]
 8004168:	0c5b      	lsrs	r3, r3, #17
 800416a:	f003 0301 	and.w	r3, r3, #1
 800416e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8004172:	4413      	add	r3, r2
 8004174:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8004178:	61bb      	str	r3, [r7, #24]
        {
            pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE / prediv) * pllmul);
 800417a:	4a10      	ldr	r2, [pc, #64]	; (80041bc <HAL_RCC_GetSysClockFreq+0xbc>)
 800417c:	69bb      	ldr	r3, [r7, #24]
 800417e:	fbb2 f2f3 	udiv	r2, r2, r3
 8004182:	697b      	ldr	r3, [r7, #20]
 8004184:	fb02 f303 	mul.w	r3, r2, r3
 8004188:	627b      	str	r3, [r7, #36]	; 0x24
 800418a:	e004      	b.n	8004196 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800418c:	697b      	ldr	r3, [r7, #20]
 800418e:	4a0c      	ldr	r2, [pc, #48]	; (80041c0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004190:	fb02 f303 	mul.w	r3, r2, r3
 8004194:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8004196:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004198:	623b      	str	r3, [r7, #32]
      break;
 800419a:	e002      	b.n	80041a2 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800419c:	4b07      	ldr	r3, [pc, #28]	; (80041bc <HAL_RCC_GetSysClockFreq+0xbc>)
 800419e:	623b      	str	r3, [r7, #32]
      break;
 80041a0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80041a2:	6a3b      	ldr	r3, [r7, #32]
}
 80041a4:	4618      	mov	r0, r3
 80041a6:	3728      	adds	r7, #40	; 0x28
 80041a8:	46bd      	mov	sp, r7
 80041aa:	bc90      	pop	{r4, r7}
 80041ac:	4770      	bx	lr
 80041ae:	bf00      	nop
 80041b0:	080086fc 	.word	0x080086fc
 80041b4:	0800870c 	.word	0x0800870c
 80041b8:	40021000 	.word	0x40021000
 80041bc:	007a1200 	.word	0x007a1200
 80041c0:	003d0900 	.word	0x003d0900

080041c4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80041c4:	b480      	push	{r7}
 80041c6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80041c8:	4b02      	ldr	r3, [pc, #8]	; (80041d4 <HAL_RCC_GetHCLKFreq+0x10>)
 80041ca:	681b      	ldr	r3, [r3, #0]
}
 80041cc:	4618      	mov	r0, r3
 80041ce:	46bd      	mov	sp, r7
 80041d0:	bc80      	pop	{r7}
 80041d2:	4770      	bx	lr
 80041d4:	2000000c 	.word	0x2000000c

080041d8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80041d8:	b580      	push	{r7, lr}
 80041da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80041dc:	f7ff fff2 	bl	80041c4 <HAL_RCC_GetHCLKFreq>
 80041e0:	4601      	mov	r1, r0
 80041e2:	4b05      	ldr	r3, [pc, #20]	; (80041f8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80041e4:	685b      	ldr	r3, [r3, #4]
 80041e6:	0a1b      	lsrs	r3, r3, #8
 80041e8:	f003 0307 	and.w	r3, r3, #7
 80041ec:	4a03      	ldr	r2, [pc, #12]	; (80041fc <HAL_RCC_GetPCLK1Freq+0x24>)
 80041ee:	5cd3      	ldrb	r3, [r2, r3]
 80041f0:	fa21 f303 	lsr.w	r3, r1, r3
}    
 80041f4:	4618      	mov	r0, r3
 80041f6:	bd80      	pop	{r7, pc}
 80041f8:	40021000 	.word	0x40021000
 80041fc:	08008720 	.word	0x08008720

08004200 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004200:	b480      	push	{r7}
 8004202:	b085      	sub	sp, #20
 8004204:	af00      	add	r7, sp, #0
 8004206:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004208:	4b0a      	ldr	r3, [pc, #40]	; (8004234 <RCC_Delay+0x34>)
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	4a0a      	ldr	r2, [pc, #40]	; (8004238 <RCC_Delay+0x38>)
 800420e:	fba2 2303 	umull	r2, r3, r2, r3
 8004212:	0a5b      	lsrs	r3, r3, #9
 8004214:	687a      	ldr	r2, [r7, #4]
 8004216:	fb02 f303 	mul.w	r3, r2, r3
 800421a:	60fb      	str	r3, [r7, #12]
  \brief   No Operation
  \details No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__((always_inline)) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
 800421c:	bf00      	nop
  do 
  {
    __NOP();
  } 
  while (Delay --);
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	1e5a      	subs	r2, r3, #1
 8004222:	60fa      	str	r2, [r7, #12]
 8004224:	2b00      	cmp	r3, #0
 8004226:	d1f9      	bne.n	800421c <RCC_Delay+0x1c>
}
 8004228:	bf00      	nop
 800422a:	3714      	adds	r7, #20
 800422c:	46bd      	mov	sp, r7
 800422e:	bc80      	pop	{r7}
 8004230:	4770      	bx	lr
 8004232:	bf00      	nop
 8004234:	2000000c 	.word	0x2000000c
 8004238:	10624dd3 	.word	0x10624dd3

0800423c <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800423c:	b580      	push	{r7, lr}
 800423e:	b086      	sub	sp, #24
 8004240:	af00      	add	r7, sp, #0
 8004242:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8004244:	2300      	movs	r3, #0
 8004246:	613b      	str	r3, [r7, #16]
 8004248:	2300      	movs	r3, #0
 800424a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*------------------------------- RTC/LCD Configuration ------------------------*/ 
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	f003 0301 	and.w	r3, r3, #1
 8004254:	2b00      	cmp	r3, #0
 8004256:	d07d      	beq.n	8004354 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 8004258:	2300      	movs	r3, #0
 800425a:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800425c:	4b4f      	ldr	r3, [pc, #316]	; (800439c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800425e:	69db      	ldr	r3, [r3, #28]
 8004260:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004264:	2b00      	cmp	r3, #0
 8004266:	d10d      	bne.n	8004284 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004268:	4b4c      	ldr	r3, [pc, #304]	; (800439c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800426a:	69db      	ldr	r3, [r3, #28]
 800426c:	4a4b      	ldr	r2, [pc, #300]	; (800439c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800426e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004272:	61d3      	str	r3, [r2, #28]
 8004274:	4b49      	ldr	r3, [pc, #292]	; (800439c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004276:	69db      	ldr	r3, [r3, #28]
 8004278:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800427c:	60bb      	str	r3, [r7, #8]
 800427e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004280:	2301      	movs	r3, #1
 8004282:	75fb      	strb	r3, [r7, #23]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004284:	4b46      	ldr	r3, [pc, #280]	; (80043a0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800428c:	2b00      	cmp	r3, #0
 800428e:	d118      	bne.n	80042c2 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004290:	4b43      	ldr	r3, [pc, #268]	; (80043a0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	4a42      	ldr	r2, [pc, #264]	; (80043a0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004296:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800429a:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800429c:	f7fd ff34 	bl	8002108 <HAL_GetTick>
 80042a0:	6138      	str	r0, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80042a2:	e008      	b.n	80042b6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80042a4:	f7fd ff30 	bl	8002108 <HAL_GetTick>
 80042a8:	4602      	mov	r2, r0
 80042aa:	693b      	ldr	r3, [r7, #16]
 80042ac:	1ad3      	subs	r3, r2, r3
 80042ae:	2b64      	cmp	r3, #100	; 0x64
 80042b0:	d901      	bls.n	80042b6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80042b2:	2303      	movs	r3, #3
 80042b4:	e06d      	b.n	8004392 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80042b6:	4b3a      	ldr	r3, [pc, #232]	; (80043a0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d0f0      	beq.n	80042a4 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }
      
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80042c2:	4b36      	ldr	r3, [pc, #216]	; (800439c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80042c4:	6a1b      	ldr	r3, [r3, #32]
 80042c6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80042ca:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d02e      	beq.n	8004330 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	685b      	ldr	r3, [r3, #4]
 80042d6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80042da:	68fa      	ldr	r2, [r7, #12]
 80042dc:	429a      	cmp	r2, r3
 80042de:	d027      	beq.n	8004330 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80042e0:	4b2e      	ldr	r3, [pc, #184]	; (800439c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80042e2:	6a1b      	ldr	r3, [r3, #32]
 80042e4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80042e8:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80042ea:	4b2e      	ldr	r3, [pc, #184]	; (80043a4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80042ec:	2201      	movs	r2, #1
 80042ee:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80042f0:	4b2c      	ldr	r3, [pc, #176]	; (80043a4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80042f2:	2200      	movs	r2, #0
 80042f4:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80042f6:	4a29      	ldr	r2, [pc, #164]	; (800439c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	f003 0301 	and.w	r3, r3, #1
 8004302:	2b00      	cmp	r3, #0
 8004304:	d014      	beq.n	8004330 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004306:	f7fd feff 	bl	8002108 <HAL_GetTick>
 800430a:	6138      	str	r0, [r7, #16]
      
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800430c:	e00a      	b.n	8004324 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800430e:	f7fd fefb 	bl	8002108 <HAL_GetTick>
 8004312:	4602      	mov	r2, r0
 8004314:	693b      	ldr	r3, [r7, #16]
 8004316:	1ad3      	subs	r3, r2, r3
 8004318:	f241 3288 	movw	r2, #5000	; 0x1388
 800431c:	4293      	cmp	r3, r2
 800431e:	d901      	bls.n	8004324 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8004320:	2303      	movs	r3, #3
 8004322:	e036      	b.n	8004392 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004324:	4b1d      	ldr	r3, [pc, #116]	; (800439c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004326:	6a1b      	ldr	r3, [r3, #32]
 8004328:	f003 0302 	and.w	r3, r3, #2
 800432c:	2b00      	cmp	r3, #0
 800432e:	d0ee      	beq.n	800430e <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8004330:	4b1a      	ldr	r3, [pc, #104]	; (800439c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004332:	6a1b      	ldr	r3, [r3, #32]
 8004334:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	685b      	ldr	r3, [r3, #4]
 800433c:	4917      	ldr	r1, [pc, #92]	; (800439c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800433e:	4313      	orrs	r3, r2
 8004340:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004342:	7dfb      	ldrb	r3, [r7, #23]
 8004344:	2b01      	cmp	r3, #1
 8004346:	d105      	bne.n	8004354 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004348:	4b14      	ldr	r3, [pc, #80]	; (800439c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800434a:	69db      	ldr	r3, [r3, #28]
 800434c:	4a13      	ldr	r2, [pc, #76]	; (800439c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800434e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004352:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	f003 0302 	and.w	r3, r3, #2
 800435c:	2b00      	cmp	r3, #0
 800435e:	d008      	beq.n	8004372 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));
    
    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004360:	4b0e      	ldr	r3, [pc, #56]	; (800439c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004362:	685b      	ldr	r3, [r3, #4]
 8004364:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	689b      	ldr	r3, [r3, #8]
 800436c:	490b      	ldr	r1, [pc, #44]	; (800439c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800436e:	4313      	orrs	r3, r2
 8004370:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	f003 0310 	and.w	r3, r3, #16
 800437a:	2b00      	cmp	r3, #0
 800437c:	d008      	beq.n	8004390 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800437e:	4b07      	ldr	r3, [pc, #28]	; (800439c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004380:	685b      	ldr	r3, [r3, #4]
 8004382:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	68db      	ldr	r3, [r3, #12]
 800438a:	4904      	ldr	r1, [pc, #16]	; (800439c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800438c:	4313      	orrs	r3, r2
 800438e:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8004390:	2300      	movs	r3, #0
}
 8004392:	4618      	mov	r0, r3
 8004394:	3718      	adds	r7, #24
 8004396:	46bd      	mov	sp, r7
 8004398:	bd80      	pop	{r7, pc}
 800439a:	bf00      	nop
 800439c:	40021000 	.word	0x40021000
 80043a0:	40007000 	.word	0x40007000
 80043a4:	42420440 	.word	0x42420440

080043a8 <HAL_TIM_PWM_Init>:
  *         parameters in the TIM_HandleTypeDef and create the associated handle.
  * @param  htim : TIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80043a8:	b580      	push	{r7, lr}
 80043aa:	b082      	sub	sp, #8
 80043ac:	af00      	add	r7, sp, #0
 80043ae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if(htim == NULL)
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d101      	bne.n	80043ba <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80043b6:	2301      	movs	r3, #1
 80043b8:	e01d      	b.n	80043f6 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if(htim->State == HAL_TIM_STATE_RESET)
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80043c0:	b2db      	uxtb	r3, r3
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d106      	bne.n	80043d4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	2200      	movs	r2, #0
 80043ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80043ce:	6878      	ldr	r0, [r7, #4]
 80043d0:	f7fd fb70 	bl	8001ab4 <HAL_TIM_PWM_MspInit>
  }

  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	2202      	movs	r2, #2
 80043d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681a      	ldr	r2, [r3, #0]
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	3304      	adds	r3, #4
 80043e4:	4619      	mov	r1, r3
 80043e6:	4610      	mov	r0, r2
 80043e8:	f000 f8f8 	bl	80045dc <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	2201      	movs	r2, #1
 80043f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80043f4:	2300      	movs	r3, #0
}
 80043f6:	4618      	mov	r0, r3
 80043f8:	3708      	adds	r7, #8
 80043fa:	46bd      	mov	sp, r7
 80043fc:	bd80      	pop	{r7, pc}
	...

08004400 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004400:	b580      	push	{r7, lr}
 8004402:	b082      	sub	sp, #8
 8004404:	af00      	add	r7, sp, #0
 8004406:	6078      	str	r0, [r7, #4]
 8004408:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	2201      	movs	r2, #1
 8004410:	6839      	ldr	r1, [r7, #0]
 8004412:	4618      	mov	r0, r3
 8004414:	f000 fae8 	bl	80049e8 <TIM_CCxChannelCmd>

  if(IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	4a0b      	ldr	r2, [pc, #44]	; (800444c <HAL_TIM_PWM_Start+0x4c>)
 800441e:	4293      	cmp	r3, r2
 8004420:	d107      	bne.n	8004432 <HAL_TIM_PWM_Start+0x32>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004430:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	681a      	ldr	r2, [r3, #0]
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	f042 0201 	orr.w	r2, r2, #1
 8004440:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8004442:	2300      	movs	r3, #0
}
 8004444:	4618      	mov	r0, r3
 8004446:	3708      	adds	r7, #8
 8004448:	46bd      	mov	sp, r7
 800444a:	bd80      	pop	{r7, pc}
 800444c:	40012c00 	.word	0x40012c00

08004450 <HAL_TIM_PWM_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim, TIM_OC_InitTypeDef* sConfig, uint32_t Channel)
{
 8004450:	b580      	push	{r7, lr}
 8004452:	b084      	sub	sp, #16
 8004454:	af00      	add	r7, sp, #0
 8004456:	60f8      	str	r0, [r7, #12]
 8004458:	60b9      	str	r1, [r7, #8]
 800445a:	607a      	str	r2, [r7, #4]
  __HAL_LOCK(htim);
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004462:	2b01      	cmp	r3, #1
 8004464:	d101      	bne.n	800446a <HAL_TIM_PWM_ConfigChannel+0x1a>
 8004466:	2302      	movs	r3, #2
 8004468:	e0b4      	b.n	80045d4 <HAL_TIM_PWM_ConfigChannel+0x184>
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	2201      	movs	r2, #1
 800446e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  htim->State = HAL_TIM_STATE_BUSY;
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	2202      	movs	r2, #2
 8004476:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	2b0c      	cmp	r3, #12
 800447e:	f200 809f 	bhi.w	80045c0 <HAL_TIM_PWM_ConfigChannel+0x170>
 8004482:	a201      	add	r2, pc, #4	; (adr r2, 8004488 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8004484:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004488:	080044bd 	.word	0x080044bd
 800448c:	080045c1 	.word	0x080045c1
 8004490:	080045c1 	.word	0x080045c1
 8004494:	080045c1 	.word	0x080045c1
 8004498:	080044fd 	.word	0x080044fd
 800449c:	080045c1 	.word	0x080045c1
 80044a0:	080045c1 	.word	0x080045c1
 80044a4:	080045c1 	.word	0x080045c1
 80044a8:	0800453f 	.word	0x0800453f
 80044ac:	080045c1 	.word	0x080045c1
 80044b0:	080045c1 	.word	0x080045c1
 80044b4:	080045c1 	.word	0x080045c1
 80044b8:	0800457f 	.word	0x0800457f
  {
    case TIM_CHANNEL_1:
    {
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	68b9      	ldr	r1, [r7, #8]
 80044c2:	4618      	mov	r0, r3
 80044c4:	f000 f8f0 	bl	80046a8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	699a      	ldr	r2, [r3, #24]
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	f042 0208 	orr.w	r2, r2, #8
 80044d6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	699a      	ldr	r2, [r3, #24]
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	f022 0204 	bic.w	r2, r2, #4
 80044e6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	6999      	ldr	r1, [r3, #24]
 80044ee:	68bb      	ldr	r3, [r7, #8]
 80044f0:	691a      	ldr	r2, [r3, #16]
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	430a      	orrs	r2, r1
 80044f8:	619a      	str	r2, [r3, #24]
    }
    break;
 80044fa:	e062      	b.n	80045c2 <HAL_TIM_PWM_ConfigChannel+0x172>

    case TIM_CHANNEL_2:
    {
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	68b9      	ldr	r1, [r7, #8]
 8004502:	4618      	mov	r0, r3
 8004504:	f000 f93c 	bl	8004780 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	699a      	ldr	r2, [r3, #24]
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004516:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	699a      	ldr	r2, [r3, #24]
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004526:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8;
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	6999      	ldr	r1, [r3, #24]
 800452e:	68bb      	ldr	r3, [r7, #8]
 8004530:	691b      	ldr	r3, [r3, #16]
 8004532:	021a      	lsls	r2, r3, #8
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	430a      	orrs	r2, r1
 800453a:	619a      	str	r2, [r3, #24]
    }
    break;
 800453c:	e041      	b.n	80045c2 <HAL_TIM_PWM_ConfigChannel+0x172>

    case TIM_CHANNEL_3:
    {
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));
      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	68b9      	ldr	r1, [r7, #8]
 8004544:	4618      	mov	r0, r3
 8004546:	f000 f98b 	bl	8004860 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	69da      	ldr	r2, [r3, #28]
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	f042 0208 	orr.w	r2, r2, #8
 8004558:	61da      	str	r2, [r3, #28]

     /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	69da      	ldr	r2, [r3, #28]
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	f022 0204 	bic.w	r2, r2, #4
 8004568:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	69d9      	ldr	r1, [r3, #28]
 8004570:	68bb      	ldr	r3, [r7, #8]
 8004572:	691a      	ldr	r2, [r3, #16]
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	430a      	orrs	r2, r1
 800457a:	61da      	str	r2, [r3, #28]
    }
    break;
 800457c:	e021      	b.n	80045c2 <HAL_TIM_PWM_ConfigChannel+0x172>

    case TIM_CHANNEL_4:
    {
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));
      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	68b9      	ldr	r1, [r7, #8]
 8004584:	4618      	mov	r0, r3
 8004586:	f000 f9db 	bl	8004940 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	69da      	ldr	r2, [r3, #28]
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004598:	61da      	str	r2, [r3, #28]

     /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	69da      	ldr	r2, [r3, #28]
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80045a8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8;
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	69d9      	ldr	r1, [r3, #28]
 80045b0:	68bb      	ldr	r3, [r7, #8]
 80045b2:	691b      	ldr	r3, [r3, #16]
 80045b4:	021a      	lsls	r2, r3, #8
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	430a      	orrs	r2, r1
 80045bc:	61da      	str	r2, [r3, #28]
    }
    break;
 80045be:	e000      	b.n	80045c2 <HAL_TIM_PWM_ConfigChannel+0x172>

    default:
    break;
 80045c0:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	2201      	movs	r2, #1
 80045c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	2200      	movs	r2, #0
 80045ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80045d2:	2300      	movs	r3, #0
}
 80045d4:	4618      	mov	r0, r3
 80045d6:	3710      	adds	r7, #16
 80045d8:	46bd      	mov	sp, r7
 80045da:	bd80      	pop	{r7, pc}

080045dc <TIM_Base_SetConfig>:
  * @param  TIMx : TIM periheral
  * @param  Structure : TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80045dc:	b480      	push	{r7}
 80045de:	b085      	sub	sp, #20
 80045e0:	af00      	add	r7, sp, #0
 80045e2:	6078      	str	r0, [r7, #4]
 80045e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1 = 0U;
 80045e6:	2300      	movs	r3, #0
 80045e8:	60fb      	str	r3, [r7, #12]
  tmpcr1 = TIMx->CR1;
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	4a2a      	ldr	r2, [pc, #168]	; (800469c <TIM_Base_SetConfig+0xc0>)
 80045f4:	4293      	cmp	r3, r2
 80045f6:	d00b      	beq.n	8004610 <TIM_Base_SetConfig+0x34>
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80045fe:	d007      	beq.n	8004610 <TIM_Base_SetConfig+0x34>
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	4a27      	ldr	r2, [pc, #156]	; (80046a0 <TIM_Base_SetConfig+0xc4>)
 8004604:	4293      	cmp	r3, r2
 8004606:	d003      	beq.n	8004610 <TIM_Base_SetConfig+0x34>
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	4a26      	ldr	r2, [pc, #152]	; (80046a4 <TIM_Base_SetConfig+0xc8>)
 800460c:	4293      	cmp	r3, r2
 800460e:	d108      	bne.n	8004622 <TIM_Base_SetConfig+0x46>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004616:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004618:	683b      	ldr	r3, [r7, #0]
 800461a:	685b      	ldr	r3, [r3, #4]
 800461c:	68fa      	ldr	r2, [r7, #12]
 800461e:	4313      	orrs	r3, r2
 8004620:	60fb      	str	r3, [r7, #12]
  }

  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	4a1d      	ldr	r2, [pc, #116]	; (800469c <TIM_Base_SetConfig+0xc0>)
 8004626:	4293      	cmp	r3, r2
 8004628:	d00b      	beq.n	8004642 <TIM_Base_SetConfig+0x66>
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004630:	d007      	beq.n	8004642 <TIM_Base_SetConfig+0x66>
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	4a1a      	ldr	r2, [pc, #104]	; (80046a0 <TIM_Base_SetConfig+0xc4>)
 8004636:	4293      	cmp	r3, r2
 8004638:	d003      	beq.n	8004642 <TIM_Base_SetConfig+0x66>
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	4a19      	ldr	r2, [pc, #100]	; (80046a4 <TIM_Base_SetConfig+0xc8>)
 800463e:	4293      	cmp	r3, r2
 8004640:	d108      	bne.n	8004654 <TIM_Base_SetConfig+0x78>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004648:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800464a:	683b      	ldr	r3, [r7, #0]
 800464c:	68db      	ldr	r3, [r3, #12]
 800464e:	68fa      	ldr	r2, [r7, #12]
 8004650:	4313      	orrs	r3, r2
 8004652:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  tmpcr1 &= ~TIM_CR1_ARPE;
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800465a:	60fb      	str	r3, [r7, #12]
  tmpcr1 |= (uint32_t)Structure->AutoReloadPreload;
 800465c:	683b      	ldr	r3, [r7, #0]
 800465e:	695b      	ldr	r3, [r3, #20]
 8004660:	68fa      	ldr	r2, [r7, #12]
 8004662:	4313      	orrs	r3, r2
 8004664:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	68fa      	ldr	r2, [r7, #12]
 800466a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800466c:	683b      	ldr	r3, [r7, #0]
 800466e:	689a      	ldr	r2, [r3, #8]
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8004674:	683b      	ldr	r3, [r7, #0]
 8004676:	681a      	ldr	r2, [r3, #0]
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	4a07      	ldr	r2, [pc, #28]	; (800469c <TIM_Base_SetConfig+0xc0>)
 8004680:	4293      	cmp	r3, r2
 8004682:	d103      	bne.n	800468c <TIM_Base_SetConfig+0xb0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004684:	683b      	ldr	r3, [r7, #0]
 8004686:	691a      	ldr	r2, [r3, #16]
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediatly */
  TIMx->EGR = TIM_EGR_UG;
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	2201      	movs	r2, #1
 8004690:	615a      	str	r2, [r3, #20]
}
 8004692:	bf00      	nop
 8004694:	3714      	adds	r7, #20
 8004696:	46bd      	mov	sp, r7
 8004698:	bc80      	pop	{r7}
 800469a:	4770      	bx	lr
 800469c:	40012c00 	.word	0x40012c00
 80046a0:	40000400 	.word	0x40000400
 80046a4:	40000800 	.word	0x40000800

080046a8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config : The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80046a8:	b480      	push	{r7}
 80046aa:	b087      	sub	sp, #28
 80046ac:	af00      	add	r7, sp, #0
 80046ae:	6078      	str	r0, [r7, #4]
 80046b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0U;
 80046b2:	2300      	movs	r3, #0
 80046b4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpccer = 0U;
 80046b6:	2300      	movs	r3, #0
 80046b8:	617b      	str	r3, [r7, #20]
  uint32_t tmpcr2 = 0U;
 80046ba:	2300      	movs	r3, #0
 80046bc:	613b      	str	r3, [r7, #16]

   /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	6a1b      	ldr	r3, [r3, #32]
 80046c2:	f023 0201 	bic.w	r2, r3, #1
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	6a1b      	ldr	r3, [r3, #32]
 80046ce:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	685b      	ldr	r3, [r3, #4]
 80046d4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	699b      	ldr	r3, [r3, #24]
 80046da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80046e2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	f023 0303 	bic.w	r3, r3, #3
 80046ea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80046ec:	683b      	ldr	r3, [r7, #0]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	68fa      	ldr	r2, [r7, #12]
 80046f2:	4313      	orrs	r3, r2
 80046f4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80046f6:	697b      	ldr	r3, [r7, #20]
 80046f8:	f023 0302 	bic.w	r3, r3, #2
 80046fc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80046fe:	683b      	ldr	r3, [r7, #0]
 8004700:	689b      	ldr	r3, [r3, #8]
 8004702:	697a      	ldr	r2, [r7, #20]
 8004704:	4313      	orrs	r3, r2
 8004706:	617b      	str	r3, [r7, #20]

  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	4a1c      	ldr	r2, [pc, #112]	; (800477c <TIM_OC1_SetConfig+0xd4>)
 800470c:	4293      	cmp	r3, r2
 800470e:	d10c      	bne.n	800472a <TIM_OC1_SetConfig+0x82>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004710:	697b      	ldr	r3, [r7, #20]
 8004712:	f023 0308 	bic.w	r3, r3, #8
 8004716:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004718:	683b      	ldr	r3, [r7, #0]
 800471a:	68db      	ldr	r3, [r3, #12]
 800471c:	697a      	ldr	r2, [r7, #20]
 800471e:	4313      	orrs	r3, r2
 8004720:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004722:	697b      	ldr	r3, [r7, #20]
 8004724:	f023 0304 	bic.w	r3, r3, #4
 8004728:	617b      	str	r3, [r7, #20]
  }

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	4a13      	ldr	r2, [pc, #76]	; (800477c <TIM_OC1_SetConfig+0xd4>)
 800472e:	4293      	cmp	r3, r2
 8004730:	d111      	bne.n	8004756 <TIM_OC1_SetConfig+0xae>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004732:	693b      	ldr	r3, [r7, #16]
 8004734:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004738:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800473a:	693b      	ldr	r3, [r7, #16]
 800473c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004740:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004742:	683b      	ldr	r3, [r7, #0]
 8004744:	695b      	ldr	r3, [r3, #20]
 8004746:	693a      	ldr	r2, [r7, #16]
 8004748:	4313      	orrs	r3, r2
 800474a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800474c:	683b      	ldr	r3, [r7, #0]
 800474e:	699b      	ldr	r3, [r3, #24]
 8004750:	693a      	ldr	r2, [r7, #16]
 8004752:	4313      	orrs	r3, r2
 8004754:	613b      	str	r3, [r7, #16]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	693a      	ldr	r2, [r7, #16]
 800475a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	68fa      	ldr	r2, [r7, #12]
 8004760:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004762:	683b      	ldr	r3, [r7, #0]
 8004764:	685a      	ldr	r2, [r3, #4]
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	697a      	ldr	r2, [r7, #20]
 800476e:	621a      	str	r2, [r3, #32]
}
 8004770:	bf00      	nop
 8004772:	371c      	adds	r7, #28
 8004774:	46bd      	mov	sp, r7
 8004776:	bc80      	pop	{r7}
 8004778:	4770      	bx	lr
 800477a:	bf00      	nop
 800477c:	40012c00 	.word	0x40012c00

08004780 <TIM_OC2_SetConfig>:
  * @param  TIMx  to select the TIM peripheral
  * @param  OC_Config : The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004780:	b480      	push	{r7}
 8004782:	b087      	sub	sp, #28
 8004784:	af00      	add	r7, sp, #0
 8004786:	6078      	str	r0, [r7, #4]
 8004788:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0U;
 800478a:	2300      	movs	r3, #0
 800478c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpccer = 0U;
 800478e:	2300      	movs	r3, #0
 8004790:	617b      	str	r3, [r7, #20]
  uint32_t tmpcr2 = 0U;
 8004792:	2300      	movs	r3, #0
 8004794:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	6a1b      	ldr	r3, [r3, #32]
 800479a:	f023 0210 	bic.w	r2, r3, #16
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	6a1b      	ldr	r3, [r3, #32]
 80047a6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	685b      	ldr	r3, [r3, #4]
 80047ac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	699b      	ldr	r3, [r3, #24]
 80047b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80047ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80047c2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80047c4:	683b      	ldr	r3, [r7, #0]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	021b      	lsls	r3, r3, #8
 80047ca:	68fa      	ldr	r2, [r7, #12]
 80047cc:	4313      	orrs	r3, r2
 80047ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80047d0:	697b      	ldr	r3, [r7, #20]
 80047d2:	f023 0320 	bic.w	r3, r3, #32
 80047d6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80047d8:	683b      	ldr	r3, [r7, #0]
 80047da:	689b      	ldr	r3, [r3, #8]
 80047dc:	011b      	lsls	r3, r3, #4
 80047de:	697a      	ldr	r2, [r7, #20]
 80047e0:	4313      	orrs	r3, r2
 80047e2:	617b      	str	r3, [r7, #20]

  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	4a1d      	ldr	r2, [pc, #116]	; (800485c <TIM_OC2_SetConfig+0xdc>)
 80047e8:	4293      	cmp	r3, r2
 80047ea:	d10d      	bne.n	8004808 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80047ec:	697b      	ldr	r3, [r7, #20]
 80047ee:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80047f2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80047f4:	683b      	ldr	r3, [r7, #0]
 80047f6:	68db      	ldr	r3, [r3, #12]
 80047f8:	011b      	lsls	r3, r3, #4
 80047fa:	697a      	ldr	r2, [r7, #20]
 80047fc:	4313      	orrs	r3, r2
 80047fe:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004800:	697b      	ldr	r3, [r7, #20]
 8004802:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004806:	617b      	str	r3, [r7, #20]

  }

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	4a14      	ldr	r2, [pc, #80]	; (800485c <TIM_OC2_SetConfig+0xdc>)
 800480c:	4293      	cmp	r3, r2
 800480e:	d113      	bne.n	8004838 <TIM_OC2_SetConfig+0xb8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004810:	693b      	ldr	r3, [r7, #16]
 8004812:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004816:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004818:	693b      	ldr	r3, [r7, #16]
 800481a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800481e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2);
 8004820:	683b      	ldr	r3, [r7, #0]
 8004822:	695b      	ldr	r3, [r3, #20]
 8004824:	009b      	lsls	r3, r3, #2
 8004826:	693a      	ldr	r2, [r7, #16]
 8004828:	4313      	orrs	r3, r2
 800482a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2);
 800482c:	683b      	ldr	r3, [r7, #0]
 800482e:	699b      	ldr	r3, [r3, #24]
 8004830:	009b      	lsls	r3, r3, #2
 8004832:	693a      	ldr	r2, [r7, #16]
 8004834:	4313      	orrs	r3, r2
 8004836:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	693a      	ldr	r2, [r7, #16]
 800483c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	68fa      	ldr	r2, [r7, #12]
 8004842:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004844:	683b      	ldr	r3, [r7, #0]
 8004846:	685a      	ldr	r2, [r3, #4]
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	697a      	ldr	r2, [r7, #20]
 8004850:	621a      	str	r2, [r3, #32]
}
 8004852:	bf00      	nop
 8004854:	371c      	adds	r7, #28
 8004856:	46bd      	mov	sp, r7
 8004858:	bc80      	pop	{r7}
 800485a:	4770      	bx	lr
 800485c:	40012c00 	.word	0x40012c00

08004860 <TIM_OC3_SetConfig>:
  * @param  TIMx  to select the TIM peripheral
  * @param  OC_Config : The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004860:	b480      	push	{r7}
 8004862:	b087      	sub	sp, #28
 8004864:	af00      	add	r7, sp, #0
 8004866:	6078      	str	r0, [r7, #4]
 8004868:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0U;
 800486a:	2300      	movs	r3, #0
 800486c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpccer = 0U;
 800486e:	2300      	movs	r3, #0
 8004870:	617b      	str	r3, [r7, #20]
  uint32_t tmpcr2 = 0U;
 8004872:	2300      	movs	r3, #0
 8004874:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	6a1b      	ldr	r3, [r3, #32]
 800487a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	6a1b      	ldr	r3, [r3, #32]
 8004886:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	685b      	ldr	r3, [r3, #4]
 800488c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	69db      	ldr	r3, [r3, #28]
 8004892:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800489a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	f023 0303 	bic.w	r3, r3, #3
 80048a2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80048a4:	683b      	ldr	r3, [r7, #0]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	68fa      	ldr	r2, [r7, #12]
 80048aa:	4313      	orrs	r3, r2
 80048ac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80048ae:	697b      	ldr	r3, [r7, #20]
 80048b0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80048b4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80048b6:	683b      	ldr	r3, [r7, #0]
 80048b8:	689b      	ldr	r3, [r3, #8]
 80048ba:	021b      	lsls	r3, r3, #8
 80048bc:	697a      	ldr	r2, [r7, #20]
 80048be:	4313      	orrs	r3, r2
 80048c0:	617b      	str	r3, [r7, #20]

  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	4a1d      	ldr	r2, [pc, #116]	; (800493c <TIM_OC3_SetConfig+0xdc>)
 80048c6:	4293      	cmp	r3, r2
 80048c8:	d10d      	bne.n	80048e6 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80048ca:	697b      	ldr	r3, [r7, #20]
 80048cc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80048d0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80048d2:	683b      	ldr	r3, [r7, #0]
 80048d4:	68db      	ldr	r3, [r3, #12]
 80048d6:	021b      	lsls	r3, r3, #8
 80048d8:	697a      	ldr	r2, [r7, #20]
 80048da:	4313      	orrs	r3, r2
 80048dc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80048de:	697b      	ldr	r3, [r7, #20]
 80048e0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80048e4:	617b      	str	r3, [r7, #20]
  }

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	4a14      	ldr	r2, [pc, #80]	; (800493c <TIM_OC3_SetConfig+0xdc>)
 80048ea:	4293      	cmp	r3, r2
 80048ec:	d113      	bne.n	8004916 <TIM_OC3_SetConfig+0xb6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80048ee:	693b      	ldr	r3, [r7, #16]
 80048f0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80048f4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80048f6:	693b      	ldr	r3, [r7, #16]
 80048f8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80048fc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80048fe:	683b      	ldr	r3, [r7, #0]
 8004900:	695b      	ldr	r3, [r3, #20]
 8004902:	011b      	lsls	r3, r3, #4
 8004904:	693a      	ldr	r2, [r7, #16]
 8004906:	4313      	orrs	r3, r2
 8004908:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800490a:	683b      	ldr	r3, [r7, #0]
 800490c:	699b      	ldr	r3, [r3, #24]
 800490e:	011b      	lsls	r3, r3, #4
 8004910:	693a      	ldr	r2, [r7, #16]
 8004912:	4313      	orrs	r3, r2
 8004914:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	693a      	ldr	r2, [r7, #16]
 800491a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	68fa      	ldr	r2, [r7, #12]
 8004920:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004922:	683b      	ldr	r3, [r7, #0]
 8004924:	685a      	ldr	r2, [r3, #4]
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	697a      	ldr	r2, [r7, #20]
 800492e:	621a      	str	r2, [r3, #32]
}
 8004930:	bf00      	nop
 8004932:	371c      	adds	r7, #28
 8004934:	46bd      	mov	sp, r7
 8004936:	bc80      	pop	{r7}
 8004938:	4770      	bx	lr
 800493a:	bf00      	nop
 800493c:	40012c00 	.word	0x40012c00

08004940 <TIM_OC4_SetConfig>:
  * @param  TIMx  to select the TIM peripheral
  * @param  OC_Config : The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004940:	b480      	push	{r7}
 8004942:	b087      	sub	sp, #28
 8004944:	af00      	add	r7, sp, #0
 8004946:	6078      	str	r0, [r7, #4]
 8004948:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0U;
 800494a:	2300      	movs	r3, #0
 800494c:	613b      	str	r3, [r7, #16]
  uint32_t tmpccer = 0U;
 800494e:	2300      	movs	r3, #0
 8004950:	60fb      	str	r3, [r7, #12]
  uint32_t tmpcr2 = 0U;
 8004952:	2300      	movs	r3, #0
 8004954:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	6a1b      	ldr	r3, [r3, #32]
 800495a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	6a1b      	ldr	r3, [r3, #32]
 8004966:	60fb      	str	r3, [r7, #12]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	685b      	ldr	r3, [r3, #4]
 800496c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	69db      	ldr	r3, [r3, #28]
 8004972:	613b      	str	r3, [r7, #16]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004974:	693b      	ldr	r3, [r7, #16]
 8004976:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800497a:	613b      	str	r3, [r7, #16]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800497c:	693b      	ldr	r3, [r7, #16]
 800497e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004982:	613b      	str	r3, [r7, #16]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004984:	683b      	ldr	r3, [r7, #0]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	021b      	lsls	r3, r3, #8
 800498a:	693a      	ldr	r2, [r7, #16]
 800498c:	4313      	orrs	r3, r2
 800498e:	613b      	str	r3, [r7, #16]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004996:	60fb      	str	r3, [r7, #12]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004998:	683b      	ldr	r3, [r7, #0]
 800499a:	689b      	ldr	r3, [r3, #8]
 800499c:	031b      	lsls	r3, r3, #12
 800499e:	68fa      	ldr	r2, [r7, #12]
 80049a0:	4313      	orrs	r3, r2
 80049a2:	60fb      	str	r3, [r7, #12]

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	4a0f      	ldr	r2, [pc, #60]	; (80049e4 <TIM_OC4_SetConfig+0xa4>)
 80049a8:	4293      	cmp	r3, r2
 80049aa:	d109      	bne.n	80049c0 <TIM_OC4_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

   /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80049ac:	697b      	ldr	r3, [r7, #20]
 80049ae:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80049b2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6);
 80049b4:	683b      	ldr	r3, [r7, #0]
 80049b6:	695b      	ldr	r3, [r3, #20]
 80049b8:	019b      	lsls	r3, r3, #6
 80049ba:	697a      	ldr	r2, [r7, #20]
 80049bc:	4313      	orrs	r3, r2
 80049be:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	697a      	ldr	r2, [r7, #20]
 80049c4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	693a      	ldr	r2, [r7, #16]
 80049ca:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80049cc:	683b      	ldr	r3, [r7, #0]
 80049ce:	685a      	ldr	r2, [r3, #4]
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	68fa      	ldr	r2, [r7, #12]
 80049d8:	621a      	str	r2, [r3, #32]
}
 80049da:	bf00      	nop
 80049dc:	371c      	adds	r7, #28
 80049de:	46bd      	mov	sp, r7
 80049e0:	bc80      	pop	{r7}
 80049e2:	4770      	bx	lr
 80049e4:	40012c00 	.word	0x40012c00

080049e8 <TIM_CCxChannelCmd>:
  * @param  ChannelState : specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_Disable.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef* TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80049e8:	b480      	push	{r7}
 80049ea:	b087      	sub	sp, #28
 80049ec:	af00      	add	r7, sp, #0
 80049ee:	60f8      	str	r0, [r7, #12]
 80049f0:	60b9      	str	r1, [r7, #8]
 80049f2:	607a      	str	r2, [r7, #4]
  uint32_t tmp = 0U;
 80049f4:	2300      	movs	r3, #0
 80049f6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << Channel;
 80049f8:	2201      	movs	r2, #1
 80049fa:	68bb      	ldr	r3, [r7, #8]
 80049fc:	fa02 f303 	lsl.w	r3, r2, r3
 8004a00:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	6a1a      	ldr	r2, [r3, #32]
 8004a06:	697b      	ldr	r3, [r7, #20]
 8004a08:	43db      	mvns	r3, r3
 8004a0a:	401a      	ands	r2, r3
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |=  (uint32_t)(ChannelState << Channel);
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	6a1a      	ldr	r2, [r3, #32]
 8004a14:	6879      	ldr	r1, [r7, #4]
 8004a16:	68bb      	ldr	r3, [r7, #8]
 8004a18:	fa01 f303 	lsl.w	r3, r1, r3
 8004a1c:	431a      	orrs	r2, r3
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	621a      	str	r2, [r3, #32]
}
 8004a22:	bf00      	nop
 8004a24:	371c      	adds	r7, #28
 8004a26:	46bd      	mov	sp, r7
 8004a28:	bc80      	pop	{r7}
 8004a2a:	4770      	bx	lr

08004a2c <HAL_TIMEx_MasterConfigSynchronization>:
  *         contains the selected trigger output (TRGO) and the Master/Slave
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim, TIM_MasterConfigTypeDef * sMasterConfig)
{
 8004a2c:	b480      	push	{r7}
 8004a2e:	b083      	sub	sp, #12
 8004a30:	af00      	add	r7, sp, #0
 8004a32:	6078      	str	r0, [r7, #4]
 8004a34:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  __HAL_LOCK(htim);
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004a3c:	2b01      	cmp	r3, #1
 8004a3e:	d101      	bne.n	8004a44 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004a40:	2302      	movs	r3, #2
 8004a42:	e032      	b.n	8004aaa <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	2201      	movs	r2, #1
 8004a48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	2202      	movs	r2, #2
 8004a50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the MMS Bits */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	685a      	ldr	r2, [r3, #4]
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8004a62:	605a      	str	r2, [r3, #4]
  /* Select the TRGO source */
  htim->Instance->CR2 |=  sMasterConfig->MasterOutputTrigger;
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	6859      	ldr	r1, [r3, #4]
 8004a6a:	683b      	ldr	r3, [r7, #0]
 8004a6c:	681a      	ldr	r2, [r3, #0]
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	430a      	orrs	r2, r1
 8004a74:	605a      	str	r2, [r3, #4]

  /* Reset the MSM Bit */
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	689a      	ldr	r2, [r3, #8]
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004a84:	609a      	str	r2, [r3, #8]
  /* Set or Reset the MSM Bit */
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	6899      	ldr	r1, [r3, #8]
 8004a8c:	683b      	ldr	r3, [r7, #0]
 8004a8e:	685a      	ldr	r2, [r3, #4]
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	430a      	orrs	r2, r1
 8004a96:	609a      	str	r2, [r3, #8]

  htim->State = HAL_TIM_STATE_READY;
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	2201      	movs	r2, #1
 8004a9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	2200      	movs	r2, #0
 8004aa4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004aa8:	2300      	movs	r3, #0
}
 8004aaa:	4618      	mov	r0, r3
 8004aac:	370c      	adds	r7, #12
 8004aae:	46bd      	mov	sp, r7
 8004ab0:	bc80      	pop	{r7}
 8004ab2:	4770      	bx	lr

08004ab4 <__errno>:
 8004ab4:	4b01      	ldr	r3, [pc, #4]	; (8004abc <__errno+0x8>)
 8004ab6:	6818      	ldr	r0, [r3, #0]
 8004ab8:	4770      	bx	lr
 8004aba:	bf00      	nop
 8004abc:	20000018 	.word	0x20000018

08004ac0 <__libc_init_array>:
 8004ac0:	b570      	push	{r4, r5, r6, lr}
 8004ac2:	2500      	movs	r5, #0
 8004ac4:	4e0c      	ldr	r6, [pc, #48]	; (8004af8 <__libc_init_array+0x38>)
 8004ac6:	4c0d      	ldr	r4, [pc, #52]	; (8004afc <__libc_init_array+0x3c>)
 8004ac8:	1ba4      	subs	r4, r4, r6
 8004aca:	10a4      	asrs	r4, r4, #2
 8004acc:	42a5      	cmp	r5, r4
 8004ace:	d109      	bne.n	8004ae4 <__libc_init_array+0x24>
 8004ad0:	f003 fd94 	bl	80085fc <_init>
 8004ad4:	2500      	movs	r5, #0
 8004ad6:	4e0a      	ldr	r6, [pc, #40]	; (8004b00 <__libc_init_array+0x40>)
 8004ad8:	4c0a      	ldr	r4, [pc, #40]	; (8004b04 <__libc_init_array+0x44>)
 8004ada:	1ba4      	subs	r4, r4, r6
 8004adc:	10a4      	asrs	r4, r4, #2
 8004ade:	42a5      	cmp	r5, r4
 8004ae0:	d105      	bne.n	8004aee <__libc_init_array+0x2e>
 8004ae2:	bd70      	pop	{r4, r5, r6, pc}
 8004ae4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004ae8:	4798      	blx	r3
 8004aea:	3501      	adds	r5, #1
 8004aec:	e7ee      	b.n	8004acc <__libc_init_array+0xc>
 8004aee:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004af2:	4798      	blx	r3
 8004af4:	3501      	adds	r5, #1
 8004af6:	e7f2      	b.n	8004ade <__libc_init_array+0x1e>
 8004af8:	08008fd0 	.word	0x08008fd0
 8004afc:	08008fd0 	.word	0x08008fd0
 8004b00:	08008fd0 	.word	0x08008fd0
 8004b04:	08008fd4 	.word	0x08008fd4

08004b08 <memcpy>:
 8004b08:	b510      	push	{r4, lr}
 8004b0a:	1e43      	subs	r3, r0, #1
 8004b0c:	440a      	add	r2, r1
 8004b0e:	4291      	cmp	r1, r2
 8004b10:	d100      	bne.n	8004b14 <memcpy+0xc>
 8004b12:	bd10      	pop	{r4, pc}
 8004b14:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004b18:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004b1c:	e7f7      	b.n	8004b0e <memcpy+0x6>

08004b1e <memmove>:
 8004b1e:	4288      	cmp	r0, r1
 8004b20:	b510      	push	{r4, lr}
 8004b22:	eb01 0302 	add.w	r3, r1, r2
 8004b26:	d807      	bhi.n	8004b38 <memmove+0x1a>
 8004b28:	1e42      	subs	r2, r0, #1
 8004b2a:	4299      	cmp	r1, r3
 8004b2c:	d00a      	beq.n	8004b44 <memmove+0x26>
 8004b2e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004b32:	f802 4f01 	strb.w	r4, [r2, #1]!
 8004b36:	e7f8      	b.n	8004b2a <memmove+0xc>
 8004b38:	4283      	cmp	r3, r0
 8004b3a:	d9f5      	bls.n	8004b28 <memmove+0xa>
 8004b3c:	1881      	adds	r1, r0, r2
 8004b3e:	1ad2      	subs	r2, r2, r3
 8004b40:	42d3      	cmn	r3, r2
 8004b42:	d100      	bne.n	8004b46 <memmove+0x28>
 8004b44:	bd10      	pop	{r4, pc}
 8004b46:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004b4a:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8004b4e:	e7f7      	b.n	8004b40 <memmove+0x22>

08004b50 <memset>:
 8004b50:	4603      	mov	r3, r0
 8004b52:	4402      	add	r2, r0
 8004b54:	4293      	cmp	r3, r2
 8004b56:	d100      	bne.n	8004b5a <memset+0xa>
 8004b58:	4770      	bx	lr
 8004b5a:	f803 1b01 	strb.w	r1, [r3], #1
 8004b5e:	e7f9      	b.n	8004b54 <memset+0x4>

08004b60 <__cvt>:
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004b66:	461e      	mov	r6, r3
 8004b68:	bfbb      	ittet	lt
 8004b6a:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8004b6e:	461e      	movlt	r6, r3
 8004b70:	2300      	movge	r3, #0
 8004b72:	232d      	movlt	r3, #45	; 0x2d
 8004b74:	b088      	sub	sp, #32
 8004b76:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8004b78:	e9dd 1a12 	ldrd	r1, sl, [sp, #72]	; 0x48
 8004b7c:	f027 0720 	bic.w	r7, r7, #32
 8004b80:	2f46      	cmp	r7, #70	; 0x46
 8004b82:	4614      	mov	r4, r2
 8004b84:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8004b86:	700b      	strb	r3, [r1, #0]
 8004b88:	d004      	beq.n	8004b94 <__cvt+0x34>
 8004b8a:	2f45      	cmp	r7, #69	; 0x45
 8004b8c:	d100      	bne.n	8004b90 <__cvt+0x30>
 8004b8e:	3501      	adds	r5, #1
 8004b90:	2302      	movs	r3, #2
 8004b92:	e000      	b.n	8004b96 <__cvt+0x36>
 8004b94:	2303      	movs	r3, #3
 8004b96:	aa07      	add	r2, sp, #28
 8004b98:	9204      	str	r2, [sp, #16]
 8004b9a:	aa06      	add	r2, sp, #24
 8004b9c:	e9cd a202 	strd	sl, r2, [sp, #8]
 8004ba0:	e9cd 3500 	strd	r3, r5, [sp]
 8004ba4:	4622      	mov	r2, r4
 8004ba6:	4633      	mov	r3, r6
 8004ba8:	f001 fdb2 	bl	8006710 <_dtoa_r>
 8004bac:	2f47      	cmp	r7, #71	; 0x47
 8004bae:	4680      	mov	r8, r0
 8004bb0:	d102      	bne.n	8004bb8 <__cvt+0x58>
 8004bb2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8004bb4:	07db      	lsls	r3, r3, #31
 8004bb6:	d526      	bpl.n	8004c06 <__cvt+0xa6>
 8004bb8:	2f46      	cmp	r7, #70	; 0x46
 8004bba:	eb08 0905 	add.w	r9, r8, r5
 8004bbe:	d111      	bne.n	8004be4 <__cvt+0x84>
 8004bc0:	f898 3000 	ldrb.w	r3, [r8]
 8004bc4:	2b30      	cmp	r3, #48	; 0x30
 8004bc6:	d10a      	bne.n	8004bde <__cvt+0x7e>
 8004bc8:	2200      	movs	r2, #0
 8004bca:	2300      	movs	r3, #0
 8004bcc:	4620      	mov	r0, r4
 8004bce:	4631      	mov	r1, r6
 8004bd0:	f7fb feea 	bl	80009a8 <__aeabi_dcmpeq>
 8004bd4:	b918      	cbnz	r0, 8004bde <__cvt+0x7e>
 8004bd6:	f1c5 0501 	rsb	r5, r5, #1
 8004bda:	f8ca 5000 	str.w	r5, [sl]
 8004bde:	f8da 3000 	ldr.w	r3, [sl]
 8004be2:	4499      	add	r9, r3
 8004be4:	2200      	movs	r2, #0
 8004be6:	2300      	movs	r3, #0
 8004be8:	4620      	mov	r0, r4
 8004bea:	4631      	mov	r1, r6
 8004bec:	f7fb fedc 	bl	80009a8 <__aeabi_dcmpeq>
 8004bf0:	b938      	cbnz	r0, 8004c02 <__cvt+0xa2>
 8004bf2:	2230      	movs	r2, #48	; 0x30
 8004bf4:	9b07      	ldr	r3, [sp, #28]
 8004bf6:	454b      	cmp	r3, r9
 8004bf8:	d205      	bcs.n	8004c06 <__cvt+0xa6>
 8004bfa:	1c59      	adds	r1, r3, #1
 8004bfc:	9107      	str	r1, [sp, #28]
 8004bfe:	701a      	strb	r2, [r3, #0]
 8004c00:	e7f8      	b.n	8004bf4 <__cvt+0x94>
 8004c02:	f8cd 901c 	str.w	r9, [sp, #28]
 8004c06:	4640      	mov	r0, r8
 8004c08:	9b07      	ldr	r3, [sp, #28]
 8004c0a:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8004c0c:	eba3 0308 	sub.w	r3, r3, r8
 8004c10:	6013      	str	r3, [r2, #0]
 8004c12:	b008      	add	sp, #32
 8004c14:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08004c18 <__exponent>:
 8004c18:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004c1a:	2900      	cmp	r1, #0
 8004c1c:	bfb4      	ite	lt
 8004c1e:	232d      	movlt	r3, #45	; 0x2d
 8004c20:	232b      	movge	r3, #43	; 0x2b
 8004c22:	4604      	mov	r4, r0
 8004c24:	bfb8      	it	lt
 8004c26:	4249      	neglt	r1, r1
 8004c28:	2909      	cmp	r1, #9
 8004c2a:	f804 2b02 	strb.w	r2, [r4], #2
 8004c2e:	7043      	strb	r3, [r0, #1]
 8004c30:	dd21      	ble.n	8004c76 <__exponent+0x5e>
 8004c32:	f10d 0307 	add.w	r3, sp, #7
 8004c36:	461f      	mov	r7, r3
 8004c38:	260a      	movs	r6, #10
 8004c3a:	fb91 f5f6 	sdiv	r5, r1, r6
 8004c3e:	fb06 1115 	mls	r1, r6, r5, r1
 8004c42:	2d09      	cmp	r5, #9
 8004c44:	f101 0130 	add.w	r1, r1, #48	; 0x30
 8004c48:	f803 1c01 	strb.w	r1, [r3, #-1]
 8004c4c:	f103 32ff 	add.w	r2, r3, #4294967295	; 0xffffffff
 8004c50:	4629      	mov	r1, r5
 8004c52:	dc09      	bgt.n	8004c68 <__exponent+0x50>
 8004c54:	3130      	adds	r1, #48	; 0x30
 8004c56:	3b02      	subs	r3, #2
 8004c58:	f802 1c01 	strb.w	r1, [r2, #-1]
 8004c5c:	42bb      	cmp	r3, r7
 8004c5e:	4622      	mov	r2, r4
 8004c60:	d304      	bcc.n	8004c6c <__exponent+0x54>
 8004c62:	1a10      	subs	r0, r2, r0
 8004c64:	b003      	add	sp, #12
 8004c66:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004c68:	4613      	mov	r3, r2
 8004c6a:	e7e6      	b.n	8004c3a <__exponent+0x22>
 8004c6c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004c70:	f804 2b01 	strb.w	r2, [r4], #1
 8004c74:	e7f2      	b.n	8004c5c <__exponent+0x44>
 8004c76:	2330      	movs	r3, #48	; 0x30
 8004c78:	4419      	add	r1, r3
 8004c7a:	7083      	strb	r3, [r0, #2]
 8004c7c:	1d02      	adds	r2, r0, #4
 8004c7e:	70c1      	strb	r1, [r0, #3]
 8004c80:	e7ef      	b.n	8004c62 <__exponent+0x4a>
	...

08004c84 <_printf_float>:
 8004c84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004c88:	b091      	sub	sp, #68	; 0x44
 8004c8a:	460c      	mov	r4, r1
 8004c8c:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 8004c8e:	4693      	mov	fp, r2
 8004c90:	461e      	mov	r6, r3
 8004c92:	4605      	mov	r5, r0
 8004c94:	f002 fe1e 	bl	80078d4 <_localeconv_r>
 8004c98:	6803      	ldr	r3, [r0, #0]
 8004c9a:	4618      	mov	r0, r3
 8004c9c:	9309      	str	r3, [sp, #36]	; 0x24
 8004c9e:	f7fb fa57 	bl	8000150 <strlen>
 8004ca2:	2300      	movs	r3, #0
 8004ca4:	930e      	str	r3, [sp, #56]	; 0x38
 8004ca6:	683b      	ldr	r3, [r7, #0]
 8004ca8:	900a      	str	r0, [sp, #40]	; 0x28
 8004caa:	3307      	adds	r3, #7
 8004cac:	f023 0307 	bic.w	r3, r3, #7
 8004cb0:	f103 0208 	add.w	r2, r3, #8
 8004cb4:	f894 8018 	ldrb.w	r8, [r4, #24]
 8004cb8:	f8d4 a000 	ldr.w	sl, [r4]
 8004cbc:	603a      	str	r2, [r7, #0]
 8004cbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cc2:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8004cc6:	e9d4 7912 	ldrd	r7, r9, [r4, #72]	; 0x48
 8004cca:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8004cce:	930b      	str	r3, [sp, #44]	; 0x2c
 8004cd0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004cd4:	4ba6      	ldr	r3, [pc, #664]	; (8004f70 <_printf_float+0x2ec>)
 8004cd6:	4638      	mov	r0, r7
 8004cd8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004cda:	f7fb fe97 	bl	8000a0c <__aeabi_dcmpun>
 8004cde:	bb68      	cbnz	r0, 8004d3c <_printf_float+0xb8>
 8004ce0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004ce4:	4ba2      	ldr	r3, [pc, #648]	; (8004f70 <_printf_float+0x2ec>)
 8004ce6:	4638      	mov	r0, r7
 8004ce8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004cea:	f7fb fe71 	bl	80009d0 <__aeabi_dcmple>
 8004cee:	bb28      	cbnz	r0, 8004d3c <_printf_float+0xb8>
 8004cf0:	2200      	movs	r2, #0
 8004cf2:	2300      	movs	r3, #0
 8004cf4:	4638      	mov	r0, r7
 8004cf6:	4649      	mov	r1, r9
 8004cf8:	f7fb fe60 	bl	80009bc <__aeabi_dcmplt>
 8004cfc:	b110      	cbz	r0, 8004d04 <_printf_float+0x80>
 8004cfe:	232d      	movs	r3, #45	; 0x2d
 8004d00:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004d04:	4f9b      	ldr	r7, [pc, #620]	; (8004f74 <_printf_float+0x2f0>)
 8004d06:	4b9c      	ldr	r3, [pc, #624]	; (8004f78 <_printf_float+0x2f4>)
 8004d08:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8004d0c:	bf98      	it	ls
 8004d0e:	461f      	movls	r7, r3
 8004d10:	2303      	movs	r3, #3
 8004d12:	f04f 0900 	mov.w	r9, #0
 8004d16:	6123      	str	r3, [r4, #16]
 8004d18:	f02a 0304 	bic.w	r3, sl, #4
 8004d1c:	6023      	str	r3, [r4, #0]
 8004d1e:	9600      	str	r6, [sp, #0]
 8004d20:	465b      	mov	r3, fp
 8004d22:	aa0f      	add	r2, sp, #60	; 0x3c
 8004d24:	4621      	mov	r1, r4
 8004d26:	4628      	mov	r0, r5
 8004d28:	f000 f9e2 	bl	80050f0 <_printf_common>
 8004d2c:	3001      	adds	r0, #1
 8004d2e:	f040 8090 	bne.w	8004e52 <_printf_float+0x1ce>
 8004d32:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004d36:	b011      	add	sp, #68	; 0x44
 8004d38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004d3c:	463a      	mov	r2, r7
 8004d3e:	464b      	mov	r3, r9
 8004d40:	4638      	mov	r0, r7
 8004d42:	4649      	mov	r1, r9
 8004d44:	f7fb fe62 	bl	8000a0c <__aeabi_dcmpun>
 8004d48:	b110      	cbz	r0, 8004d50 <_printf_float+0xcc>
 8004d4a:	4f8c      	ldr	r7, [pc, #560]	; (8004f7c <_printf_float+0x2f8>)
 8004d4c:	4b8c      	ldr	r3, [pc, #560]	; (8004f80 <_printf_float+0x2fc>)
 8004d4e:	e7db      	b.n	8004d08 <_printf_float+0x84>
 8004d50:	6863      	ldr	r3, [r4, #4]
 8004d52:	f44a 6280 	orr.w	r2, sl, #1024	; 0x400
 8004d56:	1c59      	adds	r1, r3, #1
 8004d58:	a80d      	add	r0, sp, #52	; 0x34
 8004d5a:	a90e      	add	r1, sp, #56	; 0x38
 8004d5c:	d140      	bne.n	8004de0 <_printf_float+0x15c>
 8004d5e:	2306      	movs	r3, #6
 8004d60:	6063      	str	r3, [r4, #4]
 8004d62:	f04f 0c00 	mov.w	ip, #0
 8004d66:	f10d 0333 	add.w	r3, sp, #51	; 0x33
 8004d6a:	e9cd 2301 	strd	r2, r3, [sp, #4]
 8004d6e:	6863      	ldr	r3, [r4, #4]
 8004d70:	6022      	str	r2, [r4, #0]
 8004d72:	e9cd 0803 	strd	r0, r8, [sp, #12]
 8004d76:	9300      	str	r3, [sp, #0]
 8004d78:	463a      	mov	r2, r7
 8004d7a:	464b      	mov	r3, r9
 8004d7c:	e9cd 1c05 	strd	r1, ip, [sp, #20]
 8004d80:	4628      	mov	r0, r5
 8004d82:	f7ff feed 	bl	8004b60 <__cvt>
 8004d86:	f008 03df 	and.w	r3, r8, #223	; 0xdf
 8004d8a:	2b47      	cmp	r3, #71	; 0x47
 8004d8c:	4607      	mov	r7, r0
 8004d8e:	d109      	bne.n	8004da4 <_printf_float+0x120>
 8004d90:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004d92:	1cd8      	adds	r0, r3, #3
 8004d94:	db02      	blt.n	8004d9c <_printf_float+0x118>
 8004d96:	6862      	ldr	r2, [r4, #4]
 8004d98:	4293      	cmp	r3, r2
 8004d9a:	dd47      	ble.n	8004e2c <_printf_float+0x1a8>
 8004d9c:	f1a8 0802 	sub.w	r8, r8, #2
 8004da0:	fa5f f888 	uxtb.w	r8, r8
 8004da4:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 8004da8:	990d      	ldr	r1, [sp, #52]	; 0x34
 8004daa:	d824      	bhi.n	8004df6 <_printf_float+0x172>
 8004dac:	3901      	subs	r1, #1
 8004dae:	4642      	mov	r2, r8
 8004db0:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8004db4:	910d      	str	r1, [sp, #52]	; 0x34
 8004db6:	f7ff ff2f 	bl	8004c18 <__exponent>
 8004dba:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004dbc:	4681      	mov	r9, r0
 8004dbe:	1813      	adds	r3, r2, r0
 8004dc0:	2a01      	cmp	r2, #1
 8004dc2:	6123      	str	r3, [r4, #16]
 8004dc4:	dc02      	bgt.n	8004dcc <_printf_float+0x148>
 8004dc6:	6822      	ldr	r2, [r4, #0]
 8004dc8:	07d1      	lsls	r1, r2, #31
 8004dca:	d501      	bpl.n	8004dd0 <_printf_float+0x14c>
 8004dcc:	3301      	adds	r3, #1
 8004dce:	6123      	str	r3, [r4, #16]
 8004dd0:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d0a2      	beq.n	8004d1e <_printf_float+0x9a>
 8004dd8:	232d      	movs	r3, #45	; 0x2d
 8004dda:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004dde:	e79e      	b.n	8004d1e <_printf_float+0x9a>
 8004de0:	f1b8 0f67 	cmp.w	r8, #103	; 0x67
 8004de4:	f000 816e 	beq.w	80050c4 <_printf_float+0x440>
 8004de8:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8004dec:	d1b9      	bne.n	8004d62 <_printf_float+0xde>
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d1b7      	bne.n	8004d62 <_printf_float+0xde>
 8004df2:	2301      	movs	r3, #1
 8004df4:	e7b4      	b.n	8004d60 <_printf_float+0xdc>
 8004df6:	f1b8 0f66 	cmp.w	r8, #102	; 0x66
 8004dfa:	d119      	bne.n	8004e30 <_printf_float+0x1ac>
 8004dfc:	2900      	cmp	r1, #0
 8004dfe:	6863      	ldr	r3, [r4, #4]
 8004e00:	dd0c      	ble.n	8004e1c <_printf_float+0x198>
 8004e02:	6121      	str	r1, [r4, #16]
 8004e04:	b913      	cbnz	r3, 8004e0c <_printf_float+0x188>
 8004e06:	6822      	ldr	r2, [r4, #0]
 8004e08:	07d2      	lsls	r2, r2, #31
 8004e0a:	d502      	bpl.n	8004e12 <_printf_float+0x18e>
 8004e0c:	3301      	adds	r3, #1
 8004e0e:	440b      	add	r3, r1
 8004e10:	6123      	str	r3, [r4, #16]
 8004e12:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004e14:	f04f 0900 	mov.w	r9, #0
 8004e18:	65a3      	str	r3, [r4, #88]	; 0x58
 8004e1a:	e7d9      	b.n	8004dd0 <_printf_float+0x14c>
 8004e1c:	b913      	cbnz	r3, 8004e24 <_printf_float+0x1a0>
 8004e1e:	6822      	ldr	r2, [r4, #0]
 8004e20:	07d0      	lsls	r0, r2, #31
 8004e22:	d501      	bpl.n	8004e28 <_printf_float+0x1a4>
 8004e24:	3302      	adds	r3, #2
 8004e26:	e7f3      	b.n	8004e10 <_printf_float+0x18c>
 8004e28:	2301      	movs	r3, #1
 8004e2a:	e7f1      	b.n	8004e10 <_printf_float+0x18c>
 8004e2c:	f04f 0867 	mov.w	r8, #103	; 0x67
 8004e30:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 8004e34:	4293      	cmp	r3, r2
 8004e36:	db05      	blt.n	8004e44 <_printf_float+0x1c0>
 8004e38:	6822      	ldr	r2, [r4, #0]
 8004e3a:	6123      	str	r3, [r4, #16]
 8004e3c:	07d1      	lsls	r1, r2, #31
 8004e3e:	d5e8      	bpl.n	8004e12 <_printf_float+0x18e>
 8004e40:	3301      	adds	r3, #1
 8004e42:	e7e5      	b.n	8004e10 <_printf_float+0x18c>
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	bfcc      	ite	gt
 8004e48:	2301      	movgt	r3, #1
 8004e4a:	f1c3 0302 	rsble	r3, r3, #2
 8004e4e:	4413      	add	r3, r2
 8004e50:	e7de      	b.n	8004e10 <_printf_float+0x18c>
 8004e52:	6823      	ldr	r3, [r4, #0]
 8004e54:	055a      	lsls	r2, r3, #21
 8004e56:	d407      	bmi.n	8004e68 <_printf_float+0x1e4>
 8004e58:	6923      	ldr	r3, [r4, #16]
 8004e5a:	463a      	mov	r2, r7
 8004e5c:	4659      	mov	r1, fp
 8004e5e:	4628      	mov	r0, r5
 8004e60:	47b0      	blx	r6
 8004e62:	3001      	adds	r0, #1
 8004e64:	d129      	bne.n	8004eba <_printf_float+0x236>
 8004e66:	e764      	b.n	8004d32 <_printf_float+0xae>
 8004e68:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 8004e6c:	f240 80d7 	bls.w	800501e <_printf_float+0x39a>
 8004e70:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004e74:	2200      	movs	r2, #0
 8004e76:	2300      	movs	r3, #0
 8004e78:	f7fb fd96 	bl	80009a8 <__aeabi_dcmpeq>
 8004e7c:	b388      	cbz	r0, 8004ee2 <_printf_float+0x25e>
 8004e7e:	2301      	movs	r3, #1
 8004e80:	4a40      	ldr	r2, [pc, #256]	; (8004f84 <_printf_float+0x300>)
 8004e82:	4659      	mov	r1, fp
 8004e84:	4628      	mov	r0, r5
 8004e86:	47b0      	blx	r6
 8004e88:	3001      	adds	r0, #1
 8004e8a:	f43f af52 	beq.w	8004d32 <_printf_float+0xae>
 8004e8e:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8004e92:	429a      	cmp	r2, r3
 8004e94:	db02      	blt.n	8004e9c <_printf_float+0x218>
 8004e96:	6823      	ldr	r3, [r4, #0]
 8004e98:	07d8      	lsls	r0, r3, #31
 8004e9a:	d50e      	bpl.n	8004eba <_printf_float+0x236>
 8004e9c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004ea0:	4659      	mov	r1, fp
 8004ea2:	4628      	mov	r0, r5
 8004ea4:	47b0      	blx	r6
 8004ea6:	3001      	adds	r0, #1
 8004ea8:	f43f af43 	beq.w	8004d32 <_printf_float+0xae>
 8004eac:	2700      	movs	r7, #0
 8004eae:	f104 081a 	add.w	r8, r4, #26
 8004eb2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004eb4:	3b01      	subs	r3, #1
 8004eb6:	42bb      	cmp	r3, r7
 8004eb8:	dc09      	bgt.n	8004ece <_printf_float+0x24a>
 8004eba:	6823      	ldr	r3, [r4, #0]
 8004ebc:	079f      	lsls	r7, r3, #30
 8004ebe:	f100 80fd 	bmi.w	80050bc <_printf_float+0x438>
 8004ec2:	68e0      	ldr	r0, [r4, #12]
 8004ec4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004ec6:	4298      	cmp	r0, r3
 8004ec8:	bfb8      	it	lt
 8004eca:	4618      	movlt	r0, r3
 8004ecc:	e733      	b.n	8004d36 <_printf_float+0xb2>
 8004ece:	2301      	movs	r3, #1
 8004ed0:	4642      	mov	r2, r8
 8004ed2:	4659      	mov	r1, fp
 8004ed4:	4628      	mov	r0, r5
 8004ed6:	47b0      	blx	r6
 8004ed8:	3001      	adds	r0, #1
 8004eda:	f43f af2a 	beq.w	8004d32 <_printf_float+0xae>
 8004ede:	3701      	adds	r7, #1
 8004ee0:	e7e7      	b.n	8004eb2 <_printf_float+0x22e>
 8004ee2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	dc2b      	bgt.n	8004f40 <_printf_float+0x2bc>
 8004ee8:	2301      	movs	r3, #1
 8004eea:	4a26      	ldr	r2, [pc, #152]	; (8004f84 <_printf_float+0x300>)
 8004eec:	4659      	mov	r1, fp
 8004eee:	4628      	mov	r0, r5
 8004ef0:	47b0      	blx	r6
 8004ef2:	3001      	adds	r0, #1
 8004ef4:	f43f af1d 	beq.w	8004d32 <_printf_float+0xae>
 8004ef8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004efa:	b923      	cbnz	r3, 8004f06 <_printf_float+0x282>
 8004efc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004efe:	b913      	cbnz	r3, 8004f06 <_printf_float+0x282>
 8004f00:	6823      	ldr	r3, [r4, #0]
 8004f02:	07d9      	lsls	r1, r3, #31
 8004f04:	d5d9      	bpl.n	8004eba <_printf_float+0x236>
 8004f06:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004f0a:	4659      	mov	r1, fp
 8004f0c:	4628      	mov	r0, r5
 8004f0e:	47b0      	blx	r6
 8004f10:	3001      	adds	r0, #1
 8004f12:	f43f af0e 	beq.w	8004d32 <_printf_float+0xae>
 8004f16:	f04f 0800 	mov.w	r8, #0
 8004f1a:	f104 091a 	add.w	r9, r4, #26
 8004f1e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004f20:	425b      	negs	r3, r3
 8004f22:	4543      	cmp	r3, r8
 8004f24:	dc01      	bgt.n	8004f2a <_printf_float+0x2a6>
 8004f26:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004f28:	e797      	b.n	8004e5a <_printf_float+0x1d6>
 8004f2a:	2301      	movs	r3, #1
 8004f2c:	464a      	mov	r2, r9
 8004f2e:	4659      	mov	r1, fp
 8004f30:	4628      	mov	r0, r5
 8004f32:	47b0      	blx	r6
 8004f34:	3001      	adds	r0, #1
 8004f36:	f43f aefc 	beq.w	8004d32 <_printf_float+0xae>
 8004f3a:	f108 0801 	add.w	r8, r8, #1
 8004f3e:	e7ee      	b.n	8004f1e <_printf_float+0x29a>
 8004f40:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004f42:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004f44:	429a      	cmp	r2, r3
 8004f46:	bfa8      	it	ge
 8004f48:	461a      	movge	r2, r3
 8004f4a:	2a00      	cmp	r2, #0
 8004f4c:	4690      	mov	r8, r2
 8004f4e:	dd07      	ble.n	8004f60 <_printf_float+0x2dc>
 8004f50:	4613      	mov	r3, r2
 8004f52:	4659      	mov	r1, fp
 8004f54:	463a      	mov	r2, r7
 8004f56:	4628      	mov	r0, r5
 8004f58:	47b0      	blx	r6
 8004f5a:	3001      	adds	r0, #1
 8004f5c:	f43f aee9 	beq.w	8004d32 <_printf_float+0xae>
 8004f60:	f104 031a 	add.w	r3, r4, #26
 8004f64:	f04f 0a00 	mov.w	sl, #0
 8004f68:	ea28 78e8 	bic.w	r8, r8, r8, asr #31
 8004f6c:	930b      	str	r3, [sp, #44]	; 0x2c
 8004f6e:	e015      	b.n	8004f9c <_printf_float+0x318>
 8004f70:	7fefffff 	.word	0x7fefffff
 8004f74:	08008d1c 	.word	0x08008d1c
 8004f78:	08008d18 	.word	0x08008d18
 8004f7c:	08008d24 	.word	0x08008d24
 8004f80:	08008d20 	.word	0x08008d20
 8004f84:	08008d28 	.word	0x08008d28
 8004f88:	2301      	movs	r3, #1
 8004f8a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8004f8c:	4659      	mov	r1, fp
 8004f8e:	4628      	mov	r0, r5
 8004f90:	47b0      	blx	r6
 8004f92:	3001      	adds	r0, #1
 8004f94:	f43f aecd 	beq.w	8004d32 <_printf_float+0xae>
 8004f98:	f10a 0a01 	add.w	sl, sl, #1
 8004f9c:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
 8004fa0:	eba9 0308 	sub.w	r3, r9, r8
 8004fa4:	4553      	cmp	r3, sl
 8004fa6:	dcef      	bgt.n	8004f88 <_printf_float+0x304>
 8004fa8:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8004fac:	429a      	cmp	r2, r3
 8004fae:	444f      	add	r7, r9
 8004fb0:	db14      	blt.n	8004fdc <_printf_float+0x358>
 8004fb2:	6823      	ldr	r3, [r4, #0]
 8004fb4:	07da      	lsls	r2, r3, #31
 8004fb6:	d411      	bmi.n	8004fdc <_printf_float+0x358>
 8004fb8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004fba:	990d      	ldr	r1, [sp, #52]	; 0x34
 8004fbc:	eba3 0209 	sub.w	r2, r3, r9
 8004fc0:	eba3 0901 	sub.w	r9, r3, r1
 8004fc4:	4591      	cmp	r9, r2
 8004fc6:	bfa8      	it	ge
 8004fc8:	4691      	movge	r9, r2
 8004fca:	f1b9 0f00 	cmp.w	r9, #0
 8004fce:	dc0d      	bgt.n	8004fec <_printf_float+0x368>
 8004fd0:	2700      	movs	r7, #0
 8004fd2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004fd6:	f104 081a 	add.w	r8, r4, #26
 8004fda:	e018      	b.n	800500e <_printf_float+0x38a>
 8004fdc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004fe0:	4659      	mov	r1, fp
 8004fe2:	4628      	mov	r0, r5
 8004fe4:	47b0      	blx	r6
 8004fe6:	3001      	adds	r0, #1
 8004fe8:	d1e6      	bne.n	8004fb8 <_printf_float+0x334>
 8004fea:	e6a2      	b.n	8004d32 <_printf_float+0xae>
 8004fec:	464b      	mov	r3, r9
 8004fee:	463a      	mov	r2, r7
 8004ff0:	4659      	mov	r1, fp
 8004ff2:	4628      	mov	r0, r5
 8004ff4:	47b0      	blx	r6
 8004ff6:	3001      	adds	r0, #1
 8004ff8:	d1ea      	bne.n	8004fd0 <_printf_float+0x34c>
 8004ffa:	e69a      	b.n	8004d32 <_printf_float+0xae>
 8004ffc:	2301      	movs	r3, #1
 8004ffe:	4642      	mov	r2, r8
 8005000:	4659      	mov	r1, fp
 8005002:	4628      	mov	r0, r5
 8005004:	47b0      	blx	r6
 8005006:	3001      	adds	r0, #1
 8005008:	f43f ae93 	beq.w	8004d32 <_printf_float+0xae>
 800500c:	3701      	adds	r7, #1
 800500e:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8005012:	1a9b      	subs	r3, r3, r2
 8005014:	eba3 0309 	sub.w	r3, r3, r9
 8005018:	42bb      	cmp	r3, r7
 800501a:	dcef      	bgt.n	8004ffc <_printf_float+0x378>
 800501c:	e74d      	b.n	8004eba <_printf_float+0x236>
 800501e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005020:	2a01      	cmp	r2, #1
 8005022:	dc01      	bgt.n	8005028 <_printf_float+0x3a4>
 8005024:	07db      	lsls	r3, r3, #31
 8005026:	d538      	bpl.n	800509a <_printf_float+0x416>
 8005028:	2301      	movs	r3, #1
 800502a:	463a      	mov	r2, r7
 800502c:	4659      	mov	r1, fp
 800502e:	4628      	mov	r0, r5
 8005030:	47b0      	blx	r6
 8005032:	3001      	adds	r0, #1
 8005034:	f43f ae7d 	beq.w	8004d32 <_printf_float+0xae>
 8005038:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800503c:	4659      	mov	r1, fp
 800503e:	4628      	mov	r0, r5
 8005040:	47b0      	blx	r6
 8005042:	3001      	adds	r0, #1
 8005044:	f107 0701 	add.w	r7, r7, #1
 8005048:	f43f ae73 	beq.w	8004d32 <_printf_float+0xae>
 800504c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005050:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005052:	2200      	movs	r2, #0
 8005054:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8005058:	2300      	movs	r3, #0
 800505a:	f7fb fca5 	bl	80009a8 <__aeabi_dcmpeq>
 800505e:	b9c0      	cbnz	r0, 8005092 <_printf_float+0x40e>
 8005060:	4643      	mov	r3, r8
 8005062:	463a      	mov	r2, r7
 8005064:	4659      	mov	r1, fp
 8005066:	4628      	mov	r0, r5
 8005068:	47b0      	blx	r6
 800506a:	3001      	adds	r0, #1
 800506c:	d10d      	bne.n	800508a <_printf_float+0x406>
 800506e:	e660      	b.n	8004d32 <_printf_float+0xae>
 8005070:	2301      	movs	r3, #1
 8005072:	4642      	mov	r2, r8
 8005074:	4659      	mov	r1, fp
 8005076:	4628      	mov	r0, r5
 8005078:	47b0      	blx	r6
 800507a:	3001      	adds	r0, #1
 800507c:	f43f ae59 	beq.w	8004d32 <_printf_float+0xae>
 8005080:	3701      	adds	r7, #1
 8005082:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005084:	3b01      	subs	r3, #1
 8005086:	42bb      	cmp	r3, r7
 8005088:	dcf2      	bgt.n	8005070 <_printf_float+0x3ec>
 800508a:	464b      	mov	r3, r9
 800508c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8005090:	e6e4      	b.n	8004e5c <_printf_float+0x1d8>
 8005092:	2700      	movs	r7, #0
 8005094:	f104 081a 	add.w	r8, r4, #26
 8005098:	e7f3      	b.n	8005082 <_printf_float+0x3fe>
 800509a:	2301      	movs	r3, #1
 800509c:	e7e1      	b.n	8005062 <_printf_float+0x3de>
 800509e:	2301      	movs	r3, #1
 80050a0:	4642      	mov	r2, r8
 80050a2:	4659      	mov	r1, fp
 80050a4:	4628      	mov	r0, r5
 80050a6:	47b0      	blx	r6
 80050a8:	3001      	adds	r0, #1
 80050aa:	f43f ae42 	beq.w	8004d32 <_printf_float+0xae>
 80050ae:	3701      	adds	r7, #1
 80050b0:	68e3      	ldr	r3, [r4, #12]
 80050b2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80050b4:	1a9b      	subs	r3, r3, r2
 80050b6:	42bb      	cmp	r3, r7
 80050b8:	dcf1      	bgt.n	800509e <_printf_float+0x41a>
 80050ba:	e702      	b.n	8004ec2 <_printf_float+0x23e>
 80050bc:	2700      	movs	r7, #0
 80050be:	f104 0819 	add.w	r8, r4, #25
 80050c2:	e7f5      	b.n	80050b0 <_printf_float+0x42c>
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	f43f ae94 	beq.w	8004df2 <_printf_float+0x16e>
 80050ca:	f04f 0c00 	mov.w	ip, #0
 80050ce:	e9cd 1c05 	strd	r1, ip, [sp, #20]
 80050d2:	f10d 0133 	add.w	r1, sp, #51	; 0x33
 80050d6:	6022      	str	r2, [r4, #0]
 80050d8:	e9cd 0803 	strd	r0, r8, [sp, #12]
 80050dc:	e9cd 2101 	strd	r2, r1, [sp, #4]
 80050e0:	9300      	str	r3, [sp, #0]
 80050e2:	463a      	mov	r2, r7
 80050e4:	464b      	mov	r3, r9
 80050e6:	4628      	mov	r0, r5
 80050e8:	f7ff fd3a 	bl	8004b60 <__cvt>
 80050ec:	4607      	mov	r7, r0
 80050ee:	e64f      	b.n	8004d90 <_printf_float+0x10c>

080050f0 <_printf_common>:
 80050f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80050f4:	4691      	mov	r9, r2
 80050f6:	461f      	mov	r7, r3
 80050f8:	688a      	ldr	r2, [r1, #8]
 80050fa:	690b      	ldr	r3, [r1, #16]
 80050fc:	4606      	mov	r6, r0
 80050fe:	4293      	cmp	r3, r2
 8005100:	bfb8      	it	lt
 8005102:	4613      	movlt	r3, r2
 8005104:	f8c9 3000 	str.w	r3, [r9]
 8005108:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800510c:	460c      	mov	r4, r1
 800510e:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005112:	b112      	cbz	r2, 800511a <_printf_common+0x2a>
 8005114:	3301      	adds	r3, #1
 8005116:	f8c9 3000 	str.w	r3, [r9]
 800511a:	6823      	ldr	r3, [r4, #0]
 800511c:	0699      	lsls	r1, r3, #26
 800511e:	bf42      	ittt	mi
 8005120:	f8d9 3000 	ldrmi.w	r3, [r9]
 8005124:	3302      	addmi	r3, #2
 8005126:	f8c9 3000 	strmi.w	r3, [r9]
 800512a:	6825      	ldr	r5, [r4, #0]
 800512c:	f015 0506 	ands.w	r5, r5, #6
 8005130:	d107      	bne.n	8005142 <_printf_common+0x52>
 8005132:	f104 0a19 	add.w	sl, r4, #25
 8005136:	68e3      	ldr	r3, [r4, #12]
 8005138:	f8d9 2000 	ldr.w	r2, [r9]
 800513c:	1a9b      	subs	r3, r3, r2
 800513e:	42ab      	cmp	r3, r5
 8005140:	dc29      	bgt.n	8005196 <_printf_common+0xa6>
 8005142:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8005146:	6822      	ldr	r2, [r4, #0]
 8005148:	3300      	adds	r3, #0
 800514a:	bf18      	it	ne
 800514c:	2301      	movne	r3, #1
 800514e:	0692      	lsls	r2, r2, #26
 8005150:	d42e      	bmi.n	80051b0 <_printf_common+0xc0>
 8005152:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005156:	4639      	mov	r1, r7
 8005158:	4630      	mov	r0, r6
 800515a:	47c0      	blx	r8
 800515c:	3001      	adds	r0, #1
 800515e:	d021      	beq.n	80051a4 <_printf_common+0xb4>
 8005160:	6823      	ldr	r3, [r4, #0]
 8005162:	68e5      	ldr	r5, [r4, #12]
 8005164:	f003 0306 	and.w	r3, r3, #6
 8005168:	2b04      	cmp	r3, #4
 800516a:	bf18      	it	ne
 800516c:	2500      	movne	r5, #0
 800516e:	f8d9 2000 	ldr.w	r2, [r9]
 8005172:	f04f 0900 	mov.w	r9, #0
 8005176:	bf08      	it	eq
 8005178:	1aad      	subeq	r5, r5, r2
 800517a:	68a3      	ldr	r3, [r4, #8]
 800517c:	6922      	ldr	r2, [r4, #16]
 800517e:	bf08      	it	eq
 8005180:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005184:	4293      	cmp	r3, r2
 8005186:	bfc4      	itt	gt
 8005188:	1a9b      	subgt	r3, r3, r2
 800518a:	18ed      	addgt	r5, r5, r3
 800518c:	341a      	adds	r4, #26
 800518e:	454d      	cmp	r5, r9
 8005190:	d11a      	bne.n	80051c8 <_printf_common+0xd8>
 8005192:	2000      	movs	r0, #0
 8005194:	e008      	b.n	80051a8 <_printf_common+0xb8>
 8005196:	2301      	movs	r3, #1
 8005198:	4652      	mov	r2, sl
 800519a:	4639      	mov	r1, r7
 800519c:	4630      	mov	r0, r6
 800519e:	47c0      	blx	r8
 80051a0:	3001      	adds	r0, #1
 80051a2:	d103      	bne.n	80051ac <_printf_common+0xbc>
 80051a4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80051a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80051ac:	3501      	adds	r5, #1
 80051ae:	e7c2      	b.n	8005136 <_printf_common+0x46>
 80051b0:	2030      	movs	r0, #48	; 0x30
 80051b2:	18e1      	adds	r1, r4, r3
 80051b4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80051b8:	1c5a      	adds	r2, r3, #1
 80051ba:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80051be:	4422      	add	r2, r4
 80051c0:	3302      	adds	r3, #2
 80051c2:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80051c6:	e7c4      	b.n	8005152 <_printf_common+0x62>
 80051c8:	2301      	movs	r3, #1
 80051ca:	4622      	mov	r2, r4
 80051cc:	4639      	mov	r1, r7
 80051ce:	4630      	mov	r0, r6
 80051d0:	47c0      	blx	r8
 80051d2:	3001      	adds	r0, #1
 80051d4:	d0e6      	beq.n	80051a4 <_printf_common+0xb4>
 80051d6:	f109 0901 	add.w	r9, r9, #1
 80051da:	e7d8      	b.n	800518e <_printf_common+0x9e>

080051dc <_printf_i>:
 80051dc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80051e0:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80051e4:	460c      	mov	r4, r1
 80051e6:	7e09      	ldrb	r1, [r1, #24]
 80051e8:	b085      	sub	sp, #20
 80051ea:	296e      	cmp	r1, #110	; 0x6e
 80051ec:	4617      	mov	r7, r2
 80051ee:	4606      	mov	r6, r0
 80051f0:	4698      	mov	r8, r3
 80051f2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80051f4:	f000 80b3 	beq.w	800535e <_printf_i+0x182>
 80051f8:	d822      	bhi.n	8005240 <_printf_i+0x64>
 80051fa:	2963      	cmp	r1, #99	; 0x63
 80051fc:	d036      	beq.n	800526c <_printf_i+0x90>
 80051fe:	d80a      	bhi.n	8005216 <_printf_i+0x3a>
 8005200:	2900      	cmp	r1, #0
 8005202:	f000 80b9 	beq.w	8005378 <_printf_i+0x19c>
 8005206:	2958      	cmp	r1, #88	; 0x58
 8005208:	f000 8083 	beq.w	8005312 <_printf_i+0x136>
 800520c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005210:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8005214:	e032      	b.n	800527c <_printf_i+0xa0>
 8005216:	2964      	cmp	r1, #100	; 0x64
 8005218:	d001      	beq.n	800521e <_printf_i+0x42>
 800521a:	2969      	cmp	r1, #105	; 0x69
 800521c:	d1f6      	bne.n	800520c <_printf_i+0x30>
 800521e:	6820      	ldr	r0, [r4, #0]
 8005220:	6813      	ldr	r3, [r2, #0]
 8005222:	0605      	lsls	r5, r0, #24
 8005224:	f103 0104 	add.w	r1, r3, #4
 8005228:	d52a      	bpl.n	8005280 <_printf_i+0xa4>
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	6011      	str	r1, [r2, #0]
 800522e:	2b00      	cmp	r3, #0
 8005230:	da03      	bge.n	800523a <_printf_i+0x5e>
 8005232:	222d      	movs	r2, #45	; 0x2d
 8005234:	425b      	negs	r3, r3
 8005236:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800523a:	486f      	ldr	r0, [pc, #444]	; (80053f8 <_printf_i+0x21c>)
 800523c:	220a      	movs	r2, #10
 800523e:	e039      	b.n	80052b4 <_printf_i+0xd8>
 8005240:	2973      	cmp	r1, #115	; 0x73
 8005242:	f000 809d 	beq.w	8005380 <_printf_i+0x1a4>
 8005246:	d808      	bhi.n	800525a <_printf_i+0x7e>
 8005248:	296f      	cmp	r1, #111	; 0x6f
 800524a:	d020      	beq.n	800528e <_printf_i+0xb2>
 800524c:	2970      	cmp	r1, #112	; 0x70
 800524e:	d1dd      	bne.n	800520c <_printf_i+0x30>
 8005250:	6823      	ldr	r3, [r4, #0]
 8005252:	f043 0320 	orr.w	r3, r3, #32
 8005256:	6023      	str	r3, [r4, #0]
 8005258:	e003      	b.n	8005262 <_printf_i+0x86>
 800525a:	2975      	cmp	r1, #117	; 0x75
 800525c:	d017      	beq.n	800528e <_printf_i+0xb2>
 800525e:	2978      	cmp	r1, #120	; 0x78
 8005260:	d1d4      	bne.n	800520c <_printf_i+0x30>
 8005262:	2378      	movs	r3, #120	; 0x78
 8005264:	4865      	ldr	r0, [pc, #404]	; (80053fc <_printf_i+0x220>)
 8005266:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800526a:	e055      	b.n	8005318 <_printf_i+0x13c>
 800526c:	6813      	ldr	r3, [r2, #0]
 800526e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005272:	1d19      	adds	r1, r3, #4
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	6011      	str	r1, [r2, #0]
 8005278:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800527c:	2301      	movs	r3, #1
 800527e:	e08c      	b.n	800539a <_printf_i+0x1be>
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005286:	6011      	str	r1, [r2, #0]
 8005288:	bf18      	it	ne
 800528a:	b21b      	sxthne	r3, r3
 800528c:	e7cf      	b.n	800522e <_printf_i+0x52>
 800528e:	6813      	ldr	r3, [r2, #0]
 8005290:	6825      	ldr	r5, [r4, #0]
 8005292:	1d18      	adds	r0, r3, #4
 8005294:	6010      	str	r0, [r2, #0]
 8005296:	0628      	lsls	r0, r5, #24
 8005298:	d501      	bpl.n	800529e <_printf_i+0xc2>
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	e002      	b.n	80052a4 <_printf_i+0xc8>
 800529e:	0668      	lsls	r0, r5, #25
 80052a0:	d5fb      	bpl.n	800529a <_printf_i+0xbe>
 80052a2:	881b      	ldrh	r3, [r3, #0]
 80052a4:	296f      	cmp	r1, #111	; 0x6f
 80052a6:	bf14      	ite	ne
 80052a8:	220a      	movne	r2, #10
 80052aa:	2208      	moveq	r2, #8
 80052ac:	4852      	ldr	r0, [pc, #328]	; (80053f8 <_printf_i+0x21c>)
 80052ae:	2100      	movs	r1, #0
 80052b0:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80052b4:	6865      	ldr	r5, [r4, #4]
 80052b6:	2d00      	cmp	r5, #0
 80052b8:	60a5      	str	r5, [r4, #8]
 80052ba:	f2c0 8095 	blt.w	80053e8 <_printf_i+0x20c>
 80052be:	6821      	ldr	r1, [r4, #0]
 80052c0:	f021 0104 	bic.w	r1, r1, #4
 80052c4:	6021      	str	r1, [r4, #0]
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d13d      	bne.n	8005346 <_printf_i+0x16a>
 80052ca:	2d00      	cmp	r5, #0
 80052cc:	f040 808e 	bne.w	80053ec <_printf_i+0x210>
 80052d0:	4665      	mov	r5, ip
 80052d2:	2a08      	cmp	r2, #8
 80052d4:	d10b      	bne.n	80052ee <_printf_i+0x112>
 80052d6:	6823      	ldr	r3, [r4, #0]
 80052d8:	07db      	lsls	r3, r3, #31
 80052da:	d508      	bpl.n	80052ee <_printf_i+0x112>
 80052dc:	6923      	ldr	r3, [r4, #16]
 80052de:	6862      	ldr	r2, [r4, #4]
 80052e0:	429a      	cmp	r2, r3
 80052e2:	bfde      	ittt	le
 80052e4:	2330      	movle	r3, #48	; 0x30
 80052e6:	f805 3c01 	strble.w	r3, [r5, #-1]
 80052ea:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 80052ee:	ebac 0305 	sub.w	r3, ip, r5
 80052f2:	6123      	str	r3, [r4, #16]
 80052f4:	f8cd 8000 	str.w	r8, [sp]
 80052f8:	463b      	mov	r3, r7
 80052fa:	aa03      	add	r2, sp, #12
 80052fc:	4621      	mov	r1, r4
 80052fe:	4630      	mov	r0, r6
 8005300:	f7ff fef6 	bl	80050f0 <_printf_common>
 8005304:	3001      	adds	r0, #1
 8005306:	d14d      	bne.n	80053a4 <_printf_i+0x1c8>
 8005308:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800530c:	b005      	add	sp, #20
 800530e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005312:	4839      	ldr	r0, [pc, #228]	; (80053f8 <_printf_i+0x21c>)
 8005314:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8005318:	6813      	ldr	r3, [r2, #0]
 800531a:	6821      	ldr	r1, [r4, #0]
 800531c:	1d1d      	adds	r5, r3, #4
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	6015      	str	r5, [r2, #0]
 8005322:	060a      	lsls	r2, r1, #24
 8005324:	d50b      	bpl.n	800533e <_printf_i+0x162>
 8005326:	07ca      	lsls	r2, r1, #31
 8005328:	bf44      	itt	mi
 800532a:	f041 0120 	orrmi.w	r1, r1, #32
 800532e:	6021      	strmi	r1, [r4, #0]
 8005330:	b91b      	cbnz	r3, 800533a <_printf_i+0x15e>
 8005332:	6822      	ldr	r2, [r4, #0]
 8005334:	f022 0220 	bic.w	r2, r2, #32
 8005338:	6022      	str	r2, [r4, #0]
 800533a:	2210      	movs	r2, #16
 800533c:	e7b7      	b.n	80052ae <_printf_i+0xd2>
 800533e:	064d      	lsls	r5, r1, #25
 8005340:	bf48      	it	mi
 8005342:	b29b      	uxthmi	r3, r3
 8005344:	e7ef      	b.n	8005326 <_printf_i+0x14a>
 8005346:	4665      	mov	r5, ip
 8005348:	fbb3 f1f2 	udiv	r1, r3, r2
 800534c:	fb02 3311 	mls	r3, r2, r1, r3
 8005350:	5cc3      	ldrb	r3, [r0, r3]
 8005352:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8005356:	460b      	mov	r3, r1
 8005358:	2900      	cmp	r1, #0
 800535a:	d1f5      	bne.n	8005348 <_printf_i+0x16c>
 800535c:	e7b9      	b.n	80052d2 <_printf_i+0xf6>
 800535e:	6813      	ldr	r3, [r2, #0]
 8005360:	6825      	ldr	r5, [r4, #0]
 8005362:	1d18      	adds	r0, r3, #4
 8005364:	6961      	ldr	r1, [r4, #20]
 8005366:	6010      	str	r0, [r2, #0]
 8005368:	0628      	lsls	r0, r5, #24
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	d501      	bpl.n	8005372 <_printf_i+0x196>
 800536e:	6019      	str	r1, [r3, #0]
 8005370:	e002      	b.n	8005378 <_printf_i+0x19c>
 8005372:	066a      	lsls	r2, r5, #25
 8005374:	d5fb      	bpl.n	800536e <_printf_i+0x192>
 8005376:	8019      	strh	r1, [r3, #0]
 8005378:	2300      	movs	r3, #0
 800537a:	4665      	mov	r5, ip
 800537c:	6123      	str	r3, [r4, #16]
 800537e:	e7b9      	b.n	80052f4 <_printf_i+0x118>
 8005380:	6813      	ldr	r3, [r2, #0]
 8005382:	1d19      	adds	r1, r3, #4
 8005384:	6011      	str	r1, [r2, #0]
 8005386:	681d      	ldr	r5, [r3, #0]
 8005388:	6862      	ldr	r2, [r4, #4]
 800538a:	2100      	movs	r1, #0
 800538c:	4628      	mov	r0, r5
 800538e:	f002 fac9 	bl	8007924 <memchr>
 8005392:	b108      	cbz	r0, 8005398 <_printf_i+0x1bc>
 8005394:	1b40      	subs	r0, r0, r5
 8005396:	6060      	str	r0, [r4, #4]
 8005398:	6863      	ldr	r3, [r4, #4]
 800539a:	6123      	str	r3, [r4, #16]
 800539c:	2300      	movs	r3, #0
 800539e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80053a2:	e7a7      	b.n	80052f4 <_printf_i+0x118>
 80053a4:	6923      	ldr	r3, [r4, #16]
 80053a6:	462a      	mov	r2, r5
 80053a8:	4639      	mov	r1, r7
 80053aa:	4630      	mov	r0, r6
 80053ac:	47c0      	blx	r8
 80053ae:	3001      	adds	r0, #1
 80053b0:	d0aa      	beq.n	8005308 <_printf_i+0x12c>
 80053b2:	6823      	ldr	r3, [r4, #0]
 80053b4:	079b      	lsls	r3, r3, #30
 80053b6:	d413      	bmi.n	80053e0 <_printf_i+0x204>
 80053b8:	68e0      	ldr	r0, [r4, #12]
 80053ba:	9b03      	ldr	r3, [sp, #12]
 80053bc:	4298      	cmp	r0, r3
 80053be:	bfb8      	it	lt
 80053c0:	4618      	movlt	r0, r3
 80053c2:	e7a3      	b.n	800530c <_printf_i+0x130>
 80053c4:	2301      	movs	r3, #1
 80053c6:	464a      	mov	r2, r9
 80053c8:	4639      	mov	r1, r7
 80053ca:	4630      	mov	r0, r6
 80053cc:	47c0      	blx	r8
 80053ce:	3001      	adds	r0, #1
 80053d0:	d09a      	beq.n	8005308 <_printf_i+0x12c>
 80053d2:	3501      	adds	r5, #1
 80053d4:	68e3      	ldr	r3, [r4, #12]
 80053d6:	9a03      	ldr	r2, [sp, #12]
 80053d8:	1a9b      	subs	r3, r3, r2
 80053da:	42ab      	cmp	r3, r5
 80053dc:	dcf2      	bgt.n	80053c4 <_printf_i+0x1e8>
 80053de:	e7eb      	b.n	80053b8 <_printf_i+0x1dc>
 80053e0:	2500      	movs	r5, #0
 80053e2:	f104 0919 	add.w	r9, r4, #25
 80053e6:	e7f5      	b.n	80053d4 <_printf_i+0x1f8>
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d1ac      	bne.n	8005346 <_printf_i+0x16a>
 80053ec:	7803      	ldrb	r3, [r0, #0]
 80053ee:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80053f2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80053f6:	e76c      	b.n	80052d2 <_printf_i+0xf6>
 80053f8:	08008d2a 	.word	0x08008d2a
 80053fc:	08008d3b 	.word	0x08008d3b

08005400 <_scanf_float>:
 8005400:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005404:	469a      	mov	sl, r3
 8005406:	688b      	ldr	r3, [r1, #8]
 8005408:	4616      	mov	r6, r2
 800540a:	1e5a      	subs	r2, r3, #1
 800540c:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8005410:	bf88      	it	hi
 8005412:	f46f 72ae 	mvnhi.w	r2, #348	; 0x15c
 8005416:	b087      	sub	sp, #28
 8005418:	bf85      	ittet	hi
 800541a:	189b      	addhi	r3, r3, r2
 800541c:	9301      	strhi	r3, [sp, #4]
 800541e:	2300      	movls	r3, #0
 8005420:	f240 135d 	movwhi	r3, #349	; 0x15d
 8005424:	4688      	mov	r8, r1
 8005426:	f04f 0b00 	mov.w	fp, #0
 800542a:	bf8c      	ite	hi
 800542c:	608b      	strhi	r3, [r1, #8]
 800542e:	9301      	strls	r3, [sp, #4]
 8005430:	680b      	ldr	r3, [r1, #0]
 8005432:	4607      	mov	r7, r0
 8005434:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8005438:	f848 3b1c 	str.w	r3, [r8], #28
 800543c:	460c      	mov	r4, r1
 800543e:	4645      	mov	r5, r8
 8005440:	465a      	mov	r2, fp
 8005442:	46d9      	mov	r9, fp
 8005444:	e9cd bb03 	strd	fp, fp, [sp, #12]
 8005448:	f8cd b008 	str.w	fp, [sp, #8]
 800544c:	68a1      	ldr	r1, [r4, #8]
 800544e:	b181      	cbz	r1, 8005472 <_scanf_float+0x72>
 8005450:	6833      	ldr	r3, [r6, #0]
 8005452:	781b      	ldrb	r3, [r3, #0]
 8005454:	2b49      	cmp	r3, #73	; 0x49
 8005456:	d071      	beq.n	800553c <_scanf_float+0x13c>
 8005458:	d84d      	bhi.n	80054f6 <_scanf_float+0xf6>
 800545a:	2b39      	cmp	r3, #57	; 0x39
 800545c:	d840      	bhi.n	80054e0 <_scanf_float+0xe0>
 800545e:	2b31      	cmp	r3, #49	; 0x31
 8005460:	f080 8088 	bcs.w	8005574 <_scanf_float+0x174>
 8005464:	2b2d      	cmp	r3, #45	; 0x2d
 8005466:	f000 8090 	beq.w	800558a <_scanf_float+0x18a>
 800546a:	d815      	bhi.n	8005498 <_scanf_float+0x98>
 800546c:	2b2b      	cmp	r3, #43	; 0x2b
 800546e:	f000 808c 	beq.w	800558a <_scanf_float+0x18a>
 8005472:	f1b9 0f00 	cmp.w	r9, #0
 8005476:	d003      	beq.n	8005480 <_scanf_float+0x80>
 8005478:	6823      	ldr	r3, [r4, #0]
 800547a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800547e:	6023      	str	r3, [r4, #0]
 8005480:	3a01      	subs	r2, #1
 8005482:	2a01      	cmp	r2, #1
 8005484:	f200 80ea 	bhi.w	800565c <_scanf_float+0x25c>
 8005488:	4545      	cmp	r5, r8
 800548a:	f200 80dc 	bhi.w	8005646 <_scanf_float+0x246>
 800548e:	2601      	movs	r6, #1
 8005490:	4630      	mov	r0, r6
 8005492:	b007      	add	sp, #28
 8005494:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005498:	2b2e      	cmp	r3, #46	; 0x2e
 800549a:	f000 809f 	beq.w	80055dc <_scanf_float+0x1dc>
 800549e:	2b30      	cmp	r3, #48	; 0x30
 80054a0:	d1e7      	bne.n	8005472 <_scanf_float+0x72>
 80054a2:	6820      	ldr	r0, [r4, #0]
 80054a4:	f410 7f80 	tst.w	r0, #256	; 0x100
 80054a8:	d064      	beq.n	8005574 <_scanf_float+0x174>
 80054aa:	9b01      	ldr	r3, [sp, #4]
 80054ac:	f020 0080 	bic.w	r0, r0, #128	; 0x80
 80054b0:	6020      	str	r0, [r4, #0]
 80054b2:	f109 0901 	add.w	r9, r9, #1
 80054b6:	b11b      	cbz	r3, 80054c0 <_scanf_float+0xc0>
 80054b8:	3b01      	subs	r3, #1
 80054ba:	3101      	adds	r1, #1
 80054bc:	9301      	str	r3, [sp, #4]
 80054be:	60a1      	str	r1, [r4, #8]
 80054c0:	68a3      	ldr	r3, [r4, #8]
 80054c2:	3b01      	subs	r3, #1
 80054c4:	60a3      	str	r3, [r4, #8]
 80054c6:	6923      	ldr	r3, [r4, #16]
 80054c8:	3301      	adds	r3, #1
 80054ca:	6123      	str	r3, [r4, #16]
 80054cc:	6873      	ldr	r3, [r6, #4]
 80054ce:	3b01      	subs	r3, #1
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	6073      	str	r3, [r6, #4]
 80054d4:	f340 80ac 	ble.w	8005630 <_scanf_float+0x230>
 80054d8:	6833      	ldr	r3, [r6, #0]
 80054da:	3301      	adds	r3, #1
 80054dc:	6033      	str	r3, [r6, #0]
 80054de:	e7b5      	b.n	800544c <_scanf_float+0x4c>
 80054e0:	2b45      	cmp	r3, #69	; 0x45
 80054e2:	f000 8085 	beq.w	80055f0 <_scanf_float+0x1f0>
 80054e6:	2b46      	cmp	r3, #70	; 0x46
 80054e8:	d06a      	beq.n	80055c0 <_scanf_float+0x1c0>
 80054ea:	2b41      	cmp	r3, #65	; 0x41
 80054ec:	d1c1      	bne.n	8005472 <_scanf_float+0x72>
 80054ee:	2a01      	cmp	r2, #1
 80054f0:	d1bf      	bne.n	8005472 <_scanf_float+0x72>
 80054f2:	2202      	movs	r2, #2
 80054f4:	e046      	b.n	8005584 <_scanf_float+0x184>
 80054f6:	2b65      	cmp	r3, #101	; 0x65
 80054f8:	d07a      	beq.n	80055f0 <_scanf_float+0x1f0>
 80054fa:	d818      	bhi.n	800552e <_scanf_float+0x12e>
 80054fc:	2b54      	cmp	r3, #84	; 0x54
 80054fe:	d066      	beq.n	80055ce <_scanf_float+0x1ce>
 8005500:	d811      	bhi.n	8005526 <_scanf_float+0x126>
 8005502:	2b4e      	cmp	r3, #78	; 0x4e
 8005504:	d1b5      	bne.n	8005472 <_scanf_float+0x72>
 8005506:	2a00      	cmp	r2, #0
 8005508:	d146      	bne.n	8005598 <_scanf_float+0x198>
 800550a:	f1b9 0f00 	cmp.w	r9, #0
 800550e:	d145      	bne.n	800559c <_scanf_float+0x19c>
 8005510:	6821      	ldr	r1, [r4, #0]
 8005512:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 8005516:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 800551a:	d13f      	bne.n	800559c <_scanf_float+0x19c>
 800551c:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8005520:	6021      	str	r1, [r4, #0]
 8005522:	2201      	movs	r2, #1
 8005524:	e02e      	b.n	8005584 <_scanf_float+0x184>
 8005526:	2b59      	cmp	r3, #89	; 0x59
 8005528:	d01e      	beq.n	8005568 <_scanf_float+0x168>
 800552a:	2b61      	cmp	r3, #97	; 0x61
 800552c:	e7de      	b.n	80054ec <_scanf_float+0xec>
 800552e:	2b6e      	cmp	r3, #110	; 0x6e
 8005530:	d0e9      	beq.n	8005506 <_scanf_float+0x106>
 8005532:	d815      	bhi.n	8005560 <_scanf_float+0x160>
 8005534:	2b66      	cmp	r3, #102	; 0x66
 8005536:	d043      	beq.n	80055c0 <_scanf_float+0x1c0>
 8005538:	2b69      	cmp	r3, #105	; 0x69
 800553a:	d19a      	bne.n	8005472 <_scanf_float+0x72>
 800553c:	f1bb 0f00 	cmp.w	fp, #0
 8005540:	d138      	bne.n	80055b4 <_scanf_float+0x1b4>
 8005542:	f1b9 0f00 	cmp.w	r9, #0
 8005546:	d197      	bne.n	8005478 <_scanf_float+0x78>
 8005548:	6821      	ldr	r1, [r4, #0]
 800554a:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 800554e:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 8005552:	d195      	bne.n	8005480 <_scanf_float+0x80>
 8005554:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8005558:	6021      	str	r1, [r4, #0]
 800555a:	f04f 0b01 	mov.w	fp, #1
 800555e:	e011      	b.n	8005584 <_scanf_float+0x184>
 8005560:	2b74      	cmp	r3, #116	; 0x74
 8005562:	d034      	beq.n	80055ce <_scanf_float+0x1ce>
 8005564:	2b79      	cmp	r3, #121	; 0x79
 8005566:	d184      	bne.n	8005472 <_scanf_float+0x72>
 8005568:	f1bb 0f07 	cmp.w	fp, #7
 800556c:	d181      	bne.n	8005472 <_scanf_float+0x72>
 800556e:	f04f 0b08 	mov.w	fp, #8
 8005572:	e007      	b.n	8005584 <_scanf_float+0x184>
 8005574:	eb12 0f0b 	cmn.w	r2, fp
 8005578:	f47f af7b 	bne.w	8005472 <_scanf_float+0x72>
 800557c:	6821      	ldr	r1, [r4, #0]
 800557e:	f421 71c0 	bic.w	r1, r1, #384	; 0x180
 8005582:	6021      	str	r1, [r4, #0]
 8005584:	702b      	strb	r3, [r5, #0]
 8005586:	3501      	adds	r5, #1
 8005588:	e79a      	b.n	80054c0 <_scanf_float+0xc0>
 800558a:	6821      	ldr	r1, [r4, #0]
 800558c:	0608      	lsls	r0, r1, #24
 800558e:	f57f af70 	bpl.w	8005472 <_scanf_float+0x72>
 8005592:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8005596:	e7f4      	b.n	8005582 <_scanf_float+0x182>
 8005598:	2a02      	cmp	r2, #2
 800559a:	d047      	beq.n	800562c <_scanf_float+0x22c>
 800559c:	f1bb 0f01 	cmp.w	fp, #1
 80055a0:	d003      	beq.n	80055aa <_scanf_float+0x1aa>
 80055a2:	f1bb 0f04 	cmp.w	fp, #4
 80055a6:	f47f af64 	bne.w	8005472 <_scanf_float+0x72>
 80055aa:	f10b 0b01 	add.w	fp, fp, #1
 80055ae:	fa5f fb8b 	uxtb.w	fp, fp
 80055b2:	e7e7      	b.n	8005584 <_scanf_float+0x184>
 80055b4:	f1bb 0f03 	cmp.w	fp, #3
 80055b8:	d0f7      	beq.n	80055aa <_scanf_float+0x1aa>
 80055ba:	f1bb 0f05 	cmp.w	fp, #5
 80055be:	e7f2      	b.n	80055a6 <_scanf_float+0x1a6>
 80055c0:	f1bb 0f02 	cmp.w	fp, #2
 80055c4:	f47f af55 	bne.w	8005472 <_scanf_float+0x72>
 80055c8:	f04f 0b03 	mov.w	fp, #3
 80055cc:	e7da      	b.n	8005584 <_scanf_float+0x184>
 80055ce:	f1bb 0f06 	cmp.w	fp, #6
 80055d2:	f47f af4e 	bne.w	8005472 <_scanf_float+0x72>
 80055d6:	f04f 0b07 	mov.w	fp, #7
 80055da:	e7d3      	b.n	8005584 <_scanf_float+0x184>
 80055dc:	6821      	ldr	r1, [r4, #0]
 80055de:	0588      	lsls	r0, r1, #22
 80055e0:	f57f af47 	bpl.w	8005472 <_scanf_float+0x72>
 80055e4:	f421 7120 	bic.w	r1, r1, #640	; 0x280
 80055e8:	6021      	str	r1, [r4, #0]
 80055ea:	f8cd 9008 	str.w	r9, [sp, #8]
 80055ee:	e7c9      	b.n	8005584 <_scanf_float+0x184>
 80055f0:	6821      	ldr	r1, [r4, #0]
 80055f2:	f401 60a0 	and.w	r0, r1, #1280	; 0x500
 80055f6:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 80055fa:	d006      	beq.n	800560a <_scanf_float+0x20a>
 80055fc:	0548      	lsls	r0, r1, #21
 80055fe:	f57f af38 	bpl.w	8005472 <_scanf_float+0x72>
 8005602:	f1b9 0f00 	cmp.w	r9, #0
 8005606:	f43f af3b 	beq.w	8005480 <_scanf_float+0x80>
 800560a:	0588      	lsls	r0, r1, #22
 800560c:	bf58      	it	pl
 800560e:	9802      	ldrpl	r0, [sp, #8]
 8005610:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8005614:	bf58      	it	pl
 8005616:	eba9 0000 	subpl.w	r0, r9, r0
 800561a:	f441 71c0 	orr.w	r1, r1, #384	; 0x180
 800561e:	bf58      	it	pl
 8005620:	e9cd 0503 	strdpl	r0, r5, [sp, #12]
 8005624:	6021      	str	r1, [r4, #0]
 8005626:	f04f 0900 	mov.w	r9, #0
 800562a:	e7ab      	b.n	8005584 <_scanf_float+0x184>
 800562c:	2203      	movs	r2, #3
 800562e:	e7a9      	b.n	8005584 <_scanf_float+0x184>
 8005630:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8005634:	4631      	mov	r1, r6
 8005636:	4638      	mov	r0, r7
 8005638:	9205      	str	r2, [sp, #20]
 800563a:	4798      	blx	r3
 800563c:	9a05      	ldr	r2, [sp, #20]
 800563e:	2800      	cmp	r0, #0
 8005640:	f43f af04 	beq.w	800544c <_scanf_float+0x4c>
 8005644:	e715      	b.n	8005472 <_scanf_float+0x72>
 8005646:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800564a:	4632      	mov	r2, r6
 800564c:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8005650:	4638      	mov	r0, r7
 8005652:	4798      	blx	r3
 8005654:	6923      	ldr	r3, [r4, #16]
 8005656:	3b01      	subs	r3, #1
 8005658:	6123      	str	r3, [r4, #16]
 800565a:	e715      	b.n	8005488 <_scanf_float+0x88>
 800565c:	f10b 33ff 	add.w	r3, fp, #4294967295	; 0xffffffff
 8005660:	2b06      	cmp	r3, #6
 8005662:	d80a      	bhi.n	800567a <_scanf_float+0x27a>
 8005664:	f1bb 0f02 	cmp.w	fp, #2
 8005668:	d967      	bls.n	800573a <_scanf_float+0x33a>
 800566a:	f1ab 0b03 	sub.w	fp, fp, #3
 800566e:	fa5f fb8b 	uxtb.w	fp, fp
 8005672:	eba5 0b0b 	sub.w	fp, r5, fp
 8005676:	455d      	cmp	r5, fp
 8005678:	d14a      	bne.n	8005710 <_scanf_float+0x310>
 800567a:	6823      	ldr	r3, [r4, #0]
 800567c:	05da      	lsls	r2, r3, #23
 800567e:	d51f      	bpl.n	80056c0 <_scanf_float+0x2c0>
 8005680:	055b      	lsls	r3, r3, #21
 8005682:	d467      	bmi.n	8005754 <_scanf_float+0x354>
 8005684:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8005688:	6923      	ldr	r3, [r4, #16]
 800568a:	2965      	cmp	r1, #101	; 0x65
 800568c:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 8005690:	f105 3bff 	add.w	fp, r5, #4294967295	; 0xffffffff
 8005694:	6123      	str	r3, [r4, #16]
 8005696:	d00d      	beq.n	80056b4 <_scanf_float+0x2b4>
 8005698:	2945      	cmp	r1, #69	; 0x45
 800569a:	d00b      	beq.n	80056b4 <_scanf_float+0x2b4>
 800569c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80056a0:	4632      	mov	r2, r6
 80056a2:	4638      	mov	r0, r7
 80056a4:	4798      	blx	r3
 80056a6:	6923      	ldr	r3, [r4, #16]
 80056a8:	f815 1c02 	ldrb.w	r1, [r5, #-2]
 80056ac:	3b01      	subs	r3, #1
 80056ae:	f1a5 0b02 	sub.w	fp, r5, #2
 80056b2:	6123      	str	r3, [r4, #16]
 80056b4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80056b8:	4632      	mov	r2, r6
 80056ba:	4638      	mov	r0, r7
 80056bc:	4798      	blx	r3
 80056be:	465d      	mov	r5, fp
 80056c0:	6826      	ldr	r6, [r4, #0]
 80056c2:	f016 0610 	ands.w	r6, r6, #16
 80056c6:	d176      	bne.n	80057b6 <_scanf_float+0x3b6>
 80056c8:	702e      	strb	r6, [r5, #0]
 80056ca:	6823      	ldr	r3, [r4, #0]
 80056cc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80056d0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80056d4:	d141      	bne.n	800575a <_scanf_float+0x35a>
 80056d6:	9b02      	ldr	r3, [sp, #8]
 80056d8:	eba9 0303 	sub.w	r3, r9, r3
 80056dc:	425a      	negs	r2, r3
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d148      	bne.n	8005774 <_scanf_float+0x374>
 80056e2:	4641      	mov	r1, r8
 80056e4:	2200      	movs	r2, #0
 80056e6:	4638      	mov	r0, r7
 80056e8:	f000 fee6 	bl	80064b8 <_strtod_r>
 80056ec:	6825      	ldr	r5, [r4, #0]
 80056ee:	4680      	mov	r8, r0
 80056f0:	f015 0f02 	tst.w	r5, #2
 80056f4:	4689      	mov	r9, r1
 80056f6:	f8da 3000 	ldr.w	r3, [sl]
 80056fa:	d046      	beq.n	800578a <_scanf_float+0x38a>
 80056fc:	1d1a      	adds	r2, r3, #4
 80056fe:	f8ca 2000 	str.w	r2, [sl]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	e9c3 8900 	strd	r8, r9, [r3]
 8005708:	68e3      	ldr	r3, [r4, #12]
 800570a:	3301      	adds	r3, #1
 800570c:	60e3      	str	r3, [r4, #12]
 800570e:	e6bf      	b.n	8005490 <_scanf_float+0x90>
 8005710:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005714:	4632      	mov	r2, r6
 8005716:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 800571a:	4638      	mov	r0, r7
 800571c:	4798      	blx	r3
 800571e:	6923      	ldr	r3, [r4, #16]
 8005720:	3b01      	subs	r3, #1
 8005722:	6123      	str	r3, [r4, #16]
 8005724:	e7a7      	b.n	8005676 <_scanf_float+0x276>
 8005726:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800572a:	4632      	mov	r2, r6
 800572c:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8005730:	4638      	mov	r0, r7
 8005732:	4798      	blx	r3
 8005734:	6923      	ldr	r3, [r4, #16]
 8005736:	3b01      	subs	r3, #1
 8005738:	6123      	str	r3, [r4, #16]
 800573a:	4545      	cmp	r5, r8
 800573c:	d8f3      	bhi.n	8005726 <_scanf_float+0x326>
 800573e:	e6a6      	b.n	800548e <_scanf_float+0x8e>
 8005740:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005744:	4632      	mov	r2, r6
 8005746:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 800574a:	4638      	mov	r0, r7
 800574c:	4798      	blx	r3
 800574e:	6923      	ldr	r3, [r4, #16]
 8005750:	3b01      	subs	r3, #1
 8005752:	6123      	str	r3, [r4, #16]
 8005754:	4545      	cmp	r5, r8
 8005756:	d8f3      	bhi.n	8005740 <_scanf_float+0x340>
 8005758:	e699      	b.n	800548e <_scanf_float+0x8e>
 800575a:	9b03      	ldr	r3, [sp, #12]
 800575c:	2b00      	cmp	r3, #0
 800575e:	d0c0      	beq.n	80056e2 <_scanf_float+0x2e2>
 8005760:	9904      	ldr	r1, [sp, #16]
 8005762:	230a      	movs	r3, #10
 8005764:	4632      	mov	r2, r6
 8005766:	3101      	adds	r1, #1
 8005768:	4638      	mov	r0, r7
 800576a:	f000 ff31 	bl	80065d0 <_strtol_r>
 800576e:	9b03      	ldr	r3, [sp, #12]
 8005770:	9d04      	ldr	r5, [sp, #16]
 8005772:	1ac2      	subs	r2, r0, r3
 8005774:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8005778:	429d      	cmp	r5, r3
 800577a:	bf28      	it	cs
 800577c:	f504 75b7 	addcs.w	r5, r4, #366	; 0x16e
 8005780:	490e      	ldr	r1, [pc, #56]	; (80057bc <_scanf_float+0x3bc>)
 8005782:	4628      	mov	r0, r5
 8005784:	f000 f854 	bl	8005830 <siprintf>
 8005788:	e7ab      	b.n	80056e2 <_scanf_float+0x2e2>
 800578a:	1d1f      	adds	r7, r3, #4
 800578c:	f015 0504 	ands.w	r5, r5, #4
 8005790:	f8ca 7000 	str.w	r7, [sl]
 8005794:	d1b5      	bne.n	8005702 <_scanf_float+0x302>
 8005796:	681f      	ldr	r7, [r3, #0]
 8005798:	4602      	mov	r2, r0
 800579a:	460b      	mov	r3, r1
 800579c:	f7fb f936 	bl	8000a0c <__aeabi_dcmpun>
 80057a0:	b120      	cbz	r0, 80057ac <_scanf_float+0x3ac>
 80057a2:	4628      	mov	r0, r5
 80057a4:	f000 f80c 	bl	80057c0 <nanf>
 80057a8:	6038      	str	r0, [r7, #0]
 80057aa:	e7ad      	b.n	8005708 <_scanf_float+0x308>
 80057ac:	4640      	mov	r0, r8
 80057ae:	4649      	mov	r1, r9
 80057b0:	f7fb f98a 	bl	8000ac8 <__aeabi_d2f>
 80057b4:	e7f8      	b.n	80057a8 <_scanf_float+0x3a8>
 80057b6:	2600      	movs	r6, #0
 80057b8:	e66a      	b.n	8005490 <_scanf_float+0x90>
 80057ba:	bf00      	nop
 80057bc:	08008d4c 	.word	0x08008d4c

080057c0 <nanf>:
 80057c0:	4800      	ldr	r0, [pc, #0]	; (80057c4 <nanf+0x4>)
 80057c2:	4770      	bx	lr
 80057c4:	7fc00000 	.word	0x7fc00000

080057c8 <sniprintf>:
 80057c8:	b40c      	push	{r2, r3}
 80057ca:	b530      	push	{r4, r5, lr}
 80057cc:	4b17      	ldr	r3, [pc, #92]	; (800582c <sniprintf+0x64>)
 80057ce:	1e0c      	subs	r4, r1, #0
 80057d0:	b09d      	sub	sp, #116	; 0x74
 80057d2:	681d      	ldr	r5, [r3, #0]
 80057d4:	da08      	bge.n	80057e8 <sniprintf+0x20>
 80057d6:	238b      	movs	r3, #139	; 0x8b
 80057d8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80057dc:	602b      	str	r3, [r5, #0]
 80057de:	b01d      	add	sp, #116	; 0x74
 80057e0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80057e4:	b002      	add	sp, #8
 80057e6:	4770      	bx	lr
 80057e8:	f44f 7302 	mov.w	r3, #520	; 0x208
 80057ec:	f8ad 3014 	strh.w	r3, [sp, #20]
 80057f0:	bf0c      	ite	eq
 80057f2:	4623      	moveq	r3, r4
 80057f4:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 80057f8:	9304      	str	r3, [sp, #16]
 80057fa:	9307      	str	r3, [sp, #28]
 80057fc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005800:	9002      	str	r0, [sp, #8]
 8005802:	9006      	str	r0, [sp, #24]
 8005804:	f8ad 3016 	strh.w	r3, [sp, #22]
 8005808:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800580a:	ab21      	add	r3, sp, #132	; 0x84
 800580c:	a902      	add	r1, sp, #8
 800580e:	4628      	mov	r0, r5
 8005810:	9301      	str	r3, [sp, #4]
 8005812:	f002 fd9b 	bl	800834c <_svfiprintf_r>
 8005816:	1c43      	adds	r3, r0, #1
 8005818:	bfbc      	itt	lt
 800581a:	238b      	movlt	r3, #139	; 0x8b
 800581c:	602b      	strlt	r3, [r5, #0]
 800581e:	2c00      	cmp	r4, #0
 8005820:	d0dd      	beq.n	80057de <sniprintf+0x16>
 8005822:	2200      	movs	r2, #0
 8005824:	9b02      	ldr	r3, [sp, #8]
 8005826:	701a      	strb	r2, [r3, #0]
 8005828:	e7d9      	b.n	80057de <sniprintf+0x16>
 800582a:	bf00      	nop
 800582c:	20000018 	.word	0x20000018

08005830 <siprintf>:
 8005830:	b40e      	push	{r1, r2, r3}
 8005832:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005836:	b500      	push	{lr}
 8005838:	b09c      	sub	sp, #112	; 0x70
 800583a:	ab1d      	add	r3, sp, #116	; 0x74
 800583c:	9002      	str	r0, [sp, #8]
 800583e:	9006      	str	r0, [sp, #24]
 8005840:	9107      	str	r1, [sp, #28]
 8005842:	9104      	str	r1, [sp, #16]
 8005844:	4808      	ldr	r0, [pc, #32]	; (8005868 <siprintf+0x38>)
 8005846:	4909      	ldr	r1, [pc, #36]	; (800586c <siprintf+0x3c>)
 8005848:	f853 2b04 	ldr.w	r2, [r3], #4
 800584c:	9105      	str	r1, [sp, #20]
 800584e:	6800      	ldr	r0, [r0, #0]
 8005850:	a902      	add	r1, sp, #8
 8005852:	9301      	str	r3, [sp, #4]
 8005854:	f002 fd7a 	bl	800834c <_svfiprintf_r>
 8005858:	2200      	movs	r2, #0
 800585a:	9b02      	ldr	r3, [sp, #8]
 800585c:	701a      	strb	r2, [r3, #0]
 800585e:	b01c      	add	sp, #112	; 0x70
 8005860:	f85d eb04 	ldr.w	lr, [sp], #4
 8005864:	b003      	add	sp, #12
 8005866:	4770      	bx	lr
 8005868:	20000018 	.word	0x20000018
 800586c:	ffff0208 	.word	0xffff0208

08005870 <sulp>:
 8005870:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005874:	460f      	mov	r7, r1
 8005876:	4690      	mov	r8, r2
 8005878:	f002 fb2c 	bl	8007ed4 <__ulp>
 800587c:	4604      	mov	r4, r0
 800587e:	460d      	mov	r5, r1
 8005880:	f1b8 0f00 	cmp.w	r8, #0
 8005884:	d011      	beq.n	80058aa <sulp+0x3a>
 8005886:	f3c7 530a 	ubfx	r3, r7, #20, #11
 800588a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800588e:	2b00      	cmp	r3, #0
 8005890:	dd0b      	ble.n	80058aa <sulp+0x3a>
 8005892:	2400      	movs	r4, #0
 8005894:	051b      	lsls	r3, r3, #20
 8005896:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800589a:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800589e:	4622      	mov	r2, r4
 80058a0:	462b      	mov	r3, r5
 80058a2:	f7fa fe19 	bl	80004d8 <__aeabi_dmul>
 80058a6:	4604      	mov	r4, r0
 80058a8:	460d      	mov	r5, r1
 80058aa:	4620      	mov	r0, r4
 80058ac:	4629      	mov	r1, r5
 80058ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80058b2:	0000      	movs	r0, r0
 80058b4:	0000      	movs	r0, r0
	...

080058b8 <_strtod_l>:
 80058b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80058bc:	461f      	mov	r7, r3
 80058be:	2300      	movs	r3, #0
 80058c0:	b0a1      	sub	sp, #132	; 0x84
 80058c2:	4683      	mov	fp, r0
 80058c4:	4638      	mov	r0, r7
 80058c6:	460e      	mov	r6, r1
 80058c8:	9217      	str	r2, [sp, #92]	; 0x5c
 80058ca:	931c      	str	r3, [sp, #112]	; 0x70
 80058cc:	f001 ffff 	bl	80078ce <__localeconv_l>
 80058d0:	4680      	mov	r8, r0
 80058d2:	6800      	ldr	r0, [r0, #0]
 80058d4:	f7fa fc3c 	bl	8000150 <strlen>
 80058d8:	f04f 0900 	mov.w	r9, #0
 80058dc:	4604      	mov	r4, r0
 80058de:	f04f 0a00 	mov.w	sl, #0
 80058e2:	961b      	str	r6, [sp, #108]	; 0x6c
 80058e4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80058e6:	781a      	ldrb	r2, [r3, #0]
 80058e8:	2a0d      	cmp	r2, #13
 80058ea:	d832      	bhi.n	8005952 <_strtod_l+0x9a>
 80058ec:	2a09      	cmp	r2, #9
 80058ee:	d236      	bcs.n	800595e <_strtod_l+0xa6>
 80058f0:	2a00      	cmp	r2, #0
 80058f2:	d03e      	beq.n	8005972 <_strtod_l+0xba>
 80058f4:	2300      	movs	r3, #0
 80058f6:	930d      	str	r3, [sp, #52]	; 0x34
 80058f8:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 80058fa:	782b      	ldrb	r3, [r5, #0]
 80058fc:	2b30      	cmp	r3, #48	; 0x30
 80058fe:	f040 80ac 	bne.w	8005a5a <_strtod_l+0x1a2>
 8005902:	786b      	ldrb	r3, [r5, #1]
 8005904:	2b58      	cmp	r3, #88	; 0x58
 8005906:	d001      	beq.n	800590c <_strtod_l+0x54>
 8005908:	2b78      	cmp	r3, #120	; 0x78
 800590a:	d167      	bne.n	80059dc <_strtod_l+0x124>
 800590c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800590e:	9702      	str	r7, [sp, #8]
 8005910:	9301      	str	r3, [sp, #4]
 8005912:	ab1c      	add	r3, sp, #112	; 0x70
 8005914:	9300      	str	r3, [sp, #0]
 8005916:	4a89      	ldr	r2, [pc, #548]	; (8005b3c <_strtod_l+0x284>)
 8005918:	ab1d      	add	r3, sp, #116	; 0x74
 800591a:	a91b      	add	r1, sp, #108	; 0x6c
 800591c:	4658      	mov	r0, fp
 800591e:	f001 fcfb 	bl	8007318 <__gethex>
 8005922:	f010 0407 	ands.w	r4, r0, #7
 8005926:	4606      	mov	r6, r0
 8005928:	d005      	beq.n	8005936 <_strtod_l+0x7e>
 800592a:	2c06      	cmp	r4, #6
 800592c:	d12b      	bne.n	8005986 <_strtod_l+0xce>
 800592e:	2300      	movs	r3, #0
 8005930:	3501      	adds	r5, #1
 8005932:	951b      	str	r5, [sp, #108]	; 0x6c
 8005934:	930d      	str	r3, [sp, #52]	; 0x34
 8005936:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8005938:	2b00      	cmp	r3, #0
 800593a:	f040 85a6 	bne.w	800648a <_strtod_l+0xbd2>
 800593e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005940:	b1e3      	cbz	r3, 800597c <_strtod_l+0xc4>
 8005942:	464a      	mov	r2, r9
 8005944:	f10a 4300 	add.w	r3, sl, #2147483648	; 0x80000000
 8005948:	4610      	mov	r0, r2
 800594a:	4619      	mov	r1, r3
 800594c:	b021      	add	sp, #132	; 0x84
 800594e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005952:	2a2b      	cmp	r2, #43	; 0x2b
 8005954:	d015      	beq.n	8005982 <_strtod_l+0xca>
 8005956:	2a2d      	cmp	r2, #45	; 0x2d
 8005958:	d004      	beq.n	8005964 <_strtod_l+0xac>
 800595a:	2a20      	cmp	r2, #32
 800595c:	d1ca      	bne.n	80058f4 <_strtod_l+0x3c>
 800595e:	3301      	adds	r3, #1
 8005960:	931b      	str	r3, [sp, #108]	; 0x6c
 8005962:	e7bf      	b.n	80058e4 <_strtod_l+0x2c>
 8005964:	2201      	movs	r2, #1
 8005966:	920d      	str	r2, [sp, #52]	; 0x34
 8005968:	1c5a      	adds	r2, r3, #1
 800596a:	921b      	str	r2, [sp, #108]	; 0x6c
 800596c:	785b      	ldrb	r3, [r3, #1]
 800596e:	2b00      	cmp	r3, #0
 8005970:	d1c2      	bne.n	80058f8 <_strtod_l+0x40>
 8005972:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8005974:	961b      	str	r6, [sp, #108]	; 0x6c
 8005976:	2b00      	cmp	r3, #0
 8005978:	f040 8585 	bne.w	8006486 <_strtod_l+0xbce>
 800597c:	464a      	mov	r2, r9
 800597e:	4653      	mov	r3, sl
 8005980:	e7e2      	b.n	8005948 <_strtod_l+0x90>
 8005982:	2200      	movs	r2, #0
 8005984:	e7ef      	b.n	8005966 <_strtod_l+0xae>
 8005986:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8005988:	b13a      	cbz	r2, 800599a <_strtod_l+0xe2>
 800598a:	2135      	movs	r1, #53	; 0x35
 800598c:	a81e      	add	r0, sp, #120	; 0x78
 800598e:	f002 fb94 	bl	80080ba <__copybits>
 8005992:	991c      	ldr	r1, [sp, #112]	; 0x70
 8005994:	4658      	mov	r0, fp
 8005996:	f002 f807 	bl	80079a8 <_Bfree>
 800599a:	3c01      	subs	r4, #1
 800599c:	2c04      	cmp	r4, #4
 800599e:	d806      	bhi.n	80059ae <_strtod_l+0xf6>
 80059a0:	e8df f004 	tbb	[pc, r4]
 80059a4:	1714030a 	.word	0x1714030a
 80059a8:	0a          	.byte	0x0a
 80059a9:	00          	.byte	0x00
 80059aa:	e9dd 9a1e 	ldrd	r9, sl, [sp, #120]	; 0x78
 80059ae:	0731      	lsls	r1, r6, #28
 80059b0:	d5c1      	bpl.n	8005936 <_strtod_l+0x7e>
 80059b2:	f04a 4a00 	orr.w	sl, sl, #2147483648	; 0x80000000
 80059b6:	e7be      	b.n	8005936 <_strtod_l+0x7e>
 80059b8:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 80059ba:	e9dd 931e 	ldrd	r9, r3, [sp, #120]	; 0x78
 80059be:	f202 4233 	addw	r2, r2, #1075	; 0x433
 80059c2:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80059c6:	ea43 5a02 	orr.w	sl, r3, r2, lsl #20
 80059ca:	e7f0      	b.n	80059ae <_strtod_l+0xf6>
 80059cc:	f8df a170 	ldr.w	sl, [pc, #368]	; 8005b40 <_strtod_l+0x288>
 80059d0:	e7ed      	b.n	80059ae <_strtod_l+0xf6>
 80059d2:	f06f 4a00 	mvn.w	sl, #2147483648	; 0x80000000
 80059d6:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
 80059da:	e7e8      	b.n	80059ae <_strtod_l+0xf6>
 80059dc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80059de:	1c5a      	adds	r2, r3, #1
 80059e0:	921b      	str	r2, [sp, #108]	; 0x6c
 80059e2:	785b      	ldrb	r3, [r3, #1]
 80059e4:	2b30      	cmp	r3, #48	; 0x30
 80059e6:	d0f9      	beq.n	80059dc <_strtod_l+0x124>
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	d0a4      	beq.n	8005936 <_strtod_l+0x7e>
 80059ec:	2301      	movs	r3, #1
 80059ee:	2500      	movs	r5, #0
 80059f0:	220a      	movs	r2, #10
 80059f2:	9307      	str	r3, [sp, #28]
 80059f4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80059f6:	9506      	str	r5, [sp, #24]
 80059f8:	9308      	str	r3, [sp, #32]
 80059fa:	9504      	str	r5, [sp, #16]
 80059fc:	981b      	ldr	r0, [sp, #108]	; 0x6c
 80059fe:	7807      	ldrb	r7, [r0, #0]
 8005a00:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 8005a04:	b2d9      	uxtb	r1, r3
 8005a06:	2909      	cmp	r1, #9
 8005a08:	d929      	bls.n	8005a5e <_strtod_l+0x1a6>
 8005a0a:	4622      	mov	r2, r4
 8005a0c:	f8d8 1000 	ldr.w	r1, [r8]
 8005a10:	f002 fda4 	bl	800855c <strncmp>
 8005a14:	2800      	cmp	r0, #0
 8005a16:	d031      	beq.n	8005a7c <_strtod_l+0x1c4>
 8005a18:	2000      	movs	r0, #0
 8005a1a:	463b      	mov	r3, r7
 8005a1c:	4602      	mov	r2, r0
 8005a1e:	9c04      	ldr	r4, [sp, #16]
 8005a20:	9005      	str	r0, [sp, #20]
 8005a22:	2b65      	cmp	r3, #101	; 0x65
 8005a24:	d001      	beq.n	8005a2a <_strtod_l+0x172>
 8005a26:	2b45      	cmp	r3, #69	; 0x45
 8005a28:	d114      	bne.n	8005a54 <_strtod_l+0x19c>
 8005a2a:	b924      	cbnz	r4, 8005a36 <_strtod_l+0x17e>
 8005a2c:	b910      	cbnz	r0, 8005a34 <_strtod_l+0x17c>
 8005a2e:	9b07      	ldr	r3, [sp, #28]
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	d09e      	beq.n	8005972 <_strtod_l+0xba>
 8005a34:	2400      	movs	r4, #0
 8005a36:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 8005a38:	1c73      	adds	r3, r6, #1
 8005a3a:	931b      	str	r3, [sp, #108]	; 0x6c
 8005a3c:	7873      	ldrb	r3, [r6, #1]
 8005a3e:	2b2b      	cmp	r3, #43	; 0x2b
 8005a40:	d078      	beq.n	8005b34 <_strtod_l+0x27c>
 8005a42:	2b2d      	cmp	r3, #45	; 0x2d
 8005a44:	d070      	beq.n	8005b28 <_strtod_l+0x270>
 8005a46:	f04f 0c00 	mov.w	ip, #0
 8005a4a:	f1a3 0730 	sub.w	r7, r3, #48	; 0x30
 8005a4e:	2f09      	cmp	r7, #9
 8005a50:	d97c      	bls.n	8005b4c <_strtod_l+0x294>
 8005a52:	961b      	str	r6, [sp, #108]	; 0x6c
 8005a54:	f04f 0e00 	mov.w	lr, #0
 8005a58:	e09a      	b.n	8005b90 <_strtod_l+0x2d8>
 8005a5a:	2300      	movs	r3, #0
 8005a5c:	e7c7      	b.n	80059ee <_strtod_l+0x136>
 8005a5e:	9904      	ldr	r1, [sp, #16]
 8005a60:	3001      	adds	r0, #1
 8005a62:	2908      	cmp	r1, #8
 8005a64:	bfd7      	itett	le
 8005a66:	9906      	ldrle	r1, [sp, #24]
 8005a68:	fb02 3505 	mlagt	r5, r2, r5, r3
 8005a6c:	fb02 3301 	mlale	r3, r2, r1, r3
 8005a70:	9306      	strle	r3, [sp, #24]
 8005a72:	9b04      	ldr	r3, [sp, #16]
 8005a74:	901b      	str	r0, [sp, #108]	; 0x6c
 8005a76:	3301      	adds	r3, #1
 8005a78:	9304      	str	r3, [sp, #16]
 8005a7a:	e7bf      	b.n	80059fc <_strtod_l+0x144>
 8005a7c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005a7e:	191a      	adds	r2, r3, r4
 8005a80:	921b      	str	r2, [sp, #108]	; 0x6c
 8005a82:	9a04      	ldr	r2, [sp, #16]
 8005a84:	5d1b      	ldrb	r3, [r3, r4]
 8005a86:	2a00      	cmp	r2, #0
 8005a88:	d037      	beq.n	8005afa <_strtod_l+0x242>
 8005a8a:	4602      	mov	r2, r0
 8005a8c:	9c04      	ldr	r4, [sp, #16]
 8005a8e:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8005a92:	2909      	cmp	r1, #9
 8005a94:	d913      	bls.n	8005abe <_strtod_l+0x206>
 8005a96:	2101      	movs	r1, #1
 8005a98:	9105      	str	r1, [sp, #20]
 8005a9a:	e7c2      	b.n	8005a22 <_strtod_l+0x16a>
 8005a9c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005a9e:	3001      	adds	r0, #1
 8005aa0:	1c5a      	adds	r2, r3, #1
 8005aa2:	921b      	str	r2, [sp, #108]	; 0x6c
 8005aa4:	785b      	ldrb	r3, [r3, #1]
 8005aa6:	2b30      	cmp	r3, #48	; 0x30
 8005aa8:	d0f8      	beq.n	8005a9c <_strtod_l+0x1e4>
 8005aaa:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 8005aae:	2a08      	cmp	r2, #8
 8005ab0:	f200 84f0 	bhi.w	8006494 <_strtod_l+0xbdc>
 8005ab4:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8005ab6:	9208      	str	r2, [sp, #32]
 8005ab8:	4602      	mov	r2, r0
 8005aba:	2000      	movs	r0, #0
 8005abc:	4604      	mov	r4, r0
 8005abe:	f1b3 0e30 	subs.w	lr, r3, #48	; 0x30
 8005ac2:	f100 0101 	add.w	r1, r0, #1
 8005ac6:	d012      	beq.n	8005aee <_strtod_l+0x236>
 8005ac8:	440a      	add	r2, r1
 8005aca:	270a      	movs	r7, #10
 8005acc:	4621      	mov	r1, r4
 8005ace:	eb00 0c04 	add.w	ip, r0, r4
 8005ad2:	458c      	cmp	ip, r1
 8005ad4:	d113      	bne.n	8005afe <_strtod_l+0x246>
 8005ad6:	1821      	adds	r1, r4, r0
 8005ad8:	2908      	cmp	r1, #8
 8005ada:	f104 0401 	add.w	r4, r4, #1
 8005ade:	4404      	add	r4, r0
 8005ae0:	dc19      	bgt.n	8005b16 <_strtod_l+0x25e>
 8005ae2:	210a      	movs	r1, #10
 8005ae4:	9b06      	ldr	r3, [sp, #24]
 8005ae6:	fb01 e303 	mla	r3, r1, r3, lr
 8005aea:	9306      	str	r3, [sp, #24]
 8005aec:	2100      	movs	r1, #0
 8005aee:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005af0:	1c58      	adds	r0, r3, #1
 8005af2:	901b      	str	r0, [sp, #108]	; 0x6c
 8005af4:	785b      	ldrb	r3, [r3, #1]
 8005af6:	4608      	mov	r0, r1
 8005af8:	e7c9      	b.n	8005a8e <_strtod_l+0x1d6>
 8005afa:	9804      	ldr	r0, [sp, #16]
 8005afc:	e7d3      	b.n	8005aa6 <_strtod_l+0x1ee>
 8005afe:	2908      	cmp	r1, #8
 8005b00:	f101 0101 	add.w	r1, r1, #1
 8005b04:	dc03      	bgt.n	8005b0e <_strtod_l+0x256>
 8005b06:	9b06      	ldr	r3, [sp, #24]
 8005b08:	437b      	muls	r3, r7
 8005b0a:	9306      	str	r3, [sp, #24]
 8005b0c:	e7e1      	b.n	8005ad2 <_strtod_l+0x21a>
 8005b0e:	2910      	cmp	r1, #16
 8005b10:	bfd8      	it	le
 8005b12:	437d      	mulle	r5, r7
 8005b14:	e7dd      	b.n	8005ad2 <_strtod_l+0x21a>
 8005b16:	2c10      	cmp	r4, #16
 8005b18:	bfdc      	itt	le
 8005b1a:	210a      	movle	r1, #10
 8005b1c:	fb01 e505 	mlale	r5, r1, r5, lr
 8005b20:	e7e4      	b.n	8005aec <_strtod_l+0x234>
 8005b22:	2301      	movs	r3, #1
 8005b24:	9305      	str	r3, [sp, #20]
 8005b26:	e781      	b.n	8005a2c <_strtod_l+0x174>
 8005b28:	f04f 0c01 	mov.w	ip, #1
 8005b2c:	1cb3      	adds	r3, r6, #2
 8005b2e:	931b      	str	r3, [sp, #108]	; 0x6c
 8005b30:	78b3      	ldrb	r3, [r6, #2]
 8005b32:	e78a      	b.n	8005a4a <_strtod_l+0x192>
 8005b34:	f04f 0c00 	mov.w	ip, #0
 8005b38:	e7f8      	b.n	8005b2c <_strtod_l+0x274>
 8005b3a:	bf00      	nop
 8005b3c:	08008d54 	.word	0x08008d54
 8005b40:	7ff00000 	.word	0x7ff00000
 8005b44:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005b46:	1c5f      	adds	r7, r3, #1
 8005b48:	971b      	str	r7, [sp, #108]	; 0x6c
 8005b4a:	785b      	ldrb	r3, [r3, #1]
 8005b4c:	2b30      	cmp	r3, #48	; 0x30
 8005b4e:	d0f9      	beq.n	8005b44 <_strtod_l+0x28c>
 8005b50:	f1a3 0731 	sub.w	r7, r3, #49	; 0x31
 8005b54:	2f08      	cmp	r7, #8
 8005b56:	f63f af7d 	bhi.w	8005a54 <_strtod_l+0x19c>
 8005b5a:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 8005b5e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005b60:	9309      	str	r3, [sp, #36]	; 0x24
 8005b62:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005b64:	1c5f      	adds	r7, r3, #1
 8005b66:	971b      	str	r7, [sp, #108]	; 0x6c
 8005b68:	785b      	ldrb	r3, [r3, #1]
 8005b6a:	f1a3 0830 	sub.w	r8, r3, #48	; 0x30
 8005b6e:	f1b8 0f09 	cmp.w	r8, #9
 8005b72:	d937      	bls.n	8005be4 <_strtod_l+0x32c>
 8005b74:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005b76:	1a7f      	subs	r7, r7, r1
 8005b78:	2f08      	cmp	r7, #8
 8005b7a:	f644 671f 	movw	r7, #19999	; 0x4e1f
 8005b7e:	dc37      	bgt.n	8005bf0 <_strtod_l+0x338>
 8005b80:	45be      	cmp	lr, r7
 8005b82:	bfa8      	it	ge
 8005b84:	46be      	movge	lr, r7
 8005b86:	f1bc 0f00 	cmp.w	ip, #0
 8005b8a:	d001      	beq.n	8005b90 <_strtod_l+0x2d8>
 8005b8c:	f1ce 0e00 	rsb	lr, lr, #0
 8005b90:	2c00      	cmp	r4, #0
 8005b92:	d151      	bne.n	8005c38 <_strtod_l+0x380>
 8005b94:	2800      	cmp	r0, #0
 8005b96:	f47f aece 	bne.w	8005936 <_strtod_l+0x7e>
 8005b9a:	9a07      	ldr	r2, [sp, #28]
 8005b9c:	2a00      	cmp	r2, #0
 8005b9e:	f47f aeca 	bne.w	8005936 <_strtod_l+0x7e>
 8005ba2:	9a05      	ldr	r2, [sp, #20]
 8005ba4:	2a00      	cmp	r2, #0
 8005ba6:	f47f aee4 	bne.w	8005972 <_strtod_l+0xba>
 8005baa:	2b4e      	cmp	r3, #78	; 0x4e
 8005bac:	d027      	beq.n	8005bfe <_strtod_l+0x346>
 8005bae:	dc21      	bgt.n	8005bf4 <_strtod_l+0x33c>
 8005bb0:	2b49      	cmp	r3, #73	; 0x49
 8005bb2:	f47f aede 	bne.w	8005972 <_strtod_l+0xba>
 8005bb6:	49a4      	ldr	r1, [pc, #656]	; (8005e48 <_strtod_l+0x590>)
 8005bb8:	a81b      	add	r0, sp, #108	; 0x6c
 8005bba:	f001 fde1 	bl	8007780 <__match>
 8005bbe:	2800      	cmp	r0, #0
 8005bc0:	f43f aed7 	beq.w	8005972 <_strtod_l+0xba>
 8005bc4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005bc6:	49a1      	ldr	r1, [pc, #644]	; (8005e4c <_strtod_l+0x594>)
 8005bc8:	3b01      	subs	r3, #1
 8005bca:	a81b      	add	r0, sp, #108	; 0x6c
 8005bcc:	931b      	str	r3, [sp, #108]	; 0x6c
 8005bce:	f001 fdd7 	bl	8007780 <__match>
 8005bd2:	b910      	cbnz	r0, 8005bda <_strtod_l+0x322>
 8005bd4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005bd6:	3301      	adds	r3, #1
 8005bd8:	931b      	str	r3, [sp, #108]	; 0x6c
 8005bda:	f8df a284 	ldr.w	sl, [pc, #644]	; 8005e60 <_strtod_l+0x5a8>
 8005bde:	f04f 0900 	mov.w	r9, #0
 8005be2:	e6a8      	b.n	8005936 <_strtod_l+0x7e>
 8005be4:	210a      	movs	r1, #10
 8005be6:	fb01 3e0e 	mla	lr, r1, lr, r3
 8005bea:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8005bee:	e7b8      	b.n	8005b62 <_strtod_l+0x2aa>
 8005bf0:	46be      	mov	lr, r7
 8005bf2:	e7c8      	b.n	8005b86 <_strtod_l+0x2ce>
 8005bf4:	2b69      	cmp	r3, #105	; 0x69
 8005bf6:	d0de      	beq.n	8005bb6 <_strtod_l+0x2fe>
 8005bf8:	2b6e      	cmp	r3, #110	; 0x6e
 8005bfa:	f47f aeba 	bne.w	8005972 <_strtod_l+0xba>
 8005bfe:	4994      	ldr	r1, [pc, #592]	; (8005e50 <_strtod_l+0x598>)
 8005c00:	a81b      	add	r0, sp, #108	; 0x6c
 8005c02:	f001 fdbd 	bl	8007780 <__match>
 8005c06:	2800      	cmp	r0, #0
 8005c08:	f43f aeb3 	beq.w	8005972 <_strtod_l+0xba>
 8005c0c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005c0e:	781b      	ldrb	r3, [r3, #0]
 8005c10:	2b28      	cmp	r3, #40	; 0x28
 8005c12:	d10e      	bne.n	8005c32 <_strtod_l+0x37a>
 8005c14:	aa1e      	add	r2, sp, #120	; 0x78
 8005c16:	498f      	ldr	r1, [pc, #572]	; (8005e54 <_strtod_l+0x59c>)
 8005c18:	a81b      	add	r0, sp, #108	; 0x6c
 8005c1a:	f001 fdc5 	bl	80077a8 <__hexnan>
 8005c1e:	2805      	cmp	r0, #5
 8005c20:	d107      	bne.n	8005c32 <_strtod_l+0x37a>
 8005c22:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8005c24:	f8dd 9078 	ldr.w	r9, [sp, #120]	; 0x78
 8005c28:	f043 4aff 	orr.w	sl, r3, #2139095040	; 0x7f800000
 8005c2c:	f44a 0ae0 	orr.w	sl, sl, #7340032	; 0x700000
 8005c30:	e681      	b.n	8005936 <_strtod_l+0x7e>
 8005c32:	f8df a234 	ldr.w	sl, [pc, #564]	; 8005e68 <_strtod_l+0x5b0>
 8005c36:	e7d2      	b.n	8005bde <_strtod_l+0x326>
 8005c38:	ebae 0302 	sub.w	r3, lr, r2
 8005c3c:	9307      	str	r3, [sp, #28]
 8005c3e:	9b04      	ldr	r3, [sp, #16]
 8005c40:	9806      	ldr	r0, [sp, #24]
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	bf08      	it	eq
 8005c46:	4623      	moveq	r3, r4
 8005c48:	2c10      	cmp	r4, #16
 8005c4a:	9304      	str	r3, [sp, #16]
 8005c4c:	46a0      	mov	r8, r4
 8005c4e:	bfa8      	it	ge
 8005c50:	f04f 0810 	movge.w	r8, #16
 8005c54:	f7fa fbc6 	bl	80003e4 <__aeabi_ui2d>
 8005c58:	2c09      	cmp	r4, #9
 8005c5a:	4681      	mov	r9, r0
 8005c5c:	468a      	mov	sl, r1
 8005c5e:	dc13      	bgt.n	8005c88 <_strtod_l+0x3d0>
 8005c60:	9b07      	ldr	r3, [sp, #28]
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	f43f ae67 	beq.w	8005936 <_strtod_l+0x7e>
 8005c68:	9b07      	ldr	r3, [sp, #28]
 8005c6a:	dd7e      	ble.n	8005d6a <_strtod_l+0x4b2>
 8005c6c:	2b16      	cmp	r3, #22
 8005c6e:	dc65      	bgt.n	8005d3c <_strtod_l+0x484>
 8005c70:	4a79      	ldr	r2, [pc, #484]	; (8005e58 <_strtod_l+0x5a0>)
 8005c72:	eb02 0ec3 	add.w	lr, r2, r3, lsl #3
 8005c76:	464a      	mov	r2, r9
 8005c78:	e9de 0100 	ldrd	r0, r1, [lr]
 8005c7c:	4653      	mov	r3, sl
 8005c7e:	f7fa fc2b 	bl	80004d8 <__aeabi_dmul>
 8005c82:	4681      	mov	r9, r0
 8005c84:	468a      	mov	sl, r1
 8005c86:	e656      	b.n	8005936 <_strtod_l+0x7e>
 8005c88:	4b73      	ldr	r3, [pc, #460]	; (8005e58 <_strtod_l+0x5a0>)
 8005c8a:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8005c8e:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8005c92:	f7fa fc21 	bl	80004d8 <__aeabi_dmul>
 8005c96:	4606      	mov	r6, r0
 8005c98:	4628      	mov	r0, r5
 8005c9a:	460f      	mov	r7, r1
 8005c9c:	f7fa fba2 	bl	80003e4 <__aeabi_ui2d>
 8005ca0:	4602      	mov	r2, r0
 8005ca2:	460b      	mov	r3, r1
 8005ca4:	4630      	mov	r0, r6
 8005ca6:	4639      	mov	r1, r7
 8005ca8:	f7fa fa60 	bl	800016c <__adddf3>
 8005cac:	2c0f      	cmp	r4, #15
 8005cae:	4681      	mov	r9, r0
 8005cb0:	468a      	mov	sl, r1
 8005cb2:	ddd5      	ble.n	8005c60 <_strtod_l+0x3a8>
 8005cb4:	9b07      	ldr	r3, [sp, #28]
 8005cb6:	eba4 0808 	sub.w	r8, r4, r8
 8005cba:	4498      	add	r8, r3
 8005cbc:	f1b8 0f00 	cmp.w	r8, #0
 8005cc0:	f340 809a 	ble.w	8005df8 <_strtod_l+0x540>
 8005cc4:	f018 030f 	ands.w	r3, r8, #15
 8005cc8:	d00a      	beq.n	8005ce0 <_strtod_l+0x428>
 8005cca:	4963      	ldr	r1, [pc, #396]	; (8005e58 <_strtod_l+0x5a0>)
 8005ccc:	464a      	mov	r2, r9
 8005cce:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8005cd2:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005cd6:	4653      	mov	r3, sl
 8005cd8:	f7fa fbfe 	bl	80004d8 <__aeabi_dmul>
 8005cdc:	4681      	mov	r9, r0
 8005cde:	468a      	mov	sl, r1
 8005ce0:	f038 080f 	bics.w	r8, r8, #15
 8005ce4:	d077      	beq.n	8005dd6 <_strtod_l+0x51e>
 8005ce6:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8005cea:	dd4b      	ble.n	8005d84 <_strtod_l+0x4cc>
 8005cec:	f04f 0800 	mov.w	r8, #0
 8005cf0:	f8cd 8010 	str.w	r8, [sp, #16]
 8005cf4:	f8cd 8020 	str.w	r8, [sp, #32]
 8005cf8:	f8cd 8018 	str.w	r8, [sp, #24]
 8005cfc:	2322      	movs	r3, #34	; 0x22
 8005cfe:	f04f 0900 	mov.w	r9, #0
 8005d02:	f8df a15c 	ldr.w	sl, [pc, #348]	; 8005e60 <_strtod_l+0x5a8>
 8005d06:	f8cb 3000 	str.w	r3, [fp]
 8005d0a:	9b08      	ldr	r3, [sp, #32]
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	f43f ae12 	beq.w	8005936 <_strtod_l+0x7e>
 8005d12:	991c      	ldr	r1, [sp, #112]	; 0x70
 8005d14:	4658      	mov	r0, fp
 8005d16:	f001 fe47 	bl	80079a8 <_Bfree>
 8005d1a:	9906      	ldr	r1, [sp, #24]
 8005d1c:	4658      	mov	r0, fp
 8005d1e:	f001 fe43 	bl	80079a8 <_Bfree>
 8005d22:	9904      	ldr	r1, [sp, #16]
 8005d24:	4658      	mov	r0, fp
 8005d26:	f001 fe3f 	bl	80079a8 <_Bfree>
 8005d2a:	9908      	ldr	r1, [sp, #32]
 8005d2c:	4658      	mov	r0, fp
 8005d2e:	f001 fe3b 	bl	80079a8 <_Bfree>
 8005d32:	4641      	mov	r1, r8
 8005d34:	4658      	mov	r0, fp
 8005d36:	f001 fe37 	bl	80079a8 <_Bfree>
 8005d3a:	e5fc      	b.n	8005936 <_strtod_l+0x7e>
 8005d3c:	9a07      	ldr	r2, [sp, #28]
 8005d3e:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 8005d42:	4293      	cmp	r3, r2
 8005d44:	dbb6      	blt.n	8005cb4 <_strtod_l+0x3fc>
 8005d46:	4d44      	ldr	r5, [pc, #272]	; (8005e58 <_strtod_l+0x5a0>)
 8005d48:	f1c4 040f 	rsb	r4, r4, #15
 8005d4c:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 8005d50:	464a      	mov	r2, r9
 8005d52:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005d56:	4653      	mov	r3, sl
 8005d58:	f7fa fbbe 	bl	80004d8 <__aeabi_dmul>
 8005d5c:	9b07      	ldr	r3, [sp, #28]
 8005d5e:	1b1c      	subs	r4, r3, r4
 8005d60:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 8005d64:	e9d5 2300 	ldrd	r2, r3, [r5]
 8005d68:	e789      	b.n	8005c7e <_strtod_l+0x3c6>
 8005d6a:	f113 0f16 	cmn.w	r3, #22
 8005d6e:	dba1      	blt.n	8005cb4 <_strtod_l+0x3fc>
 8005d70:	4a39      	ldr	r2, [pc, #228]	; (8005e58 <_strtod_l+0x5a0>)
 8005d72:	4648      	mov	r0, r9
 8005d74:	eba2 02c3 	sub.w	r2, r2, r3, lsl #3
 8005d78:	e9d2 2300 	ldrd	r2, r3, [r2]
 8005d7c:	4651      	mov	r1, sl
 8005d7e:	f7fa fcd5 	bl	800072c <__aeabi_ddiv>
 8005d82:	e77e      	b.n	8005c82 <_strtod_l+0x3ca>
 8005d84:	2300      	movs	r3, #0
 8005d86:	4648      	mov	r0, r9
 8005d88:	4651      	mov	r1, sl
 8005d8a:	461d      	mov	r5, r3
 8005d8c:	4e33      	ldr	r6, [pc, #204]	; (8005e5c <_strtod_l+0x5a4>)
 8005d8e:	ea4f 1828 	mov.w	r8, r8, asr #4
 8005d92:	f1b8 0f01 	cmp.w	r8, #1
 8005d96:	dc21      	bgt.n	8005ddc <_strtod_l+0x524>
 8005d98:	b10b      	cbz	r3, 8005d9e <_strtod_l+0x4e6>
 8005d9a:	4681      	mov	r9, r0
 8005d9c:	468a      	mov	sl, r1
 8005d9e:	4b2f      	ldr	r3, [pc, #188]	; (8005e5c <_strtod_l+0x5a4>)
 8005da0:	f1aa 7a54 	sub.w	sl, sl, #55574528	; 0x3500000
 8005da4:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8005da8:	464a      	mov	r2, r9
 8005daa:	e9d5 0100 	ldrd	r0, r1, [r5]
 8005dae:	4653      	mov	r3, sl
 8005db0:	f7fa fb92 	bl	80004d8 <__aeabi_dmul>
 8005db4:	4b2a      	ldr	r3, [pc, #168]	; (8005e60 <_strtod_l+0x5a8>)
 8005db6:	460a      	mov	r2, r1
 8005db8:	400b      	ands	r3, r1
 8005dba:	492a      	ldr	r1, [pc, #168]	; (8005e64 <_strtod_l+0x5ac>)
 8005dbc:	4681      	mov	r9, r0
 8005dbe:	428b      	cmp	r3, r1
 8005dc0:	d894      	bhi.n	8005cec <_strtod_l+0x434>
 8005dc2:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8005dc6:	428b      	cmp	r3, r1
 8005dc8:	bf86      	itte	hi
 8005dca:	f04f 39ff 	movhi.w	r9, #4294967295	; 0xffffffff
 8005dce:	f8df a09c 	ldrhi.w	sl, [pc, #156]	; 8005e6c <_strtod_l+0x5b4>
 8005dd2:	f102 7a54 	addls.w	sl, r2, #55574528	; 0x3500000
 8005dd6:	2300      	movs	r3, #0
 8005dd8:	9305      	str	r3, [sp, #20]
 8005dda:	e07b      	b.n	8005ed4 <_strtod_l+0x61c>
 8005ddc:	f018 0f01 	tst.w	r8, #1
 8005de0:	d006      	beq.n	8005df0 <_strtod_l+0x538>
 8005de2:	eb06 03c5 	add.w	r3, r6, r5, lsl #3
 8005de6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005dea:	f7fa fb75 	bl	80004d8 <__aeabi_dmul>
 8005dee:	2301      	movs	r3, #1
 8005df0:	3501      	adds	r5, #1
 8005df2:	ea4f 0868 	mov.w	r8, r8, asr #1
 8005df6:	e7cc      	b.n	8005d92 <_strtod_l+0x4da>
 8005df8:	d0ed      	beq.n	8005dd6 <_strtod_l+0x51e>
 8005dfa:	f1c8 0800 	rsb	r8, r8, #0
 8005dfe:	f018 020f 	ands.w	r2, r8, #15
 8005e02:	d00a      	beq.n	8005e1a <_strtod_l+0x562>
 8005e04:	4b14      	ldr	r3, [pc, #80]	; (8005e58 <_strtod_l+0x5a0>)
 8005e06:	4648      	mov	r0, r9
 8005e08:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005e0c:	4651      	mov	r1, sl
 8005e0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e12:	f7fa fc8b 	bl	800072c <__aeabi_ddiv>
 8005e16:	4681      	mov	r9, r0
 8005e18:	468a      	mov	sl, r1
 8005e1a:	ea5f 1828 	movs.w	r8, r8, asr #4
 8005e1e:	d0da      	beq.n	8005dd6 <_strtod_l+0x51e>
 8005e20:	f1b8 0f1f 	cmp.w	r8, #31
 8005e24:	dd24      	ble.n	8005e70 <_strtod_l+0x5b8>
 8005e26:	f04f 0800 	mov.w	r8, #0
 8005e2a:	f8cd 8010 	str.w	r8, [sp, #16]
 8005e2e:	f8cd 8020 	str.w	r8, [sp, #32]
 8005e32:	f8cd 8018 	str.w	r8, [sp, #24]
 8005e36:	2322      	movs	r3, #34	; 0x22
 8005e38:	f04f 0900 	mov.w	r9, #0
 8005e3c:	f04f 0a00 	mov.w	sl, #0
 8005e40:	f8cb 3000 	str.w	r3, [fp]
 8005e44:	e761      	b.n	8005d0a <_strtod_l+0x452>
 8005e46:	bf00      	nop
 8005e48:	08008d1d 	.word	0x08008d1d
 8005e4c:	08008dab 	.word	0x08008dab
 8005e50:	08008d25 	.word	0x08008d25
 8005e54:	08008d68 	.word	0x08008d68
 8005e58:	08008de8 	.word	0x08008de8
 8005e5c:	08008dc0 	.word	0x08008dc0
 8005e60:	7ff00000 	.word	0x7ff00000
 8005e64:	7ca00000 	.word	0x7ca00000
 8005e68:	fff80000 	.word	0xfff80000
 8005e6c:	7fefffff 	.word	0x7fefffff
 8005e70:	f018 0310 	ands.w	r3, r8, #16
 8005e74:	bf18      	it	ne
 8005e76:	236a      	movne	r3, #106	; 0x6a
 8005e78:	4648      	mov	r0, r9
 8005e7a:	9305      	str	r3, [sp, #20]
 8005e7c:	4651      	mov	r1, sl
 8005e7e:	2300      	movs	r3, #0
 8005e80:	4da1      	ldr	r5, [pc, #644]	; (8006108 <_strtod_l+0x850>)
 8005e82:	f1b8 0f00 	cmp.w	r8, #0
 8005e86:	f300 8113 	bgt.w	80060b0 <_strtod_l+0x7f8>
 8005e8a:	b10b      	cbz	r3, 8005e90 <_strtod_l+0x5d8>
 8005e8c:	4681      	mov	r9, r0
 8005e8e:	468a      	mov	sl, r1
 8005e90:	9b05      	ldr	r3, [sp, #20]
 8005e92:	b1bb      	cbz	r3, 8005ec4 <_strtod_l+0x60c>
 8005e94:	f3ca 530a 	ubfx	r3, sl, #20, #11
 8005e98:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	4651      	mov	r1, sl
 8005ea0:	dd10      	ble.n	8005ec4 <_strtod_l+0x60c>
 8005ea2:	2b1f      	cmp	r3, #31
 8005ea4:	f340 8110 	ble.w	80060c8 <_strtod_l+0x810>
 8005ea8:	2b34      	cmp	r3, #52	; 0x34
 8005eaa:	bfd8      	it	le
 8005eac:	f04f 32ff 	movle.w	r2, #4294967295	; 0xffffffff
 8005eb0:	f04f 0900 	mov.w	r9, #0
 8005eb4:	bfcf      	iteee	gt
 8005eb6:	f04f 7a5c 	movgt.w	sl, #57671680	; 0x3700000
 8005eba:	3b20      	suble	r3, #32
 8005ebc:	fa02 f303 	lslle.w	r3, r2, r3
 8005ec0:	ea03 0a01 	andle.w	sl, r3, r1
 8005ec4:	2200      	movs	r2, #0
 8005ec6:	2300      	movs	r3, #0
 8005ec8:	4648      	mov	r0, r9
 8005eca:	4651      	mov	r1, sl
 8005ecc:	f7fa fd6c 	bl	80009a8 <__aeabi_dcmpeq>
 8005ed0:	2800      	cmp	r0, #0
 8005ed2:	d1a8      	bne.n	8005e26 <_strtod_l+0x56e>
 8005ed4:	9b06      	ldr	r3, [sp, #24]
 8005ed6:	9a04      	ldr	r2, [sp, #16]
 8005ed8:	9300      	str	r3, [sp, #0]
 8005eda:	9908      	ldr	r1, [sp, #32]
 8005edc:	4623      	mov	r3, r4
 8005ede:	4658      	mov	r0, fp
 8005ee0:	f001 fdb4 	bl	8007a4c <__s2b>
 8005ee4:	9008      	str	r0, [sp, #32]
 8005ee6:	2800      	cmp	r0, #0
 8005ee8:	f43f af00 	beq.w	8005cec <_strtod_l+0x434>
 8005eec:	9a07      	ldr	r2, [sp, #28]
 8005eee:	9b07      	ldr	r3, [sp, #28]
 8005ef0:	2a00      	cmp	r2, #0
 8005ef2:	f1c3 0300 	rsb	r3, r3, #0
 8005ef6:	bfa8      	it	ge
 8005ef8:	2300      	movge	r3, #0
 8005efa:	f04f 0800 	mov.w	r8, #0
 8005efe:	930e      	str	r3, [sp, #56]	; 0x38
 8005f00:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8005f04:	9316      	str	r3, [sp, #88]	; 0x58
 8005f06:	f8cd 8010 	str.w	r8, [sp, #16]
 8005f0a:	9b08      	ldr	r3, [sp, #32]
 8005f0c:	4658      	mov	r0, fp
 8005f0e:	6859      	ldr	r1, [r3, #4]
 8005f10:	f001 fd16 	bl	8007940 <_Balloc>
 8005f14:	9006      	str	r0, [sp, #24]
 8005f16:	2800      	cmp	r0, #0
 8005f18:	f43f aef0 	beq.w	8005cfc <_strtod_l+0x444>
 8005f1c:	9b08      	ldr	r3, [sp, #32]
 8005f1e:	300c      	adds	r0, #12
 8005f20:	691a      	ldr	r2, [r3, #16]
 8005f22:	f103 010c 	add.w	r1, r3, #12
 8005f26:	3202      	adds	r2, #2
 8005f28:	0092      	lsls	r2, r2, #2
 8005f2a:	f7fe fded 	bl	8004b08 <memcpy>
 8005f2e:	ab1e      	add	r3, sp, #120	; 0x78
 8005f30:	9301      	str	r3, [sp, #4]
 8005f32:	ab1d      	add	r3, sp, #116	; 0x74
 8005f34:	9300      	str	r3, [sp, #0]
 8005f36:	464a      	mov	r2, r9
 8005f38:	4653      	mov	r3, sl
 8005f3a:	4658      	mov	r0, fp
 8005f3c:	e9cd 9a0a 	strd	r9, sl, [sp, #40]	; 0x28
 8005f40:	f002 f83e 	bl	8007fc0 <__d2b>
 8005f44:	901c      	str	r0, [sp, #112]	; 0x70
 8005f46:	2800      	cmp	r0, #0
 8005f48:	f43f aed8 	beq.w	8005cfc <_strtod_l+0x444>
 8005f4c:	2101      	movs	r1, #1
 8005f4e:	4658      	mov	r0, fp
 8005f50:	f001 fe08 	bl	8007b64 <__i2b>
 8005f54:	9004      	str	r0, [sp, #16]
 8005f56:	4603      	mov	r3, r0
 8005f58:	2800      	cmp	r0, #0
 8005f5a:	f43f aecf 	beq.w	8005cfc <_strtod_l+0x444>
 8005f5e:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 8005f60:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8005f62:	2d00      	cmp	r5, #0
 8005f64:	bfab      	itete	ge
 8005f66:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 8005f68:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 8005f6a:	18ee      	addge	r6, r5, r3
 8005f6c:	1b5c      	sublt	r4, r3, r5
 8005f6e:	9b05      	ldr	r3, [sp, #20]
 8005f70:	bfa8      	it	ge
 8005f72:	9c16      	ldrge	r4, [sp, #88]	; 0x58
 8005f74:	eba5 0503 	sub.w	r5, r5, r3
 8005f78:	4415      	add	r5, r2
 8005f7a:	4b64      	ldr	r3, [pc, #400]	; (800610c <_strtod_l+0x854>)
 8005f7c:	f105 35ff 	add.w	r5, r5, #4294967295	; 0xffffffff
 8005f80:	bfb8      	it	lt
 8005f82:	9e0e      	ldrlt	r6, [sp, #56]	; 0x38
 8005f84:	429d      	cmp	r5, r3
 8005f86:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8005f8a:	f280 80af 	bge.w	80060ec <_strtod_l+0x834>
 8005f8e:	1b5b      	subs	r3, r3, r5
 8005f90:	2b1f      	cmp	r3, #31
 8005f92:	eba2 0203 	sub.w	r2, r2, r3
 8005f96:	f04f 0701 	mov.w	r7, #1
 8005f9a:	f300 809c 	bgt.w	80060d6 <_strtod_l+0x81e>
 8005f9e:	2500      	movs	r5, #0
 8005fa0:	fa07 f303 	lsl.w	r3, r7, r3
 8005fa4:	930f      	str	r3, [sp, #60]	; 0x3c
 8005fa6:	18b7      	adds	r7, r6, r2
 8005fa8:	9b05      	ldr	r3, [sp, #20]
 8005faa:	42be      	cmp	r6, r7
 8005fac:	4414      	add	r4, r2
 8005fae:	441c      	add	r4, r3
 8005fb0:	4633      	mov	r3, r6
 8005fb2:	bfa8      	it	ge
 8005fb4:	463b      	movge	r3, r7
 8005fb6:	42a3      	cmp	r3, r4
 8005fb8:	bfa8      	it	ge
 8005fba:	4623      	movge	r3, r4
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	bfc2      	ittt	gt
 8005fc0:	1aff      	subgt	r7, r7, r3
 8005fc2:	1ae4      	subgt	r4, r4, r3
 8005fc4:	1af6      	subgt	r6, r6, r3
 8005fc6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005fc8:	b1bb      	cbz	r3, 8005ffa <_strtod_l+0x742>
 8005fca:	461a      	mov	r2, r3
 8005fcc:	9904      	ldr	r1, [sp, #16]
 8005fce:	4658      	mov	r0, fp
 8005fd0:	f001 fe66 	bl	8007ca0 <__pow5mult>
 8005fd4:	9004      	str	r0, [sp, #16]
 8005fd6:	2800      	cmp	r0, #0
 8005fd8:	f43f ae90 	beq.w	8005cfc <_strtod_l+0x444>
 8005fdc:	4601      	mov	r1, r0
 8005fde:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8005fe0:	4658      	mov	r0, fp
 8005fe2:	f001 fdc8 	bl	8007b76 <__multiply>
 8005fe6:	9009      	str	r0, [sp, #36]	; 0x24
 8005fe8:	2800      	cmp	r0, #0
 8005fea:	f43f ae87 	beq.w	8005cfc <_strtod_l+0x444>
 8005fee:	991c      	ldr	r1, [sp, #112]	; 0x70
 8005ff0:	4658      	mov	r0, fp
 8005ff2:	f001 fcd9 	bl	80079a8 <_Bfree>
 8005ff6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005ff8:	931c      	str	r3, [sp, #112]	; 0x70
 8005ffa:	2f00      	cmp	r7, #0
 8005ffc:	dc7a      	bgt.n	80060f4 <_strtod_l+0x83c>
 8005ffe:	9b07      	ldr	r3, [sp, #28]
 8006000:	2b00      	cmp	r3, #0
 8006002:	dd08      	ble.n	8006016 <_strtod_l+0x75e>
 8006004:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8006006:	9906      	ldr	r1, [sp, #24]
 8006008:	4658      	mov	r0, fp
 800600a:	f001 fe49 	bl	8007ca0 <__pow5mult>
 800600e:	9006      	str	r0, [sp, #24]
 8006010:	2800      	cmp	r0, #0
 8006012:	f43f ae73 	beq.w	8005cfc <_strtod_l+0x444>
 8006016:	2c00      	cmp	r4, #0
 8006018:	dd08      	ble.n	800602c <_strtod_l+0x774>
 800601a:	4622      	mov	r2, r4
 800601c:	9906      	ldr	r1, [sp, #24]
 800601e:	4658      	mov	r0, fp
 8006020:	f001 fe8c 	bl	8007d3c <__lshift>
 8006024:	9006      	str	r0, [sp, #24]
 8006026:	2800      	cmp	r0, #0
 8006028:	f43f ae68 	beq.w	8005cfc <_strtod_l+0x444>
 800602c:	2e00      	cmp	r6, #0
 800602e:	dd08      	ble.n	8006042 <_strtod_l+0x78a>
 8006030:	4632      	mov	r2, r6
 8006032:	9904      	ldr	r1, [sp, #16]
 8006034:	4658      	mov	r0, fp
 8006036:	f001 fe81 	bl	8007d3c <__lshift>
 800603a:	9004      	str	r0, [sp, #16]
 800603c:	2800      	cmp	r0, #0
 800603e:	f43f ae5d 	beq.w	8005cfc <_strtod_l+0x444>
 8006042:	9a06      	ldr	r2, [sp, #24]
 8006044:	991c      	ldr	r1, [sp, #112]	; 0x70
 8006046:	4658      	mov	r0, fp
 8006048:	f001 fee6 	bl	8007e18 <__mdiff>
 800604c:	4680      	mov	r8, r0
 800604e:	2800      	cmp	r0, #0
 8006050:	f43f ae54 	beq.w	8005cfc <_strtod_l+0x444>
 8006054:	2400      	movs	r4, #0
 8006056:	68c3      	ldr	r3, [r0, #12]
 8006058:	9904      	ldr	r1, [sp, #16]
 800605a:	60c4      	str	r4, [r0, #12]
 800605c:	930c      	str	r3, [sp, #48]	; 0x30
 800605e:	f001 fec1 	bl	8007de4 <__mcmp>
 8006062:	42a0      	cmp	r0, r4
 8006064:	da54      	bge.n	8006110 <_strtod_l+0x858>
 8006066:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006068:	b9f3      	cbnz	r3, 80060a8 <_strtod_l+0x7f0>
 800606a:	f1b9 0f00 	cmp.w	r9, #0
 800606e:	d11b      	bne.n	80060a8 <_strtod_l+0x7f0>
 8006070:	f3ca 0313 	ubfx	r3, sl, #0, #20
 8006074:	b9c3      	cbnz	r3, 80060a8 <_strtod_l+0x7f0>
 8006076:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 800607a:	0d1b      	lsrs	r3, r3, #20
 800607c:	051b      	lsls	r3, r3, #20
 800607e:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8006082:	d911      	bls.n	80060a8 <_strtod_l+0x7f0>
 8006084:	f8d8 3014 	ldr.w	r3, [r8, #20]
 8006088:	b91b      	cbnz	r3, 8006092 <_strtod_l+0x7da>
 800608a:	f8d8 3010 	ldr.w	r3, [r8, #16]
 800608e:	2b01      	cmp	r3, #1
 8006090:	dd0a      	ble.n	80060a8 <_strtod_l+0x7f0>
 8006092:	4641      	mov	r1, r8
 8006094:	2201      	movs	r2, #1
 8006096:	4658      	mov	r0, fp
 8006098:	f001 fe50 	bl	8007d3c <__lshift>
 800609c:	9904      	ldr	r1, [sp, #16]
 800609e:	4680      	mov	r8, r0
 80060a0:	f001 fea0 	bl	8007de4 <__mcmp>
 80060a4:	2800      	cmp	r0, #0
 80060a6:	dc68      	bgt.n	800617a <_strtod_l+0x8c2>
 80060a8:	9b05      	ldr	r3, [sp, #20]
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	d172      	bne.n	8006194 <_strtod_l+0x8dc>
 80060ae:	e630      	b.n	8005d12 <_strtod_l+0x45a>
 80060b0:	f018 0f01 	tst.w	r8, #1
 80060b4:	d004      	beq.n	80060c0 <_strtod_l+0x808>
 80060b6:	e9d5 2300 	ldrd	r2, r3, [r5]
 80060ba:	f7fa fa0d 	bl	80004d8 <__aeabi_dmul>
 80060be:	2301      	movs	r3, #1
 80060c0:	ea4f 0868 	mov.w	r8, r8, asr #1
 80060c4:	3508      	adds	r5, #8
 80060c6:	e6dc      	b.n	8005e82 <_strtod_l+0x5ca>
 80060c8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80060cc:	fa02 f303 	lsl.w	r3, r2, r3
 80060d0:	ea03 0909 	and.w	r9, r3, r9
 80060d4:	e6f6      	b.n	8005ec4 <_strtod_l+0x60c>
 80060d6:	f1c5 457f 	rsb	r5, r5, #4278190080	; 0xff000000
 80060da:	f505 057f 	add.w	r5, r5, #16711680	; 0xff0000
 80060de:	f505 457b 	add.w	r5, r5, #64256	; 0xfb00
 80060e2:	35e2      	adds	r5, #226	; 0xe2
 80060e4:	fa07 f505 	lsl.w	r5, r7, r5
 80060e8:	970f      	str	r7, [sp, #60]	; 0x3c
 80060ea:	e75c      	b.n	8005fa6 <_strtod_l+0x6ee>
 80060ec:	2301      	movs	r3, #1
 80060ee:	2500      	movs	r5, #0
 80060f0:	930f      	str	r3, [sp, #60]	; 0x3c
 80060f2:	e758      	b.n	8005fa6 <_strtod_l+0x6ee>
 80060f4:	463a      	mov	r2, r7
 80060f6:	991c      	ldr	r1, [sp, #112]	; 0x70
 80060f8:	4658      	mov	r0, fp
 80060fa:	f001 fe1f 	bl	8007d3c <__lshift>
 80060fe:	901c      	str	r0, [sp, #112]	; 0x70
 8006100:	2800      	cmp	r0, #0
 8006102:	f47f af7c 	bne.w	8005ffe <_strtod_l+0x746>
 8006106:	e5f9      	b.n	8005cfc <_strtod_l+0x444>
 8006108:	08008d80 	.word	0x08008d80
 800610c:	fffffc02 	.word	0xfffffc02
 8006110:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 8006114:	f040 8089 	bne.w	800622a <_strtod_l+0x972>
 8006118:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800611a:	f3ca 0313 	ubfx	r3, sl, #0, #20
 800611e:	b342      	cbz	r2, 8006172 <_strtod_l+0x8ba>
 8006120:	4aaf      	ldr	r2, [pc, #700]	; (80063e0 <_strtod_l+0xb28>)
 8006122:	4293      	cmp	r3, r2
 8006124:	d156      	bne.n	80061d4 <_strtod_l+0x91c>
 8006126:	9b05      	ldr	r3, [sp, #20]
 8006128:	4648      	mov	r0, r9
 800612a:	b1eb      	cbz	r3, 8006168 <_strtod_l+0x8b0>
 800612c:	4653      	mov	r3, sl
 800612e:	4aad      	ldr	r2, [pc, #692]	; (80063e4 <_strtod_l+0xb2c>)
 8006130:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8006134:	401a      	ands	r2, r3
 8006136:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 800613a:	d818      	bhi.n	800616e <_strtod_l+0x8b6>
 800613c:	0d12      	lsrs	r2, r2, #20
 800613e:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8006142:	fa01 f303 	lsl.w	r3, r1, r3
 8006146:	4298      	cmp	r0, r3
 8006148:	d144      	bne.n	80061d4 <_strtod_l+0x91c>
 800614a:	4ba7      	ldr	r3, [pc, #668]	; (80063e8 <_strtod_l+0xb30>)
 800614c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800614e:	429a      	cmp	r2, r3
 8006150:	d102      	bne.n	8006158 <_strtod_l+0x8a0>
 8006152:	3001      	adds	r0, #1
 8006154:	f43f add2 	beq.w	8005cfc <_strtod_l+0x444>
 8006158:	4ba2      	ldr	r3, [pc, #648]	; (80063e4 <_strtod_l+0xb2c>)
 800615a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800615c:	f04f 0900 	mov.w	r9, #0
 8006160:	401a      	ands	r2, r3
 8006162:	f502 1a80 	add.w	sl, r2, #1048576	; 0x100000
 8006166:	e79f      	b.n	80060a8 <_strtod_l+0x7f0>
 8006168:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800616c:	e7eb      	b.n	8006146 <_strtod_l+0x88e>
 800616e:	460b      	mov	r3, r1
 8006170:	e7e9      	b.n	8006146 <_strtod_l+0x88e>
 8006172:	bb7b      	cbnz	r3, 80061d4 <_strtod_l+0x91c>
 8006174:	f1b9 0f00 	cmp.w	r9, #0
 8006178:	d12c      	bne.n	80061d4 <_strtod_l+0x91c>
 800617a:	9905      	ldr	r1, [sp, #20]
 800617c:	4653      	mov	r3, sl
 800617e:	4a99      	ldr	r2, [pc, #612]	; (80063e4 <_strtod_l+0xb2c>)
 8006180:	b1f1      	cbz	r1, 80061c0 <_strtod_l+0x908>
 8006182:	ea02 010a 	and.w	r1, r2, sl
 8006186:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800618a:	dc19      	bgt.n	80061c0 <_strtod_l+0x908>
 800618c:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8006190:	f77f ae51 	ble.w	8005e36 <_strtod_l+0x57e>
 8006194:	2300      	movs	r3, #0
 8006196:	4a95      	ldr	r2, [pc, #596]	; (80063ec <_strtod_l+0xb34>)
 8006198:	4648      	mov	r0, r9
 800619a:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 800619e:	4651      	mov	r1, sl
 80061a0:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 80061a4:	f7fa f998 	bl	80004d8 <__aeabi_dmul>
 80061a8:	4681      	mov	r9, r0
 80061aa:	468a      	mov	sl, r1
 80061ac:	2900      	cmp	r1, #0
 80061ae:	f47f adb0 	bne.w	8005d12 <_strtod_l+0x45a>
 80061b2:	2800      	cmp	r0, #0
 80061b4:	f47f adad 	bne.w	8005d12 <_strtod_l+0x45a>
 80061b8:	2322      	movs	r3, #34	; 0x22
 80061ba:	f8cb 3000 	str.w	r3, [fp]
 80061be:	e5a8      	b.n	8005d12 <_strtod_l+0x45a>
 80061c0:	4013      	ands	r3, r2
 80061c2:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 80061c6:	ea6f 5a13 	mvn.w	sl, r3, lsr #20
 80061ca:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
 80061ce:	ea6f 5a0a 	mvn.w	sl, sl, lsl #20
 80061d2:	e769      	b.n	80060a8 <_strtod_l+0x7f0>
 80061d4:	b19d      	cbz	r5, 80061fe <_strtod_l+0x946>
 80061d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80061d8:	421d      	tst	r5, r3
 80061da:	f43f af65 	beq.w	80060a8 <_strtod_l+0x7f0>
 80061de:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80061e0:	9a05      	ldr	r2, [sp, #20]
 80061e2:	4648      	mov	r0, r9
 80061e4:	4651      	mov	r1, sl
 80061e6:	b173      	cbz	r3, 8006206 <_strtod_l+0x94e>
 80061e8:	f7ff fb42 	bl	8005870 <sulp>
 80061ec:	4602      	mov	r2, r0
 80061ee:	460b      	mov	r3, r1
 80061f0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80061f4:	f7f9 ffba 	bl	800016c <__adddf3>
 80061f8:	4681      	mov	r9, r0
 80061fa:	468a      	mov	sl, r1
 80061fc:	e754      	b.n	80060a8 <_strtod_l+0x7f0>
 80061fe:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006200:	ea13 0f09 	tst.w	r3, r9
 8006204:	e7e9      	b.n	80061da <_strtod_l+0x922>
 8006206:	f7ff fb33 	bl	8005870 <sulp>
 800620a:	4602      	mov	r2, r0
 800620c:	460b      	mov	r3, r1
 800620e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8006212:	f7f9 ffa9 	bl	8000168 <__aeabi_dsub>
 8006216:	2200      	movs	r2, #0
 8006218:	2300      	movs	r3, #0
 800621a:	4681      	mov	r9, r0
 800621c:	468a      	mov	sl, r1
 800621e:	f7fa fbc3 	bl	80009a8 <__aeabi_dcmpeq>
 8006222:	2800      	cmp	r0, #0
 8006224:	f47f ae07 	bne.w	8005e36 <_strtod_l+0x57e>
 8006228:	e73e      	b.n	80060a8 <_strtod_l+0x7f0>
 800622a:	9904      	ldr	r1, [sp, #16]
 800622c:	4640      	mov	r0, r8
 800622e:	f001 ff16 	bl	800805e <__ratio>
 8006232:	2200      	movs	r2, #0
 8006234:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006238:	4606      	mov	r6, r0
 800623a:	460f      	mov	r7, r1
 800623c:	f7fa fbc8 	bl	80009d0 <__aeabi_dcmple>
 8006240:	2800      	cmp	r0, #0
 8006242:	d075      	beq.n	8006330 <_strtod_l+0xa78>
 8006244:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006246:	2b00      	cmp	r3, #0
 8006248:	d047      	beq.n	80062da <_strtod_l+0xa22>
 800624a:	2600      	movs	r6, #0
 800624c:	4f68      	ldr	r7, [pc, #416]	; (80063f0 <_strtod_l+0xb38>)
 800624e:	4d68      	ldr	r5, [pc, #416]	; (80063f0 <_strtod_l+0xb38>)
 8006250:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006252:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006256:	0d1b      	lsrs	r3, r3, #20
 8006258:	051b      	lsls	r3, r3, #20
 800625a:	930f      	str	r3, [sp, #60]	; 0x3c
 800625c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800625e:	4b65      	ldr	r3, [pc, #404]	; (80063f4 <_strtod_l+0xb3c>)
 8006260:	429a      	cmp	r2, r3
 8006262:	f040 80cf 	bne.w	8006404 <_strtod_l+0xb4c>
 8006266:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800626a:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 800626e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006270:	4648      	mov	r0, r9
 8006272:	f1a3 7a54 	sub.w	sl, r3, #55574528	; 0x3500000
 8006276:	4651      	mov	r1, sl
 8006278:	f001 fe2c 	bl	8007ed4 <__ulp>
 800627c:	4602      	mov	r2, r0
 800627e:	460b      	mov	r3, r1
 8006280:	4630      	mov	r0, r6
 8006282:	4639      	mov	r1, r7
 8006284:	f7fa f928 	bl	80004d8 <__aeabi_dmul>
 8006288:	464a      	mov	r2, r9
 800628a:	4653      	mov	r3, sl
 800628c:	f7f9 ff6e 	bl	800016c <__adddf3>
 8006290:	460b      	mov	r3, r1
 8006292:	4954      	ldr	r1, [pc, #336]	; (80063e4 <_strtod_l+0xb2c>)
 8006294:	4a58      	ldr	r2, [pc, #352]	; (80063f8 <_strtod_l+0xb40>)
 8006296:	4019      	ands	r1, r3
 8006298:	4291      	cmp	r1, r2
 800629a:	4681      	mov	r9, r0
 800629c:	d95e      	bls.n	800635c <_strtod_l+0xaa4>
 800629e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80062a0:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 80062a4:	4293      	cmp	r3, r2
 80062a6:	d103      	bne.n	80062b0 <_strtod_l+0x9f8>
 80062a8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80062aa:	3301      	adds	r3, #1
 80062ac:	f43f ad26 	beq.w	8005cfc <_strtod_l+0x444>
 80062b0:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
 80062b4:	f8df a130 	ldr.w	sl, [pc, #304]	; 80063e8 <_strtod_l+0xb30>
 80062b8:	991c      	ldr	r1, [sp, #112]	; 0x70
 80062ba:	4658      	mov	r0, fp
 80062bc:	f001 fb74 	bl	80079a8 <_Bfree>
 80062c0:	9906      	ldr	r1, [sp, #24]
 80062c2:	4658      	mov	r0, fp
 80062c4:	f001 fb70 	bl	80079a8 <_Bfree>
 80062c8:	9904      	ldr	r1, [sp, #16]
 80062ca:	4658      	mov	r0, fp
 80062cc:	f001 fb6c 	bl	80079a8 <_Bfree>
 80062d0:	4641      	mov	r1, r8
 80062d2:	4658      	mov	r0, fp
 80062d4:	f001 fb68 	bl	80079a8 <_Bfree>
 80062d8:	e617      	b.n	8005f0a <_strtod_l+0x652>
 80062da:	f1b9 0f00 	cmp.w	r9, #0
 80062de:	d119      	bne.n	8006314 <_strtod_l+0xa5c>
 80062e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80062e2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80062e6:	b9e3      	cbnz	r3, 8006322 <_strtod_l+0xa6a>
 80062e8:	2200      	movs	r2, #0
 80062ea:	4b41      	ldr	r3, [pc, #260]	; (80063f0 <_strtod_l+0xb38>)
 80062ec:	4630      	mov	r0, r6
 80062ee:	4639      	mov	r1, r7
 80062f0:	f7fa fb64 	bl	80009bc <__aeabi_dcmplt>
 80062f4:	b9c8      	cbnz	r0, 800632a <_strtod_l+0xa72>
 80062f6:	2200      	movs	r2, #0
 80062f8:	4b40      	ldr	r3, [pc, #256]	; (80063fc <_strtod_l+0xb44>)
 80062fa:	4630      	mov	r0, r6
 80062fc:	4639      	mov	r1, r7
 80062fe:	f7fa f8eb 	bl	80004d8 <__aeabi_dmul>
 8006302:	4604      	mov	r4, r0
 8006304:	460d      	mov	r5, r1
 8006306:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 800630a:	9418      	str	r4, [sp, #96]	; 0x60
 800630c:	9319      	str	r3, [sp, #100]	; 0x64
 800630e:	e9dd 6718 	ldrd	r6, r7, [sp, #96]	; 0x60
 8006312:	e79d      	b.n	8006250 <_strtod_l+0x998>
 8006314:	f1b9 0f01 	cmp.w	r9, #1
 8006318:	d103      	bne.n	8006322 <_strtod_l+0xa6a>
 800631a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800631c:	2b00      	cmp	r3, #0
 800631e:	f43f ad8a 	beq.w	8005e36 <_strtod_l+0x57e>
 8006322:	2600      	movs	r6, #0
 8006324:	4f36      	ldr	r7, [pc, #216]	; (8006400 <_strtod_l+0xb48>)
 8006326:	2400      	movs	r4, #0
 8006328:	e791      	b.n	800624e <_strtod_l+0x996>
 800632a:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 800632c:	4d33      	ldr	r5, [pc, #204]	; (80063fc <_strtod_l+0xb44>)
 800632e:	e7ea      	b.n	8006306 <_strtod_l+0xa4e>
 8006330:	4b32      	ldr	r3, [pc, #200]	; (80063fc <_strtod_l+0xb44>)
 8006332:	2200      	movs	r2, #0
 8006334:	4630      	mov	r0, r6
 8006336:	4639      	mov	r1, r7
 8006338:	f7fa f8ce 	bl	80004d8 <__aeabi_dmul>
 800633c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800633e:	4604      	mov	r4, r0
 8006340:	460d      	mov	r5, r1
 8006342:	b933      	cbnz	r3, 8006352 <_strtod_l+0xa9a>
 8006344:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006348:	9010      	str	r0, [sp, #64]	; 0x40
 800634a:	9311      	str	r3, [sp, #68]	; 0x44
 800634c:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8006350:	e77e      	b.n	8006250 <_strtod_l+0x998>
 8006352:	4602      	mov	r2, r0
 8006354:	460b      	mov	r3, r1
 8006356:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 800635a:	e7f7      	b.n	800634c <_strtod_l+0xa94>
 800635c:	f103 7a54 	add.w	sl, r3, #55574528	; 0x3500000
 8006360:	9b05      	ldr	r3, [sp, #20]
 8006362:	2b00      	cmp	r3, #0
 8006364:	d1a8      	bne.n	80062b8 <_strtod_l+0xa00>
 8006366:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 800636a:	0d1b      	lsrs	r3, r3, #20
 800636c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800636e:	051b      	lsls	r3, r3, #20
 8006370:	429a      	cmp	r2, r3
 8006372:	4656      	mov	r6, sl
 8006374:	d1a0      	bne.n	80062b8 <_strtod_l+0xa00>
 8006376:	4629      	mov	r1, r5
 8006378:	4620      	mov	r0, r4
 800637a:	f7fa fb5d 	bl	8000a38 <__aeabi_d2iz>
 800637e:	f7fa f841 	bl	8000404 <__aeabi_i2d>
 8006382:	460b      	mov	r3, r1
 8006384:	4602      	mov	r2, r0
 8006386:	4629      	mov	r1, r5
 8006388:	4620      	mov	r0, r4
 800638a:	f7f9 feed 	bl	8000168 <__aeabi_dsub>
 800638e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006390:	4604      	mov	r4, r0
 8006392:	460d      	mov	r5, r1
 8006394:	b933      	cbnz	r3, 80063a4 <_strtod_l+0xaec>
 8006396:	f1b9 0f00 	cmp.w	r9, #0
 800639a:	d103      	bne.n	80063a4 <_strtod_l+0xaec>
 800639c:	f3ca 0613 	ubfx	r6, sl, #0, #20
 80063a0:	2e00      	cmp	r6, #0
 80063a2:	d06a      	beq.n	800647a <_strtod_l+0xbc2>
 80063a4:	a30a      	add	r3, pc, #40	; (adr r3, 80063d0 <_strtod_l+0xb18>)
 80063a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063aa:	4620      	mov	r0, r4
 80063ac:	4629      	mov	r1, r5
 80063ae:	f7fa fb05 	bl	80009bc <__aeabi_dcmplt>
 80063b2:	2800      	cmp	r0, #0
 80063b4:	f47f acad 	bne.w	8005d12 <_strtod_l+0x45a>
 80063b8:	a307      	add	r3, pc, #28	; (adr r3, 80063d8 <_strtod_l+0xb20>)
 80063ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063be:	4620      	mov	r0, r4
 80063c0:	4629      	mov	r1, r5
 80063c2:	f7fa fb19 	bl	80009f8 <__aeabi_dcmpgt>
 80063c6:	2800      	cmp	r0, #0
 80063c8:	f43f af76 	beq.w	80062b8 <_strtod_l+0xa00>
 80063cc:	e4a1      	b.n	8005d12 <_strtod_l+0x45a>
 80063ce:	bf00      	nop
 80063d0:	94a03595 	.word	0x94a03595
 80063d4:	3fdfffff 	.word	0x3fdfffff
 80063d8:	35afe535 	.word	0x35afe535
 80063dc:	3fe00000 	.word	0x3fe00000
 80063e0:	000fffff 	.word	0x000fffff
 80063e4:	7ff00000 	.word	0x7ff00000
 80063e8:	7fefffff 	.word	0x7fefffff
 80063ec:	39500000 	.word	0x39500000
 80063f0:	3ff00000 	.word	0x3ff00000
 80063f4:	7fe00000 	.word	0x7fe00000
 80063f8:	7c9fffff 	.word	0x7c9fffff
 80063fc:	3fe00000 	.word	0x3fe00000
 8006400:	bff00000 	.word	0xbff00000
 8006404:	9b05      	ldr	r3, [sp, #20]
 8006406:	b313      	cbz	r3, 800644e <_strtod_l+0xb96>
 8006408:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800640a:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800640e:	d81e      	bhi.n	800644e <_strtod_l+0xb96>
 8006410:	a325      	add	r3, pc, #148	; (adr r3, 80064a8 <_strtod_l+0xbf0>)
 8006412:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006416:	4620      	mov	r0, r4
 8006418:	4629      	mov	r1, r5
 800641a:	f7fa fad9 	bl	80009d0 <__aeabi_dcmple>
 800641e:	b190      	cbz	r0, 8006446 <_strtod_l+0xb8e>
 8006420:	4629      	mov	r1, r5
 8006422:	4620      	mov	r0, r4
 8006424:	f7fa fb30 	bl	8000a88 <__aeabi_d2uiz>
 8006428:	2800      	cmp	r0, #0
 800642a:	bf08      	it	eq
 800642c:	2001      	moveq	r0, #1
 800642e:	f7f9 ffd9 	bl	80003e4 <__aeabi_ui2d>
 8006432:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006434:	4604      	mov	r4, r0
 8006436:	460d      	mov	r5, r1
 8006438:	b9d3      	cbnz	r3, 8006470 <_strtod_l+0xbb8>
 800643a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800643e:	9012      	str	r0, [sp, #72]	; 0x48
 8006440:	9313      	str	r3, [sp, #76]	; 0x4c
 8006442:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
 8006446:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8006448:	f107 63d6 	add.w	r3, r7, #112197632	; 0x6b00000
 800644c:	1a9f      	subs	r7, r3, r2
 800644e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8006452:	f001 fd3f 	bl	8007ed4 <__ulp>
 8006456:	4602      	mov	r2, r0
 8006458:	460b      	mov	r3, r1
 800645a:	4630      	mov	r0, r6
 800645c:	4639      	mov	r1, r7
 800645e:	f7fa f83b 	bl	80004d8 <__aeabi_dmul>
 8006462:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8006466:	f7f9 fe81 	bl	800016c <__adddf3>
 800646a:	4681      	mov	r9, r0
 800646c:	468a      	mov	sl, r1
 800646e:	e777      	b.n	8006360 <_strtod_l+0xaa8>
 8006470:	4602      	mov	r2, r0
 8006472:	460b      	mov	r3, r1
 8006474:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
 8006478:	e7e3      	b.n	8006442 <_strtod_l+0xb8a>
 800647a:	a30d      	add	r3, pc, #52	; (adr r3, 80064b0 <_strtod_l+0xbf8>)
 800647c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006480:	f7fa fa9c 	bl	80009bc <__aeabi_dcmplt>
 8006484:	e79f      	b.n	80063c6 <_strtod_l+0xb0e>
 8006486:	2300      	movs	r3, #0
 8006488:	930d      	str	r3, [sp, #52]	; 0x34
 800648a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800648c:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800648e:	6013      	str	r3, [r2, #0]
 8006490:	f7ff ba55 	b.w	800593e <_strtod_l+0x86>
 8006494:	2b65      	cmp	r3, #101	; 0x65
 8006496:	f04f 0200 	mov.w	r2, #0
 800649a:	f43f ab42 	beq.w	8005b22 <_strtod_l+0x26a>
 800649e:	2101      	movs	r1, #1
 80064a0:	4614      	mov	r4, r2
 80064a2:	9105      	str	r1, [sp, #20]
 80064a4:	f7ff babf 	b.w	8005a26 <_strtod_l+0x16e>
 80064a8:	ffc00000 	.word	0xffc00000
 80064ac:	41dfffff 	.word	0x41dfffff
 80064b0:	94a03595 	.word	0x94a03595
 80064b4:	3fcfffff 	.word	0x3fcfffff

080064b8 <_strtod_r>:
 80064b8:	4b05      	ldr	r3, [pc, #20]	; (80064d0 <_strtod_r+0x18>)
 80064ba:	b410      	push	{r4}
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	4c05      	ldr	r4, [pc, #20]	; (80064d4 <_strtod_r+0x1c>)
 80064c0:	6a1b      	ldr	r3, [r3, #32]
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	bf08      	it	eq
 80064c6:	4623      	moveq	r3, r4
 80064c8:	bc10      	pop	{r4}
 80064ca:	f7ff b9f5 	b.w	80058b8 <_strtod_l>
 80064ce:	bf00      	nop
 80064d0:	20000018 	.word	0x20000018
 80064d4:	2000007c 	.word	0x2000007c

080064d8 <_strtol_l.isra.0>:
 80064d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80064dc:	4680      	mov	r8, r0
 80064de:	4689      	mov	r9, r1
 80064e0:	4692      	mov	sl, r2
 80064e2:	461e      	mov	r6, r3
 80064e4:	460f      	mov	r7, r1
 80064e6:	463d      	mov	r5, r7
 80064e8:	9808      	ldr	r0, [sp, #32]
 80064ea:	f815 4b01 	ldrb.w	r4, [r5], #1
 80064ee:	f001 f9eb 	bl	80078c8 <__locale_ctype_ptr_l>
 80064f2:	4420      	add	r0, r4
 80064f4:	7843      	ldrb	r3, [r0, #1]
 80064f6:	f013 0308 	ands.w	r3, r3, #8
 80064fa:	d132      	bne.n	8006562 <_strtol_l.isra.0+0x8a>
 80064fc:	2c2d      	cmp	r4, #45	; 0x2d
 80064fe:	d132      	bne.n	8006566 <_strtol_l.isra.0+0x8e>
 8006500:	2201      	movs	r2, #1
 8006502:	787c      	ldrb	r4, [r7, #1]
 8006504:	1cbd      	adds	r5, r7, #2
 8006506:	2e00      	cmp	r6, #0
 8006508:	d05d      	beq.n	80065c6 <_strtol_l.isra.0+0xee>
 800650a:	2e10      	cmp	r6, #16
 800650c:	d109      	bne.n	8006522 <_strtol_l.isra.0+0x4a>
 800650e:	2c30      	cmp	r4, #48	; 0x30
 8006510:	d107      	bne.n	8006522 <_strtol_l.isra.0+0x4a>
 8006512:	782b      	ldrb	r3, [r5, #0]
 8006514:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8006518:	2b58      	cmp	r3, #88	; 0x58
 800651a:	d14f      	bne.n	80065bc <_strtol_l.isra.0+0xe4>
 800651c:	2610      	movs	r6, #16
 800651e:	786c      	ldrb	r4, [r5, #1]
 8006520:	3502      	adds	r5, #2
 8006522:	2a00      	cmp	r2, #0
 8006524:	bf14      	ite	ne
 8006526:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 800652a:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 800652e:	2700      	movs	r7, #0
 8006530:	fbb1 fcf6 	udiv	ip, r1, r6
 8006534:	4638      	mov	r0, r7
 8006536:	fb06 1e1c 	mls	lr, r6, ip, r1
 800653a:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 800653e:	2b09      	cmp	r3, #9
 8006540:	d817      	bhi.n	8006572 <_strtol_l.isra.0+0x9a>
 8006542:	461c      	mov	r4, r3
 8006544:	42a6      	cmp	r6, r4
 8006546:	dd23      	ble.n	8006590 <_strtol_l.isra.0+0xb8>
 8006548:	1c7b      	adds	r3, r7, #1
 800654a:	d007      	beq.n	800655c <_strtol_l.isra.0+0x84>
 800654c:	4584      	cmp	ip, r0
 800654e:	d31c      	bcc.n	800658a <_strtol_l.isra.0+0xb2>
 8006550:	d101      	bne.n	8006556 <_strtol_l.isra.0+0x7e>
 8006552:	45a6      	cmp	lr, r4
 8006554:	db19      	blt.n	800658a <_strtol_l.isra.0+0xb2>
 8006556:	2701      	movs	r7, #1
 8006558:	fb00 4006 	mla	r0, r0, r6, r4
 800655c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006560:	e7eb      	b.n	800653a <_strtol_l.isra.0+0x62>
 8006562:	462f      	mov	r7, r5
 8006564:	e7bf      	b.n	80064e6 <_strtol_l.isra.0+0xe>
 8006566:	2c2b      	cmp	r4, #43	; 0x2b
 8006568:	bf04      	itt	eq
 800656a:	1cbd      	addeq	r5, r7, #2
 800656c:	787c      	ldrbeq	r4, [r7, #1]
 800656e:	461a      	mov	r2, r3
 8006570:	e7c9      	b.n	8006506 <_strtol_l.isra.0+0x2e>
 8006572:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 8006576:	2b19      	cmp	r3, #25
 8006578:	d801      	bhi.n	800657e <_strtol_l.isra.0+0xa6>
 800657a:	3c37      	subs	r4, #55	; 0x37
 800657c:	e7e2      	b.n	8006544 <_strtol_l.isra.0+0x6c>
 800657e:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 8006582:	2b19      	cmp	r3, #25
 8006584:	d804      	bhi.n	8006590 <_strtol_l.isra.0+0xb8>
 8006586:	3c57      	subs	r4, #87	; 0x57
 8006588:	e7dc      	b.n	8006544 <_strtol_l.isra.0+0x6c>
 800658a:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800658e:	e7e5      	b.n	800655c <_strtol_l.isra.0+0x84>
 8006590:	1c7b      	adds	r3, r7, #1
 8006592:	d108      	bne.n	80065a6 <_strtol_l.isra.0+0xce>
 8006594:	2322      	movs	r3, #34	; 0x22
 8006596:	4608      	mov	r0, r1
 8006598:	f8c8 3000 	str.w	r3, [r8]
 800659c:	f1ba 0f00 	cmp.w	sl, #0
 80065a0:	d107      	bne.n	80065b2 <_strtol_l.isra.0+0xda>
 80065a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80065a6:	b102      	cbz	r2, 80065aa <_strtol_l.isra.0+0xd2>
 80065a8:	4240      	negs	r0, r0
 80065aa:	f1ba 0f00 	cmp.w	sl, #0
 80065ae:	d0f8      	beq.n	80065a2 <_strtol_l.isra.0+0xca>
 80065b0:	b10f      	cbz	r7, 80065b6 <_strtol_l.isra.0+0xde>
 80065b2:	f105 39ff 	add.w	r9, r5, #4294967295	; 0xffffffff
 80065b6:	f8ca 9000 	str.w	r9, [sl]
 80065ba:	e7f2      	b.n	80065a2 <_strtol_l.isra.0+0xca>
 80065bc:	2430      	movs	r4, #48	; 0x30
 80065be:	2e00      	cmp	r6, #0
 80065c0:	d1af      	bne.n	8006522 <_strtol_l.isra.0+0x4a>
 80065c2:	2608      	movs	r6, #8
 80065c4:	e7ad      	b.n	8006522 <_strtol_l.isra.0+0x4a>
 80065c6:	2c30      	cmp	r4, #48	; 0x30
 80065c8:	d0a3      	beq.n	8006512 <_strtol_l.isra.0+0x3a>
 80065ca:	260a      	movs	r6, #10
 80065cc:	e7a9      	b.n	8006522 <_strtol_l.isra.0+0x4a>
	...

080065d0 <_strtol_r>:
 80065d0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80065d2:	4c06      	ldr	r4, [pc, #24]	; (80065ec <_strtol_r+0x1c>)
 80065d4:	4d06      	ldr	r5, [pc, #24]	; (80065f0 <_strtol_r+0x20>)
 80065d6:	6824      	ldr	r4, [r4, #0]
 80065d8:	6a24      	ldr	r4, [r4, #32]
 80065da:	2c00      	cmp	r4, #0
 80065dc:	bf08      	it	eq
 80065de:	462c      	moveq	r4, r5
 80065e0:	9400      	str	r4, [sp, #0]
 80065e2:	f7ff ff79 	bl	80064d8 <_strtol_l.isra.0>
 80065e6:	b003      	add	sp, #12
 80065e8:	bd30      	pop	{r4, r5, pc}
 80065ea:	bf00      	nop
 80065ec:	20000018 	.word	0x20000018
 80065f0:	2000007c 	.word	0x2000007c

080065f4 <quorem>:
 80065f4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80065f8:	6903      	ldr	r3, [r0, #16]
 80065fa:	690c      	ldr	r4, [r1, #16]
 80065fc:	4680      	mov	r8, r0
 80065fe:	42a3      	cmp	r3, r4
 8006600:	f2c0 8084 	blt.w	800670c <quorem+0x118>
 8006604:	3c01      	subs	r4, #1
 8006606:	f101 0714 	add.w	r7, r1, #20
 800660a:	f100 0614 	add.w	r6, r0, #20
 800660e:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8006612:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8006616:	3501      	adds	r5, #1
 8006618:	fbb0 f5f5 	udiv	r5, r0, r5
 800661c:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8006620:	eb06 030c 	add.w	r3, r6, ip
 8006624:	eb07 090c 	add.w	r9, r7, ip
 8006628:	9301      	str	r3, [sp, #4]
 800662a:	b39d      	cbz	r5, 8006694 <quorem+0xa0>
 800662c:	f04f 0a00 	mov.w	sl, #0
 8006630:	4638      	mov	r0, r7
 8006632:	46b6      	mov	lr, r6
 8006634:	46d3      	mov	fp, sl
 8006636:	f850 2b04 	ldr.w	r2, [r0], #4
 800663a:	b293      	uxth	r3, r2
 800663c:	fb05 a303 	mla	r3, r5, r3, sl
 8006640:	0c12      	lsrs	r2, r2, #16
 8006642:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006646:	fb05 a202 	mla	r2, r5, r2, sl
 800664a:	b29b      	uxth	r3, r3
 800664c:	ebab 0303 	sub.w	r3, fp, r3
 8006650:	f8de b000 	ldr.w	fp, [lr]
 8006654:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8006658:	fa1f fb8b 	uxth.w	fp, fp
 800665c:	445b      	add	r3, fp
 800665e:	fa1f fb82 	uxth.w	fp, r2
 8006662:	f8de 2000 	ldr.w	r2, [lr]
 8006666:	4581      	cmp	r9, r0
 8006668:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 800666c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006670:	b29b      	uxth	r3, r3
 8006672:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006676:	ea4f 4b22 	mov.w	fp, r2, asr #16
 800667a:	f84e 3b04 	str.w	r3, [lr], #4
 800667e:	d2da      	bcs.n	8006636 <quorem+0x42>
 8006680:	f856 300c 	ldr.w	r3, [r6, ip]
 8006684:	b933      	cbnz	r3, 8006694 <quorem+0xa0>
 8006686:	9b01      	ldr	r3, [sp, #4]
 8006688:	3b04      	subs	r3, #4
 800668a:	429e      	cmp	r6, r3
 800668c:	461a      	mov	r2, r3
 800668e:	d331      	bcc.n	80066f4 <quorem+0x100>
 8006690:	f8c8 4010 	str.w	r4, [r8, #16]
 8006694:	4640      	mov	r0, r8
 8006696:	f001 fba5 	bl	8007de4 <__mcmp>
 800669a:	2800      	cmp	r0, #0
 800669c:	db26      	blt.n	80066ec <quorem+0xf8>
 800669e:	4630      	mov	r0, r6
 80066a0:	f04f 0c00 	mov.w	ip, #0
 80066a4:	3501      	adds	r5, #1
 80066a6:	f857 1b04 	ldr.w	r1, [r7], #4
 80066aa:	f8d0 e000 	ldr.w	lr, [r0]
 80066ae:	b28b      	uxth	r3, r1
 80066b0:	ebac 0303 	sub.w	r3, ip, r3
 80066b4:	fa1f f28e 	uxth.w	r2, lr
 80066b8:	4413      	add	r3, r2
 80066ba:	0c0a      	lsrs	r2, r1, #16
 80066bc:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80066c0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80066c4:	b29b      	uxth	r3, r3
 80066c6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80066ca:	45b9      	cmp	r9, r7
 80066cc:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80066d0:	f840 3b04 	str.w	r3, [r0], #4
 80066d4:	d2e7      	bcs.n	80066a6 <quorem+0xb2>
 80066d6:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 80066da:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 80066de:	b92a      	cbnz	r2, 80066ec <quorem+0xf8>
 80066e0:	3b04      	subs	r3, #4
 80066e2:	429e      	cmp	r6, r3
 80066e4:	461a      	mov	r2, r3
 80066e6:	d30b      	bcc.n	8006700 <quorem+0x10c>
 80066e8:	f8c8 4010 	str.w	r4, [r8, #16]
 80066ec:	4628      	mov	r0, r5
 80066ee:	b003      	add	sp, #12
 80066f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80066f4:	6812      	ldr	r2, [r2, #0]
 80066f6:	3b04      	subs	r3, #4
 80066f8:	2a00      	cmp	r2, #0
 80066fa:	d1c9      	bne.n	8006690 <quorem+0x9c>
 80066fc:	3c01      	subs	r4, #1
 80066fe:	e7c4      	b.n	800668a <quorem+0x96>
 8006700:	6812      	ldr	r2, [r2, #0]
 8006702:	3b04      	subs	r3, #4
 8006704:	2a00      	cmp	r2, #0
 8006706:	d1ef      	bne.n	80066e8 <quorem+0xf4>
 8006708:	3c01      	subs	r4, #1
 800670a:	e7ea      	b.n	80066e2 <quorem+0xee>
 800670c:	2000      	movs	r0, #0
 800670e:	e7ee      	b.n	80066ee <quorem+0xfa>

08006710 <_dtoa_r>:
 8006710:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006714:	4616      	mov	r6, r2
 8006716:	461f      	mov	r7, r3
 8006718:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800671a:	b095      	sub	sp, #84	; 0x54
 800671c:	4604      	mov	r4, r0
 800671e:	f8dd 8084 	ldr.w	r8, [sp, #132]	; 0x84
 8006722:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8006726:	b93d      	cbnz	r5, 8006738 <_dtoa_r+0x28>
 8006728:	2010      	movs	r0, #16
 800672a:	f001 f8e1 	bl	80078f0 <malloc>
 800672e:	6260      	str	r0, [r4, #36]	; 0x24
 8006730:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8006734:	6005      	str	r5, [r0, #0]
 8006736:	60c5      	str	r5, [r0, #12]
 8006738:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800673a:	6819      	ldr	r1, [r3, #0]
 800673c:	b151      	cbz	r1, 8006754 <_dtoa_r+0x44>
 800673e:	685a      	ldr	r2, [r3, #4]
 8006740:	2301      	movs	r3, #1
 8006742:	4093      	lsls	r3, r2
 8006744:	604a      	str	r2, [r1, #4]
 8006746:	608b      	str	r3, [r1, #8]
 8006748:	4620      	mov	r0, r4
 800674a:	f001 f92d 	bl	80079a8 <_Bfree>
 800674e:	2200      	movs	r2, #0
 8006750:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006752:	601a      	str	r2, [r3, #0]
 8006754:	1e3b      	subs	r3, r7, #0
 8006756:	bfaf      	iteee	ge
 8006758:	2300      	movge	r3, #0
 800675a:	2201      	movlt	r2, #1
 800675c:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8006760:	9303      	strlt	r3, [sp, #12]
 8006762:	bfac      	ite	ge
 8006764:	f8c8 3000 	strge.w	r3, [r8]
 8006768:	f8c8 2000 	strlt.w	r2, [r8]
 800676c:	4bae      	ldr	r3, [pc, #696]	; (8006a28 <_dtoa_r+0x318>)
 800676e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8006772:	ea33 0308 	bics.w	r3, r3, r8
 8006776:	d11b      	bne.n	80067b0 <_dtoa_r+0xa0>
 8006778:	f242 730f 	movw	r3, #9999	; 0x270f
 800677c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800677e:	6013      	str	r3, [r2, #0]
 8006780:	9b02      	ldr	r3, [sp, #8]
 8006782:	b923      	cbnz	r3, 800678e <_dtoa_r+0x7e>
 8006784:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8006788:	2800      	cmp	r0, #0
 800678a:	f000 8545 	beq.w	8007218 <_dtoa_r+0xb08>
 800678e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006790:	b953      	cbnz	r3, 80067a8 <_dtoa_r+0x98>
 8006792:	4ba6      	ldr	r3, [pc, #664]	; (8006a2c <_dtoa_r+0x31c>)
 8006794:	e021      	b.n	80067da <_dtoa_r+0xca>
 8006796:	4ba6      	ldr	r3, [pc, #664]	; (8006a30 <_dtoa_r+0x320>)
 8006798:	9306      	str	r3, [sp, #24]
 800679a:	3308      	adds	r3, #8
 800679c:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800679e:	6013      	str	r3, [r2, #0]
 80067a0:	9806      	ldr	r0, [sp, #24]
 80067a2:	b015      	add	sp, #84	; 0x54
 80067a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80067a8:	4ba0      	ldr	r3, [pc, #640]	; (8006a2c <_dtoa_r+0x31c>)
 80067aa:	9306      	str	r3, [sp, #24]
 80067ac:	3303      	adds	r3, #3
 80067ae:	e7f5      	b.n	800679c <_dtoa_r+0x8c>
 80067b0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80067b4:	2200      	movs	r2, #0
 80067b6:	2300      	movs	r3, #0
 80067b8:	4630      	mov	r0, r6
 80067ba:	4639      	mov	r1, r7
 80067bc:	f7fa f8f4 	bl	80009a8 <__aeabi_dcmpeq>
 80067c0:	4682      	mov	sl, r0
 80067c2:	b160      	cbz	r0, 80067de <_dtoa_r+0xce>
 80067c4:	2301      	movs	r3, #1
 80067c6:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80067c8:	6013      	str	r3, [r2, #0]
 80067ca:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	f000 8520 	beq.w	8007212 <_dtoa_r+0xb02>
 80067d2:	4b98      	ldr	r3, [pc, #608]	; (8006a34 <_dtoa_r+0x324>)
 80067d4:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80067d6:	6013      	str	r3, [r2, #0]
 80067d8:	3b01      	subs	r3, #1
 80067da:	9306      	str	r3, [sp, #24]
 80067dc:	e7e0      	b.n	80067a0 <_dtoa_r+0x90>
 80067de:	ab12      	add	r3, sp, #72	; 0x48
 80067e0:	9301      	str	r3, [sp, #4]
 80067e2:	ab13      	add	r3, sp, #76	; 0x4c
 80067e4:	9300      	str	r3, [sp, #0]
 80067e6:	4632      	mov	r2, r6
 80067e8:	463b      	mov	r3, r7
 80067ea:	4620      	mov	r0, r4
 80067ec:	f001 fbe8 	bl	8007fc0 <__d2b>
 80067f0:	f3c8 550a 	ubfx	r5, r8, #20, #11
 80067f4:	4683      	mov	fp, r0
 80067f6:	2d00      	cmp	r5, #0
 80067f8:	d07d      	beq.n	80068f6 <_dtoa_r+0x1e6>
 80067fa:	46b0      	mov	r8, r6
 80067fc:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8006800:	f043 597f 	orr.w	r9, r3, #1069547520	; 0x3fc00000
 8006804:	f449 1940 	orr.w	r9, r9, #3145728	; 0x300000
 8006808:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800680c:	f8cd a040 	str.w	sl, [sp, #64]	; 0x40
 8006810:	2200      	movs	r2, #0
 8006812:	4b89      	ldr	r3, [pc, #548]	; (8006a38 <_dtoa_r+0x328>)
 8006814:	4640      	mov	r0, r8
 8006816:	4649      	mov	r1, r9
 8006818:	f7f9 fca6 	bl	8000168 <__aeabi_dsub>
 800681c:	a37c      	add	r3, pc, #496	; (adr r3, 8006a10 <_dtoa_r+0x300>)
 800681e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006822:	f7f9 fe59 	bl	80004d8 <__aeabi_dmul>
 8006826:	a37c      	add	r3, pc, #496	; (adr r3, 8006a18 <_dtoa_r+0x308>)
 8006828:	e9d3 2300 	ldrd	r2, r3, [r3]
 800682c:	f7f9 fc9e 	bl	800016c <__adddf3>
 8006830:	4606      	mov	r6, r0
 8006832:	4628      	mov	r0, r5
 8006834:	460f      	mov	r7, r1
 8006836:	f7f9 fde5 	bl	8000404 <__aeabi_i2d>
 800683a:	a379      	add	r3, pc, #484	; (adr r3, 8006a20 <_dtoa_r+0x310>)
 800683c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006840:	f7f9 fe4a 	bl	80004d8 <__aeabi_dmul>
 8006844:	4602      	mov	r2, r0
 8006846:	460b      	mov	r3, r1
 8006848:	4630      	mov	r0, r6
 800684a:	4639      	mov	r1, r7
 800684c:	f7f9 fc8e 	bl	800016c <__adddf3>
 8006850:	4606      	mov	r6, r0
 8006852:	460f      	mov	r7, r1
 8006854:	f7fa f8f0 	bl	8000a38 <__aeabi_d2iz>
 8006858:	2200      	movs	r2, #0
 800685a:	4682      	mov	sl, r0
 800685c:	2300      	movs	r3, #0
 800685e:	4630      	mov	r0, r6
 8006860:	4639      	mov	r1, r7
 8006862:	f7fa f8ab 	bl	80009bc <__aeabi_dcmplt>
 8006866:	b148      	cbz	r0, 800687c <_dtoa_r+0x16c>
 8006868:	4650      	mov	r0, sl
 800686a:	f7f9 fdcb 	bl	8000404 <__aeabi_i2d>
 800686e:	4632      	mov	r2, r6
 8006870:	463b      	mov	r3, r7
 8006872:	f7fa f899 	bl	80009a8 <__aeabi_dcmpeq>
 8006876:	b908      	cbnz	r0, 800687c <_dtoa_r+0x16c>
 8006878:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800687c:	f1ba 0f16 	cmp.w	sl, #22
 8006880:	d85a      	bhi.n	8006938 <_dtoa_r+0x228>
 8006882:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006886:	496d      	ldr	r1, [pc, #436]	; (8006a3c <_dtoa_r+0x32c>)
 8006888:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800688c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006890:	f7fa f8b2 	bl	80009f8 <__aeabi_dcmpgt>
 8006894:	2800      	cmp	r0, #0
 8006896:	d051      	beq.n	800693c <_dtoa_r+0x22c>
 8006898:	2300      	movs	r3, #0
 800689a:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800689e:	930d      	str	r3, [sp, #52]	; 0x34
 80068a0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80068a2:	1b5d      	subs	r5, r3, r5
 80068a4:	1e6b      	subs	r3, r5, #1
 80068a6:	9307      	str	r3, [sp, #28]
 80068a8:	bf43      	ittte	mi
 80068aa:	2300      	movmi	r3, #0
 80068ac:	f1c5 0901 	rsbmi	r9, r5, #1
 80068b0:	9307      	strmi	r3, [sp, #28]
 80068b2:	f04f 0900 	movpl.w	r9, #0
 80068b6:	f1ba 0f00 	cmp.w	sl, #0
 80068ba:	db41      	blt.n	8006940 <_dtoa_r+0x230>
 80068bc:	9b07      	ldr	r3, [sp, #28]
 80068be:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
 80068c2:	4453      	add	r3, sl
 80068c4:	9307      	str	r3, [sp, #28]
 80068c6:	2300      	movs	r3, #0
 80068c8:	9308      	str	r3, [sp, #32]
 80068ca:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80068cc:	2b09      	cmp	r3, #9
 80068ce:	f200 808f 	bhi.w	80069f0 <_dtoa_r+0x2e0>
 80068d2:	2b05      	cmp	r3, #5
 80068d4:	bfc4      	itt	gt
 80068d6:	3b04      	subgt	r3, #4
 80068d8:	931e      	strgt	r3, [sp, #120]	; 0x78
 80068da:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80068dc:	bfc8      	it	gt
 80068de:	2500      	movgt	r5, #0
 80068e0:	f1a3 0302 	sub.w	r3, r3, #2
 80068e4:	bfd8      	it	le
 80068e6:	2501      	movle	r5, #1
 80068e8:	2b03      	cmp	r3, #3
 80068ea:	f200 808d 	bhi.w	8006a08 <_dtoa_r+0x2f8>
 80068ee:	e8df f003 	tbb	[pc, r3]
 80068f2:	7d7b      	.short	0x7d7b
 80068f4:	6f2f      	.short	0x6f2f
 80068f6:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 80068fa:	441d      	add	r5, r3
 80068fc:	f205 4032 	addw	r0, r5, #1074	; 0x432
 8006900:	2820      	cmp	r0, #32
 8006902:	dd13      	ble.n	800692c <_dtoa_r+0x21c>
 8006904:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 8006908:	9b02      	ldr	r3, [sp, #8]
 800690a:	fa08 f800 	lsl.w	r8, r8, r0
 800690e:	f205 4012 	addw	r0, r5, #1042	; 0x412
 8006912:	fa23 f000 	lsr.w	r0, r3, r0
 8006916:	ea48 0000 	orr.w	r0, r8, r0
 800691a:	f7f9 fd63 	bl	80003e4 <__aeabi_ui2d>
 800691e:	2301      	movs	r3, #1
 8006920:	4680      	mov	r8, r0
 8006922:	f1a1 79f8 	sub.w	r9, r1, #32505856	; 0x1f00000
 8006926:	3d01      	subs	r5, #1
 8006928:	9310      	str	r3, [sp, #64]	; 0x40
 800692a:	e771      	b.n	8006810 <_dtoa_r+0x100>
 800692c:	9b02      	ldr	r3, [sp, #8]
 800692e:	f1c0 0020 	rsb	r0, r0, #32
 8006932:	fa03 f000 	lsl.w	r0, r3, r0
 8006936:	e7f0      	b.n	800691a <_dtoa_r+0x20a>
 8006938:	2301      	movs	r3, #1
 800693a:	e7b0      	b.n	800689e <_dtoa_r+0x18e>
 800693c:	900d      	str	r0, [sp, #52]	; 0x34
 800693e:	e7af      	b.n	80068a0 <_dtoa_r+0x190>
 8006940:	f1ca 0300 	rsb	r3, sl, #0
 8006944:	9308      	str	r3, [sp, #32]
 8006946:	2300      	movs	r3, #0
 8006948:	eba9 090a 	sub.w	r9, r9, sl
 800694c:	930c      	str	r3, [sp, #48]	; 0x30
 800694e:	e7bc      	b.n	80068ca <_dtoa_r+0x1ba>
 8006950:	2301      	movs	r3, #1
 8006952:	9309      	str	r3, [sp, #36]	; 0x24
 8006954:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8006956:	2b00      	cmp	r3, #0
 8006958:	dd74      	ble.n	8006a44 <_dtoa_r+0x334>
 800695a:	4698      	mov	r8, r3
 800695c:	9304      	str	r3, [sp, #16]
 800695e:	2200      	movs	r2, #0
 8006960:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8006962:	6072      	str	r2, [r6, #4]
 8006964:	2204      	movs	r2, #4
 8006966:	f102 0014 	add.w	r0, r2, #20
 800696a:	4298      	cmp	r0, r3
 800696c:	6871      	ldr	r1, [r6, #4]
 800696e:	d96e      	bls.n	8006a4e <_dtoa_r+0x33e>
 8006970:	4620      	mov	r0, r4
 8006972:	f000 ffe5 	bl	8007940 <_Balloc>
 8006976:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006978:	6030      	str	r0, [r6, #0]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	f1b8 0f0e 	cmp.w	r8, #14
 8006980:	9306      	str	r3, [sp, #24]
 8006982:	f200 80ed 	bhi.w	8006b60 <_dtoa_r+0x450>
 8006986:	2d00      	cmp	r5, #0
 8006988:	f000 80ea 	beq.w	8006b60 <_dtoa_r+0x450>
 800698c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006990:	f1ba 0f00 	cmp.w	sl, #0
 8006994:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8006998:	dd77      	ble.n	8006a8a <_dtoa_r+0x37a>
 800699a:	4a28      	ldr	r2, [pc, #160]	; (8006a3c <_dtoa_r+0x32c>)
 800699c:	f00a 030f 	and.w	r3, sl, #15
 80069a0:	ea4f 162a 	mov.w	r6, sl, asr #4
 80069a4:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80069a8:	06f0      	lsls	r0, r6, #27
 80069aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069ae:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 80069b2:	d568      	bpl.n	8006a86 <_dtoa_r+0x376>
 80069b4:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 80069b8:	4b21      	ldr	r3, [pc, #132]	; (8006a40 <_dtoa_r+0x330>)
 80069ba:	2503      	movs	r5, #3
 80069bc:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80069c0:	f7f9 feb4 	bl	800072c <__aeabi_ddiv>
 80069c4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80069c8:	f006 060f 	and.w	r6, r6, #15
 80069cc:	4f1c      	ldr	r7, [pc, #112]	; (8006a40 <_dtoa_r+0x330>)
 80069ce:	e04f      	b.n	8006a70 <_dtoa_r+0x360>
 80069d0:	2301      	movs	r3, #1
 80069d2:	9309      	str	r3, [sp, #36]	; 0x24
 80069d4:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80069d6:	4453      	add	r3, sl
 80069d8:	f103 0801 	add.w	r8, r3, #1
 80069dc:	9304      	str	r3, [sp, #16]
 80069de:	4643      	mov	r3, r8
 80069e0:	2b01      	cmp	r3, #1
 80069e2:	bfb8      	it	lt
 80069e4:	2301      	movlt	r3, #1
 80069e6:	e7ba      	b.n	800695e <_dtoa_r+0x24e>
 80069e8:	2300      	movs	r3, #0
 80069ea:	e7b2      	b.n	8006952 <_dtoa_r+0x242>
 80069ec:	2300      	movs	r3, #0
 80069ee:	e7f0      	b.n	80069d2 <_dtoa_r+0x2c2>
 80069f0:	2501      	movs	r5, #1
 80069f2:	2300      	movs	r3, #0
 80069f4:	9509      	str	r5, [sp, #36]	; 0x24
 80069f6:	931e      	str	r3, [sp, #120]	; 0x78
 80069f8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80069fc:	2200      	movs	r2, #0
 80069fe:	9304      	str	r3, [sp, #16]
 8006a00:	4698      	mov	r8, r3
 8006a02:	2312      	movs	r3, #18
 8006a04:	921f      	str	r2, [sp, #124]	; 0x7c
 8006a06:	e7aa      	b.n	800695e <_dtoa_r+0x24e>
 8006a08:	2301      	movs	r3, #1
 8006a0a:	9309      	str	r3, [sp, #36]	; 0x24
 8006a0c:	e7f4      	b.n	80069f8 <_dtoa_r+0x2e8>
 8006a0e:	bf00      	nop
 8006a10:	636f4361 	.word	0x636f4361
 8006a14:	3fd287a7 	.word	0x3fd287a7
 8006a18:	8b60c8b3 	.word	0x8b60c8b3
 8006a1c:	3fc68a28 	.word	0x3fc68a28
 8006a20:	509f79fb 	.word	0x509f79fb
 8006a24:	3fd34413 	.word	0x3fd34413
 8006a28:	7ff00000 	.word	0x7ff00000
 8006a2c:	08008db1 	.word	0x08008db1
 8006a30:	08008da8 	.word	0x08008da8
 8006a34:	08008d29 	.word	0x08008d29
 8006a38:	3ff80000 	.word	0x3ff80000
 8006a3c:	08008de8 	.word	0x08008de8
 8006a40:	08008dc0 	.word	0x08008dc0
 8006a44:	2301      	movs	r3, #1
 8006a46:	9304      	str	r3, [sp, #16]
 8006a48:	4698      	mov	r8, r3
 8006a4a:	461a      	mov	r2, r3
 8006a4c:	e7da      	b.n	8006a04 <_dtoa_r+0x2f4>
 8006a4e:	3101      	adds	r1, #1
 8006a50:	6071      	str	r1, [r6, #4]
 8006a52:	0052      	lsls	r2, r2, #1
 8006a54:	e787      	b.n	8006966 <_dtoa_r+0x256>
 8006a56:	07f1      	lsls	r1, r6, #31
 8006a58:	d508      	bpl.n	8006a6c <_dtoa_r+0x35c>
 8006a5a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8006a5e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006a62:	f7f9 fd39 	bl	80004d8 <__aeabi_dmul>
 8006a66:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8006a6a:	3501      	adds	r5, #1
 8006a6c:	1076      	asrs	r6, r6, #1
 8006a6e:	3708      	adds	r7, #8
 8006a70:	2e00      	cmp	r6, #0
 8006a72:	d1f0      	bne.n	8006a56 <_dtoa_r+0x346>
 8006a74:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8006a78:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006a7c:	f7f9 fe56 	bl	800072c <__aeabi_ddiv>
 8006a80:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006a84:	e01b      	b.n	8006abe <_dtoa_r+0x3ae>
 8006a86:	2502      	movs	r5, #2
 8006a88:	e7a0      	b.n	80069cc <_dtoa_r+0x2bc>
 8006a8a:	f000 80a4 	beq.w	8006bd6 <_dtoa_r+0x4c6>
 8006a8e:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8006a92:	f1ca 0600 	rsb	r6, sl, #0
 8006a96:	4ba0      	ldr	r3, [pc, #640]	; (8006d18 <_dtoa_r+0x608>)
 8006a98:	f006 020f 	and.w	r2, r6, #15
 8006a9c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006aa0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006aa4:	f7f9 fd18 	bl	80004d8 <__aeabi_dmul>
 8006aa8:	2502      	movs	r5, #2
 8006aaa:	2300      	movs	r3, #0
 8006aac:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006ab0:	4f9a      	ldr	r7, [pc, #616]	; (8006d1c <_dtoa_r+0x60c>)
 8006ab2:	1136      	asrs	r6, r6, #4
 8006ab4:	2e00      	cmp	r6, #0
 8006ab6:	f040 8083 	bne.w	8006bc0 <_dtoa_r+0x4b0>
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	d1e0      	bne.n	8006a80 <_dtoa_r+0x370>
 8006abe:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	f000 808a 	beq.w	8006bda <_dtoa_r+0x4ca>
 8006ac6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006aca:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8006ace:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8006ad2:	2200      	movs	r2, #0
 8006ad4:	4b92      	ldr	r3, [pc, #584]	; (8006d20 <_dtoa_r+0x610>)
 8006ad6:	f7f9 ff71 	bl	80009bc <__aeabi_dcmplt>
 8006ada:	2800      	cmp	r0, #0
 8006adc:	d07d      	beq.n	8006bda <_dtoa_r+0x4ca>
 8006ade:	f1b8 0f00 	cmp.w	r8, #0
 8006ae2:	d07a      	beq.n	8006bda <_dtoa_r+0x4ca>
 8006ae4:	9b04      	ldr	r3, [sp, #16]
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	dd36      	ble.n	8006b58 <_dtoa_r+0x448>
 8006aea:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8006aee:	2200      	movs	r2, #0
 8006af0:	4b8c      	ldr	r3, [pc, #560]	; (8006d24 <_dtoa_r+0x614>)
 8006af2:	f7f9 fcf1 	bl	80004d8 <__aeabi_dmul>
 8006af6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006afa:	9e04      	ldr	r6, [sp, #16]
 8006afc:	f10a 37ff 	add.w	r7, sl, #4294967295	; 0xffffffff
 8006b00:	3501      	adds	r5, #1
 8006b02:	4628      	mov	r0, r5
 8006b04:	f7f9 fc7e 	bl	8000404 <__aeabi_i2d>
 8006b08:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006b0c:	f7f9 fce4 	bl	80004d8 <__aeabi_dmul>
 8006b10:	2200      	movs	r2, #0
 8006b12:	4b85      	ldr	r3, [pc, #532]	; (8006d28 <_dtoa_r+0x618>)
 8006b14:	f7f9 fb2a 	bl	800016c <__adddf3>
 8006b18:	f1a1 7550 	sub.w	r5, r1, #54525952	; 0x3400000
 8006b1c:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8006b20:	950b      	str	r5, [sp, #44]	; 0x2c
 8006b22:	2e00      	cmp	r6, #0
 8006b24:	d15c      	bne.n	8006be0 <_dtoa_r+0x4d0>
 8006b26:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006b2a:	2200      	movs	r2, #0
 8006b2c:	4b7f      	ldr	r3, [pc, #508]	; (8006d2c <_dtoa_r+0x61c>)
 8006b2e:	f7f9 fb1b 	bl	8000168 <__aeabi_dsub>
 8006b32:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006b34:	462b      	mov	r3, r5
 8006b36:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006b3a:	f7f9 ff5d 	bl	80009f8 <__aeabi_dcmpgt>
 8006b3e:	2800      	cmp	r0, #0
 8006b40:	f040 8281 	bne.w	8007046 <_dtoa_r+0x936>
 8006b44:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006b48:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006b4a:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 8006b4e:	f7f9 ff35 	bl	80009bc <__aeabi_dcmplt>
 8006b52:	2800      	cmp	r0, #0
 8006b54:	f040 8275 	bne.w	8007042 <_dtoa_r+0x932>
 8006b58:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8006b5c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006b60:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	f2c0 814b 	blt.w	8006dfe <_dtoa_r+0x6ee>
 8006b68:	f1ba 0f0e 	cmp.w	sl, #14
 8006b6c:	f300 8147 	bgt.w	8006dfe <_dtoa_r+0x6ee>
 8006b70:	4b69      	ldr	r3, [pc, #420]	; (8006d18 <_dtoa_r+0x608>)
 8006b72:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8006b76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b7a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8006b7e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8006b80:	2b00      	cmp	r3, #0
 8006b82:	f280 80d7 	bge.w	8006d34 <_dtoa_r+0x624>
 8006b86:	f1b8 0f00 	cmp.w	r8, #0
 8006b8a:	f300 80d3 	bgt.w	8006d34 <_dtoa_r+0x624>
 8006b8e:	f040 8257 	bne.w	8007040 <_dtoa_r+0x930>
 8006b92:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006b96:	2200      	movs	r2, #0
 8006b98:	4b64      	ldr	r3, [pc, #400]	; (8006d2c <_dtoa_r+0x61c>)
 8006b9a:	f7f9 fc9d 	bl	80004d8 <__aeabi_dmul>
 8006b9e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006ba2:	f7f9 ff1f 	bl	80009e4 <__aeabi_dcmpge>
 8006ba6:	4646      	mov	r6, r8
 8006ba8:	4647      	mov	r7, r8
 8006baa:	2800      	cmp	r0, #0
 8006bac:	f040 822d 	bne.w	800700a <_dtoa_r+0x8fa>
 8006bb0:	9b06      	ldr	r3, [sp, #24]
 8006bb2:	9a06      	ldr	r2, [sp, #24]
 8006bb4:	1c5d      	adds	r5, r3, #1
 8006bb6:	2331      	movs	r3, #49	; 0x31
 8006bb8:	f10a 0a01 	add.w	sl, sl, #1
 8006bbc:	7013      	strb	r3, [r2, #0]
 8006bbe:	e228      	b.n	8007012 <_dtoa_r+0x902>
 8006bc0:	07f2      	lsls	r2, r6, #31
 8006bc2:	d505      	bpl.n	8006bd0 <_dtoa_r+0x4c0>
 8006bc4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006bc8:	f7f9 fc86 	bl	80004d8 <__aeabi_dmul>
 8006bcc:	2301      	movs	r3, #1
 8006bce:	3501      	adds	r5, #1
 8006bd0:	1076      	asrs	r6, r6, #1
 8006bd2:	3708      	adds	r7, #8
 8006bd4:	e76e      	b.n	8006ab4 <_dtoa_r+0x3a4>
 8006bd6:	2502      	movs	r5, #2
 8006bd8:	e771      	b.n	8006abe <_dtoa_r+0x3ae>
 8006bda:	4657      	mov	r7, sl
 8006bdc:	4646      	mov	r6, r8
 8006bde:	e790      	b.n	8006b02 <_dtoa_r+0x3f2>
 8006be0:	4b4d      	ldr	r3, [pc, #308]	; (8006d18 <_dtoa_r+0x608>)
 8006be2:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8006be6:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8006bea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	d048      	beq.n	8006c82 <_dtoa_r+0x572>
 8006bf0:	4602      	mov	r2, r0
 8006bf2:	460b      	mov	r3, r1
 8006bf4:	2000      	movs	r0, #0
 8006bf6:	494e      	ldr	r1, [pc, #312]	; (8006d30 <_dtoa_r+0x620>)
 8006bf8:	f7f9 fd98 	bl	800072c <__aeabi_ddiv>
 8006bfc:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8006c00:	f7f9 fab2 	bl	8000168 <__aeabi_dsub>
 8006c04:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8006c08:	9d06      	ldr	r5, [sp, #24]
 8006c0a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006c0e:	f7f9 ff13 	bl	8000a38 <__aeabi_d2iz>
 8006c12:	9011      	str	r0, [sp, #68]	; 0x44
 8006c14:	f7f9 fbf6 	bl	8000404 <__aeabi_i2d>
 8006c18:	4602      	mov	r2, r0
 8006c1a:	460b      	mov	r3, r1
 8006c1c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006c20:	f7f9 faa2 	bl	8000168 <__aeabi_dsub>
 8006c24:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006c26:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006c2a:	3330      	adds	r3, #48	; 0x30
 8006c2c:	f805 3b01 	strb.w	r3, [r5], #1
 8006c30:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8006c34:	f7f9 fec2 	bl	80009bc <__aeabi_dcmplt>
 8006c38:	2800      	cmp	r0, #0
 8006c3a:	d163      	bne.n	8006d04 <_dtoa_r+0x5f4>
 8006c3c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006c40:	2000      	movs	r0, #0
 8006c42:	4937      	ldr	r1, [pc, #220]	; (8006d20 <_dtoa_r+0x610>)
 8006c44:	f7f9 fa90 	bl	8000168 <__aeabi_dsub>
 8006c48:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8006c4c:	f7f9 feb6 	bl	80009bc <__aeabi_dcmplt>
 8006c50:	2800      	cmp	r0, #0
 8006c52:	f040 80b5 	bne.w	8006dc0 <_dtoa_r+0x6b0>
 8006c56:	9b06      	ldr	r3, [sp, #24]
 8006c58:	1aeb      	subs	r3, r5, r3
 8006c5a:	429e      	cmp	r6, r3
 8006c5c:	f77f af7c 	ble.w	8006b58 <_dtoa_r+0x448>
 8006c60:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8006c64:	2200      	movs	r2, #0
 8006c66:	4b2f      	ldr	r3, [pc, #188]	; (8006d24 <_dtoa_r+0x614>)
 8006c68:	f7f9 fc36 	bl	80004d8 <__aeabi_dmul>
 8006c6c:	2200      	movs	r2, #0
 8006c6e:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8006c72:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006c76:	4b2b      	ldr	r3, [pc, #172]	; (8006d24 <_dtoa_r+0x614>)
 8006c78:	f7f9 fc2e 	bl	80004d8 <__aeabi_dmul>
 8006c7c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006c80:	e7c3      	b.n	8006c0a <_dtoa_r+0x4fa>
 8006c82:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8006c86:	f7f9 fc27 	bl	80004d8 <__aeabi_dmul>
 8006c8a:	9b06      	ldr	r3, [sp, #24]
 8006c8c:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8006c90:	199d      	adds	r5, r3, r6
 8006c92:	461e      	mov	r6, r3
 8006c94:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006c98:	f7f9 fece 	bl	8000a38 <__aeabi_d2iz>
 8006c9c:	9011      	str	r0, [sp, #68]	; 0x44
 8006c9e:	f7f9 fbb1 	bl	8000404 <__aeabi_i2d>
 8006ca2:	4602      	mov	r2, r0
 8006ca4:	460b      	mov	r3, r1
 8006ca6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006caa:	f7f9 fa5d 	bl	8000168 <__aeabi_dsub>
 8006cae:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006cb0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006cb4:	3330      	adds	r3, #48	; 0x30
 8006cb6:	f806 3b01 	strb.w	r3, [r6], #1
 8006cba:	42ae      	cmp	r6, r5
 8006cbc:	f04f 0200 	mov.w	r2, #0
 8006cc0:	d124      	bne.n	8006d0c <_dtoa_r+0x5fc>
 8006cc2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8006cc6:	4b1a      	ldr	r3, [pc, #104]	; (8006d30 <_dtoa_r+0x620>)
 8006cc8:	f7f9 fa50 	bl	800016c <__adddf3>
 8006ccc:	4602      	mov	r2, r0
 8006cce:	460b      	mov	r3, r1
 8006cd0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006cd4:	f7f9 fe90 	bl	80009f8 <__aeabi_dcmpgt>
 8006cd8:	2800      	cmp	r0, #0
 8006cda:	d171      	bne.n	8006dc0 <_dtoa_r+0x6b0>
 8006cdc:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8006ce0:	2000      	movs	r0, #0
 8006ce2:	4913      	ldr	r1, [pc, #76]	; (8006d30 <_dtoa_r+0x620>)
 8006ce4:	f7f9 fa40 	bl	8000168 <__aeabi_dsub>
 8006ce8:	4602      	mov	r2, r0
 8006cea:	460b      	mov	r3, r1
 8006cec:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006cf0:	f7f9 fe64 	bl	80009bc <__aeabi_dcmplt>
 8006cf4:	2800      	cmp	r0, #0
 8006cf6:	f43f af2f 	beq.w	8006b58 <_dtoa_r+0x448>
 8006cfa:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8006cfe:	1e6a      	subs	r2, r5, #1
 8006d00:	2b30      	cmp	r3, #48	; 0x30
 8006d02:	d001      	beq.n	8006d08 <_dtoa_r+0x5f8>
 8006d04:	46ba      	mov	sl, r7
 8006d06:	e04a      	b.n	8006d9e <_dtoa_r+0x68e>
 8006d08:	4615      	mov	r5, r2
 8006d0a:	e7f6      	b.n	8006cfa <_dtoa_r+0x5ea>
 8006d0c:	4b05      	ldr	r3, [pc, #20]	; (8006d24 <_dtoa_r+0x614>)
 8006d0e:	f7f9 fbe3 	bl	80004d8 <__aeabi_dmul>
 8006d12:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006d16:	e7bd      	b.n	8006c94 <_dtoa_r+0x584>
 8006d18:	08008de8 	.word	0x08008de8
 8006d1c:	08008dc0 	.word	0x08008dc0
 8006d20:	3ff00000 	.word	0x3ff00000
 8006d24:	40240000 	.word	0x40240000
 8006d28:	401c0000 	.word	0x401c0000
 8006d2c:	40140000 	.word	0x40140000
 8006d30:	3fe00000 	.word	0x3fe00000
 8006d34:	9d06      	ldr	r5, [sp, #24]
 8006d36:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8006d3a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006d3e:	4630      	mov	r0, r6
 8006d40:	4639      	mov	r1, r7
 8006d42:	f7f9 fcf3 	bl	800072c <__aeabi_ddiv>
 8006d46:	f7f9 fe77 	bl	8000a38 <__aeabi_d2iz>
 8006d4a:	4681      	mov	r9, r0
 8006d4c:	f7f9 fb5a 	bl	8000404 <__aeabi_i2d>
 8006d50:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006d54:	f7f9 fbc0 	bl	80004d8 <__aeabi_dmul>
 8006d58:	4602      	mov	r2, r0
 8006d5a:	460b      	mov	r3, r1
 8006d5c:	4630      	mov	r0, r6
 8006d5e:	4639      	mov	r1, r7
 8006d60:	f7f9 fa02 	bl	8000168 <__aeabi_dsub>
 8006d64:	f109 0630 	add.w	r6, r9, #48	; 0x30
 8006d68:	f805 6b01 	strb.w	r6, [r5], #1
 8006d6c:	9e06      	ldr	r6, [sp, #24]
 8006d6e:	4602      	mov	r2, r0
 8006d70:	1bae      	subs	r6, r5, r6
 8006d72:	45b0      	cmp	r8, r6
 8006d74:	460b      	mov	r3, r1
 8006d76:	d135      	bne.n	8006de4 <_dtoa_r+0x6d4>
 8006d78:	f7f9 f9f8 	bl	800016c <__adddf3>
 8006d7c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006d80:	4606      	mov	r6, r0
 8006d82:	460f      	mov	r7, r1
 8006d84:	f7f9 fe38 	bl	80009f8 <__aeabi_dcmpgt>
 8006d88:	b9c8      	cbnz	r0, 8006dbe <_dtoa_r+0x6ae>
 8006d8a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006d8e:	4630      	mov	r0, r6
 8006d90:	4639      	mov	r1, r7
 8006d92:	f7f9 fe09 	bl	80009a8 <__aeabi_dcmpeq>
 8006d96:	b110      	cbz	r0, 8006d9e <_dtoa_r+0x68e>
 8006d98:	f019 0f01 	tst.w	r9, #1
 8006d9c:	d10f      	bne.n	8006dbe <_dtoa_r+0x6ae>
 8006d9e:	4659      	mov	r1, fp
 8006da0:	4620      	mov	r0, r4
 8006da2:	f000 fe01 	bl	80079a8 <_Bfree>
 8006da6:	2300      	movs	r3, #0
 8006da8:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8006daa:	702b      	strb	r3, [r5, #0]
 8006dac:	f10a 0301 	add.w	r3, sl, #1
 8006db0:	6013      	str	r3, [r2, #0]
 8006db2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006db4:	2b00      	cmp	r3, #0
 8006db6:	f43f acf3 	beq.w	80067a0 <_dtoa_r+0x90>
 8006dba:	601d      	str	r5, [r3, #0]
 8006dbc:	e4f0      	b.n	80067a0 <_dtoa_r+0x90>
 8006dbe:	4657      	mov	r7, sl
 8006dc0:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8006dc4:	1e6b      	subs	r3, r5, #1
 8006dc6:	2a39      	cmp	r2, #57	; 0x39
 8006dc8:	d106      	bne.n	8006dd8 <_dtoa_r+0x6c8>
 8006dca:	9a06      	ldr	r2, [sp, #24]
 8006dcc:	429a      	cmp	r2, r3
 8006dce:	d107      	bne.n	8006de0 <_dtoa_r+0x6d0>
 8006dd0:	2330      	movs	r3, #48	; 0x30
 8006dd2:	7013      	strb	r3, [r2, #0]
 8006dd4:	4613      	mov	r3, r2
 8006dd6:	3701      	adds	r7, #1
 8006dd8:	781a      	ldrb	r2, [r3, #0]
 8006dda:	3201      	adds	r2, #1
 8006ddc:	701a      	strb	r2, [r3, #0]
 8006dde:	e791      	b.n	8006d04 <_dtoa_r+0x5f4>
 8006de0:	461d      	mov	r5, r3
 8006de2:	e7ed      	b.n	8006dc0 <_dtoa_r+0x6b0>
 8006de4:	2200      	movs	r2, #0
 8006de6:	4b99      	ldr	r3, [pc, #612]	; (800704c <_dtoa_r+0x93c>)
 8006de8:	f7f9 fb76 	bl	80004d8 <__aeabi_dmul>
 8006dec:	2200      	movs	r2, #0
 8006dee:	2300      	movs	r3, #0
 8006df0:	4606      	mov	r6, r0
 8006df2:	460f      	mov	r7, r1
 8006df4:	f7f9 fdd8 	bl	80009a8 <__aeabi_dcmpeq>
 8006df8:	2800      	cmp	r0, #0
 8006dfa:	d09e      	beq.n	8006d3a <_dtoa_r+0x62a>
 8006dfc:	e7cf      	b.n	8006d9e <_dtoa_r+0x68e>
 8006dfe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006e00:	2a00      	cmp	r2, #0
 8006e02:	f000 8088 	beq.w	8006f16 <_dtoa_r+0x806>
 8006e06:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8006e08:	2a01      	cmp	r2, #1
 8006e0a:	dc6d      	bgt.n	8006ee8 <_dtoa_r+0x7d8>
 8006e0c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8006e0e:	2a00      	cmp	r2, #0
 8006e10:	d066      	beq.n	8006ee0 <_dtoa_r+0x7d0>
 8006e12:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8006e16:	464d      	mov	r5, r9
 8006e18:	9e08      	ldr	r6, [sp, #32]
 8006e1a:	9a07      	ldr	r2, [sp, #28]
 8006e1c:	2101      	movs	r1, #1
 8006e1e:	441a      	add	r2, r3
 8006e20:	4620      	mov	r0, r4
 8006e22:	4499      	add	r9, r3
 8006e24:	9207      	str	r2, [sp, #28]
 8006e26:	f000 fe9d 	bl	8007b64 <__i2b>
 8006e2a:	4607      	mov	r7, r0
 8006e2c:	2d00      	cmp	r5, #0
 8006e2e:	dd0b      	ble.n	8006e48 <_dtoa_r+0x738>
 8006e30:	9b07      	ldr	r3, [sp, #28]
 8006e32:	2b00      	cmp	r3, #0
 8006e34:	dd08      	ble.n	8006e48 <_dtoa_r+0x738>
 8006e36:	42ab      	cmp	r3, r5
 8006e38:	bfa8      	it	ge
 8006e3a:	462b      	movge	r3, r5
 8006e3c:	9a07      	ldr	r2, [sp, #28]
 8006e3e:	eba9 0903 	sub.w	r9, r9, r3
 8006e42:	1aed      	subs	r5, r5, r3
 8006e44:	1ad3      	subs	r3, r2, r3
 8006e46:	9307      	str	r3, [sp, #28]
 8006e48:	9b08      	ldr	r3, [sp, #32]
 8006e4a:	b1eb      	cbz	r3, 8006e88 <_dtoa_r+0x778>
 8006e4c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006e4e:	2b00      	cmp	r3, #0
 8006e50:	d065      	beq.n	8006f1e <_dtoa_r+0x80e>
 8006e52:	b18e      	cbz	r6, 8006e78 <_dtoa_r+0x768>
 8006e54:	4639      	mov	r1, r7
 8006e56:	4632      	mov	r2, r6
 8006e58:	4620      	mov	r0, r4
 8006e5a:	f000 ff21 	bl	8007ca0 <__pow5mult>
 8006e5e:	465a      	mov	r2, fp
 8006e60:	4601      	mov	r1, r0
 8006e62:	4607      	mov	r7, r0
 8006e64:	4620      	mov	r0, r4
 8006e66:	f000 fe86 	bl	8007b76 <__multiply>
 8006e6a:	4659      	mov	r1, fp
 8006e6c:	900a      	str	r0, [sp, #40]	; 0x28
 8006e6e:	4620      	mov	r0, r4
 8006e70:	f000 fd9a 	bl	80079a8 <_Bfree>
 8006e74:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006e76:	469b      	mov	fp, r3
 8006e78:	9b08      	ldr	r3, [sp, #32]
 8006e7a:	1b9a      	subs	r2, r3, r6
 8006e7c:	d004      	beq.n	8006e88 <_dtoa_r+0x778>
 8006e7e:	4659      	mov	r1, fp
 8006e80:	4620      	mov	r0, r4
 8006e82:	f000 ff0d 	bl	8007ca0 <__pow5mult>
 8006e86:	4683      	mov	fp, r0
 8006e88:	2101      	movs	r1, #1
 8006e8a:	4620      	mov	r0, r4
 8006e8c:	f000 fe6a 	bl	8007b64 <__i2b>
 8006e90:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006e92:	4606      	mov	r6, r0
 8006e94:	2b00      	cmp	r3, #0
 8006e96:	f000 81c6 	beq.w	8007226 <_dtoa_r+0xb16>
 8006e9a:	461a      	mov	r2, r3
 8006e9c:	4601      	mov	r1, r0
 8006e9e:	4620      	mov	r0, r4
 8006ea0:	f000 fefe 	bl	8007ca0 <__pow5mult>
 8006ea4:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8006ea6:	4606      	mov	r6, r0
 8006ea8:	2b01      	cmp	r3, #1
 8006eaa:	dc3e      	bgt.n	8006f2a <_dtoa_r+0x81a>
 8006eac:	9b02      	ldr	r3, [sp, #8]
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	d137      	bne.n	8006f22 <_dtoa_r+0x812>
 8006eb2:	9b03      	ldr	r3, [sp, #12]
 8006eb4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	d134      	bne.n	8006f26 <_dtoa_r+0x816>
 8006ebc:	9b03      	ldr	r3, [sp, #12]
 8006ebe:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006ec2:	0d1b      	lsrs	r3, r3, #20
 8006ec4:	051b      	lsls	r3, r3, #20
 8006ec6:	b12b      	cbz	r3, 8006ed4 <_dtoa_r+0x7c4>
 8006ec8:	9b07      	ldr	r3, [sp, #28]
 8006eca:	f109 0901 	add.w	r9, r9, #1
 8006ece:	3301      	adds	r3, #1
 8006ed0:	9307      	str	r3, [sp, #28]
 8006ed2:	2301      	movs	r3, #1
 8006ed4:	9308      	str	r3, [sp, #32]
 8006ed6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006ed8:	2b00      	cmp	r3, #0
 8006eda:	d128      	bne.n	8006f2e <_dtoa_r+0x81e>
 8006edc:	2001      	movs	r0, #1
 8006ede:	e02e      	b.n	8006f3e <_dtoa_r+0x82e>
 8006ee0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006ee2:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8006ee6:	e796      	b.n	8006e16 <_dtoa_r+0x706>
 8006ee8:	9b08      	ldr	r3, [sp, #32]
 8006eea:	f108 36ff 	add.w	r6, r8, #4294967295	; 0xffffffff
 8006eee:	42b3      	cmp	r3, r6
 8006ef0:	bfb7      	itett	lt
 8006ef2:	9b08      	ldrlt	r3, [sp, #32]
 8006ef4:	1b9e      	subge	r6, r3, r6
 8006ef6:	1af2      	sublt	r2, r6, r3
 8006ef8:	9b0c      	ldrlt	r3, [sp, #48]	; 0x30
 8006efa:	bfbf      	itttt	lt
 8006efc:	9608      	strlt	r6, [sp, #32]
 8006efe:	189b      	addlt	r3, r3, r2
 8006f00:	930c      	strlt	r3, [sp, #48]	; 0x30
 8006f02:	2600      	movlt	r6, #0
 8006f04:	f1b8 0f00 	cmp.w	r8, #0
 8006f08:	bfb9      	ittee	lt
 8006f0a:	eba9 0508 	sublt.w	r5, r9, r8
 8006f0e:	2300      	movlt	r3, #0
 8006f10:	464d      	movge	r5, r9
 8006f12:	4643      	movge	r3, r8
 8006f14:	e781      	b.n	8006e1a <_dtoa_r+0x70a>
 8006f16:	9e08      	ldr	r6, [sp, #32]
 8006f18:	464d      	mov	r5, r9
 8006f1a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8006f1c:	e786      	b.n	8006e2c <_dtoa_r+0x71c>
 8006f1e:	9a08      	ldr	r2, [sp, #32]
 8006f20:	e7ad      	b.n	8006e7e <_dtoa_r+0x76e>
 8006f22:	2300      	movs	r3, #0
 8006f24:	e7d6      	b.n	8006ed4 <_dtoa_r+0x7c4>
 8006f26:	9b02      	ldr	r3, [sp, #8]
 8006f28:	e7d4      	b.n	8006ed4 <_dtoa_r+0x7c4>
 8006f2a:	2300      	movs	r3, #0
 8006f2c:	9308      	str	r3, [sp, #32]
 8006f2e:	6933      	ldr	r3, [r6, #16]
 8006f30:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8006f34:	6918      	ldr	r0, [r3, #16]
 8006f36:	f000 fdc7 	bl	8007ac8 <__hi0bits>
 8006f3a:	f1c0 0020 	rsb	r0, r0, #32
 8006f3e:	9b07      	ldr	r3, [sp, #28]
 8006f40:	4418      	add	r0, r3
 8006f42:	f010 001f 	ands.w	r0, r0, #31
 8006f46:	d047      	beq.n	8006fd8 <_dtoa_r+0x8c8>
 8006f48:	f1c0 0320 	rsb	r3, r0, #32
 8006f4c:	2b04      	cmp	r3, #4
 8006f4e:	dd3b      	ble.n	8006fc8 <_dtoa_r+0x8b8>
 8006f50:	9b07      	ldr	r3, [sp, #28]
 8006f52:	f1c0 001c 	rsb	r0, r0, #28
 8006f56:	4481      	add	r9, r0
 8006f58:	4405      	add	r5, r0
 8006f5a:	4403      	add	r3, r0
 8006f5c:	9307      	str	r3, [sp, #28]
 8006f5e:	f1b9 0f00 	cmp.w	r9, #0
 8006f62:	dd05      	ble.n	8006f70 <_dtoa_r+0x860>
 8006f64:	4659      	mov	r1, fp
 8006f66:	464a      	mov	r2, r9
 8006f68:	4620      	mov	r0, r4
 8006f6a:	f000 fee7 	bl	8007d3c <__lshift>
 8006f6e:	4683      	mov	fp, r0
 8006f70:	9b07      	ldr	r3, [sp, #28]
 8006f72:	2b00      	cmp	r3, #0
 8006f74:	dd05      	ble.n	8006f82 <_dtoa_r+0x872>
 8006f76:	4631      	mov	r1, r6
 8006f78:	461a      	mov	r2, r3
 8006f7a:	4620      	mov	r0, r4
 8006f7c:	f000 fede 	bl	8007d3c <__lshift>
 8006f80:	4606      	mov	r6, r0
 8006f82:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006f84:	b353      	cbz	r3, 8006fdc <_dtoa_r+0x8cc>
 8006f86:	4631      	mov	r1, r6
 8006f88:	4658      	mov	r0, fp
 8006f8a:	f000 ff2b 	bl	8007de4 <__mcmp>
 8006f8e:	2800      	cmp	r0, #0
 8006f90:	da24      	bge.n	8006fdc <_dtoa_r+0x8cc>
 8006f92:	2300      	movs	r3, #0
 8006f94:	4659      	mov	r1, fp
 8006f96:	220a      	movs	r2, #10
 8006f98:	4620      	mov	r0, r4
 8006f9a:	f000 fd1c 	bl	80079d6 <__multadd>
 8006f9e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006fa0:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8006fa4:	4683      	mov	fp, r0
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	f000 8144 	beq.w	8007234 <_dtoa_r+0xb24>
 8006fac:	2300      	movs	r3, #0
 8006fae:	4639      	mov	r1, r7
 8006fb0:	220a      	movs	r2, #10
 8006fb2:	4620      	mov	r0, r4
 8006fb4:	f000 fd0f 	bl	80079d6 <__multadd>
 8006fb8:	9b04      	ldr	r3, [sp, #16]
 8006fba:	4607      	mov	r7, r0
 8006fbc:	2b00      	cmp	r3, #0
 8006fbe:	dc4d      	bgt.n	800705c <_dtoa_r+0x94c>
 8006fc0:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8006fc2:	2b02      	cmp	r3, #2
 8006fc4:	dd4a      	ble.n	800705c <_dtoa_r+0x94c>
 8006fc6:	e011      	b.n	8006fec <_dtoa_r+0x8dc>
 8006fc8:	d0c9      	beq.n	8006f5e <_dtoa_r+0x84e>
 8006fca:	9a07      	ldr	r2, [sp, #28]
 8006fcc:	331c      	adds	r3, #28
 8006fce:	441a      	add	r2, r3
 8006fd0:	4499      	add	r9, r3
 8006fd2:	441d      	add	r5, r3
 8006fd4:	4613      	mov	r3, r2
 8006fd6:	e7c1      	b.n	8006f5c <_dtoa_r+0x84c>
 8006fd8:	4603      	mov	r3, r0
 8006fda:	e7f6      	b.n	8006fca <_dtoa_r+0x8ba>
 8006fdc:	f1b8 0f00 	cmp.w	r8, #0
 8006fe0:	dc36      	bgt.n	8007050 <_dtoa_r+0x940>
 8006fe2:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8006fe4:	2b02      	cmp	r3, #2
 8006fe6:	dd33      	ble.n	8007050 <_dtoa_r+0x940>
 8006fe8:	f8cd 8010 	str.w	r8, [sp, #16]
 8006fec:	9b04      	ldr	r3, [sp, #16]
 8006fee:	b963      	cbnz	r3, 800700a <_dtoa_r+0x8fa>
 8006ff0:	4631      	mov	r1, r6
 8006ff2:	2205      	movs	r2, #5
 8006ff4:	4620      	mov	r0, r4
 8006ff6:	f000 fcee 	bl	80079d6 <__multadd>
 8006ffa:	4601      	mov	r1, r0
 8006ffc:	4606      	mov	r6, r0
 8006ffe:	4658      	mov	r0, fp
 8007000:	f000 fef0 	bl	8007de4 <__mcmp>
 8007004:	2800      	cmp	r0, #0
 8007006:	f73f add3 	bgt.w	8006bb0 <_dtoa_r+0x4a0>
 800700a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800700c:	9d06      	ldr	r5, [sp, #24]
 800700e:	ea6f 0a03 	mvn.w	sl, r3
 8007012:	f04f 0900 	mov.w	r9, #0
 8007016:	4631      	mov	r1, r6
 8007018:	4620      	mov	r0, r4
 800701a:	f000 fcc5 	bl	80079a8 <_Bfree>
 800701e:	2f00      	cmp	r7, #0
 8007020:	f43f aebd 	beq.w	8006d9e <_dtoa_r+0x68e>
 8007024:	f1b9 0f00 	cmp.w	r9, #0
 8007028:	d005      	beq.n	8007036 <_dtoa_r+0x926>
 800702a:	45b9      	cmp	r9, r7
 800702c:	d003      	beq.n	8007036 <_dtoa_r+0x926>
 800702e:	4649      	mov	r1, r9
 8007030:	4620      	mov	r0, r4
 8007032:	f000 fcb9 	bl	80079a8 <_Bfree>
 8007036:	4639      	mov	r1, r7
 8007038:	4620      	mov	r0, r4
 800703a:	f000 fcb5 	bl	80079a8 <_Bfree>
 800703e:	e6ae      	b.n	8006d9e <_dtoa_r+0x68e>
 8007040:	2600      	movs	r6, #0
 8007042:	4637      	mov	r7, r6
 8007044:	e7e1      	b.n	800700a <_dtoa_r+0x8fa>
 8007046:	46ba      	mov	sl, r7
 8007048:	4637      	mov	r7, r6
 800704a:	e5b1      	b.n	8006bb0 <_dtoa_r+0x4a0>
 800704c:	40240000 	.word	0x40240000
 8007050:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007052:	f8cd 8010 	str.w	r8, [sp, #16]
 8007056:	2b00      	cmp	r3, #0
 8007058:	f000 80f3 	beq.w	8007242 <_dtoa_r+0xb32>
 800705c:	2d00      	cmp	r5, #0
 800705e:	dd05      	ble.n	800706c <_dtoa_r+0x95c>
 8007060:	4639      	mov	r1, r7
 8007062:	462a      	mov	r2, r5
 8007064:	4620      	mov	r0, r4
 8007066:	f000 fe69 	bl	8007d3c <__lshift>
 800706a:	4607      	mov	r7, r0
 800706c:	9b08      	ldr	r3, [sp, #32]
 800706e:	2b00      	cmp	r3, #0
 8007070:	d04c      	beq.n	800710c <_dtoa_r+0x9fc>
 8007072:	6879      	ldr	r1, [r7, #4]
 8007074:	4620      	mov	r0, r4
 8007076:	f000 fc63 	bl	8007940 <_Balloc>
 800707a:	4605      	mov	r5, r0
 800707c:	693a      	ldr	r2, [r7, #16]
 800707e:	f107 010c 	add.w	r1, r7, #12
 8007082:	3202      	adds	r2, #2
 8007084:	0092      	lsls	r2, r2, #2
 8007086:	300c      	adds	r0, #12
 8007088:	f7fd fd3e 	bl	8004b08 <memcpy>
 800708c:	2201      	movs	r2, #1
 800708e:	4629      	mov	r1, r5
 8007090:	4620      	mov	r0, r4
 8007092:	f000 fe53 	bl	8007d3c <__lshift>
 8007096:	46b9      	mov	r9, r7
 8007098:	4607      	mov	r7, r0
 800709a:	9b06      	ldr	r3, [sp, #24]
 800709c:	9307      	str	r3, [sp, #28]
 800709e:	9b02      	ldr	r3, [sp, #8]
 80070a0:	f003 0301 	and.w	r3, r3, #1
 80070a4:	9308      	str	r3, [sp, #32]
 80070a6:	4631      	mov	r1, r6
 80070a8:	4658      	mov	r0, fp
 80070aa:	f7ff faa3 	bl	80065f4 <quorem>
 80070ae:	4649      	mov	r1, r9
 80070b0:	4605      	mov	r5, r0
 80070b2:	f100 0830 	add.w	r8, r0, #48	; 0x30
 80070b6:	4658      	mov	r0, fp
 80070b8:	f000 fe94 	bl	8007de4 <__mcmp>
 80070bc:	463a      	mov	r2, r7
 80070be:	9002      	str	r0, [sp, #8]
 80070c0:	4631      	mov	r1, r6
 80070c2:	4620      	mov	r0, r4
 80070c4:	f000 fea8 	bl	8007e18 <__mdiff>
 80070c8:	68c3      	ldr	r3, [r0, #12]
 80070ca:	4602      	mov	r2, r0
 80070cc:	bb03      	cbnz	r3, 8007110 <_dtoa_r+0xa00>
 80070ce:	4601      	mov	r1, r0
 80070d0:	9009      	str	r0, [sp, #36]	; 0x24
 80070d2:	4658      	mov	r0, fp
 80070d4:	f000 fe86 	bl	8007de4 <__mcmp>
 80070d8:	4603      	mov	r3, r0
 80070da:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80070dc:	4611      	mov	r1, r2
 80070de:	4620      	mov	r0, r4
 80070e0:	9309      	str	r3, [sp, #36]	; 0x24
 80070e2:	f000 fc61 	bl	80079a8 <_Bfree>
 80070e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80070e8:	b9a3      	cbnz	r3, 8007114 <_dtoa_r+0xa04>
 80070ea:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80070ec:	b992      	cbnz	r2, 8007114 <_dtoa_r+0xa04>
 80070ee:	9a08      	ldr	r2, [sp, #32]
 80070f0:	b982      	cbnz	r2, 8007114 <_dtoa_r+0xa04>
 80070f2:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80070f6:	d029      	beq.n	800714c <_dtoa_r+0xa3c>
 80070f8:	9b02      	ldr	r3, [sp, #8]
 80070fa:	2b00      	cmp	r3, #0
 80070fc:	dd01      	ble.n	8007102 <_dtoa_r+0x9f2>
 80070fe:	f105 0831 	add.w	r8, r5, #49	; 0x31
 8007102:	9b07      	ldr	r3, [sp, #28]
 8007104:	1c5d      	adds	r5, r3, #1
 8007106:	f883 8000 	strb.w	r8, [r3]
 800710a:	e784      	b.n	8007016 <_dtoa_r+0x906>
 800710c:	4638      	mov	r0, r7
 800710e:	e7c2      	b.n	8007096 <_dtoa_r+0x986>
 8007110:	2301      	movs	r3, #1
 8007112:	e7e3      	b.n	80070dc <_dtoa_r+0x9cc>
 8007114:	9a02      	ldr	r2, [sp, #8]
 8007116:	2a00      	cmp	r2, #0
 8007118:	db04      	blt.n	8007124 <_dtoa_r+0xa14>
 800711a:	d123      	bne.n	8007164 <_dtoa_r+0xa54>
 800711c:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800711e:	bb0a      	cbnz	r2, 8007164 <_dtoa_r+0xa54>
 8007120:	9a08      	ldr	r2, [sp, #32]
 8007122:	b9fa      	cbnz	r2, 8007164 <_dtoa_r+0xa54>
 8007124:	2b00      	cmp	r3, #0
 8007126:	ddec      	ble.n	8007102 <_dtoa_r+0x9f2>
 8007128:	4659      	mov	r1, fp
 800712a:	2201      	movs	r2, #1
 800712c:	4620      	mov	r0, r4
 800712e:	f000 fe05 	bl	8007d3c <__lshift>
 8007132:	4631      	mov	r1, r6
 8007134:	4683      	mov	fp, r0
 8007136:	f000 fe55 	bl	8007de4 <__mcmp>
 800713a:	2800      	cmp	r0, #0
 800713c:	dc03      	bgt.n	8007146 <_dtoa_r+0xa36>
 800713e:	d1e0      	bne.n	8007102 <_dtoa_r+0x9f2>
 8007140:	f018 0f01 	tst.w	r8, #1
 8007144:	d0dd      	beq.n	8007102 <_dtoa_r+0x9f2>
 8007146:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800714a:	d1d8      	bne.n	80070fe <_dtoa_r+0x9ee>
 800714c:	9b07      	ldr	r3, [sp, #28]
 800714e:	9a07      	ldr	r2, [sp, #28]
 8007150:	1c5d      	adds	r5, r3, #1
 8007152:	2339      	movs	r3, #57	; 0x39
 8007154:	7013      	strb	r3, [r2, #0]
 8007156:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800715a:	1e6a      	subs	r2, r5, #1
 800715c:	2b39      	cmp	r3, #57	; 0x39
 800715e:	d04d      	beq.n	80071fc <_dtoa_r+0xaec>
 8007160:	3301      	adds	r3, #1
 8007162:	e052      	b.n	800720a <_dtoa_r+0xafa>
 8007164:	9a07      	ldr	r2, [sp, #28]
 8007166:	2b00      	cmp	r3, #0
 8007168:	f102 0501 	add.w	r5, r2, #1
 800716c:	dd06      	ble.n	800717c <_dtoa_r+0xa6c>
 800716e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8007172:	d0eb      	beq.n	800714c <_dtoa_r+0xa3c>
 8007174:	f108 0801 	add.w	r8, r8, #1
 8007178:	9b07      	ldr	r3, [sp, #28]
 800717a:	e7c4      	b.n	8007106 <_dtoa_r+0x9f6>
 800717c:	9b06      	ldr	r3, [sp, #24]
 800717e:	9a04      	ldr	r2, [sp, #16]
 8007180:	1aeb      	subs	r3, r5, r3
 8007182:	4293      	cmp	r3, r2
 8007184:	f805 8c01 	strb.w	r8, [r5, #-1]
 8007188:	d021      	beq.n	80071ce <_dtoa_r+0xabe>
 800718a:	4659      	mov	r1, fp
 800718c:	2300      	movs	r3, #0
 800718e:	220a      	movs	r2, #10
 8007190:	4620      	mov	r0, r4
 8007192:	f000 fc20 	bl	80079d6 <__multadd>
 8007196:	45b9      	cmp	r9, r7
 8007198:	4683      	mov	fp, r0
 800719a:	f04f 0300 	mov.w	r3, #0
 800719e:	f04f 020a 	mov.w	r2, #10
 80071a2:	4649      	mov	r1, r9
 80071a4:	4620      	mov	r0, r4
 80071a6:	d105      	bne.n	80071b4 <_dtoa_r+0xaa4>
 80071a8:	f000 fc15 	bl	80079d6 <__multadd>
 80071ac:	4681      	mov	r9, r0
 80071ae:	4607      	mov	r7, r0
 80071b0:	9507      	str	r5, [sp, #28]
 80071b2:	e778      	b.n	80070a6 <_dtoa_r+0x996>
 80071b4:	f000 fc0f 	bl	80079d6 <__multadd>
 80071b8:	4639      	mov	r1, r7
 80071ba:	4681      	mov	r9, r0
 80071bc:	2300      	movs	r3, #0
 80071be:	220a      	movs	r2, #10
 80071c0:	4620      	mov	r0, r4
 80071c2:	f000 fc08 	bl	80079d6 <__multadd>
 80071c6:	4607      	mov	r7, r0
 80071c8:	e7f2      	b.n	80071b0 <_dtoa_r+0xaa0>
 80071ca:	f04f 0900 	mov.w	r9, #0
 80071ce:	4659      	mov	r1, fp
 80071d0:	2201      	movs	r2, #1
 80071d2:	4620      	mov	r0, r4
 80071d4:	f000 fdb2 	bl	8007d3c <__lshift>
 80071d8:	4631      	mov	r1, r6
 80071da:	4683      	mov	fp, r0
 80071dc:	f000 fe02 	bl	8007de4 <__mcmp>
 80071e0:	2800      	cmp	r0, #0
 80071e2:	dcb8      	bgt.n	8007156 <_dtoa_r+0xa46>
 80071e4:	d102      	bne.n	80071ec <_dtoa_r+0xadc>
 80071e6:	f018 0f01 	tst.w	r8, #1
 80071ea:	d1b4      	bne.n	8007156 <_dtoa_r+0xa46>
 80071ec:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80071f0:	1e6a      	subs	r2, r5, #1
 80071f2:	2b30      	cmp	r3, #48	; 0x30
 80071f4:	f47f af0f 	bne.w	8007016 <_dtoa_r+0x906>
 80071f8:	4615      	mov	r5, r2
 80071fa:	e7f7      	b.n	80071ec <_dtoa_r+0xadc>
 80071fc:	9b06      	ldr	r3, [sp, #24]
 80071fe:	4293      	cmp	r3, r2
 8007200:	d105      	bne.n	800720e <_dtoa_r+0xafe>
 8007202:	2331      	movs	r3, #49	; 0x31
 8007204:	9a06      	ldr	r2, [sp, #24]
 8007206:	f10a 0a01 	add.w	sl, sl, #1
 800720a:	7013      	strb	r3, [r2, #0]
 800720c:	e703      	b.n	8007016 <_dtoa_r+0x906>
 800720e:	4615      	mov	r5, r2
 8007210:	e7a1      	b.n	8007156 <_dtoa_r+0xa46>
 8007212:	4b17      	ldr	r3, [pc, #92]	; (8007270 <_dtoa_r+0xb60>)
 8007214:	f7ff bae1 	b.w	80067da <_dtoa_r+0xca>
 8007218:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800721a:	2b00      	cmp	r3, #0
 800721c:	f47f aabb 	bne.w	8006796 <_dtoa_r+0x86>
 8007220:	4b14      	ldr	r3, [pc, #80]	; (8007274 <_dtoa_r+0xb64>)
 8007222:	f7ff bada 	b.w	80067da <_dtoa_r+0xca>
 8007226:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8007228:	2b01      	cmp	r3, #1
 800722a:	f77f ae3f 	ble.w	8006eac <_dtoa_r+0x79c>
 800722e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007230:	9308      	str	r3, [sp, #32]
 8007232:	e653      	b.n	8006edc <_dtoa_r+0x7cc>
 8007234:	9b04      	ldr	r3, [sp, #16]
 8007236:	2b00      	cmp	r3, #0
 8007238:	dc03      	bgt.n	8007242 <_dtoa_r+0xb32>
 800723a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800723c:	2b02      	cmp	r3, #2
 800723e:	f73f aed5 	bgt.w	8006fec <_dtoa_r+0x8dc>
 8007242:	9d06      	ldr	r5, [sp, #24]
 8007244:	4631      	mov	r1, r6
 8007246:	4658      	mov	r0, fp
 8007248:	f7ff f9d4 	bl	80065f4 <quorem>
 800724c:	9b06      	ldr	r3, [sp, #24]
 800724e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8007252:	f805 8b01 	strb.w	r8, [r5], #1
 8007256:	9a04      	ldr	r2, [sp, #16]
 8007258:	1aeb      	subs	r3, r5, r3
 800725a:	429a      	cmp	r2, r3
 800725c:	ddb5      	ble.n	80071ca <_dtoa_r+0xaba>
 800725e:	4659      	mov	r1, fp
 8007260:	2300      	movs	r3, #0
 8007262:	220a      	movs	r2, #10
 8007264:	4620      	mov	r0, r4
 8007266:	f000 fbb6 	bl	80079d6 <__multadd>
 800726a:	4683      	mov	fp, r0
 800726c:	e7ea      	b.n	8007244 <_dtoa_r+0xb34>
 800726e:	bf00      	nop
 8007270:	08008d28 	.word	0x08008d28
 8007274:	08008da8 	.word	0x08008da8

08007278 <rshift>:
 8007278:	b5f0      	push	{r4, r5, r6, r7, lr}
 800727a:	6906      	ldr	r6, [r0, #16]
 800727c:	114b      	asrs	r3, r1, #5
 800727e:	429e      	cmp	r6, r3
 8007280:	f100 0414 	add.w	r4, r0, #20
 8007284:	dd31      	ble.n	80072ea <rshift+0x72>
 8007286:	f011 011f 	ands.w	r1, r1, #31
 800728a:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 800728e:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 8007292:	d108      	bne.n	80072a6 <rshift+0x2e>
 8007294:	4621      	mov	r1, r4
 8007296:	42b2      	cmp	r2, r6
 8007298:	460b      	mov	r3, r1
 800729a:	d211      	bcs.n	80072c0 <rshift+0x48>
 800729c:	f852 3b04 	ldr.w	r3, [r2], #4
 80072a0:	f841 3b04 	str.w	r3, [r1], #4
 80072a4:	e7f7      	b.n	8007296 <rshift+0x1e>
 80072a6:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 80072aa:	4623      	mov	r3, r4
 80072ac:	f1c1 0c20 	rsb	ip, r1, #32
 80072b0:	40cd      	lsrs	r5, r1
 80072b2:	3204      	adds	r2, #4
 80072b4:	42b2      	cmp	r2, r6
 80072b6:	4617      	mov	r7, r2
 80072b8:	d30d      	bcc.n	80072d6 <rshift+0x5e>
 80072ba:	601d      	str	r5, [r3, #0]
 80072bc:	b105      	cbz	r5, 80072c0 <rshift+0x48>
 80072be:	3304      	adds	r3, #4
 80072c0:	42a3      	cmp	r3, r4
 80072c2:	eba3 0204 	sub.w	r2, r3, r4
 80072c6:	bf08      	it	eq
 80072c8:	2300      	moveq	r3, #0
 80072ca:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80072ce:	6102      	str	r2, [r0, #16]
 80072d0:	bf08      	it	eq
 80072d2:	6143      	streq	r3, [r0, #20]
 80072d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80072d6:	683f      	ldr	r7, [r7, #0]
 80072d8:	fa07 f70c 	lsl.w	r7, r7, ip
 80072dc:	433d      	orrs	r5, r7
 80072de:	f843 5b04 	str.w	r5, [r3], #4
 80072e2:	f852 5b04 	ldr.w	r5, [r2], #4
 80072e6:	40cd      	lsrs	r5, r1
 80072e8:	e7e4      	b.n	80072b4 <rshift+0x3c>
 80072ea:	4623      	mov	r3, r4
 80072ec:	e7e8      	b.n	80072c0 <rshift+0x48>

080072ee <__hexdig_fun>:
 80072ee:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 80072f2:	2b09      	cmp	r3, #9
 80072f4:	d802      	bhi.n	80072fc <__hexdig_fun+0xe>
 80072f6:	3820      	subs	r0, #32
 80072f8:	b2c0      	uxtb	r0, r0
 80072fa:	4770      	bx	lr
 80072fc:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8007300:	2b05      	cmp	r3, #5
 8007302:	d801      	bhi.n	8007308 <__hexdig_fun+0x1a>
 8007304:	3847      	subs	r0, #71	; 0x47
 8007306:	e7f7      	b.n	80072f8 <__hexdig_fun+0xa>
 8007308:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800730c:	2b05      	cmp	r3, #5
 800730e:	d801      	bhi.n	8007314 <__hexdig_fun+0x26>
 8007310:	3827      	subs	r0, #39	; 0x27
 8007312:	e7f1      	b.n	80072f8 <__hexdig_fun+0xa>
 8007314:	2000      	movs	r0, #0
 8007316:	4770      	bx	lr

08007318 <__gethex>:
 8007318:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800731c:	b08b      	sub	sp, #44	; 0x2c
 800731e:	9002      	str	r0, [sp, #8]
 8007320:	9816      	ldr	r0, [sp, #88]	; 0x58
 8007322:	468a      	mov	sl, r1
 8007324:	4690      	mov	r8, r2
 8007326:	9306      	str	r3, [sp, #24]
 8007328:	f000 fad1 	bl	80078ce <__localeconv_l>
 800732c:	6803      	ldr	r3, [r0, #0]
 800732e:	f04f 0b00 	mov.w	fp, #0
 8007332:	4618      	mov	r0, r3
 8007334:	9303      	str	r3, [sp, #12]
 8007336:	f7f8 ff0b 	bl	8000150 <strlen>
 800733a:	9b03      	ldr	r3, [sp, #12]
 800733c:	9001      	str	r0, [sp, #4]
 800733e:	4403      	add	r3, r0
 8007340:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8007344:	9307      	str	r3, [sp, #28]
 8007346:	f8da 3000 	ldr.w	r3, [sl]
 800734a:	3302      	adds	r3, #2
 800734c:	461f      	mov	r7, r3
 800734e:	f813 0b01 	ldrb.w	r0, [r3], #1
 8007352:	2830      	cmp	r0, #48	; 0x30
 8007354:	d06c      	beq.n	8007430 <__gethex+0x118>
 8007356:	f7ff ffca 	bl	80072ee <__hexdig_fun>
 800735a:	4604      	mov	r4, r0
 800735c:	2800      	cmp	r0, #0
 800735e:	d16a      	bne.n	8007436 <__gethex+0x11e>
 8007360:	9a01      	ldr	r2, [sp, #4]
 8007362:	9903      	ldr	r1, [sp, #12]
 8007364:	4638      	mov	r0, r7
 8007366:	f001 f8f9 	bl	800855c <strncmp>
 800736a:	2800      	cmp	r0, #0
 800736c:	d166      	bne.n	800743c <__gethex+0x124>
 800736e:	9b01      	ldr	r3, [sp, #4]
 8007370:	5cf8      	ldrb	r0, [r7, r3]
 8007372:	18fe      	adds	r6, r7, r3
 8007374:	f7ff ffbb 	bl	80072ee <__hexdig_fun>
 8007378:	2800      	cmp	r0, #0
 800737a:	d062      	beq.n	8007442 <__gethex+0x12a>
 800737c:	4633      	mov	r3, r6
 800737e:	7818      	ldrb	r0, [r3, #0]
 8007380:	461f      	mov	r7, r3
 8007382:	2830      	cmp	r0, #48	; 0x30
 8007384:	f103 0301 	add.w	r3, r3, #1
 8007388:	d0f9      	beq.n	800737e <__gethex+0x66>
 800738a:	f7ff ffb0 	bl	80072ee <__hexdig_fun>
 800738e:	fab0 f580 	clz	r5, r0
 8007392:	4634      	mov	r4, r6
 8007394:	f04f 0b01 	mov.w	fp, #1
 8007398:	096d      	lsrs	r5, r5, #5
 800739a:	463a      	mov	r2, r7
 800739c:	4616      	mov	r6, r2
 800739e:	7830      	ldrb	r0, [r6, #0]
 80073a0:	3201      	adds	r2, #1
 80073a2:	f7ff ffa4 	bl	80072ee <__hexdig_fun>
 80073a6:	2800      	cmp	r0, #0
 80073a8:	d1f8      	bne.n	800739c <__gethex+0x84>
 80073aa:	9a01      	ldr	r2, [sp, #4]
 80073ac:	9903      	ldr	r1, [sp, #12]
 80073ae:	4630      	mov	r0, r6
 80073b0:	f001 f8d4 	bl	800855c <strncmp>
 80073b4:	b950      	cbnz	r0, 80073cc <__gethex+0xb4>
 80073b6:	b954      	cbnz	r4, 80073ce <__gethex+0xb6>
 80073b8:	9b01      	ldr	r3, [sp, #4]
 80073ba:	18f4      	adds	r4, r6, r3
 80073bc:	4622      	mov	r2, r4
 80073be:	4616      	mov	r6, r2
 80073c0:	7830      	ldrb	r0, [r6, #0]
 80073c2:	3201      	adds	r2, #1
 80073c4:	f7ff ff93 	bl	80072ee <__hexdig_fun>
 80073c8:	2800      	cmp	r0, #0
 80073ca:	d1f8      	bne.n	80073be <__gethex+0xa6>
 80073cc:	b10c      	cbz	r4, 80073d2 <__gethex+0xba>
 80073ce:	1ba4      	subs	r4, r4, r6
 80073d0:	00a4      	lsls	r4, r4, #2
 80073d2:	7833      	ldrb	r3, [r6, #0]
 80073d4:	2b50      	cmp	r3, #80	; 0x50
 80073d6:	d001      	beq.n	80073dc <__gethex+0xc4>
 80073d8:	2b70      	cmp	r3, #112	; 0x70
 80073da:	d140      	bne.n	800745e <__gethex+0x146>
 80073dc:	7873      	ldrb	r3, [r6, #1]
 80073de:	2b2b      	cmp	r3, #43	; 0x2b
 80073e0:	d031      	beq.n	8007446 <__gethex+0x12e>
 80073e2:	2b2d      	cmp	r3, #45	; 0x2d
 80073e4:	d033      	beq.n	800744e <__gethex+0x136>
 80073e6:	f04f 0900 	mov.w	r9, #0
 80073ea:	1c71      	adds	r1, r6, #1
 80073ec:	7808      	ldrb	r0, [r1, #0]
 80073ee:	f7ff ff7e 	bl	80072ee <__hexdig_fun>
 80073f2:	1e43      	subs	r3, r0, #1
 80073f4:	b2db      	uxtb	r3, r3
 80073f6:	2b18      	cmp	r3, #24
 80073f8:	d831      	bhi.n	800745e <__gethex+0x146>
 80073fa:	f1a0 0210 	sub.w	r2, r0, #16
 80073fe:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8007402:	f7ff ff74 	bl	80072ee <__hexdig_fun>
 8007406:	1e43      	subs	r3, r0, #1
 8007408:	b2db      	uxtb	r3, r3
 800740a:	2b18      	cmp	r3, #24
 800740c:	d922      	bls.n	8007454 <__gethex+0x13c>
 800740e:	f1b9 0f00 	cmp.w	r9, #0
 8007412:	d000      	beq.n	8007416 <__gethex+0xfe>
 8007414:	4252      	negs	r2, r2
 8007416:	4414      	add	r4, r2
 8007418:	f8ca 1000 	str.w	r1, [sl]
 800741c:	b30d      	cbz	r5, 8007462 <__gethex+0x14a>
 800741e:	f1bb 0f00 	cmp.w	fp, #0
 8007422:	bf0c      	ite	eq
 8007424:	2706      	moveq	r7, #6
 8007426:	2700      	movne	r7, #0
 8007428:	4638      	mov	r0, r7
 800742a:	b00b      	add	sp, #44	; 0x2c
 800742c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007430:	f10b 0b01 	add.w	fp, fp, #1
 8007434:	e78a      	b.n	800734c <__gethex+0x34>
 8007436:	2500      	movs	r5, #0
 8007438:	462c      	mov	r4, r5
 800743a:	e7ae      	b.n	800739a <__gethex+0x82>
 800743c:	463e      	mov	r6, r7
 800743e:	2501      	movs	r5, #1
 8007440:	e7c7      	b.n	80073d2 <__gethex+0xba>
 8007442:	4604      	mov	r4, r0
 8007444:	e7fb      	b.n	800743e <__gethex+0x126>
 8007446:	f04f 0900 	mov.w	r9, #0
 800744a:	1cb1      	adds	r1, r6, #2
 800744c:	e7ce      	b.n	80073ec <__gethex+0xd4>
 800744e:	f04f 0901 	mov.w	r9, #1
 8007452:	e7fa      	b.n	800744a <__gethex+0x132>
 8007454:	230a      	movs	r3, #10
 8007456:	fb03 0202 	mla	r2, r3, r2, r0
 800745a:	3a10      	subs	r2, #16
 800745c:	e7cf      	b.n	80073fe <__gethex+0xe6>
 800745e:	4631      	mov	r1, r6
 8007460:	e7da      	b.n	8007418 <__gethex+0x100>
 8007462:	4629      	mov	r1, r5
 8007464:	1bf3      	subs	r3, r6, r7
 8007466:	3b01      	subs	r3, #1
 8007468:	2b07      	cmp	r3, #7
 800746a:	dc49      	bgt.n	8007500 <__gethex+0x1e8>
 800746c:	9802      	ldr	r0, [sp, #8]
 800746e:	f000 fa67 	bl	8007940 <_Balloc>
 8007472:	f04f 0b00 	mov.w	fp, #0
 8007476:	4605      	mov	r5, r0
 8007478:	46da      	mov	sl, fp
 800747a:	9b01      	ldr	r3, [sp, #4]
 800747c:	f100 0914 	add.w	r9, r0, #20
 8007480:	f1c3 0301 	rsb	r3, r3, #1
 8007484:	f8cd 9010 	str.w	r9, [sp, #16]
 8007488:	9308      	str	r3, [sp, #32]
 800748a:	42b7      	cmp	r7, r6
 800748c:	d33b      	bcc.n	8007506 <__gethex+0x1ee>
 800748e:	9804      	ldr	r0, [sp, #16]
 8007490:	f840 ab04 	str.w	sl, [r0], #4
 8007494:	eba0 0009 	sub.w	r0, r0, r9
 8007498:	1080      	asrs	r0, r0, #2
 800749a:	6128      	str	r0, [r5, #16]
 800749c:	0147      	lsls	r7, r0, #5
 800749e:	4650      	mov	r0, sl
 80074a0:	f000 fb12 	bl	8007ac8 <__hi0bits>
 80074a4:	f8d8 6000 	ldr.w	r6, [r8]
 80074a8:	1a3f      	subs	r7, r7, r0
 80074aa:	42b7      	cmp	r7, r6
 80074ac:	dd64      	ble.n	8007578 <__gethex+0x260>
 80074ae:	1bbf      	subs	r7, r7, r6
 80074b0:	4639      	mov	r1, r7
 80074b2:	4628      	mov	r0, r5
 80074b4:	f000 fe1b 	bl	80080ee <__any_on>
 80074b8:	4682      	mov	sl, r0
 80074ba:	b178      	cbz	r0, 80074dc <__gethex+0x1c4>
 80074bc:	f04f 0a01 	mov.w	sl, #1
 80074c0:	1e7b      	subs	r3, r7, #1
 80074c2:	1159      	asrs	r1, r3, #5
 80074c4:	f003 021f 	and.w	r2, r3, #31
 80074c8:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 80074cc:	fa0a f202 	lsl.w	r2, sl, r2
 80074d0:	420a      	tst	r2, r1
 80074d2:	d003      	beq.n	80074dc <__gethex+0x1c4>
 80074d4:	4553      	cmp	r3, sl
 80074d6:	dc46      	bgt.n	8007566 <__gethex+0x24e>
 80074d8:	f04f 0a02 	mov.w	sl, #2
 80074dc:	4639      	mov	r1, r7
 80074de:	4628      	mov	r0, r5
 80074e0:	f7ff feca 	bl	8007278 <rshift>
 80074e4:	443c      	add	r4, r7
 80074e6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80074ea:	42a3      	cmp	r3, r4
 80074ec:	da52      	bge.n	8007594 <__gethex+0x27c>
 80074ee:	4629      	mov	r1, r5
 80074f0:	9802      	ldr	r0, [sp, #8]
 80074f2:	f000 fa59 	bl	80079a8 <_Bfree>
 80074f6:	2300      	movs	r3, #0
 80074f8:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80074fa:	27a3      	movs	r7, #163	; 0xa3
 80074fc:	6013      	str	r3, [r2, #0]
 80074fe:	e793      	b.n	8007428 <__gethex+0x110>
 8007500:	3101      	adds	r1, #1
 8007502:	105b      	asrs	r3, r3, #1
 8007504:	e7b0      	b.n	8007468 <__gethex+0x150>
 8007506:	1e73      	subs	r3, r6, #1
 8007508:	9305      	str	r3, [sp, #20]
 800750a:	9a07      	ldr	r2, [sp, #28]
 800750c:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8007510:	4293      	cmp	r3, r2
 8007512:	d018      	beq.n	8007546 <__gethex+0x22e>
 8007514:	f1bb 0f20 	cmp.w	fp, #32
 8007518:	d107      	bne.n	800752a <__gethex+0x212>
 800751a:	9b04      	ldr	r3, [sp, #16]
 800751c:	f8c3 a000 	str.w	sl, [r3]
 8007520:	f04f 0a00 	mov.w	sl, #0
 8007524:	46d3      	mov	fp, sl
 8007526:	3304      	adds	r3, #4
 8007528:	9304      	str	r3, [sp, #16]
 800752a:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800752e:	f7ff fede 	bl	80072ee <__hexdig_fun>
 8007532:	f000 000f 	and.w	r0, r0, #15
 8007536:	fa00 f00b 	lsl.w	r0, r0, fp
 800753a:	ea4a 0a00 	orr.w	sl, sl, r0
 800753e:	f10b 0b04 	add.w	fp, fp, #4
 8007542:	9b05      	ldr	r3, [sp, #20]
 8007544:	e00d      	b.n	8007562 <__gethex+0x24a>
 8007546:	9b05      	ldr	r3, [sp, #20]
 8007548:	9a08      	ldr	r2, [sp, #32]
 800754a:	4413      	add	r3, r2
 800754c:	42bb      	cmp	r3, r7
 800754e:	d3e1      	bcc.n	8007514 <__gethex+0x1fc>
 8007550:	4618      	mov	r0, r3
 8007552:	9a01      	ldr	r2, [sp, #4]
 8007554:	9903      	ldr	r1, [sp, #12]
 8007556:	9309      	str	r3, [sp, #36]	; 0x24
 8007558:	f001 f800 	bl	800855c <strncmp>
 800755c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800755e:	2800      	cmp	r0, #0
 8007560:	d1d8      	bne.n	8007514 <__gethex+0x1fc>
 8007562:	461e      	mov	r6, r3
 8007564:	e791      	b.n	800748a <__gethex+0x172>
 8007566:	1eb9      	subs	r1, r7, #2
 8007568:	4628      	mov	r0, r5
 800756a:	f000 fdc0 	bl	80080ee <__any_on>
 800756e:	2800      	cmp	r0, #0
 8007570:	d0b2      	beq.n	80074d8 <__gethex+0x1c0>
 8007572:	f04f 0a03 	mov.w	sl, #3
 8007576:	e7b1      	b.n	80074dc <__gethex+0x1c4>
 8007578:	da09      	bge.n	800758e <__gethex+0x276>
 800757a:	1bf7      	subs	r7, r6, r7
 800757c:	4629      	mov	r1, r5
 800757e:	463a      	mov	r2, r7
 8007580:	9802      	ldr	r0, [sp, #8]
 8007582:	f000 fbdb 	bl	8007d3c <__lshift>
 8007586:	4605      	mov	r5, r0
 8007588:	1be4      	subs	r4, r4, r7
 800758a:	f100 0914 	add.w	r9, r0, #20
 800758e:	f04f 0a00 	mov.w	sl, #0
 8007592:	e7a8      	b.n	80074e6 <__gethex+0x1ce>
 8007594:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8007598:	42a0      	cmp	r0, r4
 800759a:	dd6b      	ble.n	8007674 <__gethex+0x35c>
 800759c:	1b04      	subs	r4, r0, r4
 800759e:	42a6      	cmp	r6, r4
 80075a0:	dc2e      	bgt.n	8007600 <__gethex+0x2e8>
 80075a2:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80075a6:	2b02      	cmp	r3, #2
 80075a8:	d022      	beq.n	80075f0 <__gethex+0x2d8>
 80075aa:	2b03      	cmp	r3, #3
 80075ac:	d024      	beq.n	80075f8 <__gethex+0x2e0>
 80075ae:	2b01      	cmp	r3, #1
 80075b0:	d115      	bne.n	80075de <__gethex+0x2c6>
 80075b2:	42a6      	cmp	r6, r4
 80075b4:	d113      	bne.n	80075de <__gethex+0x2c6>
 80075b6:	2e01      	cmp	r6, #1
 80075b8:	dc0b      	bgt.n	80075d2 <__gethex+0x2ba>
 80075ba:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80075be:	9a06      	ldr	r2, [sp, #24]
 80075c0:	2762      	movs	r7, #98	; 0x62
 80075c2:	6013      	str	r3, [r2, #0]
 80075c4:	2301      	movs	r3, #1
 80075c6:	612b      	str	r3, [r5, #16]
 80075c8:	f8c9 3000 	str.w	r3, [r9]
 80075cc:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80075ce:	601d      	str	r5, [r3, #0]
 80075d0:	e72a      	b.n	8007428 <__gethex+0x110>
 80075d2:	1e71      	subs	r1, r6, #1
 80075d4:	4628      	mov	r0, r5
 80075d6:	f000 fd8a 	bl	80080ee <__any_on>
 80075da:	2800      	cmp	r0, #0
 80075dc:	d1ed      	bne.n	80075ba <__gethex+0x2a2>
 80075de:	4629      	mov	r1, r5
 80075e0:	9802      	ldr	r0, [sp, #8]
 80075e2:	f000 f9e1 	bl	80079a8 <_Bfree>
 80075e6:	2300      	movs	r3, #0
 80075e8:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80075ea:	2750      	movs	r7, #80	; 0x50
 80075ec:	6013      	str	r3, [r2, #0]
 80075ee:	e71b      	b.n	8007428 <__gethex+0x110>
 80075f0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	d0e1      	beq.n	80075ba <__gethex+0x2a2>
 80075f6:	e7f2      	b.n	80075de <__gethex+0x2c6>
 80075f8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80075fa:	2b00      	cmp	r3, #0
 80075fc:	d1dd      	bne.n	80075ba <__gethex+0x2a2>
 80075fe:	e7ee      	b.n	80075de <__gethex+0x2c6>
 8007600:	1e67      	subs	r7, r4, #1
 8007602:	f1ba 0f00 	cmp.w	sl, #0
 8007606:	d132      	bne.n	800766e <__gethex+0x356>
 8007608:	b127      	cbz	r7, 8007614 <__gethex+0x2fc>
 800760a:	4639      	mov	r1, r7
 800760c:	4628      	mov	r0, r5
 800760e:	f000 fd6e 	bl	80080ee <__any_on>
 8007612:	4682      	mov	sl, r0
 8007614:	2301      	movs	r3, #1
 8007616:	117a      	asrs	r2, r7, #5
 8007618:	f007 071f 	and.w	r7, r7, #31
 800761c:	fa03 f707 	lsl.w	r7, r3, r7
 8007620:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 8007624:	4621      	mov	r1, r4
 8007626:	421f      	tst	r7, r3
 8007628:	f04f 0702 	mov.w	r7, #2
 800762c:	4628      	mov	r0, r5
 800762e:	bf18      	it	ne
 8007630:	f04a 0a02 	orrne.w	sl, sl, #2
 8007634:	1b36      	subs	r6, r6, r4
 8007636:	f7ff fe1f 	bl	8007278 <rshift>
 800763a:	f8d8 4004 	ldr.w	r4, [r8, #4]
 800763e:	f1ba 0f00 	cmp.w	sl, #0
 8007642:	d048      	beq.n	80076d6 <__gethex+0x3be>
 8007644:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8007648:	2b02      	cmp	r3, #2
 800764a:	d015      	beq.n	8007678 <__gethex+0x360>
 800764c:	2b03      	cmp	r3, #3
 800764e:	d017      	beq.n	8007680 <__gethex+0x368>
 8007650:	2b01      	cmp	r3, #1
 8007652:	d109      	bne.n	8007668 <__gethex+0x350>
 8007654:	f01a 0f02 	tst.w	sl, #2
 8007658:	d006      	beq.n	8007668 <__gethex+0x350>
 800765a:	f8d9 3000 	ldr.w	r3, [r9]
 800765e:	ea4a 0a03 	orr.w	sl, sl, r3
 8007662:	f01a 0f01 	tst.w	sl, #1
 8007666:	d10e      	bne.n	8007686 <__gethex+0x36e>
 8007668:	f047 0710 	orr.w	r7, r7, #16
 800766c:	e033      	b.n	80076d6 <__gethex+0x3be>
 800766e:	f04f 0a01 	mov.w	sl, #1
 8007672:	e7cf      	b.n	8007614 <__gethex+0x2fc>
 8007674:	2701      	movs	r7, #1
 8007676:	e7e2      	b.n	800763e <__gethex+0x326>
 8007678:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800767a:	f1c3 0301 	rsb	r3, r3, #1
 800767e:	9315      	str	r3, [sp, #84]	; 0x54
 8007680:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007682:	2b00      	cmp	r3, #0
 8007684:	d0f0      	beq.n	8007668 <__gethex+0x350>
 8007686:	f04f 0c00 	mov.w	ip, #0
 800768a:	f8d5 9010 	ldr.w	r9, [r5, #16]
 800768e:	f105 0314 	add.w	r3, r5, #20
 8007692:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 8007696:	eb03 010a 	add.w	r1, r3, sl
 800769a:	4618      	mov	r0, r3
 800769c:	f853 2b04 	ldr.w	r2, [r3], #4
 80076a0:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
 80076a4:	d01c      	beq.n	80076e0 <__gethex+0x3c8>
 80076a6:	3201      	adds	r2, #1
 80076a8:	6002      	str	r2, [r0, #0]
 80076aa:	2f02      	cmp	r7, #2
 80076ac:	f105 0314 	add.w	r3, r5, #20
 80076b0:	d138      	bne.n	8007724 <__gethex+0x40c>
 80076b2:	f8d8 2000 	ldr.w	r2, [r8]
 80076b6:	3a01      	subs	r2, #1
 80076b8:	42b2      	cmp	r2, r6
 80076ba:	d10a      	bne.n	80076d2 <__gethex+0x3ba>
 80076bc:	2201      	movs	r2, #1
 80076be:	1171      	asrs	r1, r6, #5
 80076c0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80076c4:	f006 061f 	and.w	r6, r6, #31
 80076c8:	fa02 f606 	lsl.w	r6, r2, r6
 80076cc:	421e      	tst	r6, r3
 80076ce:	bf18      	it	ne
 80076d0:	4617      	movne	r7, r2
 80076d2:	f047 0720 	orr.w	r7, r7, #32
 80076d6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80076d8:	601d      	str	r5, [r3, #0]
 80076da:	9b06      	ldr	r3, [sp, #24]
 80076dc:	601c      	str	r4, [r3, #0]
 80076de:	e6a3      	b.n	8007428 <__gethex+0x110>
 80076e0:	4299      	cmp	r1, r3
 80076e2:	f843 cc04 	str.w	ip, [r3, #-4]
 80076e6:	d8d8      	bhi.n	800769a <__gethex+0x382>
 80076e8:	68ab      	ldr	r3, [r5, #8]
 80076ea:	4599      	cmp	r9, r3
 80076ec:	db12      	blt.n	8007714 <__gethex+0x3fc>
 80076ee:	6869      	ldr	r1, [r5, #4]
 80076f0:	9802      	ldr	r0, [sp, #8]
 80076f2:	3101      	adds	r1, #1
 80076f4:	f000 f924 	bl	8007940 <_Balloc>
 80076f8:	4683      	mov	fp, r0
 80076fa:	692a      	ldr	r2, [r5, #16]
 80076fc:	f105 010c 	add.w	r1, r5, #12
 8007700:	3202      	adds	r2, #2
 8007702:	0092      	lsls	r2, r2, #2
 8007704:	300c      	adds	r0, #12
 8007706:	f7fd f9ff 	bl	8004b08 <memcpy>
 800770a:	4629      	mov	r1, r5
 800770c:	9802      	ldr	r0, [sp, #8]
 800770e:	f000 f94b 	bl	80079a8 <_Bfree>
 8007712:	465d      	mov	r5, fp
 8007714:	692b      	ldr	r3, [r5, #16]
 8007716:	1c5a      	adds	r2, r3, #1
 8007718:	612a      	str	r2, [r5, #16]
 800771a:	2201      	movs	r2, #1
 800771c:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8007720:	615a      	str	r2, [r3, #20]
 8007722:	e7c2      	b.n	80076aa <__gethex+0x392>
 8007724:	692a      	ldr	r2, [r5, #16]
 8007726:	454a      	cmp	r2, r9
 8007728:	dd0b      	ble.n	8007742 <__gethex+0x42a>
 800772a:	2101      	movs	r1, #1
 800772c:	4628      	mov	r0, r5
 800772e:	f7ff fda3 	bl	8007278 <rshift>
 8007732:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8007736:	3401      	adds	r4, #1
 8007738:	42a3      	cmp	r3, r4
 800773a:	f6ff aed8 	blt.w	80074ee <__gethex+0x1d6>
 800773e:	2701      	movs	r7, #1
 8007740:	e7c7      	b.n	80076d2 <__gethex+0x3ba>
 8007742:	f016 061f 	ands.w	r6, r6, #31
 8007746:	d0fa      	beq.n	800773e <__gethex+0x426>
 8007748:	449a      	add	sl, r3
 800774a:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 800774e:	f000 f9bb 	bl	8007ac8 <__hi0bits>
 8007752:	f1c6 0620 	rsb	r6, r6, #32
 8007756:	42b0      	cmp	r0, r6
 8007758:	dbe7      	blt.n	800772a <__gethex+0x412>
 800775a:	e7f0      	b.n	800773e <__gethex+0x426>

0800775c <L_shift>:
 800775c:	f1c2 0208 	rsb	r2, r2, #8
 8007760:	0092      	lsls	r2, r2, #2
 8007762:	b570      	push	{r4, r5, r6, lr}
 8007764:	f1c2 0620 	rsb	r6, r2, #32
 8007768:	6843      	ldr	r3, [r0, #4]
 800776a:	6804      	ldr	r4, [r0, #0]
 800776c:	fa03 f506 	lsl.w	r5, r3, r6
 8007770:	432c      	orrs	r4, r5
 8007772:	40d3      	lsrs	r3, r2
 8007774:	6004      	str	r4, [r0, #0]
 8007776:	f840 3f04 	str.w	r3, [r0, #4]!
 800777a:	4288      	cmp	r0, r1
 800777c:	d3f4      	bcc.n	8007768 <L_shift+0xc>
 800777e:	bd70      	pop	{r4, r5, r6, pc}

08007780 <__match>:
 8007780:	b530      	push	{r4, r5, lr}
 8007782:	6803      	ldr	r3, [r0, #0]
 8007784:	3301      	adds	r3, #1
 8007786:	f811 4b01 	ldrb.w	r4, [r1], #1
 800778a:	b914      	cbnz	r4, 8007792 <__match+0x12>
 800778c:	6003      	str	r3, [r0, #0]
 800778e:	2001      	movs	r0, #1
 8007790:	bd30      	pop	{r4, r5, pc}
 8007792:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007796:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800779a:	2d19      	cmp	r5, #25
 800779c:	bf98      	it	ls
 800779e:	3220      	addls	r2, #32
 80077a0:	42a2      	cmp	r2, r4
 80077a2:	d0f0      	beq.n	8007786 <__match+0x6>
 80077a4:	2000      	movs	r0, #0
 80077a6:	e7f3      	b.n	8007790 <__match+0x10>

080077a8 <__hexnan>:
 80077a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80077ac:	2500      	movs	r5, #0
 80077ae:	680b      	ldr	r3, [r1, #0]
 80077b0:	4682      	mov	sl, r0
 80077b2:	115f      	asrs	r7, r3, #5
 80077b4:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 80077b8:	f013 031f 	ands.w	r3, r3, #31
 80077bc:	bf18      	it	ne
 80077be:	3704      	addne	r7, #4
 80077c0:	1f3e      	subs	r6, r7, #4
 80077c2:	4690      	mov	r8, r2
 80077c4:	46b1      	mov	r9, r6
 80077c6:	4634      	mov	r4, r6
 80077c8:	46ab      	mov	fp, r5
 80077ca:	b087      	sub	sp, #28
 80077cc:	6801      	ldr	r1, [r0, #0]
 80077ce:	9301      	str	r3, [sp, #4]
 80077d0:	f847 5c04 	str.w	r5, [r7, #-4]
 80077d4:	9502      	str	r5, [sp, #8]
 80077d6:	784a      	ldrb	r2, [r1, #1]
 80077d8:	1c4b      	adds	r3, r1, #1
 80077da:	9303      	str	r3, [sp, #12]
 80077dc:	b342      	cbz	r2, 8007830 <__hexnan+0x88>
 80077de:	4610      	mov	r0, r2
 80077e0:	9105      	str	r1, [sp, #20]
 80077e2:	9204      	str	r2, [sp, #16]
 80077e4:	f7ff fd83 	bl	80072ee <__hexdig_fun>
 80077e8:	2800      	cmp	r0, #0
 80077ea:	d143      	bne.n	8007874 <__hexnan+0xcc>
 80077ec:	9a04      	ldr	r2, [sp, #16]
 80077ee:	9905      	ldr	r1, [sp, #20]
 80077f0:	2a20      	cmp	r2, #32
 80077f2:	d818      	bhi.n	8007826 <__hexnan+0x7e>
 80077f4:	9b02      	ldr	r3, [sp, #8]
 80077f6:	459b      	cmp	fp, r3
 80077f8:	dd13      	ble.n	8007822 <__hexnan+0x7a>
 80077fa:	454c      	cmp	r4, r9
 80077fc:	d206      	bcs.n	800780c <__hexnan+0x64>
 80077fe:	2d07      	cmp	r5, #7
 8007800:	dc04      	bgt.n	800780c <__hexnan+0x64>
 8007802:	462a      	mov	r2, r5
 8007804:	4649      	mov	r1, r9
 8007806:	4620      	mov	r0, r4
 8007808:	f7ff ffa8 	bl	800775c <L_shift>
 800780c:	4544      	cmp	r4, r8
 800780e:	d944      	bls.n	800789a <__hexnan+0xf2>
 8007810:	2300      	movs	r3, #0
 8007812:	f1a4 0904 	sub.w	r9, r4, #4
 8007816:	f844 3c04 	str.w	r3, [r4, #-4]
 800781a:	461d      	mov	r5, r3
 800781c:	464c      	mov	r4, r9
 800781e:	f8cd b008 	str.w	fp, [sp, #8]
 8007822:	9903      	ldr	r1, [sp, #12]
 8007824:	e7d7      	b.n	80077d6 <__hexnan+0x2e>
 8007826:	2a29      	cmp	r2, #41	; 0x29
 8007828:	d14a      	bne.n	80078c0 <__hexnan+0x118>
 800782a:	3102      	adds	r1, #2
 800782c:	f8ca 1000 	str.w	r1, [sl]
 8007830:	f1bb 0f00 	cmp.w	fp, #0
 8007834:	d044      	beq.n	80078c0 <__hexnan+0x118>
 8007836:	454c      	cmp	r4, r9
 8007838:	d206      	bcs.n	8007848 <__hexnan+0xa0>
 800783a:	2d07      	cmp	r5, #7
 800783c:	dc04      	bgt.n	8007848 <__hexnan+0xa0>
 800783e:	462a      	mov	r2, r5
 8007840:	4649      	mov	r1, r9
 8007842:	4620      	mov	r0, r4
 8007844:	f7ff ff8a 	bl	800775c <L_shift>
 8007848:	4544      	cmp	r4, r8
 800784a:	d928      	bls.n	800789e <__hexnan+0xf6>
 800784c:	4643      	mov	r3, r8
 800784e:	f854 2b04 	ldr.w	r2, [r4], #4
 8007852:	42a6      	cmp	r6, r4
 8007854:	f843 2b04 	str.w	r2, [r3], #4
 8007858:	d2f9      	bcs.n	800784e <__hexnan+0xa6>
 800785a:	2200      	movs	r2, #0
 800785c:	f843 2b04 	str.w	r2, [r3], #4
 8007860:	429e      	cmp	r6, r3
 8007862:	d2fb      	bcs.n	800785c <__hexnan+0xb4>
 8007864:	6833      	ldr	r3, [r6, #0]
 8007866:	b91b      	cbnz	r3, 8007870 <__hexnan+0xc8>
 8007868:	4546      	cmp	r6, r8
 800786a:	d127      	bne.n	80078bc <__hexnan+0x114>
 800786c:	2301      	movs	r3, #1
 800786e:	6033      	str	r3, [r6, #0]
 8007870:	2005      	movs	r0, #5
 8007872:	e026      	b.n	80078c2 <__hexnan+0x11a>
 8007874:	3501      	adds	r5, #1
 8007876:	2d08      	cmp	r5, #8
 8007878:	f10b 0b01 	add.w	fp, fp, #1
 800787c:	dd06      	ble.n	800788c <__hexnan+0xe4>
 800787e:	4544      	cmp	r4, r8
 8007880:	d9cf      	bls.n	8007822 <__hexnan+0x7a>
 8007882:	2300      	movs	r3, #0
 8007884:	2501      	movs	r5, #1
 8007886:	f844 3c04 	str.w	r3, [r4, #-4]
 800788a:	3c04      	subs	r4, #4
 800788c:	6822      	ldr	r2, [r4, #0]
 800788e:	f000 000f 	and.w	r0, r0, #15
 8007892:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8007896:	6020      	str	r0, [r4, #0]
 8007898:	e7c3      	b.n	8007822 <__hexnan+0x7a>
 800789a:	2508      	movs	r5, #8
 800789c:	e7c1      	b.n	8007822 <__hexnan+0x7a>
 800789e:	9b01      	ldr	r3, [sp, #4]
 80078a0:	2b00      	cmp	r3, #0
 80078a2:	d0df      	beq.n	8007864 <__hexnan+0xbc>
 80078a4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80078a8:	f1c3 0320 	rsb	r3, r3, #32
 80078ac:	fa22 f303 	lsr.w	r3, r2, r3
 80078b0:	f857 2c04 	ldr.w	r2, [r7, #-4]
 80078b4:	401a      	ands	r2, r3
 80078b6:	f847 2c04 	str.w	r2, [r7, #-4]
 80078ba:	e7d3      	b.n	8007864 <__hexnan+0xbc>
 80078bc:	3e04      	subs	r6, #4
 80078be:	e7d1      	b.n	8007864 <__hexnan+0xbc>
 80078c0:	2004      	movs	r0, #4
 80078c2:	b007      	add	sp, #28
 80078c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080078c8 <__locale_ctype_ptr_l>:
 80078c8:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 80078cc:	4770      	bx	lr

080078ce <__localeconv_l>:
 80078ce:	30f0      	adds	r0, #240	; 0xf0
 80078d0:	4770      	bx	lr
	...

080078d4 <_localeconv_r>:
 80078d4:	4b04      	ldr	r3, [pc, #16]	; (80078e8 <_localeconv_r+0x14>)
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	6a18      	ldr	r0, [r3, #32]
 80078da:	4b04      	ldr	r3, [pc, #16]	; (80078ec <_localeconv_r+0x18>)
 80078dc:	2800      	cmp	r0, #0
 80078de:	bf08      	it	eq
 80078e0:	4618      	moveq	r0, r3
 80078e2:	30f0      	adds	r0, #240	; 0xf0
 80078e4:	4770      	bx	lr
 80078e6:	bf00      	nop
 80078e8:	20000018 	.word	0x20000018
 80078ec:	2000007c 	.word	0x2000007c

080078f0 <malloc>:
 80078f0:	4b02      	ldr	r3, [pc, #8]	; (80078fc <malloc+0xc>)
 80078f2:	4601      	mov	r1, r0
 80078f4:	6818      	ldr	r0, [r3, #0]
 80078f6:	f000 bc75 	b.w	80081e4 <_malloc_r>
 80078fa:	bf00      	nop
 80078fc:	20000018 	.word	0x20000018

08007900 <__ascii_mbtowc>:
 8007900:	b082      	sub	sp, #8
 8007902:	b901      	cbnz	r1, 8007906 <__ascii_mbtowc+0x6>
 8007904:	a901      	add	r1, sp, #4
 8007906:	b142      	cbz	r2, 800791a <__ascii_mbtowc+0x1a>
 8007908:	b14b      	cbz	r3, 800791e <__ascii_mbtowc+0x1e>
 800790a:	7813      	ldrb	r3, [r2, #0]
 800790c:	600b      	str	r3, [r1, #0]
 800790e:	7812      	ldrb	r2, [r2, #0]
 8007910:	1c10      	adds	r0, r2, #0
 8007912:	bf18      	it	ne
 8007914:	2001      	movne	r0, #1
 8007916:	b002      	add	sp, #8
 8007918:	4770      	bx	lr
 800791a:	4610      	mov	r0, r2
 800791c:	e7fb      	b.n	8007916 <__ascii_mbtowc+0x16>
 800791e:	f06f 0001 	mvn.w	r0, #1
 8007922:	e7f8      	b.n	8007916 <__ascii_mbtowc+0x16>

08007924 <memchr>:
 8007924:	b510      	push	{r4, lr}
 8007926:	b2c9      	uxtb	r1, r1
 8007928:	4402      	add	r2, r0
 800792a:	4290      	cmp	r0, r2
 800792c:	4603      	mov	r3, r0
 800792e:	d101      	bne.n	8007934 <memchr+0x10>
 8007930:	2300      	movs	r3, #0
 8007932:	e003      	b.n	800793c <memchr+0x18>
 8007934:	781c      	ldrb	r4, [r3, #0]
 8007936:	3001      	adds	r0, #1
 8007938:	428c      	cmp	r4, r1
 800793a:	d1f6      	bne.n	800792a <memchr+0x6>
 800793c:	4618      	mov	r0, r3
 800793e:	bd10      	pop	{r4, pc}

08007940 <_Balloc>:
 8007940:	b570      	push	{r4, r5, r6, lr}
 8007942:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8007944:	4604      	mov	r4, r0
 8007946:	460e      	mov	r6, r1
 8007948:	b93d      	cbnz	r5, 800795a <_Balloc+0x1a>
 800794a:	2010      	movs	r0, #16
 800794c:	f7ff ffd0 	bl	80078f0 <malloc>
 8007950:	6260      	str	r0, [r4, #36]	; 0x24
 8007952:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8007956:	6005      	str	r5, [r0, #0]
 8007958:	60c5      	str	r5, [r0, #12]
 800795a:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800795c:	68eb      	ldr	r3, [r5, #12]
 800795e:	b183      	cbz	r3, 8007982 <_Balloc+0x42>
 8007960:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007962:	68db      	ldr	r3, [r3, #12]
 8007964:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8007968:	b9b8      	cbnz	r0, 800799a <_Balloc+0x5a>
 800796a:	2101      	movs	r1, #1
 800796c:	fa01 f506 	lsl.w	r5, r1, r6
 8007970:	1d6a      	adds	r2, r5, #5
 8007972:	0092      	lsls	r2, r2, #2
 8007974:	4620      	mov	r0, r4
 8007976:	f000 fbdb 	bl	8008130 <_calloc_r>
 800797a:	b160      	cbz	r0, 8007996 <_Balloc+0x56>
 800797c:	e9c0 6501 	strd	r6, r5, [r0, #4]
 8007980:	e00e      	b.n	80079a0 <_Balloc+0x60>
 8007982:	2221      	movs	r2, #33	; 0x21
 8007984:	2104      	movs	r1, #4
 8007986:	4620      	mov	r0, r4
 8007988:	f000 fbd2 	bl	8008130 <_calloc_r>
 800798c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800798e:	60e8      	str	r0, [r5, #12]
 8007990:	68db      	ldr	r3, [r3, #12]
 8007992:	2b00      	cmp	r3, #0
 8007994:	d1e4      	bne.n	8007960 <_Balloc+0x20>
 8007996:	2000      	movs	r0, #0
 8007998:	bd70      	pop	{r4, r5, r6, pc}
 800799a:	6802      	ldr	r2, [r0, #0]
 800799c:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 80079a0:	2300      	movs	r3, #0
 80079a2:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80079a6:	e7f7      	b.n	8007998 <_Balloc+0x58>

080079a8 <_Bfree>:
 80079a8:	b570      	push	{r4, r5, r6, lr}
 80079aa:	6a44      	ldr	r4, [r0, #36]	; 0x24
 80079ac:	4606      	mov	r6, r0
 80079ae:	460d      	mov	r5, r1
 80079b0:	b93c      	cbnz	r4, 80079c2 <_Bfree+0x1a>
 80079b2:	2010      	movs	r0, #16
 80079b4:	f7ff ff9c 	bl	80078f0 <malloc>
 80079b8:	6270      	str	r0, [r6, #36]	; 0x24
 80079ba:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80079be:	6004      	str	r4, [r0, #0]
 80079c0:	60c4      	str	r4, [r0, #12]
 80079c2:	b13d      	cbz	r5, 80079d4 <_Bfree+0x2c>
 80079c4:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80079c6:	686a      	ldr	r2, [r5, #4]
 80079c8:	68db      	ldr	r3, [r3, #12]
 80079ca:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80079ce:	6029      	str	r1, [r5, #0]
 80079d0:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 80079d4:	bd70      	pop	{r4, r5, r6, pc}

080079d6 <__multadd>:
 80079d6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80079da:	461f      	mov	r7, r3
 80079dc:	4606      	mov	r6, r0
 80079de:	460c      	mov	r4, r1
 80079e0:	2300      	movs	r3, #0
 80079e2:	690d      	ldr	r5, [r1, #16]
 80079e4:	f101 0c14 	add.w	ip, r1, #20
 80079e8:	f8dc 0000 	ldr.w	r0, [ip]
 80079ec:	3301      	adds	r3, #1
 80079ee:	b281      	uxth	r1, r0
 80079f0:	fb02 7101 	mla	r1, r2, r1, r7
 80079f4:	0c00      	lsrs	r0, r0, #16
 80079f6:	0c0f      	lsrs	r7, r1, #16
 80079f8:	fb02 7000 	mla	r0, r2, r0, r7
 80079fc:	b289      	uxth	r1, r1
 80079fe:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8007a02:	429d      	cmp	r5, r3
 8007a04:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8007a08:	f84c 1b04 	str.w	r1, [ip], #4
 8007a0c:	dcec      	bgt.n	80079e8 <__multadd+0x12>
 8007a0e:	b1d7      	cbz	r7, 8007a46 <__multadd+0x70>
 8007a10:	68a3      	ldr	r3, [r4, #8]
 8007a12:	42ab      	cmp	r3, r5
 8007a14:	dc12      	bgt.n	8007a3c <__multadd+0x66>
 8007a16:	6861      	ldr	r1, [r4, #4]
 8007a18:	4630      	mov	r0, r6
 8007a1a:	3101      	adds	r1, #1
 8007a1c:	f7ff ff90 	bl	8007940 <_Balloc>
 8007a20:	4680      	mov	r8, r0
 8007a22:	6922      	ldr	r2, [r4, #16]
 8007a24:	f104 010c 	add.w	r1, r4, #12
 8007a28:	3202      	adds	r2, #2
 8007a2a:	0092      	lsls	r2, r2, #2
 8007a2c:	300c      	adds	r0, #12
 8007a2e:	f7fd f86b 	bl	8004b08 <memcpy>
 8007a32:	4621      	mov	r1, r4
 8007a34:	4630      	mov	r0, r6
 8007a36:	f7ff ffb7 	bl	80079a8 <_Bfree>
 8007a3a:	4644      	mov	r4, r8
 8007a3c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007a40:	3501      	adds	r5, #1
 8007a42:	615f      	str	r7, [r3, #20]
 8007a44:	6125      	str	r5, [r4, #16]
 8007a46:	4620      	mov	r0, r4
 8007a48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08007a4c <__s2b>:
 8007a4c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007a50:	4615      	mov	r5, r2
 8007a52:	2209      	movs	r2, #9
 8007a54:	461f      	mov	r7, r3
 8007a56:	3308      	adds	r3, #8
 8007a58:	460c      	mov	r4, r1
 8007a5a:	fb93 f3f2 	sdiv	r3, r3, r2
 8007a5e:	4606      	mov	r6, r0
 8007a60:	2201      	movs	r2, #1
 8007a62:	2100      	movs	r1, #0
 8007a64:	429a      	cmp	r2, r3
 8007a66:	db20      	blt.n	8007aaa <__s2b+0x5e>
 8007a68:	4630      	mov	r0, r6
 8007a6a:	f7ff ff69 	bl	8007940 <_Balloc>
 8007a6e:	9b08      	ldr	r3, [sp, #32]
 8007a70:	2d09      	cmp	r5, #9
 8007a72:	6143      	str	r3, [r0, #20]
 8007a74:	f04f 0301 	mov.w	r3, #1
 8007a78:	6103      	str	r3, [r0, #16]
 8007a7a:	dd19      	ble.n	8007ab0 <__s2b+0x64>
 8007a7c:	f104 0809 	add.w	r8, r4, #9
 8007a80:	46c1      	mov	r9, r8
 8007a82:	442c      	add	r4, r5
 8007a84:	f819 3b01 	ldrb.w	r3, [r9], #1
 8007a88:	4601      	mov	r1, r0
 8007a8a:	3b30      	subs	r3, #48	; 0x30
 8007a8c:	220a      	movs	r2, #10
 8007a8e:	4630      	mov	r0, r6
 8007a90:	f7ff ffa1 	bl	80079d6 <__multadd>
 8007a94:	45a1      	cmp	r9, r4
 8007a96:	d1f5      	bne.n	8007a84 <__s2b+0x38>
 8007a98:	eb08 0405 	add.w	r4, r8, r5
 8007a9c:	3c08      	subs	r4, #8
 8007a9e:	1b2d      	subs	r5, r5, r4
 8007aa0:	1963      	adds	r3, r4, r5
 8007aa2:	42bb      	cmp	r3, r7
 8007aa4:	db07      	blt.n	8007ab6 <__s2b+0x6a>
 8007aa6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007aaa:	0052      	lsls	r2, r2, #1
 8007aac:	3101      	adds	r1, #1
 8007aae:	e7d9      	b.n	8007a64 <__s2b+0x18>
 8007ab0:	340a      	adds	r4, #10
 8007ab2:	2509      	movs	r5, #9
 8007ab4:	e7f3      	b.n	8007a9e <__s2b+0x52>
 8007ab6:	f814 3b01 	ldrb.w	r3, [r4], #1
 8007aba:	4601      	mov	r1, r0
 8007abc:	3b30      	subs	r3, #48	; 0x30
 8007abe:	220a      	movs	r2, #10
 8007ac0:	4630      	mov	r0, r6
 8007ac2:	f7ff ff88 	bl	80079d6 <__multadd>
 8007ac6:	e7eb      	b.n	8007aa0 <__s2b+0x54>

08007ac8 <__hi0bits>:
 8007ac8:	0c02      	lsrs	r2, r0, #16
 8007aca:	0412      	lsls	r2, r2, #16
 8007acc:	4603      	mov	r3, r0
 8007ace:	b9b2      	cbnz	r2, 8007afe <__hi0bits+0x36>
 8007ad0:	0403      	lsls	r3, r0, #16
 8007ad2:	2010      	movs	r0, #16
 8007ad4:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8007ad8:	bf04      	itt	eq
 8007ada:	021b      	lsleq	r3, r3, #8
 8007adc:	3008      	addeq	r0, #8
 8007ade:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8007ae2:	bf04      	itt	eq
 8007ae4:	011b      	lsleq	r3, r3, #4
 8007ae6:	3004      	addeq	r0, #4
 8007ae8:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8007aec:	bf04      	itt	eq
 8007aee:	009b      	lsleq	r3, r3, #2
 8007af0:	3002      	addeq	r0, #2
 8007af2:	2b00      	cmp	r3, #0
 8007af4:	db06      	blt.n	8007b04 <__hi0bits+0x3c>
 8007af6:	005b      	lsls	r3, r3, #1
 8007af8:	d503      	bpl.n	8007b02 <__hi0bits+0x3a>
 8007afa:	3001      	adds	r0, #1
 8007afc:	4770      	bx	lr
 8007afe:	2000      	movs	r0, #0
 8007b00:	e7e8      	b.n	8007ad4 <__hi0bits+0xc>
 8007b02:	2020      	movs	r0, #32
 8007b04:	4770      	bx	lr

08007b06 <__lo0bits>:
 8007b06:	6803      	ldr	r3, [r0, #0]
 8007b08:	4601      	mov	r1, r0
 8007b0a:	f013 0207 	ands.w	r2, r3, #7
 8007b0e:	d00b      	beq.n	8007b28 <__lo0bits+0x22>
 8007b10:	07da      	lsls	r2, r3, #31
 8007b12:	d423      	bmi.n	8007b5c <__lo0bits+0x56>
 8007b14:	0798      	lsls	r0, r3, #30
 8007b16:	bf49      	itett	mi
 8007b18:	085b      	lsrmi	r3, r3, #1
 8007b1a:	089b      	lsrpl	r3, r3, #2
 8007b1c:	2001      	movmi	r0, #1
 8007b1e:	600b      	strmi	r3, [r1, #0]
 8007b20:	bf5c      	itt	pl
 8007b22:	600b      	strpl	r3, [r1, #0]
 8007b24:	2002      	movpl	r0, #2
 8007b26:	4770      	bx	lr
 8007b28:	b298      	uxth	r0, r3
 8007b2a:	b9a8      	cbnz	r0, 8007b58 <__lo0bits+0x52>
 8007b2c:	2010      	movs	r0, #16
 8007b2e:	0c1b      	lsrs	r3, r3, #16
 8007b30:	f013 0fff 	tst.w	r3, #255	; 0xff
 8007b34:	bf04      	itt	eq
 8007b36:	0a1b      	lsreq	r3, r3, #8
 8007b38:	3008      	addeq	r0, #8
 8007b3a:	071a      	lsls	r2, r3, #28
 8007b3c:	bf04      	itt	eq
 8007b3e:	091b      	lsreq	r3, r3, #4
 8007b40:	3004      	addeq	r0, #4
 8007b42:	079a      	lsls	r2, r3, #30
 8007b44:	bf04      	itt	eq
 8007b46:	089b      	lsreq	r3, r3, #2
 8007b48:	3002      	addeq	r0, #2
 8007b4a:	07da      	lsls	r2, r3, #31
 8007b4c:	d402      	bmi.n	8007b54 <__lo0bits+0x4e>
 8007b4e:	085b      	lsrs	r3, r3, #1
 8007b50:	d006      	beq.n	8007b60 <__lo0bits+0x5a>
 8007b52:	3001      	adds	r0, #1
 8007b54:	600b      	str	r3, [r1, #0]
 8007b56:	4770      	bx	lr
 8007b58:	4610      	mov	r0, r2
 8007b5a:	e7e9      	b.n	8007b30 <__lo0bits+0x2a>
 8007b5c:	2000      	movs	r0, #0
 8007b5e:	4770      	bx	lr
 8007b60:	2020      	movs	r0, #32
 8007b62:	4770      	bx	lr

08007b64 <__i2b>:
 8007b64:	b510      	push	{r4, lr}
 8007b66:	460c      	mov	r4, r1
 8007b68:	2101      	movs	r1, #1
 8007b6a:	f7ff fee9 	bl	8007940 <_Balloc>
 8007b6e:	2201      	movs	r2, #1
 8007b70:	6144      	str	r4, [r0, #20]
 8007b72:	6102      	str	r2, [r0, #16]
 8007b74:	bd10      	pop	{r4, pc}

08007b76 <__multiply>:
 8007b76:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b7a:	4614      	mov	r4, r2
 8007b7c:	690a      	ldr	r2, [r1, #16]
 8007b7e:	6923      	ldr	r3, [r4, #16]
 8007b80:	4688      	mov	r8, r1
 8007b82:	429a      	cmp	r2, r3
 8007b84:	bfbe      	ittt	lt
 8007b86:	460b      	movlt	r3, r1
 8007b88:	46a0      	movlt	r8, r4
 8007b8a:	461c      	movlt	r4, r3
 8007b8c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8007b90:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8007b94:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8007b98:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8007b9c:	eb07 0609 	add.w	r6, r7, r9
 8007ba0:	42b3      	cmp	r3, r6
 8007ba2:	bfb8      	it	lt
 8007ba4:	3101      	addlt	r1, #1
 8007ba6:	f7ff fecb 	bl	8007940 <_Balloc>
 8007baa:	f100 0514 	add.w	r5, r0, #20
 8007bae:	462b      	mov	r3, r5
 8007bb0:	2200      	movs	r2, #0
 8007bb2:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8007bb6:	4573      	cmp	r3, lr
 8007bb8:	d316      	bcc.n	8007be8 <__multiply+0x72>
 8007bba:	f104 0214 	add.w	r2, r4, #20
 8007bbe:	f108 0114 	add.w	r1, r8, #20
 8007bc2:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8007bc6:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8007bca:	9300      	str	r3, [sp, #0]
 8007bcc:	9b00      	ldr	r3, [sp, #0]
 8007bce:	9201      	str	r2, [sp, #4]
 8007bd0:	4293      	cmp	r3, r2
 8007bd2:	d80c      	bhi.n	8007bee <__multiply+0x78>
 8007bd4:	2e00      	cmp	r6, #0
 8007bd6:	dd03      	ble.n	8007be0 <__multiply+0x6a>
 8007bd8:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8007bdc:	2b00      	cmp	r3, #0
 8007bde:	d05d      	beq.n	8007c9c <__multiply+0x126>
 8007be0:	6106      	str	r6, [r0, #16]
 8007be2:	b003      	add	sp, #12
 8007be4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007be8:	f843 2b04 	str.w	r2, [r3], #4
 8007bec:	e7e3      	b.n	8007bb6 <__multiply+0x40>
 8007bee:	f8b2 b000 	ldrh.w	fp, [r2]
 8007bf2:	f1bb 0f00 	cmp.w	fp, #0
 8007bf6:	d023      	beq.n	8007c40 <__multiply+0xca>
 8007bf8:	4689      	mov	r9, r1
 8007bfa:	46ac      	mov	ip, r5
 8007bfc:	f04f 0800 	mov.w	r8, #0
 8007c00:	f859 4b04 	ldr.w	r4, [r9], #4
 8007c04:	f8dc a000 	ldr.w	sl, [ip]
 8007c08:	b2a3      	uxth	r3, r4
 8007c0a:	fa1f fa8a 	uxth.w	sl, sl
 8007c0e:	fb0b a303 	mla	r3, fp, r3, sl
 8007c12:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8007c16:	f8dc 4000 	ldr.w	r4, [ip]
 8007c1a:	4443      	add	r3, r8
 8007c1c:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8007c20:	fb0b 840a 	mla	r4, fp, sl, r8
 8007c24:	46e2      	mov	sl, ip
 8007c26:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8007c2a:	b29b      	uxth	r3, r3
 8007c2c:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8007c30:	454f      	cmp	r7, r9
 8007c32:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8007c36:	f84a 3b04 	str.w	r3, [sl], #4
 8007c3a:	d82b      	bhi.n	8007c94 <__multiply+0x11e>
 8007c3c:	f8cc 8004 	str.w	r8, [ip, #4]
 8007c40:	9b01      	ldr	r3, [sp, #4]
 8007c42:	3204      	adds	r2, #4
 8007c44:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8007c48:	f1ba 0f00 	cmp.w	sl, #0
 8007c4c:	d020      	beq.n	8007c90 <__multiply+0x11a>
 8007c4e:	4689      	mov	r9, r1
 8007c50:	46a8      	mov	r8, r5
 8007c52:	f04f 0b00 	mov.w	fp, #0
 8007c56:	682b      	ldr	r3, [r5, #0]
 8007c58:	f8b9 c000 	ldrh.w	ip, [r9]
 8007c5c:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8007c60:	b29b      	uxth	r3, r3
 8007c62:	fb0a 440c 	mla	r4, sl, ip, r4
 8007c66:	46c4      	mov	ip, r8
 8007c68:	445c      	add	r4, fp
 8007c6a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8007c6e:	f84c 3b04 	str.w	r3, [ip], #4
 8007c72:	f859 3b04 	ldr.w	r3, [r9], #4
 8007c76:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8007c7a:	0c1b      	lsrs	r3, r3, #16
 8007c7c:	fb0a b303 	mla	r3, sl, r3, fp
 8007c80:	454f      	cmp	r7, r9
 8007c82:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8007c86:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8007c8a:	d805      	bhi.n	8007c98 <__multiply+0x122>
 8007c8c:	f8c8 3004 	str.w	r3, [r8, #4]
 8007c90:	3504      	adds	r5, #4
 8007c92:	e79b      	b.n	8007bcc <__multiply+0x56>
 8007c94:	46d4      	mov	ip, sl
 8007c96:	e7b3      	b.n	8007c00 <__multiply+0x8a>
 8007c98:	46e0      	mov	r8, ip
 8007c9a:	e7dd      	b.n	8007c58 <__multiply+0xe2>
 8007c9c:	3e01      	subs	r6, #1
 8007c9e:	e799      	b.n	8007bd4 <__multiply+0x5e>

08007ca0 <__pow5mult>:
 8007ca0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007ca4:	4615      	mov	r5, r2
 8007ca6:	f012 0203 	ands.w	r2, r2, #3
 8007caa:	4606      	mov	r6, r0
 8007cac:	460f      	mov	r7, r1
 8007cae:	d007      	beq.n	8007cc0 <__pow5mult+0x20>
 8007cb0:	4c21      	ldr	r4, [pc, #132]	; (8007d38 <__pow5mult+0x98>)
 8007cb2:	3a01      	subs	r2, #1
 8007cb4:	2300      	movs	r3, #0
 8007cb6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007cba:	f7ff fe8c 	bl	80079d6 <__multadd>
 8007cbe:	4607      	mov	r7, r0
 8007cc0:	10ad      	asrs	r5, r5, #2
 8007cc2:	d035      	beq.n	8007d30 <__pow5mult+0x90>
 8007cc4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8007cc6:	b93c      	cbnz	r4, 8007cd8 <__pow5mult+0x38>
 8007cc8:	2010      	movs	r0, #16
 8007cca:	f7ff fe11 	bl	80078f0 <malloc>
 8007cce:	6270      	str	r0, [r6, #36]	; 0x24
 8007cd0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007cd4:	6004      	str	r4, [r0, #0]
 8007cd6:	60c4      	str	r4, [r0, #12]
 8007cd8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8007cdc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007ce0:	b94c      	cbnz	r4, 8007cf6 <__pow5mult+0x56>
 8007ce2:	f240 2171 	movw	r1, #625	; 0x271
 8007ce6:	4630      	mov	r0, r6
 8007ce8:	f7ff ff3c 	bl	8007b64 <__i2b>
 8007cec:	2300      	movs	r3, #0
 8007cee:	4604      	mov	r4, r0
 8007cf0:	f8c8 0008 	str.w	r0, [r8, #8]
 8007cf4:	6003      	str	r3, [r0, #0]
 8007cf6:	f04f 0800 	mov.w	r8, #0
 8007cfa:	07eb      	lsls	r3, r5, #31
 8007cfc:	d50a      	bpl.n	8007d14 <__pow5mult+0x74>
 8007cfe:	4639      	mov	r1, r7
 8007d00:	4622      	mov	r2, r4
 8007d02:	4630      	mov	r0, r6
 8007d04:	f7ff ff37 	bl	8007b76 <__multiply>
 8007d08:	4681      	mov	r9, r0
 8007d0a:	4639      	mov	r1, r7
 8007d0c:	4630      	mov	r0, r6
 8007d0e:	f7ff fe4b 	bl	80079a8 <_Bfree>
 8007d12:	464f      	mov	r7, r9
 8007d14:	106d      	asrs	r5, r5, #1
 8007d16:	d00b      	beq.n	8007d30 <__pow5mult+0x90>
 8007d18:	6820      	ldr	r0, [r4, #0]
 8007d1a:	b938      	cbnz	r0, 8007d2c <__pow5mult+0x8c>
 8007d1c:	4622      	mov	r2, r4
 8007d1e:	4621      	mov	r1, r4
 8007d20:	4630      	mov	r0, r6
 8007d22:	f7ff ff28 	bl	8007b76 <__multiply>
 8007d26:	6020      	str	r0, [r4, #0]
 8007d28:	f8c0 8000 	str.w	r8, [r0]
 8007d2c:	4604      	mov	r4, r0
 8007d2e:	e7e4      	b.n	8007cfa <__pow5mult+0x5a>
 8007d30:	4638      	mov	r0, r7
 8007d32:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007d36:	bf00      	nop
 8007d38:	08008eb0 	.word	0x08008eb0

08007d3c <__lshift>:
 8007d3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007d40:	460c      	mov	r4, r1
 8007d42:	4607      	mov	r7, r0
 8007d44:	4616      	mov	r6, r2
 8007d46:	6923      	ldr	r3, [r4, #16]
 8007d48:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007d4c:	eb0a 0903 	add.w	r9, sl, r3
 8007d50:	6849      	ldr	r1, [r1, #4]
 8007d52:	68a3      	ldr	r3, [r4, #8]
 8007d54:	f109 0501 	add.w	r5, r9, #1
 8007d58:	42ab      	cmp	r3, r5
 8007d5a:	db32      	blt.n	8007dc2 <__lshift+0x86>
 8007d5c:	4638      	mov	r0, r7
 8007d5e:	f7ff fdef 	bl	8007940 <_Balloc>
 8007d62:	2300      	movs	r3, #0
 8007d64:	4680      	mov	r8, r0
 8007d66:	461a      	mov	r2, r3
 8007d68:	f100 0114 	add.w	r1, r0, #20
 8007d6c:	4553      	cmp	r3, sl
 8007d6e:	db2b      	blt.n	8007dc8 <__lshift+0x8c>
 8007d70:	6920      	ldr	r0, [r4, #16]
 8007d72:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007d76:	f104 0314 	add.w	r3, r4, #20
 8007d7a:	f016 021f 	ands.w	r2, r6, #31
 8007d7e:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007d82:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8007d86:	d025      	beq.n	8007dd4 <__lshift+0x98>
 8007d88:	2000      	movs	r0, #0
 8007d8a:	f1c2 0e20 	rsb	lr, r2, #32
 8007d8e:	468a      	mov	sl, r1
 8007d90:	681e      	ldr	r6, [r3, #0]
 8007d92:	4096      	lsls	r6, r2
 8007d94:	4330      	orrs	r0, r6
 8007d96:	f84a 0b04 	str.w	r0, [sl], #4
 8007d9a:	f853 0b04 	ldr.w	r0, [r3], #4
 8007d9e:	459c      	cmp	ip, r3
 8007da0:	fa20 f00e 	lsr.w	r0, r0, lr
 8007da4:	d814      	bhi.n	8007dd0 <__lshift+0x94>
 8007da6:	6048      	str	r0, [r1, #4]
 8007da8:	b108      	cbz	r0, 8007dae <__lshift+0x72>
 8007daa:	f109 0502 	add.w	r5, r9, #2
 8007dae:	3d01      	subs	r5, #1
 8007db0:	4638      	mov	r0, r7
 8007db2:	f8c8 5010 	str.w	r5, [r8, #16]
 8007db6:	4621      	mov	r1, r4
 8007db8:	f7ff fdf6 	bl	80079a8 <_Bfree>
 8007dbc:	4640      	mov	r0, r8
 8007dbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007dc2:	3101      	adds	r1, #1
 8007dc4:	005b      	lsls	r3, r3, #1
 8007dc6:	e7c7      	b.n	8007d58 <__lshift+0x1c>
 8007dc8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8007dcc:	3301      	adds	r3, #1
 8007dce:	e7cd      	b.n	8007d6c <__lshift+0x30>
 8007dd0:	4651      	mov	r1, sl
 8007dd2:	e7dc      	b.n	8007d8e <__lshift+0x52>
 8007dd4:	3904      	subs	r1, #4
 8007dd6:	f853 2b04 	ldr.w	r2, [r3], #4
 8007dda:	459c      	cmp	ip, r3
 8007ddc:	f841 2f04 	str.w	r2, [r1, #4]!
 8007de0:	d8f9      	bhi.n	8007dd6 <__lshift+0x9a>
 8007de2:	e7e4      	b.n	8007dae <__lshift+0x72>

08007de4 <__mcmp>:
 8007de4:	6903      	ldr	r3, [r0, #16]
 8007de6:	690a      	ldr	r2, [r1, #16]
 8007de8:	b530      	push	{r4, r5, lr}
 8007dea:	1a9b      	subs	r3, r3, r2
 8007dec:	d10c      	bne.n	8007e08 <__mcmp+0x24>
 8007dee:	0092      	lsls	r2, r2, #2
 8007df0:	3014      	adds	r0, #20
 8007df2:	3114      	adds	r1, #20
 8007df4:	1884      	adds	r4, r0, r2
 8007df6:	4411      	add	r1, r2
 8007df8:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8007dfc:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8007e00:	4295      	cmp	r5, r2
 8007e02:	d003      	beq.n	8007e0c <__mcmp+0x28>
 8007e04:	d305      	bcc.n	8007e12 <__mcmp+0x2e>
 8007e06:	2301      	movs	r3, #1
 8007e08:	4618      	mov	r0, r3
 8007e0a:	bd30      	pop	{r4, r5, pc}
 8007e0c:	42a0      	cmp	r0, r4
 8007e0e:	d3f3      	bcc.n	8007df8 <__mcmp+0x14>
 8007e10:	e7fa      	b.n	8007e08 <__mcmp+0x24>
 8007e12:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007e16:	e7f7      	b.n	8007e08 <__mcmp+0x24>

08007e18 <__mdiff>:
 8007e18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007e1c:	460d      	mov	r5, r1
 8007e1e:	4607      	mov	r7, r0
 8007e20:	4611      	mov	r1, r2
 8007e22:	4628      	mov	r0, r5
 8007e24:	4614      	mov	r4, r2
 8007e26:	f7ff ffdd 	bl	8007de4 <__mcmp>
 8007e2a:	1e06      	subs	r6, r0, #0
 8007e2c:	d108      	bne.n	8007e40 <__mdiff+0x28>
 8007e2e:	4631      	mov	r1, r6
 8007e30:	4638      	mov	r0, r7
 8007e32:	f7ff fd85 	bl	8007940 <_Balloc>
 8007e36:	2301      	movs	r3, #1
 8007e38:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8007e3c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007e40:	bfa4      	itt	ge
 8007e42:	4623      	movge	r3, r4
 8007e44:	462c      	movge	r4, r5
 8007e46:	4638      	mov	r0, r7
 8007e48:	6861      	ldr	r1, [r4, #4]
 8007e4a:	bfa6      	itte	ge
 8007e4c:	461d      	movge	r5, r3
 8007e4e:	2600      	movge	r6, #0
 8007e50:	2601      	movlt	r6, #1
 8007e52:	f7ff fd75 	bl	8007940 <_Balloc>
 8007e56:	f04f 0e00 	mov.w	lr, #0
 8007e5a:	60c6      	str	r6, [r0, #12]
 8007e5c:	692b      	ldr	r3, [r5, #16]
 8007e5e:	6926      	ldr	r6, [r4, #16]
 8007e60:	f104 0214 	add.w	r2, r4, #20
 8007e64:	f105 0914 	add.w	r9, r5, #20
 8007e68:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8007e6c:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8007e70:	f100 0114 	add.w	r1, r0, #20
 8007e74:	f852 ab04 	ldr.w	sl, [r2], #4
 8007e78:	f859 5b04 	ldr.w	r5, [r9], #4
 8007e7c:	fa1f f38a 	uxth.w	r3, sl
 8007e80:	4473      	add	r3, lr
 8007e82:	b2ac      	uxth	r4, r5
 8007e84:	1b1b      	subs	r3, r3, r4
 8007e86:	0c2c      	lsrs	r4, r5, #16
 8007e88:	ebc4 441a 	rsb	r4, r4, sl, lsr #16
 8007e8c:	eb04 4423 	add.w	r4, r4, r3, asr #16
 8007e90:	b29b      	uxth	r3, r3
 8007e92:	ea4f 4e24 	mov.w	lr, r4, asr #16
 8007e96:	45c8      	cmp	r8, r9
 8007e98:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8007e9c:	4694      	mov	ip, r2
 8007e9e:	f841 4b04 	str.w	r4, [r1], #4
 8007ea2:	d8e7      	bhi.n	8007e74 <__mdiff+0x5c>
 8007ea4:	45bc      	cmp	ip, r7
 8007ea6:	d304      	bcc.n	8007eb2 <__mdiff+0x9a>
 8007ea8:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8007eac:	b183      	cbz	r3, 8007ed0 <__mdiff+0xb8>
 8007eae:	6106      	str	r6, [r0, #16]
 8007eb0:	e7c4      	b.n	8007e3c <__mdiff+0x24>
 8007eb2:	f85c 4b04 	ldr.w	r4, [ip], #4
 8007eb6:	b2a2      	uxth	r2, r4
 8007eb8:	4472      	add	r2, lr
 8007eba:	1413      	asrs	r3, r2, #16
 8007ebc:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8007ec0:	b292      	uxth	r2, r2
 8007ec2:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8007ec6:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8007eca:	f841 2b04 	str.w	r2, [r1], #4
 8007ece:	e7e9      	b.n	8007ea4 <__mdiff+0x8c>
 8007ed0:	3e01      	subs	r6, #1
 8007ed2:	e7e9      	b.n	8007ea8 <__mdiff+0x90>

08007ed4 <__ulp>:
 8007ed4:	4b10      	ldr	r3, [pc, #64]	; (8007f18 <__ulp+0x44>)
 8007ed6:	400b      	ands	r3, r1
 8007ed8:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 8007edc:	2b00      	cmp	r3, #0
 8007ede:	dd02      	ble.n	8007ee6 <__ulp+0x12>
 8007ee0:	2000      	movs	r0, #0
 8007ee2:	4619      	mov	r1, r3
 8007ee4:	4770      	bx	lr
 8007ee6:	425b      	negs	r3, r3
 8007ee8:	151b      	asrs	r3, r3, #20
 8007eea:	2b13      	cmp	r3, #19
 8007eec:	f04f 0000 	mov.w	r0, #0
 8007ef0:	f04f 0100 	mov.w	r1, #0
 8007ef4:	dc04      	bgt.n	8007f00 <__ulp+0x2c>
 8007ef6:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8007efa:	fa42 f103 	asr.w	r1, r2, r3
 8007efe:	4770      	bx	lr
 8007f00:	2201      	movs	r2, #1
 8007f02:	3b14      	subs	r3, #20
 8007f04:	2b1e      	cmp	r3, #30
 8007f06:	bfce      	itee	gt
 8007f08:	4613      	movgt	r3, r2
 8007f0a:	f1c3 031f 	rsble	r3, r3, #31
 8007f0e:	fa02 f303 	lslle.w	r3, r2, r3
 8007f12:	4618      	mov	r0, r3
 8007f14:	4770      	bx	lr
 8007f16:	bf00      	nop
 8007f18:	7ff00000 	.word	0x7ff00000

08007f1c <__b2d>:
 8007f1c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007f20:	6907      	ldr	r7, [r0, #16]
 8007f22:	f100 0914 	add.w	r9, r0, #20
 8007f26:	eb09 0787 	add.w	r7, r9, r7, lsl #2
 8007f2a:	f857 6c04 	ldr.w	r6, [r7, #-4]
 8007f2e:	f1a7 0804 	sub.w	r8, r7, #4
 8007f32:	4630      	mov	r0, r6
 8007f34:	f7ff fdc8 	bl	8007ac8 <__hi0bits>
 8007f38:	f1c0 0320 	rsb	r3, r0, #32
 8007f3c:	280a      	cmp	r0, #10
 8007f3e:	600b      	str	r3, [r1, #0]
 8007f40:	491e      	ldr	r1, [pc, #120]	; (8007fbc <__b2d+0xa0>)
 8007f42:	dc17      	bgt.n	8007f74 <__b2d+0x58>
 8007f44:	45c1      	cmp	r9, r8
 8007f46:	bf28      	it	cs
 8007f48:	2200      	movcs	r2, #0
 8007f4a:	f1c0 0c0b 	rsb	ip, r0, #11
 8007f4e:	fa26 f30c 	lsr.w	r3, r6, ip
 8007f52:	bf38      	it	cc
 8007f54:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 8007f58:	ea43 0501 	orr.w	r5, r3, r1
 8007f5c:	f100 0315 	add.w	r3, r0, #21
 8007f60:	fa06 f303 	lsl.w	r3, r6, r3
 8007f64:	fa22 f20c 	lsr.w	r2, r2, ip
 8007f68:	ea43 0402 	orr.w	r4, r3, r2
 8007f6c:	4620      	mov	r0, r4
 8007f6e:	4629      	mov	r1, r5
 8007f70:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007f74:	45c1      	cmp	r9, r8
 8007f76:	bf3a      	itte	cc
 8007f78:	f1a7 0808 	subcc.w	r8, r7, #8
 8007f7c:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 8007f80:	2200      	movcs	r2, #0
 8007f82:	f1b0 030b 	subs.w	r3, r0, #11
 8007f86:	d015      	beq.n	8007fb4 <__b2d+0x98>
 8007f88:	409e      	lsls	r6, r3
 8007f8a:	f1c3 0720 	rsb	r7, r3, #32
 8007f8e:	f046 567f 	orr.w	r6, r6, #1069547520	; 0x3fc00000
 8007f92:	fa22 f107 	lsr.w	r1, r2, r7
 8007f96:	45c8      	cmp	r8, r9
 8007f98:	f446 1640 	orr.w	r6, r6, #3145728	; 0x300000
 8007f9c:	ea46 0501 	orr.w	r5, r6, r1
 8007fa0:	bf94      	ite	ls
 8007fa2:	2100      	movls	r1, #0
 8007fa4:	f858 1c04 	ldrhi.w	r1, [r8, #-4]
 8007fa8:	fa02 f003 	lsl.w	r0, r2, r3
 8007fac:	40f9      	lsrs	r1, r7
 8007fae:	ea40 0401 	orr.w	r4, r0, r1
 8007fb2:	e7db      	b.n	8007f6c <__b2d+0x50>
 8007fb4:	ea46 0501 	orr.w	r5, r6, r1
 8007fb8:	4614      	mov	r4, r2
 8007fba:	e7d7      	b.n	8007f6c <__b2d+0x50>
 8007fbc:	3ff00000 	.word	0x3ff00000

08007fc0 <__d2b>:
 8007fc0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8007fc4:	461c      	mov	r4, r3
 8007fc6:	e9dd 6508 	ldrd	r6, r5, [sp, #32]
 8007fca:	2101      	movs	r1, #1
 8007fcc:	4690      	mov	r8, r2
 8007fce:	f7ff fcb7 	bl	8007940 <_Balloc>
 8007fd2:	f3c4 0213 	ubfx	r2, r4, #0, #20
 8007fd6:	f3c4 540a 	ubfx	r4, r4, #20, #11
 8007fda:	4607      	mov	r7, r0
 8007fdc:	bb34      	cbnz	r4, 800802c <__d2b+0x6c>
 8007fde:	9201      	str	r2, [sp, #4]
 8007fe0:	f1b8 0200 	subs.w	r2, r8, #0
 8007fe4:	d027      	beq.n	8008036 <__d2b+0x76>
 8007fe6:	a802      	add	r0, sp, #8
 8007fe8:	f840 2d08 	str.w	r2, [r0, #-8]!
 8007fec:	f7ff fd8b 	bl	8007b06 <__lo0bits>
 8007ff0:	9900      	ldr	r1, [sp, #0]
 8007ff2:	b1f0      	cbz	r0, 8008032 <__d2b+0x72>
 8007ff4:	9a01      	ldr	r2, [sp, #4]
 8007ff6:	f1c0 0320 	rsb	r3, r0, #32
 8007ffa:	fa02 f303 	lsl.w	r3, r2, r3
 8007ffe:	430b      	orrs	r3, r1
 8008000:	40c2      	lsrs	r2, r0
 8008002:	617b      	str	r3, [r7, #20]
 8008004:	9201      	str	r2, [sp, #4]
 8008006:	9b01      	ldr	r3, [sp, #4]
 8008008:	2b00      	cmp	r3, #0
 800800a:	bf14      	ite	ne
 800800c:	2102      	movne	r1, #2
 800800e:	2101      	moveq	r1, #1
 8008010:	61bb      	str	r3, [r7, #24]
 8008012:	6139      	str	r1, [r7, #16]
 8008014:	b1c4      	cbz	r4, 8008048 <__d2b+0x88>
 8008016:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800801a:	4404      	add	r4, r0
 800801c:	6034      	str	r4, [r6, #0]
 800801e:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8008022:	6028      	str	r0, [r5, #0]
 8008024:	4638      	mov	r0, r7
 8008026:	b002      	add	sp, #8
 8008028:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800802c:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8008030:	e7d5      	b.n	8007fde <__d2b+0x1e>
 8008032:	6179      	str	r1, [r7, #20]
 8008034:	e7e7      	b.n	8008006 <__d2b+0x46>
 8008036:	a801      	add	r0, sp, #4
 8008038:	f7ff fd65 	bl	8007b06 <__lo0bits>
 800803c:	2101      	movs	r1, #1
 800803e:	9b01      	ldr	r3, [sp, #4]
 8008040:	6139      	str	r1, [r7, #16]
 8008042:	617b      	str	r3, [r7, #20]
 8008044:	3020      	adds	r0, #32
 8008046:	e7e5      	b.n	8008014 <__d2b+0x54>
 8008048:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800804c:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8008050:	6030      	str	r0, [r6, #0]
 8008052:	6918      	ldr	r0, [r3, #16]
 8008054:	f7ff fd38 	bl	8007ac8 <__hi0bits>
 8008058:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800805c:	e7e1      	b.n	8008022 <__d2b+0x62>

0800805e <__ratio>:
 800805e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008062:	4688      	mov	r8, r1
 8008064:	4669      	mov	r1, sp
 8008066:	4681      	mov	r9, r0
 8008068:	f7ff ff58 	bl	8007f1c <__b2d>
 800806c:	468b      	mov	fp, r1
 800806e:	4606      	mov	r6, r0
 8008070:	460f      	mov	r7, r1
 8008072:	4640      	mov	r0, r8
 8008074:	a901      	add	r1, sp, #4
 8008076:	f7ff ff51 	bl	8007f1c <__b2d>
 800807a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800807e:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8008082:	460d      	mov	r5, r1
 8008084:	eba3 0c02 	sub.w	ip, r3, r2
 8008088:	e9dd 3200 	ldrd	r3, r2, [sp]
 800808c:	1a9b      	subs	r3, r3, r2
 800808e:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8008092:	2b00      	cmp	r3, #0
 8008094:	bfd5      	itete	le
 8008096:	460a      	movle	r2, r1
 8008098:	463a      	movgt	r2, r7
 800809a:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800809e:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 80080a2:	bfd8      	it	le
 80080a4:	eb02 5503 	addle.w	r5, r2, r3, lsl #20
 80080a8:	462b      	mov	r3, r5
 80080aa:	4602      	mov	r2, r0
 80080ac:	4659      	mov	r1, fp
 80080ae:	4630      	mov	r0, r6
 80080b0:	f7f8 fb3c 	bl	800072c <__aeabi_ddiv>
 80080b4:	b003      	add	sp, #12
 80080b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080080ba <__copybits>:
 80080ba:	3901      	subs	r1, #1
 80080bc:	b510      	push	{r4, lr}
 80080be:	1149      	asrs	r1, r1, #5
 80080c0:	6914      	ldr	r4, [r2, #16]
 80080c2:	3101      	adds	r1, #1
 80080c4:	f102 0314 	add.w	r3, r2, #20
 80080c8:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80080cc:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80080d0:	42a3      	cmp	r3, r4
 80080d2:	4602      	mov	r2, r0
 80080d4:	d303      	bcc.n	80080de <__copybits+0x24>
 80080d6:	2300      	movs	r3, #0
 80080d8:	428a      	cmp	r2, r1
 80080da:	d305      	bcc.n	80080e8 <__copybits+0x2e>
 80080dc:	bd10      	pop	{r4, pc}
 80080de:	f853 2b04 	ldr.w	r2, [r3], #4
 80080e2:	f840 2b04 	str.w	r2, [r0], #4
 80080e6:	e7f3      	b.n	80080d0 <__copybits+0x16>
 80080e8:	f842 3b04 	str.w	r3, [r2], #4
 80080ec:	e7f4      	b.n	80080d8 <__copybits+0x1e>

080080ee <__any_on>:
 80080ee:	f100 0214 	add.w	r2, r0, #20
 80080f2:	6900      	ldr	r0, [r0, #16]
 80080f4:	114b      	asrs	r3, r1, #5
 80080f6:	4298      	cmp	r0, r3
 80080f8:	b510      	push	{r4, lr}
 80080fa:	db11      	blt.n	8008120 <__any_on+0x32>
 80080fc:	dd0a      	ble.n	8008114 <__any_on+0x26>
 80080fe:	f011 011f 	ands.w	r1, r1, #31
 8008102:	d007      	beq.n	8008114 <__any_on+0x26>
 8008104:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8008108:	fa24 f001 	lsr.w	r0, r4, r1
 800810c:	fa00 f101 	lsl.w	r1, r0, r1
 8008110:	428c      	cmp	r4, r1
 8008112:	d10b      	bne.n	800812c <__any_on+0x3e>
 8008114:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8008118:	4293      	cmp	r3, r2
 800811a:	d803      	bhi.n	8008124 <__any_on+0x36>
 800811c:	2000      	movs	r0, #0
 800811e:	bd10      	pop	{r4, pc}
 8008120:	4603      	mov	r3, r0
 8008122:	e7f7      	b.n	8008114 <__any_on+0x26>
 8008124:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8008128:	2900      	cmp	r1, #0
 800812a:	d0f5      	beq.n	8008118 <__any_on+0x2a>
 800812c:	2001      	movs	r0, #1
 800812e:	e7f6      	b.n	800811e <__any_on+0x30>

08008130 <_calloc_r>:
 8008130:	b538      	push	{r3, r4, r5, lr}
 8008132:	fb02 f401 	mul.w	r4, r2, r1
 8008136:	4621      	mov	r1, r4
 8008138:	f000 f854 	bl	80081e4 <_malloc_r>
 800813c:	4605      	mov	r5, r0
 800813e:	b118      	cbz	r0, 8008148 <_calloc_r+0x18>
 8008140:	4622      	mov	r2, r4
 8008142:	2100      	movs	r1, #0
 8008144:	f7fc fd04 	bl	8004b50 <memset>
 8008148:	4628      	mov	r0, r5
 800814a:	bd38      	pop	{r3, r4, r5, pc}

0800814c <_free_r>:
 800814c:	b538      	push	{r3, r4, r5, lr}
 800814e:	4605      	mov	r5, r0
 8008150:	2900      	cmp	r1, #0
 8008152:	d043      	beq.n	80081dc <_free_r+0x90>
 8008154:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008158:	1f0c      	subs	r4, r1, #4
 800815a:	2b00      	cmp	r3, #0
 800815c:	bfb8      	it	lt
 800815e:	18e4      	addlt	r4, r4, r3
 8008160:	f000 fa1b 	bl	800859a <__malloc_lock>
 8008164:	4a1e      	ldr	r2, [pc, #120]	; (80081e0 <_free_r+0x94>)
 8008166:	6813      	ldr	r3, [r2, #0]
 8008168:	4610      	mov	r0, r2
 800816a:	b933      	cbnz	r3, 800817a <_free_r+0x2e>
 800816c:	6063      	str	r3, [r4, #4]
 800816e:	6014      	str	r4, [r2, #0]
 8008170:	4628      	mov	r0, r5
 8008172:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008176:	f000 ba11 	b.w	800859c <__malloc_unlock>
 800817a:	42a3      	cmp	r3, r4
 800817c:	d90b      	bls.n	8008196 <_free_r+0x4a>
 800817e:	6821      	ldr	r1, [r4, #0]
 8008180:	1862      	adds	r2, r4, r1
 8008182:	4293      	cmp	r3, r2
 8008184:	bf01      	itttt	eq
 8008186:	681a      	ldreq	r2, [r3, #0]
 8008188:	685b      	ldreq	r3, [r3, #4]
 800818a:	1852      	addeq	r2, r2, r1
 800818c:	6022      	streq	r2, [r4, #0]
 800818e:	6063      	str	r3, [r4, #4]
 8008190:	6004      	str	r4, [r0, #0]
 8008192:	e7ed      	b.n	8008170 <_free_r+0x24>
 8008194:	4613      	mov	r3, r2
 8008196:	685a      	ldr	r2, [r3, #4]
 8008198:	b10a      	cbz	r2, 800819e <_free_r+0x52>
 800819a:	42a2      	cmp	r2, r4
 800819c:	d9fa      	bls.n	8008194 <_free_r+0x48>
 800819e:	6819      	ldr	r1, [r3, #0]
 80081a0:	1858      	adds	r0, r3, r1
 80081a2:	42a0      	cmp	r0, r4
 80081a4:	d10b      	bne.n	80081be <_free_r+0x72>
 80081a6:	6820      	ldr	r0, [r4, #0]
 80081a8:	4401      	add	r1, r0
 80081aa:	1858      	adds	r0, r3, r1
 80081ac:	4282      	cmp	r2, r0
 80081ae:	6019      	str	r1, [r3, #0]
 80081b0:	d1de      	bne.n	8008170 <_free_r+0x24>
 80081b2:	6810      	ldr	r0, [r2, #0]
 80081b4:	6852      	ldr	r2, [r2, #4]
 80081b6:	4401      	add	r1, r0
 80081b8:	6019      	str	r1, [r3, #0]
 80081ba:	605a      	str	r2, [r3, #4]
 80081bc:	e7d8      	b.n	8008170 <_free_r+0x24>
 80081be:	d902      	bls.n	80081c6 <_free_r+0x7a>
 80081c0:	230c      	movs	r3, #12
 80081c2:	602b      	str	r3, [r5, #0]
 80081c4:	e7d4      	b.n	8008170 <_free_r+0x24>
 80081c6:	6820      	ldr	r0, [r4, #0]
 80081c8:	1821      	adds	r1, r4, r0
 80081ca:	428a      	cmp	r2, r1
 80081cc:	bf01      	itttt	eq
 80081ce:	6811      	ldreq	r1, [r2, #0]
 80081d0:	6852      	ldreq	r2, [r2, #4]
 80081d2:	1809      	addeq	r1, r1, r0
 80081d4:	6021      	streq	r1, [r4, #0]
 80081d6:	6062      	str	r2, [r4, #4]
 80081d8:	605c      	str	r4, [r3, #4]
 80081da:	e7c9      	b.n	8008170 <_free_r+0x24>
 80081dc:	bd38      	pop	{r3, r4, r5, pc}
 80081de:	bf00      	nop
 80081e0:	20000650 	.word	0x20000650

080081e4 <_malloc_r>:
 80081e4:	b570      	push	{r4, r5, r6, lr}
 80081e6:	1ccd      	adds	r5, r1, #3
 80081e8:	f025 0503 	bic.w	r5, r5, #3
 80081ec:	3508      	adds	r5, #8
 80081ee:	2d0c      	cmp	r5, #12
 80081f0:	bf38      	it	cc
 80081f2:	250c      	movcc	r5, #12
 80081f4:	2d00      	cmp	r5, #0
 80081f6:	4606      	mov	r6, r0
 80081f8:	db01      	blt.n	80081fe <_malloc_r+0x1a>
 80081fa:	42a9      	cmp	r1, r5
 80081fc:	d903      	bls.n	8008206 <_malloc_r+0x22>
 80081fe:	230c      	movs	r3, #12
 8008200:	6033      	str	r3, [r6, #0]
 8008202:	2000      	movs	r0, #0
 8008204:	bd70      	pop	{r4, r5, r6, pc}
 8008206:	f000 f9c8 	bl	800859a <__malloc_lock>
 800820a:	4a21      	ldr	r2, [pc, #132]	; (8008290 <_malloc_r+0xac>)
 800820c:	6814      	ldr	r4, [r2, #0]
 800820e:	4621      	mov	r1, r4
 8008210:	b991      	cbnz	r1, 8008238 <_malloc_r+0x54>
 8008212:	4c20      	ldr	r4, [pc, #128]	; (8008294 <_malloc_r+0xb0>)
 8008214:	6823      	ldr	r3, [r4, #0]
 8008216:	b91b      	cbnz	r3, 8008220 <_malloc_r+0x3c>
 8008218:	4630      	mov	r0, r6
 800821a:	f000 f98f 	bl	800853c <_sbrk_r>
 800821e:	6020      	str	r0, [r4, #0]
 8008220:	4629      	mov	r1, r5
 8008222:	4630      	mov	r0, r6
 8008224:	f000 f98a 	bl	800853c <_sbrk_r>
 8008228:	1c43      	adds	r3, r0, #1
 800822a:	d124      	bne.n	8008276 <_malloc_r+0x92>
 800822c:	230c      	movs	r3, #12
 800822e:	4630      	mov	r0, r6
 8008230:	6033      	str	r3, [r6, #0]
 8008232:	f000 f9b3 	bl	800859c <__malloc_unlock>
 8008236:	e7e4      	b.n	8008202 <_malloc_r+0x1e>
 8008238:	680b      	ldr	r3, [r1, #0]
 800823a:	1b5b      	subs	r3, r3, r5
 800823c:	d418      	bmi.n	8008270 <_malloc_r+0x8c>
 800823e:	2b0b      	cmp	r3, #11
 8008240:	d90f      	bls.n	8008262 <_malloc_r+0x7e>
 8008242:	600b      	str	r3, [r1, #0]
 8008244:	18cc      	adds	r4, r1, r3
 8008246:	50cd      	str	r5, [r1, r3]
 8008248:	4630      	mov	r0, r6
 800824a:	f000 f9a7 	bl	800859c <__malloc_unlock>
 800824e:	f104 000b 	add.w	r0, r4, #11
 8008252:	1d23      	adds	r3, r4, #4
 8008254:	f020 0007 	bic.w	r0, r0, #7
 8008258:	1ac3      	subs	r3, r0, r3
 800825a:	d0d3      	beq.n	8008204 <_malloc_r+0x20>
 800825c:	425a      	negs	r2, r3
 800825e:	50e2      	str	r2, [r4, r3]
 8008260:	e7d0      	b.n	8008204 <_malloc_r+0x20>
 8008262:	684b      	ldr	r3, [r1, #4]
 8008264:	428c      	cmp	r4, r1
 8008266:	bf16      	itet	ne
 8008268:	6063      	strne	r3, [r4, #4]
 800826a:	6013      	streq	r3, [r2, #0]
 800826c:	460c      	movne	r4, r1
 800826e:	e7eb      	b.n	8008248 <_malloc_r+0x64>
 8008270:	460c      	mov	r4, r1
 8008272:	6849      	ldr	r1, [r1, #4]
 8008274:	e7cc      	b.n	8008210 <_malloc_r+0x2c>
 8008276:	1cc4      	adds	r4, r0, #3
 8008278:	f024 0403 	bic.w	r4, r4, #3
 800827c:	42a0      	cmp	r0, r4
 800827e:	d005      	beq.n	800828c <_malloc_r+0xa8>
 8008280:	1a21      	subs	r1, r4, r0
 8008282:	4630      	mov	r0, r6
 8008284:	f000 f95a 	bl	800853c <_sbrk_r>
 8008288:	3001      	adds	r0, #1
 800828a:	d0cf      	beq.n	800822c <_malloc_r+0x48>
 800828c:	6025      	str	r5, [r4, #0]
 800828e:	e7db      	b.n	8008248 <_malloc_r+0x64>
 8008290:	20000650 	.word	0x20000650
 8008294:	20000654 	.word	0x20000654

08008298 <__ssputs_r>:
 8008298:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800829c:	688e      	ldr	r6, [r1, #8]
 800829e:	4682      	mov	sl, r0
 80082a0:	429e      	cmp	r6, r3
 80082a2:	460c      	mov	r4, r1
 80082a4:	4690      	mov	r8, r2
 80082a6:	4699      	mov	r9, r3
 80082a8:	d837      	bhi.n	800831a <__ssputs_r+0x82>
 80082aa:	898a      	ldrh	r2, [r1, #12]
 80082ac:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80082b0:	d031      	beq.n	8008316 <__ssputs_r+0x7e>
 80082b2:	2302      	movs	r3, #2
 80082b4:	6825      	ldr	r5, [r4, #0]
 80082b6:	6909      	ldr	r1, [r1, #16]
 80082b8:	1a6f      	subs	r7, r5, r1
 80082ba:	6965      	ldr	r5, [r4, #20]
 80082bc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80082c0:	fb95 f5f3 	sdiv	r5, r5, r3
 80082c4:	f109 0301 	add.w	r3, r9, #1
 80082c8:	443b      	add	r3, r7
 80082ca:	429d      	cmp	r5, r3
 80082cc:	bf38      	it	cc
 80082ce:	461d      	movcc	r5, r3
 80082d0:	0553      	lsls	r3, r2, #21
 80082d2:	d530      	bpl.n	8008336 <__ssputs_r+0x9e>
 80082d4:	4629      	mov	r1, r5
 80082d6:	f7ff ff85 	bl	80081e4 <_malloc_r>
 80082da:	4606      	mov	r6, r0
 80082dc:	b950      	cbnz	r0, 80082f4 <__ssputs_r+0x5c>
 80082de:	230c      	movs	r3, #12
 80082e0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80082e4:	f8ca 3000 	str.w	r3, [sl]
 80082e8:	89a3      	ldrh	r3, [r4, #12]
 80082ea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80082ee:	81a3      	strh	r3, [r4, #12]
 80082f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80082f4:	463a      	mov	r2, r7
 80082f6:	6921      	ldr	r1, [r4, #16]
 80082f8:	f7fc fc06 	bl	8004b08 <memcpy>
 80082fc:	89a3      	ldrh	r3, [r4, #12]
 80082fe:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008302:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008306:	81a3      	strh	r3, [r4, #12]
 8008308:	6126      	str	r6, [r4, #16]
 800830a:	443e      	add	r6, r7
 800830c:	6026      	str	r6, [r4, #0]
 800830e:	464e      	mov	r6, r9
 8008310:	6165      	str	r5, [r4, #20]
 8008312:	1bed      	subs	r5, r5, r7
 8008314:	60a5      	str	r5, [r4, #8]
 8008316:	454e      	cmp	r6, r9
 8008318:	d900      	bls.n	800831c <__ssputs_r+0x84>
 800831a:	464e      	mov	r6, r9
 800831c:	4632      	mov	r2, r6
 800831e:	4641      	mov	r1, r8
 8008320:	6820      	ldr	r0, [r4, #0]
 8008322:	f7fc fbfc 	bl	8004b1e <memmove>
 8008326:	68a3      	ldr	r3, [r4, #8]
 8008328:	2000      	movs	r0, #0
 800832a:	1b9b      	subs	r3, r3, r6
 800832c:	60a3      	str	r3, [r4, #8]
 800832e:	6823      	ldr	r3, [r4, #0]
 8008330:	441e      	add	r6, r3
 8008332:	6026      	str	r6, [r4, #0]
 8008334:	e7dc      	b.n	80082f0 <__ssputs_r+0x58>
 8008336:	462a      	mov	r2, r5
 8008338:	f000 f931 	bl	800859e <_realloc_r>
 800833c:	4606      	mov	r6, r0
 800833e:	2800      	cmp	r0, #0
 8008340:	d1e2      	bne.n	8008308 <__ssputs_r+0x70>
 8008342:	6921      	ldr	r1, [r4, #16]
 8008344:	4650      	mov	r0, sl
 8008346:	f7ff ff01 	bl	800814c <_free_r>
 800834a:	e7c8      	b.n	80082de <__ssputs_r+0x46>

0800834c <_svfiprintf_r>:
 800834c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008350:	461d      	mov	r5, r3
 8008352:	898b      	ldrh	r3, [r1, #12]
 8008354:	b09d      	sub	sp, #116	; 0x74
 8008356:	061f      	lsls	r7, r3, #24
 8008358:	4680      	mov	r8, r0
 800835a:	460c      	mov	r4, r1
 800835c:	4616      	mov	r6, r2
 800835e:	d50f      	bpl.n	8008380 <_svfiprintf_r+0x34>
 8008360:	690b      	ldr	r3, [r1, #16]
 8008362:	b96b      	cbnz	r3, 8008380 <_svfiprintf_r+0x34>
 8008364:	2140      	movs	r1, #64	; 0x40
 8008366:	f7ff ff3d 	bl	80081e4 <_malloc_r>
 800836a:	6020      	str	r0, [r4, #0]
 800836c:	6120      	str	r0, [r4, #16]
 800836e:	b928      	cbnz	r0, 800837c <_svfiprintf_r+0x30>
 8008370:	230c      	movs	r3, #12
 8008372:	f8c8 3000 	str.w	r3, [r8]
 8008376:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800837a:	e0c8      	b.n	800850e <_svfiprintf_r+0x1c2>
 800837c:	2340      	movs	r3, #64	; 0x40
 800837e:	6163      	str	r3, [r4, #20]
 8008380:	2300      	movs	r3, #0
 8008382:	9309      	str	r3, [sp, #36]	; 0x24
 8008384:	2320      	movs	r3, #32
 8008386:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800838a:	2330      	movs	r3, #48	; 0x30
 800838c:	f04f 0b01 	mov.w	fp, #1
 8008390:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008394:	9503      	str	r5, [sp, #12]
 8008396:	4637      	mov	r7, r6
 8008398:	463d      	mov	r5, r7
 800839a:	f815 3b01 	ldrb.w	r3, [r5], #1
 800839e:	b10b      	cbz	r3, 80083a4 <_svfiprintf_r+0x58>
 80083a0:	2b25      	cmp	r3, #37	; 0x25
 80083a2:	d13e      	bne.n	8008422 <_svfiprintf_r+0xd6>
 80083a4:	ebb7 0a06 	subs.w	sl, r7, r6
 80083a8:	d00b      	beq.n	80083c2 <_svfiprintf_r+0x76>
 80083aa:	4653      	mov	r3, sl
 80083ac:	4632      	mov	r2, r6
 80083ae:	4621      	mov	r1, r4
 80083b0:	4640      	mov	r0, r8
 80083b2:	f7ff ff71 	bl	8008298 <__ssputs_r>
 80083b6:	3001      	adds	r0, #1
 80083b8:	f000 80a4 	beq.w	8008504 <_svfiprintf_r+0x1b8>
 80083bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80083be:	4453      	add	r3, sl
 80083c0:	9309      	str	r3, [sp, #36]	; 0x24
 80083c2:	783b      	ldrb	r3, [r7, #0]
 80083c4:	2b00      	cmp	r3, #0
 80083c6:	f000 809d 	beq.w	8008504 <_svfiprintf_r+0x1b8>
 80083ca:	2300      	movs	r3, #0
 80083cc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80083d0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80083d4:	9304      	str	r3, [sp, #16]
 80083d6:	9307      	str	r3, [sp, #28]
 80083d8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80083dc:	931a      	str	r3, [sp, #104]	; 0x68
 80083de:	462f      	mov	r7, r5
 80083e0:	2205      	movs	r2, #5
 80083e2:	f817 1b01 	ldrb.w	r1, [r7], #1
 80083e6:	4850      	ldr	r0, [pc, #320]	; (8008528 <_svfiprintf_r+0x1dc>)
 80083e8:	f7ff fa9c 	bl	8007924 <memchr>
 80083ec:	9b04      	ldr	r3, [sp, #16]
 80083ee:	b9d0      	cbnz	r0, 8008426 <_svfiprintf_r+0xda>
 80083f0:	06d9      	lsls	r1, r3, #27
 80083f2:	bf44      	itt	mi
 80083f4:	2220      	movmi	r2, #32
 80083f6:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80083fa:	071a      	lsls	r2, r3, #28
 80083fc:	bf44      	itt	mi
 80083fe:	222b      	movmi	r2, #43	; 0x2b
 8008400:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8008404:	782a      	ldrb	r2, [r5, #0]
 8008406:	2a2a      	cmp	r2, #42	; 0x2a
 8008408:	d015      	beq.n	8008436 <_svfiprintf_r+0xea>
 800840a:	462f      	mov	r7, r5
 800840c:	2000      	movs	r0, #0
 800840e:	250a      	movs	r5, #10
 8008410:	9a07      	ldr	r2, [sp, #28]
 8008412:	4639      	mov	r1, r7
 8008414:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008418:	3b30      	subs	r3, #48	; 0x30
 800841a:	2b09      	cmp	r3, #9
 800841c:	d94d      	bls.n	80084ba <_svfiprintf_r+0x16e>
 800841e:	b1b8      	cbz	r0, 8008450 <_svfiprintf_r+0x104>
 8008420:	e00f      	b.n	8008442 <_svfiprintf_r+0xf6>
 8008422:	462f      	mov	r7, r5
 8008424:	e7b8      	b.n	8008398 <_svfiprintf_r+0x4c>
 8008426:	4a40      	ldr	r2, [pc, #256]	; (8008528 <_svfiprintf_r+0x1dc>)
 8008428:	463d      	mov	r5, r7
 800842a:	1a80      	subs	r0, r0, r2
 800842c:	fa0b f000 	lsl.w	r0, fp, r0
 8008430:	4318      	orrs	r0, r3
 8008432:	9004      	str	r0, [sp, #16]
 8008434:	e7d3      	b.n	80083de <_svfiprintf_r+0x92>
 8008436:	9a03      	ldr	r2, [sp, #12]
 8008438:	1d11      	adds	r1, r2, #4
 800843a:	6812      	ldr	r2, [r2, #0]
 800843c:	9103      	str	r1, [sp, #12]
 800843e:	2a00      	cmp	r2, #0
 8008440:	db01      	blt.n	8008446 <_svfiprintf_r+0xfa>
 8008442:	9207      	str	r2, [sp, #28]
 8008444:	e004      	b.n	8008450 <_svfiprintf_r+0x104>
 8008446:	4252      	negs	r2, r2
 8008448:	f043 0302 	orr.w	r3, r3, #2
 800844c:	9207      	str	r2, [sp, #28]
 800844e:	9304      	str	r3, [sp, #16]
 8008450:	783b      	ldrb	r3, [r7, #0]
 8008452:	2b2e      	cmp	r3, #46	; 0x2e
 8008454:	d10c      	bne.n	8008470 <_svfiprintf_r+0x124>
 8008456:	787b      	ldrb	r3, [r7, #1]
 8008458:	2b2a      	cmp	r3, #42	; 0x2a
 800845a:	d133      	bne.n	80084c4 <_svfiprintf_r+0x178>
 800845c:	9b03      	ldr	r3, [sp, #12]
 800845e:	3702      	adds	r7, #2
 8008460:	1d1a      	adds	r2, r3, #4
 8008462:	681b      	ldr	r3, [r3, #0]
 8008464:	9203      	str	r2, [sp, #12]
 8008466:	2b00      	cmp	r3, #0
 8008468:	bfb8      	it	lt
 800846a:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800846e:	9305      	str	r3, [sp, #20]
 8008470:	4d2e      	ldr	r5, [pc, #184]	; (800852c <_svfiprintf_r+0x1e0>)
 8008472:	2203      	movs	r2, #3
 8008474:	7839      	ldrb	r1, [r7, #0]
 8008476:	4628      	mov	r0, r5
 8008478:	f7ff fa54 	bl	8007924 <memchr>
 800847c:	b138      	cbz	r0, 800848e <_svfiprintf_r+0x142>
 800847e:	2340      	movs	r3, #64	; 0x40
 8008480:	1b40      	subs	r0, r0, r5
 8008482:	fa03 f000 	lsl.w	r0, r3, r0
 8008486:	9b04      	ldr	r3, [sp, #16]
 8008488:	3701      	adds	r7, #1
 800848a:	4303      	orrs	r3, r0
 800848c:	9304      	str	r3, [sp, #16]
 800848e:	7839      	ldrb	r1, [r7, #0]
 8008490:	2206      	movs	r2, #6
 8008492:	4827      	ldr	r0, [pc, #156]	; (8008530 <_svfiprintf_r+0x1e4>)
 8008494:	1c7e      	adds	r6, r7, #1
 8008496:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800849a:	f7ff fa43 	bl	8007924 <memchr>
 800849e:	2800      	cmp	r0, #0
 80084a0:	d038      	beq.n	8008514 <_svfiprintf_r+0x1c8>
 80084a2:	4b24      	ldr	r3, [pc, #144]	; (8008534 <_svfiprintf_r+0x1e8>)
 80084a4:	bb13      	cbnz	r3, 80084ec <_svfiprintf_r+0x1a0>
 80084a6:	9b03      	ldr	r3, [sp, #12]
 80084a8:	3307      	adds	r3, #7
 80084aa:	f023 0307 	bic.w	r3, r3, #7
 80084ae:	3308      	adds	r3, #8
 80084b0:	9303      	str	r3, [sp, #12]
 80084b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80084b4:	444b      	add	r3, r9
 80084b6:	9309      	str	r3, [sp, #36]	; 0x24
 80084b8:	e76d      	b.n	8008396 <_svfiprintf_r+0x4a>
 80084ba:	fb05 3202 	mla	r2, r5, r2, r3
 80084be:	2001      	movs	r0, #1
 80084c0:	460f      	mov	r7, r1
 80084c2:	e7a6      	b.n	8008412 <_svfiprintf_r+0xc6>
 80084c4:	2300      	movs	r3, #0
 80084c6:	250a      	movs	r5, #10
 80084c8:	4619      	mov	r1, r3
 80084ca:	3701      	adds	r7, #1
 80084cc:	9305      	str	r3, [sp, #20]
 80084ce:	4638      	mov	r0, r7
 80084d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80084d4:	3a30      	subs	r2, #48	; 0x30
 80084d6:	2a09      	cmp	r2, #9
 80084d8:	d903      	bls.n	80084e2 <_svfiprintf_r+0x196>
 80084da:	2b00      	cmp	r3, #0
 80084dc:	d0c8      	beq.n	8008470 <_svfiprintf_r+0x124>
 80084de:	9105      	str	r1, [sp, #20]
 80084e0:	e7c6      	b.n	8008470 <_svfiprintf_r+0x124>
 80084e2:	fb05 2101 	mla	r1, r5, r1, r2
 80084e6:	2301      	movs	r3, #1
 80084e8:	4607      	mov	r7, r0
 80084ea:	e7f0      	b.n	80084ce <_svfiprintf_r+0x182>
 80084ec:	ab03      	add	r3, sp, #12
 80084ee:	9300      	str	r3, [sp, #0]
 80084f0:	4622      	mov	r2, r4
 80084f2:	4b11      	ldr	r3, [pc, #68]	; (8008538 <_svfiprintf_r+0x1ec>)
 80084f4:	a904      	add	r1, sp, #16
 80084f6:	4640      	mov	r0, r8
 80084f8:	f7fc fbc4 	bl	8004c84 <_printf_float>
 80084fc:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8008500:	4681      	mov	r9, r0
 8008502:	d1d6      	bne.n	80084b2 <_svfiprintf_r+0x166>
 8008504:	89a3      	ldrh	r3, [r4, #12]
 8008506:	065b      	lsls	r3, r3, #25
 8008508:	f53f af35 	bmi.w	8008376 <_svfiprintf_r+0x2a>
 800850c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800850e:	b01d      	add	sp, #116	; 0x74
 8008510:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008514:	ab03      	add	r3, sp, #12
 8008516:	9300      	str	r3, [sp, #0]
 8008518:	4622      	mov	r2, r4
 800851a:	4b07      	ldr	r3, [pc, #28]	; (8008538 <_svfiprintf_r+0x1ec>)
 800851c:	a904      	add	r1, sp, #16
 800851e:	4640      	mov	r0, r8
 8008520:	f7fc fe5c 	bl	80051dc <_printf_i>
 8008524:	e7ea      	b.n	80084fc <_svfiprintf_r+0x1b0>
 8008526:	bf00      	nop
 8008528:	08008ebc 	.word	0x08008ebc
 800852c:	08008ec2 	.word	0x08008ec2
 8008530:	08008ec6 	.word	0x08008ec6
 8008534:	08004c85 	.word	0x08004c85
 8008538:	08008299 	.word	0x08008299

0800853c <_sbrk_r>:
 800853c:	b538      	push	{r3, r4, r5, lr}
 800853e:	2300      	movs	r3, #0
 8008540:	4c05      	ldr	r4, [pc, #20]	; (8008558 <_sbrk_r+0x1c>)
 8008542:	4605      	mov	r5, r0
 8008544:	4608      	mov	r0, r1
 8008546:	6023      	str	r3, [r4, #0]
 8008548:	f7f9 f9ea 	bl	8001920 <_sbrk>
 800854c:	1c43      	adds	r3, r0, #1
 800854e:	d102      	bne.n	8008556 <_sbrk_r+0x1a>
 8008550:	6823      	ldr	r3, [r4, #0]
 8008552:	b103      	cbz	r3, 8008556 <_sbrk_r+0x1a>
 8008554:	602b      	str	r3, [r5, #0]
 8008556:	bd38      	pop	{r3, r4, r5, pc}
 8008558:	20000950 	.word	0x20000950

0800855c <strncmp>:
 800855c:	b510      	push	{r4, lr}
 800855e:	b16a      	cbz	r2, 800857c <strncmp+0x20>
 8008560:	3901      	subs	r1, #1
 8008562:	1884      	adds	r4, r0, r2
 8008564:	f810 3b01 	ldrb.w	r3, [r0], #1
 8008568:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800856c:	4293      	cmp	r3, r2
 800856e:	d103      	bne.n	8008578 <strncmp+0x1c>
 8008570:	42a0      	cmp	r0, r4
 8008572:	d001      	beq.n	8008578 <strncmp+0x1c>
 8008574:	2b00      	cmp	r3, #0
 8008576:	d1f5      	bne.n	8008564 <strncmp+0x8>
 8008578:	1a98      	subs	r0, r3, r2
 800857a:	bd10      	pop	{r4, pc}
 800857c:	4610      	mov	r0, r2
 800857e:	e7fc      	b.n	800857a <strncmp+0x1e>

08008580 <__ascii_wctomb>:
 8008580:	b149      	cbz	r1, 8008596 <__ascii_wctomb+0x16>
 8008582:	2aff      	cmp	r2, #255	; 0xff
 8008584:	bf8b      	itete	hi
 8008586:	238a      	movhi	r3, #138	; 0x8a
 8008588:	700a      	strbls	r2, [r1, #0]
 800858a:	6003      	strhi	r3, [r0, #0]
 800858c:	2001      	movls	r0, #1
 800858e:	bf88      	it	hi
 8008590:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 8008594:	4770      	bx	lr
 8008596:	4608      	mov	r0, r1
 8008598:	4770      	bx	lr

0800859a <__malloc_lock>:
 800859a:	4770      	bx	lr

0800859c <__malloc_unlock>:
 800859c:	4770      	bx	lr

0800859e <_realloc_r>:
 800859e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80085a0:	4607      	mov	r7, r0
 80085a2:	4614      	mov	r4, r2
 80085a4:	460e      	mov	r6, r1
 80085a6:	b921      	cbnz	r1, 80085b2 <_realloc_r+0x14>
 80085a8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80085ac:	4611      	mov	r1, r2
 80085ae:	f7ff be19 	b.w	80081e4 <_malloc_r>
 80085b2:	b922      	cbnz	r2, 80085be <_realloc_r+0x20>
 80085b4:	f7ff fdca 	bl	800814c <_free_r>
 80085b8:	4625      	mov	r5, r4
 80085ba:	4628      	mov	r0, r5
 80085bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80085be:	f000 f814 	bl	80085ea <_malloc_usable_size_r>
 80085c2:	42a0      	cmp	r0, r4
 80085c4:	d20f      	bcs.n	80085e6 <_realloc_r+0x48>
 80085c6:	4621      	mov	r1, r4
 80085c8:	4638      	mov	r0, r7
 80085ca:	f7ff fe0b 	bl	80081e4 <_malloc_r>
 80085ce:	4605      	mov	r5, r0
 80085d0:	2800      	cmp	r0, #0
 80085d2:	d0f2      	beq.n	80085ba <_realloc_r+0x1c>
 80085d4:	4631      	mov	r1, r6
 80085d6:	4622      	mov	r2, r4
 80085d8:	f7fc fa96 	bl	8004b08 <memcpy>
 80085dc:	4631      	mov	r1, r6
 80085de:	4638      	mov	r0, r7
 80085e0:	f7ff fdb4 	bl	800814c <_free_r>
 80085e4:	e7e9      	b.n	80085ba <_realloc_r+0x1c>
 80085e6:	4635      	mov	r5, r6
 80085e8:	e7e7      	b.n	80085ba <_realloc_r+0x1c>

080085ea <_malloc_usable_size_r>:
 80085ea:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80085ee:	1f18      	subs	r0, r3, #4
 80085f0:	2b00      	cmp	r3, #0
 80085f2:	bfbc      	itt	lt
 80085f4:	580b      	ldrlt	r3, [r1, r0]
 80085f6:	18c0      	addlt	r0, r0, r3
 80085f8:	4770      	bx	lr
	...

080085fc <_init>:
 80085fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80085fe:	bf00      	nop
 8008600:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008602:	bc08      	pop	{r3}
 8008604:	469e      	mov	lr, r3
 8008606:	4770      	bx	lr

08008608 <_fini>:
 8008608:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800860a:	bf00      	nop
 800860c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800860e:	bc08      	pop	{r3}
 8008610:	469e      	mov	lr, r3
 8008612:	4770      	bx	lr
